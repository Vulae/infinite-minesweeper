var hl=Object.defineProperty;var dl=(t,n,e)=>n in t?hl(t,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[n]=e;var P=(t,n,e)=>(dl(t,typeof n!="symbol"?n+"":n,e),e);import{s as ve,e as $,c as F,b as H,f as N,p as B,S as fs,T as Qt,i as X,U as ge,V as _l,n as Ie,w as sn,W as Ia,o as mi,X as pi,r as Le,l as Ge,Y as Pa,M as Pe,a as ne,g as ie,h as R,Z as Sa,z as xa,k as zt,N as ut,_ as he,K as Aa,L as Na,$ as ci,P as ft,Q as ht,R as dt,a0 as Ir,a1 as hs,a2 as xe,t as at,d as ot,q as Xe,j as si,a3 as ml,a4 as ds,B as pl,a5 as _s,a6 as bl,a7 as gl,a8 as yt}from"../chunks/scheduler.Cm_C_nGF.js";import{S as ye,i as ke,g as Nn,t as V,c as Cn,a as j,b as le,d as ce,m as ue,e as fe,f as kt}from"../chunks/index.De5vRBfx.js";function en(t){return(t==null?void 0:t.length)!==void 0?t:Array.from(t)}function _t(t,n){const e={},i={},r={$$scope:1};let s=t.length;for(;s--;){const a=t[s],o=n[s];if(o){for(const f in a)f in o||(i[f]=1);for(const f in o)r[f]||(e[f]=o[f],r[f]=1);t[s]=o}else for(const f in a)r[f]=1}for(const a in i)a in e||(e[a]=void 0);return e}function Dt(t){return typeof t=="object"&&t!==null?t:{}}const J=64;function Pr(t,n){return()=>{t|=0,t=t+2654435769|0;let e=t^t>>>16;e=Math.imul(e,569420461),e=e^e>>>15,e=Math.imul(e,1935289751);const i=(e=e^e>>>15)>>>0;return n?i/4294967296:i}}function Be(t,n,e,i){n=n*2654435761&2147483647,e=e*2246822519&2147483647,i=i*3266489917&2147483647,t=t*668265263&2147483647;let r=n^e^i^t;return r=r*374761393+2654435769,r^=r<<13,r^=r>>17,r^=r<<5,(r>>>0)/4294967296}function vl(t,n){n*=t.reduce((e,i)=>e+i,0);for(let e=0;e<t.length;e++)if(n-=t[e],n<=0)return e;throw new Error("Invalid weights")}function wl(t,n,e,i){let r=1/0,s=-1;for(let a=Math.floor(n)-1;a<Math.ceil(n)+1;a++)for(let o=Math.floor(e)-1;o<Math.ceil(e)+1;o++){const f=a+Be(t,a,o,0)-.5,l=o+Be(t,a,o,1)-.5,u=(f-n)**2+(l-e)**2;u<r&&(r=u,s=vl(i,Be(t,a,o,2)))}if(s==-1)throw new Error("Voronoi noise error.");return s}function ms(t,n,e){function i(_,w,v){return(w-_)*((v*(v*6-15)+10)*v*v*v)+_}const r=(_,w)=>{const v=Be(t,_,w,0);return{x:Math.cos(v),y:Math.sin(v)}},s=(_,w,v,g)=>{const I=r(_,w),k=v-_,L=g-w;return k*I.x+L*I.y},a=Math.floor(n),o=a+1,f=Math.floor(e),l=f+1,u=n-a,p=e-f;return i(i(s(a,f,n,e),s(o,f,n,e),u),i(s(a,l,n,e),s(o,l,n,e),u),p)}var Vi=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function yl(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var te={},pe={},mt={},an={},pt={},on={};const kl=4,ps=0,bs=1,El=2;function ln(t){let n=t.length;for(;--n>=0;)t[n]=0}const Tl=0,Ca=1,Il=2,Pl=3,Sl=258,Sr=29,Mn=256,Tn=Mn+1+Sr,qt=30,xr=19,Ma=2*Tn+1,$t=15,Yi=16,xl=7,Ar=256,Da=16,Oa=17,Ba=18,cr=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),ai=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),Al=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),Ra=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),Nl=512,Et=new Array((Tn+2)*2);ln(Et);const yn=new Array(qt*2);ln(yn);const In=new Array(Nl);ln(In);const Pn=new Array(Sl-Pl+1);ln(Pn);const Nr=new Array(Sr);ln(Nr);const ui=new Array(qt);ln(ui);function Xi(t,n,e,i,r){this.static_tree=t,this.extra_bits=n,this.extra_base=e,this.elems=i,this.max_length=r,this.has_stree=t&&t.length}let La,$a,Fa;function Wi(t,n){this.dyn_tree=t,this.max_code=0,this.stat_desc=n}const Ua=t=>t<256?In[t]:In[256+(t>>>7)],Sn=(t,n)=>{t.pending_buf[t.pending++]=n&255,t.pending_buf[t.pending++]=n>>>8&255},$e=(t,n,e)=>{t.bi_valid>Yi-e?(t.bi_buf|=n<<t.bi_valid&65535,Sn(t,t.bi_buf),t.bi_buf=n>>Yi-t.bi_valid,t.bi_valid+=e-Yi):(t.bi_buf|=n<<t.bi_valid&65535,t.bi_valid+=e)},st=(t,n,e)=>{$e(t,e[n*2],e[n*2+1])},za=(t,n)=>{let e=0;do e|=t&1,t>>>=1,e<<=1;while(--n>0);return e>>>1},Cl=t=>{t.bi_valid===16?(Sn(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=t.bi_buf&255,t.bi_buf>>=8,t.bi_valid-=8)},Ml=(t,n)=>{const e=n.dyn_tree,i=n.max_code,r=n.stat_desc.static_tree,s=n.stat_desc.has_stree,a=n.stat_desc.extra_bits,o=n.stat_desc.extra_base,f=n.stat_desc.max_length;let l,u,p,d,_,w,v=0;for(d=0;d<=$t;d++)t.bl_count[d]=0;for(e[t.heap[t.heap_max]*2+1]=0,l=t.heap_max+1;l<Ma;l++)u=t.heap[l],d=e[e[u*2+1]*2+1]+1,d>f&&(d=f,v++),e[u*2+1]=d,!(u>i)&&(t.bl_count[d]++,_=0,u>=o&&(_=a[u-o]),w=e[u*2],t.opt_len+=w*(d+_),s&&(t.static_len+=w*(r[u*2+1]+_)));if(v!==0){do{for(d=f-1;t.bl_count[d]===0;)d--;t.bl_count[d]--,t.bl_count[d+1]+=2,t.bl_count[f]--,v-=2}while(v>0);for(d=f;d!==0;d--)for(u=t.bl_count[d];u!==0;)p=t.heap[--l],!(p>i)&&(e[p*2+1]!==d&&(t.opt_len+=(d-e[p*2+1])*e[p*2],e[p*2+1]=d),u--)}},Ha=(t,n,e)=>{const i=new Array($t+1);let r=0,s,a;for(s=1;s<=$t;s++)r=r+e[s-1]<<1,i[s]=r;for(a=0;a<=n;a++){let o=t[a*2+1];o!==0&&(t[a*2]=za(i[o]++,o))}},Dl=()=>{let t,n,e,i,r;const s=new Array($t+1);for(e=0,i=0;i<Sr-1;i++)for(Nr[i]=e,t=0;t<1<<cr[i];t++)Pn[e++]=i;for(Pn[e-1]=i,r=0,i=0;i<16;i++)for(ui[i]=r,t=0;t<1<<ai[i];t++)In[r++]=i;for(r>>=7;i<qt;i++)for(ui[i]=r<<7,t=0;t<1<<ai[i]-7;t++)In[256+r++]=i;for(n=0;n<=$t;n++)s[n]=0;for(t=0;t<=143;)Et[t*2+1]=8,t++,s[8]++;for(;t<=255;)Et[t*2+1]=9,t++,s[9]++;for(;t<=279;)Et[t*2+1]=7,t++,s[7]++;for(;t<=287;)Et[t*2+1]=8,t++,s[8]++;for(Ha(Et,Tn+1,s),t=0;t<qt;t++)yn[t*2+1]=5,yn[t*2]=za(t,5);La=new Xi(Et,cr,Mn+1,Tn,$t),$a=new Xi(yn,ai,0,qt,$t),Fa=new Xi(new Array(0),Al,0,xr,xl)},ja=t=>{let n;for(n=0;n<Tn;n++)t.dyn_ltree[n*2]=0;for(n=0;n<qt;n++)t.dyn_dtree[n*2]=0;for(n=0;n<xr;n++)t.bl_tree[n*2]=0;t.dyn_ltree[Ar*2]=1,t.opt_len=t.static_len=0,t.sym_next=t.matches=0},Za=t=>{t.bi_valid>8?Sn(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0},gs=(t,n,e,i)=>{const r=n*2,s=e*2;return t[r]<t[s]||t[r]===t[s]&&i[n]<=i[e]},Gi=(t,n,e)=>{const i=t.heap[e];let r=e<<1;for(;r<=t.heap_len&&(r<t.heap_len&&gs(n,t.heap[r+1],t.heap[r],t.depth)&&r++,!gs(n,i,t.heap[r],t.depth));)t.heap[e]=t.heap[r],e=r,r<<=1;t.heap[e]=i},vs=(t,n,e)=>{let i,r,s=0,a,o;if(t.sym_next!==0)do i=t.pending_buf[t.sym_buf+s++]&255,i+=(t.pending_buf[t.sym_buf+s++]&255)<<8,r=t.pending_buf[t.sym_buf+s++],i===0?st(t,r,n):(a=Pn[r],st(t,a+Mn+1,n),o=cr[a],o!==0&&(r-=Nr[a],$e(t,r,o)),i--,a=Ua(i),st(t,a,e),o=ai[a],o!==0&&(i-=ui[a],$e(t,i,o)));while(s<t.sym_next);st(t,Ar,n)},ur=(t,n)=>{const e=n.dyn_tree,i=n.stat_desc.static_tree,r=n.stat_desc.has_stree,s=n.stat_desc.elems;let a,o,f=-1,l;for(t.heap_len=0,t.heap_max=Ma,a=0;a<s;a++)e[a*2]!==0?(t.heap[++t.heap_len]=f=a,t.depth[a]=0):e[a*2+1]=0;for(;t.heap_len<2;)l=t.heap[++t.heap_len]=f<2?++f:0,e[l*2]=1,t.depth[l]=0,t.opt_len--,r&&(t.static_len-=i[l*2+1]);for(n.max_code=f,a=t.heap_len>>1;a>=1;a--)Gi(t,e,a);l=s;do a=t.heap[1],t.heap[1]=t.heap[t.heap_len--],Gi(t,e,1),o=t.heap[1],t.heap[--t.heap_max]=a,t.heap[--t.heap_max]=o,e[l*2]=e[a*2]+e[o*2],t.depth[l]=(t.depth[a]>=t.depth[o]?t.depth[a]:t.depth[o])+1,e[a*2+1]=e[o*2+1]=l,t.heap[1]=l++,Gi(t,e,1);while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],Ml(t,n),Ha(e,f,t.bl_count)},ws=(t,n,e)=>{let i,r=-1,s,a=n[0*2+1],o=0,f=7,l=4;for(a===0&&(f=138,l=3),n[(e+1)*2+1]=65535,i=0;i<=e;i++)s=a,a=n[(i+1)*2+1],!(++o<f&&s===a)&&(o<l?t.bl_tree[s*2]+=o:s!==0?(s!==r&&t.bl_tree[s*2]++,t.bl_tree[Da*2]++):o<=10?t.bl_tree[Oa*2]++:t.bl_tree[Ba*2]++,o=0,r=s,a===0?(f=138,l=3):s===a?(f=6,l=3):(f=7,l=4))},ys=(t,n,e)=>{let i,r=-1,s,a=n[0*2+1],o=0,f=7,l=4;for(a===0&&(f=138,l=3),i=0;i<=e;i++)if(s=a,a=n[(i+1)*2+1],!(++o<f&&s===a)){if(o<l)do st(t,s,t.bl_tree);while(--o!==0);else s!==0?(s!==r&&(st(t,s,t.bl_tree),o--),st(t,Da,t.bl_tree),$e(t,o-3,2)):o<=10?(st(t,Oa,t.bl_tree),$e(t,o-3,3)):(st(t,Ba,t.bl_tree),$e(t,o-11,7));o=0,r=s,a===0?(f=138,l=3):s===a?(f=6,l=3):(f=7,l=4)}},Ol=t=>{let n;for(ws(t,t.dyn_ltree,t.l_desc.max_code),ws(t,t.dyn_dtree,t.d_desc.max_code),ur(t,t.bl_desc),n=xr-1;n>=3&&t.bl_tree[Ra[n]*2+1]===0;n--);return t.opt_len+=3*(n+1)+5+5+4,n},Bl=(t,n,e,i)=>{let r;for($e(t,n-257,5),$e(t,e-1,5),$e(t,i-4,4),r=0;r<i;r++)$e(t,t.bl_tree[Ra[r]*2+1],3);ys(t,t.dyn_ltree,n-1),ys(t,t.dyn_dtree,e-1)},Rl=t=>{let n=4093624447,e;for(e=0;e<=31;e++,n>>>=1)if(n&1&&t.dyn_ltree[e*2]!==0)return ps;if(t.dyn_ltree[9*2]!==0||t.dyn_ltree[10*2]!==0||t.dyn_ltree[13*2]!==0)return bs;for(e=32;e<Mn;e++)if(t.dyn_ltree[e*2]!==0)return bs;return ps};let ks=!1;const Ll=t=>{ks||(Dl(),ks=!0),t.l_desc=new Wi(t.dyn_ltree,La),t.d_desc=new Wi(t.dyn_dtree,$a),t.bl_desc=new Wi(t.bl_tree,Fa),t.bi_buf=0,t.bi_valid=0,ja(t)},Va=(t,n,e,i)=>{$e(t,(Tl<<1)+(i?1:0),3),Za(t),Sn(t,e),Sn(t,~e),e&&t.pending_buf.set(t.window.subarray(n,n+e),t.pending),t.pending+=e},$l=t=>{$e(t,Ca<<1,3),st(t,Ar,Et),Cl(t)},Fl=(t,n,e,i)=>{let r,s,a=0;t.level>0?(t.strm.data_type===El&&(t.strm.data_type=Rl(t)),ur(t,t.l_desc),ur(t,t.d_desc),a=Ol(t),r=t.opt_len+3+7>>>3,s=t.static_len+3+7>>>3,s<=r&&(r=s)):r=s=e+5,e+4<=r&&n!==-1?Va(t,n,e,i):t.strategy===kl||s===r?($e(t,(Ca<<1)+(i?1:0),3),vs(t,Et,yn)):($e(t,(Il<<1)+(i?1:0),3),Bl(t,t.l_desc.max_code+1,t.d_desc.max_code+1,a+1),vs(t,t.dyn_ltree,t.dyn_dtree)),ja(t),i&&Za(t)},Ul=(t,n,e)=>(t.pending_buf[t.sym_buf+t.sym_next++]=n,t.pending_buf[t.sym_buf+t.sym_next++]=n>>8,t.pending_buf[t.sym_buf+t.sym_next++]=e,n===0?t.dyn_ltree[e*2]++:(t.matches++,n--,t.dyn_ltree[(Pn[e]+Mn+1)*2]++,t.dyn_dtree[Ua(n)*2]++),t.sym_next===t.sym_end);on._tr_init=Ll;on._tr_stored_block=Va;on._tr_flush_block=Fl;on._tr_tally=Ul;on._tr_align=$l;const zl=(t,n,e,i)=>{let r=t&65535|0,s=t>>>16&65535|0,a=0;for(;e!==0;){a=e>2e3?2e3:e,e-=a;do r=r+n[i++]|0,s=s+r|0;while(--a);r%=65521,s%=65521}return r|s<<16|0};var Ya=zl;const Hl=()=>{let t,n=[];for(var e=0;e<256;e++){t=e;for(var i=0;i<8;i++)t=t&1?3988292384^t>>>1:t>>>1;n[e]=t}return n},jl=new Uint32Array(Hl()),Zl=(t,n,e,i)=>{const r=jl,s=i+e;t^=-1;for(let a=i;a<s;a++)t=t>>>8^r[(t^n[a])&255];return t^-1};var Xa=Zl,Cr={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},Yt={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:Vl,_tr_stored_block:fr,_tr_flush_block:Yl,_tr_tally:Nt,_tr_align:Xl}=on,Wa=Ya,St=Xa,Wl=Cr,{Z_NO_FLUSH:Ct,Z_PARTIAL_FLUSH:Gl,Z_FULL_FLUSH:Kl,Z_FINISH:We,Z_BLOCK:Es,Z_OK:Ce,Z_STREAM_END:Ts,Z_STREAM_ERROR:lt,Z_DATA_ERROR:ql,Z_BUF_ERROR:Ki,Z_DEFAULT_COMPRESSION:Jl,Z_FILTERED:Ql,Z_HUFFMAN_ONLY:Kn,Z_RLE:ec,Z_FIXED:tc,Z_DEFAULT_STRATEGY:nc,Z_UNKNOWN:ic,Z_DEFLATED:bi}=Yt,rc=9,sc=15,ac=8,oc=29,lc=256,hr=lc+1+oc,cc=30,uc=19,fc=2*hr+1,hc=15,Q=3,At=258,ct=At+Q+1,dc=32,tn=42,Mr=57,dr=69,_r=73,mr=91,pr=103,Ft=113,gn=666,Re=1,cn=2,Ht=3,un=4,_c=3,Ut=(t,n)=>(t.msg=Wl[n],n),Is=t=>t*2-(t>4?9:0),xt=t=>{let n=t.length;for(;--n>=0;)t[n]=0},mc=t=>{let n,e,i,r=t.w_size;n=t.hash_size,i=n;do e=t.head[--i],t.head[i]=e>=r?e-r:0;while(--n);n=r,i=n;do e=t.prev[--i],t.prev[i]=e>=r?e-r:0;while(--n)};let pc=(t,n,e)=>(n<<t.hash_shift^e)&t.hash_mask,Mt=pc;const ze=t=>{const n=t.state;let e=n.pending;e>t.avail_out&&(e=t.avail_out),e!==0&&(t.output.set(n.pending_buf.subarray(n.pending_out,n.pending_out+e),t.next_out),t.next_out+=e,n.pending_out+=e,t.total_out+=e,t.avail_out-=e,n.pending-=e,n.pending===0&&(n.pending_out=0))},He=(t,n)=>{Yl(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,n),t.block_start=t.strstart,ze(t.strm)},se=(t,n)=>{t.pending_buf[t.pending++]=n},pn=(t,n)=>{t.pending_buf[t.pending++]=n>>>8&255,t.pending_buf[t.pending++]=n&255},br=(t,n,e,i)=>{let r=t.avail_in;return r>i&&(r=i),r===0?0:(t.avail_in-=r,n.set(t.input.subarray(t.next_in,t.next_in+r),e),t.state.wrap===1?t.adler=Wa(t.adler,n,r,e):t.state.wrap===2&&(t.adler=St(t.adler,n,r,e)),t.next_in+=r,t.total_in+=r,r)},Ga=(t,n)=>{let e=t.max_chain_length,i=t.strstart,r,s,a=t.prev_length,o=t.nice_match;const f=t.strstart>t.w_size-ct?t.strstart-(t.w_size-ct):0,l=t.window,u=t.w_mask,p=t.prev,d=t.strstart+At;let _=l[i+a-1],w=l[i+a];t.prev_length>=t.good_match&&(e>>=2),o>t.lookahead&&(o=t.lookahead);do if(r=n,!(l[r+a]!==w||l[r+a-1]!==_||l[r]!==l[i]||l[++r]!==l[i+1])){i+=2,r++;do;while(l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&i<d);if(s=At-(d-i),i=d-At,s>a){if(t.match_start=n,a=s,s>=o)break;_=l[i+a-1],w=l[i+a]}}while((n=p[n&u])>f&&--e!==0);return a<=t.lookahead?a:t.lookahead},nn=t=>{const n=t.w_size;let e,i,r;do{if(i=t.window_size-t.lookahead-t.strstart,t.strstart>=n+(n-ct)&&(t.window.set(t.window.subarray(n,n+n-i),0),t.match_start-=n,t.strstart-=n,t.block_start-=n,t.insert>t.strstart&&(t.insert=t.strstart),mc(t),i+=n),t.strm.avail_in===0)break;if(e=br(t.strm,t.window,t.strstart+t.lookahead,i),t.lookahead+=e,t.lookahead+t.insert>=Q)for(r=t.strstart-t.insert,t.ins_h=t.window[r],t.ins_h=Mt(t,t.ins_h,t.window[r+1]);t.insert&&(t.ins_h=Mt(t,t.ins_h,t.window[r+Q-1]),t.prev[r&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=r,r++,t.insert--,!(t.lookahead+t.insert<Q)););}while(t.lookahead<ct&&t.strm.avail_in!==0)},Ka=(t,n)=>{let e=t.pending_buf_size-5>t.w_size?t.w_size:t.pending_buf_size-5,i,r,s,a=0,o=t.strm.avail_in;do{if(i=65535,s=t.bi_valid+42>>3,t.strm.avail_out<s||(s=t.strm.avail_out-s,r=t.strstart-t.block_start,i>r+t.strm.avail_in&&(i=r+t.strm.avail_in),i>s&&(i=s),i<e&&(i===0&&n!==We||n===Ct||i!==r+t.strm.avail_in)))break;a=n===We&&i===r+t.strm.avail_in?1:0,fr(t,0,0,a),t.pending_buf[t.pending-4]=i,t.pending_buf[t.pending-3]=i>>8,t.pending_buf[t.pending-2]=~i,t.pending_buf[t.pending-1]=~i>>8,ze(t.strm),r&&(r>i&&(r=i),t.strm.output.set(t.window.subarray(t.block_start,t.block_start+r),t.strm.next_out),t.strm.next_out+=r,t.strm.avail_out-=r,t.strm.total_out+=r,t.block_start+=r,i-=r),i&&(br(t.strm,t.strm.output,t.strm.next_out,i),t.strm.next_out+=i,t.strm.avail_out-=i,t.strm.total_out+=i)}while(a===0);return o-=t.strm.avail_in,o&&(o>=t.w_size?(t.matches=2,t.window.set(t.strm.input.subarray(t.strm.next_in-t.w_size,t.strm.next_in),0),t.strstart=t.w_size,t.insert=t.strstart):(t.window_size-t.strstart<=o&&(t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,t.insert>t.strstart&&(t.insert=t.strstart)),t.window.set(t.strm.input.subarray(t.strm.next_in-o,t.strm.next_in),t.strstart),t.strstart+=o,t.insert+=o>t.w_size-t.insert?t.w_size-t.insert:o),t.block_start=t.strstart),t.high_water<t.strstart&&(t.high_water=t.strstart),a?un:n!==Ct&&n!==We&&t.strm.avail_in===0&&t.strstart===t.block_start?cn:(s=t.window_size-t.strstart,t.strm.avail_in>s&&t.block_start>=t.w_size&&(t.block_start-=t.w_size,t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,s+=t.w_size,t.insert>t.strstart&&(t.insert=t.strstart)),s>t.strm.avail_in&&(s=t.strm.avail_in),s&&(br(t.strm,t.window,t.strstart,s),t.strstart+=s,t.insert+=s>t.w_size-t.insert?t.w_size-t.insert:s),t.high_water<t.strstart&&(t.high_water=t.strstart),s=t.bi_valid+42>>3,s=t.pending_buf_size-s>65535?65535:t.pending_buf_size-s,e=s>t.w_size?t.w_size:s,r=t.strstart-t.block_start,(r>=e||(r||n===We)&&n!==Ct&&t.strm.avail_in===0&&r<=s)&&(i=r>s?s:r,a=n===We&&t.strm.avail_in===0&&i===r?1:0,fr(t,t.block_start,i,a),t.block_start+=i,ze(t.strm)),a?Ht:Re)},qi=(t,n)=>{let e,i;for(;;){if(t.lookahead<ct){if(nn(t),t.lookahead<ct&&n===Ct)return Re;if(t.lookahead===0)break}if(e=0,t.lookahead>=Q&&(t.ins_h=Mt(t,t.ins_h,t.window[t.strstart+Q-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),e!==0&&t.strstart-e<=t.w_size-ct&&(t.match_length=Ga(t,e)),t.match_length>=Q)if(i=Nt(t,t.strstart-t.match_start,t.match_length-Q),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=Q){t.match_length--;do t.strstart++,t.ins_h=Mt(t,t.ins_h,t.window[t.strstart+Q-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart;while(--t.match_length!==0);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=Mt(t,t.ins_h,t.window[t.strstart+1]);else i=Nt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(He(t,!1),t.strm.avail_out===0))return Re}return t.insert=t.strstart<Q-1?t.strstart:Q-1,n===We?(He(t,!0),t.strm.avail_out===0?Ht:un):t.sym_next&&(He(t,!1),t.strm.avail_out===0)?Re:cn},Gt=(t,n)=>{let e,i,r;for(;;){if(t.lookahead<ct){if(nn(t),t.lookahead<ct&&n===Ct)return Re;if(t.lookahead===0)break}if(e=0,t.lookahead>=Q&&(t.ins_h=Mt(t,t.ins_h,t.window[t.strstart+Q-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=Q-1,e!==0&&t.prev_length<t.max_lazy_match&&t.strstart-e<=t.w_size-ct&&(t.match_length=Ga(t,e),t.match_length<=5&&(t.strategy===Ql||t.match_length===Q&&t.strstart-t.match_start>4096)&&(t.match_length=Q-1)),t.prev_length>=Q&&t.match_length<=t.prev_length){r=t.strstart+t.lookahead-Q,i=Nt(t,t.strstart-1-t.prev_match,t.prev_length-Q),t.lookahead-=t.prev_length-1,t.prev_length-=2;do++t.strstart<=r&&(t.ins_h=Mt(t,t.ins_h,t.window[t.strstart+Q-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart);while(--t.prev_length!==0);if(t.match_available=0,t.match_length=Q-1,t.strstart++,i&&(He(t,!1),t.strm.avail_out===0))return Re}else if(t.match_available){if(i=Nt(t,0,t.window[t.strstart-1]),i&&He(t,!1),t.strstart++,t.lookahead--,t.strm.avail_out===0)return Re}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=Nt(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<Q-1?t.strstart:Q-1,n===We?(He(t,!0),t.strm.avail_out===0?Ht:un):t.sym_next&&(He(t,!1),t.strm.avail_out===0)?Re:cn},bc=(t,n)=>{let e,i,r,s;const a=t.window;for(;;){if(t.lookahead<=At){if(nn(t),t.lookahead<=At&&n===Ct)return Re;if(t.lookahead===0)break}if(t.match_length=0,t.lookahead>=Q&&t.strstart>0&&(r=t.strstart-1,i=a[r],i===a[++r]&&i===a[++r]&&i===a[++r])){s=t.strstart+At;do;while(i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&r<s);t.match_length=At-(s-r),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=Q?(e=Nt(t,1,t.match_length-Q),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(e=Nt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),e&&(He(t,!1),t.strm.avail_out===0))return Re}return t.insert=0,n===We?(He(t,!0),t.strm.avail_out===0?Ht:un):t.sym_next&&(He(t,!1),t.strm.avail_out===0)?Re:cn},gc=(t,n)=>{let e;for(;;){if(t.lookahead===0&&(nn(t),t.lookahead===0)){if(n===Ct)return Re;break}if(t.match_length=0,e=Nt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,e&&(He(t,!1),t.strm.avail_out===0))return Re}return t.insert=0,n===We?(He(t,!0),t.strm.avail_out===0?Ht:un):t.sym_next&&(He(t,!1),t.strm.avail_out===0)?Re:cn};function it(t,n,e,i,r){this.good_length=t,this.max_lazy=n,this.nice_length=e,this.max_chain=i,this.func=r}const vn=[new it(0,0,0,0,Ka),new it(4,4,8,4,qi),new it(4,5,16,8,qi),new it(4,6,32,32,qi),new it(4,4,16,16,Gt),new it(8,16,32,32,Gt),new it(8,16,128,128,Gt),new it(8,32,128,256,Gt),new it(32,128,258,1024,Gt),new it(32,258,258,4096,Gt)],vc=t=>{t.window_size=2*t.w_size,xt(t.head),t.max_lazy_match=vn[t.level].max_lazy,t.good_match=vn[t.level].good_length,t.nice_match=vn[t.level].nice_length,t.max_chain_length=vn[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=Q-1,t.match_available=0,t.ins_h=0};function wc(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=bi,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(fc*2),this.dyn_dtree=new Uint16Array((2*cc+1)*2),this.bl_tree=new Uint16Array((2*uc+1)*2),xt(this.dyn_ltree),xt(this.dyn_dtree),xt(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(hc+1),this.heap=new Uint16Array(2*hr+1),xt(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(2*hr+1),xt(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const Dn=t=>{if(!t)return 1;const n=t.state;return!n||n.strm!==t||n.status!==tn&&n.status!==Mr&&n.status!==dr&&n.status!==_r&&n.status!==mr&&n.status!==pr&&n.status!==Ft&&n.status!==gn?1:0},qa=t=>{if(Dn(t))return Ut(t,lt);t.total_in=t.total_out=0,t.data_type=ic;const n=t.state;return n.pending=0,n.pending_out=0,n.wrap<0&&(n.wrap=-n.wrap),n.status=n.wrap===2?Mr:n.wrap?tn:Ft,t.adler=n.wrap===2?0:1,n.last_flush=-2,Vl(n),Ce},Ja=t=>{const n=qa(t);return n===Ce&&vc(t.state),n},yc=(t,n)=>Dn(t)||t.state.wrap!==2?lt:(t.state.gzhead=n,Ce),Qa=(t,n,e,i,r,s)=>{if(!t)return lt;let a=1;if(n===Jl&&(n=6),i<0?(a=0,i=-i):i>15&&(a=2,i-=16),r<1||r>rc||e!==bi||i<8||i>15||n<0||n>9||s<0||s>tc||i===8&&a!==1)return Ut(t,lt);i===8&&(i=9);const o=new wc;return t.state=o,o.strm=t,o.status=tn,o.wrap=a,o.gzhead=null,o.w_bits=i,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=r+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+Q-1)/Q),o.window=new Uint8Array(o.w_size*2),o.head=new Uint16Array(o.hash_size),o.prev=new Uint16Array(o.w_size),o.lit_bufsize=1<<r+6,o.pending_buf_size=o.lit_bufsize*4,o.pending_buf=new Uint8Array(o.pending_buf_size),o.sym_buf=o.lit_bufsize,o.sym_end=(o.lit_bufsize-1)*3,o.level=n,o.strategy=s,o.method=e,Ja(t)},kc=(t,n)=>Qa(t,n,bi,sc,ac,nc),Ec=(t,n)=>{if(Dn(t)||n>Es||n<0)return t?Ut(t,lt):lt;const e=t.state;if(!t.output||t.avail_in!==0&&!t.input||e.status===gn&&n!==We)return Ut(t,t.avail_out===0?Ki:lt);const i=e.last_flush;if(e.last_flush=n,e.pending!==0){if(ze(t),t.avail_out===0)return e.last_flush=-1,Ce}else if(t.avail_in===0&&Is(n)<=Is(i)&&n!==We)return Ut(t,Ki);if(e.status===gn&&t.avail_in!==0)return Ut(t,Ki);if(e.status===tn&&e.wrap===0&&(e.status=Ft),e.status===tn){let r=bi+(e.w_bits-8<<4)<<8,s=-1;if(e.strategy>=Kn||e.level<2?s=0:e.level<6?s=1:e.level===6?s=2:s=3,r|=s<<6,e.strstart!==0&&(r|=dc),r+=31-r%31,pn(e,r),e.strstart!==0&&(pn(e,t.adler>>>16),pn(e,t.adler&65535)),t.adler=1,e.status=Ft,ze(t),e.pending!==0)return e.last_flush=-1,Ce}if(e.status===Mr){if(t.adler=0,se(e,31),se(e,139),se(e,8),e.gzhead)se(e,(e.gzhead.text?1:0)+(e.gzhead.hcrc?2:0)+(e.gzhead.extra?4:0)+(e.gzhead.name?8:0)+(e.gzhead.comment?16:0)),se(e,e.gzhead.time&255),se(e,e.gzhead.time>>8&255),se(e,e.gzhead.time>>16&255),se(e,e.gzhead.time>>24&255),se(e,e.level===9?2:e.strategy>=Kn||e.level<2?4:0),se(e,e.gzhead.os&255),e.gzhead.extra&&e.gzhead.extra.length&&(se(e,e.gzhead.extra.length&255),se(e,e.gzhead.extra.length>>8&255)),e.gzhead.hcrc&&(t.adler=St(t.adler,e.pending_buf,e.pending,0)),e.gzindex=0,e.status=dr;else if(se(e,0),se(e,0),se(e,0),se(e,0),se(e,0),se(e,e.level===9?2:e.strategy>=Kn||e.level<2?4:0),se(e,_c),e.status=Ft,ze(t),e.pending!==0)return e.last_flush=-1,Ce}if(e.status===dr){if(e.gzhead.extra){let r=e.pending,s=(e.gzhead.extra.length&65535)-e.gzindex;for(;e.pending+s>e.pending_buf_size;){let o=e.pending_buf_size-e.pending;if(e.pending_buf.set(e.gzhead.extra.subarray(e.gzindex,e.gzindex+o),e.pending),e.pending=e.pending_buf_size,e.gzhead.hcrc&&e.pending>r&&(t.adler=St(t.adler,e.pending_buf,e.pending-r,r)),e.gzindex+=o,ze(t),e.pending!==0)return e.last_flush=-1,Ce;r=0,s-=o}let a=new Uint8Array(e.gzhead.extra);e.pending_buf.set(a.subarray(e.gzindex,e.gzindex+s),e.pending),e.pending+=s,e.gzhead.hcrc&&e.pending>r&&(t.adler=St(t.adler,e.pending_buf,e.pending-r,r)),e.gzindex=0}e.status=_r}if(e.status===_r){if(e.gzhead.name){let r=e.pending,s;do{if(e.pending===e.pending_buf_size){if(e.gzhead.hcrc&&e.pending>r&&(t.adler=St(t.adler,e.pending_buf,e.pending-r,r)),ze(t),e.pending!==0)return e.last_flush=-1,Ce;r=0}e.gzindex<e.gzhead.name.length?s=e.gzhead.name.charCodeAt(e.gzindex++)&255:s=0,se(e,s)}while(s!==0);e.gzhead.hcrc&&e.pending>r&&(t.adler=St(t.adler,e.pending_buf,e.pending-r,r)),e.gzindex=0}e.status=mr}if(e.status===mr){if(e.gzhead.comment){let r=e.pending,s;do{if(e.pending===e.pending_buf_size){if(e.gzhead.hcrc&&e.pending>r&&(t.adler=St(t.adler,e.pending_buf,e.pending-r,r)),ze(t),e.pending!==0)return e.last_flush=-1,Ce;r=0}e.gzindex<e.gzhead.comment.length?s=e.gzhead.comment.charCodeAt(e.gzindex++)&255:s=0,se(e,s)}while(s!==0);e.gzhead.hcrc&&e.pending>r&&(t.adler=St(t.adler,e.pending_buf,e.pending-r,r))}e.status=pr}if(e.status===pr){if(e.gzhead.hcrc){if(e.pending+2>e.pending_buf_size&&(ze(t),e.pending!==0))return e.last_flush=-1,Ce;se(e,t.adler&255),se(e,t.adler>>8&255),t.adler=0}if(e.status=Ft,ze(t),e.pending!==0)return e.last_flush=-1,Ce}if(t.avail_in!==0||e.lookahead!==0||n!==Ct&&e.status!==gn){let r=e.level===0?Ka(e,n):e.strategy===Kn?gc(e,n):e.strategy===ec?bc(e,n):vn[e.level].func(e,n);if((r===Ht||r===un)&&(e.status=gn),r===Re||r===Ht)return t.avail_out===0&&(e.last_flush=-1),Ce;if(r===cn&&(n===Gl?Xl(e):n!==Es&&(fr(e,0,0,!1),n===Kl&&(xt(e.head),e.lookahead===0&&(e.strstart=0,e.block_start=0,e.insert=0))),ze(t),t.avail_out===0))return e.last_flush=-1,Ce}return n!==We?Ce:e.wrap<=0?Ts:(e.wrap===2?(se(e,t.adler&255),se(e,t.adler>>8&255),se(e,t.adler>>16&255),se(e,t.adler>>24&255),se(e,t.total_in&255),se(e,t.total_in>>8&255),se(e,t.total_in>>16&255),se(e,t.total_in>>24&255)):(pn(e,t.adler>>>16),pn(e,t.adler&65535)),ze(t),e.wrap>0&&(e.wrap=-e.wrap),e.pending!==0?Ce:Ts)},Tc=t=>{if(Dn(t))return lt;const n=t.state.status;return t.state=null,n===Ft?Ut(t,ql):Ce},Ic=(t,n)=>{let e=n.length;if(Dn(t))return lt;const i=t.state,r=i.wrap;if(r===2||r===1&&i.status!==tn||i.lookahead)return lt;if(r===1&&(t.adler=Wa(t.adler,n,e,0)),i.wrap=0,e>=i.w_size){r===0&&(xt(i.head),i.strstart=0,i.block_start=0,i.insert=0);let f=new Uint8Array(i.w_size);f.set(n.subarray(e-i.w_size,e),0),n=f,e=i.w_size}const s=t.avail_in,a=t.next_in,o=t.input;for(t.avail_in=e,t.next_in=0,t.input=n,nn(i);i.lookahead>=Q;){let f=i.strstart,l=i.lookahead-(Q-1);do i.ins_h=Mt(i,i.ins_h,i.window[f+Q-1]),i.prev[f&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=f,f++;while(--l);i.strstart=f,i.lookahead=Q-1,nn(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=Q-1,i.match_available=0,t.next_in=a,t.input=o,t.avail_in=s,i.wrap=r,Ce};pt.deflateInit=kc;pt.deflateInit2=Qa;pt.deflateReset=Ja;pt.deflateResetKeep=qa;pt.deflateSetHeader=yc;pt.deflate=Ec;pt.deflateEnd=Tc;pt.deflateSetDictionary=Ic;pt.deflateInfo="pako deflate (from Nodeca project)";var gi={};const Pc=(t,n)=>Object.prototype.hasOwnProperty.call(t,n);gi.assign=function(t){const n=Array.prototype.slice.call(arguments,1);for(;n.length;){const e=n.shift();if(e){if(typeof e!="object")throw new TypeError(e+"must be non-object");for(const i in e)Pc(e,i)&&(t[i]=e[i])}}return t};gi.flattenChunks=t=>{let n=0;for(let i=0,r=t.length;i<r;i++)n+=t[i].length;const e=new Uint8Array(n);for(let i=0,r=0,s=t.length;i<s;i++){let a=t[i];e.set(a,r),r+=a.length}return e};var On={};let eo=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{eo=!1}const xn=new Uint8Array(256);for(let t=0;t<256;t++)xn[t]=t>=252?6:t>=248?5:t>=240?4:t>=224?3:t>=192?2:1;xn[254]=xn[254]=1;On.string2buf=t=>{if(typeof TextEncoder=="function"&&TextEncoder.prototype.encode)return new TextEncoder().encode(t);let n,e,i,r,s,a=t.length,o=0;for(r=0;r<a;r++)e=t.charCodeAt(r),(e&64512)===55296&&r+1<a&&(i=t.charCodeAt(r+1),(i&64512)===56320&&(e=65536+(e-55296<<10)+(i-56320),r++)),o+=e<128?1:e<2048?2:e<65536?3:4;for(n=new Uint8Array(o),s=0,r=0;s<o;r++)e=t.charCodeAt(r),(e&64512)===55296&&r+1<a&&(i=t.charCodeAt(r+1),(i&64512)===56320&&(e=65536+(e-55296<<10)+(i-56320),r++)),e<128?n[s++]=e:e<2048?(n[s++]=192|e>>>6,n[s++]=128|e&63):e<65536?(n[s++]=224|e>>>12,n[s++]=128|e>>>6&63,n[s++]=128|e&63):(n[s++]=240|e>>>18,n[s++]=128|e>>>12&63,n[s++]=128|e>>>6&63,n[s++]=128|e&63);return n};const Sc=(t,n)=>{if(n<65534&&t.subarray&&eo)return String.fromCharCode.apply(null,t.length===n?t:t.subarray(0,n));let e="";for(let i=0;i<n;i++)e+=String.fromCharCode(t[i]);return e};On.buf2string=(t,n)=>{const e=n||t.length;if(typeof TextDecoder=="function"&&TextDecoder.prototype.decode)return new TextDecoder().decode(t.subarray(0,n));let i,r;const s=new Array(e*2);for(r=0,i=0;i<e;){let a=t[i++];if(a<128){s[r++]=a;continue}let o=xn[a];if(o>4){s[r++]=65533,i+=o-1;continue}for(a&=o===2?31:o===3?15:7;o>1&&i<e;)a=a<<6|t[i++]&63,o--;if(o>1){s[r++]=65533;continue}a<65536?s[r++]=a:(a-=65536,s[r++]=55296|a>>10&1023,s[r++]=56320|a&1023)}return Sc(s,r)};On.utf8border=(t,n)=>{n=n||t.length,n>t.length&&(n=t.length);let e=n-1;for(;e>=0&&(t[e]&192)===128;)e--;return e<0||e===0?n:e+xn[t[e]]>n?e:n};function xc(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}var to=xc;const kn=pt,no=gi,io=On,gr=Cr,Ac=to,ro=Object.prototype.toString,{Z_NO_FLUSH:Nc,Z_SYNC_FLUSH:Cc,Z_FULL_FLUSH:Mc,Z_FINISH:Dc,Z_OK:fi,Z_STREAM_END:Oc,Z_DEFAULT_COMPRESSION:Bc,Z_DEFAULT_STRATEGY:Rc,Z_DEFLATED:Lc}=Yt;function Bn(t){this.options=no.assign({level:Bc,method:Lc,chunkSize:16384,windowBits:15,memLevel:8,strategy:Rc},t||{});let n=this.options;n.raw&&n.windowBits>0?n.windowBits=-n.windowBits:n.gzip&&n.windowBits>0&&n.windowBits<16&&(n.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Ac,this.strm.avail_out=0;let e=kn.deflateInit2(this.strm,n.level,n.method,n.windowBits,n.memLevel,n.strategy);if(e!==fi)throw new Error(gr[e]);if(n.header&&kn.deflateSetHeader(this.strm,n.header),n.dictionary){let i;if(typeof n.dictionary=="string"?i=io.string2buf(n.dictionary):ro.call(n.dictionary)==="[object ArrayBuffer]"?i=new Uint8Array(n.dictionary):i=n.dictionary,e=kn.deflateSetDictionary(this.strm,i),e!==fi)throw new Error(gr[e]);this._dict_set=!0}}Bn.prototype.push=function(t,n){const e=this.strm,i=this.options.chunkSize;let r,s;if(this.ended)return!1;for(n===~~n?s=n:s=n===!0?Dc:Nc,typeof t=="string"?e.input=io.string2buf(t):ro.call(t)==="[object ArrayBuffer]"?e.input=new Uint8Array(t):e.input=t,e.next_in=0,e.avail_in=e.input.length;;){if(e.avail_out===0&&(e.output=new Uint8Array(i),e.next_out=0,e.avail_out=i),(s===Cc||s===Mc)&&e.avail_out<=6){this.onData(e.output.subarray(0,e.next_out)),e.avail_out=0;continue}if(r=kn.deflate(e,s),r===Oc)return e.next_out>0&&this.onData(e.output.subarray(0,e.next_out)),r=kn.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===fi;if(e.avail_out===0){this.onData(e.output);continue}if(s>0&&e.next_out>0){this.onData(e.output.subarray(0,e.next_out)),e.avail_out=0;continue}if(e.avail_in===0)break}return!0};Bn.prototype.onData=function(t){this.chunks.push(t)};Bn.prototype.onEnd=function(t){t===fi&&(this.result=no.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};function Dr(t,n){const e=new Bn(n);if(e.push(t,!0),e.err)throw e.msg||gr[e.err];return e.result}function $c(t,n){return n=n||{},n.raw=!0,Dr(t,n)}function Fc(t,n){return n=n||{},n.gzip=!0,Dr(t,n)}an.Deflate=Bn;an.deflate=Dr;an.deflateRaw=$c;an.gzip=Fc;an.constants=Yt;var fn={},Qe={};const qn=16209,Uc=16191;var zc=function(n,e){let i,r,s,a,o,f,l,u,p,d,_,w,v,g,I,k,L,S,O,Z,E,D,x,y;const A=n.state;i=n.next_in,x=n.input,r=i+(n.avail_in-5),s=n.next_out,y=n.output,a=s-(e-n.avail_out),o=s+(n.avail_out-257),f=A.dmax,l=A.wsize,u=A.whave,p=A.wnext,d=A.window,_=A.hold,w=A.bits,v=A.lencode,g=A.distcode,I=(1<<A.lenbits)-1,k=(1<<A.distbits)-1;e:do{w<15&&(_+=x[i++]<<w,w+=8,_+=x[i++]<<w,w+=8),L=v[_&I];t:for(;;){if(S=L>>>24,_>>>=S,w-=S,S=L>>>16&255,S===0)y[s++]=L&65535;else if(S&16){O=L&65535,S&=15,S&&(w<S&&(_+=x[i++]<<w,w+=8),O+=_&(1<<S)-1,_>>>=S,w-=S),w<15&&(_+=x[i++]<<w,w+=8,_+=x[i++]<<w,w+=8),L=g[_&k];n:for(;;){if(S=L>>>24,_>>>=S,w-=S,S=L>>>16&255,S&16){if(Z=L&65535,S&=15,w<S&&(_+=x[i++]<<w,w+=8,w<S&&(_+=x[i++]<<w,w+=8)),Z+=_&(1<<S)-1,Z>f){n.msg="invalid distance too far back",A.mode=qn;break e}if(_>>>=S,w-=S,S=s-a,Z>S){if(S=Z-S,S>u&&A.sane){n.msg="invalid distance too far back",A.mode=qn;break e}if(E=0,D=d,p===0){if(E+=l-S,S<O){O-=S;do y[s++]=d[E++];while(--S);E=s-Z,D=y}}else if(p<S){if(E+=l+p-S,S-=p,S<O){O-=S;do y[s++]=d[E++];while(--S);if(E=0,p<O){S=p,O-=S;do y[s++]=d[E++];while(--S);E=s-Z,D=y}}}else if(E+=p-S,S<O){O-=S;do y[s++]=d[E++];while(--S);E=s-Z,D=y}for(;O>2;)y[s++]=D[E++],y[s++]=D[E++],y[s++]=D[E++],O-=3;O&&(y[s++]=D[E++],O>1&&(y[s++]=D[E++]))}else{E=s-Z;do y[s++]=y[E++],y[s++]=y[E++],y[s++]=y[E++],O-=3;while(O>2);O&&(y[s++]=y[E++],O>1&&(y[s++]=y[E++]))}}else if(S&64){n.msg="invalid distance code",A.mode=qn;break e}else{L=g[(L&65535)+(_&(1<<S)-1)];continue n}break}}else if(S&64)if(S&32){A.mode=Uc;break e}else{n.msg="invalid literal/length code",A.mode=qn;break e}else{L=v[(L&65535)+(_&(1<<S)-1)];continue t}break}}while(i<r&&s<o);O=w>>3,i-=O,w-=O<<3,_&=(1<<w)-1,n.next_in=i,n.next_out=s,n.avail_in=i<r?5+(r-i):5-(i-r),n.avail_out=s<o?257+(o-s):257-(s-o),A.hold=_,A.bits=w};const Kt=15,Ps=852,Ss=592,xs=0,Ji=1,As=2,Hc=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),jc=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),Zc=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),Vc=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),Yc=(t,n,e,i,r,s,a,o)=>{const f=o.bits;let l=0,u=0,p=0,d=0,_=0,w=0,v=0,g=0,I=0,k=0,L,S,O,Z,E,D=null,x;const y=new Uint16Array(Kt+1),A=new Uint16Array(Kt+1);let Y=null,ae,oe,K;for(l=0;l<=Kt;l++)y[l]=0;for(u=0;u<i;u++)y[n[e+u]]++;for(_=f,d=Kt;d>=1&&y[d]===0;d--);if(_>d&&(_=d),d===0)return r[s++]=1<<24|64<<16|0,r[s++]=1<<24|64<<16|0,o.bits=1,0;for(p=1;p<d&&y[p]===0;p++);for(_<p&&(_=p),g=1,l=1;l<=Kt;l++)if(g<<=1,g-=y[l],g<0)return-1;if(g>0&&(t===xs||d!==1))return-1;for(A[1]=0,l=1;l<Kt;l++)A[l+1]=A[l]+y[l];for(u=0;u<i;u++)n[e+u]!==0&&(a[A[n[e+u]]++]=u);if(t===xs?(D=Y=a,x=20):t===Ji?(D=Hc,Y=jc,x=257):(D=Zc,Y=Vc,x=0),k=0,u=0,l=p,E=s,w=_,v=0,O=-1,I=1<<_,Z=I-1,t===Ji&&I>Ps||t===As&&I>Ss)return 1;for(;;){ae=l-v,a[u]+1<x?(oe=0,K=a[u]):a[u]>=x?(oe=Y[a[u]-x],K=D[a[u]-x]):(oe=96,K=0),L=1<<l-v,S=1<<w,p=S;do S-=L,r[E+(k>>v)+S]=ae<<24|oe<<16|K|0;while(S!==0);for(L=1<<l-1;k&L;)L>>=1;if(L!==0?(k&=L-1,k+=L):k=0,u++,--y[l]===0){if(l===d)break;l=n[e+a[u]]}if(l>_&&(k&Z)!==O){for(v===0&&(v=_),E+=p,w=l-v,g=1<<w;w+v<d&&(g-=y[w+v],!(g<=0));)w++,g<<=1;if(I+=1<<w,t===Ji&&I>Ps||t===As&&I>Ss)return 1;O=k&Z,r[O]=_<<24|w<<16|E-s|0}}return k!==0&&(r[E+k]=l-v<<24|64<<16|0),o.bits=_,0};var Xc=Yc;const vr=Ya,rt=Xa,Wc=zc,En=Xc,Gc=0,so=1,ao=2,{Z_FINISH:Ns,Z_BLOCK:Kc,Z_TREES:Jn,Z_OK:jt,Z_STREAM_END:qc,Z_NEED_DICT:Jc,Z_STREAM_ERROR:Ke,Z_DATA_ERROR:oo,Z_MEM_ERROR:lo,Z_BUF_ERROR:Qc,Z_DEFLATED:Cs}=Yt,vi=16180,Ms=16181,Ds=16182,Os=16183,Bs=16184,Rs=16185,Ls=16186,$s=16187,Fs=16188,Us=16189,hi=16190,wt=16191,Qi=16192,zs=16193,er=16194,Hs=16195,js=16196,Zs=16197,Vs=16198,Qn=16199,ei=16200,Ys=16201,Xs=16202,Ws=16203,Gs=16204,Ks=16205,tr=16206,qs=16207,Js=16208,me=16209,co=16210,uo=16211,eu=852,tu=592,nu=15,iu=nu,Qs=t=>(t>>>24&255)+(t>>>8&65280)+((t&65280)<<8)+((t&255)<<24);function ru(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Xt=t=>{if(!t)return 1;const n=t.state;return!n||n.strm!==t||n.mode<vi||n.mode>uo?1:0},fo=t=>{if(Xt(t))return Ke;const n=t.state;return t.total_in=t.total_out=n.total=0,t.msg="",n.wrap&&(t.adler=n.wrap&1),n.mode=vi,n.last=0,n.havedict=0,n.flags=-1,n.dmax=32768,n.head=null,n.hold=0,n.bits=0,n.lencode=n.lendyn=new Int32Array(eu),n.distcode=n.distdyn=new Int32Array(tu),n.sane=1,n.back=-1,jt},ho=t=>{if(Xt(t))return Ke;const n=t.state;return n.wsize=0,n.whave=0,n.wnext=0,fo(t)},_o=(t,n)=>{let e;if(Xt(t))return Ke;const i=t.state;return n<0?(e=0,n=-n):(e=(n>>4)+5,n<48&&(n&=15)),n&&(n<8||n>15)?Ke:(i.window!==null&&i.wbits!==n&&(i.window=null),i.wrap=e,i.wbits=n,ho(t))},mo=(t,n)=>{if(!t)return Ke;const e=new ru;t.state=e,e.strm=t,e.window=null,e.mode=vi;const i=_o(t,n);return i!==jt&&(t.state=null),i},su=t=>mo(t,iu);let ea=!0,nr,ir;const au=t=>{if(ea){nr=new Int32Array(512),ir=new Int32Array(32);let n=0;for(;n<144;)t.lens[n++]=8;for(;n<256;)t.lens[n++]=9;for(;n<280;)t.lens[n++]=7;for(;n<288;)t.lens[n++]=8;for(En(so,t.lens,0,288,nr,0,t.work,{bits:9}),n=0;n<32;)t.lens[n++]=5;En(ao,t.lens,0,32,ir,0,t.work,{bits:5}),ea=!1}t.lencode=nr,t.lenbits=9,t.distcode=ir,t.distbits=5},po=(t,n,e,i)=>{let r;const s=t.state;return s.window===null&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new Uint8Array(s.wsize)),i>=s.wsize?(s.window.set(n.subarray(e-s.wsize,e),0),s.wnext=0,s.whave=s.wsize):(r=s.wsize-s.wnext,r>i&&(r=i),s.window.set(n.subarray(e-i,e-i+r),s.wnext),i-=r,i?(s.window.set(n.subarray(e-i,e),0),s.wnext=i,s.whave=s.wsize):(s.wnext+=r,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=r))),0},ou=(t,n)=>{let e,i,r,s,a,o,f,l,u,p,d,_,w,v,g=0,I,k,L,S,O,Z,E,D;const x=new Uint8Array(4);let y,A;const Y=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(Xt(t)||!t.output||!t.input&&t.avail_in!==0)return Ke;e=t.state,e.mode===wt&&(e.mode=Qi),a=t.next_out,r=t.output,f=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,l=e.hold,u=e.bits,p=o,d=f,D=jt;e:for(;;)switch(e.mode){case vi:if(e.wrap===0){e.mode=Qi;break}for(;u<16;){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}if(e.wrap&2&&l===35615){e.wbits===0&&(e.wbits=15),e.check=0,x[0]=l&255,x[1]=l>>>8&255,e.check=rt(e.check,x,2,0),l=0,u=0,e.mode=Ms;break}if(e.head&&(e.head.done=!1),!(e.wrap&1)||(((l&255)<<8)+(l>>8))%31){t.msg="incorrect header check",e.mode=me;break}if((l&15)!==Cs){t.msg="unknown compression method",e.mode=me;break}if(l>>>=4,u-=4,E=(l&15)+8,e.wbits===0&&(e.wbits=E),E>15||E>e.wbits){t.msg="invalid window size",e.mode=me;break}e.dmax=1<<e.wbits,e.flags=0,t.adler=e.check=1,e.mode=l&512?Us:wt,l=0,u=0;break;case Ms:for(;u<16;){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}if(e.flags=l,(e.flags&255)!==Cs){t.msg="unknown compression method",e.mode=me;break}if(e.flags&57344){t.msg="unknown header flags set",e.mode=me;break}e.head&&(e.head.text=l>>8&1),e.flags&512&&e.wrap&4&&(x[0]=l&255,x[1]=l>>>8&255,e.check=rt(e.check,x,2,0)),l=0,u=0,e.mode=Ds;case Ds:for(;u<32;){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}e.head&&(e.head.time=l),e.flags&512&&e.wrap&4&&(x[0]=l&255,x[1]=l>>>8&255,x[2]=l>>>16&255,x[3]=l>>>24&255,e.check=rt(e.check,x,4,0)),l=0,u=0,e.mode=Os;case Os:for(;u<16;){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}e.head&&(e.head.xflags=l&255,e.head.os=l>>8),e.flags&512&&e.wrap&4&&(x[0]=l&255,x[1]=l>>>8&255,e.check=rt(e.check,x,2,0)),l=0,u=0,e.mode=Bs;case Bs:if(e.flags&1024){for(;u<16;){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}e.length=l,e.head&&(e.head.extra_len=l),e.flags&512&&e.wrap&4&&(x[0]=l&255,x[1]=l>>>8&255,e.check=rt(e.check,x,2,0)),l=0,u=0}else e.head&&(e.head.extra=null);e.mode=Rs;case Rs:if(e.flags&1024&&(_=e.length,_>o&&(_=o),_&&(e.head&&(E=e.head.extra_len-e.length,e.head.extra||(e.head.extra=new Uint8Array(e.head.extra_len)),e.head.extra.set(i.subarray(s,s+_),E)),e.flags&512&&e.wrap&4&&(e.check=rt(e.check,i,_,s)),o-=_,s+=_,e.length-=_),e.length))break e;e.length=0,e.mode=Ls;case Ls:if(e.flags&2048){if(o===0)break e;_=0;do E=i[s+_++],e.head&&E&&e.length<65536&&(e.head.name+=String.fromCharCode(E));while(E&&_<o);if(e.flags&512&&e.wrap&4&&(e.check=rt(e.check,i,_,s)),o-=_,s+=_,E)break e}else e.head&&(e.head.name=null);e.length=0,e.mode=$s;case $s:if(e.flags&4096){if(o===0)break e;_=0;do E=i[s+_++],e.head&&E&&e.length<65536&&(e.head.comment+=String.fromCharCode(E));while(E&&_<o);if(e.flags&512&&e.wrap&4&&(e.check=rt(e.check,i,_,s)),o-=_,s+=_,E)break e}else e.head&&(e.head.comment=null);e.mode=Fs;case Fs:if(e.flags&512){for(;u<16;){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}if(e.wrap&4&&l!==(e.check&65535)){t.msg="header crc mismatch",e.mode=me;break}l=0,u=0}e.head&&(e.head.hcrc=e.flags>>9&1,e.head.done=!0),t.adler=e.check=0,e.mode=wt;break;case Us:for(;u<32;){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}t.adler=e.check=Qs(l),l=0,u=0,e.mode=hi;case hi:if(e.havedict===0)return t.next_out=a,t.avail_out=f,t.next_in=s,t.avail_in=o,e.hold=l,e.bits=u,Jc;t.adler=e.check=1,e.mode=wt;case wt:if(n===Kc||n===Jn)break e;case Qi:if(e.last){l>>>=u&7,u-=u&7,e.mode=tr;break}for(;u<3;){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}switch(e.last=l&1,l>>>=1,u-=1,l&3){case 0:e.mode=zs;break;case 1:if(au(e),e.mode=Qn,n===Jn){l>>>=2,u-=2;break e}break;case 2:e.mode=js;break;case 3:t.msg="invalid block type",e.mode=me}l>>>=2,u-=2;break;case zs:for(l>>>=u&7,u-=u&7;u<32;){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}if((l&65535)!==(l>>>16^65535)){t.msg="invalid stored block lengths",e.mode=me;break}if(e.length=l&65535,l=0,u=0,e.mode=er,n===Jn)break e;case er:e.mode=Hs;case Hs:if(_=e.length,_){if(_>o&&(_=o),_>f&&(_=f),_===0)break e;r.set(i.subarray(s,s+_),a),o-=_,s+=_,f-=_,a+=_,e.length-=_;break}e.mode=wt;break;case js:for(;u<14;){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}if(e.nlen=(l&31)+257,l>>>=5,u-=5,e.ndist=(l&31)+1,l>>>=5,u-=5,e.ncode=(l&15)+4,l>>>=4,u-=4,e.nlen>286||e.ndist>30){t.msg="too many length or distance symbols",e.mode=me;break}e.have=0,e.mode=Zs;case Zs:for(;e.have<e.ncode;){for(;u<3;){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}e.lens[Y[e.have++]]=l&7,l>>>=3,u-=3}for(;e.have<19;)e.lens[Y[e.have++]]=0;if(e.lencode=e.lendyn,e.lenbits=7,y={bits:e.lenbits},D=En(Gc,e.lens,0,19,e.lencode,0,e.work,y),e.lenbits=y.bits,D){t.msg="invalid code lengths set",e.mode=me;break}e.have=0,e.mode=Vs;case Vs:for(;e.have<e.nlen+e.ndist;){for(;g=e.lencode[l&(1<<e.lenbits)-1],I=g>>>24,k=g>>>16&255,L=g&65535,!(I<=u);){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}if(L<16)l>>>=I,u-=I,e.lens[e.have++]=L;else{if(L===16){for(A=I+2;u<A;){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}if(l>>>=I,u-=I,e.have===0){t.msg="invalid bit length repeat",e.mode=me;break}E=e.lens[e.have-1],_=3+(l&3),l>>>=2,u-=2}else if(L===17){for(A=I+3;u<A;){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}l>>>=I,u-=I,E=0,_=3+(l&7),l>>>=3,u-=3}else{for(A=I+7;u<A;){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}l>>>=I,u-=I,E=0,_=11+(l&127),l>>>=7,u-=7}if(e.have+_>e.nlen+e.ndist){t.msg="invalid bit length repeat",e.mode=me;break}for(;_--;)e.lens[e.have++]=E}}if(e.mode===me)break;if(e.lens[256]===0){t.msg="invalid code -- missing end-of-block",e.mode=me;break}if(e.lenbits=9,y={bits:e.lenbits},D=En(so,e.lens,0,e.nlen,e.lencode,0,e.work,y),e.lenbits=y.bits,D){t.msg="invalid literal/lengths set",e.mode=me;break}if(e.distbits=6,e.distcode=e.distdyn,y={bits:e.distbits},D=En(ao,e.lens,e.nlen,e.ndist,e.distcode,0,e.work,y),e.distbits=y.bits,D){t.msg="invalid distances set",e.mode=me;break}if(e.mode=Qn,n===Jn)break e;case Qn:e.mode=ei;case ei:if(o>=6&&f>=258){t.next_out=a,t.avail_out=f,t.next_in=s,t.avail_in=o,e.hold=l,e.bits=u,Wc(t,d),a=t.next_out,r=t.output,f=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,l=e.hold,u=e.bits,e.mode===wt&&(e.back=-1);break}for(e.back=0;g=e.lencode[l&(1<<e.lenbits)-1],I=g>>>24,k=g>>>16&255,L=g&65535,!(I<=u);){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}if(k&&!(k&240)){for(S=I,O=k,Z=L;g=e.lencode[Z+((l&(1<<S+O)-1)>>S)],I=g>>>24,k=g>>>16&255,L=g&65535,!(S+I<=u);){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}l>>>=S,u-=S,e.back+=S}if(l>>>=I,u-=I,e.back+=I,e.length=L,k===0){e.mode=Ks;break}if(k&32){e.back=-1,e.mode=wt;break}if(k&64){t.msg="invalid literal/length code",e.mode=me;break}e.extra=k&15,e.mode=Ys;case Ys:if(e.extra){for(A=e.extra;u<A;){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}e.length+=l&(1<<e.extra)-1,l>>>=e.extra,u-=e.extra,e.back+=e.extra}e.was=e.length,e.mode=Xs;case Xs:for(;g=e.distcode[l&(1<<e.distbits)-1],I=g>>>24,k=g>>>16&255,L=g&65535,!(I<=u);){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}if(!(k&240)){for(S=I,O=k,Z=L;g=e.distcode[Z+((l&(1<<S+O)-1)>>S)],I=g>>>24,k=g>>>16&255,L=g&65535,!(S+I<=u);){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}l>>>=S,u-=S,e.back+=S}if(l>>>=I,u-=I,e.back+=I,k&64){t.msg="invalid distance code",e.mode=me;break}e.offset=L,e.extra=k&15,e.mode=Ws;case Ws:if(e.extra){for(A=e.extra;u<A;){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}e.offset+=l&(1<<e.extra)-1,l>>>=e.extra,u-=e.extra,e.back+=e.extra}if(e.offset>e.dmax){t.msg="invalid distance too far back",e.mode=me;break}e.mode=Gs;case Gs:if(f===0)break e;if(_=d-f,e.offset>_){if(_=e.offset-_,_>e.whave&&e.sane){t.msg="invalid distance too far back",e.mode=me;break}_>e.wnext?(_-=e.wnext,w=e.wsize-_):w=e.wnext-_,_>e.length&&(_=e.length),v=e.window}else v=r,w=a-e.offset,_=e.length;_>f&&(_=f),f-=_,e.length-=_;do r[a++]=v[w++];while(--_);e.length===0&&(e.mode=ei);break;case Ks:if(f===0)break e;r[a++]=e.length,f--,e.mode=ei;break;case tr:if(e.wrap){for(;u<32;){if(o===0)break e;o--,l|=i[s++]<<u,u+=8}if(d-=f,t.total_out+=d,e.total+=d,e.wrap&4&&d&&(t.adler=e.check=e.flags?rt(e.check,r,d,a-d):vr(e.check,r,d,a-d)),d=f,e.wrap&4&&(e.flags?l:Qs(l))!==e.check){t.msg="incorrect data check",e.mode=me;break}l=0,u=0}e.mode=qs;case qs:if(e.wrap&&e.flags){for(;u<32;){if(o===0)break e;o--,l+=i[s++]<<u,u+=8}if(e.wrap&4&&l!==(e.total&4294967295)){t.msg="incorrect length check",e.mode=me;break}l=0,u=0}e.mode=Js;case Js:D=qc;break e;case me:D=oo;break e;case co:return lo;case uo:default:return Ke}return t.next_out=a,t.avail_out=f,t.next_in=s,t.avail_in=o,e.hold=l,e.bits=u,(e.wsize||d!==t.avail_out&&e.mode<me&&(e.mode<tr||n!==Ns))&&po(t,t.output,t.next_out,d-t.avail_out),p-=t.avail_in,d-=t.avail_out,t.total_in+=p,t.total_out+=d,e.total+=d,e.wrap&4&&d&&(t.adler=e.check=e.flags?rt(e.check,r,d,t.next_out-d):vr(e.check,r,d,t.next_out-d)),t.data_type=e.bits+(e.last?64:0)+(e.mode===wt?128:0)+(e.mode===Qn||e.mode===er?256:0),(p===0&&d===0||n===Ns)&&D===jt&&(D=Qc),D},lu=t=>{if(Xt(t))return Ke;let n=t.state;return n.window&&(n.window=null),t.state=null,jt},cu=(t,n)=>{if(Xt(t))return Ke;const e=t.state;return e.wrap&2?(e.head=n,n.done=!1,jt):Ke},uu=(t,n)=>{const e=n.length;let i,r,s;return Xt(t)||(i=t.state,i.wrap!==0&&i.mode!==hi)?Ke:i.mode===hi&&(r=1,r=vr(r,n,e,0),r!==i.check)?oo:(s=po(t,n,e,e),s?(i.mode=co,lo):(i.havedict=1,jt))};Qe.inflateReset=ho;Qe.inflateReset2=_o;Qe.inflateResetKeep=fo;Qe.inflateInit=su;Qe.inflateInit2=mo;Qe.inflate=ou;Qe.inflateEnd=lu;Qe.inflateGetHeader=cu;Qe.inflateSetDictionary=uu;Qe.inflateInfo="pako inflate (from Nodeca project)";function fu(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var hu=fu;const Tt=Qe,bo=gi,wr=On,yr=Cr,du=to,_u=hu,go=Object.prototype.toString,{Z_NO_FLUSH:mu,Z_FINISH:pu,Z_OK:An,Z_STREAM_END:rr,Z_NEED_DICT:sr,Z_STREAM_ERROR:bu,Z_DATA_ERROR:ta,Z_MEM_ERROR:gu}=Yt;function Rn(t){this.options=bo.assign({chunkSize:1024*64,windowBits:15,to:""},t||{});const n=this.options;n.raw&&n.windowBits>=0&&n.windowBits<16&&(n.windowBits=-n.windowBits,n.windowBits===0&&(n.windowBits=-15)),n.windowBits>=0&&n.windowBits<16&&!(t&&t.windowBits)&&(n.windowBits+=32),n.windowBits>15&&n.windowBits<48&&(n.windowBits&15||(n.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new du,this.strm.avail_out=0;let e=Tt.inflateInit2(this.strm,n.windowBits);if(e!==An)throw new Error(yr[e]);if(this.header=new _u,Tt.inflateGetHeader(this.strm,this.header),n.dictionary&&(typeof n.dictionary=="string"?n.dictionary=wr.string2buf(n.dictionary):go.call(n.dictionary)==="[object ArrayBuffer]"&&(n.dictionary=new Uint8Array(n.dictionary)),n.raw&&(e=Tt.inflateSetDictionary(this.strm,n.dictionary),e!==An)))throw new Error(yr[e])}Rn.prototype.push=function(t,n){const e=this.strm,i=this.options.chunkSize,r=this.options.dictionary;let s,a,o;if(this.ended)return!1;for(n===~~n?a=n:a=n===!0?pu:mu,go.call(t)==="[object ArrayBuffer]"?e.input=new Uint8Array(t):e.input=t,e.next_in=0,e.avail_in=e.input.length;;){for(e.avail_out===0&&(e.output=new Uint8Array(i),e.next_out=0,e.avail_out=i),s=Tt.inflate(e,a),s===sr&&r&&(s=Tt.inflateSetDictionary(e,r),s===An?s=Tt.inflate(e,a):s===ta&&(s=sr));e.avail_in>0&&s===rr&&e.state.wrap>0&&t[e.next_in]!==0;)Tt.inflateReset(e),s=Tt.inflate(e,a);switch(s){case bu:case ta:case sr:case gu:return this.onEnd(s),this.ended=!0,!1}if(o=e.avail_out,e.next_out&&(e.avail_out===0||s===rr))if(this.options.to==="string"){let f=wr.utf8border(e.output,e.next_out),l=e.next_out-f,u=wr.buf2string(e.output,f);e.next_out=l,e.avail_out=i-l,l&&e.output.set(e.output.subarray(f,f+l),0),this.onData(u)}else this.onData(e.output.length===e.next_out?e.output:e.output.subarray(0,e.next_out));if(!(s===An&&o===0)){if(s===rr)return s=Tt.inflateEnd(this.strm),this.onEnd(s),this.ended=!0,!0;if(e.avail_in===0)break}}return!0};Rn.prototype.onData=function(t){this.chunks.push(t)};Rn.prototype.onEnd=function(t){t===An&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=bo.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};function Or(t,n){const e=new Rn(n);if(e.push(t),e.err)throw e.msg||yr[e.err];return e.result}function vu(t,n){return n=n||{},n.raw=!0,Or(t,n)}fn.Inflate=Rn;fn.inflate=Or;fn.inflateRaw=vu;fn.ungzip=Or;fn.constants=Yt;const{Deflate:wu,deflate:yu,deflateRaw:ku,gzip:Eu}=an,{Inflate:Tu,inflate:Iu,inflateRaw:Pu,ungzip:Su}=fn,xu=Yt;mt.Deflate=wu;mt.deflate=yu;mt.deflateRaw=ku;mt.gzip=Eu;mt.Inflate=Tu;mt.inflate=Iu;mt.inflateRaw=Pu;mt.ungzip=Su;mt.constants=xu;var Zt={};Object.defineProperty(Zt,"__esModule",{value:!0});Zt.IO=Zt.BitIO=void 0;const Au=1024,Nu=1024;class vo{constructor(n=Au){P(this,"length",0);P(this,"_pointer",0);typeof n=="number"?(this.length=0,this.buffer=new ArrayBuffer(n)):(this.length=n.byteLength,this.buffer=n)}set pointer(n){n>this.length&&(this.length=n),this._pointer=n}get pointer(){return this._pointer}get view(){return new DataView(this.buffer)}final(){return this.buffer.slice(0,this.length)}expect(n){if(this.buffer.byteLength<this.pointer+n){const e=new Uint8Array(this.buffer.byteLength+n+Nu);e.set(new Uint8Array(this.buffer),0),this.buffer=e.buffer}}}class Cu extends vo{getByte(){return this.view.getUint8(this.pointer++)}getBuffer(n){const e=this.buffer.slice(this.pointer,this.pointer+n);return this.pointer+=n,e}putByte(n){this.expect(1),this.view.setUint8(this.pointer++,n)}putBuffer(n){this.expect(n.byteLength),new Uint8Array(this.buffer).set(new Uint8Array(n),this.pointer),this.pointer+=n.byteLength}withholdByte(){const n=this.pointer++;return e=>this.view.setUint8(n,e)}}Zt.IO=Cu;class Mu extends vo{constructor(){super(...arguments);P(this,"_bitPointer",0)}set pointer(e){this._bitPointer=0,super.pointer=e}get pointer(){return super.pointer}set bitPointer(e){e<8?this._bitPointer=e:(this.pointer+=e>>3,this._bitPointer=e&7)}get bitPointer(){return this._bitPointer}flush(){this.bitPointer!=0&&(this.bitPointer=0,this.pointer++)}final(){return this.flush(),super.final()}putBit(e){this.expect(1),this.view.setUint8(this.pointer,this.view.getUint8(this.pointer)|(e?1:0)<<this.bitPointer++)}getBit(){return!!(this.view.getUint8(this.pointer)&1<<this.bitPointer++)}putBits(e,i){for(let r=0;r<i;r++)this.putBit(!!(e>>r&1))}getBits(e){let i=0;for(let r=0;r<e;r++)i|=(this.getBit()?1:0)<<r;return i}}Zt.BitIO=Mu;var de={};Object.defineProperty(de,"__esModule",{value:!0});de.decodeBigInt=yo;de.decodeIndex=Lu;de.encodeBigInt=wo;de.encodeIndex=Ru;de.hashStr=Du;de.hex=Ou;de.stringSort=Bu;function Du(t){let n=5381;for(let e=0;e<t.length;e++)n=(n<<5)+n^t.charCodeAt(e);return n>>>0}function Ou(t,n,e="0x"){return e+t.toString(16).padStart(n*2,"0")}function Bu(t,n){return(t>n?1:0)-(t<n?1:0)}function wo(t,n,e){const i=t<0n;if(i){if(!n)throw new Error("Cannot encode negative bigint when parser is not signed.");t=-t}for(n?(e.putByte(Number((t&0b00111111n)<<2n)|(i?2:0)|(t>0b00111111n?1:0)),t>>=6n):(e.putByte(Number((t&0b01111111n)<<1n)|(t>0b01111111n?1:0)),t>>=7n);t>0n;)e.putByte(Number((t&0b01111111n)<<1n)|(t>0b01111111n?1:0)),t>>=7n}function yo(t,n){let e=n.getByte(),i=t?BigInt(e&252)>>2n:BigInt(e&254)>>1n;const r=t?!!(e&2):!1;let s=t?6:7;for(;e&1;)e=n.getByte(),i|=BigInt((e&254)>>1)<<BigInt(s),s+=7;return r?-i:i}function Ru(t,n,e){if(e<0)throw new Error("EncodeIndex invalid length.");if(n<0||n>=e)throw new Error("EncodeIndex out of bounds.");if(!(e<=1)){if(e==2){t.bitField.putBit(n===1);return}wo(BigInt(n),!1,t.body)}}function Lu(t,n){if(n<0)throw new Error("DecodeIndex invalid length.");let e;if(n<=1?e=0:n==2?e=t.bitField.getBit()?1:0:e=Number(yo(!1,t.body)),e<0||e>=n)throw new Error("DecodeIndex out of bounds.");return e}var ko={exports:{}};(function(t,n){(function(e,i){t.exports=i()})(typeof self<"u"?self:typeof window<"u"?window:Vi,function(){var e="3.7.7",i=e,r=typeof Buffer=="function",s=typeof TextDecoder=="function"?new TextDecoder:void 0,a=typeof TextEncoder=="function"?new TextEncoder:void 0,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",f=Array.prototype.slice.call(o),l=function(T){var z={};return T.forEach(function(q,be){return z[q]=be}),z}(f),u=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,p=String.fromCharCode.bind(String),d=typeof Uint8Array.from=="function"?Uint8Array.from.bind(Uint8Array):function(T){return new Uint8Array(Array.prototype.slice.call(T,0))},_=function(T){return T.replace(/=/g,"").replace(/[+\/]/g,function(z){return z=="+"?"-":"_"})},w=function(T){return T.replace(/[^A-Za-z0-9\+\/]/g,"")},v=function(T){for(var z,q,be,re,M="",W=T.length%3,Te=0;Te<T.length;){if((q=T.charCodeAt(Te++))>255||(be=T.charCodeAt(Te++))>255||(re=T.charCodeAt(Te++))>255)throw new TypeError("invalid character found");z=q<<16|be<<8|re,M+=f[z>>18&63]+f[z>>12&63]+f[z>>6&63]+f[z&63]}return W?M.slice(0,W-3)+"===".substring(W):M},g=typeof btoa=="function"?function(T){return btoa(T)}:r?function(T){return Buffer.from(T,"binary").toString("base64")}:v,I=r?function(T){return Buffer.from(T).toString("base64")}:function(T){for(var z=4096,q=[],be=0,re=T.length;be<re;be+=z)q.push(p.apply(null,T.subarray(be,be+z)));return g(q.join(""))},k=function(T,z){return z===void 0&&(z=!1),z?_(I(T)):I(T)},L=function(T){if(T.length<2){var z=T.charCodeAt(0);return z<128?T:z<2048?p(192|z>>>6)+p(128|z&63):p(224|z>>>12&15)+p(128|z>>>6&63)+p(128|z&63)}else{var z=65536+(T.charCodeAt(0)-55296)*1024+(T.charCodeAt(1)-56320);return p(240|z>>>18&7)+p(128|z>>>12&63)+p(128|z>>>6&63)+p(128|z&63)}},S=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,O=function(T){return T.replace(S,L)},Z=r?function(T){return Buffer.from(T,"utf8").toString("base64")}:a?function(T){return I(a.encode(T))}:function(T){return g(O(T))},E=function(T,z){return z===void 0&&(z=!1),z?_(Z(T)):Z(T)},D=function(T){return E(T,!0)},x=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,y=function(T){switch(T.length){case 4:var z=(7&T.charCodeAt(0))<<18|(63&T.charCodeAt(1))<<12|(63&T.charCodeAt(2))<<6|63&T.charCodeAt(3),q=z-65536;return p((q>>>10)+55296)+p((q&1023)+56320);case 3:return p((15&T.charCodeAt(0))<<12|(63&T.charCodeAt(1))<<6|63&T.charCodeAt(2));default:return p((31&T.charCodeAt(0))<<6|63&T.charCodeAt(1))}},A=function(T){return T.replace(x,y)},Y=function(T){if(T=T.replace(/\s+/g,""),!u.test(T))throw new TypeError("malformed base64.");T+="==".slice(2-(T.length&3));for(var z,q="",be,re,M=0;M<T.length;)z=l[T.charAt(M++)]<<18|l[T.charAt(M++)]<<12|(be=l[T.charAt(M++)])<<6|(re=l[T.charAt(M++)]),q+=be===64?p(z>>16&255):re===64?p(z>>16&255,z>>8&255):p(z>>16&255,z>>8&255,z&255);return q},ae=typeof atob=="function"?function(T){return atob(w(T))}:r?function(T){return Buffer.from(T,"base64").toString("binary")}:Y,oe=r?function(T){return d(Buffer.from(T,"base64"))}:function(T){return d(ae(T).split("").map(function(z){return z.charCodeAt(0)}))},K=function(T){return oe(we(T))},_e=r?function(T){return Buffer.from(T,"base64").toString("utf8")}:s?function(T){return s.decode(oe(T))}:function(T){return A(ae(T))},we=function(T){return w(T.replace(/[-_]/g,function(z){return z=="-"?"+":"/"}))},De=function(T){return _e(we(T))},Fe=function(T){if(typeof T!="string")return!1;var z=T.replace(/\s+/g,"").replace(/={0,2}$/,"");return!/[^\s0-9a-zA-Z\+/]/.test(z)||!/[^\s0-9a-zA-Z\-_]/.test(z)},ee=function(T){return{value:T,enumerable:!1,writable:!0,configurable:!0}},Me=function(){var T=function(z,q){return Object.defineProperty(String.prototype,z,ee(q))};T("fromBase64",function(){return De(this)}),T("toBase64",function(z){return E(this,z)}),T("toBase64URI",function(){return E(this,!0)}),T("toBase64URL",function(){return E(this,!0)}),T("toUint8Array",function(){return K(this)})},Ue=function(){var T=function(z,q){return Object.defineProperty(Uint8Array.prototype,z,ee(q))};T("toBase64",function(z){return k(this,z)}),T("toBase64URI",function(){return k(this,!0)}),T("toBase64URL",function(){return k(this,!0)})},It=function(){Me(),Ue()},qe={version:e,VERSION:i,atob:ae,atobPolyfill:Y,btoa:g,btoaPolyfill:v,fromBase64:De,toBase64:E,encode:E,encodeURI:D,encodeURL:D,utob:O,btou:A,decode:De,isValid:Fe,fromUint8Array:k,toUint8Array:K,extendString:Me,extendUint8Array:Ue,extendBuiltins:It};return qe.Base64={},Object.keys(qe).forEach(function(T){return qe.Base64[T]=qe[T]}),qe})})(ko);var $u=ko.exports;Object.defineProperty(pe,"__esModule",{value:!0});pe.Parser=pe.EncodeContext=pe.DecodeContext=void 0;var Eo=Fu(mt),Jt=Zt,oi=de,To=$u;function Fu(t){return t&&t.__esModule?t:{default:t}}function Uu(t){return Eo.default.deflateRaw(t).buffer}function zu(t){return Eo.default.inflateRaw(t).buffer}function Hu(t,n=!1){return To.Base64.fromUint8Array(new Uint8Array(t),n)}function ju(t){return To.Base64.toUint8Array(t).buffer}class Zu{encode(n,e={}){const i=new So(this,e);i.encode(this,n);const r=i.final();return e.base64??!1?Hu(r,e.base64UrlSafe??!1):r}decode(n){return typeof n=="string"&&(n=ju(n)),new xo(this,n).decode(this)}}pe.Parser=Zu;const Io=1,Po=2;class So{constructor(n,e={}){P(this,"stack",[]);P(this,"bitField",new Jt.BitIO);P(this,"body",new Jt.IO);this.baseType=n,this.compressed=e.compressed??!0,this.forceCompressed=e.forceCompressed??!1}compress(n){if(!this.compressed)return{compressed:!1,data:n};const e=Uu(n);return e.byteLength<n.byteLength||this.forceCompressed?{compressed:!0,data:e}:{compressed:!1,data:n}}final(){const n=new Jt.IO;n.putBuffer(new Uint32Array([this.baseType.magic]).buffer);const e=n.withholdByte(),{compressed:i,data:r}=this.compress(this.bitField.final());(0,oi.encodeBigInt)(BigInt(r.byteLength),!1,n),n.putBuffer(r);const{compressed:s,data:a}=this.compress(this.body.final());return n.putBuffer(a),e((s?Io:0)|(i?Po:0)),n.final()}encode(n,e){this.stack.push(n),n.encodeInternal(this,e),this.stack.pop()}}pe.EncodeContext=So;class xo{constructor(n,e){P(this,"stack",[]);this.baseType=n;const i=new Jt.IO(e),r=new Uint32Array(i.getBuffer(4))[0];if(r!=this.baseType.magic)throw new Error(`ParserContext magic check failed. Expected ${(0,oi.hex)(this.baseType.magic,4)} Got ${(0,oi.hex)(r,4)}`);const s=i.getByte(),a=Number((0,oi.decodeBigInt)(!1,i)),o=this.decompress(i.getBuffer(a),s&Po);this.bitField=new Jt.BitIO(o);const f=this.decompress(i.getBuffer(i.length-i.pointer),s&Io);this.body=new Jt.IO(f)}decompress(n,e){return e?zu(n):n}decode(n){this.stack.push(n);const e=n.decodeInternal(this);return this.stack.pop(),e}}pe.DecodeContext=xo;var wi={};Object.defineProperty(wi,"__esModule",{value:!0});wi.ModifyHashParser=void 0;var Vu=pe,Yu=de;class Xu extends Vu.Parser{constructor(n,e){super(),this.modifier=n,this.parser=e,this.magic=(0,Yu.hashStr)(`ModifyHashParser:${this.parser.magic}:${this.modifier}`)}encodeInternal(n,e){n.encode(this.parser,e)}decodeInternal(n){return n.decode(this.parser)}}wi.ModifyHashParser=Xu;var Ot={};Object.defineProperty(Ot,"__esModule",{value:!0});Ot.BigIntParser=void 0;var Wu=pe,ar=de;class Gu extends Wu.Parser{constructor(n){super(),this.signed=n,this.magic=(0,ar.hashStr)(`BigIntParser:${this.signed?"Signed":"Unsigned"}`)}encodeInternal(n,e){(0,ar.encodeBigInt)(e,this.signed,n.body)}decodeInternal(n){return(0,ar.decodeBigInt)(this.signed,n.body)}}Ot.BigIntParser=Gu;var Ln={};Object.defineProperty(Ln,"__esModule",{value:!0});Ln.BinaryParser=void 0;var Ku=pe,qu=de,na=Ot;class Ju extends Ku.Parser{constructor(){super(...arguments);P(this,"magic",(0,qu.hashStr)("BinaryParser"))}encodeInternal(e,i){e.encode(new na.BigIntParser(!1),BigInt(i.byteLength)),e.body.putBuffer(i)}decodeInternal(e){const i=Number(e.decode(new na.BigIntParser(!1)));return e.body.getBuffer(i)}}Ln.BinaryParser=Ju;var yi={};Object.defineProperty(yi,"__esModule",{value:!0});yi.NumberParser=void 0;var Qu=pe,ef=de;class tf extends Qu.Parser{constructor(n){super(),this.type=n,this.magic=(0,ef.hashStr)(`NumberParser:${this.type}`)}encodeInternal(n,e){switch(n.body.expect(8),this.type){case"u8":n.body.view.setUint8(n.body.pointer,e),n.body.pointer+=1;break;case"u16":n.body.view.setUint16(n.body.pointer,e,!0),n.body.pointer+=2;break;case"u32":n.body.view.setUint32(n.body.pointer,e,!0),n.body.pointer+=4;break;case"u64":n.body.view.setBigUint64(n.body.pointer,e,!0),n.body.pointer+=8;break;case"i8":n.body.view.setInt8(n.body.pointer,e),n.body.pointer+=1;break;case"i16":n.body.view.setInt16(n.body.pointer,e,!0),n.body.pointer+=2;break;case"i32":n.body.view.setInt32(n.body.pointer,e,!0),n.body.pointer+=4;break;case"i64":n.body.view.setBigInt64(n.body.pointer,e,!0),n.body.pointer+=8;break;case"f32":n.body.view.setFloat32(n.body.pointer,e,!0),n.body.pointer+=4;break;case"f64":n.body.view.setFloat64(n.body.pointer,e,!0),n.body.pointer+=8;break;default:throw new Error("NumParser invalid type.")}}decodeInternal(n){let e;switch(this.type){case"u8":e=n.body.view.getUint8(n.body.pointer),n.body.pointer+=1;break;case"u16":e=n.body.view.getUint16(n.body.pointer,!0),n.body.pointer+=2;break;case"u32":e=n.body.view.getUint32(n.body.pointer,!0),n.body.pointer+=4;break;case"u64":e=n.body.view.getBigUint64(n.body.pointer,!0),n.body.pointer+=8;break;case"i8":e=n.body.view.getInt8(n.body.pointer),n.body.pointer+=1;break;case"i16":e=n.body.view.getInt16(n.body.pointer,!0),n.body.pointer+=2;break;case"i32":e=n.body.view.getInt32(n.body.pointer,!0),n.body.pointer+=4;break;case"i64":e=n.body.view.getBigInt64(n.body.pointer,!0),n.body.pointer+=8;break;case"f32":e=n.body.view.getFloat32(n.body.pointer,!0),n.body.pointer+=4;break;case"f64":e=n.body.view.getFloat64(n.body.pointer,!0),n.body.pointer+=8;break;default:throw new Error("NumParser invalid type.")}return e}}yi.NumberParser=tf;var $n={};Object.defineProperty($n,"__esModule",{value:!0});$n.StringParser=void 0;var nf=pe,rf=de,ia=Ln;class sf extends nf.Parser{constructor(){super(...arguments);P(this,"magic",(0,rf.hashStr)("StringParser"))}encodeInternal(e,i){e.encode(new ia.BinaryParser,new TextEncoder().encode(i))}decodeInternal(e){return new TextDecoder("utf-8").decode(e.decode(new ia.BinaryParser))}}$n.StringParser=sf;var ki={};Object.defineProperty(ki,"__esModule",{value:!0});ki.BooleanParser=void 0;var af=pe,of=de;class lf extends af.Parser{constructor(){super(...arguments);P(this,"magic",(0,of.hashStr)("BooleanParser"))}encodeInternal(e,i){e.bitField.putBit(i)}decodeInternal(e){return e.bitField.getBit()}}ki.BooleanParser=lf;var Ei={};Object.defineProperty(Ei,"__esModule",{value:!0});Ei.NullableParser=void 0;var cf=pe,uf=de;class ff extends cf.Parser{constructor(n){super(),this.type=n,this.magic=(0,uf.hashStr)(`NullableParser:${this.type.magic}`)}encodeInternal(n,e){e!==null?(n.bitField.putBit(!0),n.encode(this.type,e)):n.bitField.putBit(!1)}decodeInternal(n){return n.bitField.getBit()?n.decode(this.type):null}}Ei.NullableParser=ff;var Fn={};Object.defineProperty(Fn,"__esModule",{value:!0});Fn.ObjectParser=void 0;var hf=pe,df=de;class _f extends hf.Parser{constructor(n){super(),this.objType=n,this.keys=Object.keys(this.objType).toSorted(),this.magic=(0,df.hashStr)(`StringParser:${this.keys.map(e=>`${String(e)}-${this.objType[e].magic}`).join(",")}`)}encodeInternal(n,e){for(const i of this.keys)n.encode(this.objType[i],e[i])}decodeInternal(n){let e={};for(const i of this.keys)e[i]=n.decode(this.objType[i]);return e}}Fn.ObjectParser=_f;var Ti={};Object.defineProperty(Ti,"__esModule",{value:!0});Ti.ArrayParser=void 0;var mf=pe,pf=de,ra=Ot;class bf extends mf.Parser{constructor(n){super(),this.arrType=n,this.magic=(0,pf.hashStr)(`ArrayParser:${this.arrType.magic}`)}encodeInternal(n,e){n.encode(new ra.BigIntParser(!1),BigInt(e.length));for(const i of e)n.encode(this.arrType,i)}decodeInternal(n){const e=Number(n.decode(new ra.BigIntParser(!1))),i=[];for(let r=0;r<e;r++)i.push(n.decode(this.arrType));return i}}Ti.ArrayParser=bf;var Ii={};Object.defineProperty(Ii,"__esModule",{value:!0});Ii.MapParser=void 0;var gf=pe,vf=de,sa=Ot;class wf extends gf.Parser{constructor(n,e){super(),this.keyType=n,this.valueType=e,this.magic=(0,vf.hashStr)(`MapParser:${this.keyType.magic}-${this.valueType.magic}`)}encodeInternal(n,e){n.encode(new sa.BigIntParser(!1),BigInt(e.size));for(const[i,r]of e.entries())n.encode(this.keyType,i),n.encode(this.valueType,r)}decodeInternal(n){const e=new Map,i=Number(n.decode(new sa.BigIntParser(!1)));for(let r=0;r<i;r++){const s=n.decode(this.keyType),a=n.decode(this.valueType);e.set(s,a)}return e}}Ii.MapParser=wf;var Pi={};Object.defineProperty(Pi,"__esModule",{value:!0});Pi.DateParser=void 0;var yf=pe,kf=de,aa=Ot;class Ef extends yf.Parser{constructor(){super(...arguments);P(this,"magic",(0,kf.hashStr)("DateParser"))}encodeInternal(e,i){e.encode(new aa.BigIntParser(!1),BigInt(i.valueOf()))}decodeInternal(e){return new Date(Number(e.decode(new aa.BigIntParser(!1))))}}Pi.DateParser=Ef;var Si={};Object.defineProperty(Si,"__esModule",{value:!0});Si.TupleParser=void 0;var Tf=pe,If=de;class Pf extends Tf.Parser{constructor(n){super(),this.elementTypes=n,this.magic=(0,If.hashStr)(`TupleParser:${this.elementTypes.map(e=>e.magic).join(",")}`)}encodeInternal(n,e){for(let i=0;i<e.length;i++)n.encode(this.elementTypes[i],e[i])}decodeInternal(n){let e=[];for(let i=0;i<this.elementTypes.length;i++)e.push(n.decode(this.elementTypes[i]));return e}}Si.TupleParser=Pf;var xi={};Object.defineProperty(xi,"__esModule",{value:!0});xi.BranchParser=void 0;var Sf=pe,ti=de;class xf extends Sf.Parser{constructor(n){super(),this.branchTypes=Object.entries(n).toSorted(([e],[i])=>(0,ti.stringSort)(e,i)),this.magic=(0,ti.hashStr)(`BranchParser:${this.branchTypes.map(([e,i])=>`${e}-${i.magic}`).join(",")}`)}encodeInternal(n,e){const i=this.branchTypes.findIndex(([r])=>r==e[0]);if(i===-1)throw new Error("BranchParser: Failed to find key index.");(0,ti.encodeIndex)(n,i,this.branchTypes.length),n.encode(this.branchTypes[i][1],e[1])}decodeInternal(n){const e=(0,ti.decodeIndex)(n,this.branchTypes.length);return[this.branchTypes[e][0],n.decode(this.branchTypes[e][1])]}}xi.BranchParser=xf;var Ai={};Object.defineProperty(Ai,"__esModule",{value:!0});Ai.BranchByKeyParser=void 0;var Af=pe,ni=de,Nf=Fn;class Cf extends Af.Parser{constructor(n,e){super(),this.key=n,this.branchTypes=Object.entries(e).toSorted(([i],[r])=>(0,ni.stringSort)(i,r)).map(([i,r])=>{if(this.key in r)throw new Error(`BranchByKeyParser: Key is included in parser map, remove key ${i}.${this.key}`);return[i,new Nf.ObjectParser(r)]}),this.magic=(0,ni.hashStr)(`BranchByKeyParser:${this.key}:${this.branchTypes.map(([i,r])=>`${i}-${r.magic}`).join(",")}`)}encodeInternal(n,e){const i=this.branchTypes.findIndex(([r])=>r==e[this.key]);if(i===-1)throw new Error("BranchByKeyParser: Failed to find key index.");(0,ni.encodeIndex)(n,i,this.branchTypes.length),n.encode(this.branchTypes[i][1],e)}decodeInternal(n){const e=(0,ni.decodeIndex)(n,this.branchTypes.length);return{...n.decode(this.branchTypes[e][1]),[this.key]:this.branchTypes[e][0]}}}Ai.BranchByKeyParser=Cf;var Ni={};Object.defineProperty(Ni,"__esModule",{value:!0});Ni.EnumParser=void 0;var Mf=pe,ii=de;class Df extends Mf.Parser{constructor(n){super(),this.values=n.toSorted((e,i)=>(0,ii.stringSort)(String(e),String(i))),this.magic=(0,ii.hashStr)(`EnumParser:${this.values.join(",")}`)}encodeInternal(n,e){const i=this.values.findIndex(r=>r==e);if(i===-1)throw new Error("EnumParser: Failed to find key index.");(0,ii.encodeIndex)(n,i,this.values.length)}decodeInternal(n){const e=(0,ii.decodeIndex)(n,this.values.length);return this.values[e]}}Ni.EnumParser=Df;var Ci={};Object.defineProperty(Ci,"__esModule",{value:!0});Ci.EnumFallbackParser=void 0;var Of=pe,ri=de,oa=$n;class Bf extends Of.Parser{constructor(n){super(),this.values=n.toSorted((e,i)=>(0,ri.stringSort)(e,i)),this.magic=(0,ri.hashStr)(`EnumFallbackParser:${this.values.join(",")}`)}encodeInternal(n,e){const i=this.values.findIndex(r=>r==e);i===-1?(n.bitField.putBit(!1),n.encode(new oa.StringParser,e)):(n.bitField.putBit(!0),(0,ri.encodeIndex)(n,i,this.values.length))}decodeInternal(n){if(n.bitField.getBit()){const e=(0,ri.decodeIndex)(n,this.values.length);return this.values[e]}else return n.decode(new oa.StringParser)}}Ci.EnumFallbackParser=Bf;(function(t){Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ArrayParser",{enumerable:!0,get:function(){return d.ArrayParser}}),Object.defineProperty(t,"BigIntParser",{enumerable:!0,get:function(){return s.BigIntParser}}),Object.defineProperty(t,"BinaryParser",{enumerable:!0,get:function(){return a.BinaryParser}}),Object.defineProperty(t,"BitIO",{enumerable:!0,get:function(){return e.BitIO}}),Object.defineProperty(t,"BooleanParser",{enumerable:!0,get:function(){return l.BooleanParser}}),Object.defineProperty(t,"BranchByKeyParser",{enumerable:!0,get:function(){return I.BranchByKeyParser}}),Object.defineProperty(t,"BranchParser",{enumerable:!0,get:function(){return g.BranchParser}}),Object.defineProperty(t,"DateParser",{enumerable:!0,get:function(){return w.DateParser}}),Object.defineProperty(t,"DecodeContext",{enumerable:!0,get:function(){return n.DecodeContext}}),Object.defineProperty(t,"EncodeContext",{enumerable:!0,get:function(){return n.EncodeContext}}),Object.defineProperty(t,"EnumFallbackParser",{enumerable:!0,get:function(){return L.EnumFallbackParser}}),Object.defineProperty(t,"EnumParser",{enumerable:!0,get:function(){return k.EnumParser}}),Object.defineProperty(t,"IO",{enumerable:!0,get:function(){return e.IO}}),Object.defineProperty(t,"MapParser",{enumerable:!0,get:function(){return _.MapParser}}),Object.defineProperty(t,"ModifyHashParser",{enumerable:!0,get:function(){return r.ModifyHashParser}}),Object.defineProperty(t,"NullableParser",{enumerable:!0,get:function(){return u.NullableParser}}),Object.defineProperty(t,"NumberParser",{enumerable:!0,get:function(){return o.NumberParser}}),Object.defineProperty(t,"ObjectParser",{enumerable:!0,get:function(){return p.ObjectParser}}),Object.defineProperty(t,"Parser",{enumerable:!0,get:function(){return n.Parser}}),Object.defineProperty(t,"ParserType",{enumerable:!0,get:function(){return n.ParserType}}),Object.defineProperty(t,"StringParser",{enumerable:!0,get:function(){return f.StringParser}}),Object.defineProperty(t,"TupleParser",{enumerable:!0,get:function(){return v.TupleParser}}),t.array=Y,t.bigint=O,t.binary=Z,t.boolean=x,t.branch=_e,t.branchByKey=we,t.date=oe,Object.defineProperty(t,"decodeBigInt",{enumerable:!0,get:function(){return i.decodeBigInt}}),Object.defineProperty(t,"decodeIndex",{enumerable:!0,get:function(){return i.decodeIndex}}),Object.defineProperty(t,"encodeBigInt",{enumerable:!0,get:function(){return i.encodeBigInt}}),Object.defineProperty(t,"encodeIndex",{enumerable:!0,get:function(){return i.encodeIndex}}),t.enum=De,t.enumFallback=Fe,Object.defineProperty(t,"hashStr",{enumerable:!0,get:function(){return i.hashStr}}),t.map=ae,t.modifyhash=S,t.nullable=y,t.number=E,t.object=A,t.string=D,Object.defineProperty(t,"stringSort",{enumerable:!0,get:function(){return i.stringSort}}),t.tuple=K;var n=pe,e=Zt,i=de,r=wi,s=Ot,a=Ln,o=yi,f=$n,l=ki,u=Ei,p=Fn,d=Ti,_=Ii,w=Pi,v=Si,g=xi,I=Ai,k=Ni,L=Ci;function S(ee,Me){return new r.ModifyHashParser(ee,Me)}function O(ee){return new s.BigIntParser(ee)}function Z(){return new a.BinaryParser}function E(ee){return new o.NumberParser(ee)}function D(){return new f.StringParser}function x(){return new l.BooleanParser}function y(ee){return new u.NullableParser(ee)}function A(ee){return new p.ObjectParser(ee)}function Y(ee){return new d.ArrayParser(ee)}function ae(ee,Me){return new _.MapParser(ee,Me)}function oe(){return new w.DateParser}function K(ee){return new v.TupleParser(ee)}function _e(ee){return new g.BranchParser(ee)}function we(ee,Me){return new I.BranchByKeyParser(ee,Me)}function De(ee){return new k.EnumParser(ee)}function Fe(ee){return new L.EnumFallbackParser(ee)}})(te);function Mi(t){return t<0?0:t>1?1:t}function Rf(t,n,e,i){return Math.sqrt((e-t)**2+(i-n)**2)}function Lf(t,n,e,i,r){return(t<n||t>e)&&console.warn(`Mapped value outside of mapping range. mapRange(${t}, ${n}, ${e}, ${i}, ${r})`),i+(t-n)/(e-n)*(r-i)}function $f(t,n,e,i,r){return Math.floor(Lf(t,n,e,i,r+1))}function la(t){let n=0;for(;t;)t&=t-1,n++;return n}function*Ff(t,n){let e=t,i=n,r=1,s=1;for(;;){for(;2*e*r<s;)yield{x:e,y:i},e+=r;for(;2*i*r<s;)yield{x:e,y:i},i+=r;r=-1*r,s+=1}}function kr(t,n,e){if(t instanceof HTMLCanvasElement){let i;n??!0?i=t:(i=document.createElement("canvas"),i.width=t.width,i.height=t.height);const r=i.getContext("2d",e);if(!r)throw new Error("2d canvas context is not supported on this machine or browser.");return(n??!0)||r.drawImage(t,0,0),[t,r]}else if(t instanceof HTMLImageElement){const i=document.createElement("canvas");i.width=t.width,i.height=t.height;const r=i.getContext("2d",n);if(!r)throw new Error("2d canvas context is not supported on this machine or browser.");return r.drawImage(t,0,0),[i,r]}else if(typeof t=="number"){const i=document.createElement("canvas");i.width=t,i.height=n;const r=i.getContext("2d",e);if(!r)throw new Error("2d canvas context is not supported on this machine or browser.");return[i,r]}else{const i=document.createElement("canvas"),r=i.getContext("2d",t);if(!r)throw new Error("2d canvas context is not supported on this machine or browser.");return[i,r]}}function Uf(t){if(typeof t=="string"){const n=t;t=document.createElement("img"),t.src=n}return t.loading="eager",new Promise((n,e)=>{if(t.complete&&t.naturalWidth!==0)return n(t);const i=()=>{t.removeEventListener("load",i),t.removeEventListener("error",r),n(t)},r=s=>{t.removeEventListener("load",i),t.removeEventListener("error",r),e("Failed to load image.")};t.addEventListener("load",i),t.addEventListener("error",r)})}const Vt=Symbol("TILE_NO_NEARBY");class Br{constructor(n,e,i){P(this,"world");P(this,"x");P(this,"y");P(this,"minesNearbyCache",null);this.world=n,this.x=e,this.y=i}minesNearby(n=!1){if(this.minesNearbyCache!==null&&n)return this.minesNearbyCache;let e=!0,i=0;for(const r of this.searchPattern)i+=this.world.getTile(this.x+r.x,this.y+r.y).numMines(),i!=0&&(e=!1);return this.minesNearbyCache=i==0&&e?Vt:i,this.minesNearbyCache}flagsNearby(){let n=!0,e=0;for(const i of this.searchPattern)e+=this.world.getTile(this.x+i.x,this.y+i.y).numFlags(),e!=0&&(n=!1);return e==0&&n?Vt:e}isDeathTile(){const n=this.world.getGeneratedChunk(Math.floor(this.x/J),Math.floor(this.y/J)),e=this.x-n.chunkX*J,i=this.y-n.chunkY*J;return n.deaths.some(r=>r.x==e&&r.y==i)}static load(n,e,i,r){throw new Error("Tile.load needs to be implemented on derived class.")}}class Ao extends Br{constructor(e,i,r,s){super(e,i,r);P(this,"_numMines");P(this,"_numFlags",0);P(this,"isRevealed",!1);P(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this._numMines=s}numMines(){return this._numMines}numFlags(){return this._numFlags}flag(){this.isRevealed||(this._numFlags++,this._numFlags%=this.numMaxMines+1)}reveal(){return this.isRevealed||this._numFlags>0?!1:(this._numMines==0?this.isRevealed=!0:this._numFlags=this._numMines,!0)}save(e){e.putBit(this.isRevealed),this.isRevealed||e.putBits(this._numFlags,la(this.numMaxMines))}static loadInternal(e,i){return e.isRevealed=i.getBit(),e.isRevealed||(e._numFlags=i.getBits(la(e.numMaxMines))),e}static load(e,i,r,s){throw new Error("MultiMineTile.load needs to be implemented on derived class.")}}class Rr extends Ao{constructor(e,i,r){const s=Be(e.tileSeed,i,r,0)>.8?$f(Be(e.tileSeed,i,r,1),0,1,1,3):0;super(e,i,r,s);P(this,"type","blueberry");P(this,"numMaxMines",3)}static load(e,i,r,s){return this.loadInternal(new Rr(e,i,r),s)}}var Lt=(t=>(t[t.Covered=0]="Covered",t[t.Flagged=1]="Flagged",t[t.Revealed=2]="Revealed",t))(Lt||{});class Un extends Br{constructor(e,i,r,s){super(e,i,r);P(this,"isMine");P(this,"state",0);P(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this.isMine=s}numMines(){return this.isMine?1:0}numFlags(){return this.state==1?1:0}flag(){this.state!=2&&(this.state==0?this.state=1:this.state=0)}reveal(){return this.state!=0?!1:(this.isMine?this.state=1:this.state=2,!0)}save(e){this.isMine?e.putBit(this.state==1):this.state==0?e.putBit(!1):(e.putBit(!0),e.putBit(this.state==1))}static loadInternal(e,i){return e.isMine?e.state=i.getBit()?1:0:i.getBit()?e.state=i.getBit()?1:2:e.state=0,e}static load(e,i,r,s){throw new Error("SingleMineTile.load needs to be implemented on derived class.")}}class Lr extends Un{constructor(e,i,r){const s=Be(e.tileSeed,i,r,0)>.625;super(e,i,r,s);P(this,"type","chocolate")}static load(e,i,r,s){return this.loadInternal(new Lr(e,i,r),s)}}var li=(t=>(t[t.None=0]="None",t[t.Normal=1]="Normal",t[t.Anti=2]="Anti",t))(li||{}),wn=(t=>(t[t.Covered=0]="Covered",t[t.Flagged=1]="Flagged",t[t.AntiFlagged=2]="AntiFlagged",t[t.Revealed=3]="Revealed",t))(wn||{});class No extends Br{constructor(e,i,r,s){super(e,i,r);P(this,"mine");P(this,"state",0);P(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this.mine=s}numMines(){return this.mine==1?1:this.mine==2?-1:0}numFlags(){return this.state==1?1:this.state==2?-1:0}flag(){switch(this.state){case 0:this.state=1;break;case 1:this.state=2;break;case 2:this.state=0;break}}reveal(){return this.state!=0?!1:(this.mine==0?this.state=3:this.state=this.mine==1?1:2,!0)}save(e){this.mine==1||this.mine==2?this.state==0?e.putBit(!1):(e.putBit(!0),e.putBit(this.state==2)):this.state==0?e.putBit(!1):(e.putBit(!0),this.state==3?e.putBit(!1):(e.putBit(!0),e.putBit(this.state==2)))}static loadInternal(e,i){return e.mine==1||e.mine==2?i.getBit()?e.state=i.getBit()?2:1:e.state=0:i.getBit()?i.getBit()?e.state=i.getBit()?2:1:e.state=3:e.state=0,e}static load(e,i,r,s){throw new Error("SingleAntiMineTile.load needs to be implemented on derived class.")}}var di=(t=>(t[t.None=0]="None",t[t.Left=1]="Left",t[t.Right=2]="Right",t))(di||{});class $r extends Un{constructor(e,i,r){const s=Be(e.tileSeed,i,r,0)>.825;super(e,i,r,s);P(this,"type","strawberry");P(this,"secondaryNearbyMines");P(this,"secondaryNearbyMinesModifier");P(this,"secondaryNearbyMiensCacheSet",!1);P(this,"secondaryNearbyMinesCache",null);this.secondaryNearbyMines=Be(e.tileSeed,i,r,1)>.3?Be(e.tileSeed,i,r,2)>.5?1:2:0,this.secondaryNearbyMinesModifier=Be(e.tileSeed,i,r,3)>.3?1:-1}secondaryMinesNearby(e){if(this.secondaryNearbyMiensCacheSet)return this.secondaryNearbyMinesCache;if(this.secondaryNearbyMines==0)return this.secondaryNearbyMiensCacheSet=!0,this.secondaryNearbyMinesCache=null,this.secondaryNearbyMinesCache;const i=this.minesNearby(e);if(i==Vt)return this.secondaryNearbyMiensCacheSet=!0,this.secondaryNearbyMinesCache=Vt,this.secondaryNearbyMinesCache;const r=i+this.secondaryNearbyMinesModifier;let s=!1;for(const a of this.searchPattern)if(jr(this.world,this.x+a.x,this.y+a.y).prototype instanceof No){s=!0;break}return!s&&r<=0?(this.secondaryNearbyMiensCacheSet=!0,this.secondaryNearbyMinesCache=null,this.secondaryNearbyMinesCache):(this.secondaryNearbyMiensCacheSet=!0,this.secondaryNearbyMinesCache=r,this.secondaryNearbyMinesCache)}static load(e,i,r,s){return this.loadInternal(new $r(e,i,r),s)}}function Co(t,n,e,i){const r=Math.floor(e/n),s=Math.floor(i/n),a=(r+s%2)%2==0,o=Math.abs(e%n)+Math.abs(i%n)*n,f=Math.floor(Be(t.tileSeed,r,s,0)*n**2),l=a?o!=f:o==f;return{isDark:a,isMine:l}}class Fr extends Un{constructor(e,i,r){const{isDark:s,isMine:a}=Co(e,2,i,r);super(e,i,r,a);P(this,"type","waffle");P(this,"isDark");this.isDark=s}static load(e,i,r,s){return this.loadInternal(new Fr(e,i,r),s)}}class Ur extends Un{constructor(e,i,r){const{isDark:s,isMine:a}=Co(e,3,i,r);super(e,i,r,a);P(this,"type","stroopwafel");P(this,"isDark");this.isDark=s}static load(e,i,r,s){return this.loadInternal(new Ur(e,i,r),s)}}class zr extends Un{constructor(e,i,r){const s=Be(e.tileSeed,i,r,0)>.85;super(e,i,r,s);P(this,"type","vanilla")}static load(e,i,r,s){return this.loadInternal(new zr(e,i,r),s)}}class Hr extends No{constructor(e,i,r){const s=Be(e.tileSeed,i,r,0)>.7,a=Be(e.tileSeed,i,r,1)>.5;super(e,i,r,s?a?li.Anti:li.Normal:li.None);P(this,"type","cookies_and_cream")}static load(e,i,r,s){return this.loadInternal(new Hr(e,i,r),s)}}const zf={type:"collection",weight:1,scale:24,smoothness:.8,biomes:[{type:"collection",weight:5,scale:24,smoothness:.8,biomes:[{type:"biome",weight:3,tile:zr},{type:"biome",weight:1,tile:Lr}]},{type:"collection",weight:2,scale:64,smoothness:0,biomes:[{type:"biome",weight:1,tile:Fr},{type:"biome",weight:2,tile:Ur}]},{type:"collection",weight:2,scale:32,smoothness:.5,biomes:[{type:"biome",weight:1,tile:Rr},{type:"biome",weight:1,tile:$r}]},{type:"biome",weight:2,tile:Hr}]};function Hf(t,n,e,i,r){const s=Pr(t,!1),a=ms(s(),n,e)*i,o=ms(s(),n,e)*i;return wl(s(),n+a,e+o,r)}function jr(t,n,e){const i=Pr(t.biomeSeed,!1);let r=zf;for(;r.type=="collection";){const s=Hf(i(),n/r.scale,e/r.scale,r.smoothness,r.biomes.map(a=>a.weight));r=r.biomes[s]}return r.tile}function Mo(t,n,e){const i=jr(t,n,e);return new i(t,n,e)}class Do{constructor(n,e,i){P(this,"world");P(this,"chunkX");P(this,"chunkY");this.world=n,this.chunkX=e,this.chunkY=i}isGenerated(){return this instanceof rn}generate(){if(this.isGenerated())throw new Error("Cannot generate an already generated chunk.");console.log(`Generating new chunk: ${this.chunkX}, ${this.chunkY}`);const n=[];for(let e=0;e<J;e++)for(let i=0;i<J;i++){const r=this.world.generateTile(this.chunkX*J+i,this.chunkY*J+e);n.push(r)}return new rn(this.world,this.chunkX,this.chunkY,n)}}class rn extends Do{constructor(e,i,r,s){super(e,i,r);P(this,"tiles");P(this,"deaths",[]);if(this.tiles=s,this.tiles.length!=J*J)throw new Error("GeneratedChunk incorrect tiles length.")}getTileAbsolute(e,i){return this.getTile(e-this.chunkX*J,i-this.chunkY*J)}getTile(e,i){return this.tiles[e+i*J]}resetTileAbsolute(e,i){return this.resetTile(e-this.chunkX*J,i-this.chunkY*J)}resetTile(e,i){this.tiles[e+i*J]=Mo(this.world,this.chunkX*J+e,this.chunkY*J+i)}encodeTiles(){const e=new te.BitIO(2048);for(const i of this.tiles)i.save(e);return e.final()}static decodeTiles(e,i,r,s){const a=new te.BitIO(s);let o=[];for(let f=0;f<J;f++)for(let l=0;l<J;l++){const u=i*J+l,p=r*J+f,_=jr(e,u,p).load(e,u,p,a);o.push(_)}return new rn(e,i,r,o)}save(){return{deaths:this.deaths,tiles:this.encodeTiles()}}static load(e,i,r,s){const a=rn.decodeTiles(e,i,r,s.tiles);return a.deaths=s.deaths,a}}let jf=0;function Zf(){return jf++}class Oo{constructor(){P(this,"_dispatcherDestroyed",!1);P(this,"listeners",{})}get dispatcherDestroyed(){return this._dispatcherDestroyed}dispatcherCheckDestroyed(){if(this.dispatcherDestroyed)throw new Error("EventDispatcher used after destroyed.")}getListenersArr(n){return this.listeners[n]||(this.listeners[n]=[]),this.listeners[n]}*listenersIter(){for(const n in this.listeners){const e=this.listeners[n];for(const i of e)yield i}}addEventListener(n,e,i=!1,r=0){this.dispatcherCheckDestroyed();let s=this.getListenersArr(n);const a={key:n,callbackfn:e,priority:r,id:Zf(),once:i};return s.push(a),s.sort((o,f)=>o.priority-f.priority),a}dispatchEvent(n,e){this.dispatcherCheckDestroyed();const i=this.getListenersArr(n);for(const r of i){let s=!1;if(r.callbackfn({data:e,dispatcher:this,listener:r,stopPropagation:()=>s=!0}),r.once&&this.removeEventListener(r),s)break}}removeEventListener(n){this.dispatcherCheckDestroyed();let e=!1;if(typeof n!="number"){const i=this.getListenersArr(n.key);for(const r of i)r.id==n.id&&(i.splice(i.indexOf(r),1),e=!0)}else for(const i of this.listenersIter())i.id==n&&this.removeEventListener(i)&&(e=!0);return e}destroyDispatcher(){this.dispatcherCheckDestroyed(),this._dispatcherDestroyed=!0;for(const n in this.listeners)delete this.listeners[n]}}class Di extends Oo{constructor(e){super();P(this,"seed");P(this,"tileSeed");P(this,"biomeSeed");P(this,"createdAt",new Date);P(this,"deaths",0);P(this,"chunks",{});P(this,"_revealCount",0);P(this,"_died",!1);this.seed=(e&4294967295)>>>0;const i=Pr(this.seed,!1);this.tileSeed=i(),this.biomeSeed=i(),this.addEventListener("die",({data:{x:r,y:s}})=>{this.deaths++;const a=this.getGeneratedChunk(Math.floor(r/J),Math.floor(s/J));a.deaths.push({x:r-a.chunkX*J,y:s-a.chunkY*J,diedAt:new Date})})}change(){this.dispatchEvent("change",null)}generateTile(e,i){return Mo(this,e,i)}getChunk(e,i){const r=this.chunks[`${e},${i}`];return r||new Do(this,e,i)}getGeneratedChunk(e,i){const r=this.getChunk(e,i);if(r.isGenerated())return r;const s=r.generate();return this.chunks[`${e},${i}`]=s,s}getTile(e,i){const r=Math.floor(e/J),s=Math.floor(i/J);return this.getGeneratedChunk(r,s).getTileAbsolute(e,i)}flag(e,i){const r=this.getTile(e,i);if(r.isDeathTile())return;const s=r.numFlags();r.flag();const a=r.numFlags();a==0&&a!=s&&(this.dispatchEvent("particle_unflag",{x:e,y:i}),this.dispatchEvent("sound_unflag",null))}_reveal(e,i){const r=this.getTile(e,i);if(r.reveal())if(this._revealCount++,r.numMines()!=0){this._died=!0,this.dispatchEvent("particle_explosion",{x:r.x,y:r.y}),this.dispatchEvent("die",{x:r.x,y:r.y});return}else this.dispatchEvent("particle_reveal",{x:r.x,y:r.y});let s=[],a=[];if(r.type=="strawberry"&&r.secondaryNearbyMines!=di.None){const o=r.secondaryMinesNearby(!1);o!==null&&o==r.flagsNearby()&&a.push(r)}for(r.minesNearby()==r.flagsNearby()&&(a.includes(r)||a.push(r));a.length>0;){const o=a.pop();s.push(o);for(const f of o.searchPattern){const l=this.getTile(o.x+f.x,o.y+f.y);a.some(u=>u.x==l.x&&u.y==l.y)||s.some(u=>u.x==l.x&&u.y==l.y)||(l.minesNearby()==Vt?a.push(l):s.push(l))}}for(const o of s)o.reveal()&&(this._revealCount++,o.numMines()!=0?(this._died=!0,this.dispatchEvent("particle_explosion",{x:o.x,y:o.y}),this.dispatchEvent("die",{x:o.x,y:o.y})):this.dispatchEvent("particle_reveal",{x:o.x,y:o.y}))}reveal(e,i){return this._revealCount=0,this._died=!1,this._reveal(e,i),this._revealCount>0&&this.dispatchEvent("sound_reveal",this._revealCount),this._died&&this.dispatchEvent("sound_explosion",null),this._died}reset(e,i){const r=this.getChunk(Math.floor(e/J),Math.floor(i/J));r.isGenerated()&&r.resetTileAbsolute(e,i)}closest0(e,i){for(const{x:r,y:s}of Ff(e,i)){const a=this.getTile(r,s);if(a.numMines()==0&&a.minesNearby()==Vt)return{x:r,y:s}}throw new Error("This error should never happen, it's just here to make TypeScript happy.")}save(){const e={seed:this.seed,createdAt:this.createdAt,numDeaths:this.deaths,chunks:new Map};for(const i in this.chunks){const r=i,s=this.chunks[r];e.chunks.set(r,s.save())}return e}static load(e){const i=new Di(e.seed);return i.createdAt=e.createdAt,i.deaths=e.numDeaths,e.chunks.forEach((r,s)=>{const[a,o,f]=s.match(/^(-?\d+),(-?\d+)$/),[l,u]=[parseInt(o),parseInt(f)];i.chunks[s]=rn.load(i,l,u,r)}),i}}class Zr extends Oo{constructor(e,i){super();P(this,"world");P(this,"x",0);P(this,"y",0);P(this,"scale",64);this.world=e,i&&this.load(i)}change(){this.dispatchEvent("change",null)}load(e){this.x=e.x,this.y=e.y,this.scale=e.scale}save(){return{x:this.x,y:this.y,scale:this.scale}}translate(e,i,r){this.x-=i/this.scale,this.y-=r/this.scale}scaleFrom(e,i,r,s){const a=this.x+e.width/this.scale*(r/e.width-.5),o=this.y+e.height/this.scale*(s/e.height-.5);this.scale=i;const f=this.x+e.width/this.scale*(r/e.width-.5),l=this.y+e.height/this.scale*(s/e.height-.5);this.x-=f-a,this.y-=l-o}clampScale(e,i,r,s){return e.width/i<r&&(i=e.width/r),e.height/i<r&&(i=e.height/r),e.width/i>s&&(i=e.width/s),e.height/i>s&&(i=e.height/s),i}bounds(e,i,r=0){const s=this.x-e.width/this.scale/2-r,a=this.y-e.height/this.scale/2-r,o=this.x+e.width/this.scale/2+r,f=this.y+e.height/this.scale/2+r;return i?{minX:Math.floor(s),minY:Math.floor(a),maxX:Math.ceil(o),maxY:Math.ceil(f)}:{minX:s,minY:a,maxX:o,maxY:f}}inBounds(e,i,r,s=0){const a=this.bounds(e,!1,s);return i>=a.minX&&i<=a.maxX&&r>=a.minY&&r<=a.maxY}canvasPos(e,i,r,s){const a=(i-e.width/2)/this.scale+this.x,o=(r-e.height/2)/this.scale+this.y;return s?{x:Math.floor(a),y:Math.floor(o)}:{x:a,y:o}}transformCtx(e,i){i.translate(e.width/2,e.height/2),i.scale(this.scale,this.scale),i.translate(-this.x,-this.y)}forEachTileInViewport(e,i,r=0){const s=this.bounds(e,!0,r);for(let a=s.minX;a<s.maxX;a++)for(let o=s.minY;o<s.maxY;o++){const f=this.world.getTile(a,o);i(f)}}forEachChunkInViewport(e,i,r=0){const s=this.bounds(e,!0,r);s.minX=Math.floor(s.minX/J),s.minY=Math.floor(s.minY/J),s.maxX=Math.ceil(s.maxX/J),s.maxY=Math.ceil(s.maxY/J);for(let a=s.minX;a<s.maxX;a++)for(let o=s.minY;o<s.maxY;o++){const f=this.world.getChunk(a,o);f.isGenerated()&&i(f)}}}function Vf(t,n){console.log("Loaded new world"),n&&localStorage.setItem(t,"PLACEHOLDER");const e=new Di(Math.floor(Math.random()*4294967295)),i=e.closest0(0,0);return e.reveal(i.x,i.y),{world:e,spawnX:i.x,spawnY:i.y}}function ca(t,n){const{world:e,spawnX:i,spawnY:r}=Vf(t,n),s=new Zr(e,{x:i,y:r,scale:48});return console.log(s),{world:e,viewport:s,bookmarks:[{name:"Spawn",createdAt:new Date,viewport:s.save()}]}}function Yf(t){const n=localStorage.getItem(t);if(n){console.log("Loaded saved world");try{const e=Bo.decode(n),i=Di.load(e.world),r=new Zr(i,e.viewport);return{world:i,viewport:r,bookmarks:e.bookmarks}}catch(e){return console.error("Failed to load world."),console.error(e),ca(t,!1)}}else return ca(t,!0)}function Xf(t,n){if(localStorage.getItem(t)!==null){console.log("Save world");try{localStorage.setItem(t,Bo.encode({world:n.world.save(),viewport:n.viewport.save(),bookmarks:n.bookmarks??[]},{base64:!0})),localStorage.removeItem("save_error")}catch(e){localStorage.setItem("save_error",String(e))}}}function Wf(t){localStorage.removeItem(t)}const Gf=te.object({deaths:te.array(te.object({x:te.number("u8"),y:te.number("u8"),diedAt:te.date()})),tiles:te.binary()});class ua extends te.Parser{constructor(){super(...arguments);P(this,"magic",te.hashStr("ChunkCoordinateParser"))}encodeInternal(e,i){const[r,s,a]=i.match(/^(-?\d+),(-?\d+)$/),[o,f]=[parseInt(s),parseInt(a)];e.encode(new te.BigIntParser(!0),BigInt(o)),e.encode(new te.BigIntParser(!0),BigInt(f))}decodeInternal(e){const i=Number(e.decode(new te.BigIntParser(!0))),r=Number(e.decode(new te.BigIntParser(!0)));return`${i},${r}`}}class Kf extends te.Parser{constructor(e){super();P(this,"magic");P(this,"type");this.type=e,this.magic=te.hashStr(`ChunkCoordinateMapParser:${this.type.magic}`)}encodeInternal(e,i){e.encode(new te.BigIntParser(!1),BigInt(i.size));for(const[r,s]of i.entries())e.encode(new ua,r),e.encode(this.type,s)}decodeInternal(e){const i=new Map,r=Number(e.decode(new te.BigIntParser(!1)));for(let s=0;s<r;s++){const a=e.decode(new ua),o=e.decode(this.type);i.set(a,o)}return i}}const qf=te.object({seed:te.number("u32"),createdAt:te.date(),numDeaths:te.number("u32"),chunks:new Kf(Gf)}),fa=te.object({x:te.number("f64"),y:te.number("f64"),scale:te.number("f64")}),Bo=te.modifyhash("v1.0.6",te.object({world:qf,viewport:fa,bookmarks:te.array(te.object({name:te.string(),createdAt:te.date(),viewport:fa}))})),Ro=(t,n)=>{const e=new ResizeObserver(()=>{n(t.clientWidth,t.clientHeight)});return e.observe(t),{destroy(){e.unobserve(t),e.disconnect()}}};class Jf{constructor(n,e,i,r){P(this,"world");P(this,"theme");P(this,"canvas");P(this,"ctx");P(this,"viewport");this.world=n,this.theme=e,this.canvas=i;const s=this.canvas.getContext("2d");if(!s)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=s,this.viewport=r}async init(){}destroy(){}renderWorld(){this.ctx.imageSmoothingEnabled=!1,this.viewport.transformCtx(this.canvas,this.ctx),this.viewport.forEachTileInViewport(this.canvas,n=>{this.theme.drawTile(this.ctx,n)},0),this.viewport.forEachChunkInViewport(this.canvas,n=>{n.deaths.forEach(e=>{this.theme.drawDeathIcon(this.ctx,n.chunkX*J+e.x,n.chunkY*J+e.y)})},0),this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.renderWorld()}}class Oi{constructor(){P(this,"_alive",!0);P(this,"_lifetime",0)}get alive(){return this._alive}set alive(n){this._alive=n}get lifetime(){return this._lifetime}rendererUpdate(n,e){this._lifetime+=e,this.update(n,e)}}class Qf extends Oi{constructor(e){super();P(this,"type","explosion");P(this,"maxLifetime",500);P(this,"tile");this.tile=e}update(e,i){this.lifetime>this.maxLifetime&&(this.alive=!1)}}class eh extends Oi{constructor(e){super();P(this,"type","faketile");P(this,"tile");this.tile=e}get opacity(){return Mi(2-this.lifetime/250+2)}update(e,i){this.lifetime>2e3&&(this.alive=!1)}}class ha extends Oi{constructor(e,i,r,s){super();P(this,"type","flag");P(this,"x");P(this,"y");P(this,"dx");P(this,"dy");P(this,"r");P(this,"dr");P(this,"isMultiFlag");P(this,"numFlags");this.x=e,this.y=i,this.dx=(Math.random()-.5)*.005,this.dy=-(Math.random()*.002+.005),this.r=0,this.dr=(Math.random()-.5)*.01,this.isMultiFlag=r,this.numFlags=s}get opacity(){return Mi(1-this.lifetime/250+.5)}update(e,i){this.dy+=5e-5*i,this.dx*=.99,this.dy*=this.dy<0?1:.95,this.x+=this.dx*i,this.y+=this.dy*i,this.r+=this.dr*i,this.lifetime>=500&&(this.alive=!1)}}class th extends Oi{constructor(e){super();P(this,"type","tilereveal");P(this,"tile");P(this,"x");P(this,"y");P(this,"dx");P(this,"dy");P(this,"r");P(this,"dr");P(this,"totalLifetime");this.tile=e,this.x=this.tile.x,this.y=this.tile.y,this.dx=(Math.random()-.5)*.005,this.dy=-(Math.random()*.002+.005),this.r=0,this.dr=(Math.random()-.5)*.01,this.totalLifetime=Math.random()*750+250}get opacity(){return Mi(1-this.lifetime/(this.totalLifetime/2)+.5)}update(e,i){this.dy+=5e-5*i,this.dx*=.99,this.dy*=this.dy<0?1:.98,this.x+=this.dx*i,this.y+=this.dy*i,this.r+=this.dr*i,this.lifetime>=this.totalLifetime&&(this.alive=!1)}}class nh{constructor(n,e,i,r){P(this,"world");P(this,"theme");P(this,"canvas");P(this,"ctx");P(this,"viewport");P(this,"particles",[]);P(this,"listeners",[]);P(this,"lastFrameTime",-1);this.world=n,this.theme=e,this.canvas=i;const s=this.canvas.getContext("2d");if(!s)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=s,this.viewport=r}async init(){this.listeners.push(this.world.addEventListener("particle_unflag",({data:{x:n,y:e}})=>{const i=this.world.getTile(n,e);i instanceof Ao?this.particles.push(new ha(n,e,!0,i.numMaxMines)):this.particles.push(new ha(n,e,!1,i.type=="cookies_and_cream"?-1:1))})),this.listeners.push(this.world.addEventListener("particle_explosion",({data:{x:n,y:e}})=>{const i=this.world.getTile(n,e);this.particles.unshift(new eh(i)),this.particles.push(new Qf(i))})),this.listeners.push(this.world.addEventListener("particle_reveal",({data:{x:n,y:e}})=>{const i=this.world.getTile(n,e);this.particles.push(new th(i))}))}destroy(){let n;for(;n=this.listeners.pop();)this.world.removeEventListener(n)}renderParticles(n){this.ctx.imageSmoothingEnabled=!1,this.viewport.transformCtx(this.canvas,this.ctx);for(let e=0;e<this.particles.length;e++){const i=this.particles[e];i.rendererUpdate(this,n),i.alive||(this.particles.splice(e,1),e--)}for(const e of this.particles)this.theme.drawParticle(this.ctx,e);this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.ctx.fillStyle="transparent",this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const n=performance.now();if(this.lastFrameTime==-1)this.renderParticles(0);else{const e=n-this.lastFrameTime;this.renderParticles(e)}this.lastFrameTime=n}}function ih(t){let n,e,i,r;return{c(){n=$("div"),this.h()},l(s){n=F(s,"DIV",{class:!0}),H(n).forEach(N),this.h()},h(){B(n,"class",e=fs(t[0])+" svelte-1ijt5qm"),Qt(n,"mouse-controller-dragging",t[1]=="drag")},m(s,a){X(s,n,a),i||(r=[ge(n,"mousedown",t[8]),ge(n,"mousemove",t[9]),ge(n,"mouseup",t[10]),ge(n,"mouseout",t[11]),ge(n,"wheel",t[12],{passive:!0}),ge(n,"contextmenu",_l(t[7]))],i=!0)},p(s,[a]){a&1&&e!==(e=fs(s[0])+" svelte-1ijt5qm")&&B(n,"class",e),a&3&&Qt(n,"mouse-controller-dragging",s[1]=="drag")},i:Ie,o:Ie,d(s){s&&N(n),i=!1,sn(r)}}}const rh=10,sh=10;function ah(t,n,e){const i=Vr();let{class:r=""}=n,s=null;const a=g=>{switch(g.button){case 0:return"primary";case 1:return"extra";case 2:return"secondary";default:return null}};let o=0,f=0;const l=(g,I)=>Rf(o,f,g.offsetX,g.offsetY)>I;function u(g){Ia.call(this,t,g)}const p=g=>{s==null&&(e(1,s=a(g)),e(2,o=g.offsetX),e(3,f=g.offsetY))},d=g=>{let I=g.movementX,k=g.movementY;if(s=="primary")if(l(g,rh))I+=g.offsetX-o,k+=g.offsetY-f,e(1,s="drag");else return;s=="drag"&&i("move",{x:g.offsetX,y:g.offsetY,dx:I,dy:k})},_=g=>{if(s==null||s=="drag"||l(g,sh)){e(1,s=null);return}i("input",{x:g.offsetX,y:g.offsetY,type:s}),e(1,s=null)},w=()=>{e(1,s=null)},v=g=>{i("zoom",{x:g.offsetX,y:g.offsetY,amountType:"relative",amount:g.deltaY>0?.9:1.1})};return t.$$set=g=>{"class"in g&&e(0,r=g.class)},[r,s,o,f,i,a,l,u,p,d,_,w,v]}class oh extends ye{constructor(n){super(),ke(this,n,ah,ih,ve,{class:0})}}var Lo={exports:{}};/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */(function(t){(function(n,e,i,r){var s=["","webkit","Moz","MS","ms","o"],a=e.createElement("div"),o="function",f=Math.round,l=Math.abs,u=Date.now;function p(c,h,m){return setTimeout(L(c,m),h)}function d(c,h,m){return Array.isArray(c)?(_(c,m[h],m),!0):!1}function _(c,h,m){var b;if(c)if(c.forEach)c.forEach(h,m);else if(c.length!==r)for(b=0;b<c.length;)h.call(m,c[b],b,c),b++;else for(b in c)c.hasOwnProperty(b)&&h.call(m,c[b],b,c)}function w(c,h,m){var b="DEPRECATED METHOD: "+h+`
`+m+` AT 
`;return function(){var C=new Error("get-stack-trace"),U=C&&C.stack?C.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",G=n.console&&(n.console.warn||n.console.log);return G&&G.call(n.console,b,U),c.apply(this,arguments)}}var v;typeof Object.assign!="function"?v=function(h){if(h===r||h===null)throw new TypeError("Cannot convert undefined or null to object");for(var m=Object(h),b=1;b<arguments.length;b++){var C=arguments[b];if(C!==r&&C!==null)for(var U in C)C.hasOwnProperty(U)&&(m[U]=C[U])}return m}:v=Object.assign;var g=w(function(h,m,b){for(var C=Object.keys(m),U=0;U<C.length;)(!b||b&&h[C[U]]===r)&&(h[C[U]]=m[C[U]]),U++;return h},"extend","Use `assign`."),I=w(function(h,m){return g(h,m,!0)},"merge","Use `assign`.");function k(c,h,m){var b=h.prototype,C;C=c.prototype=Object.create(b),C.constructor=c,C._super=b,m&&v(C,m)}function L(c,h){return function(){return c.apply(h,arguments)}}function S(c,h){return typeof c==o?c.apply(h&&h[0]||r,h):c}function O(c,h){return c===r?h:c}function Z(c,h,m){_(y(h),function(b){c.addEventListener(b,m,!1)})}function E(c,h,m){_(y(h),function(b){c.removeEventListener(b,m,!1)})}function D(c,h){for(;c;){if(c==h)return!0;c=c.parentNode}return!1}function x(c,h){return c.indexOf(h)>-1}function y(c){return c.trim().split(/\s+/g)}function A(c,h,m){if(c.indexOf&&!m)return c.indexOf(h);for(var b=0;b<c.length;){if(m&&c[b][m]==h||!m&&c[b]===h)return b;b++}return-1}function Y(c){return Array.prototype.slice.call(c,0)}function ae(c,h,m){for(var b=[],C=[],U=0;U<c.length;){var G=h?c[U][h]:c[U];A(C,G)<0&&b.push(c[U]),C[U]=G,U++}return m&&(h?b=b.sort(function(Ne,Oe){return Ne[h]>Oe[h]}):b=b.sort()),b}function oe(c,h){for(var m,b,C=h[0].toUpperCase()+h.slice(1),U=0;U<s.length;){if(m=s[U],b=m?m+C:h,b in c)return b;U++}return r}var K=1;function _e(){return K++}function we(c){var h=c.ownerDocument||c;return h.defaultView||h.parentWindow||n}var De=/mobile|tablet|ip(ad|hone|od)|android/i,Fe="ontouchstart"in n,ee=oe(n,"PointerEvent")!==r,Me=Fe&&De.test(navigator.userAgent),Ue="touch",It="pen",qe="mouse",T="kinect",z=25,q=1,be=2,re=4,M=8,W=1,Te=2,je=4,Ze=8,Ee=16,Ae=Te|je,et=Ze|Ee,hn=Ae|et,Xr=["x","y"],zn=["clientX","clientY"];function Ve(c,h){var m=this;this.manager=c,this.callback=h,this.element=c.element,this.target=c.options.inputTarget,this.domHandler=function(b){S(c.options.enable,[c])&&m.handler(b)},this.init()}Ve.prototype={handler:function(){},init:function(){this.evEl&&Z(this.element,this.evEl,this.domHandler),this.evTarget&&Z(this.target,this.evTarget,this.domHandler),this.evWin&&Z(we(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&E(this.element,this.evEl,this.domHandler),this.evTarget&&E(this.target,this.evTarget,this.domHandler),this.evWin&&E(we(this.element),this.evWin,this.domHandler)}};function Fo(c){var h,m=c.options.inputClass;return m?h=m:ee?h=Ri:Me?h=Zn:Fe?h=Li:h=jn,new h(c,Uo)}function Uo(c,h,m){var b=m.pointers.length,C=m.changedPointers.length,U=h&q&&b-C===0,G=h&(re|M)&&b-C===0;m.isFirst=!!U,m.isFinal=!!G,U&&(c.session={}),m.eventType=h,zo(c,m),c.emit("hammer.input",m),c.recognize(m),c.session.prevInput=m}function zo(c,h){var m=c.session,b=h.pointers,C=b.length;m.firstInput||(m.firstInput=Wr(h)),C>1&&!m.firstMultiple?m.firstMultiple=Wr(h):C===1&&(m.firstMultiple=!1);var U=m.firstInput,G=m.firstMultiple,Se=G?G.center:U.center,Ne=h.center=Gr(b);h.timeStamp=u(),h.deltaTime=h.timeStamp-U.timeStamp,h.angle=Bi(Se,Ne),h.distance=Hn(Se,Ne),Ho(m,h),h.offsetDirection=qr(h.deltaX,h.deltaY);var Oe=Kr(h.deltaTime,h.deltaX,h.deltaY);h.overallVelocityX=Oe.x,h.overallVelocityY=Oe.y,h.overallVelocity=l(Oe.x)>l(Oe.y)?Oe.x:Oe.y,h.scale=G?Vo(G.pointers,b):1,h.rotation=G?Zo(G.pointers,b):0,h.maxPointers=m.prevInput?h.pointers.length>m.prevInput.maxPointers?h.pointers.length:m.prevInput.maxPointers:h.pointers.length,jo(m,h);var nt=c.element;D(h.srcEvent.target,nt)&&(nt=h.srcEvent.target),h.target=nt}function Ho(c,h){var m=h.center,b=c.offsetDelta||{},C=c.prevDelta||{},U=c.prevInput||{};(h.eventType===q||U.eventType===re)&&(C=c.prevDelta={x:U.deltaX||0,y:U.deltaY||0},b=c.offsetDelta={x:m.x,y:m.y}),h.deltaX=C.x+(m.x-b.x),h.deltaY=C.y+(m.y-b.y)}function jo(c,h){var m=c.lastInterval||h,b=h.timeStamp-m.timeStamp,C,U,G,Se;if(h.eventType!=M&&(b>z||m.velocity===r)){var Ne=h.deltaX-m.deltaX,Oe=h.deltaY-m.deltaY,nt=Kr(b,Ne,Oe);U=nt.x,G=nt.y,C=l(nt.x)>l(nt.y)?nt.x:nt.y,Se=qr(Ne,Oe),c.lastInterval=h}else C=m.velocity,U=m.velocityX,G=m.velocityY,Se=m.direction;h.velocity=C,h.velocityX=U,h.velocityY=G,h.direction=Se}function Wr(c){for(var h=[],m=0;m<c.pointers.length;)h[m]={clientX:f(c.pointers[m].clientX),clientY:f(c.pointers[m].clientY)},m++;return{timeStamp:u(),pointers:h,center:Gr(h),deltaX:c.deltaX,deltaY:c.deltaY}}function Gr(c){var h=c.length;if(h===1)return{x:f(c[0].clientX),y:f(c[0].clientY)};for(var m=0,b=0,C=0;C<h;)m+=c[C].clientX,b+=c[C].clientY,C++;return{x:f(m/h),y:f(b/h)}}function Kr(c,h,m){return{x:h/c||0,y:m/c||0}}function qr(c,h){return c===h?W:l(c)>=l(h)?c<0?Te:je:h<0?Ze:Ee}function Hn(c,h,m){m||(m=Xr);var b=h[m[0]]-c[m[0]],C=h[m[1]]-c[m[1]];return Math.sqrt(b*b+C*C)}function Bi(c,h,m){m||(m=Xr);var b=h[m[0]]-c[m[0]],C=h[m[1]]-c[m[1]];return Math.atan2(C,b)*180/Math.PI}function Zo(c,h){return Bi(h[1],h[0],zn)+Bi(c[1],c[0],zn)}function Vo(c,h){return Hn(h[0],h[1],zn)/Hn(c[0],c[1],zn)}var Yo={mousedown:q,mousemove:be,mouseup:re},Xo="mousedown",Wo="mousemove mouseup";function jn(){this.evEl=Xo,this.evWin=Wo,this.pressed=!1,Ve.apply(this,arguments)}k(jn,Ve,{handler:function(h){var m=Yo[h.type];m&q&&h.button===0&&(this.pressed=!0),m&be&&h.which!==1&&(m=re),this.pressed&&(m&re&&(this.pressed=!1),this.callback(this.manager,m,{pointers:[h],changedPointers:[h],pointerType:qe,srcEvent:h}))}});var Go={pointerdown:q,pointermove:be,pointerup:re,pointercancel:M,pointerout:M},Ko={2:Ue,3:It,4:qe,5:T},Jr="pointerdown",Qr="pointermove pointerup pointercancel";n.MSPointerEvent&&!n.PointerEvent&&(Jr="MSPointerDown",Qr="MSPointerMove MSPointerUp MSPointerCancel");function Ri(){this.evEl=Jr,this.evWin=Qr,Ve.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}k(Ri,Ve,{handler:function(h){var m=this.store,b=!1,C=h.type.toLowerCase().replace("ms",""),U=Go[C],G=Ko[h.pointerType]||h.pointerType,Se=G==Ue,Ne=A(m,h.pointerId,"pointerId");U&q&&(h.button===0||Se)?Ne<0&&(m.push(h),Ne=m.length-1):U&(re|M)&&(b=!0),!(Ne<0)&&(m[Ne]=h,this.callback(this.manager,U,{pointers:m,changedPointers:[h],pointerType:G,srcEvent:h}),b&&m.splice(Ne,1))}});var qo={touchstart:q,touchmove:be,touchend:re,touchcancel:M},Jo="touchstart",Qo="touchstart touchmove touchend touchcancel";function es(){this.evTarget=Jo,this.evWin=Qo,this.started=!1,Ve.apply(this,arguments)}k(es,Ve,{handler:function(h){var m=qo[h.type];if(m===q&&(this.started=!0),!!this.started){var b=el.call(this,h,m);m&(re|M)&&b[0].length-b[1].length===0&&(this.started=!1),this.callback(this.manager,m,{pointers:b[0],changedPointers:b[1],pointerType:Ue,srcEvent:h})}}});function el(c,h){var m=Y(c.touches),b=Y(c.changedTouches);return h&(re|M)&&(m=ae(m.concat(b),"identifier",!0)),[m,b]}var tl={touchstart:q,touchmove:be,touchend:re,touchcancel:M},nl="touchstart touchmove touchend touchcancel";function Zn(){this.evTarget=nl,this.targetIds={},Ve.apply(this,arguments)}k(Zn,Ve,{handler:function(h){var m=tl[h.type],b=il.call(this,h,m);b&&this.callback(this.manager,m,{pointers:b[0],changedPointers:b[1],pointerType:Ue,srcEvent:h})}});function il(c,h){var m=Y(c.touches),b=this.targetIds;if(h&(q|be)&&m.length===1)return b[m[0].identifier]=!0,[m,m];var C,U,G=Y(c.changedTouches),Se=[],Ne=this.target;if(U=m.filter(function(Oe){return D(Oe.target,Ne)}),h===q)for(C=0;C<U.length;)b[U[C].identifier]=!0,C++;for(C=0;C<G.length;)b[G[C].identifier]&&Se.push(G[C]),h&(re|M)&&delete b[G[C].identifier],C++;if(Se.length)return[ae(U.concat(Se),"identifier",!0),Se]}var rl=2500,ts=25;function Li(){Ve.apply(this,arguments);var c=L(this.handler,this);this.touch=new Zn(this.manager,c),this.mouse=new jn(this.manager,c),this.primaryTouch=null,this.lastTouches=[]}k(Li,Ve,{handler:function(h,m,b){var C=b.pointerType==Ue,U=b.pointerType==qe;if(!(U&&b.sourceCapabilities&&b.sourceCapabilities.firesTouchEvents)){if(C)sl.call(this,m,b);else if(U&&al.call(this,b))return;this.callback(h,m,b)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});function sl(c,h){c&q?(this.primaryTouch=h.changedPointers[0].identifier,ns.call(this,h)):c&(re|M)&&ns.call(this,h)}function ns(c){var h=c.changedPointers[0];if(h.identifier===this.primaryTouch){var m={x:h.clientX,y:h.clientY};this.lastTouches.push(m);var b=this.lastTouches,C=function(){var U=b.indexOf(m);U>-1&&b.splice(U,1)};setTimeout(C,rl)}}function al(c){for(var h=c.srcEvent.clientX,m=c.srcEvent.clientY,b=0;b<this.lastTouches.length;b++){var C=this.lastTouches[b],U=Math.abs(h-C.x),G=Math.abs(m-C.y);if(U<=ts&&G<=ts)return!0}return!1}var is=oe(a.style,"touchAction"),rs=is!==r,ss="compute",as="auto",$i="manipulation",Rt="none",dn="pan-x",_n="pan-y",Vn=ll();function Fi(c,h){this.manager=c,this.set(h)}Fi.prototype={set:function(c){c==ss&&(c=this.compute()),rs&&this.manager.element.style&&Vn[c]&&(this.manager.element.style[is]=c),this.actions=c.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var c=[];return _(this.manager.recognizers,function(h){S(h.options.enable,[h])&&(c=c.concat(h.getTouchAction()))}),ol(c.join(" "))},preventDefaults:function(c){var h=c.srcEvent,m=c.offsetDirection;if(this.manager.session.prevented){h.preventDefault();return}var b=this.actions,C=x(b,Rt)&&!Vn[Rt],U=x(b,_n)&&!Vn[_n],G=x(b,dn)&&!Vn[dn];if(C){var Se=c.pointers.length===1,Ne=c.distance<2,Oe=c.deltaTime<250;if(Se&&Ne&&Oe)return}if(!(G&&U)&&(C||U&&m&Ae||G&&m&et))return this.preventSrc(h)},preventSrc:function(c){this.manager.session.prevented=!0,c.preventDefault()}};function ol(c){if(x(c,Rt))return Rt;var h=x(c,dn),m=x(c,_n);return h&&m?Rt:h||m?h?dn:_n:x(c,$i)?$i:as}function ll(){if(!rs)return!1;var c={},h=n.CSS&&n.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(m){c[m]=h?n.CSS.supports("touch-action",m):!0}),c}var Yn=1,Ye=2,Wt=4,Pt=8,bt=Pt,mn=16,tt=32;function gt(c){this.options=v({},this.defaults,c||{}),this.id=_e(),this.manager=null,this.options.enable=O(this.options.enable,!0),this.state=Yn,this.simultaneous={},this.requireFail=[]}gt.prototype={defaults:{},set:function(c){return v(this.options,c),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(c){if(d(c,"recognizeWith",this))return this;var h=this.simultaneous;return c=Xn(c,this),h[c.id]||(h[c.id]=c,c.recognizeWith(this)),this},dropRecognizeWith:function(c){return d(c,"dropRecognizeWith",this)?this:(c=Xn(c,this),delete this.simultaneous[c.id],this)},requireFailure:function(c){if(d(c,"requireFailure",this))return this;var h=this.requireFail;return c=Xn(c,this),A(h,c)===-1&&(h.push(c),c.requireFailure(this)),this},dropRequireFailure:function(c){if(d(c,"dropRequireFailure",this))return this;c=Xn(c,this);var h=A(this.requireFail,c);return h>-1&&this.requireFail.splice(h,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(c){return!!this.simultaneous[c.id]},emit:function(c){var h=this,m=this.state;function b(C){h.manager.emit(C,c)}m<Pt&&b(h.options.event+os(m)),b(h.options.event),c.additionalEvent&&b(c.additionalEvent),m>=Pt&&b(h.options.event+os(m))},tryEmit:function(c){if(this.canEmit())return this.emit(c);this.state=tt},canEmit:function(){for(var c=0;c<this.requireFail.length;){if(!(this.requireFail[c].state&(tt|Yn)))return!1;c++}return!0},recognize:function(c){var h=v({},c);if(!S(this.options.enable,[this,h])){this.reset(),this.state=tt;return}this.state&(bt|mn|tt)&&(this.state=Yn),this.state=this.process(h),this.state&(Ye|Wt|Pt|mn)&&this.tryEmit(h)},process:function(c){},getTouchAction:function(){},reset:function(){}};function os(c){return c&mn?"cancel":c&Pt?"end":c&Wt?"move":c&Ye?"start":""}function ls(c){return c==Ee?"down":c==Ze?"up":c==Te?"left":c==je?"right":""}function Xn(c,h){var m=h.manager;return m?m.get(c):c}function Je(){gt.apply(this,arguments)}k(Je,gt,{defaults:{pointers:1},attrTest:function(c){var h=this.options.pointers;return h===0||c.pointers.length===h},process:function(c){var h=this.state,m=c.eventType,b=h&(Ye|Wt),C=this.attrTest(c);return b&&(m&M||!C)?h|mn:b||C?m&re?h|Pt:h&Ye?h|Wt:Ye:tt}});function Wn(){Je.apply(this,arguments),this.pX=null,this.pY=null}k(Wn,Je,{defaults:{event:"pan",threshold:10,pointers:1,direction:hn},getTouchAction:function(){var c=this.options.direction,h=[];return c&Ae&&h.push(_n),c&et&&h.push(dn),h},directionTest:function(c){var h=this.options,m=!0,b=c.distance,C=c.direction,U=c.deltaX,G=c.deltaY;return C&h.direction||(h.direction&Ae?(C=U===0?W:U<0?Te:je,m=U!=this.pX,b=Math.abs(c.deltaX)):(C=G===0?W:G<0?Ze:Ee,m=G!=this.pY,b=Math.abs(c.deltaY))),c.direction=C,m&&b>h.threshold&&C&h.direction},attrTest:function(c){return Je.prototype.attrTest.call(this,c)&&(this.state&Ye||!(this.state&Ye)&&this.directionTest(c))},emit:function(c){this.pX=c.deltaX,this.pY=c.deltaY;var h=ls(c.direction);h&&(c.additionalEvent=this.options.event+h),this._super.emit.call(this,c)}});function Ui(){Je.apply(this,arguments)}k(Ui,Je,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[Rt]},attrTest:function(c){return this._super.attrTest.call(this,c)&&(Math.abs(c.scale-1)>this.options.threshold||this.state&Ye)},emit:function(c){if(c.scale!==1){var h=c.scale<1?"in":"out";c.additionalEvent=this.options.event+h}this._super.emit.call(this,c)}});function zi(){gt.apply(this,arguments),this._timer=null,this._input=null}k(zi,gt,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[as]},process:function(c){var h=this.options,m=c.pointers.length===h.pointers,b=c.distance<h.threshold,C=c.deltaTime>h.time;if(this._input=c,!b||!m||c.eventType&(re|M)&&!C)this.reset();else if(c.eventType&q)this.reset(),this._timer=p(function(){this.state=bt,this.tryEmit()},h.time,this);else if(c.eventType&re)return bt;return tt},reset:function(){clearTimeout(this._timer)},emit:function(c){this.state===bt&&(c&&c.eventType&re?this.manager.emit(this.options.event+"up",c):(this._input.timeStamp=u(),this.manager.emit(this.options.event,this._input)))}});function Hi(){Je.apply(this,arguments)}k(Hi,Je,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[Rt]},attrTest:function(c){return this._super.attrTest.call(this,c)&&(Math.abs(c.rotation)>this.options.threshold||this.state&Ye)}});function ji(){Je.apply(this,arguments)}k(ji,Je,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:Ae|et,pointers:1},getTouchAction:function(){return Wn.prototype.getTouchAction.call(this)},attrTest:function(c){var h=this.options.direction,m;return h&(Ae|et)?m=c.overallVelocity:h&Ae?m=c.overallVelocityX:h&et&&(m=c.overallVelocityY),this._super.attrTest.call(this,c)&&h&c.offsetDirection&&c.distance>this.options.threshold&&c.maxPointers==this.options.pointers&&l(m)>this.options.velocity&&c.eventType&re},emit:function(c){var h=ls(c.offsetDirection);h&&this.manager.emit(this.options.event+h,c),this.manager.emit(this.options.event,c)}});function Gn(){gt.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}k(Gn,gt,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[$i]},process:function(c){var h=this.options,m=c.pointers.length===h.pointers,b=c.distance<h.threshold,C=c.deltaTime<h.time;if(this.reset(),c.eventType&q&&this.count===0)return this.failTimeout();if(b&&C&&m){if(c.eventType!=re)return this.failTimeout();var U=this.pTime?c.timeStamp-this.pTime<h.interval:!0,G=!this.pCenter||Hn(this.pCenter,c.center)<h.posThreshold;this.pTime=c.timeStamp,this.pCenter=c.center,!G||!U?this.count=1:this.count+=1,this._input=c;var Se=this.count%h.taps;if(Se===0)return this.hasRequireFailures()?(this._timer=p(function(){this.state=bt,this.tryEmit()},h.interval,this),Ye):bt}return tt},failTimeout:function(){return this._timer=p(function(){this.state=tt},this.options.interval,this),tt},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==bt&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}});function vt(c,h){return h=h||{},h.recognizers=O(h.recognizers,vt.defaults.preset),new Zi(c,h)}vt.VERSION="2.0.7",vt.defaults={domEvents:!1,touchAction:ss,enable:!0,inputTarget:null,inputClass:null,preset:[[Hi,{enable:!1}],[Ui,{enable:!1},["rotate"]],[ji,{direction:Ae}],[Wn,{direction:Ae},["swipe"]],[Gn],[Gn,{event:"doubletap",taps:2},["tap"]],[zi]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};var cl=1,cs=2;function Zi(c,h){this.options=v({},vt.defaults,h||{}),this.options.inputTarget=this.options.inputTarget||c,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=c,this.input=Fo(this),this.touchAction=new Fi(this,this.options.touchAction),us(this,!0),_(this.options.recognizers,function(m){var b=this.add(new m[0](m[1]));m[2]&&b.recognizeWith(m[2]),m[3]&&b.requireFailure(m[3])},this)}Zi.prototype={set:function(c){return v(this.options,c),c.touchAction&&this.touchAction.update(),c.inputTarget&&(this.input.destroy(),this.input.target=c.inputTarget,this.input.init()),this},stop:function(c){this.session.stopped=c?cs:cl},recognize:function(c){var h=this.session;if(!h.stopped){this.touchAction.preventDefaults(c);var m,b=this.recognizers,C=h.curRecognizer;(!C||C&&C.state&bt)&&(C=h.curRecognizer=null);for(var U=0;U<b.length;)m=b[U],h.stopped!==cs&&(!C||m==C||m.canRecognizeWith(C))?m.recognize(c):m.reset(),!C&&m.state&(Ye|Wt|Pt)&&(C=h.curRecognizer=m),U++}},get:function(c){if(c instanceof gt)return c;for(var h=this.recognizers,m=0;m<h.length;m++)if(h[m].options.event==c)return h[m];return null},add:function(c){if(d(c,"add",this))return this;var h=this.get(c.options.event);return h&&this.remove(h),this.recognizers.push(c),c.manager=this,this.touchAction.update(),c},remove:function(c){if(d(c,"remove",this))return this;if(c=this.get(c),c){var h=this.recognizers,m=A(h,c);m!==-1&&(h.splice(m,1),this.touchAction.update())}return this},on:function(c,h){if(c!==r&&h!==r){var m=this.handlers;return _(y(c),function(b){m[b]=m[b]||[],m[b].push(h)}),this}},off:function(c,h){if(c!==r){var m=this.handlers;return _(y(c),function(b){h?m[b]&&m[b].splice(A(m[b],h),1):delete m[b]}),this}},emit:function(c,h){this.options.domEvents&&ul(c,h);var m=this.handlers[c]&&this.handlers[c].slice();if(!(!m||!m.length)){h.type=c,h.preventDefault=function(){h.srcEvent.preventDefault()};for(var b=0;b<m.length;)m[b](h),b++}},destroy:function(){this.element&&us(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}};function us(c,h){var m=c.element;if(m.style){var b;_(c.options.cssProps,function(C,U){b=oe(m.style,U),h?(c.oldCssProps[b]=m.style[b],m.style[b]=C):m.style[b]=c.oldCssProps[b]||""}),h||(c.oldCssProps={})}}function ul(c,h){var m=e.createEvent("Event");m.initEvent(c,!0,!0),m.gesture=h,h.target.dispatchEvent(m)}v(vt,{INPUT_START:q,INPUT_MOVE:be,INPUT_END:re,INPUT_CANCEL:M,STATE_POSSIBLE:Yn,STATE_BEGAN:Ye,STATE_CHANGED:Wt,STATE_ENDED:Pt,STATE_RECOGNIZED:bt,STATE_CANCELLED:mn,STATE_FAILED:tt,DIRECTION_NONE:W,DIRECTION_LEFT:Te,DIRECTION_RIGHT:je,DIRECTION_UP:Ze,DIRECTION_DOWN:Ee,DIRECTION_HORIZONTAL:Ae,DIRECTION_VERTICAL:et,DIRECTION_ALL:hn,Manager:Zi,Input:Ve,TouchAction:Fi,TouchInput:Zn,MouseInput:jn,PointerEventInput:Ri,TouchMouseInput:Li,SingleTouchInput:es,Recognizer:gt,AttrRecognizer:Je,Tap:Gn,Pan:Wn,Swipe:ji,Pinch:Ui,Rotate:Hi,Press:zi,on:Z,off:E,each:_,merge:I,extend:g,assign:v,inherit:k,bindFn:L,prefixed:oe});var fl=typeof n<"u"?n:typeof self<"u"?self:{};fl.Hammer=vt,typeof r=="function"&&r.amd?r(function(){return vt}):t.exports?t.exports=vt:n[i]=vt})(window,document,"Hammer")})(Lo);var lh=Lo.exports;const bn=yl(lh);function ch(t){let n;return{c(){n=$("div"),this.h()},l(e){n=F(e,"DIV",{class:!0}),H(n).forEach(N),this.h()},h(){B(n,"class",t[0])},m(e,i){X(e,n,i),t[2](n)},p(e,[i]){i&1&&B(n,"class",e[0])},i:Ie,o:Ie,d(e){e&&N(n),t[2](null)}}}function uh(t,n,e){const i=Vr();let{class:r=""}=n,s,a,o=null;mi(()=>{a=new bn.Manager(s,{recognizers:[[bn.Pan],[bn.Pinch]]});const l=new bn.Tap({taps:1,event:"tapSingle"}),u=new bn.Tap({taps:2,event:"tapDouble"});a.add([u,l]),u.recognizeWith(l),l.requireFailure(u),a.on("pan",p=>{o&&i("move",{x:p.center.x,y:p.center.y,dx:p.center.x-o.center.x,dy:p.center.y-o.center.y}),o=p.isFinal?null:p}),a.on("pinch",p=>{}),a.on("tapSingle",p=>{i("input",{x:p.center.x,y:p.center.y,type:"secondary"})}),a.on("tapDouble",p=>{i("input",{x:p.center.x,y:p.center.y,type:"primary"})})}),pi(()=>{a.destroy()});function f(l){Le[l?"unshift":"push"](()=>{s=l,e(1,s)})}return t.$$set=l=>{"class"in l&&e(0,r=l.class)},[r,s,f]}class fh extends ye{constructor(n){super(),ke(this,n,uh,ch,ve,{class:0})}}function hh(t){let n,e="Unsupported input method.";return{c(){n=$("span"),n.textContent=e},l(i){n=F(i,"SPAN",{"data-svelte-h":!0}),Pe(n)!=="svelte-1d8n4pk"&&(n.textContent=e)},m(i,r){X(i,n,r)},p:Ie,i:Ie,o:Ie,d(i){i&&N(n)}}}function dh(t){let n,e;return n=new fh({props:{class:t[0]}}),n.$on("move",t[6]),n.$on("zoom",t[7]),n.$on("input",t[8]),{c(){le(n.$$.fragment)},l(i){ce(n.$$.fragment,i)},m(i,r){ue(n,i,r),e=!0},p(i,r){const s={};r&1&&(s.class=i[0]),n.$set(s)},i(i){e||(j(n.$$.fragment,i),e=!0)},o(i){V(n.$$.fragment,i),e=!1},d(i){fe(n,i)}}}function _h(t){let n,e="Keyboard input method not implemented.";return{c(){n=$("span"),n.textContent=e},l(i){n=F(i,"SPAN",{"data-svelte-h":!0}),Pe(n)!=="svelte-1slf3g9"&&(n.textContent=e)},m(i,r){X(i,n,r)},p:Ie,i:Ie,o:Ie,d(i){i&&N(n)}}}function mh(t){let n,e;return n=new oh({props:{class:t[0]}}),n.$on("move",t[3]),n.$on("zoom",t[4]),n.$on("input",t[5]),{c(){le(n.$$.fragment)},l(i){ce(n.$$.fragment,i)},m(i,r){ue(n,i,r),e=!0},p(i,r){const s={};r&1&&(s.class=i[0]),n.$set(s)},i(i){e||(j(n.$$.fragment,i),e=!0)},o(i){V(n.$$.fragment,i),e=!1},d(i){fe(n,i)}}}function ph(t){let n,e,i,r;const s=[mh,_h,dh,hh],a=[];function o(f,l){return f[1]=="mouse"?0:f[1]=="keyboard"?1:f[1]=="touch"?2:3}return n=o(t),e=a[n]=s[n](t),{c(){e.c(),i=Ge()},l(f){e.l(f),i=Ge()},m(f,l){a[n].m(f,l),X(f,i,l),r=!0},p(f,[l]){let u=n;n=o(f),n===u?a[n].p(f,l):(Nn(),V(a[u],1,1,()=>{a[u]=null}),Cn(),e=a[n],e?e.p(f,l):(e=a[n]=s[n](f),e.c()),j(e,1),e.m(i.parentNode,i))},i(f){r||(j(e),r=!0)},o(f){V(e),r=!1},d(f){f&&N(i),a[n].d(f)}}}function Vr(){return Pa()}function bh(t,n,e){const i=Vr();let{class:r=""}=n,{inputMethod:s="mouse"}=n;const a=d=>i("move",d.detail),o=d=>i("zoom",d.detail),f=d=>i("input",d.detail),l=d=>i("move",d.detail),u=d=>i("zoom",d.detail),p=d=>i("input",d.detail);return t.$$set=d=>{"class"in d&&e(0,r=d.class),"inputMethod"in d&&e(1,s=d.inputMethod)},[r,s,i,a,o,f,l,u,p]}class gh extends ye{constructor(n){super(),ke(this,n,bh,ph,ve,{class:0,inputMethod:1})}}function vh(t,n){return t!=t?n==n:t!==n||t&&typeof t=="object"||typeof t=="function"}class Yr{constructor(n,e,i){P(this,"slot");P(this,"key");P(this,"value");P(this,"subscriptions",new Set);this.slot=n,this.key=e,this.load(),this.value===void 0&&(this.value=i,this.save())}getObj(){let n=localStorage.getItem(this.slot);return n===null&&(localStorage.setItem(this.slot,"{}"),n=localStorage.getItem(this.slot)),JSON.parse(n)}save(){const n=this.getObj();n[this.key]=this.value,localStorage.setItem(this.slot,JSON.stringify(n)),console.debug(`LocalStorageWritable: Saved to ${this.slot}['${this.key}'] = ${this.value}`)}load(){const n=this.getObj();this.value=this.key in n?n[this.key]:void 0,console.debug(`LocalStorageWritable: Loaded from ${this.slot}['${this.key}'] = ${this.value}`)}set(n){vh(this.value,n)&&(this.value=n,this.save(),this.subscriptions.forEach(e=>e[0](this.value)))}update(n){this.value&&this.set(n(this.value))}subscribe(n,e=()=>{}){const i=[n,e];return this.subscriptions.add(i),this.value!==void 0&&n(this.value),()=>{this.subscriptions.delete(i)}}}const Er=new Yr("settings","autoDisplayInfo",!0),Tr=new Yr("settings","volume",.25),_i=new Yr("settings","inputMethod","mouse");function wh(t){let n,e,i,r,s,a,o,f,l,u;return a=new gh({props:{class:"w-full h-full force-overlap",inputMethod:t[5]}}),a.$on("move",t[11]),a.$on("zoom",t[12]),a.$on("input",t[13]),{c(){n=$("div"),e=$("canvas"),i=ne(),r=$("canvas"),s=ne(),le(a.$$.fragment),this.h()},l(p){n=F(p,"DIV",{class:!0});var d=H(n);e=F(d,"CANVAS",{}),H(e).forEach(N),i=ie(d),r=F(d,"CANVAS",{}),H(r).forEach(N),s=ie(d),ce(a.$$.fragment,d),d.forEach(N),this.h()},h(){B(n,"class","w-full h-full cursor-pointer force-overlap")},m(p,d){X(p,n,d),R(n,e),t[9](e),R(n,i),R(n,r),t[10](r),R(n,s),ue(a,n,null),t[14](n),f=!0,l||(u=Sa(o=Ro.call(null,n,t[15])),l=!0)},p(p,[d]){const _={};d&32&&(_.inputMethod=p[5]),a.$set(_),o&&xa(o.update)&&d&26&&o.update.call(null,p[15])},i(p){f||(j(a.$$.fragment,p),f=!0)},o(p){V(a.$$.fragment,p),f=!1},d(p){p&&N(n),t[9](null),t[10](null),fe(a),t[14](null),l=!1,u()}}}function yh(t,n,e){let i;zt(t,_i,A=>e(5,i=A));const r=Pa();let s,{world:a}=n,{theme:o}=n,{viewport:f}=n,l,u;const p=async()=>{l==null||l.destroy(),u&&(l=new Jf(a,o,u,f),await l.init(),e(3,u.width=s.clientWidth,u),e(3,u.height=s.clientHeight,u),v=!0,I())};let d,_;const w=async()=>{d==null||d.destroy(),_&&(d=new nh(a,o,_,f),await d.init(),e(4,_.width=s.clientWidth,_),e(4,_.height=s.clientHeight,_))};let v=!1,g=-1;const I=()=>{cancelAnimationFrame(g),g=requestAnimationFrame(I),v&&(v=!1,l==null||l.render()),d==null||d.render()};let k,L;mi(async()=>{await p(),await w(),k=a.addEventListener("change",()=>{v=!0}),L=f.addEventListener("change",()=>{v=!0})}),pi(()=>{l==null||l.destroy(),d==null||d.destroy(),a.removeEventListener(k),f.removeEventListener(L),cancelAnimationFrame(g)});function S(A){Le[A?"unshift":"push"](()=>{u=A,e(3,u)})}function O(A){Le[A?"unshift":"push"](()=>{_=A,e(4,_)})}const Z=A=>{f.translate(u,A.detail.dx,A.detail.dy),f.change()},E=A=>{const Y=A.detail.amountType=="relative"?f.scale*A.detail.amount:f.scale+(A.detail.amount-1),ae=f.clampScale(u,Y,4,48);f.scaleFrom(u,ae,A.detail.x,A.detail.y),f.change()},D=A=>{const Y=f.canvasPos(u,A.detail.x,A.detail.y,!0);switch(A.detail.type){case"primary":r("action",{type:"reveal",pos:Y});break;case"secondary":r("action",{type:"flag",pos:Y});break;case"extra":r("action",{type:"reset",pos:Y});break}a.change()};function x(A){Le[A?"unshift":"push"](()=>{s=A,e(2,s)})}const y=(A,Y)=>{e(3,u.width=A,u),e(3,u.height=Y,u),e(4,_.width=A,_),e(4,_.height=Y,_),f.change(),I()};return t.$$set=A=>{"world"in A&&e(0,a=A.world),"theme"in A&&e(8,o=A.theme),"viewport"in A&&e(1,f=A.viewport)},[a,f,s,u,_,i,r,I,o,S,O,Z,E,D,x,y]}class kh extends ye{constructor(n){super(),ke(this,n,yh,wh,ve,{world:0,theme:8,viewport:1})}}class $o{constructor(n,e){P(this,"textures");P(this,"img");typeof n=="string"?(this.img=document.createElement("img"),this.img.loading="eager",this.img.src=n):this.img=n,this.textures=e}async awaitLoad(){this.img instanceof HTMLCanvasElement||await Uf(this.img)}onLoad(n){this.awaitLoad().then(()=>n(this))}draw(n,e,i,r,s,a){const[o,f,l,u]=this.textures[e];n.drawImage(this.img,o,f,l,u,i,r,s,a)}toImageDataAtlas(){const[n,e]=this.img instanceof HTMLCanvasElement?kr(this.img,!0,{willReadFrequently:!1}):kr(this.img,{willReadFrequently:!1});return new Eh(Object.fromEntries(Object.entries(this.textures).map(([i,[r,s,a,o]])=>[i,e.getImageData(r,s,a,o)])))}}class Eh{constructor(n){P(this,"textures");this.textures=n}toImageAtlas(n=!0){let e=0,i=0,r={},s=0;for(const f in this.textures){const l=this.textures[f];n&&s++,r[f]={x:s,y:n?1:0,width:l.width,height:l.height,name:f},s+=l.width+(n?1:0),e=s,i=Math.max(i,l.height+(n?2:0))}const[a,o]=kr(e,i);for(const f in r){const l=r[f];o.putImageData(this.textures[f],l.x,l.y)}return new $o(a,Object.fromEntries(Object.entries(r).map(([f,l])=>(l=l,[f,[l.x,l.y,l.width,l.height]]))))}}class Th{constructor(){P(this,"volume",1)}playSound(n,e=1){const i=this.soundEffects[n],r=Mi(e*this.volume);if(r<=0)return;const s=document.createElement("audio");s.src=i.src,s.volume=r,s.playbackRate=1+Math.random()*i.variation,s.preservesPitch=!1;const a=()=>{s.removeEventListener("ended",a),s.remove()};s.addEventListener("ended",a),s.play()}}class Ih extends Th{constructor(){super(...arguments);P(this,"tileset",new $o("/infinite-minesweeper/retro/tileset.png",{null:[0,0,16,16],skull:[0,16,16,16],bomb:[16,0,16,16],explosion1:[16,16,16,16],explosion2:[16,32,16,16],explosion3:[16,48,16,16],explosion4:[16,64,16,16],flag:[32,16,16,16],flag_1:[32,48,16,16],flag_2:[32,64,16,16],flag_3:[32,80,16,16],flag_anti:[32,32,16,16],flag_anti_1:[32,96,16,16],flag_anti_2:[32,112,16,16],flag_anti_3:[32,128,16,16],number_0:[48,0,16,16],number_1:[48,16,16,16],number_2:[48,32,16,16],number_3:[48,48,16,16],number_4:[48,64,16,16],number_5:[48,80,16,16],number_6:[48,96,16,16],number_7:[48,112,16,16],number_8:[48,128,16,16],number_9:[48,144,16,16],number_10:[48,160,16,16],number_11:[48,176,16,16],number_12:[48,192,16,16],number_13:[48,208,16,16],number_14:[48,224,16,16],number_15:[48,240,16,16],number_16:[48,256,16,16],number_17:[48,272,16,16],number_18:[48,288,16,16],number_19:[48,304,16,16],number_20:[48,320,16,16],number_21:[48,336,16,16],number_22:[48,352,16,16],number_23:[48,368,16,16],number_24:[48,384,16,16],number_negative_sign:[96,96,16,16],tile_vanilla_covered:[64,0,16,16],tile_vanilla_revealed:[80,0,16,16],tile_chocolate_covered:[64,16,16,16],tile_chocolate_revealed:[80,16,16,16],tile_waffle_light_covered:[64,32,16,16],tile_waffle_light_revealed:[80,32,16,16],tile_waffle_dark_covered:[96,32,16,16],tile_waffle_dark_revealed:[112,32,16,16],tile_stroopwafel_light_covered:[64,48,16,16],tile_stroopwafel_light_revealed:[80,48,16,16],tile_stroopwafel_dark_covered:[96,48,16,16],tile_stroopwafel_dark_revealed:[112,48,16,16],tile_blueberry_covered:[64,64,16,16],tile_blueberry_revealed:[80,64,16,16],tile_strawberry_covered:[64,80,16,16],tile_strawberry_revealed:[80,80,16,16],tile_cookies_and_cream_covered:[64,96,16,16],tile_cookies_and_cream_revealed:[80,96,16,16]}));P(this,"soundEffects",{reveal:{src:"/infinite-minesweeper/retro/reveal.wav",variation:.25},unflag:{src:"/infinite-minesweeper/retro/unflag.wav",variation:.25},explosion:{src:"/infinite-minesweeper/retro/explosion.wav",variation:.25}})}async init(){await this.tileset.awaitLoad(),this.tileset=this.tileset.toImageDataAtlas().toImageAtlas(!0)}drawNearby(e,i){if(i!=Vt){if(i<0){e.save(),e.scale(.55,.55),e.translate(.1,.45),this.tileset.draw(e,"number_negative_sign",0,0,1,1),e.fillStyle=["#FFFFFF","#0026FF","#267F00","#BA0000","#00137F","#7F0000","#008080","#33D137","#9400D8","#E48C00","#FF8F9F","#FF8F00","#598CAA","#F03E69"][-i]??"white",e.fillRect(.25-.004,.4375-.004,.4375+.008,.125+.008),e.translate(.7,0),this.drawNearby(e,-i),e.restore();return}switch(i){case 0:this.tileset.draw(e,"number_0",0,0,1,1);break;case 1:this.tileset.draw(e,"number_1",0,0,1,1);break;case 2:this.tileset.draw(e,"number_2",0,0,1,1);break;case 3:this.tileset.draw(e,"number_3",0,0,1,1);break;case 4:this.tileset.draw(e,"number_4",0,0,1,1);break;case 5:this.tileset.draw(e,"number_5",0,0,1,1);break;case 6:this.tileset.draw(e,"number_6",0,0,1,1);break;case 7:this.tileset.draw(e,"number_7",0,0,1,1);break;case 8:this.tileset.draw(e,"number_8",0,0,1,1);break;case 9:this.tileset.draw(e,"number_9",0,0,1,1);break;case 10:this.tileset.draw(e,"number_10",0,0,1,1);break;case 11:this.tileset.draw(e,"number_11",0,0,1,1);break;case 12:this.tileset.draw(e,"number_12",0,0,1,1);break;case 13:this.tileset.draw(e,"number_13",0,0,1,1);break;case 14:this.tileset.draw(e,"number_14",0,0,1,1);break;case 15:this.tileset.draw(e,"number_15",0,0,1,1);break;case 16:this.tileset.draw(e,"number_16",0,0,1,1);break;case 17:this.tileset.draw(e,"number_17",0,0,1,1);break;case 18:this.tileset.draw(e,"number_18",0,0,1,1);break;case 19:this.tileset.draw(e,"number_19",0,0,1,1);break;case 20:this.tileset.draw(e,"number_20",0,0,1,1);break;case 21:this.tileset.draw(e,"number_21",0,0,1,1);break;case 22:this.tileset.draw(e,"number_22",0,0,1,1);break;case 23:this.tileset.draw(e,"number_23",0,0,1,1);break;case 24:this.tileset.draw(e,"number_24",0,0,1,1);break;default:throw new Error(`ThemeRetro invalid draw nearby count. ${i}`)}}}drawFlags(e,i){switch(i){case 0:break;case 1:this.tileset.draw(e,"flag_1",0,0,1,1);break;case 2:this.tileset.draw(e,"flag_2",0,0,1,1);break;case 3:this.tileset.draw(e,"flag_3",0,0,1,1);break;case-1:this.tileset.draw(e,"flag_anti_1",0,0,1,1);break;case-2:this.tileset.draw(e,"flag_anti_2",0,0,1,1);break;case-3:this.tileset.draw(e,"flag_anti_3",0,0,1,1);break;default:throw new Error("ThemeRetro invalid draw flag count.")}}drawSingleMineTile(e,i,r,s,a){if(a){this.tileset.draw(e,r,0,0,1,1);return}switch(i.state){case Lt.Covered:this.tileset.draw(e,r,0,0,1,1);break;case Lt.Flagged:this.tileset.draw(e,r,0,0,1,1),this.tileset.draw(e,"flag",0,0,1,1);break;case Lt.Revealed:{this.tileset.draw(e,s,0,0,1,1),this.drawNearby(e,i.minesNearby());break}}}drawMultiMineTile(e,i,r,s,a){if(a){this.tileset.draw(e,r,0,0,1,1);return}i.isRevealed?(this.tileset.draw(e,s,0,0,1,1),this.drawNearby(e,i.minesNearby())):(this.tileset.draw(e,r,0,0,1,1),this.drawFlags(e,i.numFlags()))}drawStrawberryTile(e,i,r){if(r){this.tileset.draw(e,"tile_strawberry_covered",0,0,1,1);return}switch(i.state){case Lt.Covered:this.tileset.draw(e,"tile_strawberry_covered",0,0,1,1);break;case Lt.Flagged:this.tileset.draw(e,"tile_strawberry_covered",0,0,1,1),this.tileset.draw(e,"flag",0,0,1,1);break;case Lt.Revealed:{this.tileset.draw(e,"tile_strawberry_revealed",0,0,1,1);const s=i.minesNearby(!0),a=i.secondaryMinesNearby(!0);a==null?this.drawNearby(e,s):(e.save(),e.scale(.55,.55),e.translate(.1,.45),this.drawNearby(e,i.secondaryNearbyMines==di.Right?s:a),e.translate(.7,0),this.drawNearby(e,i.secondaryNearbyMines==di.Right?a:s),e.restore());break}}}drawSingleAntiMineTile(e,i,r,s,a){if(a){this.tileset.draw(e,r,0,0,1,1);return}switch(i.state){case wn.Covered:this.tileset.draw(e,r,0,0,1,1);break;case wn.Flagged:this.tileset.draw(e,r,0,0,1,1),this.tileset.draw(e,"flag",0,0,1,1);break;case wn.AntiFlagged:this.tileset.draw(e,r,0,0,1,1),this.tileset.draw(e,"flag_anti",0,0,1,1);break;case wn.Revealed:{this.tileset.draw(e,s,0,0,1,1),this.drawNearby(e,i.minesNearby());break}}}drawForcedTile(e,i,r){switch(i.type){case"vanilla":this.drawSingleMineTile(e,i,"tile_vanilla_covered","tile_vanilla_revealed",r);break;case"chocolate":this.drawSingleMineTile(e,i,"tile_chocolate_covered","tile_chocolate_revealed",r);break;case"waffle":{i.isDark?this.drawSingleMineTile(e,i,"tile_waffle_dark_covered","tile_waffle_dark_revealed",r):this.drawSingleMineTile(e,i,"tile_waffle_light_covered","tile_waffle_light_revealed",r);break}case"stroopwafel":{i.isDark?this.drawSingleMineTile(e,i,"tile_stroopwafel_dark_covered","tile_stroopwafel_dark_revealed",r):this.drawSingleMineTile(e,i,"tile_stroopwafel_light_covered","tile_stroopwafel_light_revealed",r);break}case"blueberry":{this.drawMultiMineTile(e,i,"tile_blueberry_covered","tile_blueberry_revealed",r);break}case"strawberry":{this.drawStrawberryTile(e,i,r);break}case"cookies_and_cream":{this.drawSingleAntiMineTile(e,i,"tile_cookies_and_cream_covered","tile_cookies_and_cream_revealed",r);break}}}drawTile(e,i){e.save(),e.translate(i.x,i.y),this.drawForcedTile(e,i,!1),e.restore()}drawParticle(e,i){switch(e.save(),i.type){case"flag":{e.translate(i.x+.5,i.y+.5),e.rotate(i.r),e.globalAlpha=i.opacity,i.isMultiFlag?(e.translate(-.5,-.5),this.drawFlags(e,i.numFlags)):i.numFlags==1?this.tileset.draw(e,"flag",-.5,-.5,1,1):this.tileset.draw(e,"flag_anti",-.5,-.5,1,1);break}case"explosion":{const r=["explosion1","explosion2","explosion3","explosion4"],s=Math.min(Math.floor(i.lifetime/i.maxLifetime*r.length),r.length-1);this.tileset.draw(e,r[s],i.tile.x,i.tile.y,1,1);break}case"faketile":{e.translate(i.tile.x,i.tile.y),e.globalAlpha=i.opacity,this.drawForcedTile(e,i.tile,!0);break}case"tilereveal":{e.translate(i.x+.5,i.y+.5),e.rotate(i.r),e.translate(-.5,-.5),e.globalAlpha=i.opacity,this.drawForcedTile(e,i.tile,!0);break}}e.globalAlpha=1,e.restore()}drawDeathIcon(e,i,r){this.tileset.draw(e,"skull",i,r,1,1)}}function da(t){let n,e;return n=new kh({props:{world:t[0],theme:t[4],viewport:t[1]}}),n.$on("action",t[7]),{c(){le(n.$$.fragment)},l(i){ce(n.$$.fragment,i)},m(i,r){ue(n,i,r),e=!0},p(i,r){const s={};r&1&&(s.world=i[0]),r&16&&(s.theme=i[4]),r&2&&(s.viewport=i[1]),n.$set(s)},i(i){e||(j(n.$$.fragment,i),e=!0)},o(i){V(n.$$.fragment,i),e=!1},d(i){fe(n,i)}}}function Ph(t){let n,e,i,r,s=t[0]&&t[4]&&t[1]&&da(t);return{c(){s&&s.c(),n=Ge()},l(a){s&&s.l(a),n=Ge()},m(a,o){s&&s.m(a,o),X(a,n,o),e=!0,i||(r=ge(window,"beforeunload",t[6]),i=!0)},p(a,[o]){a[0]&&a[4]&&a[1]?s?(s.p(a,o),o&19&&j(s,1)):(s=da(a),s.c(),j(s,1),s.m(n.parentNode,n)):s&&(Nn(),V(s,1,1,()=>{s=null}),Cn())},i(a){e||(j(s),e=!0)},o(a){V(s),e=!1},d(a){a&&N(n),s&&s.d(a),i=!1,r()}}}function Sh(t,n,e){let i;zt(t,Tr,p=>e(5,i=p));let{saveSlot:r}=n,{world:s}=n,a=new Ih,{viewport:o}=n,{bookmarks:f=[]}=n;mi(async()=>{await a.init();const p=Yf(r);e(0,s=p.world),e(1,o=p.viewport??new Zr(s)),e(2,f=p.bookmarks??[]),s.addEventListener("sound_unflag",()=>{a.playSound("unflag")}),s.addEventListener("sound_reveal",({data:d})=>{a.playSound("reveal",d/10+.9)}),s.addEventListener("sound_explosion",()=>{a.playSound("explosion")})}),pi(()=>{s.destroyDispatcher(),o.destroyDispatcher(),location.reload()});const l=()=>{Xf(r,{world:s,viewport:o,bookmarks:f})},u=p=>{p.detail.type=="reveal"?s.reveal(p.detail.pos.x,p.detail.pos.y):p.detail.type=="flag"?s.flag(p.detail.pos.x,p.detail.pos.y):p.detail.type=="reset"&&s.reset(p.detail.pos.x,p.detail.pos.y)};return t.$$set=p=>{"saveSlot"in p&&e(3,r=p.saveSlot),"world"in p&&e(0,s=p.world),"viewport"in p&&e(1,o=p.viewport),"bookmarks"in p&&e(2,f=p.bookmarks)},t.$$.update=()=>{t.$$.dirty&32&&e(4,a.volume=i,a)},[s,o,f,r,a,i,l,u]}class xh extends ye{constructor(n){super(),ke(this,n,Sh,Ph,ve,{saveSlot:3,world:0,viewport:1,bookmarks:2})}}/**
 * @license lucide-svelte v0.372.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Ah={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":2,"stroke-linecap":"round","stroke-linejoin":"round"},_a=Ah;function ma(t,n,e){const i=t.slice();return i[10]=n[e][0],i[11]=n[e][1],i}function or(t){let n,e=[t[11]],i={};for(let r=0;r<e.length;r+=1)i=he(i,e[r]);return{c(){n=Aa(t[10]),this.h()},l(r){n=Na(r,t[10],{}),H(n).forEach(N),this.h()},h(){ci(n,i)},m(r,s){X(r,n,s)},p(r,s){ci(n,i=_t(e,[s&32&&r[11]]))},d(r){r&&N(n)}}}function pa(t){let n=t[10],e,i=t[10]&&or(t);return{c(){i&&i.c(),e=Ge()},l(r){i&&i.l(r),e=Ge()},m(r,s){i&&i.m(r,s),X(r,e,s)},p(r,s){r[10]?n?ve(n,r[10])?(i.d(1),i=or(r),n=r[10],i.c(),i.m(e.parentNode,e)):i.p(r,s):(i=or(r),n=r[10],i.c(),i.m(e.parentNode,e)):n&&(i.d(1),i=null,n=r[10])},d(r){r&&N(e),i&&i.d(r)}}}function Nh(t){let n,e,i,r,s,a=en(t[5]),o=[];for(let d=0;d<a.length;d+=1)o[d]=pa(ma(t,a,d));const f=t[9].default,l=ut(f,t,t[8],null);let u=[_a,t[6],{width:t[2]},{height:t[2]},{stroke:t[1]},{"stroke-width":i=t[4]?Number(t[3])*24/Number(t[2]):t[3]},{class:r=`lucide-icon lucide lucide-${t[0]} ${t[7].class??""}`}],p={};for(let d=0;d<u.length;d+=1)p=he(p,u[d]);return{c(){n=Aa("svg");for(let d=0;d<o.length;d+=1)o[d].c();e=Ge(),l&&l.c(),this.h()},l(d){n=Na(d,"svg",{width:!0,height:!0,stroke:!0,"stroke-width":!0,class:!0});var _=H(n);for(let w=0;w<o.length;w+=1)o[w].l(_);e=Ge(),l&&l.l(_),_.forEach(N),this.h()},h(){ci(n,p)},m(d,_){X(d,n,_);for(let w=0;w<o.length;w+=1)o[w]&&o[w].m(n,null);R(n,e),l&&l.m(n,null),s=!0},p(d,[_]){if(_&32){a=en(d[5]);let w;for(w=0;w<a.length;w+=1){const v=ma(d,a,w);o[w]?o[w].p(v,_):(o[w]=pa(v),o[w].c(),o[w].m(n,e))}for(;w<o.length;w+=1)o[w].d(1);o.length=a.length}l&&l.p&&(!s||_&256)&&ft(l,f,d,d[8],s?dt(f,d[8],_,null):ht(d[8]),null),ci(n,p=_t(u,[_a,_&64&&d[6],(!s||_&4)&&{width:d[2]},(!s||_&4)&&{height:d[2]},(!s||_&2)&&{stroke:d[1]},(!s||_&28&&i!==(i=d[4]?Number(d[3])*24/Number(d[2]):d[3]))&&{"stroke-width":i},(!s||_&129&&r!==(r=`lucide-icon lucide lucide-${d[0]} ${d[7].class??""}`))&&{class:r}]))},i(d){s||(j(l,d),s=!0)},o(d){V(l,d),s=!1},d(d){d&&N(n),Ir(o,d),l&&l.d(d)}}}function Ch(t,n,e){const i=["name","color","size","strokeWidth","absoluteStrokeWidth","iconNode"];let r=hs(n,i),{$$slots:s={},$$scope:a}=n,{name:o}=n,{color:f="currentColor"}=n,{size:l=24}=n,{strokeWidth:u=2}=n,{absoluteStrokeWidth:p=!1}=n,{iconNode:d}=n;return t.$$set=_=>{e(7,n=he(he({},n),xe(_))),e(6,r=hs(n,i)),"name"in _&&e(0,o=_.name),"color"in _&&e(1,f=_.color),"size"in _&&e(2,l=_.size),"strokeWidth"in _&&e(3,u=_.strokeWidth),"absoluteStrokeWidth"in _&&e(4,p=_.absoluteStrokeWidth),"iconNode"in _&&e(5,d=_.iconNode),"$$scope"in _&&e(8,a=_.$$scope)},n=xe(n),[o,f,l,u,p,d,r,n,a,s]}class Bt extends ye{constructor(n){super(),ke(this,n,Ch,Nh,ve,{name:0,color:1,size:2,strokeWidth:3,absoluteStrokeWidth:4,iconNode:5})}}function Mh(t){let n;const e=t[2].default,i=ut(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&ft(i,e,r,r[3],n?dt(e,r[3],s,null):ht(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function Dh(t){let n,e;const i=[{name:"info"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Mh]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Dt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function Oh(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["circle",{cx:"12",cy:"12",r:"10"}],["path",{d:"M12 16v-4"}],["path",{d:"M12 8h.01"}]];return t.$$set=a=>{e(1,n=he(he({},n),xe(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=xe(n),[s,n,i,r]}class Bh extends ye{constructor(n){super(),ke(this,n,Oh,Dh,ve,{})}}function ba(t){let n,e,i,r,s,a,o=t[1]&&ga(t);const f=t[4].default,l=ut(f,t,t[3],null);return{c(){n=$("div"),e=$("div"),o&&o.c(),i=ne(),r=$("div"),s=$("div"),l&&l.c(),this.h()},l(u){n=F(u,"DIV",{class:!0});var p=H(n);e=F(p,"DIV",{class:!0});var d=H(e);o&&o.l(d),d.forEach(N),i=ie(p),r=F(p,"DIV",{class:!0});var _=H(r);s=F(_,"DIV",{class:!0});var w=H(s);l&&l.l(w),w.forEach(N),_.forEach(N),p.forEach(N),this.h()},h(){B(e,"class","modal-background svelte-9y1m1s"),Qt(e,"modal-background-styled",t[2]),B(s,"class","pointer-events-auto"),B(r,"class","modal-content flex justify-center items-center pointer-events-none p-8 svelte-9y1m1s"),B(n,"class","modal force-overlap svelte-9y1m1s")},m(u,p){X(u,n,p),R(n,e),o&&o.m(e,null),R(n,i),R(n,r),R(r,s),l&&l.m(s,null),a=!0},p(u,p){u[1]?o?o.p(u,p):(o=ga(u),o.c(),o.m(e,null)):o&&(o.d(1),o=null),(!a||p&4)&&Qt(e,"modal-background-styled",u[2]),l&&l.p&&(!a||p&8)&&ft(l,f,u,u[3],a?dt(f,u[3],p,null):ht(u[3]),null)},i(u){a||(j(l,u),a=!0)},o(u){V(l,u),a=!1},d(u){u&&N(n),o&&o.d(),l&&l.d(u)}}}function ga(t){let n,e,i;return{c(){n=$("button"),this.h()},l(r){n=F(r,"BUTTON",{class:!0,"aria-label":!0}),H(n).forEach(N),this.h()},h(){B(n,"class","w-full h-full"),B(n,"aria-label","Close Modal")},m(r,s){X(r,n,s),e||(i=ge(n,"click",t[5]),e=!0)},p:Ie,d(r){r&&N(n),e=!1,i()}}}function Rh(t){let n,e,i=t[0]&&ba(t);return{c(){i&&i.c(),n=Ge()},l(r){i&&i.l(r),n=Ge()},m(r,s){i&&i.m(r,s),X(r,n,s),e=!0},p(r,[s]){r[0]?i?(i.p(r,s),s&1&&j(i,1)):(i=ba(r),i.c(),j(i,1),i.m(n.parentNode,n)):i&&(Nn(),V(i,1,1,()=>{i=null}),Cn())},i(r){e||(j(i),e=!0)},o(r){V(i),e=!1},d(r){r&&N(n),i&&i.d(r)}}}function Lh(t,n,e){let{$$slots:i={},$$scope:r}=n,{visible:s=!1}=n,{closable:a=!0}=n,{backgroundStyle:o=!0}=n;const f=()=>e(0,s=!1);return t.$$set=l=>{"visible"in l&&e(0,s=l.visible),"closable"in l&&e(1,a=l.closable),"backgroundStyle"in l&&e(2,o=l.backgroundStyle),"$$scope"in l&&e(3,r=l.$$scope)},[s,a,o,r,i,f]}class lr extends ye{constructor(n){super(),ke(this,n,Lh,Rh,ve,{visible:0,closable:1,backgroundStyle:2})}}function $h(t){let n;const e=t[2].default,i=ut(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&ft(i,e,r,r[3],n?dt(e,r[3],s,null):ht(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function Fh(t){let n,e;const i=[{name:"chevron-left"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[$h]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Dt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function Uh(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"m15 18-6-6 6-6"}]];return t.$$set=a=>{e(1,n=he(he({},n),xe(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=xe(n),[s,n,i,r]}class zh extends ye{constructor(n){super(),ke(this,n,Uh,Fh,ve,{})}}function Hh(t){let n;const e=t[2].default,i=ut(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&ft(i,e,r,r[3],n?dt(e,r[3],s,null):ht(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function jh(t){let n,e;const i=[{name:"chevron-right"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Hh]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Dt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function Zh(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"m9 18 6-6-6-6"}]];return t.$$set=a=>{e(1,n=he(he({},n),xe(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=xe(n),[s,n,i,r]}class Vh extends ye{constructor(n){super(),ke(this,n,Zh,jh,ve,{})}}function Yh(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_cookies_and_cream_screenshot.png" alt="Cookies and Cream Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Cookies and Cream</h2> <div class="biome-description svelte-1pkhcy2">Tile may have anti mine. Anti mines count as -1 mines.
                        <br/><br/>
                        Be careful while revealing tiles; Nearby tiles may still have mines, even though nearby mines is equal to nearby flags.</div></div>`;return{c(){n=$("div"),n.innerHTML=e,this.h()},l(i){n=F(i,"DIV",{class:!0,"data-svelte-h":!0}),Pe(n)!=="svelte-dc0odg"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome text-black svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&N(n)}}}function Xh(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_strawberry_screenshot.png" alt="Strawberry Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Strawberry</h2> <div class="biome-description svelte-1pkhcy2">Tile nearby mine count may have 2 values.
                        <br/><br/>
                        Be careful while revealing tiles; If any of the two values match, the tiles will auto reveal.</div></div>`;return{c(){n=$("div"),n.innerHTML=e,this.h()},l(i){n=F(i,"DIV",{class:!0,"data-svelte-h":!0}),Pe(n)!=="svelte-1hn2487"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&N(n)}}}function Wh(t){let n,e='<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_blueberry_screenshot.png" alt="Blueberry Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Blueberry</h2> <div class="biome-description svelte-1pkhcy2">Tiles may have up to 3 mines.</div></div>';return{c(){n=$("div"),n.innerHTML=e,this.h()},l(i){n=F(i,"DIV",{class:!0,"data-svelte-h":!0}),Pe(n)!=="svelte-1pq8aco"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&N(n)}}}function Gh(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_stroopwafel_screenshot.png" alt="Stroopwafel Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Stroopwafel</h2> <div class="biome-description svelte-1pkhcy2">3x3 checkers of tiles.<br/>
                        Dark checkered sections have 8 mines.<br/>
                        Light checkered sections have 1 mine.</div></div>`;return{c(){n=$("div"),n.innerHTML=e,this.h()},l(i){n=F(i,"DIV",{class:!0,"data-svelte-h":!0}),Pe(n)!=="svelte-4cbz83"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&N(n)}}}function Kh(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_waffle_screenshot.png" alt="Waffle Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Waffle</h2> <div class="biome-description svelte-1pkhcy2">2x2 checkers of tiles.<br/>
                        Dark checkered sections have 3 mines.<br/>
                        Light checkered sections have 1 mine.</div></div>`;return{c(){n=$("div"),n.innerHTML=e,this.h()},l(i){n=F(i,"DIV",{class:!0,"data-svelte-h":!0}),Pe(n)!=="svelte-1ji8mo3"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&N(n)}}}function qh(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_chocolate_screenshot.png" alt="Chocolate Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Chocolate</h2> <div class="biome-description svelte-1pkhcy2">The standard Minesweeper rules.<br/>
                        Much more mines than Vanilla biome.</div></div>`;return{c(){n=$("div"),n.innerHTML=e,this.h()},l(i){n=F(i,"DIV",{class:!0,"data-svelte-h":!0}),Pe(n)!=="svelte-gc9i28"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&N(n)}}}function Jh(t){let n,e='<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_vanilla_screenshot.png" alt="Vanilla Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Vanilla</h2> <div class="biome-description svelte-1pkhcy2">The standard Minesweeper rules.</div></div>';return{c(){n=$("div"),n.innerHTML=e,this.h()},l(i){n=F(i,"DIV",{class:!0,"data-svelte-h":!0}),Pe(n)!=="svelte-ic5bha"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&N(n)}}}function Qh(t){let n,e,i,r,s,a,o,f,l,u,p,d;function _(g,I){if(g[0]=="Vanilla")return Jh;if(g[0]=="Chocolate")return qh;if(g[0]=="Waffle")return Kh;if(g[0]=="Stroopwafel")return Gh;if(g[0]=="Blueberry")return Wh;if(g[0]=="Strawberry")return Xh;if(g[0]=="Cookies and Cream")return Yh}let w=_(t),v=w&&w(t);return a=new zh({}),l=new Vh({}),{c(){n=$("div"),e=$("div"),v&&v.c(),i=ne(),r=$("div"),s=$("button"),le(a.$$.fragment),o=ne(),f=$("button"),le(l.$$.fragment),this.h()},l(g){n=F(g,"DIV",{class:!0});var I=H(n);e=F(I,"DIV",{class:!0});var k=H(e);v&&v.l(k),k.forEach(N),i=ie(I),r=F(I,"DIV",{class:!0});var L=H(r);s=F(L,"BUTTON",{class:!0});var S=H(s);ce(a.$$.fragment,S),S.forEach(N),o=ie(L),f=F(L,"BUTTON",{class:!0});var O=H(f);ce(l.$$.fragment,O),O.forEach(N),L.forEach(N),I.forEach(N),this.h()},h(){B(e,"class","pointer-events-auto px-12"),B(s,"class","pointer-events-auto pl-4 hover:-translate-x-1 transition-transform"),B(f,"class","pointer-events-auto pr-4 hover:translate-x-1 transition-transform"),B(r,"class","pointer-events-none flex justify-between z-10"),B(n,"class","w-full h-full force-overlap text-white")},m(g,I){X(g,n,I),R(n,e),v&&v.m(e,null),R(n,i),R(n,r),R(r,s),ue(a,s,null),R(r,o),R(r,f),ue(l,f,null),u=!0,p||(d=[ge(s,"click",t[2]),ge(f,"click",t[3])],p=!0)},p(g,[I]){w!==(w=_(g))&&(v&&v.d(1),v=w&&w(g),v&&(v.c(),v.m(e,null)))},i(g){u||(j(a.$$.fragment,g),j(l.$$.fragment,g),u=!0)},o(g){V(a.$$.fragment,g),V(l.$$.fragment,g),u=!1},d(g){g&&N(n),v&&v.d(),fe(a),fe(l),p=!1,sn(d)}}}function ed(t,n,e){const i=["Vanilla","Chocolate","Waffle","Stroopwafel","Blueberry","Strawberry","Cookies and Cream"];let r="Vanilla";function s(f){let l=i.indexOf(r);l+=f=="next"?1:-1,l>=i.length&&(l=0),l<0&&(l=i.length-1),e(0,r=i[l])}return[r,s,f=>{f.preventDefault(),s("prev")},f=>{f.preventDefault(),s("next")}]}class td extends ye{constructor(n){super(),ke(this,n,ed,Qh,ve,{})}}function va(t,n,e){const i=t.slice();return i[4]=n[e],i}function wa(t){let n,e=t[4]+"",i,r,s,a,o;function f(){return t[3](t[4])}return{c(){n=$("button"),i=at(e),r=ne(),this.h()},l(l){n=F(l,"BUTTON",{class:!0});var u=H(n);i=ot(u,e),r=ie(u),u.forEach(N),this.h()},h(){B(n,"class","tab w-full flex justify-center py-1 px-4 rounded-md svelte-1v0way8"),n.disabled=s=t[4]==t[0],Qt(n,"selected",t[4]==t[0])},m(l,u){X(l,n,u),R(n,i),R(n,r),a||(o=ge(n,"click",f),a=!0)},p(l,u){t=l,u&1&&s!==(s=t[4]==t[0])&&(n.disabled=s),u&5&&Qt(n,"selected",t[4]==t[0])},d(l){l&&N(n),a=!1,o()}}}function nd(t){let n;function e(s,a){return s[1]=="mouse"?ld:s[1]=="keyboard"?od:s[1]=="touch"?ad:sd}let i=e(t),r=i(t);return{c(){n=$("div"),r.c(),this.h()},l(s){n=F(s,"DIV",{class:!0});var a=H(n);r.l(a),a.forEach(N),this.h()},h(){B(n,"class","px-4")},m(s,a){X(s,n,a),r.m(n,null)},p(s,a){i!==(i=e(s))&&(r.d(1),r=i(s),r&&(r.c(),r.m(n,null)))},i:Ie,o:Ie,d(s){s&&N(n),r.d()}}}function id(t){let n,e,i;return e=new td({}),{c(){n=$("div"),le(e.$$.fragment),this.h()},l(r){n=F(r,"DIV",{class:!0});var s=H(n);ce(e.$$.fragment,s),s.forEach(N),this.h()},h(){B(n,"class","w-full h-full inline")},m(r,s){X(r,n,s),ue(e,n,null),i=!0},p:Ie,i(r){i||(j(e.$$.fragment,r),i=!0)},o(r){V(e.$$.fragment,r),i=!1},d(r){r&&N(n),fe(e)}}}function rd(t){let n,e=`<div><a class="text-2xl font-bold" href="https://vulae.github.io/infinite-minesweeper">Infinite Minesweeper</a> <br/>
                    An infinite twist on Minesweeper that adds biomes that change the rules of the game.</div> <div class="pt-4"><span class="float-right text-xs font-extrabold">*Source code available on
                        <a class="underline" href="https://github.com/Vulae/infinite-minesweeper">GitHub</a></span></div>`;return{c(){n=$("div"),n.innerHTML=e,this.h()},l(i){n=F(i,"DIV",{class:!0,"data-svelte-h":!0}),Pe(n)!=="svelte-1yloiaf"&&(n.innerHTML=e),this.h()},h(){B(n,"class","px-4 w-full h-full flex flex-col justify-between")},m(i,r){X(i,n,r)},p:Ie,i:Ie,o:Ie,d(i){i&&N(n)}}}function sd(t){let n,e="Unknown control method.";return{c(){n=$("span"),n.textContent=e},l(i){n=F(i,"SPAN",{"data-svelte-h":!0}),Pe(n)!=="svelte-1yl4tvk"&&(n.textContent=e)},m(i,r){X(i,n,r)},d(i){i&&N(n)}}}function ad(t){let n,e=`<h1 class="font-bold text-2xl">Touch Controls</h1>
                        Double Tap: Reveal tile
                        <br/>
                        Single Tap: Flag tile
                        <br/>
                        Pan: Move view
                        <br/>
                        Pinch: Zoom view`;return{c(){n=$("span"),n.innerHTML=e},l(i){n=F(i,"SPAN",{"data-svelte-h":!0}),Pe(n)!=="svelte-1ukp1tk"&&(n.innerHTML=e)},m(i,r){X(i,n,r)},d(i){i&&N(n)}}}function od(t){let n,e=`<h1 class="font-bold text-2xl">Keyboard Controls</h1>
                        Keyboard control method not yet supported.`;return{c(){n=$("span"),n.innerHTML=e},l(i){n=F(i,"SPAN",{"data-svelte-h":!0}),Pe(n)!=="svelte-1rw6f38"&&(n.innerHTML=e)},m(i,r){X(i,n,r)},d(i){i&&N(n)}}}function ld(t){let n,e=`<h1 class="font-bold text-2xl">Mouse Controls</h1>
                        Left Click: Reveal tile
                        <br/>
                        Right Click: Flag tile
                        <br/>
                        Left Click Drag: Move view
                        <br/>
                        Scroll Wheel: Zoom view`;return{c(){n=$("span"),n.innerHTML=e},l(i){n=F(i,"SPAN",{"data-svelte-h":!0}),Pe(n)!=="svelte-k2yzda"&&(n.innerHTML=e)},m(i,r){X(i,n,r)},d(i){i&&N(n)}}}function cd(t){let n,e,i,r,s,a,o,f,l,u=en(t[2]),p=[];for(let v=0;v<u.length;v+=1)p[v]=wa(va(t,u,v));const d=[rd,id,nd],_=[];function w(v,g){return v[0]=="Information"?0:v[0]=="Biomes"?1:v[0]=="Controls"?2:-1}return~(o=w(t))&&(f=_[o]=d[o](t)),{c(){n=$("div"),e=$("div");for(let v=0;v<p.length;v+=1)p[v].c();i=ne(),r=$("div"),s=ne(),a=$("div"),f&&f.c(),this.h()},l(v){n=F(v,"DIV",{class:!0});var g=H(n);e=F(g,"DIV",{class:!0});var I=H(e);for(let L=0;L<p.length;L+=1)p[L].l(I);I.forEach(N),i=ie(g),r=F(g,"DIV",{class:!0}),H(r).forEach(N),s=ie(g),a=F(g,"DIV",{class:!0});var k=H(a);f&&f.l(k),k.forEach(N),g.forEach(N),this.h()},h(){B(e,"class","px-4 grid grid-flow-col gap-4 items-center font-bold"),B(r,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full"),B(a,"class","w-[32rem] h-64 py-2 font-semibold"),B(n,"class","grid px-4 py-2 rounded-2xl bg-white bg-opacity-50")},m(v,g){X(v,n,g),R(n,e);for(let I=0;I<p.length;I+=1)p[I]&&p[I].m(e,null);R(n,i),R(n,r),R(n,s),R(n,a),~o&&_[o].m(a,null),l=!0},p(v,[g]){if(g&5){u=en(v[2]);let k;for(k=0;k<u.length;k+=1){const L=va(v,u,k);p[k]?p[k].p(L,g):(p[k]=wa(L),p[k].c(),p[k].m(e,null))}for(;k<p.length;k+=1)p[k].d(1);p.length=u.length}let I=o;o=w(v),o===I?~o&&_[o].p(v,g):(f&&(Nn(),V(_[I],1,1,()=>{_[I]=null}),Cn()),~o?(f=_[o],f?f.p(v,g):(f=_[o]=d[o](v),f.c()),j(f,1),f.m(a,null)):f=null)},i(v){l||(j(f),l=!0)},o(v){V(f),l=!1},d(v){v&&N(n),Ir(p,v),~o&&_[o].d()}}}function ud(t,n,e){let i;zt(t,_i,o=>e(1,i=o));const r=["Information","Biomes","Controls"];let s="Information";return[s,i,r,o=>e(0,s=o)]}class fd extends ye{constructor(n){super(),ke(this,n,ud,cd,ve,{})}}function hd(t){let n;const e=t[2].default,i=ut(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&ft(i,e,r,r[3],n?dt(e,r[3],s,null):ht(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function dd(t){let n,e;const i=[{name:"skull"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[hd]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Dt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function _d(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["circle",{cx:"9",cy:"12",r:"1"}],["circle",{cx:"15",cy:"12",r:"1"}],["path",{d:"M8 20v2h8v-2"}],["path",{d:"m12.5 17-.5-1-.5 1h1z"}],["path",{d:"M16 20a2 2 0 0 0 1.56-3.25 8 8 0 1 0-11.12 0A2 2 0 0 0 8 20"}]];return t.$$set=a=>{e(1,n=he(he({},n),xe(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=xe(n),[s,n,i,r]}class md extends ye{constructor(n){super(),ke(this,n,_d,dd,ve,{})}}function pd(t){let n,e,i,r,s,a,o;return e=new md({}),{c(){n=$("div"),le(e.$$.fragment),i=ne(),r=$("span"),s=at(t[1]),this.h()},l(f){n=F(f,"DIV",{class:!0,title:!0});var l=H(n);ce(e.$$.fragment,l),i=ie(l),r=F(l,"SPAN",{class:!0});var u=H(r);s=ot(u,t[1]),u.forEach(N),l.forEach(N),this.h()},h(){B(r,"class","text-sm"),B(n,"class","flex items-center"),B(n,"title",a=t[1]+" deaths"),Xe(n,"flex-direction",t[0]=="horizontal"?"row":"column")},m(f,l){X(f,n,l),ue(e,n,null),R(n,i),R(n,r),R(r,s),o=!0},p(f,[l]){(!o||l&2)&&si(s,f[1]),(!o||l&2&&a!==(a=f[1]+" deaths"))&&B(n,"title",a),l&1&&Xe(n,"flex-direction",f[0]=="horizontal"?"row":"column")},i(f){o||(j(e.$$.fragment,f),o=!0)},o(f){V(e.$$.fragment,f),o=!1},d(f){f&&N(n),fe(e)}}}function bd(t,n,e){let{layout:i}=n,{world:r}=n,s,a=0,o=null;return t.$$set=f=>{"layout"in f&&e(0,i=f.layout),"world"in f&&e(2,r=f.world)},t.$$.update=()=>{t.$$.dirty&28&&r&&(o==null||o.removeEventListener(s),e(1,a=r.deaths),e(3,s=r.addEventListener("die",()=>{e(1,a=r.deaths)})),e(4,o=r))},[i,a,r,s,o]}class gd extends ye{constructor(n){super(),ke(this,n,bd,pd,ve,{layout:0,world:2})}}function vd(t){let n;const e=t[2].default,i=ut(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&ft(i,e,r,r[3],n?dt(e,r[3],s,null):ht(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function wd(t){let n,e;const i=[{name:"plus"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[vd]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Dt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function yd(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"M5 12h14"}],["path",{d:"M12 5v14"}]];return t.$$set=a=>{e(1,n=he(he({},n),xe(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=xe(n),[s,n,i,r]}class kd extends ye{constructor(n){super(),ke(this,n,yd,wd,ve,{})}}function Ed(t){let n;const e=t[2].default,i=ut(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&ft(i,e,r,r[3],n?dt(e,r[3],s,null):ht(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function Td(t){let n,e;const i=[{name:"bookmark-minus"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Ed]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Dt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function Id(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"}],["line",{x1:"15",x2:"9",y1:"10",y2:"10"}]];return t.$$set=a=>{e(1,n=he(he({},n),xe(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=xe(n),[s,n,i,r]}class Pd extends ye{constructor(n){super(),ke(this,n,Id,Td,ve,{})}}function ya(t,n,e){const i=t.slice();return i[9]=n[e],i[11]=e,i}function ka(t){let n;return{c(){n=$("div"),this.h()},l(e){n=F(e,"DIV",{class:!0}),H(n).forEach(N),this.h()},h(){B(n,"class","w-full h-0.5 bg-black bg-opacity-50 my-1 rounded-full svelte-1wmwp0k")},m(e,i){X(e,n,i)},d(e){e&&N(n)}}}function Ea(t){let n,e,i,r=t[9].createdAt.toLocaleDateString()+"",s,a,o=t[9].createdAt.toLocaleTimeString()+"",f,l,u,p=t[9].name+"",d,_,w,v,g,I,k,L,S;function O(){return t[5](t[9])}v=new Pd({props:{size:"2rem"}});function Z(){return t[6](t[11])}let E=t[11]<t[0].length-1&&ka();return{c(){n=$("li"),e=$("button"),i=$("span"),s=at(r),a=ne(),f=at(o),l=ne(),u=$("div"),d=at(p),_=ne(),w=$("button"),le(v.$$.fragment),g=ne(),E&&E.c(),I=Ge(),this.h()},l(D){n=F(D,"LI",{class:!0});var x=H(n);e=F(x,"BUTTON",{class:!0});var y=H(e);i=F(y,"SPAN",{class:!0});var A=H(i);s=ot(A,r),a=ie(A),f=ot(A,o),A.forEach(N),l=ie(y),u=F(y,"DIV",{class:!0});var Y=H(u);d=ot(Y,p),Y.forEach(N),y.forEach(N),_=ie(x),w=F(x,"BUTTON",{class:!0,title:!0});var ae=H(w);ce(v.$$.fragment,ae),ae.forEach(N),x.forEach(N),g=ie(D),E&&E.l(D),I=Ge(),this.h()},h(){B(i,"class","text-xs font-normal svelte-1wmwp0k"),B(u,"class","text-xl font-bold svelte-1wmwp0k"),B(e,"class","flex flex-col ml-4 hover:text-blue-800 transition-colors svelte-1wmwp0k"),B(w,"class","hover:text-red-900 transition-colors svelte-1wmwp0k"),B(w,"title","Remove Bookmark"),B(n,"class","flex justify-between items-center svelte-1wmwp0k")},m(D,x){X(D,n,x),R(n,e),R(e,i),R(i,s),R(i,a),R(i,f),R(e,l),R(e,u),R(u,d),R(n,_),R(n,w),ue(v,w,null),X(D,g,x),E&&E.m(D,x),X(D,I,x),k=!0,L||(S=[ge(e,"click",O),ge(w,"click",Z)],L=!0)},p(D,x){t=D,(!k||x&1)&&r!==(r=t[9].createdAt.toLocaleDateString()+"")&&si(s,r),(!k||x&1)&&o!==(o=t[9].createdAt.toLocaleTimeString()+"")&&si(f,o),(!k||x&1)&&p!==(p=t[9].name+"")&&si(d,p),t[11]<t[0].length-1?E||(E=ka(),E.c(),E.m(I.parentNode,I)):E&&(E.d(1),E=null)},i(D){k||(j(v.$$.fragment,D),k=!0)},o(D){V(v.$$.fragment,D),k=!1},d(D){D&&(N(n),N(g),N(I)),fe(v),E&&E.d(D),L=!1,sn(S)}}}function Ta(t){let n,e="You have no bookmarks.";return{c(){n=$("li"),n.textContent=e,this.h()},l(i){n=F(i,"LI",{class:!0,"data-svelte-h":!0}),Pe(n)!=="svelte-1r3ii7r"&&(n.textContent=e),this.h()},h(){B(n,"class","text-xl font-bold svelte-1wmwp0k")},m(i,r){X(i,n,r)},d(i){i&&N(n)}}}function Sd(t){let n,e,i="Bookmarks",r,s,a,o,f,l,u,p,d,_,w,v,g,I,k,L,S=en(t[0]),O=[];for(let D=0;D<S.length;D+=1)O[D]=Ea(ya(t,S,D));const Z=D=>V(O[D],1,1,()=>{O[D]=null});let E=t[0].length==0&&Ta();return g=new kd({props:{size:"2rem"}}),{c(){n=$("div"),e=$("span"),e.textContent=i,r=ne(),s=$("div"),a=ne(),o=$("ul");for(let D=0;D<O.length;D+=1)O[D].c();f=ne(),E&&E.c(),l=ne(),u=$("div"),p=ne(),d=$("form"),_=$("input"),w=ne(),v=$("button"),le(g.$$.fragment),this.h()},l(D){n=F(D,"DIV",{class:!0});var x=H(n);e=F(x,"SPAN",{class:!0,"data-svelte-h":!0}),Pe(e)!=="svelte-3bkqky"&&(e.textContent=i),r=ie(x),s=F(x,"DIV",{class:!0}),H(s).forEach(N),a=ie(x),o=F(x,"UL",{class:!0});var y=H(o);for(let ae=0;ae<O.length;ae+=1)O[ae].l(y);f=ie(y),E&&E.l(y),y.forEach(N),l=ie(x),u=F(x,"DIV",{class:!0}),H(u).forEach(N),p=ie(x),d=F(x,"FORM",{class:!0});var A=H(d);_=F(A,"INPUT",{placeholder:!0,type:!0,maxlength:!0,class:!0}),w=ie(A),v=F(A,"BUTTON",{type:!0,title:!0,class:!0});var Y=H(v);ce(g.$$.fragment,Y),Y.forEach(N),A.forEach(N),x.forEach(N),this.h()},h(){B(e,"class","text-2xl font-bold text-center svelte-1wmwp0k"),B(s,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full svelte-1wmwp0k"),B(o,"class","p-2 max-h-96 overflow-y-auto svelte-1wmwp0k"),B(u,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full svelte-1wmwp0k"),B(_,"placeholder","New Bookmark"),B(_,"type","text"),B(_,"maxlength","16"),B(_,"class","w-48 px-2 rounded-md svelte-1wmwp0k"),B(v,"type","submit"),B(v,"title","Create Bookmark"),B(v,"class","flex hover:text-green-900 transition-colors svelte-1wmwp0k"),B(d,"class","flex justify-between gap-4 px-2 pb-2 svelte-1wmwp0k"),B(n,"class","grid px-4 py-2 rounded-2xl bg-white bg-opacity-50 svelte-1wmwp0k")},m(D,x){X(D,n,x),R(n,e),R(n,r),R(n,s),R(n,a),R(n,o);for(let y=0;y<O.length;y+=1)O[y]&&O[y].m(o,null);R(o,f),E&&E.m(o,null),R(n,l),R(n,u),R(n,p),R(n,d),R(d,_),t[7](_),R(d,w),R(d,v),ue(g,v,null),I=!0,k||(L=[ge(_,"keydown",ml(t[4])),ge(d,"submit",t[8])],k=!0)},p(D,[x]){if(x&7){S=en(D[0]);let y;for(y=0;y<S.length;y+=1){const A=ya(D,S,y);O[y]?(O[y].p(A,x),j(O[y],1)):(O[y]=Ea(A),O[y].c(),j(O[y],1),O[y].m(o,f))}for(Nn(),y=S.length;y<O.length;y+=1)Z(y);Cn()}D[0].length==0?E||(E=Ta(),E.c(),E.m(o,null)):E&&(E.d(1),E=null)},i(D){if(!I){for(let x=0;x<S.length;x+=1)j(O[x]);j(g.$$.fragment,D),I=!0}},o(D){O=O.filter(Boolean);for(let x=0;x<O.length;x+=1)V(O[x]);V(g.$$.fragment,D),I=!1},d(D){D&&N(n),Ir(O,D),E&&E.d(),t[7](null),fe(g),k=!1,sn(L)}}}function xd(t,n,e){let{viewport:i}=n,{bookmarks:r}=n,s,{visible:a}=n;function o(d){Ia.call(this,t,d)}const f=d=>{i.load(d.viewport),i.change(),e(1,a=!1)},l=d=>{r==null||r.splice(d,1),e(0,r)};function u(d){Le[d?"unshift":"push"](()=>{s=d,e(3,s)})}const p=()=>{s.value.length!=0&&(r==null||r.push({name:s.value,createdAt:new Date,viewport:i.save()}),e(0,r),e(3,s.value="",s))};return t.$$set=d=>{"viewport"in d&&e(2,i=d.viewport),"bookmarks"in d&&e(0,r=d.bookmarks),"visible"in d&&e(1,a=d.visible)},[r,a,i,s,o,f,l,u,p]}class Ad extends ye{constructor(n){super(),ke(this,n,xd,Sd,ve,{viewport:2,bookmarks:0,visible:1})}}function Nd(t){let n;const e=t[2].default,i=ut(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&ft(i,e,r,r[3],n?dt(e,r[3],s,null):ht(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function Cd(t){let n,e;const i=[{name:"bookmark"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Nd]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Dt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function Md(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"}]];return t.$$set=a=>{e(1,n=he(he({},n),xe(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=xe(n),[s,n,i,r]}class Dd extends ye{constructor(n){super(),ke(this,n,Md,Cd,ve,{})}}function Od(t){let n;return{c(){n=at("ARE YOU SURE?")},l(e){n=ot(e,"ARE YOU SURE?")},m(e,i){X(e,n,i)},d(e){e&&N(n)}}}function Bd(t){let n;return{c(){n=at("CLEAR SAVE")},l(e){n=ot(e,"CLEAR SAVE")},m(e,i){X(e,n,i)},d(e){e&&N(n)}}}function Rd(t){let n,e,i="Settings",r,s,a,o,f,l,u,p,d="Mouse",_,w="Touch",v,g,I,k,L,S,O,Z,E,D,x,y,A;function Y(K,_e){return K[2]?Od:Bd}let ae=Y(t),oe=ae(t);return{c(){n=$("div"),e=$("span"),e.textContent=i,r=ne(),s=$("div"),a=ne(),o=$("div"),f=$("div"),l=at(`Input Method
            `),u=$("select"),p=$("option"),p.textContent=d,_=$("option"),_.textContent=w,v=ne(),g=$("div"),I=at(`Volume
            `),k=$("input"),S=ne(),O=$("div"),Z=at(`Display information on load
            `),E=$("input"),D=ne(),x=$("button"),oe.c(),this.h()},l(K){n=F(K,"DIV",{class:!0});var _e=H(n);e=F(_e,"SPAN",{class:!0,"data-svelte-h":!0}),Pe(e)!=="svelte-1v23jpc"&&(e.textContent=i),r=ie(_e),s=F(_e,"DIV",{class:!0}),H(s).forEach(N),a=ie(_e),o=F(_e,"DIV",{class:!0});var we=H(o);f=F(we,"DIV",{class:!0});var De=H(f);l=ot(De,`Input Method
            `),u=F(De,"SELECT",{});var Fe=H(u);p=F(Fe,"OPTION",{"data-svelte-h":!0}),Pe(p)!=="svelte-1o1urqg"&&(p.textContent=d),_=F(Fe,"OPTION",{"data-svelte-h":!0}),Pe(_)!=="svelte-4sw168"&&(_.textContent=w),Fe.forEach(N),De.forEach(N),v=ie(we),g=F(we,"DIV",{class:!0});var ee=H(g);I=ot(ee,`Volume
            `),k=F(ee,"INPUT",{type:!0,min:!0,max:!0,step:!0,title:!0}),ee.forEach(N),S=ie(we),O=F(we,"DIV",{class:!0});var Me=H(O);Z=ot(Me,`Display information on load
            `),E=F(Me,"INPUT",{type:!0}),Me.forEach(N),D=ie(we),x=F(we,"BUTTON",{class:!0});var Ue=H(x);oe.l(Ue),Ue.forEach(N),we.forEach(N),_e.forEach(N),this.h()},h(){B(e,"class","text-2xl font-bold text-center"),B(s,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full"),p.__value="mouse",ds(p,p.__value),_.__value="touch",ds(_,_.__value),t[3]===void 0&&pl(()=>t[6].call(u)),B(f,"class","flex justify-between items-center gap-3"),B(k,"type","range"),B(k,"min","0"),B(k,"max","1"),B(k,"step","0.05"),k.value=t[4],B(k,"title",L=Math.round(t[4]*100)+"% Volume"),B(g,"class","flex justify-between items-center gap-3"),B(E,"type","checkbox"),B(O,"class","flex justify-between items-center gap-3"),B(x,"class","bg-black font-bold text-red-500 rounded-lg py-1"),B(o,"class","p-2 max-h-96 overflow-y-auto flex flex-col gap-4 font-semibold"),B(n,"class","grid px-4 py-2 rounded-2xl bg-white bg-opacity-50")},m(K,_e){X(K,n,_e),R(n,e),R(n,r),R(n,s),R(n,a),R(n,o),R(o,f),R(f,l),R(f,u),R(u,p),R(u,_),_s(u,t[3],!0),R(o,v),R(o,g),R(g,I),R(g,k),R(o,S),R(o,O),R(O,Z),R(O,E),E.checked=t[5],R(o,D),R(o,x),oe.m(x,null),y||(A=[ge(u,"change",t[6]),ge(k,"change",t[7]),ge(E,"change",t[8]),ge(x,"click",t[9])],y=!0)},p(K,[_e]){_e&8&&_s(u,K[3]),_e&16&&(k.value=K[4]),_e&16&&L!==(L=Math.round(K[4]*100)+"% Volume")&&B(k,"title",L),_e&32&&(E.checked=K[5]),ae!==(ae=Y(K))&&(oe.d(1),oe=ae(K),oe&&(oe.c(),oe.m(x,null)))},i:Ie,o:Ie,d(K){K&&N(n),oe.d(),y=!1,sn(A)}}}const Ld=5e3;function $d(t,n,e){let i,r,s;zt(t,_i,_=>e(3,i=_)),zt(t,Tr,_=>e(4,r=_)),zt(t,Er,_=>e(5,s=_));let{saveSlot:a}=n,o=-1,f=!1;pi(()=>{clearTimeout(o)});function l(){i=bl(this),_i.set(i)}const u=_=>{gl(Tr,r=_.currentTarget.valueAsNumber,r)};function p(){s=this.checked,Er.set(s)}const d=()=>{f?(e(2,f=!1),Wf(a),location.reload()):(e(2,f=!0),e(1,o=setTimeout(()=>{e(2,f=!1)},Ld)))};return t.$$set=_=>{"saveSlot"in _&&e(0,a=_.saveSlot)},[a,o,f,i,r,s,l,u,p,d]}class Fd extends ye{constructor(n){super(),ke(this,n,$d,Rd,ve,{saveSlot:0})}}function Ud(t){let n;const e=t[2].default,i=ut(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&ft(i,e,r,r[3],n?dt(e,r[3],s,null):ht(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function zd(t){let n,e;const i=[{name:"settings"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Ud]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Dt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function Hd(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"}],["circle",{cx:"12",cy:"12",r:"3"}]];return t.$$set=a=>{e(1,n=he(he({},n),xe(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=xe(n),[s,n,i,r]}class jd extends ye{constructor(n){super(),ke(this,n,Hd,zd,ve,{})}}function Zd(t){let n,e;return n=new fd({}),{c(){le(n.$$.fragment)},l(i){ce(n.$$.fragment,i)},m(i,r){ue(n,i,r),e=!0},i(i){e||(j(n.$$.fragment,i),e=!0)},o(i){V(n.$$.fragment,i),e=!1},d(i){fe(n,i)}}}function Vd(t){let n,e,i;function r(a){t[17](a)}let s={};return t[0]!==void 0&&(s.saveSlot=t[0]),n=new Fd({props:s}),Le.push(()=>kt(n,"saveSlot",r)),{c(){le(n.$$.fragment)},l(a){ce(n.$$.fragment,a)},m(a,o){ue(n,a,o),i=!0},p(a,o){const f={};!e&&o&1&&(e=!0,f.saveSlot=a[0],yt(()=>e=!1)),n.$set(f)},i(a){i||(j(n.$$.fragment,a),i=!0)},o(a){V(n.$$.fragment,a),i=!1},d(a){fe(n,a)}}}function Yd(t){let n,e,i,r;function s(f){t[19](f)}function a(f){t[20](f)}let o={viewport:t[7]};return t[5]!==void 0&&(o.visible=t[5]),t[8]!==void 0&&(o.bookmarks=t[8]),n=new Ad({props:o}),Le.push(()=>kt(n,"visible",s)),Le.push(()=>kt(n,"bookmarks",a)),{c(){le(n.$$.fragment)},l(f){ce(n.$$.fragment,f)},m(f,l){ue(n,f,l),r=!0},p(f,l){const u={};l&128&&(u.viewport=f[7]),!e&&l&32&&(e=!0,u.visible=f[5],yt(()=>e=!1)),!i&&l&256&&(i=!0,u.bookmarks=f[8],yt(()=>i=!1)),n.$set(u)},i(f){r||(j(n.$$.fragment,f),r=!0)},o(f){V(n.$$.fragment,f),r=!1},d(f){fe(n,f)}}}function Xd(t){let n,e,i,r,s,a,o,f,l,u,p,d,_,w,v,g,I,k,L,S,O,Z,E,D,x,y,A,Y,ae,oe,K,_e,we,De,Fe;function ee(M){t[9](M)}function Me(M){t[10](M)}function Ue(M){t[11](M)}let It={saveSlot:t[0]};t[6]!==void 0&&(It.world=t[6]),t[7]!==void 0&&(It.viewport=t[7]),t[8]!==void 0&&(It.bookmarks=t[8]),i=new xh({props:It}),Le.push(()=>kt(i,"world",ee)),Le.push(()=>kt(i,"viewport",Me)),Le.push(()=>kt(i,"bookmarks",Ue)),d=new Bh({}),v=new jd({}),k=new Dd({}),Z=new gd({props:{layout:t[1],world:t[6]}});function qe(M){t[16](M)}let T={$$slots:{default:[Zd]},$$scope:{ctx:t}};t[3]!==void 0&&(T.visible=t[3]),x=new lr({props:T}),Le.push(()=>kt(x,"visible",qe));function z(M){t[18](M)}let q={$$slots:{default:[Vd]},$$scope:{ctx:t}};t[4]!==void 0&&(q.visible=t[4]),Y=new lr({props:q}),Le.push(()=>kt(Y,"visible",z));function be(M){t[21](M)}let re={$$slots:{default:[Yd]},$$scope:{ctx:t}};return t[5]!==void 0&&(re.visible=t[5]),K=new lr({props:re}),Le.push(()=>kt(K,"visible",be)),{c(){n=$("div"),e=$("div"),le(i.$$.fragment),o=ne(),f=$("div"),l=$("div"),u=$("div"),p=$("button"),le(d.$$.fragment),_=ne(),w=$("button"),le(v.$$.fragment),g=ne(),I=$("button"),le(k.$$.fragment),L=ne(),S=$("div"),O=ne(),le(Z.$$.fragment),D=ne(),le(x.$$.fragment),A=ne(),le(Y.$$.fragment),oe=ne(),le(K.$$.fragment),this.h()},l(M){n=F(M,"DIV",{class:!0});var W=H(n);e=F(W,"DIV",{class:!0});var Te=H(e);ce(i.$$.fragment,Te),Te.forEach(N),o=ie(W),f=F(W,"DIV",{class:!0});var je=H(f);l=F(je,"DIV",{class:!0});var Ze=H(l);u=F(Ze,"DIV",{class:!0});var Ee=H(u);p=F(Ee,"BUTTON",{class:!0,title:!0});var Ae=H(p);ce(d.$$.fragment,Ae),Ae.forEach(N),_=ie(Ee),w=F(Ee,"BUTTON",{class:!0,title:!0});var et=H(w);ce(v.$$.fragment,et),et.forEach(N),g=ie(Ee),I=F(Ee,"BUTTON",{class:!0,title:!0});var hn=H(I);ce(k.$$.fragment,hn),hn.forEach(N),L=ie(Ee),S=F(Ee,"DIV",{class:!0}),H(S).forEach(N),O=ie(Ee),ce(Z.$$.fragment,Ee),Ee.forEach(N),Ze.forEach(N),je.forEach(N),W.forEach(N),D=ie(M),ce(x.$$.fragment,M),A=ie(M),ce(Y.$$.fragment,M),oe=ie(M),ce(K.$$.fragment,M),this.h()},h(){B(e,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1"),B(p,"class","rounded-full drop-shadow-sm"),B(p,"title","Information"),B(w,"class","rounded-full drop-shadow-sm"),B(w,"title","Settings"),B(I,"class","rounded-full drop-shadow-sm"),B(I,"title","Bookmarks"),B(S,"class","w-full h-full bg-white rounded-full p-[1px]"),B(u,"class","pointer-events-auto flex items-center gap-2 rounded-full bg-white bg-opacity-30 backdrop-blur-md shadow-lg text-white font-bold stroke-[3]"),Xe(u,"flex-direction",t[1]=="vertical"?"column":"row"),Xe(u,"padding",t[1]=="vertical"?"1rem 0.5rem":"0.5rem 1rem"),B(l,"class","w-full h-full flex items-center p-4"),Xe(l,"flex-direction",t[1]=="vertical"?"row":"column"),Xe(l,"justify-content",t[2]=="start"?"start":"end"),B(f,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1 pointer-events-none"),Xe(f,"opacity",t[3]||t[4]||t[5]?0:1),B(n,"class","w-screen h-screen grid grid-cols-1 grid-rows-1")},m(M,W){X(M,n,W),R(n,e),ue(i,e,null),R(n,o),R(n,f),R(f,l),R(l,u),R(u,p),ue(d,p,null),R(u,_),R(u,w),ue(v,w,null),R(u,g),R(u,I),ue(k,I,null),R(u,L),R(u,S),R(u,O),ue(Z,u,null),X(M,D,W),ue(x,M,W),X(M,A,W),ue(Y,M,W),X(M,oe,W),ue(K,M,W),we=!0,De||(Fe=[ge(p,"click",t[12]),ge(w,"click",t[13]),ge(I,"click",t[14]),Sa(E=Ro.call(null,f,t[15]))],De=!0)},p(M,[W]){const Te={};W&1&&(Te.saveSlot=M[0]),!r&&W&64&&(r=!0,Te.world=M[6],yt(()=>r=!1)),!s&&W&128&&(s=!0,Te.viewport=M[7],yt(()=>s=!1)),!a&&W&256&&(a=!0,Te.bookmarks=M[8],yt(()=>a=!1)),i.$set(Te);const je={};W&2&&(je.layout=M[1]),W&64&&(je.world=M[6]),Z.$set(je),W&2&&Xe(u,"flex-direction",M[1]=="vertical"?"column":"row"),W&2&&Xe(u,"padding",M[1]=="vertical"?"1rem 0.5rem":"0.5rem 1rem"),W&2&&Xe(l,"flex-direction",M[1]=="vertical"?"row":"column"),W&4&&Xe(l,"justify-content",M[2]=="start"?"start":"end"),E&&xa(E.update)&&W&6&&E.update.call(null,M[15]),W&56&&Xe(f,"opacity",M[3]||M[4]||M[5]?0:1);const Ze={};W&8388608&&(Ze.$$scope={dirty:W,ctx:M}),!y&&W&8&&(y=!0,Ze.visible=M[3],yt(()=>y=!1)),x.$set(Ze);const Ee={};W&8388609&&(Ee.$$scope={dirty:W,ctx:M}),!ae&&W&16&&(ae=!0,Ee.visible=M[4],yt(()=>ae=!1)),Y.$set(Ee);const Ae={};W&8389024&&(Ae.$$scope={dirty:W,ctx:M}),!_e&&W&32&&(_e=!0,Ae.visible=M[5],yt(()=>_e=!1)),K.$set(Ae)},i(M){we||(j(i.$$.fragment,M),j(d.$$.fragment,M),j(v.$$.fragment,M),j(k.$$.fragment,M),j(Z.$$.fragment,M),j(x.$$.fragment,M),j(Y.$$.fragment,M),j(K.$$.fragment,M),we=!0)},o(M){V(i.$$.fragment,M),V(d.$$.fragment,M),V(v.$$.fragment,M),V(k.$$.fragment,M),V(Z.$$.fragment,M),V(x.$$.fragment,M),V(Y.$$.fragment,M),V(K.$$.fragment,M),we=!1},d(M){M&&(N(n),N(D),N(A),N(oe)),fe(i),fe(d),fe(v),fe(k),fe(Z),fe(x,M),fe(Y,M),fe(K,M),De=!1,sn(Fe)}}}function Wd(t,n,e){let i;zt(t,Er,y=>e(22,i=y));let r="save",s="vertical",a="end",o=!1,f=!1,l=!1,u,p,d=[];mi(()=>{i&&e(3,o=!0)});function _(y){u=y,e(6,u)}function w(y){p=y,e(7,p)}function v(y){d=y,e(8,d)}const g=()=>e(3,o=!0),I=()=>e(4,f=!0),k=()=>e(5,l=!0),L=(y,A)=>{e(1,s=y>A?"vertical":"horizontal"),e(2,a=y>A?"end":"start")};function S(y){o=y,e(3,o)}function O(y){r=y,e(0,r)}function Z(y){f=y,e(4,f)}function E(y){l=y,e(5,l)}function D(y){d=y,e(8,d)}function x(y){l=y,e(5,l)}return[r,s,a,o,f,l,u,p,d,_,w,v,g,I,k,L,S,O,Z,E,D,x]}class Jd extends ye{constructor(n){super(),ke(this,n,Wd,Xd,ve,{})}}export{Jd as component};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
