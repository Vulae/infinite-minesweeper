var Va=Object.defineProperty;var qa=(e,n,t)=>n in e?Va(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t;var T=(e,n,t)=>(qa(e,typeof n!="symbol"?n+"":n,t),t);import{s as Te,l as It,P as le,Q as Wi,r as Ue,R as ji,b as U,f as z,S as Tt,i as J,h as I,u as Nt,p as Mt,q as Ut,T as Ja,U as Bn,V as Fe,e as F,a as ce,t as me,c as L,g as he,d as pe,o as O,j as zt,W as te,X as Qa,E as er,n as rn,B as tr,Y as nr,w as Vi,Z as ir,y as Rt,_ as ln,$ as ar}from"../chunks/scheduler.jOu4T3ze.js";import{S as Ye,i as $e,t as B,a as $,b as Le,d as Oe,m as Be,e as He,g as pn,c as vn,f as on}from"../chunks/index.45lNn86r.js";function Hn(e){return(e==null?void 0:e.length)!==void 0?e:Array.from(e)}function Ft(e,n){const t={},i={},a={$$scope:1};let r=e.length;for(;r--;){const o=e[r],l=n[r];if(l){for(const c in o)c in l||(i[c]=1);for(const c in l)a[c]||(t[c]=l[c],a[c]=1);e[r]=l}else for(const c in o)a[c]=1}for(const o in i)o in t||(t[o]=void 0);return t}function qi(e){return typeof e=="object"&&e!==null?e:{}}class rr{constructor(n,t){T(this,"textures");T(this,"src");T(this,"img");this.src=n,this.img=document.createElement("img"),this.img.src=this.src,this.textures=t}awaitLoad(){return new Promise((n,t)=>{if(this.img.naturalWidth!==0)return n();const i=()=>{this.img.removeEventListener("load",i),this.img.removeEventListener("error",a),n()},a=()=>{this.img.removeEventListener("load",i),this.img.removeEventListener("error",a),t()};this.img.addEventListener("load",i),this.img.addEventListener("error",a)})}onLoad(n){this.awaitLoad().then(()=>n(this))}draw(n,t,i,a,r,o){const[l,c,s,f]=this.textures[t];n.drawImage(this.img,l,c,s,f,i,a,r,o)}}class lr{constructor(n,t,i){T(this,"world");T(this,"x");T(this,"y");this.world=n,this.x=t,this.y=i}minesNearby(){let n=0;for(const t of this.searchPattern)n+=this.world.getTile(this.x+t.x,this.y+t.y).numMines();return n}flagsNearby(){let n=0;for(const t of this.searchPattern)n+=this.world.getTile(this.x+t.x,this.y+t.y).numFlags();return n}static load(n,t,i,a){throw new Error("Tile.load needs to be implemented on derived class.")}}var G=(e=>(e[e.Covered=0]="Covered",e[e.Flagged=1]="Flagged",e[e.Revealed=2]="Revealed",e))(G||{});class Lt extends lr{constructor(t,i,a,r){super(t,i,a);T(this,"isMine");T(this,"state",0);T(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this.isMine=r}numMines(){return this.isMine?1:0}numFlags(){return this.state==1?1:0}flag(){this.state!=2&&(this.state==0?this.state=1:this.state=0)}reveal(){this.state!=1&&(this.state=2)}}function kn(e,n){return()=>{e|=0,e=e+2654435769|0;let t=e^e>>>16;t=Math.imul(t,569420461),t=t^t>>>15,t=Math.imul(t,1935289751);const i=(t=t^t>>>15)>>>0;return n?i/4294967296:i}}function ye(e,n,t,i){return e^=e<<13|e>>>17,e=e*2158630691+3333583613&4294967295,e^=n,e^=e<<13|e>>>17,e=e*2158630691+3333583613&4294967295,e^=t,e^=e<<13|e>>>17,e=e*2158630691+3333583613&4294967295,e^=i,e^=e<<16|e>>>15,e=e*2158630691+3333583613&4294967295,(e>>>0)/4294967295}function or(e,n){n*=e.reduce((t,i)=>t+i,0);for(let t=0;t<e.length;t++)if(n-=e[t],n<=0)return t;throw new Error("Invalid weights")}function sr(e,n,t,i){let a=[];for(let l=Math.floor(n)-1;l<Math.ceil(n)+1;l++)for(let c=Math.floor(t)-1;c<Math.ceil(t)+1;c++)a.push({x:l+ye(e,l,c,0)-.5,y:c+ye(e,l,c,1)-.5,type:or(i,ye(e,l,c,2))});let r=1/0,o=-1;for(const l of a){const c=Math.sqrt((l.x-n)**2+(l.y-t)**2);c<r&&(r=c,o=l.type)}if(o==-1)throw new Error("Voronoi noise error.");return o}function Pn(e,n,t){function i(h,_,m){return(_-h)*((m*(m*6-15)+10)*m*m*m)+h}const a=(h,_)=>{const m=ye(e,h,_,0);return{x:Math.cos(m),y:Math.sin(m)}},r=(h,_,m,v)=>{const w=a(h,_),y=m-h,E=v-_;return y*w.x+E*w.y},o=Math.floor(n),l=o+1,c=Math.floor(t),s=c+1,f=n-o,g=t-c;return i(i(r(o,c,n,t),r(l,c,n,t),f),i(r(o,s,n,t),r(l,s,n,t),f),g)}function Xn(e,n,t){const i=Math.floor(n/e),a=Math.floor(t/e);return(i+a%2)%2==0}function Ji(e,n,t,i){const a=Math.floor(t/n),r=Math.floor(i/n),o=(a+r%2)%2==0,l=Math.abs(t%n)+Math.abs(i%n)*n,c=Math.floor(ye(e.tileSeed,a,r,0)*n**2),s=o?l!=c:l==c;return{isDark:o,isMine:s}}class xn extends Lt{constructor(t,i,a){const{isDark:r,isMine:o}=Ji(t,2,i,a);super(t,i,a,o);T(this,"type","waffle");T(this,"isDark");this.isDark=r}save(t){t.writeBits(2,this.state)}static load(t,i,a,r){const o=new xn(t,i,a);switch(r.readBits(2)){case G.Covered:break;case G.Flagged:o.flag();break;case G.Revealed:o.reveal();break}return o}}class fr{}class cr extends fr{constructor(){super(...arguments);T(this,"tileset",new rr("/infinite-minesweeper/tileset_retro.png",{null:[0,0,16,16],bomb:[16,0,16,16],explosion:[16,16,16,16],flag:[32,16,16,16],number_0:[48,0,16,16],number_1:[48,16,16,16],number_2:[48,32,16,16],number_3:[48,48,16,16],number_4:[48,64,16,16],number_5:[48,80,16,16],number_6:[48,96,16,16],number_7:[48,112,16,16],number_8:[48,128,16,16],tile_vanilla_covered:[64,0,16,16],tile_vanilla_revealed:[80,0,16,16],tile_chocolate_covered:[64,16,16,16],tile_chocolate_revealed:[80,16,16,16],tile_waffle_light_covered:[64,32,16,16],tile_waffle_light_revealed:[80,32,16,16],tile_waffle_dark_covered:[96,32,16,16],tile_waffle_dark_revealed:[112,32,16,16],tile_stroopwafel_light_covered:[64,48,16,16],tile_stroopwafel_light_revealed:[80,48,16,16],tile_stroopwafel_dark_covered:[96,48,16,16],tile_stroopwafel_dark_revealed:[112,48,16,16]}))}async init(){await this.tileset.awaitLoad()}drawNearby(t,i){switch(i.minesNearby()){case 0:break;case 1:this.tileset.draw(t,"number_1",0,0,1,1);break;case 2:this.tileset.draw(t,"number_2",0,0,1,1);break;case 3:this.tileset.draw(t,"number_3",0,0,1,1);break;case 4:this.tileset.draw(t,"number_4",0,0,1,1);break;case 5:this.tileset.draw(t,"number_5",0,0,1,1);break;case 6:this.tileset.draw(t,"number_6",0,0,1,1);break;case 7:this.tileset.draw(t,"number_7",0,0,1,1);break;case 8:this.tileset.draw(t,"number_8",0,0,1,1);break;default:throw new Error("ThemeRetro invalid draw nearby count.")}}drawSingleMineTile(t,i,a,r){switch(i.state){case G.Covered:this.tileset.draw(t,a,0,0,1,1);break;case G.Flagged:this.tileset.draw(t,a,0,0,1,1),this.tileset.draw(t,"flag",0,0,1,1);break;case G.Revealed:{this.tileset.draw(t,r,0,0,1,1),i.isMine?this.tileset.draw(t,"bomb",0,0,1,1):this.drawNearby(t,i);break}}}drawTile(t,i){switch(i.type){case"vanilla":this.drawSingleMineTile(t,i,"tile_vanilla_covered","tile_vanilla_revealed");break;case"chocolate":this.drawSingleMineTile(t,i,"tile_chocolate_covered","tile_chocolate_revealed");break;case"waffle":{Xn(2,i.x,i.y)?this.drawSingleMineTile(t,i,"tile_waffle_dark_covered","tile_waffle_dark_revealed"):this.drawSingleMineTile(t,i,"tile_waffle_light_covered","tile_waffle_light_revealed");break}case"stroopwafel":{Xn(3,i.x,i.y)?this.drawSingleMineTile(t,i,"tile_stroopwafel_dark_covered","tile_stroopwafel_dark_revealed"):this.drawSingleMineTile(t,i,"tile_stroopwafel_light_covered","tile_stroopwafel_light_revealed");break}}}}class hr{constructor(n,t){T(this,"world");T(this,"canvas");T(this,"ctx");T(this,"theme",new cr);T(this,"cameraX",0);T(this,"cameraY",0);T(this,"cameraZoom",32);T(this,"cameraMinZoom",4);T(this,"cameraMaxZoom",64);this.world=n,this.canvas=t;const i=this.canvas.getContext("2d");if(!i)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=i}async init(){await this.theme.init()}cameraWidth(){return this.canvas.width/this.cameraZoom}cameraHeight(){return this.canvas.height/this.cameraZoom}cameraTranslate(n,t){this.cameraX-=n/this.cameraZoom,this.cameraY-=t/this.cameraZoom}cameraScale(n){const t=this.cameraX+this.cameraWidth()*.5,i=this.cameraY+this.cameraHeight()*.5;this.cameraZoom*=n,this.canvas.width/this.cameraZoom<this.cameraMinZoom&&(this.cameraZoom=this.canvas.width/this.cameraMinZoom),this.canvas.height/this.cameraZoom<this.cameraMinZoom&&(this.cameraZoom=this.canvas.height/this.cameraMinZoom),this.canvas.width/this.cameraZoom>this.cameraMaxZoom&&(this.cameraZoom=this.canvas.width/this.cameraMaxZoom),this.canvas.height/this.cameraZoom>this.cameraMaxZoom&&(this.cameraZoom=this.canvas.height/this.cameraMaxZoom);const a=this.cameraX+this.cameraWidth()*.5,r=this.cameraY+this.cameraHeight()*.5;return this.cameraX-=a-t,this.cameraY-=r-i,this.cameraZoom}cameraBounds(n=0){return{minX:Math.floor(this.cameraX-n),minY:Math.floor(this.cameraY-n),maxX:Math.ceil(this.cameraX+this.cameraWidth()+n),maxY:Math.ceil(this.cameraY+this.cameraHeight()+n)}}cameraPos(n,t){return{x:Math.floor(n/this.cameraZoom+this.cameraX),y:Math.floor(t/this.cameraZoom+this.cameraY)}}renderWorld(){this.ctx.imageSmoothingEnabled=!1,this.ctx.scale(this.cameraZoom,this.cameraZoom),this.ctx.translate(-this.cameraX,-this.cameraY);const n=this.cameraBounds(1);for(let t=n.minX;t<n.maxX;t++)for(let i=n.minY;i<n.maxY;i++){this.ctx.save(),this.ctx.translate(t,i),this.ctx.scale(1.01,1.01);const a=this.world.getTile(t,i);this.theme.drawTile(this.ctx,a),this.ctx.restore()}this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.ctx.fillStyle="purple",this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.renderWorld()}}/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */const dr=4,Yn=0,$n=1,_r=2;function Ge(e){let n=e.length;for(;--n>=0;)e[n]=0}const ur=0,Qi=1,br=2,gr=3,wr=258,yn=29,dt=256,it=dt+1+yn,Ne=30,En=19,ea=2*it+1,ve=15,Xt=16,mr=7,An=256,ta=16,na=17,ia=18,sn=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),At=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),pr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),aa=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),vr=512,se=new Array((it+2)*2);Ge(se);const et=new Array(Ne*2);Ge(et);const at=new Array(vr);Ge(at);const rt=new Array(wr-gr+1);Ge(rt);const Sn=new Array(yn);Ge(Sn);const Dt=new Array(Ne);Ge(Dt);function Yt(e,n,t,i,a){this.static_tree=e,this.extra_bits=n,this.extra_base=t,this.elems=i,this.max_length=a,this.has_stree=e&&e.length}let ra,la,oa;function $t(e,n){this.dyn_tree=e,this.max_code=0,this.stat_desc=n}const sa=e=>e<256?at[e]:at[256+(e>>>7)],lt=(e,n)=>{e.pending_buf[e.pending++]=n&255,e.pending_buf[e.pending++]=n>>>8&255},j=(e,n,t)=>{e.bi_valid>Xt-t?(e.bi_buf|=n<<e.bi_valid&65535,lt(e,e.bi_buf),e.bi_buf=n>>Xt-e.bi_valid,e.bi_valid+=t-Xt):(e.bi_buf|=n<<e.bi_valid&65535,e.bi_valid+=t)},ie=(e,n,t)=>{j(e,t[n*2],t[n*2+1])},fa=(e,n)=>{let t=0;do t|=e&1,e>>>=1,t<<=1;while(--n>0);return t>>>1},kr=e=>{e.bi_valid===16?(lt(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=e.bi_buf&255,e.bi_buf>>=8,e.bi_valid-=8)},xr=(e,n)=>{const t=n.dyn_tree,i=n.max_code,a=n.stat_desc.static_tree,r=n.stat_desc.has_stree,o=n.stat_desc.extra_bits,l=n.stat_desc.extra_base,c=n.stat_desc.max_length;let s,f,g,d,h,_,m=0;for(d=0;d<=ve;d++)e.bl_count[d]=0;for(t[e.heap[e.heap_max]*2+1]=0,s=e.heap_max+1;s<ea;s++)f=e.heap[s],d=t[t[f*2+1]*2+1]+1,d>c&&(d=c,m++),t[f*2+1]=d,!(f>i)&&(e.bl_count[d]++,h=0,f>=l&&(h=o[f-l]),_=t[f*2],e.opt_len+=_*(d+h),r&&(e.static_len+=_*(a[f*2+1]+h)));if(m!==0){do{for(d=c-1;e.bl_count[d]===0;)d--;e.bl_count[d]--,e.bl_count[d+1]+=2,e.bl_count[c]--,m-=2}while(m>0);for(d=c;d!==0;d--)for(f=e.bl_count[d];f!==0;)g=e.heap[--s],!(g>i)&&(t[g*2+1]!==d&&(e.opt_len+=(d-t[g*2+1])*t[g*2],t[g*2+1]=d),f--)}},ca=(e,n,t)=>{const i=new Array(ve+1);let a=0,r,o;for(r=1;r<=ve;r++)a=a+t[r-1]<<1,i[r]=a;for(o=0;o<=n;o++){let l=e[o*2+1];l!==0&&(e[o*2]=fa(i[l]++,l))}},yr=()=>{let e,n,t,i,a;const r=new Array(ve+1);for(t=0,i=0;i<yn-1;i++)for(Sn[i]=t,e=0;e<1<<sn[i];e++)rt[t++]=i;for(rt[t-1]=i,a=0,i=0;i<16;i++)for(Dt[i]=a,e=0;e<1<<At[i];e++)at[a++]=i;for(a>>=7;i<Ne;i++)for(Dt[i]=a<<7,e=0;e<1<<At[i]-7;e++)at[256+a++]=i;for(n=0;n<=ve;n++)r[n]=0;for(e=0;e<=143;)se[e*2+1]=8,e++,r[8]++;for(;e<=255;)se[e*2+1]=9,e++,r[9]++;for(;e<=279;)se[e*2+1]=7,e++,r[7]++;for(;e<=287;)se[e*2+1]=8,e++,r[8]++;for(ca(se,it+1,r),e=0;e<Ne;e++)et[e*2+1]=5,et[e*2]=fa(e,5);ra=new Yt(se,sn,dt+1,it,ve),la=new Yt(et,At,0,Ne,ve),oa=new Yt(new Array(0),pr,0,En,mr)},ha=e=>{let n;for(n=0;n<it;n++)e.dyn_ltree[n*2]=0;for(n=0;n<Ne;n++)e.dyn_dtree[n*2]=0;for(n=0;n<En;n++)e.bl_tree[n*2]=0;e.dyn_ltree[An*2]=1,e.opt_len=e.static_len=0,e.sym_next=e.matches=0},da=e=>{e.bi_valid>8?lt(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0},Gn=(e,n,t,i)=>{const a=n*2,r=t*2;return e[a]<e[r]||e[a]===e[r]&&i[n]<=i[t]},Gt=(e,n,t)=>{const i=e.heap[t];let a=t<<1;for(;a<=e.heap_len&&(a<e.heap_len&&Gn(n,e.heap[a+1],e.heap[a],e.depth)&&a++,!Gn(n,i,e.heap[a],e.depth));)e.heap[t]=e.heap[a],t=a,a<<=1;e.heap[t]=i},Kn=(e,n,t)=>{let i,a,r=0,o,l;if(e.sym_next!==0)do i=e.pending_buf[e.sym_buf+r++]&255,i+=(e.pending_buf[e.sym_buf+r++]&255)<<8,a=e.pending_buf[e.sym_buf+r++],i===0?ie(e,a,n):(o=rt[a],ie(e,o+dt+1,n),l=sn[o],l!==0&&(a-=Sn[o],j(e,a,l)),i--,o=sa(i),ie(e,o,t),l=At[o],l!==0&&(i-=Dt[o],j(e,i,l)));while(r<e.sym_next);ie(e,An,n)},fn=(e,n)=>{const t=n.dyn_tree,i=n.stat_desc.static_tree,a=n.stat_desc.has_stree,r=n.stat_desc.elems;let o,l,c=-1,s;for(e.heap_len=0,e.heap_max=ea,o=0;o<r;o++)t[o*2]!==0?(e.heap[++e.heap_len]=c=o,e.depth[o]=0):t[o*2+1]=0;for(;e.heap_len<2;)s=e.heap[++e.heap_len]=c<2?++c:0,t[s*2]=1,e.depth[s]=0,e.opt_len--,a&&(e.static_len-=i[s*2+1]);for(n.max_code=c,o=e.heap_len>>1;o>=1;o--)Gt(e,t,o);s=r;do o=e.heap[1],e.heap[1]=e.heap[e.heap_len--],Gt(e,t,1),l=e.heap[1],e.heap[--e.heap_max]=o,e.heap[--e.heap_max]=l,t[s*2]=t[o*2]+t[l*2],e.depth[s]=(e.depth[o]>=e.depth[l]?e.depth[o]:e.depth[l])+1,t[o*2+1]=t[l*2+1]=s,e.heap[1]=s++,Gt(e,t,1);while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],xr(e,n),ca(t,c,e.bl_count)},Wn=(e,n,t)=>{let i,a=-1,r,o=n[0*2+1],l=0,c=7,s=4;for(o===0&&(c=138,s=3),n[(t+1)*2+1]=65535,i=0;i<=t;i++)r=o,o=n[(i+1)*2+1],!(++l<c&&r===o)&&(l<s?e.bl_tree[r*2]+=l:r!==0?(r!==a&&e.bl_tree[r*2]++,e.bl_tree[ta*2]++):l<=10?e.bl_tree[na*2]++:e.bl_tree[ia*2]++,l=0,a=r,o===0?(c=138,s=3):r===o?(c=6,s=3):(c=7,s=4))},jn=(e,n,t)=>{let i,a=-1,r,o=n[0*2+1],l=0,c=7,s=4;for(o===0&&(c=138,s=3),i=0;i<=t;i++)if(r=o,o=n[(i+1)*2+1],!(++l<c&&r===o)){if(l<s)do ie(e,r,e.bl_tree);while(--l!==0);else r!==0?(r!==a&&(ie(e,r,e.bl_tree),l--),ie(e,ta,e.bl_tree),j(e,l-3,2)):l<=10?(ie(e,na,e.bl_tree),j(e,l-3,3)):(ie(e,ia,e.bl_tree),j(e,l-11,7));l=0,a=r,o===0?(c=138,s=3):r===o?(c=6,s=3):(c=7,s=4)}},Er=e=>{let n;for(Wn(e,e.dyn_ltree,e.l_desc.max_code),Wn(e,e.dyn_dtree,e.d_desc.max_code),fn(e,e.bl_desc),n=En-1;n>=3&&e.bl_tree[aa[n]*2+1]===0;n--);return e.opt_len+=3*(n+1)+5+5+4,n},Ar=(e,n,t,i)=>{let a;for(j(e,n-257,5),j(e,t-1,5),j(e,i-4,4),a=0;a<i;a++)j(e,e.bl_tree[aa[a]*2+1],3);jn(e,e.dyn_ltree,n-1),jn(e,e.dyn_dtree,t-1)},Sr=e=>{let n=4093624447,t;for(t=0;t<=31;t++,n>>>=1)if(n&1&&e.dyn_ltree[t*2]!==0)return Yn;if(e.dyn_ltree[9*2]!==0||e.dyn_ltree[10*2]!==0||e.dyn_ltree[13*2]!==0)return $n;for(t=32;t<dt;t++)if(e.dyn_ltree[t*2]!==0)return $n;return Yn};let Vn=!1;const Tr=e=>{Vn||(yr(),Vn=!0),e.l_desc=new $t(e.dyn_ltree,ra),e.d_desc=new $t(e.dyn_dtree,la),e.bl_desc=new $t(e.bl_tree,oa),e.bi_buf=0,e.bi_valid=0,ha(e)},_a=(e,n,t,i)=>{j(e,(ur<<1)+(i?1:0),3),da(e),lt(e,t),lt(e,~t),t&&e.pending_buf.set(e.window.subarray(n,n+t),e.pending),e.pending+=t},zr=e=>{j(e,Qi<<1,3),ie(e,An,se),kr(e)},Rr=(e,n,t,i)=>{let a,r,o=0;e.level>0?(e.strm.data_type===_r&&(e.strm.data_type=Sr(e)),fn(e,e.l_desc),fn(e,e.d_desc),o=Er(e),a=e.opt_len+3+7>>>3,r=e.static_len+3+7>>>3,r<=a&&(a=r)):a=r=t+5,t+4<=a&&n!==-1?_a(e,n,t,i):e.strategy===dr||r===a?(j(e,(Qi<<1)+(i?1:0),3),Kn(e,se,et)):(j(e,(br<<1)+(i?1:0),3),Ar(e,e.l_desc.max_code+1,e.d_desc.max_code+1,o+1),Kn(e,e.dyn_ltree,e.dyn_dtree)),ha(e),i&&da(e)},Dr=(e,n,t)=>(e.pending_buf[e.sym_buf+e.sym_next++]=n,e.pending_buf[e.sym_buf+e.sym_next++]=n>>8,e.pending_buf[e.sym_buf+e.sym_next++]=t,n===0?e.dyn_ltree[t*2]++:(e.matches++,n--,e.dyn_ltree[(rt[t]+dt+1)*2]++,e.dyn_dtree[sa(n)*2]++),e.sym_next===e.sym_end);var Zr=Tr,Cr=_a,Ir=Rr,Nr=Dr,Mr=zr,Ur={_tr_init:Zr,_tr_stored_block:Cr,_tr_flush_block:Ir,_tr_tally:Nr,_tr_align:Mr};const Fr=(e,n,t,i)=>{let a=e&65535|0,r=e>>>16&65535|0,o=0;for(;t!==0;){o=t>2e3?2e3:t,t-=o;do a=a+n[i++]|0,r=r+a|0;while(--o);a%=65521,r%=65521}return a|r<<16|0};var ot=Fr;const Lr=()=>{let e,n=[];for(var t=0;t<256;t++){e=t;for(var i=0;i<8;i++)e=e&1?3988292384^e>>>1:e>>>1;n[t]=e}return n},Or=new Uint32Array(Lr()),Br=(e,n,t,i)=>{const a=Or,r=i+t;e^=-1;for(let o=i;o<r;o++)e=e>>>8^a[(e^n[o])&255];return e^-1};var H=Br,Ee={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},ze={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:Hr,_tr_stored_block:cn,_tr_flush_block:Pr,_tr_tally:ue,_tr_align:Xr}=Ur,{Z_NO_FLUSH:be,Z_PARTIAL_FLUSH:Yr,Z_FULL_FLUSH:$r,Z_FINISH:Q,Z_BLOCK:qn,Z_OK:X,Z_STREAM_END:Jn,Z_STREAM_ERROR:ae,Z_DATA_ERROR:Gr,Z_BUF_ERROR:Kt,Z_DEFAULT_COMPRESSION:Kr,Z_FILTERED:Wr,Z_HUFFMAN_ONLY:pt,Z_RLE:jr,Z_FIXED:Vr,Z_DEFAULT_STRATEGY:qr,Z_UNKNOWN:Jr,Z_DEFLATED:Ot}=ze,Qr=9,el=15,tl=8,nl=29,il=256,hn=il+1+nl,al=30,rl=19,ll=2*hn+1,ol=15,D=3,_e=258,re=_e+D+1,sl=32,Pe=42,Tn=57,dn=69,_n=73,un=91,bn=103,ke=113,qe=666,W=1,Ke=2,Ae=3,We=4,fl=3,xe=(e,n)=>(e.msg=Ee[n],n),Qn=e=>e*2-(e>4?9:0),de=e=>{let n=e.length;for(;--n>=0;)e[n]=0},cl=e=>{let n,t,i,a=e.w_size;n=e.hash_size,i=n;do t=e.head[--i],e.head[i]=t>=a?t-a:0;while(--n);n=a,i=n;do t=e.prev[--i],e.prev[i]=t>=a?t-a:0;while(--n)};let hl=(e,n,t)=>(n<<e.hash_shift^t)&e.hash_mask,ge=hl;const V=e=>{const n=e.state;let t=n.pending;t>e.avail_out&&(t=e.avail_out),t!==0&&(e.output.set(n.pending_buf.subarray(n.pending_out,n.pending_out+t),e.next_out),e.next_out+=t,n.pending_out+=t,e.total_out+=t,e.avail_out-=t,n.pending-=t,n.pending===0&&(n.pending_out=0))},q=(e,n)=>{Pr(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,n),e.block_start=e.strstart,V(e.strm)},C=(e,n)=>{e.pending_buf[e.pending++]=n},Ve=(e,n)=>{e.pending_buf[e.pending++]=n>>>8&255,e.pending_buf[e.pending++]=n&255},gn=(e,n,t,i)=>{let a=e.avail_in;return a>i&&(a=i),a===0?0:(e.avail_in-=a,n.set(e.input.subarray(e.next_in,e.next_in+a),t),e.state.wrap===1?e.adler=ot(e.adler,n,a,t):e.state.wrap===2&&(e.adler=H(e.adler,n,a,t)),e.next_in+=a,e.total_in+=a,a)},ua=(e,n)=>{let t=e.max_chain_length,i=e.strstart,a,r,o=e.prev_length,l=e.nice_match;const c=e.strstart>e.w_size-re?e.strstart-(e.w_size-re):0,s=e.window,f=e.w_mask,g=e.prev,d=e.strstart+_e;let h=s[i+o-1],_=s[i+o];e.prev_length>=e.good_match&&(t>>=2),l>e.lookahead&&(l=e.lookahead);do if(a=n,!(s[a+o]!==_||s[a+o-1]!==h||s[a]!==s[i]||s[++a]!==s[i+1])){i+=2,a++;do;while(s[++i]===s[++a]&&s[++i]===s[++a]&&s[++i]===s[++a]&&s[++i]===s[++a]&&s[++i]===s[++a]&&s[++i]===s[++a]&&s[++i]===s[++a]&&s[++i]===s[++a]&&i<d);if(r=_e-(d-i),i=d-_e,r>o){if(e.match_start=n,o=r,r>=l)break;h=s[i+o-1],_=s[i+o]}}while((n=g[n&f])>c&&--t!==0);return o<=e.lookahead?o:e.lookahead},Xe=e=>{const n=e.w_size;let t,i,a;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=n+(n-re)&&(e.window.set(e.window.subarray(n,n+n-i),0),e.match_start-=n,e.strstart-=n,e.block_start-=n,e.insert>e.strstart&&(e.insert=e.strstart),cl(e),i+=n),e.strm.avail_in===0)break;if(t=gn(e.strm,e.window,e.strstart+e.lookahead,i),e.lookahead+=t,e.lookahead+e.insert>=D)for(a=e.strstart-e.insert,e.ins_h=e.window[a],e.ins_h=ge(e,e.ins_h,e.window[a+1]);e.insert&&(e.ins_h=ge(e,e.ins_h,e.window[a+D-1]),e.prev[a&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=a,a++,e.insert--,!(e.lookahead+e.insert<D)););}while(e.lookahead<re&&e.strm.avail_in!==0)},ba=(e,n)=>{let t=e.pending_buf_size-5>e.w_size?e.w_size:e.pending_buf_size-5,i,a,r,o=0,l=e.strm.avail_in;do{if(i=65535,r=e.bi_valid+42>>3,e.strm.avail_out<r||(r=e.strm.avail_out-r,a=e.strstart-e.block_start,i>a+e.strm.avail_in&&(i=a+e.strm.avail_in),i>r&&(i=r),i<t&&(i===0&&n!==Q||n===be||i!==a+e.strm.avail_in)))break;o=n===Q&&i===a+e.strm.avail_in?1:0,cn(e,0,0,o),e.pending_buf[e.pending-4]=i,e.pending_buf[e.pending-3]=i>>8,e.pending_buf[e.pending-2]=~i,e.pending_buf[e.pending-1]=~i>>8,V(e.strm),a&&(a>i&&(a=i),e.strm.output.set(e.window.subarray(e.block_start,e.block_start+a),e.strm.next_out),e.strm.next_out+=a,e.strm.avail_out-=a,e.strm.total_out+=a,e.block_start+=a,i-=a),i&&(gn(e.strm,e.strm.output,e.strm.next_out,i),e.strm.next_out+=i,e.strm.avail_out-=i,e.strm.total_out+=i)}while(o===0);return l-=e.strm.avail_in,l&&(l>=e.w_size?(e.matches=2,e.window.set(e.strm.input.subarray(e.strm.next_in-e.w_size,e.strm.next_in),0),e.strstart=e.w_size,e.insert=e.strstart):(e.window_size-e.strstart<=l&&(e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,e.insert>e.strstart&&(e.insert=e.strstart)),e.window.set(e.strm.input.subarray(e.strm.next_in-l,e.strm.next_in),e.strstart),e.strstart+=l,e.insert+=l>e.w_size-e.insert?e.w_size-e.insert:l),e.block_start=e.strstart),e.high_water<e.strstart&&(e.high_water=e.strstart),o?We:n!==be&&n!==Q&&e.strm.avail_in===0&&e.strstart===e.block_start?Ke:(r=e.window_size-e.strstart,e.strm.avail_in>r&&e.block_start>=e.w_size&&(e.block_start-=e.w_size,e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,r+=e.w_size,e.insert>e.strstart&&(e.insert=e.strstart)),r>e.strm.avail_in&&(r=e.strm.avail_in),r&&(gn(e.strm,e.window,e.strstart,r),e.strstart+=r,e.insert+=r>e.w_size-e.insert?e.w_size-e.insert:r),e.high_water<e.strstart&&(e.high_water=e.strstart),r=e.bi_valid+42>>3,r=e.pending_buf_size-r>65535?65535:e.pending_buf_size-r,t=r>e.w_size?e.w_size:r,a=e.strstart-e.block_start,(a>=t||(a||n===Q)&&n!==be&&e.strm.avail_in===0&&a<=r)&&(i=a>r?r:a,o=n===Q&&e.strm.avail_in===0&&i===a?1:0,cn(e,e.block_start,i,o),e.block_start+=i,V(e.strm)),o?Ae:W)},Wt=(e,n)=>{let t,i;for(;;){if(e.lookahead<re){if(Xe(e),e.lookahead<re&&n===be)return W;if(e.lookahead===0)break}if(t=0,e.lookahead>=D&&(e.ins_h=ge(e,e.ins_h,e.window[e.strstart+D-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),t!==0&&e.strstart-t<=e.w_size-re&&(e.match_length=ua(e,t)),e.match_length>=D)if(i=ue(e,e.strstart-e.match_start,e.match_length-D),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=D){e.match_length--;do e.strstart++,e.ins_h=ge(e,e.ins_h,e.window[e.strstart+D-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart;while(--e.match_length!==0);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=ge(e,e.ins_h,e.window[e.strstart+1]);else i=ue(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(i&&(q(e,!1),e.strm.avail_out===0))return W}return e.insert=e.strstart<D-1?e.strstart:D-1,n===Q?(q(e,!0),e.strm.avail_out===0?Ae:We):e.sym_next&&(q(e,!1),e.strm.avail_out===0)?W:Ke},Ce=(e,n)=>{let t,i,a;for(;;){if(e.lookahead<re){if(Xe(e),e.lookahead<re&&n===be)return W;if(e.lookahead===0)break}if(t=0,e.lookahead>=D&&(e.ins_h=ge(e,e.ins_h,e.window[e.strstart+D-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=D-1,t!==0&&e.prev_length<e.max_lazy_match&&e.strstart-t<=e.w_size-re&&(e.match_length=ua(e,t),e.match_length<=5&&(e.strategy===Wr||e.match_length===D&&e.strstart-e.match_start>4096)&&(e.match_length=D-1)),e.prev_length>=D&&e.match_length<=e.prev_length){a=e.strstart+e.lookahead-D,i=ue(e,e.strstart-1-e.prev_match,e.prev_length-D),e.lookahead-=e.prev_length-1,e.prev_length-=2;do++e.strstart<=a&&(e.ins_h=ge(e,e.ins_h,e.window[e.strstart+D-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart);while(--e.prev_length!==0);if(e.match_available=0,e.match_length=D-1,e.strstart++,i&&(q(e,!1),e.strm.avail_out===0))return W}else if(e.match_available){if(i=ue(e,0,e.window[e.strstart-1]),i&&q(e,!1),e.strstart++,e.lookahead--,e.strm.avail_out===0)return W}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(i=ue(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<D-1?e.strstart:D-1,n===Q?(q(e,!0),e.strm.avail_out===0?Ae:We):e.sym_next&&(q(e,!1),e.strm.avail_out===0)?W:Ke},dl=(e,n)=>{let t,i,a,r;const o=e.window;for(;;){if(e.lookahead<=_e){if(Xe(e),e.lookahead<=_e&&n===be)return W;if(e.lookahead===0)break}if(e.match_length=0,e.lookahead>=D&&e.strstart>0&&(a=e.strstart-1,i=o[a],i===o[++a]&&i===o[++a]&&i===o[++a])){r=e.strstart+_e;do;while(i===o[++a]&&i===o[++a]&&i===o[++a]&&i===o[++a]&&i===o[++a]&&i===o[++a]&&i===o[++a]&&i===o[++a]&&a<r);e.match_length=_e-(r-a),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=D?(t=ue(e,1,e.match_length-D),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(t=ue(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),t&&(q(e,!1),e.strm.avail_out===0))return W}return e.insert=0,n===Q?(q(e,!0),e.strm.avail_out===0?Ae:We):e.sym_next&&(q(e,!1),e.strm.avail_out===0)?W:Ke},_l=(e,n)=>{let t;for(;;){if(e.lookahead===0&&(Xe(e),e.lookahead===0)){if(n===be)return W;break}if(e.match_length=0,t=ue(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,t&&(q(e,!1),e.strm.avail_out===0))return W}return e.insert=0,n===Q?(q(e,!0),e.strm.avail_out===0?Ae:We):e.sym_next&&(q(e,!1),e.strm.avail_out===0)?W:Ke};function ne(e,n,t,i,a){this.good_length=e,this.max_lazy=n,this.nice_length=t,this.max_chain=i,this.func=a}const Je=[new ne(0,0,0,0,ba),new ne(4,4,8,4,Wt),new ne(4,5,16,8,Wt),new ne(4,6,32,32,Wt),new ne(4,4,16,16,Ce),new ne(8,16,32,32,Ce),new ne(8,16,128,128,Ce),new ne(8,32,128,256,Ce),new ne(32,128,258,1024,Ce),new ne(32,258,258,4096,Ce)],ul=e=>{e.window_size=2*e.w_size,de(e.head),e.max_lazy_match=Je[e.level].max_lazy,e.good_match=Je[e.level].good_length,e.nice_match=Je[e.level].nice_length,e.max_chain_length=Je[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=D-1,e.match_available=0,e.ins_h=0};function bl(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=Ot,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(ll*2),this.dyn_dtree=new Uint16Array((2*al+1)*2),this.bl_tree=new Uint16Array((2*rl+1)*2),de(this.dyn_ltree),de(this.dyn_dtree),de(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(ol+1),this.heap=new Uint16Array(2*hn+1),de(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(2*hn+1),de(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const _t=e=>{if(!e)return 1;const n=e.state;return!n||n.strm!==e||n.status!==Pe&&n.status!==Tn&&n.status!==dn&&n.status!==_n&&n.status!==un&&n.status!==bn&&n.status!==ke&&n.status!==qe?1:0},ga=e=>{if(_t(e))return xe(e,ae);e.total_in=e.total_out=0,e.data_type=Jr;const n=e.state;return n.pending=0,n.pending_out=0,n.wrap<0&&(n.wrap=-n.wrap),n.status=n.wrap===2?Tn:n.wrap?Pe:ke,e.adler=n.wrap===2?0:1,n.last_flush=-2,Hr(n),X},wa=e=>{const n=ga(e);return n===X&&ul(e.state),n},gl=(e,n)=>_t(e)||e.state.wrap!==2?ae:(e.state.gzhead=n,X),ma=(e,n,t,i,a,r)=>{if(!e)return ae;let o=1;if(n===Kr&&(n=6),i<0?(o=0,i=-i):i>15&&(o=2,i-=16),a<1||a>Qr||t!==Ot||i<8||i>15||n<0||n>9||r<0||r>Vr||i===8&&o!==1)return xe(e,ae);i===8&&(i=9);const l=new bl;return e.state=l,l.strm=e,l.status=Pe,l.wrap=o,l.gzhead=null,l.w_bits=i,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=a+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+D-1)/D),l.window=new Uint8Array(l.w_size*2),l.head=new Uint16Array(l.hash_size),l.prev=new Uint16Array(l.w_size),l.lit_bufsize=1<<a+6,l.pending_buf_size=l.lit_bufsize*4,l.pending_buf=new Uint8Array(l.pending_buf_size),l.sym_buf=l.lit_bufsize,l.sym_end=(l.lit_bufsize-1)*3,l.level=n,l.strategy=r,l.method=t,wa(e)},wl=(e,n)=>ma(e,n,Ot,el,tl,qr),ml=(e,n)=>{if(_t(e)||n>qn||n<0)return e?xe(e,ae):ae;const t=e.state;if(!e.output||e.avail_in!==0&&!e.input||t.status===qe&&n!==Q)return xe(e,e.avail_out===0?Kt:ae);const i=t.last_flush;if(t.last_flush=n,t.pending!==0){if(V(e),e.avail_out===0)return t.last_flush=-1,X}else if(e.avail_in===0&&Qn(n)<=Qn(i)&&n!==Q)return xe(e,Kt);if(t.status===qe&&e.avail_in!==0)return xe(e,Kt);if(t.status===Pe&&t.wrap===0&&(t.status=ke),t.status===Pe){let a=Ot+(t.w_bits-8<<4)<<8,r=-1;if(t.strategy>=pt||t.level<2?r=0:t.level<6?r=1:t.level===6?r=2:r=3,a|=r<<6,t.strstart!==0&&(a|=sl),a+=31-a%31,Ve(t,a),t.strstart!==0&&(Ve(t,e.adler>>>16),Ve(t,e.adler&65535)),e.adler=1,t.status=ke,V(e),t.pending!==0)return t.last_flush=-1,X}if(t.status===Tn){if(e.adler=0,C(t,31),C(t,139),C(t,8),t.gzhead)C(t,(t.gzhead.text?1:0)+(t.gzhead.hcrc?2:0)+(t.gzhead.extra?4:0)+(t.gzhead.name?8:0)+(t.gzhead.comment?16:0)),C(t,t.gzhead.time&255),C(t,t.gzhead.time>>8&255),C(t,t.gzhead.time>>16&255),C(t,t.gzhead.time>>24&255),C(t,t.level===9?2:t.strategy>=pt||t.level<2?4:0),C(t,t.gzhead.os&255),t.gzhead.extra&&t.gzhead.extra.length&&(C(t,t.gzhead.extra.length&255),C(t,t.gzhead.extra.length>>8&255)),t.gzhead.hcrc&&(e.adler=H(e.adler,t.pending_buf,t.pending,0)),t.gzindex=0,t.status=dn;else if(C(t,0),C(t,0),C(t,0),C(t,0),C(t,0),C(t,t.level===9?2:t.strategy>=pt||t.level<2?4:0),C(t,fl),t.status=ke,V(e),t.pending!==0)return t.last_flush=-1,X}if(t.status===dn){if(t.gzhead.extra){let a=t.pending,r=(t.gzhead.extra.length&65535)-t.gzindex;for(;t.pending+r>t.pending_buf_size;){let l=t.pending_buf_size-t.pending;if(t.pending_buf.set(t.gzhead.extra.subarray(t.gzindex,t.gzindex+l),t.pending),t.pending=t.pending_buf_size,t.gzhead.hcrc&&t.pending>a&&(e.adler=H(e.adler,t.pending_buf,t.pending-a,a)),t.gzindex+=l,V(e),t.pending!==0)return t.last_flush=-1,X;a=0,r-=l}let o=new Uint8Array(t.gzhead.extra);t.pending_buf.set(o.subarray(t.gzindex,t.gzindex+r),t.pending),t.pending+=r,t.gzhead.hcrc&&t.pending>a&&(e.adler=H(e.adler,t.pending_buf,t.pending-a,a)),t.gzindex=0}t.status=_n}if(t.status===_n){if(t.gzhead.name){let a=t.pending,r;do{if(t.pending===t.pending_buf_size){if(t.gzhead.hcrc&&t.pending>a&&(e.adler=H(e.adler,t.pending_buf,t.pending-a,a)),V(e),t.pending!==0)return t.last_flush=-1,X;a=0}t.gzindex<t.gzhead.name.length?r=t.gzhead.name.charCodeAt(t.gzindex++)&255:r=0,C(t,r)}while(r!==0);t.gzhead.hcrc&&t.pending>a&&(e.adler=H(e.adler,t.pending_buf,t.pending-a,a)),t.gzindex=0}t.status=un}if(t.status===un){if(t.gzhead.comment){let a=t.pending,r;do{if(t.pending===t.pending_buf_size){if(t.gzhead.hcrc&&t.pending>a&&(e.adler=H(e.adler,t.pending_buf,t.pending-a,a)),V(e),t.pending!==0)return t.last_flush=-1,X;a=0}t.gzindex<t.gzhead.comment.length?r=t.gzhead.comment.charCodeAt(t.gzindex++)&255:r=0,C(t,r)}while(r!==0);t.gzhead.hcrc&&t.pending>a&&(e.adler=H(e.adler,t.pending_buf,t.pending-a,a))}t.status=bn}if(t.status===bn){if(t.gzhead.hcrc){if(t.pending+2>t.pending_buf_size&&(V(e),t.pending!==0))return t.last_flush=-1,X;C(t,e.adler&255),C(t,e.adler>>8&255),e.adler=0}if(t.status=ke,V(e),t.pending!==0)return t.last_flush=-1,X}if(e.avail_in!==0||t.lookahead!==0||n!==be&&t.status!==qe){let a=t.level===0?ba(t,n):t.strategy===pt?_l(t,n):t.strategy===jr?dl(t,n):Je[t.level].func(t,n);if((a===Ae||a===We)&&(t.status=qe),a===W||a===Ae)return e.avail_out===0&&(t.last_flush=-1),X;if(a===Ke&&(n===Yr?Xr(t):n!==qn&&(cn(t,0,0,!1),n===$r&&(de(t.head),t.lookahead===0&&(t.strstart=0,t.block_start=0,t.insert=0))),V(e),e.avail_out===0))return t.last_flush=-1,X}return n!==Q?X:t.wrap<=0?Jn:(t.wrap===2?(C(t,e.adler&255),C(t,e.adler>>8&255),C(t,e.adler>>16&255),C(t,e.adler>>24&255),C(t,e.total_in&255),C(t,e.total_in>>8&255),C(t,e.total_in>>16&255),C(t,e.total_in>>24&255)):(Ve(t,e.adler>>>16),Ve(t,e.adler&65535)),V(e),t.wrap>0&&(t.wrap=-t.wrap),t.pending!==0?X:Jn)},pl=e=>{if(_t(e))return ae;const n=e.state.status;return e.state=null,n===ke?xe(e,Gr):X},vl=(e,n)=>{let t=n.length;if(_t(e))return ae;const i=e.state,a=i.wrap;if(a===2||a===1&&i.status!==Pe||i.lookahead)return ae;if(a===1&&(e.adler=ot(e.adler,n,t,0)),i.wrap=0,t>=i.w_size){a===0&&(de(i.head),i.strstart=0,i.block_start=0,i.insert=0);let c=new Uint8Array(i.w_size);c.set(n.subarray(t-i.w_size,t),0),n=c,t=i.w_size}const r=e.avail_in,o=e.next_in,l=e.input;for(e.avail_in=t,e.next_in=0,e.input=n,Xe(i);i.lookahead>=D;){let c=i.strstart,s=i.lookahead-(D-1);do i.ins_h=ge(i,i.ins_h,i.window[c+D-1]),i.prev[c&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=c,c++;while(--s);i.strstart=c,i.lookahead=D-1,Xe(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=D-1,i.match_available=0,e.next_in=o,e.input=l,e.avail_in=r,i.wrap=a,X};var kl=wl,xl=ma,yl=wa,El=ga,Al=gl,Sl=ml,Tl=pl,zl=vl,Rl="pako deflate (from Nodeca project)",tt={deflateInit:kl,deflateInit2:xl,deflateReset:yl,deflateResetKeep:El,deflateSetHeader:Al,deflate:Sl,deflateEnd:Tl,deflateSetDictionary:zl,deflateInfo:Rl};const Dl=(e,n)=>Object.prototype.hasOwnProperty.call(e,n);var Zl=function(e){const n=Array.prototype.slice.call(arguments,1);for(;n.length;){const t=n.shift();if(t){if(typeof t!="object")throw new TypeError(t+"must be non-object");for(const i in t)Dl(t,i)&&(e[i]=t[i])}}return e},Cl=e=>{let n=0;for(let i=0,a=e.length;i<a;i++)n+=e[i].length;const t=new Uint8Array(n);for(let i=0,a=0,r=e.length;i<r;i++){let o=e[i];t.set(o,a),a+=o.length}return t},Bt={assign:Zl,flattenChunks:Cl};let pa=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{pa=!1}const st=new Uint8Array(256);for(let e=0;e<256;e++)st[e]=e>=252?6:e>=248?5:e>=240?4:e>=224?3:e>=192?2:1;st[254]=st[254]=1;var Il=e=>{if(typeof TextEncoder=="function"&&TextEncoder.prototype.encode)return new TextEncoder().encode(e);let n,t,i,a,r,o=e.length,l=0;for(a=0;a<o;a++)t=e.charCodeAt(a),(t&64512)===55296&&a+1<o&&(i=e.charCodeAt(a+1),(i&64512)===56320&&(t=65536+(t-55296<<10)+(i-56320),a++)),l+=t<128?1:t<2048?2:t<65536?3:4;for(n=new Uint8Array(l),r=0,a=0;r<l;a++)t=e.charCodeAt(a),(t&64512)===55296&&a+1<o&&(i=e.charCodeAt(a+1),(i&64512)===56320&&(t=65536+(t-55296<<10)+(i-56320),a++)),t<128?n[r++]=t:t<2048?(n[r++]=192|t>>>6,n[r++]=128|t&63):t<65536?(n[r++]=224|t>>>12,n[r++]=128|t>>>6&63,n[r++]=128|t&63):(n[r++]=240|t>>>18,n[r++]=128|t>>>12&63,n[r++]=128|t>>>6&63,n[r++]=128|t&63);return n};const Nl=(e,n)=>{if(n<65534&&e.subarray&&pa)return String.fromCharCode.apply(null,e.length===n?e:e.subarray(0,n));let t="";for(let i=0;i<n;i++)t+=String.fromCharCode(e[i]);return t};var Ml=(e,n)=>{const t=n||e.length;if(typeof TextDecoder=="function"&&TextDecoder.prototype.decode)return new TextDecoder().decode(e.subarray(0,n));let i,a;const r=new Array(t*2);for(a=0,i=0;i<t;){let o=e[i++];if(o<128){r[a++]=o;continue}let l=st[o];if(l>4){r[a++]=65533,i+=l-1;continue}for(o&=l===2?31:l===3?15:7;l>1&&i<t;)o=o<<6|e[i++]&63,l--;if(l>1){r[a++]=65533;continue}o<65536?r[a++]=o:(o-=65536,r[a++]=55296|o>>10&1023,r[a++]=56320|o&1023)}return Nl(r,a)},Ul=(e,n)=>{n=n||e.length,n>e.length&&(n=e.length);let t=n-1;for(;t>=0&&(e[t]&192)===128;)t--;return t<0||t===0?n:t+st[e[t]]>n?t:n},ft={string2buf:Il,buf2string:Ml,utf8border:Ul};function Fl(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}var va=Fl;const ka=Object.prototype.toString,{Z_NO_FLUSH:Ll,Z_SYNC_FLUSH:Ol,Z_FULL_FLUSH:Bl,Z_FINISH:Hl,Z_OK:Zt,Z_STREAM_END:Pl,Z_DEFAULT_COMPRESSION:Xl,Z_DEFAULT_STRATEGY:Yl,Z_DEFLATED:$l}=ze;function ut(e){this.options=Bt.assign({level:Xl,method:$l,chunkSize:16384,windowBits:15,memLevel:8,strategy:Yl},e||{});let n=this.options;n.raw&&n.windowBits>0?n.windowBits=-n.windowBits:n.gzip&&n.windowBits>0&&n.windowBits<16&&(n.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new va,this.strm.avail_out=0;let t=tt.deflateInit2(this.strm,n.level,n.method,n.windowBits,n.memLevel,n.strategy);if(t!==Zt)throw new Error(Ee[t]);if(n.header&&tt.deflateSetHeader(this.strm,n.header),n.dictionary){let i;if(typeof n.dictionary=="string"?i=ft.string2buf(n.dictionary):ka.call(n.dictionary)==="[object ArrayBuffer]"?i=new Uint8Array(n.dictionary):i=n.dictionary,t=tt.deflateSetDictionary(this.strm,i),t!==Zt)throw new Error(Ee[t]);this._dict_set=!0}}ut.prototype.push=function(e,n){const t=this.strm,i=this.options.chunkSize;let a,r;if(this.ended)return!1;for(n===~~n?r=n:r=n===!0?Hl:Ll,typeof e=="string"?t.input=ft.string2buf(e):ka.call(e)==="[object ArrayBuffer]"?t.input=new Uint8Array(e):t.input=e,t.next_in=0,t.avail_in=t.input.length;;){if(t.avail_out===0&&(t.output=new Uint8Array(i),t.next_out=0,t.avail_out=i),(r===Ol||r===Bl)&&t.avail_out<=6){this.onData(t.output.subarray(0,t.next_out)),t.avail_out=0;continue}if(a=tt.deflate(t,r),a===Pl)return t.next_out>0&&this.onData(t.output.subarray(0,t.next_out)),a=tt.deflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===Zt;if(t.avail_out===0){this.onData(t.output);continue}if(r>0&&t.next_out>0){this.onData(t.output.subarray(0,t.next_out)),t.avail_out=0;continue}if(t.avail_in===0)break}return!0};ut.prototype.onData=function(e){this.chunks.push(e)};ut.prototype.onEnd=function(e){e===Zt&&(this.result=Bt.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};function zn(e,n){const t=new ut(n);if(t.push(e,!0),t.err)throw t.msg||Ee[t.err];return t.result}function Gl(e,n){return n=n||{},n.raw=!0,zn(e,n)}function Kl(e,n){return n=n||{},n.gzip=!0,zn(e,n)}var Wl=ut,jl=zn,Vl=Gl,ql=Kl,Jl=ze,Ql={Deflate:Wl,deflate:jl,deflateRaw:Vl,gzip:ql,constants:Jl};const vt=16209,eo=16191;var to=function(n,t){let i,a,r,o,l,c,s,f,g,d,h,_,m,v,w,y,E,b,A,R,p,S,u,k;const x=n.state;i=n.next_in,u=n.input,a=i+(n.avail_in-5),r=n.next_out,k=n.output,o=r-(t-n.avail_out),l=r+(n.avail_out-257),c=x.dmax,s=x.wsize,f=x.whave,g=x.wnext,d=x.window,h=x.hold,_=x.bits,m=x.lencode,v=x.distcode,w=(1<<x.lenbits)-1,y=(1<<x.distbits)-1;e:do{_<15&&(h+=u[i++]<<_,_+=8,h+=u[i++]<<_,_+=8),E=m[h&w];t:for(;;){if(b=E>>>24,h>>>=b,_-=b,b=E>>>16&255,b===0)k[r++]=E&65535;else if(b&16){A=E&65535,b&=15,b&&(_<b&&(h+=u[i++]<<_,_+=8),A+=h&(1<<b)-1,h>>>=b,_-=b),_<15&&(h+=u[i++]<<_,_+=8,h+=u[i++]<<_,_+=8),E=v[h&y];n:for(;;){if(b=E>>>24,h>>>=b,_-=b,b=E>>>16&255,b&16){if(R=E&65535,b&=15,_<b&&(h+=u[i++]<<_,_+=8,_<b&&(h+=u[i++]<<_,_+=8)),R+=h&(1<<b)-1,R>c){n.msg="invalid distance too far back",x.mode=vt;break e}if(h>>>=b,_-=b,b=r-o,R>b){if(b=R-b,b>f&&x.sane){n.msg="invalid distance too far back",x.mode=vt;break e}if(p=0,S=d,g===0){if(p+=s-b,b<A){A-=b;do k[r++]=d[p++];while(--b);p=r-R,S=k}}else if(g<b){if(p+=s+g-b,b-=g,b<A){A-=b;do k[r++]=d[p++];while(--b);if(p=0,g<A){b=g,A-=b;do k[r++]=d[p++];while(--b);p=r-R,S=k}}}else if(p+=g-b,b<A){A-=b;do k[r++]=d[p++];while(--b);p=r-R,S=k}for(;A>2;)k[r++]=S[p++],k[r++]=S[p++],k[r++]=S[p++],A-=3;A&&(k[r++]=S[p++],A>1&&(k[r++]=S[p++]))}else{p=r-R;do k[r++]=k[p++],k[r++]=k[p++],k[r++]=k[p++],A-=3;while(A>2);A&&(k[r++]=k[p++],A>1&&(k[r++]=k[p++]))}}else if(b&64){n.msg="invalid distance code",x.mode=vt;break e}else{E=v[(E&65535)+(h&(1<<b)-1)];continue n}break}}else if(b&64)if(b&32){x.mode=eo;break e}else{n.msg="invalid literal/length code",x.mode=vt;break e}else{E=m[(E&65535)+(h&(1<<b)-1)];continue t}break}}while(i<a&&r<l);A=_>>3,i-=A,_-=A<<3,h&=(1<<_)-1,n.next_in=i,n.next_out=r,n.avail_in=i<a?5+(a-i):5-(i-a),n.avail_out=r<l?257+(l-r):257-(r-l),x.hold=h,x.bits=_};const Ie=15,ei=852,ti=592,ni=0,jt=1,ii=2,no=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),io=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),ao=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),ro=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),lo=(e,n,t,i,a,r,o,l)=>{const c=l.bits;let s=0,f=0,g=0,d=0,h=0,_=0,m=0,v=0,w=0,y=0,E,b,A,R,p,S=null,u;const k=new Uint16Array(Ie+1),x=new Uint16Array(Ie+1);let N=null,gt,we,Z;for(s=0;s<=Ie;s++)k[s]=0;for(f=0;f<i;f++)k[n[t+f]]++;for(h=c,d=Ie;d>=1&&k[d]===0;d--);if(h>d&&(h=d),d===0)return a[r++]=1<<24|64<<16|0,a[r++]=1<<24|64<<16|0,l.bits=1,0;for(g=1;g<d&&k[g]===0;g++);for(h<g&&(h=g),v=1,s=1;s<=Ie;s++)if(v<<=1,v-=k[s],v<0)return-1;if(v>0&&(e===ni||d!==1))return-1;for(x[1]=0,s=1;s<Ie;s++)x[s+1]=x[s]+k[s];for(f=0;f<i;f++)n[t+f]!==0&&(o[x[n[t+f]]++]=f);if(e===ni?(S=N=o,u=20):e===jt?(S=no,N=io,u=257):(S=ao,N=ro,u=0),y=0,f=0,s=g,p=r,_=h,m=0,A=-1,w=1<<h,R=w-1,e===jt&&w>ei||e===ii&&w>ti)return 1;for(;;){gt=s-m,o[f]+1<u?(we=0,Z=o[f]):o[f]>=u?(we=N[o[f]-u],Z=S[o[f]-u]):(we=96,Z=0),E=1<<s-m,b=1<<_,g=b;do b-=E,a[p+(y>>m)+b]=gt<<24|we<<16|Z|0;while(b!==0);for(E=1<<s-1;y&E;)E>>=1;if(E!==0?(y&=E-1,y+=E):y=0,f++,--k[s]===0){if(s===d)break;s=n[t+o[f]]}if(s>h&&(y&R)!==A){for(m===0&&(m=h),p+=g,_=s-m,v=1<<_;_+m<d&&(v-=k[_+m],!(v<=0));)_++,v<<=1;if(w+=1<<_,e===jt&&w>ei||e===ii&&w>ti)return 1;A=y&R,a[A]=h<<24|_<<16|p-r|0}}return y!==0&&(a[p+y]=s-m<<24|64<<16|0),l.bits=h,0};var nt=lo;const oo=0,xa=1,ya=2,{Z_FINISH:ai,Z_BLOCK:so,Z_TREES:kt,Z_OK:Se,Z_STREAM_END:fo,Z_NEED_DICT:co,Z_STREAM_ERROR:ee,Z_DATA_ERROR:Ea,Z_MEM_ERROR:Aa,Z_BUF_ERROR:ho,Z_DEFLATED:ri}=ze,Ht=16180,li=16181,oi=16182,si=16183,fi=16184,ci=16185,hi=16186,di=16187,_i=16188,ui=16189,Ct=16190,oe=16191,Vt=16192,bi=16193,qt=16194,gi=16195,wi=16196,mi=16197,pi=16198,xt=16199,yt=16200,vi=16201,ki=16202,xi=16203,yi=16204,Ei=16205,Jt=16206,Ai=16207,Si=16208,M=16209,Sa=16210,Ta=16211,_o=852,uo=592,bo=15,go=bo,Ti=e=>(e>>>24&255)+(e>>>8&65280)+((e&65280)<<8)+((e&255)<<24);function wo(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Re=e=>{if(!e)return 1;const n=e.state;return!n||n.strm!==e||n.mode<Ht||n.mode>Ta?1:0},za=e=>{if(Re(e))return ee;const n=e.state;return e.total_in=e.total_out=n.total=0,e.msg="",n.wrap&&(e.adler=n.wrap&1),n.mode=Ht,n.last=0,n.havedict=0,n.flags=-1,n.dmax=32768,n.head=null,n.hold=0,n.bits=0,n.lencode=n.lendyn=new Int32Array(_o),n.distcode=n.distdyn=new Int32Array(uo),n.sane=1,n.back=-1,Se},Ra=e=>{if(Re(e))return ee;const n=e.state;return n.wsize=0,n.whave=0,n.wnext=0,za(e)},Da=(e,n)=>{let t;if(Re(e))return ee;const i=e.state;return n<0?(t=0,n=-n):(t=(n>>4)+5,n<48&&(n&=15)),n&&(n<8||n>15)?ee:(i.window!==null&&i.wbits!==n&&(i.window=null),i.wrap=t,i.wbits=n,Ra(e))},Za=(e,n)=>{if(!e)return ee;const t=new wo;e.state=t,t.strm=e,t.window=null,t.mode=Ht;const i=Da(e,n);return i!==Se&&(e.state=null),i},mo=e=>Za(e,go);let zi=!0,Qt,en;const po=e=>{if(zi){Qt=new Int32Array(512),en=new Int32Array(32);let n=0;for(;n<144;)e.lens[n++]=8;for(;n<256;)e.lens[n++]=9;for(;n<280;)e.lens[n++]=7;for(;n<288;)e.lens[n++]=8;for(nt(xa,e.lens,0,288,Qt,0,e.work,{bits:9}),n=0;n<32;)e.lens[n++]=5;nt(ya,e.lens,0,32,en,0,e.work,{bits:5}),zi=!1}e.lencode=Qt,e.lenbits=9,e.distcode=en,e.distbits=5},Ca=(e,n,t,i)=>{let a;const r=e.state;return r.window===null&&(r.wsize=1<<r.wbits,r.wnext=0,r.whave=0,r.window=new Uint8Array(r.wsize)),i>=r.wsize?(r.window.set(n.subarray(t-r.wsize,t),0),r.wnext=0,r.whave=r.wsize):(a=r.wsize-r.wnext,a>i&&(a=i),r.window.set(n.subarray(t-i,t-i+a),r.wnext),i-=a,i?(r.window.set(n.subarray(t-i,t),0),r.wnext=i,r.whave=r.wsize):(r.wnext+=a,r.wnext===r.wsize&&(r.wnext=0),r.whave<r.wsize&&(r.whave+=a))),0},vo=(e,n)=>{let t,i,a,r,o,l,c,s,f,g,d,h,_,m,v=0,w,y,E,b,A,R,p,S;const u=new Uint8Array(4);let k,x;const N=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(Re(e)||!e.output||!e.input&&e.avail_in!==0)return ee;t=e.state,t.mode===oe&&(t.mode=Vt),o=e.next_out,a=e.output,c=e.avail_out,r=e.next_in,i=e.input,l=e.avail_in,s=t.hold,f=t.bits,g=l,d=c,S=Se;e:for(;;)switch(t.mode){case Ht:if(t.wrap===0){t.mode=Vt;break}for(;f<16;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}if(t.wrap&2&&s===35615){t.wbits===0&&(t.wbits=15),t.check=0,u[0]=s&255,u[1]=s>>>8&255,t.check=H(t.check,u,2,0),s=0,f=0,t.mode=li;break}if(t.head&&(t.head.done=!1),!(t.wrap&1)||(((s&255)<<8)+(s>>8))%31){e.msg="incorrect header check",t.mode=M;break}if((s&15)!==ri){e.msg="unknown compression method",t.mode=M;break}if(s>>>=4,f-=4,p=(s&15)+8,t.wbits===0&&(t.wbits=p),p>15||p>t.wbits){e.msg="invalid window size",t.mode=M;break}t.dmax=1<<t.wbits,t.flags=0,e.adler=t.check=1,t.mode=s&512?ui:oe,s=0,f=0;break;case li:for(;f<16;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}if(t.flags=s,(t.flags&255)!==ri){e.msg="unknown compression method",t.mode=M;break}if(t.flags&57344){e.msg="unknown header flags set",t.mode=M;break}t.head&&(t.head.text=s>>8&1),t.flags&512&&t.wrap&4&&(u[0]=s&255,u[1]=s>>>8&255,t.check=H(t.check,u,2,0)),s=0,f=0,t.mode=oi;case oi:for(;f<32;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}t.head&&(t.head.time=s),t.flags&512&&t.wrap&4&&(u[0]=s&255,u[1]=s>>>8&255,u[2]=s>>>16&255,u[3]=s>>>24&255,t.check=H(t.check,u,4,0)),s=0,f=0,t.mode=si;case si:for(;f<16;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}t.head&&(t.head.xflags=s&255,t.head.os=s>>8),t.flags&512&&t.wrap&4&&(u[0]=s&255,u[1]=s>>>8&255,t.check=H(t.check,u,2,0)),s=0,f=0,t.mode=fi;case fi:if(t.flags&1024){for(;f<16;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}t.length=s,t.head&&(t.head.extra_len=s),t.flags&512&&t.wrap&4&&(u[0]=s&255,u[1]=s>>>8&255,t.check=H(t.check,u,2,0)),s=0,f=0}else t.head&&(t.head.extra=null);t.mode=ci;case ci:if(t.flags&1024&&(h=t.length,h>l&&(h=l),h&&(t.head&&(p=t.head.extra_len-t.length,t.head.extra||(t.head.extra=new Uint8Array(t.head.extra_len)),t.head.extra.set(i.subarray(r,r+h),p)),t.flags&512&&t.wrap&4&&(t.check=H(t.check,i,h,r)),l-=h,r+=h,t.length-=h),t.length))break e;t.length=0,t.mode=hi;case hi:if(t.flags&2048){if(l===0)break e;h=0;do p=i[r+h++],t.head&&p&&t.length<65536&&(t.head.name+=String.fromCharCode(p));while(p&&h<l);if(t.flags&512&&t.wrap&4&&(t.check=H(t.check,i,h,r)),l-=h,r+=h,p)break e}else t.head&&(t.head.name=null);t.length=0,t.mode=di;case di:if(t.flags&4096){if(l===0)break e;h=0;do p=i[r+h++],t.head&&p&&t.length<65536&&(t.head.comment+=String.fromCharCode(p));while(p&&h<l);if(t.flags&512&&t.wrap&4&&(t.check=H(t.check,i,h,r)),l-=h,r+=h,p)break e}else t.head&&(t.head.comment=null);t.mode=_i;case _i:if(t.flags&512){for(;f<16;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}if(t.wrap&4&&s!==(t.check&65535)){e.msg="header crc mismatch",t.mode=M;break}s=0,f=0}t.head&&(t.head.hcrc=t.flags>>9&1,t.head.done=!0),e.adler=t.check=0,t.mode=oe;break;case ui:for(;f<32;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}e.adler=t.check=Ti(s),s=0,f=0,t.mode=Ct;case Ct:if(t.havedict===0)return e.next_out=o,e.avail_out=c,e.next_in=r,e.avail_in=l,t.hold=s,t.bits=f,co;e.adler=t.check=1,t.mode=oe;case oe:if(n===so||n===kt)break e;case Vt:if(t.last){s>>>=f&7,f-=f&7,t.mode=Jt;break}for(;f<3;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}switch(t.last=s&1,s>>>=1,f-=1,s&3){case 0:t.mode=bi;break;case 1:if(po(t),t.mode=xt,n===kt){s>>>=2,f-=2;break e}break;case 2:t.mode=wi;break;case 3:e.msg="invalid block type",t.mode=M}s>>>=2,f-=2;break;case bi:for(s>>>=f&7,f-=f&7;f<32;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}if((s&65535)!==(s>>>16^65535)){e.msg="invalid stored block lengths",t.mode=M;break}if(t.length=s&65535,s=0,f=0,t.mode=qt,n===kt)break e;case qt:t.mode=gi;case gi:if(h=t.length,h){if(h>l&&(h=l),h>c&&(h=c),h===0)break e;a.set(i.subarray(r,r+h),o),l-=h,r+=h,c-=h,o+=h,t.length-=h;break}t.mode=oe;break;case wi:for(;f<14;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}if(t.nlen=(s&31)+257,s>>>=5,f-=5,t.ndist=(s&31)+1,s>>>=5,f-=5,t.ncode=(s&15)+4,s>>>=4,f-=4,t.nlen>286||t.ndist>30){e.msg="too many length or distance symbols",t.mode=M;break}t.have=0,t.mode=mi;case mi:for(;t.have<t.ncode;){for(;f<3;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}t.lens[N[t.have++]]=s&7,s>>>=3,f-=3}for(;t.have<19;)t.lens[N[t.have++]]=0;if(t.lencode=t.lendyn,t.lenbits=7,k={bits:t.lenbits},S=nt(oo,t.lens,0,19,t.lencode,0,t.work,k),t.lenbits=k.bits,S){e.msg="invalid code lengths set",t.mode=M;break}t.have=0,t.mode=pi;case pi:for(;t.have<t.nlen+t.ndist;){for(;v=t.lencode[s&(1<<t.lenbits)-1],w=v>>>24,y=v>>>16&255,E=v&65535,!(w<=f);){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}if(E<16)s>>>=w,f-=w,t.lens[t.have++]=E;else{if(E===16){for(x=w+2;f<x;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}if(s>>>=w,f-=w,t.have===0){e.msg="invalid bit length repeat",t.mode=M;break}p=t.lens[t.have-1],h=3+(s&3),s>>>=2,f-=2}else if(E===17){for(x=w+3;f<x;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}s>>>=w,f-=w,p=0,h=3+(s&7),s>>>=3,f-=3}else{for(x=w+7;f<x;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}s>>>=w,f-=w,p=0,h=11+(s&127),s>>>=7,f-=7}if(t.have+h>t.nlen+t.ndist){e.msg="invalid bit length repeat",t.mode=M;break}for(;h--;)t.lens[t.have++]=p}}if(t.mode===M)break;if(t.lens[256]===0){e.msg="invalid code -- missing end-of-block",t.mode=M;break}if(t.lenbits=9,k={bits:t.lenbits},S=nt(xa,t.lens,0,t.nlen,t.lencode,0,t.work,k),t.lenbits=k.bits,S){e.msg="invalid literal/lengths set",t.mode=M;break}if(t.distbits=6,t.distcode=t.distdyn,k={bits:t.distbits},S=nt(ya,t.lens,t.nlen,t.ndist,t.distcode,0,t.work,k),t.distbits=k.bits,S){e.msg="invalid distances set",t.mode=M;break}if(t.mode=xt,n===kt)break e;case xt:t.mode=yt;case yt:if(l>=6&&c>=258){e.next_out=o,e.avail_out=c,e.next_in=r,e.avail_in=l,t.hold=s,t.bits=f,to(e,d),o=e.next_out,a=e.output,c=e.avail_out,r=e.next_in,i=e.input,l=e.avail_in,s=t.hold,f=t.bits,t.mode===oe&&(t.back=-1);break}for(t.back=0;v=t.lencode[s&(1<<t.lenbits)-1],w=v>>>24,y=v>>>16&255,E=v&65535,!(w<=f);){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}if(y&&!(y&240)){for(b=w,A=y,R=E;v=t.lencode[R+((s&(1<<b+A)-1)>>b)],w=v>>>24,y=v>>>16&255,E=v&65535,!(b+w<=f);){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}s>>>=b,f-=b,t.back+=b}if(s>>>=w,f-=w,t.back+=w,t.length=E,y===0){t.mode=Ei;break}if(y&32){t.back=-1,t.mode=oe;break}if(y&64){e.msg="invalid literal/length code",t.mode=M;break}t.extra=y&15,t.mode=vi;case vi:if(t.extra){for(x=t.extra;f<x;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}t.length+=s&(1<<t.extra)-1,s>>>=t.extra,f-=t.extra,t.back+=t.extra}t.was=t.length,t.mode=ki;case ki:for(;v=t.distcode[s&(1<<t.distbits)-1],w=v>>>24,y=v>>>16&255,E=v&65535,!(w<=f);){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}if(!(y&240)){for(b=w,A=y,R=E;v=t.distcode[R+((s&(1<<b+A)-1)>>b)],w=v>>>24,y=v>>>16&255,E=v&65535,!(b+w<=f);){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}s>>>=b,f-=b,t.back+=b}if(s>>>=w,f-=w,t.back+=w,y&64){e.msg="invalid distance code",t.mode=M;break}t.offset=E,t.extra=y&15,t.mode=xi;case xi:if(t.extra){for(x=t.extra;f<x;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}t.offset+=s&(1<<t.extra)-1,s>>>=t.extra,f-=t.extra,t.back+=t.extra}if(t.offset>t.dmax){e.msg="invalid distance too far back",t.mode=M;break}t.mode=yi;case yi:if(c===0)break e;if(h=d-c,t.offset>h){if(h=t.offset-h,h>t.whave&&t.sane){e.msg="invalid distance too far back",t.mode=M;break}h>t.wnext?(h-=t.wnext,_=t.wsize-h):_=t.wnext-h,h>t.length&&(h=t.length),m=t.window}else m=a,_=o-t.offset,h=t.length;h>c&&(h=c),c-=h,t.length-=h;do a[o++]=m[_++];while(--h);t.length===0&&(t.mode=yt);break;case Ei:if(c===0)break e;a[o++]=t.length,c--,t.mode=yt;break;case Jt:if(t.wrap){for(;f<32;){if(l===0)break e;l--,s|=i[r++]<<f,f+=8}if(d-=c,e.total_out+=d,t.total+=d,t.wrap&4&&d&&(e.adler=t.check=t.flags?H(t.check,a,d,o-d):ot(t.check,a,d,o-d)),d=c,t.wrap&4&&(t.flags?s:Ti(s))!==t.check){e.msg="incorrect data check",t.mode=M;break}s=0,f=0}t.mode=Ai;case Ai:if(t.wrap&&t.flags){for(;f<32;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}if(t.wrap&4&&s!==(t.total&4294967295)){e.msg="incorrect length check",t.mode=M;break}s=0,f=0}t.mode=Si;case Si:S=fo;break e;case M:S=Ea;break e;case Sa:return Aa;case Ta:default:return ee}return e.next_out=o,e.avail_out=c,e.next_in=r,e.avail_in=l,t.hold=s,t.bits=f,(t.wsize||d!==e.avail_out&&t.mode<M&&(t.mode<Jt||n!==ai))&&Ca(e,e.output,e.next_out,d-e.avail_out),g-=e.avail_in,d-=e.avail_out,e.total_in+=g,e.total_out+=d,t.total+=d,t.wrap&4&&d&&(e.adler=t.check=t.flags?H(t.check,a,d,e.next_out-d):ot(t.check,a,d,e.next_out-d)),e.data_type=t.bits+(t.last?64:0)+(t.mode===oe?128:0)+(t.mode===xt||t.mode===qt?256:0),(g===0&&d===0||n===ai)&&S===Se&&(S=ho),S},ko=e=>{if(Re(e))return ee;let n=e.state;return n.window&&(n.window=null),e.state=null,Se},xo=(e,n)=>{if(Re(e))return ee;const t=e.state;return t.wrap&2?(t.head=n,n.done=!1,Se):ee},yo=(e,n)=>{const t=n.length;let i,a,r;return Re(e)||(i=e.state,i.wrap!==0&&i.mode!==Ct)?ee:i.mode===Ct&&(a=1,a=ot(a,n,t,0),a!==i.check)?Ea:(r=Ca(e,n,t,t),r?(i.mode=Sa,Aa):(i.havedict=1,Se))};var Eo=Ra,Ao=Da,So=za,To=mo,zo=Za,Ro=vo,Do=ko,Zo=xo,Co=yo,Io="pako inflate (from Nodeca project)",fe={inflateReset:Eo,inflateReset2:Ao,inflateResetKeep:So,inflateInit:To,inflateInit2:zo,inflate:Ro,inflateEnd:Do,inflateGetHeader:Zo,inflateSetDictionary:Co,inflateInfo:Io};function No(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var Mo=No;const Ia=Object.prototype.toString,{Z_NO_FLUSH:Uo,Z_FINISH:Fo,Z_OK:ct,Z_STREAM_END:tn,Z_NEED_DICT:nn,Z_STREAM_ERROR:Lo,Z_DATA_ERROR:Ri,Z_MEM_ERROR:Oo}=ze;function bt(e){this.options=Bt.assign({chunkSize:1024*64,windowBits:15,to:""},e||{});const n=this.options;n.raw&&n.windowBits>=0&&n.windowBits<16&&(n.windowBits=-n.windowBits,n.windowBits===0&&(n.windowBits=-15)),n.windowBits>=0&&n.windowBits<16&&!(e&&e.windowBits)&&(n.windowBits+=32),n.windowBits>15&&n.windowBits<48&&(n.windowBits&15||(n.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new va,this.strm.avail_out=0;let t=fe.inflateInit2(this.strm,n.windowBits);if(t!==ct)throw new Error(Ee[t]);if(this.header=new Mo,fe.inflateGetHeader(this.strm,this.header),n.dictionary&&(typeof n.dictionary=="string"?n.dictionary=ft.string2buf(n.dictionary):Ia.call(n.dictionary)==="[object ArrayBuffer]"&&(n.dictionary=new Uint8Array(n.dictionary)),n.raw&&(t=fe.inflateSetDictionary(this.strm,n.dictionary),t!==ct)))throw new Error(Ee[t])}bt.prototype.push=function(e,n){const t=this.strm,i=this.options.chunkSize,a=this.options.dictionary;let r,o,l;if(this.ended)return!1;for(n===~~n?o=n:o=n===!0?Fo:Uo,Ia.call(e)==="[object ArrayBuffer]"?t.input=new Uint8Array(e):t.input=e,t.next_in=0,t.avail_in=t.input.length;;){for(t.avail_out===0&&(t.output=new Uint8Array(i),t.next_out=0,t.avail_out=i),r=fe.inflate(t,o),r===nn&&a&&(r=fe.inflateSetDictionary(t,a),r===ct?r=fe.inflate(t,o):r===Ri&&(r=nn));t.avail_in>0&&r===tn&&t.state.wrap>0&&e[t.next_in]!==0;)fe.inflateReset(t),r=fe.inflate(t,o);switch(r){case Lo:case Ri:case nn:case Oo:return this.onEnd(r),this.ended=!0,!1}if(l=t.avail_out,t.next_out&&(t.avail_out===0||r===tn))if(this.options.to==="string"){let c=ft.utf8border(t.output,t.next_out),s=t.next_out-c,f=ft.buf2string(t.output,c);t.next_out=s,t.avail_out=i-s,s&&t.output.set(t.output.subarray(c,c+s),0),this.onData(f)}else this.onData(t.output.length===t.next_out?t.output:t.output.subarray(0,t.next_out));if(!(r===ct&&l===0)){if(r===tn)return r=fe.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,!0;if(t.avail_in===0)break}}return!0};bt.prototype.onData=function(e){this.chunks.push(e)};bt.prototype.onEnd=function(e){e===ct&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=Bt.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};function Rn(e,n){const t=new bt(n);if(t.push(e),t.err)throw t.msg||Ee[t.err];return t.result}function Bo(e,n){return n=n||{},n.raw=!0,Rn(e,n)}var Ho=bt,Po=Rn,Xo=Bo,Yo=Rn,$o=ze,Go={Inflate:Ho,inflate:Po,inflateRaw:Xo,ungzip:Yo,constants:$o};const{Deflate:Ko,deflate:Wo,deflateRaw:jo,gzip:Vo}=Ql,{Inflate:qo,inflate:Jo,inflateRaw:Qo,ungzip:es}=Go;var ts=Ko,ns=Wo,is=jo,as=Vo,rs=qo,ls=Jo,os=Qo,ss=es,fs=ze,Di={Deflate:ts,deflate:ns,deflateRaw:is,gzip:as,Inflate:rs,inflate:ls,inflateRaw:os,ungzip:ss,constants:fs};class Zi{constructor(n){T(this,"buffer");T(this,"bytePointer",0);T(this,"bitPointer",0);this.buffer=typeof n=="number"?new ArrayBuffer(n):"buffer"in n?n.buffer:n}get view(){return new DataView(this.buffer)}skipBits(n){this.bitPointer+=n,this.bytePointer+=Math.floor(this.bitPointer/8),this.bitPointer%=8}final(){return this.buffer.slice(0,this.bitPointer==0?this.bytePointer:this.bytePointer+1)}readBit(){const t=(this.view.getUint8(this.bytePointer)>>this.bitPointer&1)!=0;return this.skipBits(1),t}readBits(n){let t=0;for(let i=0;i<n;i++)t|=(this.readBit()?1:0)<<i;return t}writeBit(n){let t=this.view.getUint8(this.bytePointer);n?t|=1<<this.bitPointer:t&=1<<this.bitPointer^255,this.view.setUint8(this.bytePointer,t),this.skipBits(1)}writeBits(n,t){for(let i=0;i<n;i++)this.writeBit((t&1)!=0),t>>=1}}const K=64;class Dn extends Lt{constructor(t,i,a){const r=ye(t.tileSeed,i,a,0)>.625;super(t,i,a,r);T(this,"type","chocolate")}save(t){t.writeBits(2,this.state)}static load(t,i,a,r){const o=new Dn(t,i,a);switch(r.readBits(2)){case G.Covered:break;case G.Flagged:o.flag();break;case G.Revealed:o.reveal();break}return o}}class Zn extends Lt{constructor(t,i,a){const{isDark:r,isMine:o}=Ji(t,3,i,a);super(t,i,a,o);T(this,"type","stroopwafel");T(this,"isDark");this.isDark=r}save(t){t.writeBits(2,this.state)}static load(t,i,a,r){const o=new Zn(t,i,a);switch(r.readBits(2)){case G.Covered:break;case G.Flagged:o.flag();break;case G.Revealed:o.reveal();break}return o}}class Cn extends Lt{constructor(t,i,a){const r=ye(t.tileSeed,i,a,0)>.875;super(t,i,a,r);T(this,"type","vanilla")}save(t){t.writeBits(2,this.state)}static load(t,i,a,r){const o=new Cn(t,i,a);switch(r.readBits(2)){case G.Covered:break;case G.Flagged:o.flag();break;case G.Revealed:o.reveal();break}return o}}const cs={type:"collection",weight:1,scale:24,smoothness:.8,biomes:[{type:"collection",weight:5,scale:24,smoothness:.8,biomes:[{type:"biome",weight:3,tile:Cn},{type:"biome",weight:1,tile:Dn}]},{type:"collection",weight:2,scale:64,smoothness:0,biomes:[{type:"biome",weight:1,tile:xn},{type:"biome",weight:2,tile:Zn}]}]};function hs(e,n,t,i,a){const r=kn(e,!1),o=Pn(r(),n,t)*i,l=Pn(r(),n,t)*i;return sr(r(),n+o,t+l,a)}function Na(e,n,t){const i=kn(e.biomeSeed,!1);let a=cs;for(;a.type=="collection";){const r=hs(i(),n/a.scale,t/a.scale,a.smoothness,a.biomes.map(o=>o.weight));a=a.biomes[r]}return a.tile}function ds(e,n,t){const i=Na(e,n,t);return new i(e,n,t)}class Ma{constructor(n,t,i){T(this,"world");T(this,"chunkX");T(this,"chunkY");this.world=n,this.chunkX=t,this.chunkY=i}isGenerated(){return this instanceof ht}generate(){if(this.isGenerated())throw new Error("Cannot generate an already generated chunk.");console.log(`Generating new chunk: ${this.chunkX}, ${this.chunkY}`);const n=[];for(let t=0;t<K;t++)for(let i=0;i<K;i++){const a=this.world.generateTile(this.chunkX*K+i,this.chunkY*K+t);n.push(a)}return new ht(this.world,this.chunkX,this.chunkY,n)}}class ht extends Ma{constructor(t,i,a,r){super(t,i,a);T(this,"tiles");if(this.tiles=r,this.tiles.length!=K*K)throw new Error("GeneratedChunk incorrect tiles length.")}getTileAbsolute(t,i){return this.getTile(t-this.chunkX*K,i-this.chunkY*K)}getTile(t,i){return this.tiles[t+i*K]}save(){const t=new Zi(2048);for(const i of this.tiles)i.save(t);return Di.deflate(t.final()).buffer}static load(t,i,a,r){const o=new Zi(Di.inflate(r));let l=[];for(let c=0;c<K;c++)for(let s=0;s<K;s++){const f=i*K+s,g=a*K+c,h=Na(t,f,g).load(t,f,g,o);l.push(h)}return new ht(t,i,a,l)}}const Ua="3.7.7",_s=Ua,je=typeof Buffer=="function",Ci=typeof TextDecoder=="function"?new TextDecoder:void 0,Ii=typeof TextEncoder=="function"?new TextEncoder:void 0,us="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",Qe=Array.prototype.slice.call(us),Et=(e=>{let n={};return e.forEach((t,i)=>n[t]=i),n})(Qe),bs=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,Y=String.fromCharCode.bind(String),Ni=typeof Uint8Array.from=="function"?Uint8Array.from.bind(Uint8Array):e=>new Uint8Array(Array.prototype.slice.call(e,0)),Fa=e=>e.replace(/=/g,"").replace(/[+\/]/g,n=>n=="+"?"-":"_"),La=e=>e.replace(/[^A-Za-z0-9\+\/]/g,""),Oa=e=>{let n,t,i,a,r="";const o=e.length%3;for(let l=0;l<e.length;){if((t=e.charCodeAt(l++))>255||(i=e.charCodeAt(l++))>255||(a=e.charCodeAt(l++))>255)throw new TypeError("invalid character found");n=t<<16|i<<8|a,r+=Qe[n>>18&63]+Qe[n>>12&63]+Qe[n>>6&63]+Qe[n&63]}return o?r.slice(0,o-3)+"===".substring(o):r},In=typeof btoa=="function"?e=>btoa(e):je?e=>Buffer.from(e,"binary").toString("base64"):Oa,wn=je?e=>Buffer.from(e).toString("base64"):e=>{let t=[];for(let i=0,a=e.length;i<a;i+=4096)t.push(Y.apply(null,e.subarray(i,i+4096)));return In(t.join(""))},St=(e,n=!1)=>n?Fa(wn(e)):wn(e),gs=e=>{if(e.length<2){var n=e.charCodeAt(0);return n<128?e:n<2048?Y(192|n>>>6)+Y(128|n&63):Y(224|n>>>12&15)+Y(128|n>>>6&63)+Y(128|n&63)}else{var n=65536+(e.charCodeAt(0)-55296)*1024+(e.charCodeAt(1)-56320);return Y(240|n>>>18&7)+Y(128|n>>>12&63)+Y(128|n>>>6&63)+Y(128|n&63)}},ws=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,Ba=e=>e.replace(ws,gs),Mi=je?e=>Buffer.from(e,"utf8").toString("base64"):Ii?e=>wn(Ii.encode(e)):e=>In(Ba(e)),Me=(e,n=!1)=>n?Fa(Mi(e)):Mi(e),Ui=e=>Me(e,!0),ms=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,ps=e=>{switch(e.length){case 4:var n=(7&e.charCodeAt(0))<<18|(63&e.charCodeAt(1))<<12|(63&e.charCodeAt(2))<<6|63&e.charCodeAt(3),t=n-65536;return Y((t>>>10)+55296)+Y((t&1023)+56320);case 3:return Y((15&e.charCodeAt(0))<<12|(63&e.charCodeAt(1))<<6|63&e.charCodeAt(2));default:return Y((31&e.charCodeAt(0))<<6|63&e.charCodeAt(1))}},Ha=e=>e.replace(ms,ps),Pa=e=>{if(e=e.replace(/\s+/g,""),!bs.test(e))throw new TypeError("malformed base64.");e+="==".slice(2-(e.length&3));let n,t="",i,a;for(let r=0;r<e.length;)n=Et[e.charAt(r++)]<<18|Et[e.charAt(r++)]<<12|(i=Et[e.charAt(r++)])<<6|(a=Et[e.charAt(r++)]),t+=i===64?Y(n>>16&255):a===64?Y(n>>16&255,n>>8&255):Y(n>>16&255,n>>8&255,n&255);return t},Nn=typeof atob=="function"?e=>atob(La(e)):je?e=>Buffer.from(e,"base64").toString("binary"):Pa,Xa=je?e=>Ni(Buffer.from(e,"base64")):e=>Ni(Nn(e).split("").map(n=>n.charCodeAt(0))),Ya=e=>Xa($a(e)),vs=je?e=>Buffer.from(e,"base64").toString("utf8"):Ci?e=>Ci.decode(Xa(e)):e=>Ha(Nn(e)),$a=e=>La(e.replace(/[-_]/g,n=>n=="-"?"+":"/")),mn=e=>vs($a(e)),ks=e=>{if(typeof e!="string")return!1;const n=e.replace(/\s+/g,"").replace(/={0,2}$/,"");return!/[^\s0-9a-zA-Z\+/]/.test(n)||!/[^\s0-9a-zA-Z\-_]/.test(n)},Ga=e=>({value:e,enumerable:!1,writable:!0,configurable:!0}),Ka=function(){const e=(n,t)=>Object.defineProperty(String.prototype,n,Ga(t));e("fromBase64",function(){return mn(this)}),e("toBase64",function(n){return Me(this,n)}),e("toBase64URI",function(){return Me(this,!0)}),e("toBase64URL",function(){return Me(this,!0)}),e("toUint8Array",function(){return Ya(this)})},Wa=function(){const e=(n,t)=>Object.defineProperty(Uint8Array.prototype,n,Ga(t));e("toBase64",function(n){return St(this,n)}),e("toBase64URI",function(){return St(this,!0)}),e("toBase64URL",function(){return St(this,!0)})},xs=()=>{Ka(),Wa()},Fi={version:Ua,VERSION:_s,atob:Nn,atobPolyfill:Pa,btoa:In,btoaPolyfill:Oa,fromBase64:mn,toBase64:Me,encode:Me,encodeURI:Ui,encodeURL:Ui,utob:Ba,btou:Ha,decode:mn,isValid:ks,fromUint8Array:St,toUint8Array:Ya,extendString:Ka,extendUint8Array:Wa,extendBuiltins:xs};function*ys(e,n){let t=e,i=n,a=1,r=1;for(;;){for(;2*t*a<r;)yield{x:t,y:i},t+=a;for(;2*i*a<r;)yield{x:t,y:i},i+=a;a=-1*a,r+=1}}class Pt{constructor(n){T(this,"seed");T(this,"tileSeed");T(this,"biomeSeed");T(this,"chunks",{});this.seed=n;const t=kn(this.seed,!1);this.tileSeed=t(),this.biomeSeed=t()}generateTile(n,t){return ds(this,n,t)}getChunk(n,t){const i=this.chunks[`${n},${t}`];return i||new Ma(this,n,t)}getGeneratedChunk(n,t){const i=this.getChunk(n,t);if(i.isGenerated())return i;const a=i.generate();return this.chunks[`${n},${t}`]=a,a}getTile(n,t){const i=Math.floor(n/K),a=Math.floor(t/K);return this.getGeneratedChunk(i,a).getTileAbsolute(n,t)}flag(n,t){return this.getTile(n,t).flag()}reveal(n,t,i=!0){const a=this.getTile(n,t);if(a.reveal(),a.numMines()>0)return!0;if(a.minesNearby()>0)if(i){let l=!1;if(a.flagsNearby()==a.minesNearby())for(const c of a.searchPattern)this.reveal(a.x+c.x,a.y+c.y,!1)&&(l=!0);return l}else return!1;let r=[],o=[a];for(;o.length>0;){const l=o.pop();r.push(l);for(const c of l.searchPattern){const s=this.getTile(l.x+c.x,l.y+c.y);o.some(f=>f.x==s.x&&f.y==s.y)||r.some(f=>f.x==s.x&&f.y==s.y)||(s.minesNearby()==0?o.push(s):r.push(s))}}return r.forEach(l=>l.reveal()),!1}closest0(n,t){for(const{x:i,y:a}of ys(n,t)){const r=this.getTile(i,a);if(r.numMines()==0&&r.minesNearby()==0)return{x:i,y:a}}throw new Error("This error should never happen, it's just here to make TypeScript happy.")}save(){const n={seed:this.seed,chunks:{}};for(const t in this.chunks){const i=t,r=this.chunks[i].save();n.chunks[i]=Fi.fromUint8Array(new Uint8Array(r))}return n}static load(n){const t=new Pt(n.seed);for(const i in n.chunks){const a=i,r=n.chunks[a],o=Fi.toUint8Array(r).buffer,[l,c,s]=a.match(/^(-?\d+),(-?\d+)$/),[f,g]=[parseInt(c),parseInt(s)];t.chunks[a]=ht.load(t,f,g,o)}return t}}/**
 * @license lucide-svelte v0.372.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Es={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":2,"stroke-linecap":"round","stroke-linejoin":"round"},Li=Es;function Oi(e,n,t){const i=e.slice();return i[10]=n[t][0],i[11]=n[t][1],i}function an(e){let n,t=[e[11]],i={};for(let a=0;a<t.length;a+=1)i=le(i,t[a]);return{c(){n=Wi(e[10]),this.h()},l(a){n=ji(a,e[10],{}),U(n).forEach(z),this.h()},h(){Tt(n,i)},m(a,r){J(a,n,r)},p(a,r){Tt(n,i=Ft(t,[r&32&&a[11]]))},d(a){a&&z(n)}}}function Bi(e){let n=e[10],t,i=e[10]&&an(e);return{c(){i&&i.c(),t=Ue()},l(a){i&&i.l(a),t=Ue()},m(a,r){i&&i.m(a,r),J(a,t,r)},p(a,r){a[10]?n?Te(n,a[10])?(i.d(1),i=an(a),n=a[10],i.c(),i.m(t.parentNode,t)):i.p(a,r):(i=an(a),n=a[10],i.c(),i.m(t.parentNode,t)):n&&(i.d(1),i=null,n=a[10])},d(a){a&&z(t),i&&i.d(a)}}}function As(e){let n,t,i,a,r,o=Hn(e[5]),l=[];for(let d=0;d<o.length;d+=1)l[d]=Bi(Oi(e,o,d));const c=e[9].default,s=It(c,e,e[8],null);let f=[Li,e[6],{width:e[2]},{height:e[2]},{stroke:e[1]},{"stroke-width":i=e[4]?Number(e[3])*24/Number(e[2]):e[3]},{class:a=`lucide-icon lucide lucide-${e[0]} ${e[7].class??""}`}],g={};for(let d=0;d<f.length;d+=1)g=le(g,f[d]);return{c(){n=Wi("svg");for(let d=0;d<l.length;d+=1)l[d].c();t=Ue(),s&&s.c(),this.h()},l(d){n=ji(d,"svg",{width:!0,height:!0,stroke:!0,"stroke-width":!0,class:!0});var h=U(n);for(let _=0;_<l.length;_+=1)l[_].l(h);t=Ue(),s&&s.l(h),h.forEach(z),this.h()},h(){Tt(n,g)},m(d,h){J(d,n,h);for(let _=0;_<l.length;_+=1)l[_]&&l[_].m(n,null);I(n,t),s&&s.m(n,null),r=!0},p(d,[h]){if(h&32){o=Hn(d[5]);let _;for(_=0;_<o.length;_+=1){const m=Oi(d,o,_);l[_]?l[_].p(m,h):(l[_]=Bi(m),l[_].c(),l[_].m(n,t))}for(;_<l.length;_+=1)l[_].d(1);l.length=o.length}s&&s.p&&(!r||h&256)&&Nt(s,c,d,d[8],r?Ut(c,d[8],h,null):Mt(d[8]),null),Tt(n,g=Ft(f,[Li,h&64&&d[6],(!r||h&4)&&{width:d[2]},(!r||h&4)&&{height:d[2]},(!r||h&2)&&{stroke:d[1]},(!r||h&28&&i!==(i=d[4]?Number(d[3])*24/Number(d[2]):d[3]))&&{"stroke-width":i},(!r||h&129&&a!==(a=`lucide-icon lucide lucide-${d[0]} ${d[7].class??""}`))&&{class:a}]))},i(d){r||(B(s,d),r=!0)},o(d){$(s,d),r=!1},d(d){d&&z(n),Ja(l,d),s&&s.d(d)}}}function Ss(e,n,t){const i=["name","color","size","strokeWidth","absoluteStrokeWidth","iconNode"];let a=Bn(n,i),{$$slots:r={},$$scope:o}=n,{name:l}=n,{color:c="currentColor"}=n,{size:s=24}=n,{strokeWidth:f=2}=n,{absoluteStrokeWidth:g=!1}=n,{iconNode:d}=n;return e.$$set=h=>{t(7,n=le(le({},n),Fe(h))),t(6,a=Bn(n,i)),"name"in h&&t(0,l=h.name),"color"in h&&t(1,c=h.color),"size"in h&&t(2,s=h.size),"strokeWidth"in h&&t(3,f=h.strokeWidth),"absoluteStrokeWidth"in h&&t(4,g=h.absoluteStrokeWidth),"iconNode"in h&&t(5,d=h.iconNode),"$$scope"in h&&t(8,o=h.$$scope)},n=Fe(n),[l,c,s,f,g,d,a,n,o,r]}class ja extends Ye{constructor(n){super(),$e(this,n,Ss,As,Te,{name:0,color:1,size:2,strokeWidth:3,absoluteStrokeWidth:4,iconNode:5})}}function Ts(e){let n;const t=e[2].default,i=It(t,e,e[3],null);return{c(){i&&i.c()},l(a){i&&i.l(a)},m(a,r){i&&i.m(a,r),n=!0},p(a,r){i&&i.p&&(!n||r&8)&&Nt(i,t,a,a[3],n?Ut(t,a[3],r,null):Mt(a[3]),null)},i(a){n||(B(i,a),n=!0)},o(a){$(i,a),n=!1},d(a){i&&i.d(a)}}}function zs(e){let n,t;const i=[{name:"info"},e[1],{iconNode:e[0]}];let a={$$slots:{default:[Ts]},$$scope:{ctx:e}};for(let r=0;r<i.length;r+=1)a=le(a,i[r]);return n=new ja({props:a}),{c(){Le(n.$$.fragment)},l(r){Oe(n.$$.fragment,r)},m(r,o){Be(n,r,o),t=!0},p(r,[o]){const l=o&3?Ft(i,[i[0],o&2&&qi(r[1]),o&1&&{iconNode:r[0]}]):{};o&8&&(l.$$scope={dirty:o,ctx:r}),n.$set(l)},i(r){t||(B(n.$$.fragment,r),t=!0)},o(r){$(n.$$.fragment,r),t=!1},d(r){He(n,r)}}}function Rs(e,n,t){let{$$slots:i={},$$scope:a}=n;const r=[["circle",{cx:"12",cy:"12",r:"10"}],["path",{d:"M12 16v-4"}],["path",{d:"M12 8h.01"}]];return e.$$set=o=>{t(1,n=le(le({},n),Fe(o))),"$$scope"in o&&t(3,a=o.$$scope)},n=Fe(n),[r,n,i,a]}class Ds extends Ye{constructor(n){super(),$e(this,n,Rs,zs,Te,{})}}function Zs(e){let n;const t=e[2].default,i=It(t,e,e[3],null);return{c(){i&&i.c()},l(a){i&&i.l(a)},m(a,r){i&&i.m(a,r),n=!0},p(a,r){i&&i.p&&(!n||r&8)&&Nt(i,t,a,a[3],n?Ut(t,a[3],r,null):Mt(a[3]),null)},i(a){n||(B(i,a),n=!0)},o(a){$(i,a),n=!1},d(a){i&&i.d(a)}}}function Cs(e){let n,t;const i=[{name:"x"},e[1],{iconNode:e[0]}];let a={$$slots:{default:[Zs]},$$scope:{ctx:e}};for(let r=0;r<i.length;r+=1)a=le(a,i[r]);return n=new ja({props:a}),{c(){Le(n.$$.fragment)},l(r){Oe(n.$$.fragment,r)},m(r,o){Be(n,r,o),t=!0},p(r,[o]){const l=o&3?Ft(i,[i[0],o&2&&qi(r[1]),o&1&&{iconNode:r[0]}]):{};o&8&&(l.$$scope={dirty:o,ctx:r}),n.$set(l)},i(r){t||(B(n.$$.fragment,r),t=!0)},o(r){$(n.$$.fragment,r),t=!1},d(r){He(n,r)}}}function Is(e,n,t){let{$$slots:i={},$$scope:a}=n;const r=[["path",{d:"M18 6 6 18"}],["path",{d:"m6 6 12 12"}]];return e.$$set=o=>{t(1,n=le(le({},n),Fe(o))),"$$scope"in o&&t(3,a=o.$$scope)},n=Fe(n),[r,n,i,a]}class Ns extends Ye{constructor(n){super(),$e(this,n,Is,Cs,Te,{})}}function Hi(e){let n,t,i,a,r,o,l,c,s,f,g,d,h=e[2]&&Pi(e),_=e[2]&&Xi(e);const m=e[4].default,v=It(m,e,e[3],null);return{c(){n=F("div"),t=F("div"),i=F("div"),h&&h.c(),a=ce(),r=F("div"),o=F("div"),l=F("span"),c=me(e[1]),s=ce(),_&&_.c(),f=ce(),g=F("div"),v&&v.c(),this.h()},l(w){n=L(w,"DIV",{class:!0});var y=U(n);t=L(y,"DIV",{class:!0});var E=U(t);i=L(E,"DIV",{class:!0});var b=U(i);h&&h.l(b),b.forEach(z),a=he(E),r=L(E,"DIV",{class:!0});var A=U(r);o=L(A,"DIV",{class:!0});var R=U(o);l=L(R,"SPAN",{});var p=U(l);c=pe(p,e[1]),p.forEach(z),s=he(R),_&&_.l(R),R.forEach(z),f=he(A),g=L(A,"DIV",{class:!0});var S=U(g);v&&v.l(S),S.forEach(z),A.forEach(z),E.forEach(z),y.forEach(z),this.h()},h(){O(i,"class","absolute top-0 left-0 w-full h-full bg-black bg-opacity-50"),O(o,"class","border-zinc-800 border-b-2 px-2 py-1 text-white font-semibold flex justify-between items-center gap-4"),O(g,"class","px-2 py-1"),O(r,"class","z-20 border-zinc-800 border-2 bg-zinc-900"),O(t,"class","relative w-full h-full flex justify-center items-center"),O(n,"class","z-50 fixed top-0 left-0 w-screen h-screen")},m(w,y){J(w,n,y),I(n,t),I(t,i),h&&h.m(i,null),I(t,a),I(t,r),I(r,o),I(o,l),I(l,c),I(o,s),_&&_.m(o,null),I(r,f),I(r,g),v&&v.m(g,null),d=!0},p(w,y){w[2]?h?h.p(w,y):(h=Pi(w),h.c(),h.m(i,null)):h&&(h.d(1),h=null),(!d||y&2)&&zt(c,w[1]),w[2]?_?(_.p(w,y),y&4&&B(_,1)):(_=Xi(w),_.c(),B(_,1),_.m(o,null)):_&&(pn(),$(_,1,1,()=>{_=null}),vn()),v&&v.p&&(!d||y&8)&&Nt(v,m,w,w[3],d?Ut(m,w[3],y,null):Mt(w[3]),null)},i(w){d||(B(_),B(v,w),d=!0)},o(w){$(_),$(v,w),d=!1},d(w){w&&z(n),h&&h.d(),_&&_.d(),v&&v.d(w)}}}function Pi(e){let n,t,i,a;return{c(){n=F("button"),this.h()},l(r){n=L(r,"BUTTON",{class:!0,title:!0}),U(n).forEach(z),this.h()},h(){O(n,"class","absolute top-0 left-0 w-full h-full"),O(n,"title",t="Close "+e[1])},m(r,o){J(r,n,o),i||(a=te(n,"click",e[5]),i=!0)},p(r,o){o&2&&t!==(t="Close "+r[1])&&O(n,"title",t)},d(r){r&&z(n),i=!1,a()}}}function Xi(e){let n,t,i,a,r,o;return t=new Ns({}),{c(){n=F("button"),Le(t.$$.fragment),this.h()},l(l){n=L(l,"BUTTON",{class:!0,title:!0});var c=U(n);Oe(t.$$.fragment,c),c.forEach(z),this.h()},h(){O(n,"class","float-right"),O(n,"title",i="Close "+e[1])},m(l,c){J(l,n,c),Be(t,n,null),a=!0,r||(o=te(n,"click",e[6]),r=!0)},p(l,c){(!a||c&2&&i!==(i="Close "+l[1]))&&O(n,"title",i)},i(l){a||(B(t.$$.fragment,l),a=!0)},o(l){$(t.$$.fragment,l),a=!1},d(l){l&&z(n),He(t),r=!1,o()}}}function Ms(e){let n,t,i=e[0]&&Hi(e);return{c(){i&&i.c(),n=Ue()},l(a){i&&i.l(a),n=Ue()},m(a,r){i&&i.m(a,r),J(a,n,r),t=!0},p(a,[r]){a[0]?i?(i.p(a,r),r&1&&B(i,1)):(i=Hi(a),i.c(),B(i,1),i.m(n.parentNode,n)):i&&(pn(),$(i,1,1,()=>{i=null}),vn())},i(a){t||(B(i),t=!0)},o(a){$(i),t=!1},d(a){a&&z(n),i&&i.d(a)}}}function Us(e,n,t){let{$$slots:i={},$$scope:a}=n,{visible:r=!1}=n,{title:o}=n,{closable:l=!0}=n;const c=()=>t(0,r=!1),s=()=>t(0,r=!1);return e.$$set=f=>{"visible"in f&&t(0,r=f.visible),"title"in f&&t(1,o=f.title),"closable"in f&&t(2,l=f.closable),"$$scope"in f&&t(3,a=f.$$scope)},[r,o,l,a,i,c,s]}class Fs extends Ye{constructor(n){super(),$e(this,n,Us,Ms,Te,{visible:0,title:1,closable:2})}}function Yi(e,n){console.log("Loaded new world"),n&&localStorage.setItem(e,"PLACEHOLDER");const t=new Pt(Math.floor(Math.random()*4294967295)),i=t.closest0(0,0);return t.reveal(i.x,i.y),t}function Ls(e){const n=localStorage.getItem(e);if(n){console.log("Loaded saved world");try{const t=JSON.parse(n);return Pt.load(t)}catch(t){return console.error("Failed to load world."),console.error(t),Yi(e,!1)}}else return Yi(e,!0)}function $i(e,n){localStorage.getItem(e)!==null&&(console.log("Save world"),localStorage.setItem(e,JSON.stringify(n.save())))}const Os=(e,n)=>{const t=new ResizeObserver(()=>{n(e.clientWidth,e.clientHeight)});return t.observe(e),{destroy(){t.unobserve(e),t.disconnect()}}};function Bs(e){let n,t,i,a;return{c(){n=F("canvas"),this.h()},l(r){n=L(r,"CANVAS",{class:!0}),U(n).forEach(z),this.h()},h(){O(n,"class","w-full h-full cursor-pointer")},m(r,o){J(r,n,o),e[12](n),i||(a=[te(window,"keydown",e[9]),te(window,"keyup",e[10]),te(window,"beforeunload",e[11]),Qa(t=Os.call(null,n,e[13])),te(n,"mousedown",e[14]),te(n,"mouseup",e[15]),te(n,"mousemove",e[16]),te(n,"wheel",e[17],{passive:!0}),te(n,"contextmenu",Hs)],i=!0)},p(r,[o]){t&&er(t.update)&&o&60&&t.update.call(null,r[13])},i:rn,o:rn,d(r){r&&z(n),e[12](null),i=!1,tr(a)}}}const Hs=e=>{e.preventDefault()};function Ps(e,n,t){const i=nr();let{saveSlot:a}=n,{debugNumFrames:r=0}=n,{debugFrameTime:o=0}=n,l,c=!0,s,f,g=!1,d=-1;const h=()=>{if(cancelAnimationFrame(d),d=requestAnimationFrame(h),g){t(5,g=!1),t(7,r++,r);const u=performance.now();f.render(),t(8,o=performance.now()-u)}};let _=new Set,m=-1;Vi(async()=>{t(1,s=Ls(a)),t(2,f=new hr(s,l)),clearInterval(m),m=setInterval(()=>{let u=!1;_.has("[")&&f.cameraZoom!=f.cameraScale(1.04)&&(u=!0),_.has("]")&&f.cameraZoom!=f.cameraScale(.96)&&(u=!0),_.has("ArrowUp")&&(f.cameraTranslate(0,10),u=!0),_.has("ArrowDown")&&(f.cameraTranslate(0,-10),u=!0),_.has("ArrowLeft")&&(f.cameraTranslate(10,0),u=!0),_.has("ArrowRight")&&(f.cameraTranslate(-10,0),u=!0),u&&t(5,g=!0)},1e3/60),await f.init(),setTimeout(()=>{h()},100)}),ir(()=>{cancelAnimationFrame(d),clearInterval(m),$i(a,s)});const v=u=>{_.add(u.key)},w=u=>{_.delete(u.key)},y=()=>{$i(a,s)};function E(u){Rt[u?"unshift":"push"](()=>{l=u,t(3,l)})}const b=(u,k)=>{t(3,l.width=u,l),t(3,l.height=k,l),f.cameraScale(1),c&&(f.cameraTranslate(l.width/2,l.height/2),t(4,c=!1)),t(5,g=!0)},A=u=>{if(document.pointerLockElement!=l){if(u.button==1)l.requestPointerLock(),u.preventDefault();else if(u.button==0){u.preventDefault();const k=f.cameraPos(u.offsetX,u.offsetY);s.reveal(k.x,k.y),t(5,g=!0)}else if(u.button==2){u.preventDefault();const k=f.cameraPos(u.offsetX,u.offsetY);s.flag(k.x,k.y),t(5,g=!0)}}},R=u=>{document.pointerLockElement==l&&u.button==1&&document.exitPointerLock()},p=u=>{document.pointerLockElement==l&&(f.cameraTranslate(u.movementX,u.movementY),t(5,g=!0))},S=u=>{const k=u.deltaY>0?.9:1.1;f.cameraZoom!=f.cameraScale(k)&&t(5,g=!0)};return e.$$set=u=>{"saveSlot"in u&&t(0,a=u.saveSlot),"debugNumFrames"in u&&t(7,r=u.debugNumFrames),"debugFrameTime"in u&&t(8,o=u.debugFrameTime)},e.$$.update=()=>{e.$$.dirty&2&&s&&i("worldChange",s),e.$$.dirty&4&&f&&i("rendererChange",f)},[a,s,f,l,c,g,_,r,o,v,w,y,E,b,A,R,p,S]}class Xs extends Ye{constructor(n){super(),$e(this,n,Ps,Bs,Te,{saveSlot:0,debugNumFrames:7,debugFrameTime:8})}}function Gi(e){let n,t,i,a;function r(c){e[6](c)}function o(c){e[7](c)}let l={saveSlot:e[0]};return e[4]!==void 0&&(l.debugNumFrames=e[4]),e[5]!==void 0&&(l.debugFrameTime=e[5]),n=new Xs({props:l}),Rt.push(()=>on(n,"debugNumFrames",r)),Rt.push(()=>on(n,"debugFrameTime",o)),n.$on("worldChange",e[8]),n.$on("rendererChange",e[9]),{c(){Le(n.$$.fragment)},l(c){Oe(n.$$.fragment,c)},m(c,s){Be(n,c,s),a=!0},p(c,s){const f={};s&1&&(f.saveSlot=c[0]),!t&&s&16&&(t=!0,f.debugNumFrames=c[4],ln(()=>t=!1)),!i&&s&32&&(i=!0,f.debugFrameTime=c[5],ln(()=>i=!1)),n.$set(f)},i(c){a||(B(n.$$.fragment,c),a=!0)},o(c){$(n.$$.fragment,c),a=!1},d(c){He(n,c)}}}function Ki(e){let n,t,i=e[2].seed+"",a,r,o;return{c(){n=F("span"),t=me("Seed: "),a=me(i),r=ce(),o=F("br")},l(l){n=L(l,"SPAN",{});var c=U(n);t=pe(c,"Seed: "),a=pe(c,i),r=he(c),c.forEach(z),o=L(l,"BR",{})},m(l,c){J(l,n,c),I(n,t),I(n,a),I(n,r),J(l,o,c)},p(l,c){c&4&&i!==(i=l[2].seed+"")&&zt(a,i)},d(l){l&&(z(n),z(o))}}}function Ys(e){let n,t=`<h1 class="text-2xl"><a href="https://vulae.github.io/infinite-minesweeper">Infinite Minesweeper</a></h1> <h2 class="text-xl">CONTROLS</h2>
        Left Click: Reveal tile
        <br/>
        Right Click: Flag tile
        <br/>
        Middle Click / Arrow Keys: Move view
        <br/>
        Scroll Wheel: Zoom view
        <br/>
        Open Bracket &#39;[&#39;: Zoom In
        <br/>
        Close Bracket &#39;]&#39;: Zoom Out
        <br/>`;return{c(){n=F("span"),n.innerHTML=t,this.h()},l(i){n=L(i,"SPAN",{class:!0,"data-svelte-h":!0}),ar(n)!=="svelte-s5h82y"&&(n.innerHTML=t),this.h()},h(){O(n,"class","text-white font-semibold font-segoe")},m(i,a){J(i,n,a)},p:rn,d(i){i&&z(n)}}}function $s(e){let n,t,i,a,r,o,l,c,s,f,g,d,h,_,m,v,w,y=Math.round(e[5]*10)/10+"",E,b,A,R,p,S,u,k,x=e[0]&&Gi(e);c=new Ds({props:{size:32,strokeWidth:3}});let N=e[2]&&Ki(e);function gt(Z){e[11](Z)}let we={title:"Information",$$slots:{default:[Ys]},$$scope:{ctx:e}};return e[1]!==void 0&&(we.visible=e[1]),R=new Fs({props:we}),Rt.push(()=>on(R,"visible",gt)),{c(){n=F("div"),t=F("div"),x&&x.c(),i=ce(),a=F("div"),r=F("div"),o=F("div"),l=F("button"),Le(c.$$.fragment),s=ce(),f=F("div"),g=F("div"),d=F("div"),N&&N.c(),h=ce(),_=F("span"),m=me("Frame "),v=me(e[4]),w=ce(),E=me(y),b=me("ms"),A=ce(),Le(R.$$.fragment),this.h()},l(Z){n=L(Z,"DIV",{class:!0});var P=U(n);t=L(P,"DIV",{class:!0});var De=U(t);x&&x.l(De),De.forEach(z),i=he(P),a=L(P,"DIV",{class:!0});var Mn=U(a);r=L(Mn,"DIV",{class:!0});var wt=U(r);o=L(wt,"DIV",{class:!0});var Un=U(o);l=L(Un,"BUTTON",{class:!0});var Fn=U(l);Oe(c.$$.fragment,Fn),Fn.forEach(z),Un.forEach(z),s=he(wt),f=L(wt,"DIV",{class:!0});var Ln=U(f);g=L(Ln,"DIV",{class:!0});var On=U(g);d=L(On,"DIV",{class:!0});var mt=U(d);N&&N.l(mt),h=he(mt),_=L(mt,"SPAN",{});var Ze=U(_);m=pe(Ze,"Frame "),v=pe(Ze,e[4]),w=he(Ze),E=pe(Ze,y),b=pe(Ze,"ms"),Ze.forEach(z),mt.forEach(z),On.forEach(z),Ln.forEach(z),wt.forEach(z),Mn.forEach(z),P.forEach(z),A=he(Z),Oe(R.$$.fragment,Z),this.h()},h(){O(t,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1"),O(l,"class","text-blue-500 bg-zinc-800 outline outline-black outline-1 rounded-full w-min flex items-center justify-center"),O(o,"class","pointer-events-auto p-4 h-min"),O(d,"class","text-white font-bold"),O(g,"class","p-4 bg-zinc-800 bg-opacity-70 outline outline-zinc-600 rounded-lg"),O(f,"class","pointer-events-auto p-4 h-min"),O(r,"class","w-full h-full flex justify-between"),O(a,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1 pointer-events-none"),O(n,"class","w-screen h-screen grid grid-cols-1 grid-rows-1")},m(Z,P){J(Z,n,P),I(n,t),x&&x.m(t,null),I(n,i),I(n,a),I(a,r),I(r,o),I(o,l),Be(c,l,null),I(r,s),I(r,f),I(f,g),I(g,d),N&&N.m(d,null),I(d,h),I(d,_),I(_,m),I(_,v),I(_,w),I(_,E),I(_,b),J(Z,A,P),Be(R,Z,P),S=!0,u||(k=te(l,"click",e[10]),u=!0)},p(Z,[P]){Z[0]?x?(x.p(Z,P),P&1&&B(x,1)):(x=Gi(Z),x.c(),B(x,1),x.m(t,null)):x&&(pn(),$(x,1,1,()=>{x=null}),vn()),Z[2]?N?N.p(Z,P):(N=Ki(Z),N.c(),N.m(d,h)):N&&(N.d(1),N=null),(!S||P&16)&&zt(v,Z[4]),(!S||P&32)&&y!==(y=Math.round(Z[5]*10)/10+"")&&zt(E,y);const De={};P&4096&&(De.$$scope={dirty:P,ctx:Z}),!p&&P&2&&(p=!0,De.visible=Z[1],ln(()=>p=!1)),R.$set(De)},i(Z){S||(B(x),B(c.$$.fragment,Z),B(R.$$.fragment,Z),S=!0)},o(Z){$(x),$(c.$$.fragment,Z),$(R.$$.fragment,Z),S=!1},d(Z){Z&&(z(n),z(A)),x&&x.d(),He(c),N&&N.d(),He(R,Z),u=!1,k()}}}function Gs(e,n,t){let i=null;Vi(()=>{const m=new URL(location.href);t(0,i=m.searchParams.get("saveSlot")??"save")});let a=!0,r,o,l=0,c=0;function s(m){l=m,t(4,l)}function f(m){c=m,t(5,c)}const g=m=>t(2,r=m.detail),d=m=>t(3,o=m.detail),h=()=>t(1,a=!0);function _(m){a=m,t(1,a)}return[i,a,r,o,l,c,s,f,g,d,h,_]}class Vs extends Ye{constructor(n){super(),$e(this,n,Gs,$s,Te,{})}}export{Vs as component};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
