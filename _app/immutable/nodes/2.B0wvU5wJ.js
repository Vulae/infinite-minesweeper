var ul=Object.defineProperty;var fl=(t,n,e)=>n in t?ul(t,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[n]=e;var P=(t,n,e)=>(fl(t,typeof n!="symbol"?n+"":n,e),e);import{s as ve,N as Fe,e as R,c as L,b as Z,f as x,p as B,S as ls,T as Jt,i as X,U as be,V as hl,P as Ue,Q as ze,R as He,w as sn,W as ka,o as _i,X as mi,r as Re,l as Qe,Y as Ea,M as Pe,n as De,Z as Ta,z as Ia,k as zt,a as ae,g as oe,_ as he,K as Pa,L as Sa,$ as ui,h as $,a0 as Er,a1 as cs,a2 as Se,t as ut,d as ft,q as qe,j as ai,a3 as dl,a4 as us,B as _l,a5 as fs,a6 as ml,a7 as pl,a8 as yt}from"../chunks/scheduler.Cm_C_nGF.js";import{S as ye,i as ke,a as j,t as V,g as Cn,c as Dn,b as le,d as ce,m as ue,e as fe,f as kt}from"../chunks/index.De5vRBfx.js";function Qt(t){return(t==null?void 0:t.length)!==void 0?t:Array.from(t)}function _t(t,n){const e={},i={},r={$$scope:1};let s=t.length;for(;s--;){const a=t[s],o=n[s];if(o){for(const u in a)u in o||(i[u]=1);for(const u in o)r[u]||(e[u]=o[u],r[u]=1);t[s]=o}else for(const u in a)r[u]=1}for(const a in i)a in e||(e[a]=void 0);return e}function Mt(t){return typeof t=="object"&&t!==null?t:{}}const Q=64;function Tr(t,n){return()=>{t|=0,t=t+2654435769|0;let e=t^t>>>16;e=Math.imul(e,569420461),e=e^e>>>15,e=Math.imul(e,1935289751);const i=(e=e^e>>>15)>>>0;return n?i/4294967296:i}}function Be(t,n,e,i){n=n*2654435761&2147483647,e=e*2246822519&2147483647,i=i*3266489917&2147483647,t=t*668265263&2147483647;let r=n^e^i^t;return r=r*374761393+2654435769,r^=r<<13,r^=r>>17,r^=r<<5,(r>>>0)/4294967296}function gl(t,n){n*=t.reduce((e,i)=>e+i,0);for(let e=0;e<t.length;e++)if(n-=t[e],n<=0)return e;throw new Error("Invalid weights")}function bl(t,n,e,i){let r=1/0,s=-1;for(let a=Math.floor(n)-1;a<Math.ceil(n)+1;a++)for(let o=Math.floor(e)-1;o<Math.ceil(e)+1;o++){const u=a+Be(t,a,o,0)-.5,l=o+Be(t,a,o,1)-.5,f=(u-n)**2+(l-e)**2;f<r&&(r=f,s=gl(i,Be(t,a,o,2)))}if(s==-1)throw new Error("Voronoi noise error.");return s}function hs(t,n,e){function i(d,g,w){return(g-d)*((w*(w*6-15)+10)*w*w*w)+d}const r=(d,g)=>{const w=Be(t,d,g,0);return{x:Math.cos(w),y:Math.sin(w)}},s=(d,g,w,y)=>{const S=r(d,g),v=w-d,M=y-g;return v*S.x+M*S.y},a=Math.floor(n),o=a+1,u=Math.floor(e),l=u+1,f=n-a,p=e-u;return i(i(s(a,u,n,e),s(o,u,n,e),f),i(s(a,l,n,e),s(o,l,n,e),f),p)}var Zi=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function vl(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var ne={},pe={},mt={},an={},pt={},on={};const wl=4,ds=0,_s=1,yl=2;function ln(t){let n=t.length;for(;--n>=0;)t[n]=0}const kl=0,Aa=1,El=2,Tl=3,Il=258,Ir=29,Mn=256,Tn=Mn+1+Ir,Kt=30,Pr=19,xa=2*Tn+1,Lt=15,Vi=16,Pl=7,Sr=256,Na=16,Ca=17,Da=18,lr=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),oi=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),Sl=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),Ma=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),Al=512,Et=new Array((Tn+2)*2);ln(Et);const yn=new Array(Kt*2);ln(yn);const In=new Array(Al);ln(In);const Pn=new Array(Il-Tl+1);ln(Pn);const Ar=new Array(Ir);ln(Ar);const fi=new Array(Kt);ln(fi);function Yi(t,n,e,i,r){this.static_tree=t,this.extra_bits=n,this.extra_base=e,this.elems=i,this.max_length=r,this.has_stree=t&&t.length}let Oa,Ba,$a;function Xi(t,n){this.dyn_tree=t,this.max_code=0,this.stat_desc=n}const Ra=t=>t<256?In[t]:In[256+(t>>>7)],Sn=(t,n)=>{t.pending_buf[t.pending++]=n&255,t.pending_buf[t.pending++]=n>>>8&255},Le=(t,n,e)=>{t.bi_valid>Vi-e?(t.bi_buf|=n<<t.bi_valid&65535,Sn(t,t.bi_buf),t.bi_buf=n>>Vi-t.bi_valid,t.bi_valid+=e-Vi):(t.bi_buf|=n<<t.bi_valid&65535,t.bi_valid+=e)},ct=(t,n,e)=>{Le(t,e[n*2],e[n*2+1])},La=(t,n)=>{let e=0;do e|=t&1,t>>>=1,e<<=1;while(--n>0);return e>>>1},xl=t=>{t.bi_valid===16?(Sn(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=t.bi_buf&255,t.bi_buf>>=8,t.bi_valid-=8)},Nl=(t,n)=>{const e=n.dyn_tree,i=n.max_code,r=n.stat_desc.static_tree,s=n.stat_desc.has_stree,a=n.stat_desc.extra_bits,o=n.stat_desc.extra_base,u=n.stat_desc.max_length;let l,f,p,m,d,g,w=0;for(m=0;m<=Lt;m++)t.bl_count[m]=0;for(e[t.heap[t.heap_max]*2+1]=0,l=t.heap_max+1;l<xa;l++)f=t.heap[l],m=e[e[f*2+1]*2+1]+1,m>u&&(m=u,w++),e[f*2+1]=m,!(f>i)&&(t.bl_count[m]++,d=0,f>=o&&(d=a[f-o]),g=e[f*2],t.opt_len+=g*(m+d),s&&(t.static_len+=g*(r[f*2+1]+d)));if(w!==0){do{for(m=u-1;t.bl_count[m]===0;)m--;t.bl_count[m]--,t.bl_count[m+1]+=2,t.bl_count[u]--,w-=2}while(w>0);for(m=u;m!==0;m--)for(f=t.bl_count[m];f!==0;)p=t.heap[--l],!(p>i)&&(e[p*2+1]!==m&&(t.opt_len+=(m-e[p*2+1])*e[p*2],e[p*2+1]=m),f--)}},Fa=(t,n,e)=>{const i=new Array(Lt+1);let r=0,s,a;for(s=1;s<=Lt;s++)r=r+e[s-1]<<1,i[s]=r;for(a=0;a<=n;a++){let o=t[a*2+1];o!==0&&(t[a*2]=La(i[o]++,o))}},Cl=()=>{let t,n,e,i,r;const s=new Array(Lt+1);for(e=0,i=0;i<Ir-1;i++)for(Ar[i]=e,t=0;t<1<<lr[i];t++)Pn[e++]=i;for(Pn[e-1]=i,r=0,i=0;i<16;i++)for(fi[i]=r,t=0;t<1<<oi[i];t++)In[r++]=i;for(r>>=7;i<Kt;i++)for(fi[i]=r<<7,t=0;t<1<<oi[i]-7;t++)In[256+r++]=i;for(n=0;n<=Lt;n++)s[n]=0;for(t=0;t<=143;)Et[t*2+1]=8,t++,s[8]++;for(;t<=255;)Et[t*2+1]=9,t++,s[9]++;for(;t<=279;)Et[t*2+1]=7,t++,s[7]++;for(;t<=287;)Et[t*2+1]=8,t++,s[8]++;for(Fa(Et,Tn+1,s),t=0;t<Kt;t++)yn[t*2+1]=5,yn[t*2]=La(t,5);Oa=new Yi(Et,lr,Mn+1,Tn,Lt),Ba=new Yi(yn,oi,0,Kt,Lt),$a=new Yi(new Array(0),Sl,0,Pr,Pl)},Ua=t=>{let n;for(n=0;n<Tn;n++)t.dyn_ltree[n*2]=0;for(n=0;n<Kt;n++)t.dyn_dtree[n*2]=0;for(n=0;n<Pr;n++)t.bl_tree[n*2]=0;t.dyn_ltree[Sr*2]=1,t.opt_len=t.static_len=0,t.sym_next=t.matches=0},za=t=>{t.bi_valid>8?Sn(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0},ms=(t,n,e,i)=>{const r=n*2,s=e*2;return t[r]<t[s]||t[r]===t[s]&&i[n]<=i[e]},Wi=(t,n,e)=>{const i=t.heap[e];let r=e<<1;for(;r<=t.heap_len&&(r<t.heap_len&&ms(n,t.heap[r+1],t.heap[r],t.depth)&&r++,!ms(n,i,t.heap[r],t.depth));)t.heap[e]=t.heap[r],e=r,r<<=1;t.heap[e]=i},ps=(t,n,e)=>{let i,r,s=0,a,o;if(t.sym_next!==0)do i=t.pending_buf[t.sym_buf+s++]&255,i+=(t.pending_buf[t.sym_buf+s++]&255)<<8,r=t.pending_buf[t.sym_buf+s++],i===0?ct(t,r,n):(a=Pn[r],ct(t,a+Mn+1,n),o=lr[a],o!==0&&(r-=Ar[a],Le(t,r,o)),i--,a=Ra(i),ct(t,a,e),o=oi[a],o!==0&&(i-=fi[a],Le(t,i,o)));while(s<t.sym_next);ct(t,Sr,n)},cr=(t,n)=>{const e=n.dyn_tree,i=n.stat_desc.static_tree,r=n.stat_desc.has_stree,s=n.stat_desc.elems;let a,o,u=-1,l;for(t.heap_len=0,t.heap_max=xa,a=0;a<s;a++)e[a*2]!==0?(t.heap[++t.heap_len]=u=a,t.depth[a]=0):e[a*2+1]=0;for(;t.heap_len<2;)l=t.heap[++t.heap_len]=u<2?++u:0,e[l*2]=1,t.depth[l]=0,t.opt_len--,r&&(t.static_len-=i[l*2+1]);for(n.max_code=u,a=t.heap_len>>1;a>=1;a--)Wi(t,e,a);l=s;do a=t.heap[1],t.heap[1]=t.heap[t.heap_len--],Wi(t,e,1),o=t.heap[1],t.heap[--t.heap_max]=a,t.heap[--t.heap_max]=o,e[l*2]=e[a*2]+e[o*2],t.depth[l]=(t.depth[a]>=t.depth[o]?t.depth[a]:t.depth[o])+1,e[a*2+1]=e[o*2+1]=l,t.heap[1]=l++,Wi(t,e,1);while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],Nl(t,n),Fa(e,u,t.bl_count)},gs=(t,n,e)=>{let i,r=-1,s,a=n[0*2+1],o=0,u=7,l=4;for(a===0&&(u=138,l=3),n[(e+1)*2+1]=65535,i=0;i<=e;i++)s=a,a=n[(i+1)*2+1],!(++o<u&&s===a)&&(o<l?t.bl_tree[s*2]+=o:s!==0?(s!==r&&t.bl_tree[s*2]++,t.bl_tree[Na*2]++):o<=10?t.bl_tree[Ca*2]++:t.bl_tree[Da*2]++,o=0,r=s,a===0?(u=138,l=3):s===a?(u=6,l=3):(u=7,l=4))},bs=(t,n,e)=>{let i,r=-1,s,a=n[0*2+1],o=0,u=7,l=4;for(a===0&&(u=138,l=3),i=0;i<=e;i++)if(s=a,a=n[(i+1)*2+1],!(++o<u&&s===a)){if(o<l)do ct(t,s,t.bl_tree);while(--o!==0);else s!==0?(s!==r&&(ct(t,s,t.bl_tree),o--),ct(t,Na,t.bl_tree),Le(t,o-3,2)):o<=10?(ct(t,Ca,t.bl_tree),Le(t,o-3,3)):(ct(t,Da,t.bl_tree),Le(t,o-11,7));o=0,r=s,a===0?(u=138,l=3):s===a?(u=6,l=3):(u=7,l=4)}},Dl=t=>{let n;for(gs(t,t.dyn_ltree,t.l_desc.max_code),gs(t,t.dyn_dtree,t.d_desc.max_code),cr(t,t.bl_desc),n=Pr-1;n>=3&&t.bl_tree[Ma[n]*2+1]===0;n--);return t.opt_len+=3*(n+1)+5+5+4,n},Ml=(t,n,e,i)=>{let r;for(Le(t,n-257,5),Le(t,e-1,5),Le(t,i-4,4),r=0;r<i;r++)Le(t,t.bl_tree[Ma[r]*2+1],3);bs(t,t.dyn_ltree,n-1),bs(t,t.dyn_dtree,e-1)},Ol=t=>{let n=4093624447,e;for(e=0;e<=31;e++,n>>>=1)if(n&1&&t.dyn_ltree[e*2]!==0)return ds;if(t.dyn_ltree[9*2]!==0||t.dyn_ltree[10*2]!==0||t.dyn_ltree[13*2]!==0)return _s;for(e=32;e<Mn;e++)if(t.dyn_ltree[e*2]!==0)return _s;return ds};let vs=!1;const Bl=t=>{vs||(Cl(),vs=!0),t.l_desc=new Xi(t.dyn_ltree,Oa),t.d_desc=new Xi(t.dyn_dtree,Ba),t.bl_desc=new Xi(t.bl_tree,$a),t.bi_buf=0,t.bi_valid=0,Ua(t)},Ha=(t,n,e,i)=>{Le(t,(kl<<1)+(i?1:0),3),za(t),Sn(t,e),Sn(t,~e),e&&t.pending_buf.set(t.window.subarray(n,n+e),t.pending),t.pending+=e},$l=t=>{Le(t,Aa<<1,3),ct(t,Sr,Et),xl(t)},Rl=(t,n,e,i)=>{let r,s,a=0;t.level>0?(t.strm.data_type===yl&&(t.strm.data_type=Ol(t)),cr(t,t.l_desc),cr(t,t.d_desc),a=Dl(t),r=t.opt_len+3+7>>>3,s=t.static_len+3+7>>>3,s<=r&&(r=s)):r=s=e+5,e+4<=r&&n!==-1?Ha(t,n,e,i):t.strategy===wl||s===r?(Le(t,(Aa<<1)+(i?1:0),3),ps(t,Et,yn)):(Le(t,(El<<1)+(i?1:0),3),Ml(t,t.l_desc.max_code+1,t.d_desc.max_code+1,a+1),ps(t,t.dyn_ltree,t.dyn_dtree)),Ua(t),i&&za(t)},Ll=(t,n,e)=>(t.pending_buf[t.sym_buf+t.sym_next++]=n,t.pending_buf[t.sym_buf+t.sym_next++]=n>>8,t.pending_buf[t.sym_buf+t.sym_next++]=e,n===0?t.dyn_ltree[e*2]++:(t.matches++,n--,t.dyn_ltree[(Pn[e]+Mn+1)*2]++,t.dyn_dtree[Ra(n)*2]++),t.sym_next===t.sym_end);on._tr_init=Bl;on._tr_stored_block=Ha;on._tr_flush_block=Rl;on._tr_tally=Ll;on._tr_align=$l;const Fl=(t,n,e,i)=>{let r=t&65535|0,s=t>>>16&65535|0,a=0;for(;e!==0;){a=e>2e3?2e3:e,e-=a;do r=r+n[i++]|0,s=s+r|0;while(--a);r%=65521,s%=65521}return r|s<<16|0};var ja=Fl;const Ul=()=>{let t,n=[];for(var e=0;e<256;e++){t=e;for(var i=0;i<8;i++)t=t&1?3988292384^t>>>1:t>>>1;n[e]=t}return n},zl=new Uint32Array(Ul()),Hl=(t,n,e,i)=>{const r=zl,s=i+e;t^=-1;for(let a=i;a<s;a++)t=t>>>8^r[(t^n[a])&255];return t^-1};var Za=Hl,xr={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},Vt={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:jl,_tr_stored_block:ur,_tr_flush_block:Zl,_tr_tally:Nt,_tr_align:Vl}=on,Va=ja,St=Za,Yl=xr,{Z_NO_FLUSH:Ct,Z_PARTIAL_FLUSH:Xl,Z_FULL_FLUSH:Wl,Z_FINISH:Je,Z_BLOCK:ws,Z_OK:Ne,Z_STREAM_END:ys,Z_STREAM_ERROR:ht,Z_DATA_ERROR:Gl,Z_BUF_ERROR:Gi,Z_DEFAULT_COMPRESSION:Kl,Z_FILTERED:ql,Z_HUFFMAN_ONLY:qn,Z_RLE:Jl,Z_FIXED:Ql,Z_DEFAULT_STRATEGY:ec,Z_UNKNOWN:tc,Z_DEFLATED:pi}=Vt,nc=9,ic=15,rc=8,sc=29,ac=256,fr=ac+1+sc,oc=30,lc=19,cc=2*fr+1,uc=15,ee=3,xt=258,dt=xt+ee+1,fc=32,en=42,Nr=57,hr=69,dr=73,_r=91,mr=103,Ft=113,bn=666,$e=1,cn=2,Ht=3,un=4,hc=3,Ut=(t,n)=>(t.msg=Yl[n],n),ks=t=>t*2-(t>4?9:0),At=t=>{let n=t.length;for(;--n>=0;)t[n]=0},dc=t=>{let n,e,i,r=t.w_size;n=t.hash_size,i=n;do e=t.head[--i],t.head[i]=e>=r?e-r:0;while(--n);n=r,i=n;do e=t.prev[--i],t.prev[i]=e>=r?e-r:0;while(--n)};let _c=(t,n,e)=>(n<<t.hash_shift^e)&t.hash_mask,Dt=_c;const Ve=t=>{const n=t.state;let e=n.pending;e>t.avail_out&&(e=t.avail_out),e!==0&&(t.output.set(n.pending_buf.subarray(n.pending_out,n.pending_out+e),t.next_out),t.next_out+=e,n.pending_out+=e,t.total_out+=e,t.avail_out-=e,n.pending-=e,n.pending===0&&(n.pending_out=0))},Ye=(t,n)=>{Zl(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,n),t.block_start=t.strstart,Ve(t.strm)},se=(t,n)=>{t.pending_buf[t.pending++]=n},pn=(t,n)=>{t.pending_buf[t.pending++]=n>>>8&255,t.pending_buf[t.pending++]=n&255},pr=(t,n,e,i)=>{let r=t.avail_in;return r>i&&(r=i),r===0?0:(t.avail_in-=r,n.set(t.input.subarray(t.next_in,t.next_in+r),e),t.state.wrap===1?t.adler=Va(t.adler,n,r,e):t.state.wrap===2&&(t.adler=St(t.adler,n,r,e)),t.next_in+=r,t.total_in+=r,r)},Ya=(t,n)=>{let e=t.max_chain_length,i=t.strstart,r,s,a=t.prev_length,o=t.nice_match;const u=t.strstart>t.w_size-dt?t.strstart-(t.w_size-dt):0,l=t.window,f=t.w_mask,p=t.prev,m=t.strstart+xt;let d=l[i+a-1],g=l[i+a];t.prev_length>=t.good_match&&(e>>=2),o>t.lookahead&&(o=t.lookahead);do if(r=n,!(l[r+a]!==g||l[r+a-1]!==d||l[r]!==l[i]||l[++r]!==l[i+1])){i+=2,r++;do;while(l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&i<m);if(s=xt-(m-i),i=m-xt,s>a){if(t.match_start=n,a=s,s>=o)break;d=l[i+a-1],g=l[i+a]}}while((n=p[n&f])>u&&--e!==0);return a<=t.lookahead?a:t.lookahead},tn=t=>{const n=t.w_size;let e,i,r;do{if(i=t.window_size-t.lookahead-t.strstart,t.strstart>=n+(n-dt)&&(t.window.set(t.window.subarray(n,n+n-i),0),t.match_start-=n,t.strstart-=n,t.block_start-=n,t.insert>t.strstart&&(t.insert=t.strstart),dc(t),i+=n),t.strm.avail_in===0)break;if(e=pr(t.strm,t.window,t.strstart+t.lookahead,i),t.lookahead+=e,t.lookahead+t.insert>=ee)for(r=t.strstart-t.insert,t.ins_h=t.window[r],t.ins_h=Dt(t,t.ins_h,t.window[r+1]);t.insert&&(t.ins_h=Dt(t,t.ins_h,t.window[r+ee-1]),t.prev[r&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=r,r++,t.insert--,!(t.lookahead+t.insert<ee)););}while(t.lookahead<dt&&t.strm.avail_in!==0)},Xa=(t,n)=>{let e=t.pending_buf_size-5>t.w_size?t.w_size:t.pending_buf_size-5,i,r,s,a=0,o=t.strm.avail_in;do{if(i=65535,s=t.bi_valid+42>>3,t.strm.avail_out<s||(s=t.strm.avail_out-s,r=t.strstart-t.block_start,i>r+t.strm.avail_in&&(i=r+t.strm.avail_in),i>s&&(i=s),i<e&&(i===0&&n!==Je||n===Ct||i!==r+t.strm.avail_in)))break;a=n===Je&&i===r+t.strm.avail_in?1:0,ur(t,0,0,a),t.pending_buf[t.pending-4]=i,t.pending_buf[t.pending-3]=i>>8,t.pending_buf[t.pending-2]=~i,t.pending_buf[t.pending-1]=~i>>8,Ve(t.strm),r&&(r>i&&(r=i),t.strm.output.set(t.window.subarray(t.block_start,t.block_start+r),t.strm.next_out),t.strm.next_out+=r,t.strm.avail_out-=r,t.strm.total_out+=r,t.block_start+=r,i-=r),i&&(pr(t.strm,t.strm.output,t.strm.next_out,i),t.strm.next_out+=i,t.strm.avail_out-=i,t.strm.total_out+=i)}while(a===0);return o-=t.strm.avail_in,o&&(o>=t.w_size?(t.matches=2,t.window.set(t.strm.input.subarray(t.strm.next_in-t.w_size,t.strm.next_in),0),t.strstart=t.w_size,t.insert=t.strstart):(t.window_size-t.strstart<=o&&(t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,t.insert>t.strstart&&(t.insert=t.strstart)),t.window.set(t.strm.input.subarray(t.strm.next_in-o,t.strm.next_in),t.strstart),t.strstart+=o,t.insert+=o>t.w_size-t.insert?t.w_size-t.insert:o),t.block_start=t.strstart),t.high_water<t.strstart&&(t.high_water=t.strstart),a?un:n!==Ct&&n!==Je&&t.strm.avail_in===0&&t.strstart===t.block_start?cn:(s=t.window_size-t.strstart,t.strm.avail_in>s&&t.block_start>=t.w_size&&(t.block_start-=t.w_size,t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,s+=t.w_size,t.insert>t.strstart&&(t.insert=t.strstart)),s>t.strm.avail_in&&(s=t.strm.avail_in),s&&(pr(t.strm,t.window,t.strstart,s),t.strstart+=s,t.insert+=s>t.w_size-t.insert?t.w_size-t.insert:s),t.high_water<t.strstart&&(t.high_water=t.strstart),s=t.bi_valid+42>>3,s=t.pending_buf_size-s>65535?65535:t.pending_buf_size-s,e=s>t.w_size?t.w_size:s,r=t.strstart-t.block_start,(r>=e||(r||n===Je)&&n!==Ct&&t.strm.avail_in===0&&r<=s)&&(i=r>s?s:r,a=n===Je&&t.strm.avail_in===0&&i===r?1:0,ur(t,t.block_start,i,a),t.block_start+=i,Ve(t.strm)),a?Ht:$e)},Ki=(t,n)=>{let e,i;for(;;){if(t.lookahead<dt){if(tn(t),t.lookahead<dt&&n===Ct)return $e;if(t.lookahead===0)break}if(e=0,t.lookahead>=ee&&(t.ins_h=Dt(t,t.ins_h,t.window[t.strstart+ee-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),e!==0&&t.strstart-e<=t.w_size-dt&&(t.match_length=Ya(t,e)),t.match_length>=ee)if(i=Nt(t,t.strstart-t.match_start,t.match_length-ee),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=ee){t.match_length--;do t.strstart++,t.ins_h=Dt(t,t.ins_h,t.window[t.strstart+ee-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart;while(--t.match_length!==0);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=Dt(t,t.ins_h,t.window[t.strstart+1]);else i=Nt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(Ye(t,!1),t.strm.avail_out===0))return $e}return t.insert=t.strstart<ee-1?t.strstart:ee-1,n===Je?(Ye(t,!0),t.strm.avail_out===0?Ht:un):t.sym_next&&(Ye(t,!1),t.strm.avail_out===0)?$e:cn},Wt=(t,n)=>{let e,i,r;for(;;){if(t.lookahead<dt){if(tn(t),t.lookahead<dt&&n===Ct)return $e;if(t.lookahead===0)break}if(e=0,t.lookahead>=ee&&(t.ins_h=Dt(t,t.ins_h,t.window[t.strstart+ee-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=ee-1,e!==0&&t.prev_length<t.max_lazy_match&&t.strstart-e<=t.w_size-dt&&(t.match_length=Ya(t,e),t.match_length<=5&&(t.strategy===ql||t.match_length===ee&&t.strstart-t.match_start>4096)&&(t.match_length=ee-1)),t.prev_length>=ee&&t.match_length<=t.prev_length){r=t.strstart+t.lookahead-ee,i=Nt(t,t.strstart-1-t.prev_match,t.prev_length-ee),t.lookahead-=t.prev_length-1,t.prev_length-=2;do++t.strstart<=r&&(t.ins_h=Dt(t,t.ins_h,t.window[t.strstart+ee-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart);while(--t.prev_length!==0);if(t.match_available=0,t.match_length=ee-1,t.strstart++,i&&(Ye(t,!1),t.strm.avail_out===0))return $e}else if(t.match_available){if(i=Nt(t,0,t.window[t.strstart-1]),i&&Ye(t,!1),t.strstart++,t.lookahead--,t.strm.avail_out===0)return $e}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=Nt(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<ee-1?t.strstart:ee-1,n===Je?(Ye(t,!0),t.strm.avail_out===0?Ht:un):t.sym_next&&(Ye(t,!1),t.strm.avail_out===0)?$e:cn},mc=(t,n)=>{let e,i,r,s;const a=t.window;for(;;){if(t.lookahead<=xt){if(tn(t),t.lookahead<=xt&&n===Ct)return $e;if(t.lookahead===0)break}if(t.match_length=0,t.lookahead>=ee&&t.strstart>0&&(r=t.strstart-1,i=a[r],i===a[++r]&&i===a[++r]&&i===a[++r])){s=t.strstart+xt;do;while(i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&r<s);t.match_length=xt-(s-r),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=ee?(e=Nt(t,1,t.match_length-ee),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(e=Nt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),e&&(Ye(t,!1),t.strm.avail_out===0))return $e}return t.insert=0,n===Je?(Ye(t,!0),t.strm.avail_out===0?Ht:un):t.sym_next&&(Ye(t,!1),t.strm.avail_out===0)?$e:cn},pc=(t,n)=>{let e;for(;;){if(t.lookahead===0&&(tn(t),t.lookahead===0)){if(n===Ct)return $e;break}if(t.match_length=0,e=Nt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,e&&(Ye(t,!1),t.strm.avail_out===0))return $e}return t.insert=0,n===Je?(Ye(t,!0),t.strm.avail_out===0?Ht:un):t.sym_next&&(Ye(t,!1),t.strm.avail_out===0)?$e:cn};function ot(t,n,e,i,r){this.good_length=t,this.max_lazy=n,this.nice_length=e,this.max_chain=i,this.func=r}const vn=[new ot(0,0,0,0,Xa),new ot(4,4,8,4,Ki),new ot(4,5,16,8,Ki),new ot(4,6,32,32,Ki),new ot(4,4,16,16,Wt),new ot(8,16,32,32,Wt),new ot(8,16,128,128,Wt),new ot(8,32,128,256,Wt),new ot(32,128,258,1024,Wt),new ot(32,258,258,4096,Wt)],gc=t=>{t.window_size=2*t.w_size,At(t.head),t.max_lazy_match=vn[t.level].max_lazy,t.good_match=vn[t.level].good_length,t.nice_match=vn[t.level].nice_length,t.max_chain_length=vn[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=ee-1,t.match_available=0,t.ins_h=0};function bc(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=pi,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(cc*2),this.dyn_dtree=new Uint16Array((2*oc+1)*2),this.bl_tree=new Uint16Array((2*lc+1)*2),At(this.dyn_ltree),At(this.dyn_dtree),At(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(uc+1),this.heap=new Uint16Array(2*fr+1),At(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(2*fr+1),At(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const On=t=>{if(!t)return 1;const n=t.state;return!n||n.strm!==t||n.status!==en&&n.status!==Nr&&n.status!==hr&&n.status!==dr&&n.status!==_r&&n.status!==mr&&n.status!==Ft&&n.status!==bn?1:0},Wa=t=>{if(On(t))return Ut(t,ht);t.total_in=t.total_out=0,t.data_type=tc;const n=t.state;return n.pending=0,n.pending_out=0,n.wrap<0&&(n.wrap=-n.wrap),n.status=n.wrap===2?Nr:n.wrap?en:Ft,t.adler=n.wrap===2?0:1,n.last_flush=-2,jl(n),Ne},Ga=t=>{const n=Wa(t);return n===Ne&&gc(t.state),n},vc=(t,n)=>On(t)||t.state.wrap!==2?ht:(t.state.gzhead=n,Ne),Ka=(t,n,e,i,r,s)=>{if(!t)return ht;let a=1;if(n===Kl&&(n=6),i<0?(a=0,i=-i):i>15&&(a=2,i-=16),r<1||r>nc||e!==pi||i<8||i>15||n<0||n>9||s<0||s>Ql||i===8&&a!==1)return Ut(t,ht);i===8&&(i=9);const o=new bc;return t.state=o,o.strm=t,o.status=en,o.wrap=a,o.gzhead=null,o.w_bits=i,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=r+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+ee-1)/ee),o.window=new Uint8Array(o.w_size*2),o.head=new Uint16Array(o.hash_size),o.prev=new Uint16Array(o.w_size),o.lit_bufsize=1<<r+6,o.pending_buf_size=o.lit_bufsize*4,o.pending_buf=new Uint8Array(o.pending_buf_size),o.sym_buf=o.lit_bufsize,o.sym_end=(o.lit_bufsize-1)*3,o.level=n,o.strategy=s,o.method=e,Ga(t)},wc=(t,n)=>Ka(t,n,pi,ic,rc,ec),yc=(t,n)=>{if(On(t)||n>ws||n<0)return t?Ut(t,ht):ht;const e=t.state;if(!t.output||t.avail_in!==0&&!t.input||e.status===bn&&n!==Je)return Ut(t,t.avail_out===0?Gi:ht);const i=e.last_flush;if(e.last_flush=n,e.pending!==0){if(Ve(t),t.avail_out===0)return e.last_flush=-1,Ne}else if(t.avail_in===0&&ks(n)<=ks(i)&&n!==Je)return Ut(t,Gi);if(e.status===bn&&t.avail_in!==0)return Ut(t,Gi);if(e.status===en&&e.wrap===0&&(e.status=Ft),e.status===en){let r=pi+(e.w_bits-8<<4)<<8,s=-1;if(e.strategy>=qn||e.level<2?s=0:e.level<6?s=1:e.level===6?s=2:s=3,r|=s<<6,e.strstart!==0&&(r|=fc),r+=31-r%31,pn(e,r),e.strstart!==0&&(pn(e,t.adler>>>16),pn(e,t.adler&65535)),t.adler=1,e.status=Ft,Ve(t),e.pending!==0)return e.last_flush=-1,Ne}if(e.status===Nr){if(t.adler=0,se(e,31),se(e,139),se(e,8),e.gzhead)se(e,(e.gzhead.text?1:0)+(e.gzhead.hcrc?2:0)+(e.gzhead.extra?4:0)+(e.gzhead.name?8:0)+(e.gzhead.comment?16:0)),se(e,e.gzhead.time&255),se(e,e.gzhead.time>>8&255),se(e,e.gzhead.time>>16&255),se(e,e.gzhead.time>>24&255),se(e,e.level===9?2:e.strategy>=qn||e.level<2?4:0),se(e,e.gzhead.os&255),e.gzhead.extra&&e.gzhead.extra.length&&(se(e,e.gzhead.extra.length&255),se(e,e.gzhead.extra.length>>8&255)),e.gzhead.hcrc&&(t.adler=St(t.adler,e.pending_buf,e.pending,0)),e.gzindex=0,e.status=hr;else if(se(e,0),se(e,0),se(e,0),se(e,0),se(e,0),se(e,e.level===9?2:e.strategy>=qn||e.level<2?4:0),se(e,hc),e.status=Ft,Ve(t),e.pending!==0)return e.last_flush=-1,Ne}if(e.status===hr){if(e.gzhead.extra){let r=e.pending,s=(e.gzhead.extra.length&65535)-e.gzindex;for(;e.pending+s>e.pending_buf_size;){let o=e.pending_buf_size-e.pending;if(e.pending_buf.set(e.gzhead.extra.subarray(e.gzindex,e.gzindex+o),e.pending),e.pending=e.pending_buf_size,e.gzhead.hcrc&&e.pending>r&&(t.adler=St(t.adler,e.pending_buf,e.pending-r,r)),e.gzindex+=o,Ve(t),e.pending!==0)return e.last_flush=-1,Ne;r=0,s-=o}let a=new Uint8Array(e.gzhead.extra);e.pending_buf.set(a.subarray(e.gzindex,e.gzindex+s),e.pending),e.pending+=s,e.gzhead.hcrc&&e.pending>r&&(t.adler=St(t.adler,e.pending_buf,e.pending-r,r)),e.gzindex=0}e.status=dr}if(e.status===dr){if(e.gzhead.name){let r=e.pending,s;do{if(e.pending===e.pending_buf_size){if(e.gzhead.hcrc&&e.pending>r&&(t.adler=St(t.adler,e.pending_buf,e.pending-r,r)),Ve(t),e.pending!==0)return e.last_flush=-1,Ne;r=0}e.gzindex<e.gzhead.name.length?s=e.gzhead.name.charCodeAt(e.gzindex++)&255:s=0,se(e,s)}while(s!==0);e.gzhead.hcrc&&e.pending>r&&(t.adler=St(t.adler,e.pending_buf,e.pending-r,r)),e.gzindex=0}e.status=_r}if(e.status===_r){if(e.gzhead.comment){let r=e.pending,s;do{if(e.pending===e.pending_buf_size){if(e.gzhead.hcrc&&e.pending>r&&(t.adler=St(t.adler,e.pending_buf,e.pending-r,r)),Ve(t),e.pending!==0)return e.last_flush=-1,Ne;r=0}e.gzindex<e.gzhead.comment.length?s=e.gzhead.comment.charCodeAt(e.gzindex++)&255:s=0,se(e,s)}while(s!==0);e.gzhead.hcrc&&e.pending>r&&(t.adler=St(t.adler,e.pending_buf,e.pending-r,r))}e.status=mr}if(e.status===mr){if(e.gzhead.hcrc){if(e.pending+2>e.pending_buf_size&&(Ve(t),e.pending!==0))return e.last_flush=-1,Ne;se(e,t.adler&255),se(e,t.adler>>8&255),t.adler=0}if(e.status=Ft,Ve(t),e.pending!==0)return e.last_flush=-1,Ne}if(t.avail_in!==0||e.lookahead!==0||n!==Ct&&e.status!==bn){let r=e.level===0?Xa(e,n):e.strategy===qn?pc(e,n):e.strategy===Jl?mc(e,n):vn[e.level].func(e,n);if((r===Ht||r===un)&&(e.status=bn),r===$e||r===Ht)return t.avail_out===0&&(e.last_flush=-1),Ne;if(r===cn&&(n===Xl?Vl(e):n!==ws&&(ur(e,0,0,!1),n===Wl&&(At(e.head),e.lookahead===0&&(e.strstart=0,e.block_start=0,e.insert=0))),Ve(t),t.avail_out===0))return e.last_flush=-1,Ne}return n!==Je?Ne:e.wrap<=0?ys:(e.wrap===2?(se(e,t.adler&255),se(e,t.adler>>8&255),se(e,t.adler>>16&255),se(e,t.adler>>24&255),se(e,t.total_in&255),se(e,t.total_in>>8&255),se(e,t.total_in>>16&255),se(e,t.total_in>>24&255)):(pn(e,t.adler>>>16),pn(e,t.adler&65535)),Ve(t),e.wrap>0&&(e.wrap=-e.wrap),e.pending!==0?Ne:ys)},kc=t=>{if(On(t))return ht;const n=t.state.status;return t.state=null,n===Ft?Ut(t,Gl):Ne},Ec=(t,n)=>{let e=n.length;if(On(t))return ht;const i=t.state,r=i.wrap;if(r===2||r===1&&i.status!==en||i.lookahead)return ht;if(r===1&&(t.adler=Va(t.adler,n,e,0)),i.wrap=0,e>=i.w_size){r===0&&(At(i.head),i.strstart=0,i.block_start=0,i.insert=0);let u=new Uint8Array(i.w_size);u.set(n.subarray(e-i.w_size,e),0),n=u,e=i.w_size}const s=t.avail_in,a=t.next_in,o=t.input;for(t.avail_in=e,t.next_in=0,t.input=n,tn(i);i.lookahead>=ee;){let u=i.strstart,l=i.lookahead-(ee-1);do i.ins_h=Dt(i,i.ins_h,i.window[u+ee-1]),i.prev[u&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=u,u++;while(--l);i.strstart=u,i.lookahead=ee-1,tn(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=ee-1,i.match_available=0,t.next_in=a,t.input=o,t.avail_in=s,i.wrap=r,Ne};pt.deflateInit=wc;pt.deflateInit2=Ka;pt.deflateReset=Ga;pt.deflateResetKeep=Wa;pt.deflateSetHeader=vc;pt.deflate=yc;pt.deflateEnd=kc;pt.deflateSetDictionary=Ec;pt.deflateInfo="pako deflate (from Nodeca project)";var gi={};const Tc=(t,n)=>Object.prototype.hasOwnProperty.call(t,n);gi.assign=function(t){const n=Array.prototype.slice.call(arguments,1);for(;n.length;){const e=n.shift();if(e){if(typeof e!="object")throw new TypeError(e+"must be non-object");for(const i in e)Tc(e,i)&&(t[i]=e[i])}}return t};gi.flattenChunks=t=>{let n=0;for(let i=0,r=t.length;i<r;i++)n+=t[i].length;const e=new Uint8Array(n);for(let i=0,r=0,s=t.length;i<s;i++){let a=t[i];e.set(a,r),r+=a.length}return e};var Bn={};let qa=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{qa=!1}const An=new Uint8Array(256);for(let t=0;t<256;t++)An[t]=t>=252?6:t>=248?5:t>=240?4:t>=224?3:t>=192?2:1;An[254]=An[254]=1;Bn.string2buf=t=>{if(typeof TextEncoder=="function"&&TextEncoder.prototype.encode)return new TextEncoder().encode(t);let n,e,i,r,s,a=t.length,o=0;for(r=0;r<a;r++)e=t.charCodeAt(r),(e&64512)===55296&&r+1<a&&(i=t.charCodeAt(r+1),(i&64512)===56320&&(e=65536+(e-55296<<10)+(i-56320),r++)),o+=e<128?1:e<2048?2:e<65536?3:4;for(n=new Uint8Array(o),s=0,r=0;s<o;r++)e=t.charCodeAt(r),(e&64512)===55296&&r+1<a&&(i=t.charCodeAt(r+1),(i&64512)===56320&&(e=65536+(e-55296<<10)+(i-56320),r++)),e<128?n[s++]=e:e<2048?(n[s++]=192|e>>>6,n[s++]=128|e&63):e<65536?(n[s++]=224|e>>>12,n[s++]=128|e>>>6&63,n[s++]=128|e&63):(n[s++]=240|e>>>18,n[s++]=128|e>>>12&63,n[s++]=128|e>>>6&63,n[s++]=128|e&63);return n};const Ic=(t,n)=>{if(n<65534&&t.subarray&&qa)return String.fromCharCode.apply(null,t.length===n?t:t.subarray(0,n));let e="";for(let i=0;i<n;i++)e+=String.fromCharCode(t[i]);return e};Bn.buf2string=(t,n)=>{const e=n||t.length;if(typeof TextDecoder=="function"&&TextDecoder.prototype.decode)return new TextDecoder().decode(t.subarray(0,n));let i,r;const s=new Array(e*2);for(r=0,i=0;i<e;){let a=t[i++];if(a<128){s[r++]=a;continue}let o=An[a];if(o>4){s[r++]=65533,i+=o-1;continue}for(a&=o===2?31:o===3?15:7;o>1&&i<e;)a=a<<6|t[i++]&63,o--;if(o>1){s[r++]=65533;continue}a<65536?s[r++]=a:(a-=65536,s[r++]=55296|a>>10&1023,s[r++]=56320|a&1023)}return Ic(s,r)};Bn.utf8border=(t,n)=>{n=n||t.length,n>t.length&&(n=t.length);let e=n-1;for(;e>=0&&(t[e]&192)===128;)e--;return e<0||e===0?n:e+An[t[e]]>n?e:n};function Pc(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}var Ja=Pc;const kn=pt,Qa=gi,eo=Bn,gr=xr,Sc=Ja,to=Object.prototype.toString,{Z_NO_FLUSH:Ac,Z_SYNC_FLUSH:xc,Z_FULL_FLUSH:Nc,Z_FINISH:Cc,Z_OK:hi,Z_STREAM_END:Dc,Z_DEFAULT_COMPRESSION:Mc,Z_DEFAULT_STRATEGY:Oc,Z_DEFLATED:Bc}=Vt;function $n(t){this.options=Qa.assign({level:Mc,method:Bc,chunkSize:16384,windowBits:15,memLevel:8,strategy:Oc},t||{});let n=this.options;n.raw&&n.windowBits>0?n.windowBits=-n.windowBits:n.gzip&&n.windowBits>0&&n.windowBits<16&&(n.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Sc,this.strm.avail_out=0;let e=kn.deflateInit2(this.strm,n.level,n.method,n.windowBits,n.memLevel,n.strategy);if(e!==hi)throw new Error(gr[e]);if(n.header&&kn.deflateSetHeader(this.strm,n.header),n.dictionary){let i;if(typeof n.dictionary=="string"?i=eo.string2buf(n.dictionary):to.call(n.dictionary)==="[object ArrayBuffer]"?i=new Uint8Array(n.dictionary):i=n.dictionary,e=kn.deflateSetDictionary(this.strm,i),e!==hi)throw new Error(gr[e]);this._dict_set=!0}}$n.prototype.push=function(t,n){const e=this.strm,i=this.options.chunkSize;let r,s;if(this.ended)return!1;for(n===~~n?s=n:s=n===!0?Cc:Ac,typeof t=="string"?e.input=eo.string2buf(t):to.call(t)==="[object ArrayBuffer]"?e.input=new Uint8Array(t):e.input=t,e.next_in=0,e.avail_in=e.input.length;;){if(e.avail_out===0&&(e.output=new Uint8Array(i),e.next_out=0,e.avail_out=i),(s===xc||s===Nc)&&e.avail_out<=6){this.onData(e.output.subarray(0,e.next_out)),e.avail_out=0;continue}if(r=kn.deflate(e,s),r===Dc)return e.next_out>0&&this.onData(e.output.subarray(0,e.next_out)),r=kn.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===hi;if(e.avail_out===0){this.onData(e.output);continue}if(s>0&&e.next_out>0){this.onData(e.output.subarray(0,e.next_out)),e.avail_out=0;continue}if(e.avail_in===0)break}return!0};$n.prototype.onData=function(t){this.chunks.push(t)};$n.prototype.onEnd=function(t){t===hi&&(this.result=Qa.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};function Cr(t,n){const e=new $n(n);if(e.push(t,!0),e.err)throw e.msg||gr[e.err];return e.result}function $c(t,n){return n=n||{},n.raw=!0,Cr(t,n)}function Rc(t,n){return n=n||{},n.gzip=!0,Cr(t,n)}an.Deflate=$n;an.deflate=Cr;an.deflateRaw=$c;an.gzip=Rc;an.constants=Vt;var fn={},it={};const Jn=16209,Lc=16191;var Fc=function(n,e){let i,r,s,a,o,u,l,f,p,m,d,g,w,y,S,v,M,T,O,Y,E,D,A,k;const F=n.state;i=n.next_in,A=n.input,r=i+(n.avail_in-5),s=n.next_out,k=n.output,a=s-(e-n.avail_out),o=s+(n.avail_out-257),u=F.dmax,l=F.wsize,f=F.whave,p=F.wnext,m=F.window,d=F.hold,g=F.bits,w=F.lencode,y=F.distcode,S=(1<<F.lenbits)-1,v=(1<<F.distbits)-1;e:do{g<15&&(d+=A[i++]<<g,g+=8,d+=A[i++]<<g,g+=8),M=w[d&S];t:for(;;){if(T=M>>>24,d>>>=T,g-=T,T=M>>>16&255,T===0)k[s++]=M&65535;else if(T&16){O=M&65535,T&=15,T&&(g<T&&(d+=A[i++]<<g,g+=8),O+=d&(1<<T)-1,d>>>=T,g-=T),g<15&&(d+=A[i++]<<g,g+=8,d+=A[i++]<<g,g+=8),M=y[d&v];n:for(;;){if(T=M>>>24,d>>>=T,g-=T,T=M>>>16&255,T&16){if(Y=M&65535,T&=15,g<T&&(d+=A[i++]<<g,g+=8,g<T&&(d+=A[i++]<<g,g+=8)),Y+=d&(1<<T)-1,Y>u){n.msg="invalid distance too far back",F.mode=Jn;break e}if(d>>>=T,g-=T,T=s-a,Y>T){if(T=Y-T,T>f&&F.sane){n.msg="invalid distance too far back",F.mode=Jn;break e}if(E=0,D=m,p===0){if(E+=l-T,T<O){O-=T;do k[s++]=m[E++];while(--T);E=s-Y,D=k}}else if(p<T){if(E+=l+p-T,T-=p,T<O){O-=T;do k[s++]=m[E++];while(--T);if(E=0,p<O){T=p,O-=T;do k[s++]=m[E++];while(--T);E=s-Y,D=k}}}else if(E+=p-T,T<O){O-=T;do k[s++]=m[E++];while(--T);E=s-Y,D=k}for(;O>2;)k[s++]=D[E++],k[s++]=D[E++],k[s++]=D[E++],O-=3;O&&(k[s++]=D[E++],O>1&&(k[s++]=D[E++]))}else{E=s-Y;do k[s++]=k[E++],k[s++]=k[E++],k[s++]=k[E++],O-=3;while(O>2);O&&(k[s++]=k[E++],O>1&&(k[s++]=k[E++]))}}else if(T&64){n.msg="invalid distance code",F.mode=Jn;break e}else{M=y[(M&65535)+(d&(1<<T)-1)];continue n}break}}else if(T&64)if(T&32){F.mode=Lc;break e}else{n.msg="invalid literal/length code",F.mode=Jn;break e}else{M=w[(M&65535)+(d&(1<<T)-1)];continue t}break}}while(i<r&&s<o);O=g>>3,i-=O,g-=O<<3,d&=(1<<g)-1,n.next_in=i,n.next_out=s,n.avail_in=i<r?5+(r-i):5-(i-r),n.avail_out=s<o?257+(o-s):257-(s-o),F.hold=d,F.bits=g};const Gt=15,Es=852,Ts=592,Is=0,qi=1,Ps=2,Uc=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),zc=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),Hc=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),jc=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),Zc=(t,n,e,i,r,s,a,o)=>{const u=o.bits;let l=0,f=0,p=0,m=0,d=0,g=0,w=0,y=0,S=0,v=0,M,T,O,Y,E,D=null,A;const k=new Uint16Array(Gt+1),F=new Uint16Array(Gt+1);let U=null,K,ie,q;for(l=0;l<=Gt;l++)k[l]=0;for(f=0;f<i;f++)k[n[e+f]]++;for(d=u,m=Gt;m>=1&&k[m]===0;m--);if(d>m&&(d=m),m===0)return r[s++]=1<<24|64<<16|0,r[s++]=1<<24|64<<16|0,o.bits=1,0;for(p=1;p<m&&k[p]===0;p++);for(d<p&&(d=p),y=1,l=1;l<=Gt;l++)if(y<<=1,y-=k[l],y<0)return-1;if(y>0&&(t===Is||m!==1))return-1;for(F[1]=0,l=1;l<Gt;l++)F[l+1]=F[l]+k[l];for(f=0;f<i;f++)n[e+f]!==0&&(a[F[n[e+f]]++]=f);if(t===Is?(D=U=a,A=20):t===qi?(D=Uc,U=zc,A=257):(D=Hc,U=jc,A=0),v=0,f=0,l=p,E=s,g=d,w=0,O=-1,S=1<<d,Y=S-1,t===qi&&S>Es||t===Ps&&S>Ts)return 1;for(;;){K=l-w,a[f]+1<A?(ie=0,q=a[f]):a[f]>=A?(ie=U[a[f]-A],q=D[a[f]-A]):(ie=96,q=0),M=1<<l-w,T=1<<g,p=T;do T-=M,r[E+(v>>w)+T]=K<<24|ie<<16|q|0;while(T!==0);for(M=1<<l-1;v&M;)M>>=1;if(M!==0?(v&=M-1,v+=M):v=0,f++,--k[l]===0){if(l===m)break;l=n[e+a[f]]}if(l>d&&(v&Y)!==O){for(w===0&&(w=d),E+=p,g=l-w,y=1<<g;g+w<m&&(y-=k[g+w],!(y<=0));)g++,y<<=1;if(S+=1<<g,t===qi&&S>Es||t===Ps&&S>Ts)return 1;O=v&Y,r[O]=d<<24|g<<16|E-s|0}}return v!==0&&(r[E+v]=l-w<<24|64<<16|0),o.bits=d,0};var Vc=Zc;const br=ja,lt=Za,Yc=Fc,En=Vc,Xc=0,no=1,io=2,{Z_FINISH:Ss,Z_BLOCK:Wc,Z_TREES:Qn,Z_OK:jt,Z_STREAM_END:Gc,Z_NEED_DICT:Kc,Z_STREAM_ERROR:et,Z_DATA_ERROR:ro,Z_MEM_ERROR:so,Z_BUF_ERROR:qc,Z_DEFLATED:As}=Vt,bi=16180,xs=16181,Ns=16182,Cs=16183,Ds=16184,Ms=16185,Os=16186,Bs=16187,$s=16188,Rs=16189,di=16190,wt=16191,Ji=16192,Ls=16193,Qi=16194,Fs=16195,Us=16196,zs=16197,Hs=16198,ei=16199,ti=16200,js=16201,Zs=16202,Vs=16203,Ys=16204,Xs=16205,er=16206,Ws=16207,Gs=16208,me=16209,ao=16210,oo=16211,Jc=852,Qc=592,eu=15,tu=eu,Ks=t=>(t>>>24&255)+(t>>>8&65280)+((t&65280)<<8)+((t&255)<<24);function nu(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Yt=t=>{if(!t)return 1;const n=t.state;return!n||n.strm!==t||n.mode<bi||n.mode>oo?1:0},lo=t=>{if(Yt(t))return et;const n=t.state;return t.total_in=t.total_out=n.total=0,t.msg="",n.wrap&&(t.adler=n.wrap&1),n.mode=bi,n.last=0,n.havedict=0,n.flags=-1,n.dmax=32768,n.head=null,n.hold=0,n.bits=0,n.lencode=n.lendyn=new Int32Array(Jc),n.distcode=n.distdyn=new Int32Array(Qc),n.sane=1,n.back=-1,jt},co=t=>{if(Yt(t))return et;const n=t.state;return n.wsize=0,n.whave=0,n.wnext=0,lo(t)},uo=(t,n)=>{let e;if(Yt(t))return et;const i=t.state;return n<0?(e=0,n=-n):(e=(n>>4)+5,n<48&&(n&=15)),n&&(n<8||n>15)?et:(i.window!==null&&i.wbits!==n&&(i.window=null),i.wrap=e,i.wbits=n,co(t))},fo=(t,n)=>{if(!t)return et;const e=new nu;t.state=e,e.strm=t,e.window=null,e.mode=bi;const i=uo(t,n);return i!==jt&&(t.state=null),i},iu=t=>fo(t,tu);let qs=!0,tr,nr;const ru=t=>{if(qs){tr=new Int32Array(512),nr=new Int32Array(32);let n=0;for(;n<144;)t.lens[n++]=8;for(;n<256;)t.lens[n++]=9;for(;n<280;)t.lens[n++]=7;for(;n<288;)t.lens[n++]=8;for(En(no,t.lens,0,288,tr,0,t.work,{bits:9}),n=0;n<32;)t.lens[n++]=5;En(io,t.lens,0,32,nr,0,t.work,{bits:5}),qs=!1}t.lencode=tr,t.lenbits=9,t.distcode=nr,t.distbits=5},ho=(t,n,e,i)=>{let r;const s=t.state;return s.window===null&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new Uint8Array(s.wsize)),i>=s.wsize?(s.window.set(n.subarray(e-s.wsize,e),0),s.wnext=0,s.whave=s.wsize):(r=s.wsize-s.wnext,r>i&&(r=i),s.window.set(n.subarray(e-i,e-i+r),s.wnext),i-=r,i?(s.window.set(n.subarray(e-i,e),0),s.wnext=i,s.whave=s.wsize):(s.wnext+=r,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=r))),0},su=(t,n)=>{let e,i,r,s,a,o,u,l,f,p,m,d,g,w,y=0,S,v,M,T,O,Y,E,D;const A=new Uint8Array(4);let k,F;const U=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(Yt(t)||!t.output||!t.input&&t.avail_in!==0)return et;e=t.state,e.mode===wt&&(e.mode=Ji),a=t.next_out,r=t.output,u=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,l=e.hold,f=e.bits,p=o,m=u,D=jt;e:for(;;)switch(e.mode){case bi:if(e.wrap===0){e.mode=Ji;break}for(;f<16;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(e.wrap&2&&l===35615){e.wbits===0&&(e.wbits=15),e.check=0,A[0]=l&255,A[1]=l>>>8&255,e.check=lt(e.check,A,2,0),l=0,f=0,e.mode=xs;break}if(e.head&&(e.head.done=!1),!(e.wrap&1)||(((l&255)<<8)+(l>>8))%31){t.msg="incorrect header check",e.mode=me;break}if((l&15)!==As){t.msg="unknown compression method",e.mode=me;break}if(l>>>=4,f-=4,E=(l&15)+8,e.wbits===0&&(e.wbits=E),E>15||E>e.wbits){t.msg="invalid window size",e.mode=me;break}e.dmax=1<<e.wbits,e.flags=0,t.adler=e.check=1,e.mode=l&512?Rs:wt,l=0,f=0;break;case xs:for(;f<16;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(e.flags=l,(e.flags&255)!==As){t.msg="unknown compression method",e.mode=me;break}if(e.flags&57344){t.msg="unknown header flags set",e.mode=me;break}e.head&&(e.head.text=l>>8&1),e.flags&512&&e.wrap&4&&(A[0]=l&255,A[1]=l>>>8&255,e.check=lt(e.check,A,2,0)),l=0,f=0,e.mode=Ns;case Ns:for(;f<32;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}e.head&&(e.head.time=l),e.flags&512&&e.wrap&4&&(A[0]=l&255,A[1]=l>>>8&255,A[2]=l>>>16&255,A[3]=l>>>24&255,e.check=lt(e.check,A,4,0)),l=0,f=0,e.mode=Cs;case Cs:for(;f<16;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}e.head&&(e.head.xflags=l&255,e.head.os=l>>8),e.flags&512&&e.wrap&4&&(A[0]=l&255,A[1]=l>>>8&255,e.check=lt(e.check,A,2,0)),l=0,f=0,e.mode=Ds;case Ds:if(e.flags&1024){for(;f<16;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}e.length=l,e.head&&(e.head.extra_len=l),e.flags&512&&e.wrap&4&&(A[0]=l&255,A[1]=l>>>8&255,e.check=lt(e.check,A,2,0)),l=0,f=0}else e.head&&(e.head.extra=null);e.mode=Ms;case Ms:if(e.flags&1024&&(d=e.length,d>o&&(d=o),d&&(e.head&&(E=e.head.extra_len-e.length,e.head.extra||(e.head.extra=new Uint8Array(e.head.extra_len)),e.head.extra.set(i.subarray(s,s+d),E)),e.flags&512&&e.wrap&4&&(e.check=lt(e.check,i,d,s)),o-=d,s+=d,e.length-=d),e.length))break e;e.length=0,e.mode=Os;case Os:if(e.flags&2048){if(o===0)break e;d=0;do E=i[s+d++],e.head&&E&&e.length<65536&&(e.head.name+=String.fromCharCode(E));while(E&&d<o);if(e.flags&512&&e.wrap&4&&(e.check=lt(e.check,i,d,s)),o-=d,s+=d,E)break e}else e.head&&(e.head.name=null);e.length=0,e.mode=Bs;case Bs:if(e.flags&4096){if(o===0)break e;d=0;do E=i[s+d++],e.head&&E&&e.length<65536&&(e.head.comment+=String.fromCharCode(E));while(E&&d<o);if(e.flags&512&&e.wrap&4&&(e.check=lt(e.check,i,d,s)),o-=d,s+=d,E)break e}else e.head&&(e.head.comment=null);e.mode=$s;case $s:if(e.flags&512){for(;f<16;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(e.wrap&4&&l!==(e.check&65535)){t.msg="header crc mismatch",e.mode=me;break}l=0,f=0}e.head&&(e.head.hcrc=e.flags>>9&1,e.head.done=!0),t.adler=e.check=0,e.mode=wt;break;case Rs:for(;f<32;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}t.adler=e.check=Ks(l),l=0,f=0,e.mode=di;case di:if(e.havedict===0)return t.next_out=a,t.avail_out=u,t.next_in=s,t.avail_in=o,e.hold=l,e.bits=f,Kc;t.adler=e.check=1,e.mode=wt;case wt:if(n===Wc||n===Qn)break e;case Ji:if(e.last){l>>>=f&7,f-=f&7,e.mode=er;break}for(;f<3;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}switch(e.last=l&1,l>>>=1,f-=1,l&3){case 0:e.mode=Ls;break;case 1:if(ru(e),e.mode=ei,n===Qn){l>>>=2,f-=2;break e}break;case 2:e.mode=Us;break;case 3:t.msg="invalid block type",e.mode=me}l>>>=2,f-=2;break;case Ls:for(l>>>=f&7,f-=f&7;f<32;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if((l&65535)!==(l>>>16^65535)){t.msg="invalid stored block lengths",e.mode=me;break}if(e.length=l&65535,l=0,f=0,e.mode=Qi,n===Qn)break e;case Qi:e.mode=Fs;case Fs:if(d=e.length,d){if(d>o&&(d=o),d>u&&(d=u),d===0)break e;r.set(i.subarray(s,s+d),a),o-=d,s+=d,u-=d,a+=d,e.length-=d;break}e.mode=wt;break;case Us:for(;f<14;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(e.nlen=(l&31)+257,l>>>=5,f-=5,e.ndist=(l&31)+1,l>>>=5,f-=5,e.ncode=(l&15)+4,l>>>=4,f-=4,e.nlen>286||e.ndist>30){t.msg="too many length or distance symbols",e.mode=me;break}e.have=0,e.mode=zs;case zs:for(;e.have<e.ncode;){for(;f<3;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}e.lens[U[e.have++]]=l&7,l>>>=3,f-=3}for(;e.have<19;)e.lens[U[e.have++]]=0;if(e.lencode=e.lendyn,e.lenbits=7,k={bits:e.lenbits},D=En(Xc,e.lens,0,19,e.lencode,0,e.work,k),e.lenbits=k.bits,D){t.msg="invalid code lengths set",e.mode=me;break}e.have=0,e.mode=Hs;case Hs:for(;e.have<e.nlen+e.ndist;){for(;y=e.lencode[l&(1<<e.lenbits)-1],S=y>>>24,v=y>>>16&255,M=y&65535,!(S<=f);){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(M<16)l>>>=S,f-=S,e.lens[e.have++]=M;else{if(M===16){for(F=S+2;f<F;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(l>>>=S,f-=S,e.have===0){t.msg="invalid bit length repeat",e.mode=me;break}E=e.lens[e.have-1],d=3+(l&3),l>>>=2,f-=2}else if(M===17){for(F=S+3;f<F;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}l>>>=S,f-=S,E=0,d=3+(l&7),l>>>=3,f-=3}else{for(F=S+7;f<F;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}l>>>=S,f-=S,E=0,d=11+(l&127),l>>>=7,f-=7}if(e.have+d>e.nlen+e.ndist){t.msg="invalid bit length repeat",e.mode=me;break}for(;d--;)e.lens[e.have++]=E}}if(e.mode===me)break;if(e.lens[256]===0){t.msg="invalid code -- missing end-of-block",e.mode=me;break}if(e.lenbits=9,k={bits:e.lenbits},D=En(no,e.lens,0,e.nlen,e.lencode,0,e.work,k),e.lenbits=k.bits,D){t.msg="invalid literal/lengths set",e.mode=me;break}if(e.distbits=6,e.distcode=e.distdyn,k={bits:e.distbits},D=En(io,e.lens,e.nlen,e.ndist,e.distcode,0,e.work,k),e.distbits=k.bits,D){t.msg="invalid distances set",e.mode=me;break}if(e.mode=ei,n===Qn)break e;case ei:e.mode=ti;case ti:if(o>=6&&u>=258){t.next_out=a,t.avail_out=u,t.next_in=s,t.avail_in=o,e.hold=l,e.bits=f,Yc(t,m),a=t.next_out,r=t.output,u=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,l=e.hold,f=e.bits,e.mode===wt&&(e.back=-1);break}for(e.back=0;y=e.lencode[l&(1<<e.lenbits)-1],S=y>>>24,v=y>>>16&255,M=y&65535,!(S<=f);){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(v&&!(v&240)){for(T=S,O=v,Y=M;y=e.lencode[Y+((l&(1<<T+O)-1)>>T)],S=y>>>24,v=y>>>16&255,M=y&65535,!(T+S<=f);){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}l>>>=T,f-=T,e.back+=T}if(l>>>=S,f-=S,e.back+=S,e.length=M,v===0){e.mode=Xs;break}if(v&32){e.back=-1,e.mode=wt;break}if(v&64){t.msg="invalid literal/length code",e.mode=me;break}e.extra=v&15,e.mode=js;case js:if(e.extra){for(F=e.extra;f<F;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}e.length+=l&(1<<e.extra)-1,l>>>=e.extra,f-=e.extra,e.back+=e.extra}e.was=e.length,e.mode=Zs;case Zs:for(;y=e.distcode[l&(1<<e.distbits)-1],S=y>>>24,v=y>>>16&255,M=y&65535,!(S<=f);){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(!(v&240)){for(T=S,O=v,Y=M;y=e.distcode[Y+((l&(1<<T+O)-1)>>T)],S=y>>>24,v=y>>>16&255,M=y&65535,!(T+S<=f);){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}l>>>=T,f-=T,e.back+=T}if(l>>>=S,f-=S,e.back+=S,v&64){t.msg="invalid distance code",e.mode=me;break}e.offset=M,e.extra=v&15,e.mode=Vs;case Vs:if(e.extra){for(F=e.extra;f<F;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}e.offset+=l&(1<<e.extra)-1,l>>>=e.extra,f-=e.extra,e.back+=e.extra}if(e.offset>e.dmax){t.msg="invalid distance too far back",e.mode=me;break}e.mode=Ys;case Ys:if(u===0)break e;if(d=m-u,e.offset>d){if(d=e.offset-d,d>e.whave&&e.sane){t.msg="invalid distance too far back",e.mode=me;break}d>e.wnext?(d-=e.wnext,g=e.wsize-d):g=e.wnext-d,d>e.length&&(d=e.length),w=e.window}else w=r,g=a-e.offset,d=e.length;d>u&&(d=u),u-=d,e.length-=d;do r[a++]=w[g++];while(--d);e.length===0&&(e.mode=ti);break;case Xs:if(u===0)break e;r[a++]=e.length,u--,e.mode=ti;break;case er:if(e.wrap){for(;f<32;){if(o===0)break e;o--,l|=i[s++]<<f,f+=8}if(m-=u,t.total_out+=m,e.total+=m,e.wrap&4&&m&&(t.adler=e.check=e.flags?lt(e.check,r,m,a-m):br(e.check,r,m,a-m)),m=u,e.wrap&4&&(e.flags?l:Ks(l))!==e.check){t.msg="incorrect data check",e.mode=me;break}l=0,f=0}e.mode=Ws;case Ws:if(e.wrap&&e.flags){for(;f<32;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(e.wrap&4&&l!==(e.total&4294967295)){t.msg="incorrect length check",e.mode=me;break}l=0,f=0}e.mode=Gs;case Gs:D=Gc;break e;case me:D=ro;break e;case ao:return so;case oo:default:return et}return t.next_out=a,t.avail_out=u,t.next_in=s,t.avail_in=o,e.hold=l,e.bits=f,(e.wsize||m!==t.avail_out&&e.mode<me&&(e.mode<er||n!==Ss))&&ho(t,t.output,t.next_out,m-t.avail_out),p-=t.avail_in,m-=t.avail_out,t.total_in+=p,t.total_out+=m,e.total+=m,e.wrap&4&&m&&(t.adler=e.check=e.flags?lt(e.check,r,m,t.next_out-m):br(e.check,r,m,t.next_out-m)),t.data_type=e.bits+(e.last?64:0)+(e.mode===wt?128:0)+(e.mode===ei||e.mode===Qi?256:0),(p===0&&m===0||n===Ss)&&D===jt&&(D=qc),D},au=t=>{if(Yt(t))return et;let n=t.state;return n.window&&(n.window=null),t.state=null,jt},ou=(t,n)=>{if(Yt(t))return et;const e=t.state;return e.wrap&2?(e.head=n,n.done=!1,jt):et},lu=(t,n)=>{const e=n.length;let i,r,s;return Yt(t)||(i=t.state,i.wrap!==0&&i.mode!==di)?et:i.mode===di&&(r=1,r=br(r,n,e,0),r!==i.check)?ro:(s=ho(t,n,e,e),s?(i.mode=ao,so):(i.havedict=1,jt))};it.inflateReset=co;it.inflateReset2=uo;it.inflateResetKeep=lo;it.inflateInit=iu;it.inflateInit2=fo;it.inflate=su;it.inflateEnd=au;it.inflateGetHeader=ou;it.inflateSetDictionary=lu;it.inflateInfo="pako inflate (from Nodeca project)";function cu(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var uu=cu;const Tt=it,_o=gi,vr=Bn,wr=xr,fu=Ja,hu=uu,mo=Object.prototype.toString,{Z_NO_FLUSH:du,Z_FINISH:_u,Z_OK:xn,Z_STREAM_END:ir,Z_NEED_DICT:rr,Z_STREAM_ERROR:mu,Z_DATA_ERROR:Js,Z_MEM_ERROR:pu}=Vt;function Rn(t){this.options=_o.assign({chunkSize:1024*64,windowBits:15,to:""},t||{});const n=this.options;n.raw&&n.windowBits>=0&&n.windowBits<16&&(n.windowBits=-n.windowBits,n.windowBits===0&&(n.windowBits=-15)),n.windowBits>=0&&n.windowBits<16&&!(t&&t.windowBits)&&(n.windowBits+=32),n.windowBits>15&&n.windowBits<48&&(n.windowBits&15||(n.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new fu,this.strm.avail_out=0;let e=Tt.inflateInit2(this.strm,n.windowBits);if(e!==xn)throw new Error(wr[e]);if(this.header=new hu,Tt.inflateGetHeader(this.strm,this.header),n.dictionary&&(typeof n.dictionary=="string"?n.dictionary=vr.string2buf(n.dictionary):mo.call(n.dictionary)==="[object ArrayBuffer]"&&(n.dictionary=new Uint8Array(n.dictionary)),n.raw&&(e=Tt.inflateSetDictionary(this.strm,n.dictionary),e!==xn)))throw new Error(wr[e])}Rn.prototype.push=function(t,n){const e=this.strm,i=this.options.chunkSize,r=this.options.dictionary;let s,a,o;if(this.ended)return!1;for(n===~~n?a=n:a=n===!0?_u:du,mo.call(t)==="[object ArrayBuffer]"?e.input=new Uint8Array(t):e.input=t,e.next_in=0,e.avail_in=e.input.length;;){for(e.avail_out===0&&(e.output=new Uint8Array(i),e.next_out=0,e.avail_out=i),s=Tt.inflate(e,a),s===rr&&r&&(s=Tt.inflateSetDictionary(e,r),s===xn?s=Tt.inflate(e,a):s===Js&&(s=rr));e.avail_in>0&&s===ir&&e.state.wrap>0&&t[e.next_in]!==0;)Tt.inflateReset(e),s=Tt.inflate(e,a);switch(s){case mu:case Js:case rr:case pu:return this.onEnd(s),this.ended=!0,!1}if(o=e.avail_out,e.next_out&&(e.avail_out===0||s===ir))if(this.options.to==="string"){let u=vr.utf8border(e.output,e.next_out),l=e.next_out-u,f=vr.buf2string(e.output,u);e.next_out=l,e.avail_out=i-l,l&&e.output.set(e.output.subarray(u,u+l),0),this.onData(f)}else this.onData(e.output.length===e.next_out?e.output:e.output.subarray(0,e.next_out));if(!(s===xn&&o===0)){if(s===ir)return s=Tt.inflateEnd(this.strm),this.onEnd(s),this.ended=!0,!0;if(e.avail_in===0)break}}return!0};Rn.prototype.onData=function(t){this.chunks.push(t)};Rn.prototype.onEnd=function(t){t===xn&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=_o.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};function Dr(t,n){const e=new Rn(n);if(e.push(t),e.err)throw e.msg||wr[e.err];return e.result}function gu(t,n){return n=n||{},n.raw=!0,Dr(t,n)}fn.Inflate=Rn;fn.inflate=Dr;fn.inflateRaw=gu;fn.ungzip=Dr;fn.constants=Vt;const{Deflate:bu,deflate:vu,deflateRaw:wu,gzip:yu}=an,{Inflate:ku,inflate:Eu,inflateRaw:Tu,ungzip:Iu}=fn,Pu=Vt;mt.Deflate=bu;mt.deflate=vu;mt.deflateRaw=wu;mt.gzip=yu;mt.Inflate=ku;mt.inflate=Eu;mt.inflateRaw=Tu;mt.ungzip=Iu;mt.constants=Pu;var Zt={};Object.defineProperty(Zt,"__esModule",{value:!0});Zt.IO=Zt.BitIO=void 0;const Su=1024,Au=1024;class po{constructor(n=Su){P(this,"length",0);P(this,"_pointer",0);typeof n=="number"?(this.length=0,this.buffer=new ArrayBuffer(n)):(this.length=n.byteLength,this.buffer=n)}set pointer(n){n>this.length&&(this.length=n),this._pointer=n}get pointer(){return this._pointer}get view(){return new DataView(this.buffer)}final(){return this.buffer.slice(0,this.length)}expect(n){if(this.buffer.byteLength<this.pointer+n){const e=new Uint8Array(this.buffer.byteLength+n+Au);e.set(new Uint8Array(this.buffer),0),this.buffer=e.buffer}}}class xu extends po{getByte(){return this.view.getUint8(this.pointer++)}getBuffer(n){const e=this.buffer.slice(this.pointer,this.pointer+n);return this.pointer+=n,e}putByte(n){this.expect(1),this.view.setUint8(this.pointer++,n)}putBuffer(n){this.expect(n.byteLength),new Uint8Array(this.buffer).set(new Uint8Array(n),this.pointer),this.pointer+=n.byteLength}withholdByte(){const n=this.pointer++;return e=>this.view.setUint8(n,e)}}Zt.IO=xu;class Nu extends po{constructor(){super(...arguments);P(this,"_bitPointer",0)}set pointer(e){this._bitPointer=0,super.pointer=e}get pointer(){return super.pointer}set bitPointer(e){e<8?this._bitPointer=e:(this.pointer+=e>>3,this._bitPointer=e&7)}get bitPointer(){return this._bitPointer}flush(){this.bitPointer!=0&&(this.bitPointer=0,this.pointer++)}final(){return this.flush(),super.final()}putBit(e){this.expect(1),this.view.setUint8(this.pointer,this.view.getUint8(this.pointer)|(e?1:0)<<this.bitPointer++)}getBit(){return!!(this.view.getUint8(this.pointer)&1<<this.bitPointer++)}putBits(e,i){for(let r=0;r<i;r++)this.putBit(!!(e>>r&1))}getBits(e){let i=0;for(let r=0;r<e;r++)i|=(this.getBit()?1:0)<<r;return i}}Zt.BitIO=Nu;var de={};Object.defineProperty(de,"__esModule",{value:!0});de.decodeBigInt=bo;de.decodeIndex=Bu;de.encodeBigInt=go;de.encodeIndex=Ou;de.hashStr=Cu;de.hex=Du;de.stringSort=Mu;function Cu(t){let n=5381;for(let e=0;e<t.length;e++)n=(n<<5)+n^t.charCodeAt(e);return n>>>0}function Du(t,n,e="0x"){return e+t.toString(16).padStart(n*2,"0")}function Mu(t,n){return(t>n?1:0)-(t<n?1:0)}function go(t,n,e){const i=t<0n;if(i){if(!n)throw new Error("Cannot encode negative bigint when parser is not signed.");t=-t}for(n?(e.putByte(Number((t&0b00111111n)<<2n)|(i?2:0)|(t>0b00111111n?1:0)),t>>=6n):(e.putByte(Number((t&0b01111111n)<<1n)|(t>0b01111111n?1:0)),t>>=7n);t>0n;)e.putByte(Number((t&0b01111111n)<<1n)|(t>0b01111111n?1:0)),t>>=7n}function bo(t,n){let e=n.getByte(),i=t?BigInt(e&252)>>2n:BigInt(e&254)>>1n;const r=t?!!(e&2):!1;let s=t?6:7;for(;e&1;)e=n.getByte(),i|=BigInt((e&254)>>1)<<BigInt(s),s+=7;return r?-i:i}function Ou(t,n,e){if(e<0)throw new Error("EncodeIndex invalid length.");if(n<0||n>=e)throw new Error("EncodeIndex out of bounds.");if(!(e<=1)){if(e==2){t.bitField.putBit(n===1);return}go(BigInt(n),!1,t.body)}}function Bu(t,n){if(n<0)throw new Error("DecodeIndex invalid length.");let e;if(n<=1?e=0:n==2?e=t.bitField.getBit()?1:0:e=Number(bo(!1,t.body)),e<0||e>=n)throw new Error("DecodeIndex out of bounds.");return e}var vo={exports:{}};(function(t,n){(function(e,i){t.exports=i()})(typeof self<"u"?self:typeof window<"u"?window:Zi,function(){var e="3.7.7",i=e,r=typeof Buffer=="function",s=typeof TextDecoder=="function"?new TextDecoder:void 0,a=typeof TextEncoder=="function"?new TextEncoder:void 0,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",u=Array.prototype.slice.call(o),l=function(I){var H={};return I.forEach(function(J,ge){return H[J]=ge}),H}(u),f=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,p=String.fromCharCode.bind(String),m=typeof Uint8Array.from=="function"?Uint8Array.from.bind(Uint8Array):function(I){return new Uint8Array(Array.prototype.slice.call(I,0))},d=function(I){return I.replace(/=/g,"").replace(/[+\/]/g,function(H){return H=="+"?"-":"_"})},g=function(I){return I.replace(/[^A-Za-z0-9\+\/]/g,"")},w=function(I){for(var H,J,ge,re,C="",W=I.length%3,Te=0;Te<I.length;){if((J=I.charCodeAt(Te++))>255||(ge=I.charCodeAt(Te++))>255||(re=I.charCodeAt(Te++))>255)throw new TypeError("invalid character found");H=J<<16|ge<<8|re,C+=u[H>>18&63]+u[H>>12&63]+u[H>>6&63]+u[H&63]}return W?C.slice(0,W-3)+"===".substring(W):C},y=typeof btoa=="function"?function(I){return btoa(I)}:r?function(I){return Buffer.from(I,"binary").toString("base64")}:w,S=r?function(I){return Buffer.from(I).toString("base64")}:function(I){for(var H=4096,J=[],ge=0,re=I.length;ge<re;ge+=H)J.push(p.apply(null,I.subarray(ge,ge+H)));return y(J.join(""))},v=function(I,H){return H===void 0&&(H=!1),H?d(S(I)):S(I)},M=function(I){if(I.length<2){var H=I.charCodeAt(0);return H<128?I:H<2048?p(192|H>>>6)+p(128|H&63):p(224|H>>>12&15)+p(128|H>>>6&63)+p(128|H&63)}else{var H=65536+(I.charCodeAt(0)-55296)*1024+(I.charCodeAt(1)-56320);return p(240|H>>>18&7)+p(128|H>>>12&63)+p(128|H>>>6&63)+p(128|H&63)}},T=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,O=function(I){return I.replace(T,M)},Y=r?function(I){return Buffer.from(I,"utf8").toString("base64")}:a?function(I){return S(a.encode(I))}:function(I){return y(O(I))},E=function(I,H){return H===void 0&&(H=!1),H?d(Y(I)):Y(I)},D=function(I){return E(I,!0)},A=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,k=function(I){switch(I.length){case 4:var H=(7&I.charCodeAt(0))<<18|(63&I.charCodeAt(1))<<12|(63&I.charCodeAt(2))<<6|63&I.charCodeAt(3),J=H-65536;return p((J>>>10)+55296)+p((J&1023)+56320);case 3:return p((15&I.charCodeAt(0))<<12|(63&I.charCodeAt(1))<<6|63&I.charCodeAt(2));default:return p((31&I.charCodeAt(0))<<6|63&I.charCodeAt(1))}},F=function(I){return I.replace(A,k)},U=function(I){if(I=I.replace(/\s+/g,""),!f.test(I))throw new TypeError("malformed base64.");I+="==".slice(2-(I.length&3));for(var H,J="",ge,re,C=0;C<I.length;)H=l[I.charAt(C++)]<<18|l[I.charAt(C++)]<<12|(ge=l[I.charAt(C++)])<<6|(re=l[I.charAt(C++)]),J+=ge===64?p(H>>16&255):re===64?p(H>>16&255,H>>8&255):p(H>>16&255,H>>8&255,H&255);return J},K=typeof atob=="function"?function(I){return atob(g(I))}:r?function(I){return Buffer.from(I,"base64").toString("binary")}:U,ie=r?function(I){return m(Buffer.from(I,"base64"))}:function(I){return m(K(I).split("").map(function(H){return H.charCodeAt(0)}))},q=function(I){return ie(we(I))},_e=r?function(I){return Buffer.from(I,"base64").toString("utf8")}:s?function(I){return s.decode(ie(I))}:function(I){return F(K(I))},we=function(I){return g(I.replace(/[-_]/g,function(H){return H=="-"?"+":"/"}))},Me=function(I){return _e(we(I))},je=function(I){if(typeof I!="string")return!1;var H=I.replace(/\s+/g,"").replace(/={0,2}$/,"");return!/[^\s0-9a-zA-Z\+/]/.test(H)||!/[^\s0-9a-zA-Z\-_]/.test(H)},te=function(I){return{value:I,enumerable:!1,writable:!0,configurable:!0}},Ce=function(){var I=function(H,J){return Object.defineProperty(String.prototype,H,te(J))};I("fromBase64",function(){return Me(this)}),I("toBase64",function(H){return E(this,H)}),I("toBase64URI",function(){return E(this,!0)}),I("toBase64URL",function(){return E(this,!0)}),I("toUint8Array",function(){return q(this)})},Ze=function(){var I=function(H,J){return Object.defineProperty(Uint8Array.prototype,H,te(J))};I("toBase64",function(H){return v(this,H)}),I("toBase64URI",function(){return v(this,!0)}),I("toBase64URL",function(){return v(this,!0)})},It=function(){Ce(),Ze()},tt={version:e,VERSION:i,atob:K,atobPolyfill:U,btoa:y,btoaPolyfill:w,fromBase64:Me,toBase64:E,encode:E,encodeURI:D,encodeURL:D,utob:O,btou:F,decode:Me,isValid:je,fromUint8Array:v,toUint8Array:q,extendString:Ce,extendUint8Array:Ze,extendBuiltins:It};return tt.Base64={},Object.keys(tt).forEach(function(I){return tt.Base64[I]=tt[I]}),tt})})(vo);var $u=vo.exports;Object.defineProperty(pe,"__esModule",{value:!0});pe.Parser=pe.EncodeContext=pe.DecodeContext=void 0;var wo=Ru(mt),qt=Zt,li=de,yo=$u;function Ru(t){return t&&t.__esModule?t:{default:t}}function Lu(t){return wo.default.deflateRaw(t).buffer}function Fu(t){return wo.default.inflateRaw(t).buffer}function Uu(t,n=!1){return yo.Base64.fromUint8Array(new Uint8Array(t),n)}function zu(t){return yo.Base64.toUint8Array(t).buffer}class Hu{encode(n,e={}){const i=new To(this,e);i.encode(this,n);const r=i.final();return e.base64??!1?Uu(r,e.base64UrlSafe??!1):r}decode(n){return typeof n=="string"&&(n=zu(n)),new Io(this,n).decode(this)}}pe.Parser=Hu;const ko=1,Eo=2;class To{constructor(n,e={}){P(this,"stack",[]);P(this,"bitField",new qt.BitIO);P(this,"body",new qt.IO);this.baseType=n,this.compressed=e.compressed??!0,this.forceCompressed=e.forceCompressed??!1}compress(n){if(!this.compressed)return{compressed:!1,data:n};const e=Lu(n);return e.byteLength<n.byteLength||this.forceCompressed?{compressed:!0,data:e}:{compressed:!1,data:n}}final(){const n=new qt.IO;n.putBuffer(new Uint32Array([this.baseType.magic]).buffer);const e=n.withholdByte(),{compressed:i,data:r}=this.compress(this.bitField.final());(0,li.encodeBigInt)(BigInt(r.byteLength),!1,n),n.putBuffer(r);const{compressed:s,data:a}=this.compress(this.body.final());return n.putBuffer(a),e((s?ko:0)|(i?Eo:0)),n.final()}encode(n,e){this.stack.push(n),n.encodeInternal(this,e),this.stack.pop()}}pe.EncodeContext=To;class Io{constructor(n,e){P(this,"stack",[]);this.baseType=n;const i=new qt.IO(e),r=new Uint32Array(i.getBuffer(4))[0];if(r!=this.baseType.magic)throw new Error(`ParserContext magic check failed. Expected ${(0,li.hex)(this.baseType.magic,4)} Got ${(0,li.hex)(r,4)}`);const s=i.getByte(),a=Number((0,li.decodeBigInt)(!1,i)),o=this.decompress(i.getBuffer(a),s&Eo);this.bitField=new qt.BitIO(o);const u=this.decompress(i.getBuffer(i.length-i.pointer),s&ko);this.body=new qt.IO(u)}decompress(n,e){return e?Fu(n):n}decode(n){this.stack.push(n);const e=n.decodeInternal(this);return this.stack.pop(),e}}pe.DecodeContext=Io;var vi={};Object.defineProperty(vi,"__esModule",{value:!0});vi.ModifyHashParser=void 0;var ju=pe,Zu=de;class Vu extends ju.Parser{constructor(n,e){super(),this.modifier=n,this.parser=e,this.magic=(0,Zu.hashStr)(`ModifyHashParser:${this.parser.magic}:${this.modifier}`)}encodeInternal(n,e){n.encode(this.parser,e)}decodeInternal(n){return n.decode(this.parser)}}vi.ModifyHashParser=Vu;var Ot={};Object.defineProperty(Ot,"__esModule",{value:!0});Ot.BigIntParser=void 0;var Yu=pe,sr=de;class Xu extends Yu.Parser{constructor(n){super(),this.signed=n,this.magic=(0,sr.hashStr)(`BigIntParser:${this.signed?"Signed":"Unsigned"}`)}encodeInternal(n,e){(0,sr.encodeBigInt)(e,this.signed,n.body)}decodeInternal(n){return(0,sr.decodeBigInt)(this.signed,n.body)}}Ot.BigIntParser=Xu;var Ln={};Object.defineProperty(Ln,"__esModule",{value:!0});Ln.BinaryParser=void 0;var Wu=pe,Gu=de,Qs=Ot;class Ku extends Wu.Parser{constructor(){super(...arguments);P(this,"magic",(0,Gu.hashStr)("BinaryParser"))}encodeInternal(e,i){e.encode(new Qs.BigIntParser(!1),BigInt(i.byteLength)),e.body.putBuffer(i)}decodeInternal(e){const i=Number(e.decode(new Qs.BigIntParser(!1)));return e.body.getBuffer(i)}}Ln.BinaryParser=Ku;var wi={};Object.defineProperty(wi,"__esModule",{value:!0});wi.NumberParser=void 0;var qu=pe,Ju=de;class Qu extends qu.Parser{constructor(n){super(),this.type=n,this.magic=(0,Ju.hashStr)(`NumberParser:${this.type}`)}encodeInternal(n,e){switch(n.body.expect(8),this.type){case"u8":n.body.view.setUint8(n.body.pointer,e),n.body.pointer+=1;break;case"u16":n.body.view.setUint16(n.body.pointer,e,!0),n.body.pointer+=2;break;case"u32":n.body.view.setUint32(n.body.pointer,e,!0),n.body.pointer+=4;break;case"u64":n.body.view.setBigUint64(n.body.pointer,e,!0),n.body.pointer+=8;break;case"i8":n.body.view.setInt8(n.body.pointer,e),n.body.pointer+=1;break;case"i16":n.body.view.setInt16(n.body.pointer,e,!0),n.body.pointer+=2;break;case"i32":n.body.view.setInt32(n.body.pointer,e,!0),n.body.pointer+=4;break;case"i64":n.body.view.setBigInt64(n.body.pointer,e,!0),n.body.pointer+=8;break;case"f32":n.body.view.setFloat32(n.body.pointer,e,!0),n.body.pointer+=4;break;case"f64":n.body.view.setFloat64(n.body.pointer,e,!0),n.body.pointer+=8;break;default:throw new Error("NumParser invalid type.")}}decodeInternal(n){let e;switch(this.type){case"u8":e=n.body.view.getUint8(n.body.pointer),n.body.pointer+=1;break;case"u16":e=n.body.view.getUint16(n.body.pointer,!0),n.body.pointer+=2;break;case"u32":e=n.body.view.getUint32(n.body.pointer,!0),n.body.pointer+=4;break;case"u64":e=n.body.view.getBigUint64(n.body.pointer,!0),n.body.pointer+=8;break;case"i8":e=n.body.view.getInt8(n.body.pointer),n.body.pointer+=1;break;case"i16":e=n.body.view.getInt16(n.body.pointer,!0),n.body.pointer+=2;break;case"i32":e=n.body.view.getInt32(n.body.pointer,!0),n.body.pointer+=4;break;case"i64":e=n.body.view.getBigInt64(n.body.pointer,!0),n.body.pointer+=8;break;case"f32":e=n.body.view.getFloat32(n.body.pointer,!0),n.body.pointer+=4;break;case"f64":e=n.body.view.getFloat64(n.body.pointer,!0),n.body.pointer+=8;break;default:throw new Error("NumParser invalid type.")}return e}}wi.NumberParser=Qu;var Fn={};Object.defineProperty(Fn,"__esModule",{value:!0});Fn.StringParser=void 0;var ef=pe,tf=de,ea=Ln;class nf extends ef.Parser{constructor(){super(...arguments);P(this,"magic",(0,tf.hashStr)("StringParser"))}encodeInternal(e,i){e.encode(new ea.BinaryParser,new TextEncoder().encode(i))}decodeInternal(e){return new TextDecoder("utf-8").decode(e.decode(new ea.BinaryParser))}}Fn.StringParser=nf;var yi={};Object.defineProperty(yi,"__esModule",{value:!0});yi.BooleanParser=void 0;var rf=pe,sf=de;class af extends rf.Parser{constructor(){super(...arguments);P(this,"magic",(0,sf.hashStr)("BooleanParser"))}encodeInternal(e,i){e.bitField.putBit(i)}decodeInternal(e){return e.bitField.getBit()}}yi.BooleanParser=af;var ki={};Object.defineProperty(ki,"__esModule",{value:!0});ki.NullableParser=void 0;var of=pe,lf=de;class cf extends of.Parser{constructor(n){super(),this.type=n,this.magic=(0,lf.hashStr)(`NullableParser:${this.type.magic}`)}encodeInternal(n,e){e!==null?(n.bitField.putBit(!0),n.encode(this.type,e)):n.bitField.putBit(!1)}decodeInternal(n){return n.bitField.getBit()?n.decode(this.type):null}}ki.NullableParser=cf;var Un={};Object.defineProperty(Un,"__esModule",{value:!0});Un.ObjectParser=void 0;var uf=pe,ff=de;class hf extends uf.Parser{constructor(n){super(),this.objType=n,this.keys=Object.keys(this.objType).toSorted(),this.magic=(0,ff.hashStr)(`StringParser:${this.keys.map(e=>`${String(e)}-${this.objType[e].magic}`).join(",")}`)}encodeInternal(n,e){for(const i of this.keys)n.encode(this.objType[i],e[i])}decodeInternal(n){let e={};for(const i of this.keys)e[i]=n.decode(this.objType[i]);return e}}Un.ObjectParser=hf;var Ei={};Object.defineProperty(Ei,"__esModule",{value:!0});Ei.ArrayParser=void 0;var df=pe,_f=de,ta=Ot;class mf extends df.Parser{constructor(n){super(),this.arrType=n,this.magic=(0,_f.hashStr)(`ArrayParser:${this.arrType.magic}`)}encodeInternal(n,e){n.encode(new ta.BigIntParser(!1),BigInt(e.length));for(const i of e)n.encode(this.arrType,i)}decodeInternal(n){const e=Number(n.decode(new ta.BigIntParser(!1))),i=[];for(let r=0;r<e;r++)i.push(n.decode(this.arrType));return i}}Ei.ArrayParser=mf;var Ti={};Object.defineProperty(Ti,"__esModule",{value:!0});Ti.MapParser=void 0;var pf=pe,gf=de,na=Ot;class bf extends pf.Parser{constructor(n,e){super(),this.keyType=n,this.valueType=e,this.magic=(0,gf.hashStr)(`MapParser:${this.keyType.magic}-${this.valueType.magic}`)}encodeInternal(n,e){n.encode(new na.BigIntParser(!1),BigInt(e.size));for(const[i,r]of e.entries())n.encode(this.keyType,i),n.encode(this.valueType,r)}decodeInternal(n){const e=new Map,i=Number(n.decode(new na.BigIntParser(!1)));for(let r=0;r<i;r++){const s=n.decode(this.keyType),a=n.decode(this.valueType);e.set(s,a)}return e}}Ti.MapParser=bf;var Ii={};Object.defineProperty(Ii,"__esModule",{value:!0});Ii.DateParser=void 0;var vf=pe,wf=de,ia=Ot;class yf extends vf.Parser{constructor(){super(...arguments);P(this,"magic",(0,wf.hashStr)("DateParser"))}encodeInternal(e,i){e.encode(new ia.BigIntParser(!1),BigInt(i.valueOf()))}decodeInternal(e){return new Date(Number(e.decode(new ia.BigIntParser(!1))))}}Ii.DateParser=yf;var Pi={};Object.defineProperty(Pi,"__esModule",{value:!0});Pi.TupleParser=void 0;var kf=pe,Ef=de;class Tf extends kf.Parser{constructor(n){super(),this.elementTypes=n,this.magic=(0,Ef.hashStr)(`TupleParser:${this.elementTypes.map(e=>e.magic).join(",")}`)}encodeInternal(n,e){for(let i=0;i<e.length;i++)n.encode(this.elementTypes[i],e[i])}decodeInternal(n){let e=[];for(let i=0;i<this.elementTypes.length;i++)e.push(n.decode(this.elementTypes[i]));return e}}Pi.TupleParser=Tf;var Si={};Object.defineProperty(Si,"__esModule",{value:!0});Si.BranchParser=void 0;var If=pe,ni=de;class Pf extends If.Parser{constructor(n){super(),this.branchTypes=Object.entries(n).toSorted(([e],[i])=>(0,ni.stringSort)(e,i)),this.magic=(0,ni.hashStr)(`BranchParser:${this.branchTypes.map(([e,i])=>`${e}-${i.magic}`).join(",")}`)}encodeInternal(n,e){const i=this.branchTypes.findIndex(([r])=>r==e[0]);if(i===-1)throw new Error("BranchParser: Failed to find key index.");(0,ni.encodeIndex)(n,i,this.branchTypes.length),n.encode(this.branchTypes[i][1],e[1])}decodeInternal(n){const e=(0,ni.decodeIndex)(n,this.branchTypes.length);return[this.branchTypes[e][0],n.decode(this.branchTypes[e][1])]}}Si.BranchParser=Pf;var Ai={};Object.defineProperty(Ai,"__esModule",{value:!0});Ai.BranchByKeyParser=void 0;var Sf=pe,ii=de,Af=Un;class xf extends Sf.Parser{constructor(n,e){super(),this.key=n,this.branchTypes=Object.entries(e).toSorted(([i],[r])=>(0,ii.stringSort)(i,r)).map(([i,r])=>{if(this.key in r)throw new Error(`BranchByKeyParser: Key is included in parser map, remove key ${i}.${this.key}`);return[i,new Af.ObjectParser(r)]}),this.magic=(0,ii.hashStr)(`BranchByKeyParser:${this.key}:${this.branchTypes.map(([i,r])=>`${i}-${r.magic}`).join(",")}`)}encodeInternal(n,e){const i=this.branchTypes.findIndex(([r])=>r==e[this.key]);if(i===-1)throw new Error("BranchByKeyParser: Failed to find key index.");(0,ii.encodeIndex)(n,i,this.branchTypes.length),n.encode(this.branchTypes[i][1],e)}decodeInternal(n){const e=(0,ii.decodeIndex)(n,this.branchTypes.length);return{...n.decode(this.branchTypes[e][1]),[this.key]:this.branchTypes[e][0]}}}Ai.BranchByKeyParser=xf;var xi={};Object.defineProperty(xi,"__esModule",{value:!0});xi.EnumParser=void 0;var Nf=pe,ri=de;class Cf extends Nf.Parser{constructor(n){super(),this.values=n.toSorted((e,i)=>(0,ri.stringSort)(String(e),String(i))),this.magic=(0,ri.hashStr)(`EnumParser:${this.values.join(",")}`)}encodeInternal(n,e){const i=this.values.findIndex(r=>r==e);if(i===-1)throw new Error("EnumParser: Failed to find key index.");(0,ri.encodeIndex)(n,i,this.values.length)}decodeInternal(n){const e=(0,ri.decodeIndex)(n,this.values.length);return this.values[e]}}xi.EnumParser=Cf;var Ni={};Object.defineProperty(Ni,"__esModule",{value:!0});Ni.EnumFallbackParser=void 0;var Df=pe,si=de,ra=Fn;class Mf extends Df.Parser{constructor(n){super(),this.values=n.toSorted((e,i)=>(0,si.stringSort)(e,i)),this.magic=(0,si.hashStr)(`EnumFallbackParser:${this.values.join(",")}`)}encodeInternal(n,e){const i=this.values.findIndex(r=>r==e);i===-1?(n.bitField.putBit(!1),n.encode(new ra.StringParser,e)):(n.bitField.putBit(!0),(0,si.encodeIndex)(n,i,this.values.length))}decodeInternal(n){if(n.bitField.getBit()){const e=(0,si.decodeIndex)(n,this.values.length);return this.values[e]}else return n.decode(new ra.StringParser)}}Ni.EnumFallbackParser=Mf;(function(t){Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ArrayParser",{enumerable:!0,get:function(){return m.ArrayParser}}),Object.defineProperty(t,"BigIntParser",{enumerable:!0,get:function(){return s.BigIntParser}}),Object.defineProperty(t,"BinaryParser",{enumerable:!0,get:function(){return a.BinaryParser}}),Object.defineProperty(t,"BitIO",{enumerable:!0,get:function(){return e.BitIO}}),Object.defineProperty(t,"BooleanParser",{enumerable:!0,get:function(){return l.BooleanParser}}),Object.defineProperty(t,"BranchByKeyParser",{enumerable:!0,get:function(){return S.BranchByKeyParser}}),Object.defineProperty(t,"BranchParser",{enumerable:!0,get:function(){return y.BranchParser}}),Object.defineProperty(t,"DateParser",{enumerable:!0,get:function(){return g.DateParser}}),Object.defineProperty(t,"DecodeContext",{enumerable:!0,get:function(){return n.DecodeContext}}),Object.defineProperty(t,"EncodeContext",{enumerable:!0,get:function(){return n.EncodeContext}}),Object.defineProperty(t,"EnumFallbackParser",{enumerable:!0,get:function(){return M.EnumFallbackParser}}),Object.defineProperty(t,"EnumParser",{enumerable:!0,get:function(){return v.EnumParser}}),Object.defineProperty(t,"IO",{enumerable:!0,get:function(){return e.IO}}),Object.defineProperty(t,"MapParser",{enumerable:!0,get:function(){return d.MapParser}}),Object.defineProperty(t,"ModifyHashParser",{enumerable:!0,get:function(){return r.ModifyHashParser}}),Object.defineProperty(t,"NullableParser",{enumerable:!0,get:function(){return f.NullableParser}}),Object.defineProperty(t,"NumberParser",{enumerable:!0,get:function(){return o.NumberParser}}),Object.defineProperty(t,"ObjectParser",{enumerable:!0,get:function(){return p.ObjectParser}}),Object.defineProperty(t,"Parser",{enumerable:!0,get:function(){return n.Parser}}),Object.defineProperty(t,"ParserType",{enumerable:!0,get:function(){return n.ParserType}}),Object.defineProperty(t,"StringParser",{enumerable:!0,get:function(){return u.StringParser}}),Object.defineProperty(t,"TupleParser",{enumerable:!0,get:function(){return w.TupleParser}}),t.array=U,t.bigint=O,t.binary=Y,t.boolean=A,t.branch=_e,t.branchByKey=we,t.date=ie,Object.defineProperty(t,"decodeBigInt",{enumerable:!0,get:function(){return i.decodeBigInt}}),Object.defineProperty(t,"decodeIndex",{enumerable:!0,get:function(){return i.decodeIndex}}),Object.defineProperty(t,"encodeBigInt",{enumerable:!0,get:function(){return i.encodeBigInt}}),Object.defineProperty(t,"encodeIndex",{enumerable:!0,get:function(){return i.encodeIndex}}),t.enum=Me,t.enumFallback=je,Object.defineProperty(t,"hashStr",{enumerable:!0,get:function(){return i.hashStr}}),t.map=K,t.modifyhash=T,t.nullable=k,t.number=E,t.object=F,t.string=D,Object.defineProperty(t,"stringSort",{enumerable:!0,get:function(){return i.stringSort}}),t.tuple=q;var n=pe,e=Zt,i=de,r=vi,s=Ot,a=Ln,o=wi,u=Fn,l=yi,f=ki,p=Un,m=Ei,d=Ti,g=Ii,w=Pi,y=Si,S=Ai,v=xi,M=Ni;function T(te,Ce){return new r.ModifyHashParser(te,Ce)}function O(te){return new s.BigIntParser(te)}function Y(){return new a.BinaryParser}function E(te){return new o.NumberParser(te)}function D(){return new u.StringParser}function A(){return new l.BooleanParser}function k(te){return new f.NullableParser(te)}function F(te){return new p.ObjectParser(te)}function U(te){return new m.ArrayParser(te)}function K(te,Ce){return new d.MapParser(te,Ce)}function ie(){return new g.DateParser}function q(te){return new w.TupleParser(te)}function _e(te){return new y.BranchParser(te)}function we(te,Ce){return new S.BranchByKeyParser(te,Ce)}function Me(te){return new v.EnumParser(te)}function je(te){return new M.EnumFallbackParser(te)}})(ne);function Ci(t){return t<0?0:t>1?1:t}function Of(t,n,e,i){return Math.sqrt((e-t)**2+(i-n)**2)}function Bf(t,n,e,i,r){return(t<n||t>e)&&console.warn(`Mapped value outside of mapping range. mapRange(${t}, ${n}, ${e}, ${i}, ${r})`),i+(t-n)/(e-n)*(r-i)}function $f(t,n,e,i,r){return Math.floor(Bf(t,n,e,i,r+1))}function sa(t){let n=0;for(;t;)t&=t-1,n++;return n}function*Rf(t,n){let e=t,i=n,r=1,s=1;for(;;){for(;2*e*r<s;)yield{x:e,y:i},e+=r;for(;2*i*r<s;)yield{x:e,y:i},i+=r;r=-1*r,s+=1}}function Po(t,n){if(t instanceof HTMLCanvasElement){const e=t.getContext("2d");if(!e)throw new Error("2d canvas context is not supported on this machine or browser.");return[t,e]}else if(t instanceof HTMLImageElement){const e=document.createElement("canvas");e.width=t.width,e.height=t.height;const i=e.getContext("2d");if(!i)throw new Error("2d canvas context is not supported on this machine or browser.");return[e,i]}else if(typeof t=="number"){const e=document.createElement("canvas");e.width=t,e.height=n;const i=e.getContext("2d");if(!i)throw new Error("2d canvas context is not supported on this machine or browser.");return[e,i]}else{const e=document.createElement("canvas"),i=e.getContext("2d");if(!i)throw new Error("2d canvas context is not supported on this machine or browser.");return[e,i]}}const nn=Symbol("TILE_NO_NEARBY");class Mr{constructor(n,e,i){P(this,"world");P(this,"x");P(this,"y");P(this,"minesNearbyCache",null);this.world=n,this.x=e,this.y=i}minesNearby(n=!1){if(this.minesNearbyCache!==null&&n)return this.minesNearbyCache;let e=!0,i=0;for(const r of this.searchPattern)i+=this.world.getTile(this.x+r.x,this.y+r.y).numMines(),i!=0&&(e=!1);return this.minesNearbyCache=i==0&&e?nn:i,this.minesNearbyCache}flagsNearby(){let n=!0,e=0;for(const i of this.searchPattern)e+=this.world.getTile(this.x+i.x,this.y+i.y).numFlags(),e!=0&&(n=!1);return e==0&&n?nn:e}isDeathTile(){const n=this.world.getGeneratedChunk(Math.floor(this.x/Q),Math.floor(this.y/Q)),e=this.x-n.chunkX*Q,i=this.y-n.chunkY*Q;return n.deaths.some(r=>r.x==e&&r.y==i)}static load(n,e,i,r){throw new Error("Tile.load needs to be implemented on derived class.")}}class So extends Mr{constructor(e,i,r,s){super(e,i,r);P(this,"_numMines");P(this,"_numFlags",0);P(this,"isRevealed",!1);P(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this._numMines=s}numMines(){return this._numMines}numFlags(){return this._numFlags}flag(){this.isRevealed||(this._numFlags++,this._numFlags%=this.numMaxMines+1)}reveal(){return this.isRevealed||this._numFlags>0?!1:(this._numMines==0?this.isRevealed=!0:this._numFlags=this._numMines,!0)}save(e){e.putBit(this.isRevealed),this.isRevealed||e.putBits(this._numFlags,sa(this.numMaxMines))}static loadInternal(e,i){return e.isRevealed=i.getBit(),e.isRevealed||(e._numFlags=i.getBits(sa(e.numMaxMines))),e}static load(e,i,r,s){throw new Error("MultiMineTile.load needs to be implemented on derived class.")}}class Or extends So{constructor(e,i,r){const s=Be(e.tileSeed,i,r,0)>.8?$f(Be(e.tileSeed,i,r,1),0,1,1,3):0;super(e,i,r,s);P(this,"type","blueberry");P(this,"numMaxMines",3)}static load(e,i,r,s){return this.loadInternal(new Or(e,i,r),s)}}var Rt=(t=>(t[t.Covered=0]="Covered",t[t.Flagged=1]="Flagged",t[t.Revealed=2]="Revealed",t))(Rt||{});class zn extends Mr{constructor(e,i,r,s){super(e,i,r);P(this,"isMine");P(this,"state",0);P(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this.isMine=s}numMines(){return this.isMine?1:0}numFlags(){return this.state==1?1:0}flag(){this.state!=2&&(this.state==0?this.state=1:this.state=0)}reveal(){return this.state!=0?!1:(this.isMine?this.state=1:this.state=2,!0)}save(e){this.isMine?e.putBit(this.state==1):this.state==0?e.putBit(!1):(e.putBit(!0),e.putBit(this.state==1))}static loadInternal(e,i){return e.isMine?e.state=i.getBit()?1:0:i.getBit()?e.state=i.getBit()?1:2:e.state=0,e}static load(e,i,r,s){throw new Error("SingleMineTile.load needs to be implemented on derived class.")}}class Br extends zn{constructor(e,i,r){const s=Be(e.tileSeed,i,r,0)>.625;super(e,i,r,s);P(this,"type","chocolate")}static load(e,i,r,s){return this.loadInternal(new Br(e,i,r),s)}}class $r extends zn{constructor(e,i,r){const s=Be(e.tileSeed,i,r,0)>.825;super(e,i,r,s);P(this,"type","strawberry");P(this,"secondaryNearbyCountModifier",null);P(this,"secondaryNearbyCountRightSide",!1);Be(e.tileSeed,i,r,1)>.3&&(this.secondaryNearbyCountModifier=Be(e.tileSeed,i,r,2)>.3?1:-1,this.secondaryNearbyCountRightSide=Be(e.tileSeed,i,r,3)>.5)}secondaryMinesNearby(e){if(this.secondaryNearbyCountModifier==null)return null;const i=this.minesNearby(e);if(i==nn||i<1)return null;const r=i+this.secondaryNearbyCountModifier;return r<=0?null:r}static load(e,i,r,s){return this.loadInternal(new $r(e,i,r),s)}}function Ao(t,n,e,i){const r=Math.floor(e/n),s=Math.floor(i/n),a=(r+s%2)%2==0,o=Math.abs(e%n)+Math.abs(i%n)*n,u=Math.floor(Be(t.tileSeed,r,s,0)*n**2),l=a?o!=u:o==u;return{isDark:a,isMine:l}}class Rr extends zn{constructor(e,i,r){const{isDark:s,isMine:a}=Ao(e,2,i,r);super(e,i,r,a);P(this,"type","waffle");P(this,"isDark");this.isDark=s}static load(e,i,r,s){return this.loadInternal(new Rr(e,i,r),s)}}class Lr extends zn{constructor(e,i,r){const{isDark:s,isMine:a}=Ao(e,3,i,r);super(e,i,r,a);P(this,"type","stroopwafel");P(this,"isDark");this.isDark=s}static load(e,i,r,s){return this.loadInternal(new Lr(e,i,r),s)}}class Fr extends zn{constructor(e,i,r){const s=Be(e.tileSeed,i,r,0)>.85;super(e,i,r,s);P(this,"type","vanilla")}static load(e,i,r,s){return this.loadInternal(new Fr(e,i,r),s)}}var ci=(t=>(t[t.None=0]="None",t[t.Normal=1]="Normal",t[t.Anti=2]="Anti",t))(ci||{}),wn=(t=>(t[t.Covered=0]="Covered",t[t.Flagged=1]="Flagged",t[t.AntiFlagged=2]="AntiFlagged",t[t.Revealed=3]="Revealed",t))(wn||{});class Lf extends Mr{constructor(e,i,r,s){super(e,i,r);P(this,"mine");P(this,"state",0);P(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this.mine=s}numMines(){return this.mine==1?1:this.mine==2?-1:0}numFlags(){return this.state==1?1:this.state==2?-1:0}flag(){switch(this.state){case 0:this.state=1;break;case 1:this.state=2;break;case 2:this.state=0;break}}reveal(){return this.state!=0?!1:(this.mine==0?this.state=3:this.state=this.mine==1?1:2,!0)}save(e){this.mine==1||this.mine==2?this.state==0?e.putBit(!1):(e.putBit(!0),e.putBit(this.state==2)):this.state==0?e.putBit(!1):(e.putBit(!0),this.state==3?e.putBit(!1):(e.putBit(!0),e.putBit(this.state==2)))}static loadInternal(e,i){return e.mine==1||e.mine==2?i.getBit()?e.state=i.getBit()?2:1:e.state=0:i.getBit()?i.getBit()?e.state=i.getBit()?2:1:e.state=3:e.state=0,e}static load(e,i,r,s){throw new Error("SingleAntiMineTile.load needs to be implemented on derived class.")}}class Ur extends Lf{constructor(e,i,r){const s=Be(e.tileSeed,i,r,0)>.7,a=Be(e.tileSeed,i,r,1)>.5;super(e,i,r,s?a?ci.Anti:ci.Normal:ci.None);P(this,"type","cookies_and_cream")}static load(e,i,r,s){return this.loadInternal(new Ur(e,i,r),s)}}const Ff={type:"collection",weight:1,scale:24,smoothness:.8,biomes:[{type:"collection",weight:5,scale:24,smoothness:.8,biomes:[{type:"biome",weight:3,tile:Fr},{type:"biome",weight:1,tile:Br}]},{type:"collection",weight:2,scale:64,smoothness:0,biomes:[{type:"biome",weight:1,tile:Rr},{type:"biome",weight:2,tile:Lr}]},{type:"collection",weight:2,scale:32,smoothness:.5,biomes:[{type:"biome",weight:1,tile:Or},{type:"biome",weight:1,tile:$r}]},{type:"biome",weight:2,tile:Ur}]};function Uf(t,n,e,i,r){const s=Tr(t,!1),a=hs(s(),n,e)*i,o=hs(s(),n,e)*i;return bl(s(),n+a,e+o,r)}function xo(t,n,e){const i=Tr(t.biomeSeed,!1);let r=Ff;for(;r.type=="collection";){const s=Uf(i(),n/r.scale,e/r.scale,r.smoothness,r.biomes.map(a=>a.weight));r=r.biomes[s]}return r.tile}function No(t,n,e){const i=xo(t,n,e);return new i(t,n,e)}class Co{constructor(n,e,i){P(this,"world");P(this,"chunkX");P(this,"chunkY");this.world=n,this.chunkX=e,this.chunkY=i}isGenerated(){return this instanceof rn}generate(){if(this.isGenerated())throw new Error("Cannot generate an already generated chunk.");console.log(`Generating new chunk: ${this.chunkX}, ${this.chunkY}`);const n=[];for(let e=0;e<Q;e++)for(let i=0;i<Q;i++){const r=this.world.generateTile(this.chunkX*Q+i,this.chunkY*Q+e);n.push(r)}return new rn(this.world,this.chunkX,this.chunkY,n)}}class rn extends Co{constructor(e,i,r,s){super(e,i,r);P(this,"tiles");P(this,"deaths",[]);if(this.tiles=s,this.tiles.length!=Q*Q)throw new Error("GeneratedChunk incorrect tiles length.")}getTileAbsolute(e,i){return this.getTile(e-this.chunkX*Q,i-this.chunkY*Q)}getTile(e,i){return this.tiles[e+i*Q]}resetTileAbsolute(e,i){return this.resetTile(e-this.chunkX*Q,i-this.chunkY*Q)}resetTile(e,i){this.tiles[e+i*Q]=No(this.world,this.chunkX*Q+e,this.chunkY*Q+i)}encodeTiles(){const e=new ne.BitIO(2048);for(const i of this.tiles)i.save(e);return e.final()}static decodeTiles(e,i,r,s){const a=new ne.BitIO(s);let o=[];for(let u=0;u<Q;u++)for(let l=0;l<Q;l++){const f=i*Q+l,p=r*Q+u,d=xo(e,f,p).load(e,f,p,a);o.push(d)}return new rn(e,i,r,o)}save(){return{deaths:this.deaths,tiles:this.encodeTiles()}}static load(e,i,r,s){const a=rn.decodeTiles(e,i,r,s.tiles);return a.deaths=s.deaths,a}}let zf=0;function Hf(){return zf++}class Do{constructor(){P(this,"_dispatcherDestroyed",!1);P(this,"listeners",{})}get dispatcherDestroyed(){return this._dispatcherDestroyed}dispatcherCheckDestroyed(){if(this.dispatcherDestroyed)throw new Error("EventDispatcher used after destroyed.")}getListenersArr(n){return this.listeners[n]||(this.listeners[n]=[]),this.listeners[n]}*listenersIter(){for(const n in this.listeners){const e=this.listeners[n];for(const i of e)yield i}}addEventListener(n,e,i=!1,r=0){this.dispatcherCheckDestroyed();let s=this.getListenersArr(n);const a={key:n,callbackfn:e,priority:r,id:Hf(),once:i};return s.push(a),s.sort((o,u)=>o.priority-u.priority),a}dispatchEvent(n,e){this.dispatcherCheckDestroyed();const i=this.getListenersArr(n);for(const r of i){let s=!1;if(r.callbackfn({data:e,dispatcher:this,listener:r,stopPropagation:()=>s=!0}),r.once&&this.removeEventListener(r),s)break}}removeEventListener(n){this.dispatcherCheckDestroyed();let e=!1;if(typeof n!="number"){const i=this.getListenersArr(n.key);for(const r of i)r.id==n.id&&(i.splice(i.indexOf(r),1),e=!0)}else for(const i of this.listenersIter())i.id==n&&this.removeEventListener(i)&&(e=!0);return e}destroyDispatcher(){this.dispatcherCheckDestroyed(),this._dispatcherDestroyed=!0;for(const n in this.listeners)delete this.listeners[n]}}class Di extends Do{constructor(e){super();P(this,"seed");P(this,"tileSeed");P(this,"biomeSeed");P(this,"createdAt",new Date);P(this,"deaths",0);P(this,"chunks",{});P(this,"_revealCount",0);P(this,"_died",!1);this.seed=(e&4294967295)>>>0;const i=Tr(this.seed,!1);this.tileSeed=i(),this.biomeSeed=i(),this.addEventListener("die",({data:{x:r,y:s}})=>{this.deaths++;const a=this.getGeneratedChunk(Math.floor(r/Q),Math.floor(s/Q));a.deaths.push({x:r-a.chunkX*Q,y:s-a.chunkY*Q,diedAt:new Date})})}change(){this.dispatchEvent("change",null)}generateTile(e,i){return No(this,e,i)}getChunk(e,i){const r=this.chunks[`${e},${i}`];return r||new Co(this,e,i)}getGeneratedChunk(e,i){const r=this.getChunk(e,i);if(r.isGenerated())return r;const s=r.generate();return this.chunks[`${e},${i}`]=s,s}getTile(e,i){const r=Math.floor(e/Q),s=Math.floor(i/Q);return this.getGeneratedChunk(r,s).getTileAbsolute(e,i)}flag(e,i){const r=this.getTile(e,i);if(r.isDeathTile())return;const s=r.numFlags();r.flag();const a=r.numFlags();a==0&&a!=s&&(this.dispatchEvent("particle_unflag",{x:e,y:i}),this.dispatchEvent("sound_unflag",null))}_reveal(e,i){const r=this.getTile(e,i);if(r.reveal())if(this._revealCount++,r.numMines()!=0){this._died=!0,this.dispatchEvent("particle_explosion",{x:r.x,y:r.y}),this.dispatchEvent("die",{x:r.x,y:r.y});return}else this.dispatchEvent("particle_reveal",{x:r.x,y:r.y});let s=[],a=[];if(r.type=="strawberry"){const o=r.secondaryMinesNearby(!1);o!=null&&o==r.flagsNearby()&&a.push(r)}for(r.minesNearby()==r.flagsNearby()&&(a.includes(r)||a.push(r));a.length>0;){const o=a.pop();s.push(o);for(const u of o.searchPattern){const l=this.getTile(o.x+u.x,o.y+u.y);a.some(f=>f.x==l.x&&f.y==l.y)||s.some(f=>f.x==l.x&&f.y==l.y)||(l.minesNearby()==nn?a.push(l):s.push(l))}}for(const o of s)o.reveal()&&(this._revealCount++,o.numMines()!=0?(this._died=!0,this.dispatchEvent("particle_explosion",{x:o.x,y:o.y}),this.dispatchEvent("die",{x:o.x,y:o.y})):this.dispatchEvent("particle_reveal",{x:o.x,y:o.y}))}reveal(e,i){return this._revealCount=0,this._died=!1,this._reveal(e,i),this._revealCount>0&&this.dispatchEvent("sound_reveal",this._revealCount),this._died&&this.dispatchEvent("sound_explosion",null),this._died}reset(e,i){const r=this.getChunk(Math.floor(e/Q),Math.floor(i/Q));r.isGenerated()&&r.resetTileAbsolute(e,i)}closest0(e,i){for(const{x:r,y:s}of Rf(e,i)){const a=this.getTile(r,s);if(a.numMines()==0&&a.minesNearby()==nn)return{x:r,y:s}}throw new Error("This error should never happen, it's just here to make TypeScript happy.")}save(){const e={seed:this.seed,createdAt:this.createdAt,numDeaths:this.deaths,chunks:new Map};for(const i in this.chunks){const r=i,s=this.chunks[r];e.chunks.set(r,s.save())}return e}static load(e){const i=new Di(e.seed);return i.createdAt=e.createdAt,i.deaths=e.numDeaths,e.chunks.forEach((r,s)=>{const[a,o,u]=s.match(/^(-?\d+),(-?\d+)$/),[l,f]=[parseInt(o),parseInt(u)];i.chunks[s]=rn.load(i,l,f,r)}),i}}class zr extends Do{constructor(e,i){super();P(this,"world");P(this,"x",0);P(this,"y",0);P(this,"scale",64);this.world=e,i&&this.load(i)}change(){this.dispatchEvent("change",null)}load(e){this.x=e.x,this.y=e.y,this.scale=e.scale}save(){return{x:this.x,y:this.y,scale:this.scale}}translate(e,i,r){this.x-=i/this.scale,this.y-=r/this.scale}scaleFrom(e,i,r,s){const a=this.x+e.width/this.scale*(r/e.width-.5),o=this.y+e.height/this.scale*(s/e.height-.5);this.scale=i;const u=this.x+e.width/this.scale*(r/e.width-.5),l=this.y+e.height/this.scale*(s/e.height-.5);this.x-=u-a,this.y-=l-o}clampScale(e,i,r,s){return e.width/i<r&&(i=e.width/r),e.height/i<r&&(i=e.height/r),e.width/i>s&&(i=e.width/s),e.height/i>s&&(i=e.height/s),i}bounds(e,i,r=0){const s=this.x-e.width/this.scale/2-r,a=this.y-e.height/this.scale/2-r,o=this.x+e.width/this.scale/2+r,u=this.y+e.height/this.scale/2+r;return i?{minX:Math.floor(s),minY:Math.floor(a),maxX:Math.ceil(o),maxY:Math.ceil(u)}:{minX:s,minY:a,maxX:o,maxY:u}}inBounds(e,i,r,s=0){const a=this.bounds(e,!1,s);return i>=a.minX&&i<=a.maxX&&r>=a.minY&&r<=a.maxY}canvasPos(e,i,r,s){const a=(i-e.width/2)/this.scale+this.x,o=(r-e.height/2)/this.scale+this.y;return s?{x:Math.floor(a),y:Math.floor(o)}:{x:a,y:o}}transformCtx(e,i){i.translate(e.width/2,e.height/2),i.scale(this.scale,this.scale),i.translate(-this.x,-this.y)}forEachTileInViewport(e,i,r=0){const s=this.bounds(e,!0,r);for(let a=s.minX;a<s.maxX;a++)for(let o=s.minY;o<s.maxY;o++){const u=this.world.getTile(a,o);i(u)}}forEachChunkInViewport(e,i,r=0){const s=this.bounds(e,!0,r);s.minX=Math.floor(s.minX/Q),s.minY=Math.floor(s.minY/Q),s.maxX=Math.ceil(s.maxX/Q),s.maxY=Math.ceil(s.maxY/Q);for(let a=s.minX;a<s.maxX;a++)for(let o=s.minY;o<s.maxY;o++){const u=this.world.getChunk(a,o);u.isGenerated()&&i(u)}}}function jf(t,n){console.log("Loaded new world"),n&&localStorage.setItem(t,"PLACEHOLDER");const e=new Di(Math.floor(Math.random()*4294967295)),i=e.closest0(0,0);return e.reveal(i.x,i.y),{world:e,spawnX:i.x,spawnY:i.y}}function aa(t,n){const{world:e,spawnX:i,spawnY:r}=jf(t,n),s=new zr(e,{x:i,y:r,scale:48});return console.log(s),{world:e,viewport:s,bookmarks:[{name:"Spawn",createdAt:new Date,viewport:s.save()}]}}function Zf(t){const n=localStorage.getItem(t);if(n){console.log("Loaded saved world");try{const e=Mo.decode(n),i=Di.load(e.world),r=new zr(i,e.viewport);return{world:i,viewport:r,bookmarks:e.bookmarks}}catch(e){return console.error("Failed to load world."),console.error(e),aa(t,!1)}}else return aa(t,!0)}function Vf(t,n){if(localStorage.getItem(t)!==null){console.log("Save world");try{localStorage.setItem(t,Mo.encode({world:n.world.save(),viewport:n.viewport.save(),bookmarks:n.bookmarks??[]},{base64:!0})),localStorage.removeItem("save_error")}catch(e){localStorage.setItem("save_error",String(e))}}}function Yf(t){localStorage.removeItem(t)}const Xf=ne.object({deaths:ne.array(ne.object({x:ne.number("u8"),y:ne.number("u8"),diedAt:ne.date()})),tiles:ne.binary()});class oa extends ne.Parser{constructor(){super(...arguments);P(this,"magic",ne.hashStr("ChunkCoordinateParser"))}encodeInternal(e,i){const[r,s,a]=i.match(/^(-?\d+),(-?\d+)$/),[o,u]=[parseInt(s),parseInt(a)];e.encode(new ne.BigIntParser(!0),BigInt(o)),e.encode(new ne.BigIntParser(!0),BigInt(u))}decodeInternal(e){const i=Number(e.decode(new ne.BigIntParser(!0))),r=Number(e.decode(new ne.BigIntParser(!0)));return`${i},${r}`}}class Wf extends ne.Parser{constructor(e){super();P(this,"magic");P(this,"type");this.type=e,this.magic=ne.hashStr(`ChunkCoordinateMapParser:${this.type.magic}`)}encodeInternal(e,i){e.encode(new ne.BigIntParser(!1),BigInt(i.size));for(const[r,s]of i.entries())e.encode(new oa,r),e.encode(this.type,s)}decodeInternal(e){const i=new Map,r=Number(e.decode(new ne.BigIntParser(!1)));for(let s=0;s<r;s++){const a=e.decode(new oa),o=e.decode(this.type);i.set(a,o)}return i}}const Gf=ne.object({seed:ne.number("u32"),createdAt:ne.date(),numDeaths:ne.number("u32"),chunks:new Wf(Xf)}),la=ne.object({x:ne.number("f64"),y:ne.number("f64"),scale:ne.number("f64")}),Mo=ne.modifyhash("v1.0.6",ne.object({world:Gf,viewport:la,bookmarks:ne.array(ne.object({name:ne.string(),createdAt:ne.date(),viewport:la}))})),Oo=(t,n)=>{const e=new ResizeObserver(()=>{n(t.clientWidth,t.clientHeight)});return e.observe(t),{destroy(){e.unobserve(t),e.disconnect()}}};class Kf{constructor(n,e,i,r){P(this,"world");P(this,"theme");P(this,"canvas");P(this,"ctx");P(this,"viewport");this.world=n,this.theme=e,this.canvas=i;const s=this.canvas.getContext("2d");if(!s)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=s,this.viewport=r}async init(){}destroy(){}renderWorld(){this.ctx.imageSmoothingEnabled=!1,this.viewport.transformCtx(this.canvas,this.ctx),this.viewport.forEachTileInViewport(this.canvas,n=>{this.theme.drawTile(this.ctx,n)},0),this.viewport.forEachChunkInViewport(this.canvas,n=>{n.deaths.forEach(e=>{this.theme.drawDeathIcon(this.ctx,n.chunkX*Q+e.x,n.chunkY*Q+e.y)})},0),this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.renderWorld()}}class Mi{constructor(){P(this,"_alive",!0);P(this,"_lifetime",0)}get alive(){return this._alive}set alive(n){this._alive=n}get lifetime(){return this._lifetime}rendererUpdate(n,e){this._lifetime+=e,this.update(n,e)}}class qf extends Mi{constructor(e){super();P(this,"type","explosion");P(this,"maxLifetime",500);P(this,"tile");this.tile=e}update(e,i){this.lifetime>this.maxLifetime&&(this.alive=!1)}}class Jf extends Mi{constructor(e){super();P(this,"type","faketile");P(this,"tile");this.tile=e}get opacity(){return Ci(2-this.lifetime/250+2)}update(e,i){this.lifetime>2e3&&(this.alive=!1)}}class ca extends Mi{constructor(e,i,r,s){super();P(this,"type","flag");P(this,"x");P(this,"y");P(this,"dx");P(this,"dy");P(this,"r");P(this,"dr");P(this,"isMultiFlag");P(this,"numFlags");this.x=e,this.y=i,this.dx=(Math.random()-.5)*.005,this.dy=-(Math.random()*.002+.005),this.r=0,this.dr=(Math.random()-.5)*.01,this.isMultiFlag=r,this.numFlags=s}get opacity(){return Ci(1-this.lifetime/250+.5)}update(e,i){this.dy+=5e-5*i,this.dx*=.99,this.dy*=this.dy<0?1:.95,this.x+=this.dx*i,this.y+=this.dy*i,this.r+=this.dr*i,this.lifetime>=500&&(this.alive=!1)}}class Qf extends Mi{constructor(e){super();P(this,"type","tilereveal");P(this,"tile");P(this,"x");P(this,"y");P(this,"dx");P(this,"dy");P(this,"r");P(this,"dr");P(this,"totalLifetime");this.tile=e,this.x=this.tile.x,this.y=this.tile.y,this.dx=(Math.random()-.5)*.005,this.dy=-(Math.random()*.002+.005),this.r=0,this.dr=(Math.random()-.5)*.01,this.totalLifetime=Math.random()*750+250}get opacity(){return Ci(1-this.lifetime/(this.totalLifetime/2)+.5)}update(e,i){this.dy+=5e-5*i,this.dx*=.99,this.dy*=this.dy<0?1:.98,this.x+=this.dx*i,this.y+=this.dy*i,this.r+=this.dr*i,this.lifetime>=this.totalLifetime&&(this.alive=!1)}}class eh{constructor(n,e,i,r){P(this,"world");P(this,"theme");P(this,"canvas");P(this,"ctx");P(this,"viewport");P(this,"particles",[]);P(this,"listeners",[]);P(this,"lastFrameTime",-1);this.world=n,this.theme=e,this.canvas=i;const s=this.canvas.getContext("2d");if(!s)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=s,this.viewport=r}async init(){this.listeners.push(this.world.addEventListener("particle_unflag",({data:{x:n,y:e}})=>{const i=this.world.getTile(n,e);i instanceof So?this.particles.push(new ca(n,e,!0,i.numMaxMines)):this.particles.push(new ca(n,e,!1,i.type=="cookies_and_cream"?-1:1))})),this.listeners.push(this.world.addEventListener("particle_explosion",({data:{x:n,y:e}})=>{const i=this.world.getTile(n,e);this.particles.unshift(new Jf(i)),this.particles.push(new qf(i))})),this.listeners.push(this.world.addEventListener("particle_reveal",({data:{x:n,y:e}})=>{const i=this.world.getTile(n,e);this.particles.push(new Qf(i))}))}destroy(){let n;for(;n=this.listeners.pop();)this.world.removeEventListener(n)}renderParticles(n){this.ctx.imageSmoothingEnabled=!1,this.viewport.transformCtx(this.canvas,this.ctx);for(let e=0;e<this.particles.length;e++){const i=this.particles[e];i.rendererUpdate(this,n),i.alive||(this.particles.splice(e,1),e--)}for(const e of this.particles)this.theme.drawParticle(this.ctx,e);this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.ctx.fillStyle="transparent",this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const n=performance.now();if(this.lastFrameTime==-1)this.renderParticles(0);else{const e=n-this.lastFrameTime;this.renderParticles(e)}this.lastFrameTime=n}}function th(t){let n,e,i,r,s;const a=t[8].default,o=Fe(a,t,t[7],null);return{c(){n=R("div"),o&&o.c(),this.h()},l(u){n=L(u,"DIV",{class:!0});var l=Z(n);o&&o.l(l),l.forEach(x),this.h()},h(){B(n,"class",e=ls(t[0])+" svelte-1ijt5qm"),Jt(n,"mouse-controller-dragging",t[1]=="drag")},m(u,l){X(u,n,l),o&&o.m(n,null),i=!0,r||(s=[be(n,"mousedown",t[10]),be(n,"mousemove",t[11]),be(n,"mouseup",t[12]),be(n,"mouseout",t[13]),be(n,"wheel",t[14],{passive:!0}),be(n,"contextmenu",hl(t[9]))],r=!0)},p(u,[l]){o&&o.p&&(!i||l&128)&&Ue(o,a,u,u[7],i?He(a,u[7],l,null):ze(u[7]),null),(!i||l&1&&e!==(e=ls(u[0])+" svelte-1ijt5qm"))&&B(n,"class",e),(!i||l&3)&&Jt(n,"mouse-controller-dragging",u[1]=="drag")},i(u){i||(j(o,u),i=!0)},o(u){V(o,u),i=!1},d(u){u&&x(n),o&&o.d(u),r=!1,sn(s)}}}const nh=10,ih=10;function rh(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=Hr();let{class:a=""}=n,o=null;const u=v=>{switch(v.button){case 0:return"primary";case 1:return"extra";case 2:return"secondary";default:return null}};let l=0,f=0;const p=(v,M)=>Of(l,f,v.offsetX,v.offsetY)>M;function m(v){ka.call(this,t,v)}const d=v=>{o==null&&(e(1,o=u(v)),e(2,l=v.offsetX),e(3,f=v.offsetY))},g=v=>{let M=v.movementX,T=v.movementY;if(o=="primary")if(p(v,nh))M+=v.offsetX-l,T+=v.offsetY-f,e(1,o="drag");else return;o=="drag"&&s("move",{x:v.offsetX,y:v.offsetY,dx:M,dy:T})},w=v=>{if(o==null||o=="drag"||p(v,ih)){e(1,o=null);return}s("input",{x:v.offsetX,y:v.offsetY,type:o}),e(1,o=null)},y=()=>{e(1,o=null)},S=v=>{s("zoom",{x:v.offsetX,y:v.offsetY,amountType:"relative",amount:v.deltaY>0?.9:1.1})};return t.$$set=v=>{"class"in v&&e(0,a=v.class),"$$scope"in v&&e(7,r=v.$$scope)},[a,o,l,f,s,u,p,r,i,m,d,g,w,y,S]}class sh extends ye{constructor(n){super(),ke(this,n,rh,th,ve,{class:0})}}var Bo={exports:{}};/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */(function(t){(function(n,e,i,r){var s=["","webkit","Moz","MS","ms","o"],a=e.createElement("div"),o="function",u=Math.round,l=Math.abs,f=Date.now;function p(c,h,_){return setTimeout(M(c,_),h)}function m(c,h,_){return Array.isArray(c)?(d(c,_[h],_),!0):!1}function d(c,h,_){var b;if(c)if(c.forEach)c.forEach(h,_);else if(c.length!==r)for(b=0;b<c.length;)h.call(_,c[b],b,c),b++;else for(b in c)c.hasOwnProperty(b)&&h.call(_,c[b],b,c)}function g(c,h,_){var b="DEPRECATED METHOD: "+h+`
`+_+` AT 
`;return function(){var N=new Error("get-stack-trace"),z=N&&N.stack?N.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",G=n.console&&(n.console.warn||n.console.log);return G&&G.call(n.console,b,z),c.apply(this,arguments)}}var w;typeof Object.assign!="function"?w=function(h){if(h===r||h===null)throw new TypeError("Cannot convert undefined or null to object");for(var _=Object(h),b=1;b<arguments.length;b++){var N=arguments[b];if(N!==r&&N!==null)for(var z in N)N.hasOwnProperty(z)&&(_[z]=N[z])}return _}:w=Object.assign;var y=g(function(h,_,b){for(var N=Object.keys(_),z=0;z<N.length;)(!b||b&&h[N[z]]===r)&&(h[N[z]]=_[N[z]]),z++;return h},"extend","Use `assign`."),S=g(function(h,_){return y(h,_,!0)},"merge","Use `assign`.");function v(c,h,_){var b=h.prototype,N;N=c.prototype=Object.create(b),N.constructor=c,N._super=b,_&&w(N,_)}function M(c,h){return function(){return c.apply(h,arguments)}}function T(c,h){return typeof c==o?c.apply(h&&h[0]||r,h):c}function O(c,h){return c===r?h:c}function Y(c,h,_){d(k(h),function(b){c.addEventListener(b,_,!1)})}function E(c,h,_){d(k(h),function(b){c.removeEventListener(b,_,!1)})}function D(c,h){for(;c;){if(c==h)return!0;c=c.parentNode}return!1}function A(c,h){return c.indexOf(h)>-1}function k(c){return c.trim().split(/\s+/g)}function F(c,h,_){if(c.indexOf&&!_)return c.indexOf(h);for(var b=0;b<c.length;){if(_&&c[b][_]==h||!_&&c[b]===h)return b;b++}return-1}function U(c){return Array.prototype.slice.call(c,0)}function K(c,h,_){for(var b=[],N=[],z=0;z<c.length;){var G=h?c[z][h]:c[z];F(N,G)<0&&b.push(c[z]),N[z]=G,z++}return _&&(h?b=b.sort(function(xe,Oe){return xe[h]>Oe[h]}):b=b.sort()),b}function ie(c,h){for(var _,b,N=h[0].toUpperCase()+h.slice(1),z=0;z<s.length;){if(_=s[z],b=_?_+N:h,b in c)return b;z++}return r}var q=1;function _e(){return q++}function we(c){var h=c.ownerDocument||c;return h.defaultView||h.parentWindow||n}var Me=/mobile|tablet|ip(ad|hone|od)|android/i,je="ontouchstart"in n,te=ie(n,"PointerEvent")!==r,Ce=je&&Me.test(navigator.userAgent),Ze="touch",It="pen",tt="mouse",I="kinect",H=25,J=1,ge=2,re=4,C=8,W=1,Te=2,Xe=4,We=8,Ee=16,Ae=Te|Xe,rt=We|Ee,hn=Ae|rt,Zr=["x","y"],Hn=["clientX","clientY"];function Ge(c,h){var _=this;this.manager=c,this.callback=h,this.element=c.element,this.target=c.options.inputTarget,this.domHandler=function(b){T(c.options.enable,[c])&&_.handler(b)},this.init()}Ge.prototype={handler:function(){},init:function(){this.evEl&&Y(this.element,this.evEl,this.domHandler),this.evTarget&&Y(this.target,this.evTarget,this.domHandler),this.evWin&&Y(we(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&E(this.element,this.evEl,this.domHandler),this.evTarget&&E(this.target,this.evTarget,this.domHandler),this.evWin&&E(we(this.element),this.evWin,this.domHandler)}};function Ro(c){var h,_=c.options.inputClass;return _?h=_:te?h=Bi:Ce?h=Vn:je?h=$i:h=Zn,new h(c,Lo)}function Lo(c,h,_){var b=_.pointers.length,N=_.changedPointers.length,z=h&J&&b-N===0,G=h&(re|C)&&b-N===0;_.isFirst=!!z,_.isFinal=!!G,z&&(c.session={}),_.eventType=h,Fo(c,_),c.emit("hammer.input",_),c.recognize(_),c.session.prevInput=_}function Fo(c,h){var _=c.session,b=h.pointers,N=b.length;_.firstInput||(_.firstInput=Vr(h)),N>1&&!_.firstMultiple?_.firstMultiple=Vr(h):N===1&&(_.firstMultiple=!1);var z=_.firstInput,G=_.firstMultiple,Ie=G?G.center:z.center,xe=h.center=Yr(b);h.timeStamp=f(),h.deltaTime=h.timeStamp-z.timeStamp,h.angle=Oi(Ie,xe),h.distance=jn(Ie,xe),Uo(_,h),h.offsetDirection=Wr(h.deltaX,h.deltaY);var Oe=Xr(h.deltaTime,h.deltaX,h.deltaY);h.overallVelocityX=Oe.x,h.overallVelocityY=Oe.y,h.overallVelocity=l(Oe.x)>l(Oe.y)?Oe.x:Oe.y,h.scale=G?jo(G.pointers,b):1,h.rotation=G?Ho(G.pointers,b):0,h.maxPointers=_.prevInput?h.pointers.length>_.prevInput.maxPointers?h.pointers.length:_.prevInput.maxPointers:h.pointers.length,zo(_,h);var at=c.element;D(h.srcEvent.target,at)&&(at=h.srcEvent.target),h.target=at}function Uo(c,h){var _=h.center,b=c.offsetDelta||{},N=c.prevDelta||{},z=c.prevInput||{};(h.eventType===J||z.eventType===re)&&(N=c.prevDelta={x:z.deltaX||0,y:z.deltaY||0},b=c.offsetDelta={x:_.x,y:_.y}),h.deltaX=N.x+(_.x-b.x),h.deltaY=N.y+(_.y-b.y)}function zo(c,h){var _=c.lastInterval||h,b=h.timeStamp-_.timeStamp,N,z,G,Ie;if(h.eventType!=C&&(b>H||_.velocity===r)){var xe=h.deltaX-_.deltaX,Oe=h.deltaY-_.deltaY,at=Xr(b,xe,Oe);z=at.x,G=at.y,N=l(at.x)>l(at.y)?at.x:at.y,Ie=Wr(xe,Oe),c.lastInterval=h}else N=_.velocity,z=_.velocityX,G=_.velocityY,Ie=_.direction;h.velocity=N,h.velocityX=z,h.velocityY=G,h.direction=Ie}function Vr(c){for(var h=[],_=0;_<c.pointers.length;)h[_]={clientX:u(c.pointers[_].clientX),clientY:u(c.pointers[_].clientY)},_++;return{timeStamp:f(),pointers:h,center:Yr(h),deltaX:c.deltaX,deltaY:c.deltaY}}function Yr(c){var h=c.length;if(h===1)return{x:u(c[0].clientX),y:u(c[0].clientY)};for(var _=0,b=0,N=0;N<h;)_+=c[N].clientX,b+=c[N].clientY,N++;return{x:u(_/h),y:u(b/h)}}function Xr(c,h,_){return{x:h/c||0,y:_/c||0}}function Wr(c,h){return c===h?W:l(c)>=l(h)?c<0?Te:Xe:h<0?We:Ee}function jn(c,h,_){_||(_=Zr);var b=h[_[0]]-c[_[0]],N=h[_[1]]-c[_[1]];return Math.sqrt(b*b+N*N)}function Oi(c,h,_){_||(_=Zr);var b=h[_[0]]-c[_[0]],N=h[_[1]]-c[_[1]];return Math.atan2(N,b)*180/Math.PI}function Ho(c,h){return Oi(h[1],h[0],Hn)+Oi(c[1],c[0],Hn)}function jo(c,h){return jn(h[0],h[1],Hn)/jn(c[0],c[1],Hn)}var Zo={mousedown:J,mousemove:ge,mouseup:re},Vo="mousedown",Yo="mousemove mouseup";function Zn(){this.evEl=Vo,this.evWin=Yo,this.pressed=!1,Ge.apply(this,arguments)}v(Zn,Ge,{handler:function(h){var _=Zo[h.type];_&J&&h.button===0&&(this.pressed=!0),_&ge&&h.which!==1&&(_=re),this.pressed&&(_&re&&(this.pressed=!1),this.callback(this.manager,_,{pointers:[h],changedPointers:[h],pointerType:tt,srcEvent:h}))}});var Xo={pointerdown:J,pointermove:ge,pointerup:re,pointercancel:C,pointerout:C},Wo={2:Ze,3:It,4:tt,5:I},Gr="pointerdown",Kr="pointermove pointerup pointercancel";n.MSPointerEvent&&!n.PointerEvent&&(Gr="MSPointerDown",Kr="MSPointerMove MSPointerUp MSPointerCancel");function Bi(){this.evEl=Gr,this.evWin=Kr,Ge.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}v(Bi,Ge,{handler:function(h){var _=this.store,b=!1,N=h.type.toLowerCase().replace("ms",""),z=Xo[N],G=Wo[h.pointerType]||h.pointerType,Ie=G==Ze,xe=F(_,h.pointerId,"pointerId");z&J&&(h.button===0||Ie)?xe<0&&(_.push(h),xe=_.length-1):z&(re|C)&&(b=!0),!(xe<0)&&(_[xe]=h,this.callback(this.manager,z,{pointers:_,changedPointers:[h],pointerType:G,srcEvent:h}),b&&_.splice(xe,1))}});var Go={touchstart:J,touchmove:ge,touchend:re,touchcancel:C},Ko="touchstart",qo="touchstart touchmove touchend touchcancel";function qr(){this.evTarget=Ko,this.evWin=qo,this.started=!1,Ge.apply(this,arguments)}v(qr,Ge,{handler:function(h){var _=Go[h.type];if(_===J&&(this.started=!0),!!this.started){var b=Jo.call(this,h,_);_&(re|C)&&b[0].length-b[1].length===0&&(this.started=!1),this.callback(this.manager,_,{pointers:b[0],changedPointers:b[1],pointerType:Ze,srcEvent:h})}}});function Jo(c,h){var _=U(c.touches),b=U(c.changedTouches);return h&(re|C)&&(_=K(_.concat(b),"identifier",!0)),[_,b]}var Qo={touchstart:J,touchmove:ge,touchend:re,touchcancel:C},el="touchstart touchmove touchend touchcancel";function Vn(){this.evTarget=el,this.targetIds={},Ge.apply(this,arguments)}v(Vn,Ge,{handler:function(h){var _=Qo[h.type],b=tl.call(this,h,_);b&&this.callback(this.manager,_,{pointers:b[0],changedPointers:b[1],pointerType:Ze,srcEvent:h})}});function tl(c,h){var _=U(c.touches),b=this.targetIds;if(h&(J|ge)&&_.length===1)return b[_[0].identifier]=!0,[_,_];var N,z,G=U(c.changedTouches),Ie=[],xe=this.target;if(z=_.filter(function(Oe){return D(Oe.target,xe)}),h===J)for(N=0;N<z.length;)b[z[N].identifier]=!0,N++;for(N=0;N<G.length;)b[G[N].identifier]&&Ie.push(G[N]),h&(re|C)&&delete b[G[N].identifier],N++;if(Ie.length)return[K(z.concat(Ie),"identifier",!0),Ie]}var nl=2500,Jr=25;function $i(){Ge.apply(this,arguments);var c=M(this.handler,this);this.touch=new Vn(this.manager,c),this.mouse=new Zn(this.manager,c),this.primaryTouch=null,this.lastTouches=[]}v($i,Ge,{handler:function(h,_,b){var N=b.pointerType==Ze,z=b.pointerType==tt;if(!(z&&b.sourceCapabilities&&b.sourceCapabilities.firesTouchEvents)){if(N)il.call(this,_,b);else if(z&&rl.call(this,b))return;this.callback(h,_,b)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});function il(c,h){c&J?(this.primaryTouch=h.changedPointers[0].identifier,Qr.call(this,h)):c&(re|C)&&Qr.call(this,h)}function Qr(c){var h=c.changedPointers[0];if(h.identifier===this.primaryTouch){var _={x:h.clientX,y:h.clientY};this.lastTouches.push(_);var b=this.lastTouches,N=function(){var z=b.indexOf(_);z>-1&&b.splice(z,1)};setTimeout(N,nl)}}function rl(c){for(var h=c.srcEvent.clientX,_=c.srcEvent.clientY,b=0;b<this.lastTouches.length;b++){var N=this.lastTouches[b],z=Math.abs(h-N.x),G=Math.abs(_-N.y);if(z<=Jr&&G<=Jr)return!0}return!1}var es=ie(a.style,"touchAction"),ts=es!==r,ns="compute",is="auto",Ri="manipulation",$t="none",dn="pan-x",_n="pan-y",Yn=al();function Li(c,h){this.manager=c,this.set(h)}Li.prototype={set:function(c){c==ns&&(c=this.compute()),ts&&this.manager.element.style&&Yn[c]&&(this.manager.element.style[es]=c),this.actions=c.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var c=[];return d(this.manager.recognizers,function(h){T(h.options.enable,[h])&&(c=c.concat(h.getTouchAction()))}),sl(c.join(" "))},preventDefaults:function(c){var h=c.srcEvent,_=c.offsetDirection;if(this.manager.session.prevented){h.preventDefault();return}var b=this.actions,N=A(b,$t)&&!Yn[$t],z=A(b,_n)&&!Yn[_n],G=A(b,dn)&&!Yn[dn];if(N){var Ie=c.pointers.length===1,xe=c.distance<2,Oe=c.deltaTime<250;if(Ie&&xe&&Oe)return}if(!(G&&z)&&(N||z&&_&Ae||G&&_&rt))return this.preventSrc(h)},preventSrc:function(c){this.manager.session.prevented=!0,c.preventDefault()}};function sl(c){if(A(c,$t))return $t;var h=A(c,dn),_=A(c,_n);return h&&_?$t:h||_?h?dn:_n:A(c,Ri)?Ri:is}function al(){if(!ts)return!1;var c={},h=n.CSS&&n.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(_){c[_]=h?n.CSS.supports("touch-action",_):!0}),c}var Xn=1,Ke=2,Xt=4,Pt=8,gt=Pt,mn=16,st=32;function bt(c){this.options=w({},this.defaults,c||{}),this.id=_e(),this.manager=null,this.options.enable=O(this.options.enable,!0),this.state=Xn,this.simultaneous={},this.requireFail=[]}bt.prototype={defaults:{},set:function(c){return w(this.options,c),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(c){if(m(c,"recognizeWith",this))return this;var h=this.simultaneous;return c=Wn(c,this),h[c.id]||(h[c.id]=c,c.recognizeWith(this)),this},dropRecognizeWith:function(c){return m(c,"dropRecognizeWith",this)?this:(c=Wn(c,this),delete this.simultaneous[c.id],this)},requireFailure:function(c){if(m(c,"requireFailure",this))return this;var h=this.requireFail;return c=Wn(c,this),F(h,c)===-1&&(h.push(c),c.requireFailure(this)),this},dropRequireFailure:function(c){if(m(c,"dropRequireFailure",this))return this;c=Wn(c,this);var h=F(this.requireFail,c);return h>-1&&this.requireFail.splice(h,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(c){return!!this.simultaneous[c.id]},emit:function(c){var h=this,_=this.state;function b(N){h.manager.emit(N,c)}_<Pt&&b(h.options.event+rs(_)),b(h.options.event),c.additionalEvent&&b(c.additionalEvent),_>=Pt&&b(h.options.event+rs(_))},tryEmit:function(c){if(this.canEmit())return this.emit(c);this.state=st},canEmit:function(){for(var c=0;c<this.requireFail.length;){if(!(this.requireFail[c].state&(st|Xn)))return!1;c++}return!0},recognize:function(c){var h=w({},c);if(!T(this.options.enable,[this,h])){this.reset(),this.state=st;return}this.state&(gt|mn|st)&&(this.state=Xn),this.state=this.process(h),this.state&(Ke|Xt|Pt|mn)&&this.tryEmit(h)},process:function(c){},getTouchAction:function(){},reset:function(){}};function rs(c){return c&mn?"cancel":c&Pt?"end":c&Xt?"move":c&Ke?"start":""}function ss(c){return c==Ee?"down":c==We?"up":c==Te?"left":c==Xe?"right":""}function Wn(c,h){var _=h.manager;return _?_.get(c):c}function nt(){bt.apply(this,arguments)}v(nt,bt,{defaults:{pointers:1},attrTest:function(c){var h=this.options.pointers;return h===0||c.pointers.length===h},process:function(c){var h=this.state,_=c.eventType,b=h&(Ke|Xt),N=this.attrTest(c);return b&&(_&C||!N)?h|mn:b||N?_&re?h|Pt:h&Ke?h|Xt:Ke:st}});function Gn(){nt.apply(this,arguments),this.pX=null,this.pY=null}v(Gn,nt,{defaults:{event:"pan",threshold:10,pointers:1,direction:hn},getTouchAction:function(){var c=this.options.direction,h=[];return c&Ae&&h.push(_n),c&rt&&h.push(dn),h},directionTest:function(c){var h=this.options,_=!0,b=c.distance,N=c.direction,z=c.deltaX,G=c.deltaY;return N&h.direction||(h.direction&Ae?(N=z===0?W:z<0?Te:Xe,_=z!=this.pX,b=Math.abs(c.deltaX)):(N=G===0?W:G<0?We:Ee,_=G!=this.pY,b=Math.abs(c.deltaY))),c.direction=N,_&&b>h.threshold&&N&h.direction},attrTest:function(c){return nt.prototype.attrTest.call(this,c)&&(this.state&Ke||!(this.state&Ke)&&this.directionTest(c))},emit:function(c){this.pX=c.deltaX,this.pY=c.deltaY;var h=ss(c.direction);h&&(c.additionalEvent=this.options.event+h),this._super.emit.call(this,c)}});function Fi(){nt.apply(this,arguments)}v(Fi,nt,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[$t]},attrTest:function(c){return this._super.attrTest.call(this,c)&&(Math.abs(c.scale-1)>this.options.threshold||this.state&Ke)},emit:function(c){if(c.scale!==1){var h=c.scale<1?"in":"out";c.additionalEvent=this.options.event+h}this._super.emit.call(this,c)}});function Ui(){bt.apply(this,arguments),this._timer=null,this._input=null}v(Ui,bt,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[is]},process:function(c){var h=this.options,_=c.pointers.length===h.pointers,b=c.distance<h.threshold,N=c.deltaTime>h.time;if(this._input=c,!b||!_||c.eventType&(re|C)&&!N)this.reset();else if(c.eventType&J)this.reset(),this._timer=p(function(){this.state=gt,this.tryEmit()},h.time,this);else if(c.eventType&re)return gt;return st},reset:function(){clearTimeout(this._timer)},emit:function(c){this.state===gt&&(c&&c.eventType&re?this.manager.emit(this.options.event+"up",c):(this._input.timeStamp=f(),this.manager.emit(this.options.event,this._input)))}});function zi(){nt.apply(this,arguments)}v(zi,nt,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[$t]},attrTest:function(c){return this._super.attrTest.call(this,c)&&(Math.abs(c.rotation)>this.options.threshold||this.state&Ke)}});function Hi(){nt.apply(this,arguments)}v(Hi,nt,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:Ae|rt,pointers:1},getTouchAction:function(){return Gn.prototype.getTouchAction.call(this)},attrTest:function(c){var h=this.options.direction,_;return h&(Ae|rt)?_=c.overallVelocity:h&Ae?_=c.overallVelocityX:h&rt&&(_=c.overallVelocityY),this._super.attrTest.call(this,c)&&h&c.offsetDirection&&c.distance>this.options.threshold&&c.maxPointers==this.options.pointers&&l(_)>this.options.velocity&&c.eventType&re},emit:function(c){var h=ss(c.offsetDirection);h&&this.manager.emit(this.options.event+h,c),this.manager.emit(this.options.event,c)}});function Kn(){bt.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}v(Kn,bt,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[Ri]},process:function(c){var h=this.options,_=c.pointers.length===h.pointers,b=c.distance<h.threshold,N=c.deltaTime<h.time;if(this.reset(),c.eventType&J&&this.count===0)return this.failTimeout();if(b&&N&&_){if(c.eventType!=re)return this.failTimeout();var z=this.pTime?c.timeStamp-this.pTime<h.interval:!0,G=!this.pCenter||jn(this.pCenter,c.center)<h.posThreshold;this.pTime=c.timeStamp,this.pCenter=c.center,!G||!z?this.count=1:this.count+=1,this._input=c;var Ie=this.count%h.taps;if(Ie===0)return this.hasRequireFailures()?(this._timer=p(function(){this.state=gt,this.tryEmit()},h.interval,this),Ke):gt}return st},failTimeout:function(){return this._timer=p(function(){this.state=st},this.options.interval,this),st},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==gt&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}});function vt(c,h){return h=h||{},h.recognizers=O(h.recognizers,vt.defaults.preset),new ji(c,h)}vt.VERSION="2.0.7",vt.defaults={domEvents:!1,touchAction:ns,enable:!0,inputTarget:null,inputClass:null,preset:[[zi,{enable:!1}],[Fi,{enable:!1},["rotate"]],[Hi,{direction:Ae}],[Gn,{direction:Ae},["swipe"]],[Kn],[Kn,{event:"doubletap",taps:2},["tap"]],[Ui]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};var ol=1,as=2;function ji(c,h){this.options=w({},vt.defaults,h||{}),this.options.inputTarget=this.options.inputTarget||c,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=c,this.input=Ro(this),this.touchAction=new Li(this,this.options.touchAction),os(this,!0),d(this.options.recognizers,function(_){var b=this.add(new _[0](_[1]));_[2]&&b.recognizeWith(_[2]),_[3]&&b.requireFailure(_[3])},this)}ji.prototype={set:function(c){return w(this.options,c),c.touchAction&&this.touchAction.update(),c.inputTarget&&(this.input.destroy(),this.input.target=c.inputTarget,this.input.init()),this},stop:function(c){this.session.stopped=c?as:ol},recognize:function(c){var h=this.session;if(!h.stopped){this.touchAction.preventDefaults(c);var _,b=this.recognizers,N=h.curRecognizer;(!N||N&&N.state&gt)&&(N=h.curRecognizer=null);for(var z=0;z<b.length;)_=b[z],h.stopped!==as&&(!N||_==N||_.canRecognizeWith(N))?_.recognize(c):_.reset(),!N&&_.state&(Ke|Xt|Pt)&&(N=h.curRecognizer=_),z++}},get:function(c){if(c instanceof bt)return c;for(var h=this.recognizers,_=0;_<h.length;_++)if(h[_].options.event==c)return h[_];return null},add:function(c){if(m(c,"add",this))return this;var h=this.get(c.options.event);return h&&this.remove(h),this.recognizers.push(c),c.manager=this,this.touchAction.update(),c},remove:function(c){if(m(c,"remove",this))return this;if(c=this.get(c),c){var h=this.recognizers,_=F(h,c);_!==-1&&(h.splice(_,1),this.touchAction.update())}return this},on:function(c,h){if(c!==r&&h!==r){var _=this.handlers;return d(k(c),function(b){_[b]=_[b]||[],_[b].push(h)}),this}},off:function(c,h){if(c!==r){var _=this.handlers;return d(k(c),function(b){h?_[b]&&_[b].splice(F(_[b],h),1):delete _[b]}),this}},emit:function(c,h){this.options.domEvents&&ll(c,h);var _=this.handlers[c]&&this.handlers[c].slice();if(!(!_||!_.length)){h.type=c,h.preventDefault=function(){h.srcEvent.preventDefault()};for(var b=0;b<_.length;)_[b](h),b++}},destroy:function(){this.element&&os(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}};function os(c,h){var _=c.element;if(_.style){var b;d(c.options.cssProps,function(N,z){b=ie(_.style,z),h?(c.oldCssProps[b]=_.style[b],_.style[b]=N):_.style[b]=c.oldCssProps[b]||""}),h||(c.oldCssProps={})}}function ll(c,h){var _=e.createEvent("Event");_.initEvent(c,!0,!0),_.gesture=h,h.target.dispatchEvent(_)}w(vt,{INPUT_START:J,INPUT_MOVE:ge,INPUT_END:re,INPUT_CANCEL:C,STATE_POSSIBLE:Xn,STATE_BEGAN:Ke,STATE_CHANGED:Xt,STATE_ENDED:Pt,STATE_RECOGNIZED:gt,STATE_CANCELLED:mn,STATE_FAILED:st,DIRECTION_NONE:W,DIRECTION_LEFT:Te,DIRECTION_RIGHT:Xe,DIRECTION_UP:We,DIRECTION_DOWN:Ee,DIRECTION_HORIZONTAL:Ae,DIRECTION_VERTICAL:rt,DIRECTION_ALL:hn,Manager:ji,Input:Ge,TouchAction:Li,TouchInput:Vn,MouseInput:Zn,PointerEventInput:Bi,TouchMouseInput:$i,SingleTouchInput:qr,Recognizer:bt,AttrRecognizer:nt,Tap:Kn,Pan:Gn,Swipe:Hi,Pinch:Fi,Rotate:zi,Press:Ui,on:Y,off:E,each:d,merge:S,extend:y,assign:w,inherit:v,bindFn:M,prefixed:ie});var cl=typeof n<"u"?n:typeof self<"u"?self:{};cl.Hammer=vt,typeof r=="function"&&r.amd?r(function(){return vt}):t.exports?t.exports=vt:n[i]=vt})(window,document,"Hammer")})(Bo);var ah=Bo.exports;const gn=vl(ah);function oh(t){let n,e;const i=t[3].default,r=Fe(i,t,t[2],null);return{c(){n=R("div"),r&&r.c(),this.h()},l(s){n=L(s,"DIV",{class:!0});var a=Z(n);r&&r.l(a),a.forEach(x),this.h()},h(){B(n,"class",t[0])},m(s,a){X(s,n,a),r&&r.m(n,null),t[4](n),e=!0},p(s,[a]){r&&r.p&&(!e||a&4)&&Ue(r,i,s,s[2],e?He(i,s[2],a,null):ze(s[2]),null),(!e||a&1)&&B(n,"class",s[0])},i(s){e||(j(r,s),e=!0)},o(s){V(r,s),e=!1},d(s){s&&x(n),r&&r.d(s),t[4](null)}}}function lh(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=Hr();let{class:a=""}=n,o,u,l=null;_i(()=>{u=new gn.Manager(o,{recognizers:[[gn.Pan],[gn.Pinch]]});const p=new gn.Tap({taps:1,event:"tapSingle"}),m=new gn.Tap({taps:2,event:"tapDouble"});u.add([m,p]),m.recognizeWith(p),p.requireFailure(m),u.on("pan",d=>{l&&s("move",{x:d.center.x,y:d.center.y,dx:d.center.x-l.center.x,dy:d.center.y-l.center.y}),l=d.isFinal?null:d}),u.on("pinch",d=>{}),u.on("tapSingle",d=>{s("input",{x:d.center.x,y:d.center.y,type:"secondary"})}),u.on("tapDouble",d=>{s("input",{x:d.center.x,y:d.center.y,type:"primary"})})}),mi(()=>{u.destroy()});function f(p){Re[p?"unshift":"push"](()=>{o=p,e(1,o)})}return t.$$set=p=>{"class"in p&&e(0,a=p.class),"$$scope"in p&&e(2,r=p.$$scope)},[a,o,r,i,f]}class ch extends ye{constructor(n){super(),ke(this,n,lh,oh,ve,{class:0})}}function uh(t){let n,e="Unsupported input method.";return{c(){n=R("span"),n.textContent=e},l(i){n=L(i,"SPAN",{"data-svelte-h":!0}),Pe(n)!=="svelte-1d8n4pk"&&(n.textContent=e)},m(i,r){X(i,n,r)},p:De,i:De,o:De,d(i){i&&x(n)}}}function fh(t){let n,e;return n=new ch({props:{class:t[0],$$slots:{default:[_h]},$$scope:{ctx:t}}}),n.$on("move",t[7]),n.$on("zoom",t[8]),n.$on("input",t[9]),{c(){le(n.$$.fragment)},l(i){ce(n.$$.fragment,i)},m(i,r){ue(n,i,r),e=!0},p(i,r){const s={};r&1&&(s.class=i[0]),r&1024&&(s.$$scope={dirty:r,ctx:i}),n.$set(s)},i(i){e||(j(n.$$.fragment,i),e=!0)},o(i){V(n.$$.fragment,i),e=!1},d(i){fe(n,i)}}}function hh(t){let n,e="Keyboard input method not implemented.";return{c(){n=R("span"),n.textContent=e},l(i){n=L(i,"SPAN",{"data-svelte-h":!0}),Pe(n)!=="svelte-1slf3g9"&&(n.textContent=e)},m(i,r){X(i,n,r)},p:De,i:De,o:De,d(i){i&&x(n)}}}function dh(t){let n,e;return n=new sh({props:{class:t[0],$$slots:{default:[mh]},$$scope:{ctx:t}}}),n.$on("move",t[4]),n.$on("zoom",t[5]),n.$on("input",t[6]),{c(){le(n.$$.fragment)},l(i){ce(n.$$.fragment,i)},m(i,r){ue(n,i,r),e=!0},p(i,r){const s={};r&1&&(s.class=i[0]),r&1024&&(s.$$scope={dirty:r,ctx:i}),n.$set(s)},i(i){e||(j(n.$$.fragment,i),e=!0)},o(i){V(n.$$.fragment,i),e=!1},d(i){fe(n,i)}}}function _h(t){let n;const e=t[3].default,i=Fe(e,t,t[10],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&1024)&&Ue(i,e,r,r[10],n?He(e,r[10],s,null):ze(r[10]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function mh(t){let n;const e=t[3].default,i=Fe(e,t,t[10],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&1024)&&Ue(i,e,r,r[10],n?He(e,r[10],s,null):ze(r[10]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function ph(t){let n,e,i,r;const s=[dh,hh,fh,uh],a=[];function o(u,l){return u[1]=="mouse"?0:u[1]=="keyboard"?1:u[1]=="touch"?2:3}return n=o(t),e=a[n]=s[n](t),{c(){e.c(),i=Qe()},l(u){e.l(u),i=Qe()},m(u,l){a[n].m(u,l),X(u,i,l),r=!0},p(u,[l]){let f=n;n=o(u),n===f?a[n].p(u,l):(Cn(),V(a[f],1,1,()=>{a[f]=null}),Dn(),e=a[n],e?e.p(u,l):(e=a[n]=s[n](u),e.c()),j(e,1),e.m(i.parentNode,i))},i(u){r||(j(e),r=!0)},o(u){V(e),r=!1},d(u){u&&x(i),a[n].d(u)}}}function Hr(){return Ea()}function gh(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=Hr();let{class:a=""}=n,{inputMethod:o="mouse"}=n;const u=g=>s("move",g.detail),l=g=>s("zoom",g.detail),f=g=>s("input",g.detail),p=g=>s("move",g.detail),m=g=>s("zoom",g.detail),d=g=>s("input",g.detail);return t.$$set=g=>{"class"in g&&e(0,a=g.class),"inputMethod"in g&&e(1,o=g.inputMethod),"$$scope"in g&&e(10,r=g.$$scope)},[a,o,s,i,u,l,f,p,m,d,r]}class bh extends ye{constructor(n){super(),ke(this,n,gh,ph,ve,{class:0,inputMethod:1})}}function vh(t,n){return t!=t?n==n:t!==n||t&&typeof t=="object"||typeof t=="function"}class jr{constructor(n,e,i){P(this,"slot");P(this,"key");P(this,"value");P(this,"subscriptions",new Set);this.slot=n,this.key=e,this.load(),this.value===void 0&&(this.value=i,this.save())}getObj(){let n=localStorage.getItem(this.slot);return n===null&&(localStorage.setItem(this.slot,"{}"),n=localStorage.getItem(this.slot)),JSON.parse(n)}save(){const n=this.getObj();n[this.key]=this.value,localStorage.setItem(this.slot,JSON.stringify(n)),console.debug(`LocalStorageWritable: Saved to ${this.slot}['${this.key}'] = ${this.value}`)}load(){const n=this.getObj();this.value=this.key in n?n[this.key]:void 0,console.debug(`LocalStorageWritable: Loaded from ${this.slot}['${this.key}'] = ${this.value}`)}set(n){vh(this.value,n)&&(this.value=n,this.save(),this.subscriptions.forEach(e=>e[0](this.value)))}update(n){this.value&&this.set(n(this.value))}subscribe(n,e=()=>{}){const i=[n,e];return this.subscriptions.add(i),this.value!==void 0&&n(this.value),()=>{this.subscriptions.delete(i)}}}const yr=new jr("settings","autoDisplayInfo",!0),kr=new jr("settings","volume",.25),Nn=new jr("settings","inputMethod","mouse");function wh(t){let n,e,i;return{c(){n=R("canvas"),e=ae(),i=R("canvas")},l(r){n=L(r,"CANVAS",{}),Z(n).forEach(x),e=oe(r),i=L(r,"CANVAS",{}),Z(i).forEach(x)},m(r,s){X(r,n,s),t[9](n),X(r,e,s),X(r,i,s),t[10](i)},p:De,d(r){r&&(x(n),x(e),x(i)),t[9](null),t[10](null)}}}function yh(t){let n,e,i,r,s,a;return e=new bh({props:{class:"w-full h-full force-overlap",inputMethod:t[5],$$slots:{default:[wh]},$$scope:{ctx:t}}}),e.$on("move",t[11]),e.$on("zoom",t[12]),e.$on("input",t[13]),{c(){n=R("div"),le(e.$$.fragment),this.h()},l(o){n=L(o,"DIV",{class:!0});var u=Z(n);ce(e.$$.fragment,u),u.forEach(x),this.h()},h(){B(n,"class","w-full h-full cursor-pointer")},m(o,u){X(o,n,u),ue(e,n,null),t[14](n),r=!0,s||(a=Ta(i=Oo.call(null,n,t[15])),s=!0)},p(o,[u]){const l={};u&32&&(l.inputMethod=o[5]),u&33554456&&(l.$$scope={dirty:u,ctx:o}),e.$set(l),i&&Ia(i.update)&&u&26&&i.update.call(null,o[15])},i(o){r||(j(e.$$.fragment,o),r=!0)},o(o){V(e.$$.fragment,o),r=!1},d(o){o&&x(n),fe(e),t[14](null),s=!1,a()}}}function kh(t,n,e){let i;zt(t,Nn,U=>e(5,i=U));const r=Ea();let s,{world:a}=n,{theme:o}=n,{viewport:u}=n,l,f;const p=async()=>{l==null||l.destroy(),f&&(l=new Kf(a,o,f,u),await l.init(),e(3,f.width=s.clientWidth,f),e(3,f.height=s.clientHeight,f),w=!0,S())};let m,d;const g=async()=>{m==null||m.destroy(),d&&(m=new eh(a,o,d,u),await m.init(),e(4,d.width=s.clientWidth,d),e(4,d.height=s.clientHeight,d))};let w=!1,y=-1;const S=()=>{cancelAnimationFrame(y),y=requestAnimationFrame(S),w&&(w=!1,l==null||l.render()),m==null||m.render()};let v,M,T;_i(async()=>{await p(),await g(),v=a.addEventListener("change",()=>{w=!0}),M=u.addEventListener("change",()=>{w=!0}),T=Nn.subscribe(()=>{setTimeout(async()=>{await p(),await g()},100)})}),mi(()=>{l==null||l.destroy(),m==null||m.destroy(),a.removeEventListener(v),u.removeEventListener(M),T(),cancelAnimationFrame(y)});function O(U){Re[U?"unshift":"push"](()=>{f=U,e(3,f)})}function Y(U){Re[U?"unshift":"push"](()=>{d=U,e(4,d)})}const E=U=>{u.translate(f,U.detail.dx,U.detail.dy),u.change()},D=U=>{const K=U.detail.amountType=="relative"?u.scale*U.detail.amount:u.scale+(U.detail.amount-1),ie=u.clampScale(f,K,4,48);u.scaleFrom(f,ie,U.detail.x,U.detail.y),u.change()},A=U=>{const K=u.canvasPos(f,U.detail.x,U.detail.y,!0);switch(U.detail.type){case"primary":r("action",{type:"reveal",pos:K});break;case"secondary":r("action",{type:"flag",pos:K});break;case"extra":r("action",{type:"reset",pos:K});break}a.change()};function k(U){Re[U?"unshift":"push"](()=>{s=U,e(2,s)})}const F=(U,K)=>{e(3,f.width=U,f),e(3,f.height=K,f),e(4,d.width=U,d),e(4,d.height=K,d),u.change(),S()};return t.$$set=U=>{"world"in U&&e(0,a=U.world),"theme"in U&&e(8,o=U.theme),"viewport"in U&&e(1,u=U.viewport)},[a,u,s,f,d,i,r,S,o,O,Y,E,D,A,k,F]}class Eh extends ye{constructor(n){super(),ke(this,n,kh,yh,ve,{world:0,theme:8,viewport:1})}}class $o{constructor(n,e){P(this,"textures");P(this,"img");typeof n=="string"?(this.img=document.createElement("img"),this.img.loading="eager",this.img.src=n):this.img=n,this.textures=e}awaitLoad(){return new Promise((n,e)=>{if(this.img instanceof HTMLCanvasElement||this.img.complete&&this.img.naturalWidth!==0)return n();const i=()=>{this.img.removeEventListener("load",i),this.img.removeEventListener("error",r),n()},r=()=>{this.img.removeEventListener("load",i),this.img.removeEventListener("error",r),e()};this.img.addEventListener("load",i),this.img.addEventListener("error",r)})}onLoad(n){this.awaitLoad().then(()=>n(this))}draw(n,e,i,r,s,a){const[o,u,l,f]=this.textures[e];n.drawImage(this.img,o,u,l,f,i,r,s,a)}toImageDataAtlas(){const[n,e]=Po(this.img.width,this.img.height);return e.imageSmoothingEnabled=!1,e.drawImage(this.img,0,0),new Th(Object.fromEntries(Object.entries(this.textures).map(([i,[r,s,a,o]])=>[i,e.getImageData(r,s,a,o)])))}}class Th{constructor(n){P(this,"textures");this.textures=n}toImageAtlas(n=!0){let e=0,i=0,r={},s=0;for(const u in this.textures){const l=this.textures[u];n&&s++,r[u]={x:s,y:n?1:0,width:l.width,height:l.height,name:u},s+=l.width+(n?1:0),e=s,i=Math.max(i,l.height+(n?2:0))}const[a,o]=Po(e,i);for(const u in r){const l=r[u];o.putImageData(this.textures[u],l.x,l.y)}return new $o(a,Object.fromEntries(Object.entries(r).map(([u,l])=>(l=l,[u,[l.x,l.y,l.width,l.height]]))))}}class Ih{constructor(){P(this,"volume",1)}playSound(n,e=1){const i=this.soundEffects[n],r=Ci(e*this.volume);if(r<=0)return;const s=document.createElement("audio");s.src=i.src,s.volume=r,s.playbackRate=1+Math.random()*i.variation,s.preservesPitch=!1;const a=()=>{s.removeEventListener("ended",a),s.remove()};s.addEventListener("ended",a),s.play()}}class Ph extends Ih{constructor(){super(...arguments);P(this,"tileset",new $o("/infinite-minesweeper/retro/tileset.png",{null:[0,0,16,16],skull:[0,16,16,16],bomb:[16,0,16,16],explosion1:[16,16,16,16],explosion2:[16,32,16,16],explosion3:[16,48,16,16],explosion4:[16,64,16,16],flag:[32,16,16,16],flag_1:[32,48,16,16],flag_2:[32,64,16,16],flag_3:[32,80,16,16],flag_anti:[32,32,16,16],flag_anti_1:[32,96,16,16],flag_anti_2:[32,112,16,16],flag_anti_3:[32,128,16,16],number_0:[48,0,16,16],number_1:[48,16,16,16],number_2:[48,32,16,16],number_3:[48,48,16,16],number_4:[48,64,16,16],number_5:[48,80,16,16],number_6:[48,96,16,16],number_7:[48,112,16,16],number_8:[48,128,16,16],number_9:[48,144,16,16],number_10:[48,160,16,16],number_11:[48,176,16,16],number_12:[48,192,16,16],number_13:[48,208,16,16],number_14:[48,224,16,16],number_15:[48,240,16,16],number_16:[48,256,16,16],number_17:[48,272,16,16],number_18:[48,288,16,16],number_19:[48,304,16,16],number_20:[48,320,16,16],number_21:[48,336,16,16],number_22:[48,352,16,16],number_23:[48,368,16,16],number_24:[48,384,16,16],number_negative_sign:[96,96,16,16],tile_vanilla_covered:[64,0,16,16],tile_vanilla_revealed:[80,0,16,16],tile_chocolate_covered:[64,16,16,16],tile_chocolate_revealed:[80,16,16,16],tile_waffle_light_covered:[64,32,16,16],tile_waffle_light_revealed:[80,32,16,16],tile_waffle_dark_covered:[96,32,16,16],tile_waffle_dark_revealed:[112,32,16,16],tile_stroopwafel_light_covered:[64,48,16,16],tile_stroopwafel_light_revealed:[80,48,16,16],tile_stroopwafel_dark_covered:[96,48,16,16],tile_stroopwafel_dark_revealed:[112,48,16,16],tile_blueberry_covered:[64,64,16,16],tile_blueberry_revealed:[80,64,16,16],tile_strawberry_covered:[64,80,16,16],tile_strawberry_revealed:[80,80,16,16],tile_cookies_and_cream_covered:[64,96,16,16],tile_cookies_and_cream_revealed:[80,96,16,16]}));P(this,"soundEffects",{reveal:{src:"/infinite-minesweeper/retro/reveal.wav",variation:.25},unflag:{src:"/infinite-minesweeper/retro/unflag.wav",variation:.25},explosion:{src:"/infinite-minesweeper/retro/explosion.wav",variation:.25}})}async init(){await this.tileset.awaitLoad(),this.tileset=this.tileset.toImageDataAtlas().toImageAtlas(!0)}drawNearby(e,i){if(i!=nn){if(i<0){e.save(),e.scale(.55,.55),e.translate(.1,.45),this.tileset.draw(e,"number_negative_sign",0,0,1,1),e.fillStyle=["#FFFFFF","#0026FF","#267F00","#BA0000","#00137F","#7F0000","#008080","#33D137","#9400D8","#E48C00","#FF8F9F","#FF8F00","#598CAA","#F03E69"][-i]??"white",e.fillRect(.25-.004,.4375-.004,.4375+.008,.125+.008),e.translate(.7,0),this.drawNearby(e,-i),e.restore();return}switch(i){case 0:this.tileset.draw(e,"number_0",0,0,1,1);break;case 1:this.tileset.draw(e,"number_1",0,0,1,1);break;case 2:this.tileset.draw(e,"number_2",0,0,1,1);break;case 3:this.tileset.draw(e,"number_3",0,0,1,1);break;case 4:this.tileset.draw(e,"number_4",0,0,1,1);break;case 5:this.tileset.draw(e,"number_5",0,0,1,1);break;case 6:this.tileset.draw(e,"number_6",0,0,1,1);break;case 7:this.tileset.draw(e,"number_7",0,0,1,1);break;case 8:this.tileset.draw(e,"number_8",0,0,1,1);break;case 9:this.tileset.draw(e,"number_9",0,0,1,1);break;case 10:this.tileset.draw(e,"number_10",0,0,1,1);break;case 11:this.tileset.draw(e,"number_11",0,0,1,1);break;case 12:this.tileset.draw(e,"number_12",0,0,1,1);break;case 13:this.tileset.draw(e,"number_13",0,0,1,1);break;case 14:this.tileset.draw(e,"number_14",0,0,1,1);break;case 15:this.tileset.draw(e,"number_15",0,0,1,1);break;case 16:this.tileset.draw(e,"number_16",0,0,1,1);break;case 17:this.tileset.draw(e,"number_17",0,0,1,1);break;case 18:this.tileset.draw(e,"number_18",0,0,1,1);break;case 19:this.tileset.draw(e,"number_19",0,0,1,1);break;case 20:this.tileset.draw(e,"number_20",0,0,1,1);break;case 21:this.tileset.draw(e,"number_21",0,0,1,1);break;case 22:this.tileset.draw(e,"number_22",0,0,1,1);break;case 23:this.tileset.draw(e,"number_23",0,0,1,1);break;case 24:this.tileset.draw(e,"number_24",0,0,1,1);break;default:throw new Error(`ThemeRetro invalid draw nearby count. ${i}`)}}}drawFlags(e,i){switch(i){case 0:break;case 1:this.tileset.draw(e,"flag_1",0,0,1,1);break;case 2:this.tileset.draw(e,"flag_2",0,0,1,1);break;case 3:this.tileset.draw(e,"flag_3",0,0,1,1);break;case-1:this.tileset.draw(e,"flag_anti_1",0,0,1,1);break;case-2:this.tileset.draw(e,"flag_anti_2",0,0,1,1);break;case-3:this.tileset.draw(e,"flag_anti_3",0,0,1,1);break;default:throw new Error("ThemeRetro invalid draw flag count.")}}drawSingleMineTile(e,i,r,s,a){if(a){this.tileset.draw(e,r,0,0,1,1);return}switch(i.state){case Rt.Covered:this.tileset.draw(e,r,0,0,1,1);break;case Rt.Flagged:this.tileset.draw(e,r,0,0,1,1),this.tileset.draw(e,"flag",0,0,1,1);break;case Rt.Revealed:{this.tileset.draw(e,s,0,0,1,1),this.drawNearby(e,i.minesNearby());break}}}drawMultiMineTile(e,i,r,s,a){if(a){this.tileset.draw(e,r,0,0,1,1);return}i.isRevealed?(this.tileset.draw(e,s,0,0,1,1),this.drawNearby(e,i.minesNearby())):(this.tileset.draw(e,r,0,0,1,1),this.drawFlags(e,i.numFlags()))}drawStrawberryTile(e,i,r){if(r){this.tileset.draw(e,"tile_strawberry_covered",0,0,1,1);return}switch(i.state){case Rt.Covered:this.tileset.draw(e,"tile_strawberry_covered",0,0,1,1);break;case Rt.Flagged:this.tileset.draw(e,"tile_strawberry_covered",0,0,1,1),this.tileset.draw(e,"flag",0,0,1,1);break;case Rt.Revealed:{this.tileset.draw(e,"tile_strawberry_revealed",0,0,1,1);const s=i.minesNearby(!0),a=i.secondaryMinesNearby(!0);a==null?this.drawNearby(e,s):(e.save(),e.scale(.55,.55),e.translate(.1,.45),this.drawNearby(e,i.secondaryNearbyCountRightSide?s:a),e.translate(.7,0),this.drawNearby(e,i.secondaryNearbyCountRightSide?a:s),e.restore());break}}}drawSingleAntiMineTile(e,i,r,s,a){if(a){this.tileset.draw(e,r,0,0,1,1);return}switch(i.state){case wn.Covered:this.tileset.draw(e,r,0,0,1,1);break;case wn.Flagged:this.tileset.draw(e,r,0,0,1,1),this.tileset.draw(e,"flag",0,0,1,1);break;case wn.AntiFlagged:this.tileset.draw(e,r,0,0,1,1),this.tileset.draw(e,"flag_anti",0,0,1,1);break;case wn.Revealed:{this.tileset.draw(e,s,0,0,1,1),this.drawNearby(e,i.minesNearby());break}}}drawForcedTile(e,i,r){switch(i.type){case"vanilla":this.drawSingleMineTile(e,i,"tile_vanilla_covered","tile_vanilla_revealed",r);break;case"chocolate":this.drawSingleMineTile(e,i,"tile_chocolate_covered","tile_chocolate_revealed",r);break;case"waffle":{i.isDark?this.drawSingleMineTile(e,i,"tile_waffle_dark_covered","tile_waffle_dark_revealed",r):this.drawSingleMineTile(e,i,"tile_waffle_light_covered","tile_waffle_light_revealed",r);break}case"stroopwafel":{i.isDark?this.drawSingleMineTile(e,i,"tile_stroopwafel_dark_covered","tile_stroopwafel_dark_revealed",r):this.drawSingleMineTile(e,i,"tile_stroopwafel_light_covered","tile_stroopwafel_light_revealed",r);break}case"blueberry":{this.drawMultiMineTile(e,i,"tile_blueberry_covered","tile_blueberry_revealed",r);break}case"strawberry":{this.drawStrawberryTile(e,i,r);break}case"cookies_and_cream":{this.drawSingleAntiMineTile(e,i,"tile_cookies_and_cream_covered","tile_cookies_and_cream_revealed",r);break}}}drawTile(e,i){e.save(),e.translate(i.x,i.y),this.drawForcedTile(e,i,!1),e.restore()}drawParticle(e,i){switch(e.save(),i.type){case"flag":{e.translate(i.x+.5,i.y+.5),e.rotate(i.r),e.globalAlpha=i.opacity,i.isMultiFlag?(e.translate(-.5,-.5),this.drawFlags(e,i.numFlags)):i.numFlags==1?this.tileset.draw(e,"flag",-.5,-.5,1,1):this.tileset.draw(e,"flag_anti",-.5,-.5,1,1);break}case"explosion":{const r=["explosion1","explosion2","explosion3","explosion4"],s=Math.min(Math.floor(i.lifetime/i.maxLifetime*r.length),r.length-1);this.tileset.draw(e,r[s],i.tile.x,i.tile.y,1,1);break}case"faketile":{e.translate(i.tile.x,i.tile.y),e.globalAlpha=i.opacity,this.drawForcedTile(e,i.tile,!0);break}case"tilereveal":{e.translate(i.x+.5,i.y+.5),e.rotate(i.r),e.translate(-.5,-.5),e.globalAlpha=i.opacity,this.drawForcedTile(e,i.tile,!0);break}}e.globalAlpha=1,e.restore()}drawDeathIcon(e,i,r){this.tileset.draw(e,"skull",i,r,1,1)}}function ua(t){let n,e;return n=new Eh({props:{world:t[0],theme:t[4],viewport:t[1]}}),n.$on("action",t[7]),{c(){le(n.$$.fragment)},l(i){ce(n.$$.fragment,i)},m(i,r){ue(n,i,r),e=!0},p(i,r){const s={};r&1&&(s.world=i[0]),r&16&&(s.theme=i[4]),r&2&&(s.viewport=i[1]),n.$set(s)},i(i){e||(j(n.$$.fragment,i),e=!0)},o(i){V(n.$$.fragment,i),e=!1},d(i){fe(n,i)}}}function Sh(t){let n,e,i,r,s=t[0]&&t[4]&&t[1]&&ua(t);return{c(){s&&s.c(),n=Qe()},l(a){s&&s.l(a),n=Qe()},m(a,o){s&&s.m(a,o),X(a,n,o),e=!0,i||(r=be(window,"beforeunload",t[6]),i=!0)},p(a,[o]){a[0]&&a[4]&&a[1]?s?(s.p(a,o),o&19&&j(s,1)):(s=ua(a),s.c(),j(s,1),s.m(n.parentNode,n)):s&&(Cn(),V(s,1,1,()=>{s=null}),Dn())},i(a){e||(j(s),e=!0)},o(a){V(s),e=!1},d(a){a&&x(n),s&&s.d(a),i=!1,r()}}}function Ah(t,n,e){let i;zt(t,kr,p=>e(5,i=p));let{saveSlot:r}=n,{world:s}=n,a=new Ph,{viewport:o}=n,{bookmarks:u=[]}=n;_i(async()=>{await a.init();const p=Zf(r);e(0,s=p.world),e(1,o=p.viewport??new zr(s)),e(2,u=p.bookmarks??[]),s.addEventListener("sound_unflag",()=>{a.playSound("unflag")}),s.addEventListener("sound_reveal",({data:m})=>{a.playSound("reveal",m/10+.9)}),s.addEventListener("sound_explosion",()=>{a.playSound("explosion")})}),mi(()=>{s.destroyDispatcher(),o.destroyDispatcher(),location.reload()});const l=()=>{Vf(r,{world:s,viewport:o,bookmarks:u})},f=p=>{p.detail.type=="reveal"?s.reveal(p.detail.pos.x,p.detail.pos.y):p.detail.type=="flag"?s.flag(p.detail.pos.x,p.detail.pos.y):p.detail.type=="reset"&&s.reset(p.detail.pos.x,p.detail.pos.y)};return t.$$set=p=>{"saveSlot"in p&&e(3,r=p.saveSlot),"world"in p&&e(0,s=p.world),"viewport"in p&&e(1,o=p.viewport),"bookmarks"in p&&e(2,u=p.bookmarks)},t.$$.update=()=>{t.$$.dirty&32&&e(4,a.volume=i,a)},[s,o,u,r,a,i,l,f]}class xh extends ye{constructor(n){super(),ke(this,n,Ah,Sh,ve,{saveSlot:3,world:0,viewport:1,bookmarks:2})}}/**
 * @license lucide-svelte v0.372.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Nh={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":2,"stroke-linecap":"round","stroke-linejoin":"round"},fa=Nh;function ha(t,n,e){const i=t.slice();return i[10]=n[e][0],i[11]=n[e][1],i}function ar(t){let n,e=[t[11]],i={};for(let r=0;r<e.length;r+=1)i=he(i,e[r]);return{c(){n=Pa(t[10]),this.h()},l(r){n=Sa(r,t[10],{}),Z(n).forEach(x),this.h()},h(){ui(n,i)},m(r,s){X(r,n,s)},p(r,s){ui(n,i=_t(e,[s&32&&r[11]]))},d(r){r&&x(n)}}}function da(t){let n=t[10],e,i=t[10]&&ar(t);return{c(){i&&i.c(),e=Qe()},l(r){i&&i.l(r),e=Qe()},m(r,s){i&&i.m(r,s),X(r,e,s)},p(r,s){r[10]?n?ve(n,r[10])?(i.d(1),i=ar(r),n=r[10],i.c(),i.m(e.parentNode,e)):i.p(r,s):(i=ar(r),n=r[10],i.c(),i.m(e.parentNode,e)):n&&(i.d(1),i=null,n=r[10])},d(r){r&&x(e),i&&i.d(r)}}}function Ch(t){let n,e,i,r,s,a=Qt(t[5]),o=[];for(let m=0;m<a.length;m+=1)o[m]=da(ha(t,a,m));const u=t[9].default,l=Fe(u,t,t[8],null);let f=[fa,t[6],{width:t[2]},{height:t[2]},{stroke:t[1]},{"stroke-width":i=t[4]?Number(t[3])*24/Number(t[2]):t[3]},{class:r=`lucide-icon lucide lucide-${t[0]} ${t[7].class??""}`}],p={};for(let m=0;m<f.length;m+=1)p=he(p,f[m]);return{c(){n=Pa("svg");for(let m=0;m<o.length;m+=1)o[m].c();e=Qe(),l&&l.c(),this.h()},l(m){n=Sa(m,"svg",{width:!0,height:!0,stroke:!0,"stroke-width":!0,class:!0});var d=Z(n);for(let g=0;g<o.length;g+=1)o[g].l(d);e=Qe(),l&&l.l(d),d.forEach(x),this.h()},h(){ui(n,p)},m(m,d){X(m,n,d);for(let g=0;g<o.length;g+=1)o[g]&&o[g].m(n,null);$(n,e),l&&l.m(n,null),s=!0},p(m,[d]){if(d&32){a=Qt(m[5]);let g;for(g=0;g<a.length;g+=1){const w=ha(m,a,g);o[g]?o[g].p(w,d):(o[g]=da(w),o[g].c(),o[g].m(n,e))}for(;g<o.length;g+=1)o[g].d(1);o.length=a.length}l&&l.p&&(!s||d&256)&&Ue(l,u,m,m[8],s?He(u,m[8],d,null):ze(m[8]),null),ui(n,p=_t(f,[fa,d&64&&m[6],(!s||d&4)&&{width:m[2]},(!s||d&4)&&{height:m[2]},(!s||d&2)&&{stroke:m[1]},(!s||d&28&&i!==(i=m[4]?Number(m[3])*24/Number(m[2]):m[3]))&&{"stroke-width":i},(!s||d&129&&r!==(r=`lucide-icon lucide lucide-${m[0]} ${m[7].class??""}`))&&{class:r}]))},i(m){s||(j(l,m),s=!0)},o(m){V(l,m),s=!1},d(m){m&&x(n),Er(o,m),l&&l.d(m)}}}function Dh(t,n,e){const i=["name","color","size","strokeWidth","absoluteStrokeWidth","iconNode"];let r=cs(n,i),{$$slots:s={},$$scope:a}=n,{name:o}=n,{color:u="currentColor"}=n,{size:l=24}=n,{strokeWidth:f=2}=n,{absoluteStrokeWidth:p=!1}=n,{iconNode:m}=n;return t.$$set=d=>{e(7,n=he(he({},n),Se(d))),e(6,r=cs(n,i)),"name"in d&&e(0,o=d.name),"color"in d&&e(1,u=d.color),"size"in d&&e(2,l=d.size),"strokeWidth"in d&&e(3,f=d.strokeWidth),"absoluteStrokeWidth"in d&&e(4,p=d.absoluteStrokeWidth),"iconNode"in d&&e(5,m=d.iconNode),"$$scope"in d&&e(8,a=d.$$scope)},n=Se(n),[o,u,l,f,p,m,r,n,a,s]}class Bt extends ye{constructor(n){super(),ke(this,n,Dh,Ch,ve,{name:0,color:1,size:2,strokeWidth:3,absoluteStrokeWidth:4,iconNode:5})}}function Mh(t){let n;const e=t[2].default,i=Fe(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?He(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function Oh(t){let n,e;const i=[{name:"info"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Mh]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Mt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function Bh(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["circle",{cx:"12",cy:"12",r:"10"}],["path",{d:"M12 16v-4"}],["path",{d:"M12 8h.01"}]];return t.$$set=a=>{e(1,n=he(he({},n),Se(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Se(n),[s,n,i,r]}class $h extends ye{constructor(n){super(),ke(this,n,Bh,Oh,ve,{})}}function _a(t){let n,e,i,r,s,a,o=t[1]&&ma(t);const u=t[4].default,l=Fe(u,t,t[3],null);return{c(){n=R("div"),e=R("div"),o&&o.c(),i=ae(),r=R("div"),s=R("div"),l&&l.c(),this.h()},l(f){n=L(f,"DIV",{class:!0});var p=Z(n);e=L(p,"DIV",{class:!0});var m=Z(e);o&&o.l(m),m.forEach(x),i=oe(p),r=L(p,"DIV",{class:!0});var d=Z(r);s=L(d,"DIV",{class:!0});var g=Z(s);l&&l.l(g),g.forEach(x),d.forEach(x),p.forEach(x),this.h()},h(){B(e,"class","modal-background svelte-9y1m1s"),Jt(e,"modal-background-styled",t[2]),B(s,"class","pointer-events-auto"),B(r,"class","modal-content flex justify-center items-center pointer-events-none p-8 svelte-9y1m1s"),B(n,"class","modal force-overlap svelte-9y1m1s")},m(f,p){X(f,n,p),$(n,e),o&&o.m(e,null),$(n,i),$(n,r),$(r,s),l&&l.m(s,null),a=!0},p(f,p){f[1]?o?o.p(f,p):(o=ma(f),o.c(),o.m(e,null)):o&&(o.d(1),o=null),(!a||p&4)&&Jt(e,"modal-background-styled",f[2]),l&&l.p&&(!a||p&8)&&Ue(l,u,f,f[3],a?He(u,f[3],p,null):ze(f[3]),null)},i(f){a||(j(l,f),a=!0)},o(f){V(l,f),a=!1},d(f){f&&x(n),o&&o.d(),l&&l.d(f)}}}function ma(t){let n,e,i;return{c(){n=R("button"),this.h()},l(r){n=L(r,"BUTTON",{class:!0,"aria-label":!0}),Z(n).forEach(x),this.h()},h(){B(n,"class","w-full h-full"),B(n,"aria-label","Close Modal")},m(r,s){X(r,n,s),e||(i=be(n,"click",t[5]),e=!0)},p:De,d(r){r&&x(n),e=!1,i()}}}function Rh(t){let n,e,i=t[0]&&_a(t);return{c(){i&&i.c(),n=Qe()},l(r){i&&i.l(r),n=Qe()},m(r,s){i&&i.m(r,s),X(r,n,s),e=!0},p(r,[s]){r[0]?i?(i.p(r,s),s&1&&j(i,1)):(i=_a(r),i.c(),j(i,1),i.m(n.parentNode,n)):i&&(Cn(),V(i,1,1,()=>{i=null}),Dn())},i(r){e||(j(i),e=!0)},o(r){V(i),e=!1},d(r){r&&x(n),i&&i.d(r)}}}function Lh(t,n,e){let{$$slots:i={},$$scope:r}=n,{visible:s=!1}=n,{closable:a=!0}=n,{backgroundStyle:o=!0}=n;const u=()=>e(0,s=!1);return t.$$set=l=>{"visible"in l&&e(0,s=l.visible),"closable"in l&&e(1,a=l.closable),"backgroundStyle"in l&&e(2,o=l.backgroundStyle),"$$scope"in l&&e(3,r=l.$$scope)},[s,a,o,r,i,u]}class or extends ye{constructor(n){super(),ke(this,n,Lh,Rh,ve,{visible:0,closable:1,backgroundStyle:2})}}function Fh(t){let n;const e=t[2].default,i=Fe(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?He(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function Uh(t){let n,e;const i=[{name:"chevron-left"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Fh]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Mt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function zh(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"m15 18-6-6 6-6"}]];return t.$$set=a=>{e(1,n=he(he({},n),Se(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Se(n),[s,n,i,r]}class Hh extends ye{constructor(n){super(),ke(this,n,zh,Uh,ve,{})}}function jh(t){let n;const e=t[2].default,i=Fe(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?He(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function Zh(t){let n,e;const i=[{name:"chevron-right"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[jh]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Mt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function Vh(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"m9 18 6-6-6-6"}]];return t.$$set=a=>{e(1,n=he(he({},n),Se(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Se(n),[s,n,i,r]}class Yh extends ye{constructor(n){super(),ke(this,n,Vh,Zh,ve,{})}}function Xh(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_strawberry_screenshot.png" alt="Strawberry Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Strawberry</h2> <div class="biome-description svelte-1pkhcy2">Tile nearby mine count may have 2 values.
                        <br/><br/>
                        Be careful while revealing tiles; If any of the two values match, the tiles will auto reveal.</div></div>`;return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Pe(n)!=="svelte-1hn2487"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function Wh(t){let n,e='<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_blueberry_screenshot.png" alt="Blueberry Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Blueberry</h2> <div class="biome-description svelte-1pkhcy2">Tiles may have up to 3 mines.</div></div>';return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Pe(n)!=="svelte-1pq8aco"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function Gh(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_stroopwafel_screenshot.png" alt="Stroopwafel Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Stroopwafel</h2> <div class="biome-description svelte-1pkhcy2">3x3 checkers of tiles.<br/>
                        Dark checkered sections have 8 mines.<br/>
                        Light checkered sections have 1 mine.</div></div>`;return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Pe(n)!=="svelte-4cbz83"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function Kh(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_waffle_screenshot.png" alt="Waffle Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Waffle</h2> <div class="biome-description svelte-1pkhcy2">2x2 checkers of tiles.<br/>
                        Dark checkered sections have 3 mines.<br/>
                        Light checkered sections have 1 mine.</div></div>`;return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Pe(n)!=="svelte-1ji8mo3"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function qh(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_chocolate_screenshot.png" alt="Chocolate Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Chocolate</h2> <div class="biome-description svelte-1pkhcy2">The standard Minesweeper rules.<br/>
                        Much more mines than Vanilla biome.</div></div>`;return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Pe(n)!=="svelte-gc9i28"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function Jh(t){let n,e='<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_vanilla_screenshot.png" alt="Vanilla Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Vanilla</h2> <div class="biome-description svelte-1pkhcy2">The standard Minesweeper rules.</div></div>';return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Pe(n)!=="svelte-ic5bha"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function Qh(t){let n,e,i,r,s,a,o,u,l,f,p,m;function d(y,S){if(y[0]=="Vanilla")return Jh;if(y[0]=="Chocolate")return qh;if(y[0]=="Waffle")return Kh;if(y[0]=="Stroopwafel")return Gh;if(y[0]=="Blueberry")return Wh;if(y[0]=="Strawberry")return Xh}let g=d(t),w=g&&g(t);return a=new Hh({}),l=new Yh({}),{c(){n=R("div"),e=R("div"),w&&w.c(),i=ae(),r=R("div"),s=R("button"),le(a.$$.fragment),o=ae(),u=R("button"),le(l.$$.fragment),this.h()},l(y){n=L(y,"DIV",{class:!0});var S=Z(n);e=L(S,"DIV",{class:!0});var v=Z(e);w&&w.l(v),v.forEach(x),i=oe(S),r=L(S,"DIV",{class:!0});var M=Z(r);s=L(M,"BUTTON",{class:!0});var T=Z(s);ce(a.$$.fragment,T),T.forEach(x),o=oe(M),u=L(M,"BUTTON",{class:!0});var O=Z(u);ce(l.$$.fragment,O),O.forEach(x),M.forEach(x),S.forEach(x),this.h()},h(){B(e,"class","pointer-events-auto px-12"),B(s,"class","pointer-events-auto pl-4 hover:-translate-x-1 transition-transform"),B(u,"class","pointer-events-auto pr-4 hover:translate-x-1 transition-transform"),B(r,"class","pointer-events-none flex justify-between z-10"),B(n,"class","w-full h-full force-overlap text-white")},m(y,S){X(y,n,S),$(n,e),w&&w.m(e,null),$(n,i),$(n,r),$(r,s),ue(a,s,null),$(r,o),$(r,u),ue(l,u,null),f=!0,p||(m=[be(s,"click",t[2]),be(u,"click",t[3])],p=!0)},p(y,[S]){g!==(g=d(y))&&(w&&w.d(1),w=g&&g(y),w&&(w.c(),w.m(e,null)))},i(y){f||(j(a.$$.fragment,y),j(l.$$.fragment,y),f=!0)},o(y){V(a.$$.fragment,y),V(l.$$.fragment,y),f=!1},d(y){y&&x(n),w&&w.d(),fe(a),fe(l),p=!1,sn(m)}}}function ed(t,n,e){const i=["Vanilla","Chocolate","Waffle","Stroopwafel","Blueberry","Strawberry"];let r="Vanilla";function s(u){let l=i.indexOf(r);l+=u=="next"?1:-1,l>=i.length&&(l=0),l<0&&(l=i.length-1),e(0,r=i[l])}return[r,s,u=>{u.preventDefault(),s("prev")},u=>{u.preventDefault(),s("next")}]}class td extends ye{constructor(n){super(),ke(this,n,ed,Qh,ve,{})}}function pa(t,n,e){const i=t.slice();return i[4]=n[e],i}function ga(t){let n,e=t[4]+"",i,r,s,a,o;function u(){return t[3](t[4])}return{c(){n=R("button"),i=ut(e),r=ae(),this.h()},l(l){n=L(l,"BUTTON",{class:!0});var f=Z(n);i=ft(f,e),r=oe(f),f.forEach(x),this.h()},h(){B(n,"class","tab w-full flex justify-center py-1 px-4 rounded-md svelte-1v0way8"),n.disabled=s=t[4]==t[0],Jt(n,"selected",t[4]==t[0])},m(l,f){X(l,n,f),$(n,i),$(n,r),a||(o=be(n,"click",u),a=!0)},p(l,f){t=l,f&1&&s!==(s=t[4]==t[0])&&(n.disabled=s),f&5&&Jt(n,"selected",t[4]==t[0])},d(l){l&&x(n),a=!1,o()}}}function nd(t){let n;function e(s,a){return s[1]=="mouse"?ld:s[1]=="keyboard"?od:s[1]=="touch"?ad:sd}let i=e(t),r=i(t);return{c(){n=R("div"),r.c(),this.h()},l(s){n=L(s,"DIV",{class:!0});var a=Z(n);r.l(a),a.forEach(x),this.h()},h(){B(n,"class","px-4")},m(s,a){X(s,n,a),r.m(n,null)},p(s,a){i!==(i=e(s))&&(r.d(1),r=i(s),r&&(r.c(),r.m(n,null)))},i:De,o:De,d(s){s&&x(n),r.d()}}}function id(t){let n,e,i;return e=new td({}),{c(){n=R("div"),le(e.$$.fragment),this.h()},l(r){n=L(r,"DIV",{class:!0});var s=Z(n);ce(e.$$.fragment,s),s.forEach(x),this.h()},h(){B(n,"class","w-full h-full inline")},m(r,s){X(r,n,s),ue(e,n,null),i=!0},p:De,i(r){i||(j(e.$$.fragment,r),i=!0)},o(r){V(e.$$.fragment,r),i=!1},d(r){r&&x(n),fe(e)}}}function rd(t){let n,e=`<div><a class="text-2xl font-bold" href="https://vulae.github.io/infinite-minesweeper">Infinite Minesweeper</a> <br/>
                    An infinite twist on Minesweeper that adds biomes that change the rules of the game.</div> <div class="pt-4"><span class="float-right text-xs font-extrabold">*Source code available on
                        <a class="underline" href="https://github.com/Vulae/infinite-minesweeper">GitHub</a></span></div>`;return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Pe(n)!=="svelte-1yloiaf"&&(n.innerHTML=e),this.h()},h(){B(n,"class","px-4 w-full h-full flex flex-col justify-between")},m(i,r){X(i,n,r)},p:De,i:De,o:De,d(i){i&&x(n)}}}function sd(t){let n,e="Unknown control method.";return{c(){n=R("span"),n.textContent=e},l(i){n=L(i,"SPAN",{"data-svelte-h":!0}),Pe(n)!=="svelte-1yl4tvk"&&(n.textContent=e)},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function ad(t){let n,e=`<h1 class="font-bold text-2xl">Touch Controls</h1>
                        Double Tap: Reveal tile
                        <br/>
                        Single Tap: Flag tile
                        <br/>
                        Pan: Move view
                        <br/>
                        Pinch: Zoom view`;return{c(){n=R("span"),n.innerHTML=e},l(i){n=L(i,"SPAN",{"data-svelte-h":!0}),Pe(n)!=="svelte-1ukp1tk"&&(n.innerHTML=e)},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function od(t){let n,e=`<h1 class="font-bold text-2xl">Keyboard Controls</h1>
                        Keyboard control method not yet supported.`;return{c(){n=R("span"),n.innerHTML=e},l(i){n=L(i,"SPAN",{"data-svelte-h":!0}),Pe(n)!=="svelte-1rw6f38"&&(n.innerHTML=e)},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function ld(t){let n,e=`<h1 class="font-bold text-2xl">Mouse Controls</h1>
                        Left Click: Reveal tile
                        <br/>
                        Right Click: Flag tile
                        <br/>
                        Left Click Drag: Move view
                        <br/>
                        Scroll Wheel: Zoom view`;return{c(){n=R("span"),n.innerHTML=e},l(i){n=L(i,"SPAN",{"data-svelte-h":!0}),Pe(n)!=="svelte-k2yzda"&&(n.innerHTML=e)},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function cd(t){let n,e,i,r,s,a,o,u,l,f=Qt(t[2]),p=[];for(let w=0;w<f.length;w+=1)p[w]=ga(pa(t,f,w));const m=[rd,id,nd],d=[];function g(w,y){return w[0]=="Information"?0:w[0]=="Biomes"?1:w[0]=="Controls"?2:-1}return~(o=g(t))&&(u=d[o]=m[o](t)),{c(){n=R("div"),e=R("div");for(let w=0;w<p.length;w+=1)p[w].c();i=ae(),r=R("div"),s=ae(),a=R("div"),u&&u.c(),this.h()},l(w){n=L(w,"DIV",{class:!0});var y=Z(n);e=L(y,"DIV",{class:!0});var S=Z(e);for(let M=0;M<p.length;M+=1)p[M].l(S);S.forEach(x),i=oe(y),r=L(y,"DIV",{class:!0}),Z(r).forEach(x),s=oe(y),a=L(y,"DIV",{class:!0});var v=Z(a);u&&u.l(v),v.forEach(x),y.forEach(x),this.h()},h(){B(e,"class","px-4 grid grid-flow-col gap-4 items-center font-bold"),B(r,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full"),B(a,"class","w-[32rem] h-64 py-2 font-semibold"),B(n,"class","grid px-4 py-2 rounded-2xl bg-white bg-opacity-50")},m(w,y){X(w,n,y),$(n,e);for(let S=0;S<p.length;S+=1)p[S]&&p[S].m(e,null);$(n,i),$(n,r),$(n,s),$(n,a),~o&&d[o].m(a,null),l=!0},p(w,[y]){if(y&5){f=Qt(w[2]);let v;for(v=0;v<f.length;v+=1){const M=pa(w,f,v);p[v]?p[v].p(M,y):(p[v]=ga(M),p[v].c(),p[v].m(e,null))}for(;v<p.length;v+=1)p[v].d(1);p.length=f.length}let S=o;o=g(w),o===S?~o&&d[o].p(w,y):(u&&(Cn(),V(d[S],1,1,()=>{d[S]=null}),Dn()),~o?(u=d[o],u?u.p(w,y):(u=d[o]=m[o](w),u.c()),j(u,1),u.m(a,null)):u=null)},i(w){l||(j(u),l=!0)},o(w){V(u),l=!1},d(w){w&&x(n),Er(p,w),~o&&d[o].d()}}}function ud(t,n,e){let i;zt(t,Nn,o=>e(1,i=o));const r=["Information","Biomes","Controls"];let s="Information";return[s,i,r,o=>e(0,s=o)]}class fd extends ye{constructor(n){super(),ke(this,n,ud,cd,ve,{})}}function hd(t){let n;const e=t[2].default,i=Fe(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?He(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function dd(t){let n,e;const i=[{name:"skull"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[hd]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Mt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function _d(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["circle",{cx:"9",cy:"12",r:"1"}],["circle",{cx:"15",cy:"12",r:"1"}],["path",{d:"M8 20v2h8v-2"}],["path",{d:"m12.5 17-.5-1-.5 1h1z"}],["path",{d:"M16 20a2 2 0 0 0 1.56-3.25 8 8 0 1 0-11.12 0A2 2 0 0 0 8 20"}]];return t.$$set=a=>{e(1,n=he(he({},n),Se(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Se(n),[s,n,i,r]}class md extends ye{constructor(n){super(),ke(this,n,_d,dd,ve,{})}}function pd(t){let n,e,i,r,s,a,o;return e=new md({}),{c(){n=R("div"),le(e.$$.fragment),i=ae(),r=R("span"),s=ut(t[1]),this.h()},l(u){n=L(u,"DIV",{class:!0,title:!0});var l=Z(n);ce(e.$$.fragment,l),i=oe(l),r=L(l,"SPAN",{class:!0});var f=Z(r);s=ft(f,t[1]),f.forEach(x),l.forEach(x),this.h()},h(){B(r,"class","text-sm"),B(n,"class","flex items-center"),B(n,"title",a=t[1]+" deaths"),qe(n,"flex-direction",t[0]=="horizontal"?"row":"column")},m(u,l){X(u,n,l),ue(e,n,null),$(n,i),$(n,r),$(r,s),o=!0},p(u,[l]){(!o||l&2)&&ai(s,u[1]),(!o||l&2&&a!==(a=u[1]+" deaths"))&&B(n,"title",a),l&1&&qe(n,"flex-direction",u[0]=="horizontal"?"row":"column")},i(u){o||(j(e.$$.fragment,u),o=!0)},o(u){V(e.$$.fragment,u),o=!1},d(u){u&&x(n),fe(e)}}}function gd(t,n,e){let{layout:i}=n,{world:r}=n,s,a=0,o=null;return t.$$set=u=>{"layout"in u&&e(0,i=u.layout),"world"in u&&e(2,r=u.world)},t.$$.update=()=>{t.$$.dirty&28&&r&&(o==null||o.removeEventListener(s),e(1,a=r.deaths),e(3,s=r.addEventListener("die",()=>{e(1,a=r.deaths)})),e(4,o=r))},[i,a,r,s,o]}class bd extends ye{constructor(n){super(),ke(this,n,gd,pd,ve,{layout:0,world:2})}}function vd(t){let n;const e=t[2].default,i=Fe(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?He(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function wd(t){let n,e;const i=[{name:"plus"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[vd]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Mt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function yd(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"M5 12h14"}],["path",{d:"M12 5v14"}]];return t.$$set=a=>{e(1,n=he(he({},n),Se(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Se(n),[s,n,i,r]}class kd extends ye{constructor(n){super(),ke(this,n,yd,wd,ve,{})}}function Ed(t){let n;const e=t[2].default,i=Fe(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?He(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function Td(t){let n,e;const i=[{name:"bookmark-minus"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Ed]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Mt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function Id(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"}],["line",{x1:"15",x2:"9",y1:"10",y2:"10"}]];return t.$$set=a=>{e(1,n=he(he({},n),Se(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Se(n),[s,n,i,r]}class Pd extends ye{constructor(n){super(),ke(this,n,Id,Td,ve,{})}}function ba(t,n,e){const i=t.slice();return i[9]=n[e],i[11]=e,i}function va(t){let n;return{c(){n=R("div"),this.h()},l(e){n=L(e,"DIV",{class:!0}),Z(n).forEach(x),this.h()},h(){B(n,"class","w-full h-0.5 bg-black bg-opacity-50 my-1 rounded-full svelte-1wmwp0k")},m(e,i){X(e,n,i)},d(e){e&&x(n)}}}function wa(t){let n,e,i,r=t[9].createdAt.toLocaleDateString()+"",s,a,o=t[9].createdAt.toLocaleTimeString()+"",u,l,f,p=t[9].name+"",m,d,g,w,y,S,v,M,T;function O(){return t[5](t[9])}w=new Pd({props:{size:"2rem"}});function Y(){return t[6](t[11])}let E=t[11]<t[0].length-1&&va();return{c(){n=R("li"),e=R("button"),i=R("span"),s=ut(r),a=ae(),u=ut(o),l=ae(),f=R("div"),m=ut(p),d=ae(),g=R("button"),le(w.$$.fragment),y=ae(),E&&E.c(),S=Qe(),this.h()},l(D){n=L(D,"LI",{class:!0});var A=Z(n);e=L(A,"BUTTON",{class:!0});var k=Z(e);i=L(k,"SPAN",{class:!0});var F=Z(i);s=ft(F,r),a=oe(F),u=ft(F,o),F.forEach(x),l=oe(k),f=L(k,"DIV",{class:!0});var U=Z(f);m=ft(U,p),U.forEach(x),k.forEach(x),d=oe(A),g=L(A,"BUTTON",{class:!0,title:!0});var K=Z(g);ce(w.$$.fragment,K),K.forEach(x),A.forEach(x),y=oe(D),E&&E.l(D),S=Qe(),this.h()},h(){B(i,"class","text-xs font-normal svelte-1wmwp0k"),B(f,"class","text-xl font-bold svelte-1wmwp0k"),B(e,"class","flex flex-col ml-4 hover:text-blue-800 transition-colors svelte-1wmwp0k"),B(g,"class","hover:text-red-900 transition-colors svelte-1wmwp0k"),B(g,"title","Remove Bookmark"),B(n,"class","flex justify-between items-center svelte-1wmwp0k")},m(D,A){X(D,n,A),$(n,e),$(e,i),$(i,s),$(i,a),$(i,u),$(e,l),$(e,f),$(f,m),$(n,d),$(n,g),ue(w,g,null),X(D,y,A),E&&E.m(D,A),X(D,S,A),v=!0,M||(T=[be(e,"click",O),be(g,"click",Y)],M=!0)},p(D,A){t=D,(!v||A&1)&&r!==(r=t[9].createdAt.toLocaleDateString()+"")&&ai(s,r),(!v||A&1)&&o!==(o=t[9].createdAt.toLocaleTimeString()+"")&&ai(u,o),(!v||A&1)&&p!==(p=t[9].name+"")&&ai(m,p),t[11]<t[0].length-1?E||(E=va(),E.c(),E.m(S.parentNode,S)):E&&(E.d(1),E=null)},i(D){v||(j(w.$$.fragment,D),v=!0)},o(D){V(w.$$.fragment,D),v=!1},d(D){D&&(x(n),x(y),x(S)),fe(w),E&&E.d(D),M=!1,sn(T)}}}function ya(t){let n,e="You have no bookmarks.";return{c(){n=R("li"),n.textContent=e,this.h()},l(i){n=L(i,"LI",{class:!0,"data-svelte-h":!0}),Pe(n)!=="svelte-1r3ii7r"&&(n.textContent=e),this.h()},h(){B(n,"class","text-xl font-bold svelte-1wmwp0k")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function Sd(t){let n,e,i="Bookmarks",r,s,a,o,u,l,f,p,m,d,g,w,y,S,v,M,T=Qt(t[0]),O=[];for(let D=0;D<T.length;D+=1)O[D]=wa(ba(t,T,D));const Y=D=>V(O[D],1,1,()=>{O[D]=null});let E=t[0].length==0&&ya();return y=new kd({props:{size:"2rem"}}),{c(){n=R("div"),e=R("span"),e.textContent=i,r=ae(),s=R("div"),a=ae(),o=R("ul");for(let D=0;D<O.length;D+=1)O[D].c();u=ae(),E&&E.c(),l=ae(),f=R("div"),p=ae(),m=R("form"),d=R("input"),g=ae(),w=R("button"),le(y.$$.fragment),this.h()},l(D){n=L(D,"DIV",{class:!0});var A=Z(n);e=L(A,"SPAN",{class:!0,"data-svelte-h":!0}),Pe(e)!=="svelte-3bkqky"&&(e.textContent=i),r=oe(A),s=L(A,"DIV",{class:!0}),Z(s).forEach(x),a=oe(A),o=L(A,"UL",{class:!0});var k=Z(o);for(let K=0;K<O.length;K+=1)O[K].l(k);u=oe(k),E&&E.l(k),k.forEach(x),l=oe(A),f=L(A,"DIV",{class:!0}),Z(f).forEach(x),p=oe(A),m=L(A,"FORM",{class:!0});var F=Z(m);d=L(F,"INPUT",{placeholder:!0,type:!0,maxlength:!0,class:!0}),g=oe(F),w=L(F,"BUTTON",{type:!0,title:!0,class:!0});var U=Z(w);ce(y.$$.fragment,U),U.forEach(x),F.forEach(x),A.forEach(x),this.h()},h(){B(e,"class","text-2xl font-bold text-center svelte-1wmwp0k"),B(s,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full svelte-1wmwp0k"),B(o,"class","p-2 max-h-96 overflow-y-auto svelte-1wmwp0k"),B(f,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full svelte-1wmwp0k"),B(d,"placeholder","New Bookmark"),B(d,"type","text"),B(d,"maxlength","16"),B(d,"class","w-48 px-2 rounded-md svelte-1wmwp0k"),B(w,"type","submit"),B(w,"title","Create Bookmark"),B(w,"class","flex hover:text-green-900 transition-colors svelte-1wmwp0k"),B(m,"class","flex justify-between gap-4 px-2 pb-2 svelte-1wmwp0k"),B(n,"class","grid px-4 py-2 rounded-2xl bg-white bg-opacity-50 svelte-1wmwp0k")},m(D,A){X(D,n,A),$(n,e),$(n,r),$(n,s),$(n,a),$(n,o);for(let k=0;k<O.length;k+=1)O[k]&&O[k].m(o,null);$(o,u),E&&E.m(o,null),$(n,l),$(n,f),$(n,p),$(n,m),$(m,d),t[7](d),$(m,g),$(m,w),ue(y,w,null),S=!0,v||(M=[be(d,"keydown",dl(t[4])),be(m,"submit",t[8])],v=!0)},p(D,[A]){if(A&7){T=Qt(D[0]);let k;for(k=0;k<T.length;k+=1){const F=ba(D,T,k);O[k]?(O[k].p(F,A),j(O[k],1)):(O[k]=wa(F),O[k].c(),j(O[k],1),O[k].m(o,u))}for(Cn(),k=T.length;k<O.length;k+=1)Y(k);Dn()}D[0].length==0?E||(E=ya(),E.c(),E.m(o,null)):E&&(E.d(1),E=null)},i(D){if(!S){for(let A=0;A<T.length;A+=1)j(O[A]);j(y.$$.fragment,D),S=!0}},o(D){O=O.filter(Boolean);for(let A=0;A<O.length;A+=1)V(O[A]);V(y.$$.fragment,D),S=!1},d(D){D&&x(n),Er(O,D),E&&E.d(),t[7](null),fe(y),v=!1,sn(M)}}}function Ad(t,n,e){let{viewport:i}=n,{bookmarks:r}=n,s,{visible:a}=n;function o(m){ka.call(this,t,m)}const u=m=>{i.load(m.viewport),i.change(),e(1,a=!1)},l=m=>{r==null||r.splice(m,1),e(0,r)};function f(m){Re[m?"unshift":"push"](()=>{s=m,e(3,s)})}const p=()=>{s.value.length!=0&&(r==null||r.push({name:s.value,createdAt:new Date,viewport:i.save()}),e(0,r),e(3,s.value="",s))};return t.$$set=m=>{"viewport"in m&&e(2,i=m.viewport),"bookmarks"in m&&e(0,r=m.bookmarks),"visible"in m&&e(1,a=m.visible)},[r,a,i,s,o,u,l,f,p]}class xd extends ye{constructor(n){super(),ke(this,n,Ad,Sd,ve,{viewport:2,bookmarks:0,visible:1})}}function Nd(t){let n;const e=t[2].default,i=Fe(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?He(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function Cd(t){let n,e;const i=[{name:"bookmark"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Nd]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Mt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function Dd(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"}]];return t.$$set=a=>{e(1,n=he(he({},n),Se(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Se(n),[s,n,i,r]}class Md extends ye{constructor(n){super(),ke(this,n,Dd,Cd,ve,{})}}function Od(t){let n;return{c(){n=ut("ARE YOU SURE?")},l(e){n=ft(e,"ARE YOU SURE?")},m(e,i){X(e,n,i)},d(e){e&&x(n)}}}function Bd(t){let n;return{c(){n=ut("CLEAR SAVE")},l(e){n=ft(e,"CLEAR SAVE")},m(e,i){X(e,n,i)},d(e){e&&x(n)}}}function $d(t){let n,e,i="Settings",r,s,a,o,u,l,f,p,m="Mouse",d,g="Touch",w,y,S,v,M,T,O,Y,E,D,A,k,F;function U(q,_e){return q[2]?Od:Bd}let K=U(t),ie=K(t);return{c(){n=R("div"),e=R("span"),e.textContent=i,r=ae(),s=R("div"),a=ae(),o=R("div"),u=R("div"),l=ut(`Input Method
            `),f=R("select"),p=R("option"),p.textContent=m,d=R("option"),d.textContent=g,w=ae(),y=R("div"),S=ut(`Volume
            `),v=R("input"),T=ae(),O=R("div"),Y=ut(`Display information on load
            `),E=R("input"),D=ae(),A=R("button"),ie.c(),this.h()},l(q){n=L(q,"DIV",{class:!0});var _e=Z(n);e=L(_e,"SPAN",{class:!0,"data-svelte-h":!0}),Pe(e)!=="svelte-1v23jpc"&&(e.textContent=i),r=oe(_e),s=L(_e,"DIV",{class:!0}),Z(s).forEach(x),a=oe(_e),o=L(_e,"DIV",{class:!0});var we=Z(o);u=L(we,"DIV",{class:!0});var Me=Z(u);l=ft(Me,`Input Method
            `),f=L(Me,"SELECT",{});var je=Z(f);p=L(je,"OPTION",{"data-svelte-h":!0}),Pe(p)!=="svelte-1o1urqg"&&(p.textContent=m),d=L(je,"OPTION",{"data-svelte-h":!0}),Pe(d)!=="svelte-4sw168"&&(d.textContent=g),je.forEach(x),Me.forEach(x),w=oe(we),y=L(we,"DIV",{class:!0});var te=Z(y);S=ft(te,`Volume
            `),v=L(te,"INPUT",{type:!0,min:!0,max:!0,step:!0,title:!0}),te.forEach(x),T=oe(we),O=L(we,"DIV",{class:!0});var Ce=Z(O);Y=ft(Ce,`Display information on load
            `),E=L(Ce,"INPUT",{type:!0}),Ce.forEach(x),D=oe(we),A=L(we,"BUTTON",{class:!0});var Ze=Z(A);ie.l(Ze),Ze.forEach(x),we.forEach(x),_e.forEach(x),this.h()},h(){B(e,"class","text-2xl font-bold text-center"),B(s,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full"),p.__value="mouse",us(p,p.__value),d.__value="touch",us(d,d.__value),t[3]===void 0&&_l(()=>t[6].call(f)),B(u,"class","flex justify-between items-center gap-3"),B(v,"type","range"),B(v,"min","0"),B(v,"max","1"),B(v,"step","0.05"),v.value=t[4],B(v,"title",M=Math.round(t[4]*100)+"% Volume"),B(y,"class","flex justify-between items-center gap-3"),B(E,"type","checkbox"),B(O,"class","flex justify-between items-center gap-3"),B(A,"class","bg-black font-bold text-red-500 rounded-lg py-1"),B(o,"class","p-2 max-h-96 overflow-y-auto flex flex-col gap-4 font-semibold"),B(n,"class","grid px-4 py-2 rounded-2xl bg-white bg-opacity-50")},m(q,_e){X(q,n,_e),$(n,e),$(n,r),$(n,s),$(n,a),$(n,o),$(o,u),$(u,l),$(u,f),$(f,p),$(f,d),fs(f,t[3],!0),$(o,w),$(o,y),$(y,S),$(y,v),$(o,T),$(o,O),$(O,Y),$(O,E),E.checked=t[5],$(o,D),$(o,A),ie.m(A,null),k||(F=[be(f,"change",t[6]),be(v,"change",t[7]),be(E,"change",t[8]),be(A,"click",t[9])],k=!0)},p(q,[_e]){_e&8&&fs(f,q[3]),_e&16&&(v.value=q[4]),_e&16&&M!==(M=Math.round(q[4]*100)+"% Volume")&&B(v,"title",M),_e&32&&(E.checked=q[5]),K!==(K=U(q))&&(ie.d(1),ie=K(q),ie&&(ie.c(),ie.m(A,null)))},i:De,o:De,d(q){q&&x(n),ie.d(),k=!1,sn(F)}}}const Rd=5e3;function Ld(t,n,e){let i,r,s;zt(t,Nn,d=>e(3,i=d)),zt(t,kr,d=>e(4,r=d)),zt(t,yr,d=>e(5,s=d));let{saveSlot:a}=n,o=-1,u=!1;mi(()=>{clearTimeout(o)});function l(){i=ml(this),Nn.set(i)}const f=d=>{pl(kr,r=d.currentTarget.valueAsNumber,r)};function p(){s=this.checked,yr.set(s)}const m=()=>{u?(e(2,u=!1),Yf(a),location.reload()):(e(2,u=!0),e(1,o=setTimeout(()=>{e(2,u=!1)},Rd)))};return t.$$set=d=>{"saveSlot"in d&&e(0,a=d.saveSlot)},[a,o,u,i,r,s,l,f,p,m]}class Fd extends ye{constructor(n){super(),ke(this,n,Ld,$d,ve,{saveSlot:0})}}function Ud(t){let n;const e=t[2].default,i=Fe(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?He(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function zd(t){let n,e;const i=[{name:"settings"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Ud]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Mt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function Hd(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"}],["circle",{cx:"12",cy:"12",r:"3"}]];return t.$$set=a=>{e(1,n=he(he({},n),Se(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Se(n),[s,n,i,r]}class jd extends ye{constructor(n){super(),ke(this,n,Hd,zd,ve,{})}}function Zd(t){let n,e;return n=new fd({}),{c(){le(n.$$.fragment)},l(i){ce(n.$$.fragment,i)},m(i,r){ue(n,i,r),e=!0},i(i){e||(j(n.$$.fragment,i),e=!0)},o(i){V(n.$$.fragment,i),e=!1},d(i){fe(n,i)}}}function Vd(t){let n,e,i;function r(a){t[17](a)}let s={};return t[0]!==void 0&&(s.saveSlot=t[0]),n=new Fd({props:s}),Re.push(()=>kt(n,"saveSlot",r)),{c(){le(n.$$.fragment)},l(a){ce(n.$$.fragment,a)},m(a,o){ue(n,a,o),i=!0},p(a,o){const u={};!e&&o&1&&(e=!0,u.saveSlot=a[0],yt(()=>e=!1)),n.$set(u)},i(a){i||(j(n.$$.fragment,a),i=!0)},o(a){V(n.$$.fragment,a),i=!1},d(a){fe(n,a)}}}function Yd(t){let n,e,i,r;function s(u){t[19](u)}function a(u){t[20](u)}let o={viewport:t[7]};return t[5]!==void 0&&(o.visible=t[5]),t[8]!==void 0&&(o.bookmarks=t[8]),n=new xd({props:o}),Re.push(()=>kt(n,"visible",s)),Re.push(()=>kt(n,"bookmarks",a)),{c(){le(n.$$.fragment)},l(u){ce(n.$$.fragment,u)},m(u,l){ue(n,u,l),r=!0},p(u,l){const f={};l&128&&(f.viewport=u[7]),!e&&l&32&&(e=!0,f.visible=u[5],yt(()=>e=!1)),!i&&l&256&&(i=!0,f.bookmarks=u[8],yt(()=>i=!1)),n.$set(f)},i(u){r||(j(n.$$.fragment,u),r=!0)},o(u){V(n.$$.fragment,u),r=!1},d(u){fe(n,u)}}}function Xd(t){let n,e,i,r,s,a,o,u,l,f,p,m,d,g,w,y,S,v,M,T,O,Y,E,D,A,k,F,U,K,ie,q,_e,we,Me,je;function te(C){t[9](C)}function Ce(C){t[10](C)}function Ze(C){t[11](C)}let It={saveSlot:t[0]};t[6]!==void 0&&(It.world=t[6]),t[7]!==void 0&&(It.viewport=t[7]),t[8]!==void 0&&(It.bookmarks=t[8]),i=new xh({props:It}),Re.push(()=>kt(i,"world",te)),Re.push(()=>kt(i,"viewport",Ce)),Re.push(()=>kt(i,"bookmarks",Ze)),m=new $h({}),w=new jd({}),v=new Md({}),Y=new bd({props:{layout:t[1],world:t[6]}});function tt(C){t[16](C)}let I={$$slots:{default:[Zd]},$$scope:{ctx:t}};t[3]!==void 0&&(I.visible=t[3]),A=new or({props:I}),Re.push(()=>kt(A,"visible",tt));function H(C){t[18](C)}let J={$$slots:{default:[Vd]},$$scope:{ctx:t}};t[4]!==void 0&&(J.visible=t[4]),U=new or({props:J}),Re.push(()=>kt(U,"visible",H));function ge(C){t[21](C)}let re={$$slots:{default:[Yd]},$$scope:{ctx:t}};return t[5]!==void 0&&(re.visible=t[5]),q=new or({props:re}),Re.push(()=>kt(q,"visible",ge)),{c(){n=R("div"),e=R("div"),le(i.$$.fragment),o=ae(),u=R("div"),l=R("div"),f=R("div"),p=R("button"),le(m.$$.fragment),d=ae(),g=R("button"),le(w.$$.fragment),y=ae(),S=R("button"),le(v.$$.fragment),M=ae(),T=R("div"),O=ae(),le(Y.$$.fragment),D=ae(),le(A.$$.fragment),F=ae(),le(U.$$.fragment),ie=ae(),le(q.$$.fragment),this.h()},l(C){n=L(C,"DIV",{class:!0});var W=Z(n);e=L(W,"DIV",{class:!0});var Te=Z(e);ce(i.$$.fragment,Te),Te.forEach(x),o=oe(W),u=L(W,"DIV",{class:!0});var Xe=Z(u);l=L(Xe,"DIV",{class:!0});var We=Z(l);f=L(We,"DIV",{class:!0});var Ee=Z(f);p=L(Ee,"BUTTON",{class:!0,title:!0});var Ae=Z(p);ce(m.$$.fragment,Ae),Ae.forEach(x),d=oe(Ee),g=L(Ee,"BUTTON",{class:!0,title:!0});var rt=Z(g);ce(w.$$.fragment,rt),rt.forEach(x),y=oe(Ee),S=L(Ee,"BUTTON",{class:!0,title:!0});var hn=Z(S);ce(v.$$.fragment,hn),hn.forEach(x),M=oe(Ee),T=L(Ee,"DIV",{class:!0}),Z(T).forEach(x),O=oe(Ee),ce(Y.$$.fragment,Ee),Ee.forEach(x),We.forEach(x),Xe.forEach(x),W.forEach(x),D=oe(C),ce(A.$$.fragment,C),F=oe(C),ce(U.$$.fragment,C),ie=oe(C),ce(q.$$.fragment,C),this.h()},h(){B(e,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1"),B(p,"class","rounded-full drop-shadow-sm"),B(p,"title","Information"),B(g,"class","rounded-full drop-shadow-sm"),B(g,"title","Settings"),B(S,"class","rounded-full drop-shadow-sm"),B(S,"title","Bookmarks"),B(T,"class","w-full h-full bg-white rounded-full p-[1px]"),B(f,"class","pointer-events-auto flex items-center gap-2 rounded-full bg-white bg-opacity-30 backdrop-blur-md shadow-lg text-white font-bold stroke-[3]"),qe(f,"flex-direction",t[1]=="vertical"?"column":"row"),qe(f,"padding",t[1]=="vertical"?"1rem 0.5rem":"0.5rem 1rem"),B(l,"class","w-full h-full flex items-center p-4"),qe(l,"flex-direction",t[1]=="vertical"?"row":"column"),qe(l,"justify-content",t[2]=="start"?"start":"end"),B(u,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1 pointer-events-none"),qe(u,"opacity",t[3]||t[4]||t[5]?0:1),B(n,"class","w-screen h-screen grid grid-cols-1 grid-rows-1")},m(C,W){X(C,n,W),$(n,e),ue(i,e,null),$(n,o),$(n,u),$(u,l),$(l,f),$(f,p),ue(m,p,null),$(f,d),$(f,g),ue(w,g,null),$(f,y),$(f,S),ue(v,S,null),$(f,M),$(f,T),$(f,O),ue(Y,f,null),X(C,D,W),ue(A,C,W),X(C,F,W),ue(U,C,W),X(C,ie,W),ue(q,C,W),we=!0,Me||(je=[be(p,"click",t[12]),be(g,"click",t[13]),be(S,"click",t[14]),Ta(E=Oo.call(null,u,t[15]))],Me=!0)},p(C,[W]){const Te={};W&1&&(Te.saveSlot=C[0]),!r&&W&64&&(r=!0,Te.world=C[6],yt(()=>r=!1)),!s&&W&128&&(s=!0,Te.viewport=C[7],yt(()=>s=!1)),!a&&W&256&&(a=!0,Te.bookmarks=C[8],yt(()=>a=!1)),i.$set(Te);const Xe={};W&2&&(Xe.layout=C[1]),W&64&&(Xe.world=C[6]),Y.$set(Xe),W&2&&qe(f,"flex-direction",C[1]=="vertical"?"column":"row"),W&2&&qe(f,"padding",C[1]=="vertical"?"1rem 0.5rem":"0.5rem 1rem"),W&2&&qe(l,"flex-direction",C[1]=="vertical"?"row":"column"),W&4&&qe(l,"justify-content",C[2]=="start"?"start":"end"),E&&Ia(E.update)&&W&6&&E.update.call(null,C[15]),W&56&&qe(u,"opacity",C[3]||C[4]||C[5]?0:1);const We={};W&8388608&&(We.$$scope={dirty:W,ctx:C}),!k&&W&8&&(k=!0,We.visible=C[3],yt(()=>k=!1)),A.$set(We);const Ee={};W&8388609&&(Ee.$$scope={dirty:W,ctx:C}),!K&&W&16&&(K=!0,Ee.visible=C[4],yt(()=>K=!1)),U.$set(Ee);const Ae={};W&8389024&&(Ae.$$scope={dirty:W,ctx:C}),!_e&&W&32&&(_e=!0,Ae.visible=C[5],yt(()=>_e=!1)),q.$set(Ae)},i(C){we||(j(i.$$.fragment,C),j(m.$$.fragment,C),j(w.$$.fragment,C),j(v.$$.fragment,C),j(Y.$$.fragment,C),j(A.$$.fragment,C),j(U.$$.fragment,C),j(q.$$.fragment,C),we=!0)},o(C){V(i.$$.fragment,C),V(m.$$.fragment,C),V(w.$$.fragment,C),V(v.$$.fragment,C),V(Y.$$.fragment,C),V(A.$$.fragment,C),V(U.$$.fragment,C),V(q.$$.fragment,C),we=!1},d(C){C&&(x(n),x(D),x(F),x(ie)),fe(i),fe(m),fe(w),fe(v),fe(Y),fe(A,C),fe(U,C),fe(q,C),Me=!1,sn(je)}}}function Wd(t,n,e){let i;zt(t,yr,k=>e(22,i=k));let r="save",s="vertical",a="end",o=!1,u=!1,l=!1,f,p,m=[];_i(()=>{i&&e(3,o=!0)});function d(k){f=k,e(6,f)}function g(k){p=k,e(7,p)}function w(k){m=k,e(8,m)}const y=()=>e(3,o=!0),S=()=>e(4,u=!0),v=()=>e(5,l=!0),M=(k,F)=>{e(1,s=k>F?"vertical":"horizontal"),e(2,a=k>F?"end":"start")};function T(k){o=k,e(3,o)}function O(k){r=k,e(0,r)}function Y(k){u=k,e(4,u)}function E(k){l=k,e(5,l)}function D(k){m=k,e(8,m)}function A(k){l=k,e(5,l)}return[r,s,a,o,u,l,f,p,m,d,g,w,y,S,v,M,T,O,Y,E,D,A]}class Jd extends ye{constructor(n){super(),ke(this,n,Wd,Xd,ve,{})}}export{Jd as component};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
