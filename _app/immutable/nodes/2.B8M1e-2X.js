var ba=Object.defineProperty;var pa=(e,i,t)=>i in e?ba(e,i,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[i]=t;var _=(e,i,t)=>(pa(e,typeof i!="symbol"?i+"":i,t),t);import{s as oe,e as R,a as ae,c as L,b as F,f as T,g as se,p as I,i as P,h as U,S as q,T as er,H as tr,n as ze,E as Ti,U as ga,o as Ai,V as ir,r as Ct,l as Se,k as di,W as Pi,z as Xe,X,w as nr,x as rr,Y as Zt,B as je,C as Ge,D as We,Z as ar,_ as Hi,$ as me,y as Ze,t as sr,d as lr,a0 as Vi,q as ne,a1 as wa,j as va}from"../chunks/scheduler.cZO4XJDa.js";import{S as fe,i as ce,a as N,g as ot,t as O,c as ft,b as Q,d as ee,m as te,e as ie,f as ka}from"../chunks/index.DNYDBKQr.js";import{w as or}from"../chunks/index.3RnFC1FZ.js";function Bt(e){return(e==null?void 0:e.length)!==void 0?e:Array.from(e)}function Ke(e,i){const t={},n={},r={$$scope:1};let a=e.length;for(;a--;){const s=e[a],l=i[a];if(l){for(const c in s)c in l||(n[c]=1);for(const c in l)r[c]||(t[c]=l[c],r[c]=1);e[a]=l}else for(const c in s)r[c]=1}for(const s in n)s in t||(t[s]=void 0);return t}function Pt(e){return typeof e=="object"&&e!==null?e:{}}const fr="3.7.7",ya=fr,qe=typeof Buffer=="function",Yi=typeof TextDecoder=="function"?new TextDecoder:void 0,Xi=typeof TextEncoder=="function"?new TextEncoder:void 0,xa="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",it=Array.prototype.slice.call(xa),Tt=(e=>{let i={};return e.forEach((t,n)=>i[t]=n),i})(it),Ea=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,Y=String.fromCharCode.bind(String),ji=typeof Uint8Array.from=="function"?Uint8Array.from.bind(Uint8Array):e=>new Uint8Array(Array.prototype.slice.call(e,0)),cr=e=>e.replace(/=/g,"").replace(/[+\/]/g,i=>i=="+"?"-":"_"),hr=e=>e.replace(/[^A-Za-z0-9\+\/]/g,""),dr=e=>{let i,t,n,r,a="";const s=e.length%3;for(let l=0;l<e.length;){if((t=e.charCodeAt(l++))>255||(n=e.charCodeAt(l++))>255||(r=e.charCodeAt(l++))>255)throw new TypeError("invalid character found");i=t<<16|n<<8|r,a+=it[i>>18&63]+it[i>>12&63]+it[i>>6&63]+it[i&63]}return s?a.slice(0,s-3)+"===".substring(s):a},Si=typeof btoa=="function"?e=>btoa(e):qe?e=>Buffer.from(e,"binary").toString("base64"):dr,ui=qe?e=>Buffer.from(e).toString("base64"):e=>{let t=[];for(let n=0,r=e.length;n<r;n+=4096)t.push(Y.apply(null,e.subarray(n,n+4096)));return Si(t.join(""))},zt=(e,i=!1)=>i?cr(ui(e)):ui(e),Ta=e=>{if(e.length<2){var i=e.charCodeAt(0);return i<128?e:i<2048?Y(192|i>>>6)+Y(128|i&63):Y(224|i>>>12&15)+Y(128|i>>>6&63)+Y(128|i&63)}else{var i=65536+(e.charCodeAt(0)-55296)*1024+(e.charCodeAt(1)-56320);return Y(240|i>>>18&7)+Y(128|i>>>12&63)+Y(128|i>>>6&63)+Y(128|i&63)}},Aa=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,ur=e=>e.replace(Aa,Ta),Gi=qe?e=>Buffer.from(e,"utf8").toString("base64"):Xi?e=>ui(Xi.encode(e)):e=>Si(ur(e)),$e=(e,i=!1)=>i?cr(Gi(e)):Gi(e),Wi=e=>$e(e,!0),Sa=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,Da=e=>{switch(e.length){case 4:var i=(7&e.charCodeAt(0))<<18|(63&e.charCodeAt(1))<<12|(63&e.charCodeAt(2))<<6|63&e.charCodeAt(3),t=i-65536;return Y((t>>>10)+55296)+Y((t&1023)+56320);case 3:return Y((15&e.charCodeAt(0))<<12|(63&e.charCodeAt(1))<<6|63&e.charCodeAt(2));default:return Y((31&e.charCodeAt(0))<<6|63&e.charCodeAt(1))}},_r=e=>e.replace(Sa,Da),mr=e=>{if(e=e.replace(/\s+/g,""),!Ea.test(e))throw new TypeError("malformed base64.");e+="==".slice(2-(e.length&3));let i,t="",n,r;for(let a=0;a<e.length;)i=Tt[e.charAt(a++)]<<18|Tt[e.charAt(a++)]<<12|(n=Tt[e.charAt(a++)])<<6|(r=Tt[e.charAt(a++)]),t+=n===64?Y(i>>16&255):r===64?Y(i>>16&255,i>>8&255):Y(i>>16&255,i>>8&255,i&255);return t},Di=typeof atob=="function"?e=>atob(hr(e)):qe?e=>Buffer.from(e,"base64").toString("binary"):mr,br=qe?e=>ji(Buffer.from(e,"base64")):e=>ji(Di(e).split("").map(i=>i.charCodeAt(0))),pr=e=>br(gr(e)),Ma=qe?e=>Buffer.from(e,"base64").toString("utf8"):Yi?e=>Yi.decode(br(e)):e=>_r(Di(e)),gr=e=>hr(e.replace(/[-_]/g,i=>i=="-"?"+":"/")),_i=e=>Ma(gr(e)),Ia=e=>{if(typeof e!="string")return!1;const i=e.replace(/\s+/g,"").replace(/={0,2}$/,"");return!/[^\s0-9a-zA-Z\+/]/.test(i)||!/[^\s0-9a-zA-Z\-_]/.test(i)},wr=e=>({value:e,enumerable:!1,writable:!0,configurable:!0}),vr=function(){const e=(i,t)=>Object.defineProperty(String.prototype,i,wr(t));e("fromBase64",function(){return _i(this)}),e("toBase64",function(i){return $e(this,i)}),e("toBase64URI",function(){return $e(this,!0)}),e("toBase64URL",function(){return $e(this,!0)}),e("toUint8Array",function(){return pr(this)})},kr=function(){const e=(i,t)=>Object.defineProperty(Uint8Array.prototype,i,wr(t));e("toBase64",function(i){return zt(this,i)}),e("toBase64URI",function(){return zt(this,!0)}),e("toBase64URL",function(){return zt(this,!0)})},Ca=()=>{vr(),kr()},Ki={version:fr,VERSION:ya,atob:Di,atobPolyfill:mr,btoa:Si,btoaPolyfill:dr,fromBase64:_i,toBase64:$e,encode:$e,encodeURI:Wi,encodeURL:Wi,utob:ur,btou:_r,decode:_i,isValid:Ia,fromUint8Array:zt,toUint8Array:pr,extendString:vr,extendUint8Array:kr,extendBuiltins:Ca};class qi{constructor(i){_(this,"buffer");_(this,"bytePointer",0);_(this,"bitPointer",0);this.buffer=typeof i=="number"?new ArrayBuffer(i):"buffer"in i?i.buffer:i}get view(){return new DataView(this.buffer)}skipBits(i){this.bitPointer+=i,this.bytePointer+=Math.floor(this.bitPointer/8),this.bitPointer%=8}final(){return this.buffer.slice(0,this.bitPointer==0?this.bytePointer:this.bytePointer+1)}readBit(){const t=(this.view.getUint8(this.bytePointer)>>this.bitPointer&1)!=0;return this.skipBits(1),t}readBits(i){let t=0;for(let n=0;n<i;n++)t|=(this.readBit()?1:0)<<n;return t}writeBit(i){let t=this.view.getUint8(this.bytePointer);i?t|=1<<this.bitPointer:t&=1<<this.bitPointer^255,this.view.setUint8(this.bytePointer,t),this.skipBits(1)}writeBits(i,t){for(let n=0;n<i;n++)this.writeBit((t&1)!=0),t>>=1}}function Ji(e){let i=0;for(;e;)e&=e-1,i++;return i}const C=64;function Mi(e,i){return()=>{e|=0,e=e+2654435769|0;let t=e^e>>>16;t=Math.imul(t,569420461),t=t^t>>>15,t=Math.imul(t,1935289751);const n=(t=t^t>>>15)>>>0;return i?n/4294967296:n}}function we(e,i,t,n){return e^=e<<13|e>>>17,e=e*2158630691+3333583613&4294967295,e^=i,e^=e<<13|e>>>17,e=e*2158630691+3333583613&4294967295,e^=t,e^=e<<13|e>>>17,e=e*2158630691+3333583613&4294967295,e^=n,e^=e<<16|e>>>15,e=e*2158630691+3333583613&4294967295,(e>>>0)/4294967295}function za(e,i){i*=e.reduce((t,n)=>t+n,0);for(let t=0;t<e.length;t++)if(i-=e[t],i<=0)return t;throw new Error("Invalid weights")}function Ra(e,i,t,n){let r=1/0,a=-1;for(let s=Math.floor(i)-1;s<Math.ceil(i)+1;s++)for(let l=Math.floor(t)-1;l<Math.ceil(t)+1;l++){const c=s+we(e,s,l,0)-.5,o=l+we(e,s,l,1)-.5,f=(c-i)**2+(o-t)**2;f<r&&(r=f,a=za(n,we(e,s,l,2)))}if(a==-1)throw new Error("Voronoi noise error.");return a}function Qi(e,i,t){function n(h,m,p){return(m-h)*((p*(p*6-15)+10)*p*p*p)+h}const r=(h,m)=>{const p=we(e,h,m,0);return{x:Math.cos(p),y:Math.sin(p)}},a=(h,m,p,g)=>{const b=r(h,m),v=p-h,E=g-m;return v*b.x+E*b.y},s=Math.floor(i),l=s+1,c=Math.floor(t),o=c+1,f=i-s,u=t-c;return n(n(a(s,c,i,t),a(l,c,i,t),f),n(a(s,o,i,t),a(l,o,i,t),f),u)}class yr{constructor(i,t,n){_(this,"world");_(this,"x");_(this,"y");_(this,"minesNearbyCache",null);this.world=i,this.x=t,this.y=n}minesNearby(i=!1){if(this.minesNearbyCache!==null&&i)return this.minesNearbyCache;this.minesNearbyCache=0;for(const t of this.searchPattern)this.minesNearbyCache+=this.world.getTile(this.x+t.x,this.y+t.y).numMines();return this.minesNearbyCache}flagsNearby(){let i=0;for(const t of this.searchPattern)i+=this.world.getTile(this.x+t.x,this.y+t.y).numFlags();return i}isDeathTile(){const i=this.world.getGeneratedChunk(Math.floor(this.x/C),Math.floor(this.y/C)),t=this.x-i.chunkX*C,n=this.y-i.chunkY*C;return i.deaths.some(r=>r.x==t&&r.y==n)}static load(i,t,n,r){throw new Error("Tile.load needs to be implemented on derived class.")}}class xr extends yr{constructor(t,n,r,a){super(t,n,r);_(this,"_numMines");_(this,"_numFlags",0);_(this,"isRevealed",!1);_(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this._numMines=a}numMines(){return this._numMines}numFlags(){return this._numFlags}flag(){this.isRevealed||(this._numFlags++,this._numFlags%=this.numMaxMines+1)}reveal(){return this.isRevealed||this._numFlags>0?!1:(this._numMines==0?this.isRevealed=!0:this._numFlags=this._numMines,!0)}save(t){t.writeBit(this.isRevealed),this.isRevealed||t.writeBits(Ji(this.numMaxMines),this._numFlags)}static loadInternal(t,n){return t.isRevealed=n.readBit(),t.isRevealed||(t._numFlags=n.readBits(Ji(t.numMaxMines))),t}static load(t,n,r,a){throw new Error("MultiMineTile.load needs to be implemented on derived class.")}}class Ii extends xr{constructor(t,n,r){const a=we(t.tileSeed,n,r,0)>.8?Math.floor(we(t.tileSeed,n,r,1)*4)+1:0;super(t,n,r,a);_(this,"type","blueberry");_(this,"numMaxMines",3)}static load(t,n,r,a){return this.loadInternal(new Ii(t,n,r),a)}}var Rt=(e=>(e[e.Covered=0]="Covered",e[e.Flagged=1]="Flagged",e[e.Revealed=2]="Revealed",e))(Rt||{});class Ht extends yr{constructor(t,n,r,a){super(t,n,r);_(this,"isMine");_(this,"state",0);_(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this.isMine=a}numMines(){return this.isMine?1:0}numFlags(){return this.state==1?1:0}flag(){this.state!=2&&(this.state==0?this.state=1:this.state=0)}reveal(){return this.state!=0?!1:(this.isMine?this.state=1:this.state=2,!0)}save(t){this.isMine?t.writeBit(this.state==1):t.writeBits(2,this.state)}static loadInternal(t,n){return t.isMine?t.state=n.readBit()?1:0:t.state=n.readBits(2),t}static load(t,n,r,a){throw new Error("SingleMineTile.load needs to be implemented on derived class.")}}class Ci extends Ht{constructor(t,n,r){const a=we(t.tileSeed,n,r,0)>.625;super(t,n,r,a);_(this,"type","chocolate")}static load(t,n,r,a){return this.loadInternal(new Ci(t,n,r),a)}}function Er(e,i,t,n){const r=Math.floor(t/i),a=Math.floor(n/i),s=(r+a%2)%2==0,l=Math.abs(t%i)+Math.abs(n%i)*i,c=Math.floor(we(e.tileSeed,r,a,0)*i**2),o=s?l!=c:l==c;return{isDark:s,isMine:o}}class zi extends Ht{constructor(t,n,r){const{isDark:a,isMine:s}=Er(t,2,n,r);super(t,n,r,s);_(this,"type","waffle");_(this,"isDark");this.isDark=a}static load(t,n,r,a){return this.loadInternal(new zi(t,n,r),a)}}class Ri extends Ht{constructor(t,n,r){const{isDark:a,isMine:s}=Er(t,3,n,r);super(t,n,r,s);_(this,"type","stroopwafel");_(this,"isDark");this.isDark=a}static load(t,n,r,a){return this.loadInternal(new Ri(t,n,r),a)}}class Li extends Ht{constructor(t,n,r){const a=we(t.tileSeed,n,r,0)>.85;super(t,n,r,a);_(this,"type","vanilla")}static load(t,n,r,a){return this.loadInternal(new Li(t,n,r),a)}}const La={type:"collection",weight:1,scale:24,smoothness:.8,biomes:[{type:"collection",weight:5,scale:24,smoothness:.8,biomes:[{type:"biome",weight:3,tile:Li},{type:"biome",weight:1,tile:Ci}]},{type:"collection",weight:2,scale:64,smoothness:0,biomes:[{type:"biome",weight:1,tile:zi},{type:"biome",weight:2,tile:Ri}]},{type:"biome",weight:1,tile:Ii}]};function Na(e,i,t,n,r){const a=Mi(e,!1),s=Qi(a(),i,t)*n,l=Qi(a(),i,t)*n;return Ra(a(),i+s,t+l,r)}function Tr(e,i,t){const n=Mi(e.biomeSeed,!1);let r=La;for(;r.type=="collection";){const a=Na(n(),i/r.scale,t/r.scale,r.smoothness,r.biomes.map(s=>s.weight));r=r.biomes[a]}return r.tile}function Ar(e,i,t){const n=Tr(e,i,t);return new n(e,i,t)}/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */const Za=4,en=0,tn=1,Ba=2;function Je(e){let i=e.length;for(;--i>=0;)e[i]=0}const Ua=0,Sr=1,Fa=2,Oa=3,$a=258,Ni=29,wt=256,ct=wt+1+Ni,Pe=30,Zi=19,Dr=2*ct+1,Me=15,qt=16,Pa=7,Bi=256,Mr=16,Ir=17,Cr=18,mi=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),Lt=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),Ha=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),zr=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),Va=512,pe=new Array((ct+2)*2);Je(pe);const at=new Array(Pe*2);Je(at);const ht=new Array(Va);Je(ht);const dt=new Array($a-Oa+1);Je(dt);const Ui=new Array(Ni);Je(Ui);const Ut=new Array(Pe);Je(Ut);function Jt(e,i,t,n,r){this.static_tree=e,this.extra_bits=i,this.extra_base=t,this.elems=n,this.max_length=r,this.has_stree=e&&e.length}let Rr,Lr,Nr;function Qt(e,i){this.dyn_tree=e,this.max_code=0,this.stat_desc=i}const Zr=e=>e<256?ht[e]:ht[256+(e>>>7)],ut=(e,i)=>{e.pending_buf[e.pending++]=i&255,e.pending_buf[e.pending++]=i>>>8&255},W=(e,i,t)=>{e.bi_valid>qt-t?(e.bi_buf|=i<<e.bi_valid&65535,ut(e,e.bi_buf),e.bi_buf=i>>qt-e.bi_valid,e.bi_valid+=t-qt):(e.bi_buf|=i<<e.bi_valid&65535,e.bi_valid+=t)},de=(e,i,t)=>{W(e,t[i*2],t[i*2+1])},Br=(e,i)=>{let t=0;do t|=e&1,e>>>=1,t<<=1;while(--i>0);return t>>>1},Ya=e=>{e.bi_valid===16?(ut(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=e.bi_buf&255,e.bi_buf>>=8,e.bi_valid-=8)},Xa=(e,i)=>{const t=i.dyn_tree,n=i.max_code,r=i.stat_desc.static_tree,a=i.stat_desc.has_stree,s=i.stat_desc.extra_bits,l=i.stat_desc.extra_base,c=i.stat_desc.max_length;let o,f,u,d,h,m,p=0;for(d=0;d<=Me;d++)e.bl_count[d]=0;for(t[e.heap[e.heap_max]*2+1]=0,o=e.heap_max+1;o<Dr;o++)f=e.heap[o],d=t[t[f*2+1]*2+1]+1,d>c&&(d=c,p++),t[f*2+1]=d,!(f>n)&&(e.bl_count[d]++,h=0,f>=l&&(h=s[f-l]),m=t[f*2],e.opt_len+=m*(d+h),a&&(e.static_len+=m*(r[f*2+1]+h)));if(p!==0){do{for(d=c-1;e.bl_count[d]===0;)d--;e.bl_count[d]--,e.bl_count[d+1]+=2,e.bl_count[c]--,p-=2}while(p>0);for(d=c;d!==0;d--)for(f=e.bl_count[d];f!==0;)u=e.heap[--o],!(u>n)&&(t[u*2+1]!==d&&(e.opt_len+=(d-t[u*2+1])*t[u*2],t[u*2+1]=d),f--)}},Ur=(e,i,t)=>{const n=new Array(Me+1);let r=0,a,s;for(a=1;a<=Me;a++)r=r+t[a-1]<<1,n[a]=r;for(s=0;s<=i;s++){let l=e[s*2+1];l!==0&&(e[s*2]=Br(n[l]++,l))}},ja=()=>{let e,i,t,n,r;const a=new Array(Me+1);for(t=0,n=0;n<Ni-1;n++)for(Ui[n]=t,e=0;e<1<<mi[n];e++)dt[t++]=n;for(dt[t-1]=n,r=0,n=0;n<16;n++)for(Ut[n]=r,e=0;e<1<<Lt[n];e++)ht[r++]=n;for(r>>=7;n<Pe;n++)for(Ut[n]=r<<7,e=0;e<1<<Lt[n]-7;e++)ht[256+r++]=n;for(i=0;i<=Me;i++)a[i]=0;for(e=0;e<=143;)pe[e*2+1]=8,e++,a[8]++;for(;e<=255;)pe[e*2+1]=9,e++,a[9]++;for(;e<=279;)pe[e*2+1]=7,e++,a[7]++;for(;e<=287;)pe[e*2+1]=8,e++,a[8]++;for(Ur(pe,ct+1,a),e=0;e<Pe;e++)at[e*2+1]=5,at[e*2]=Br(e,5);Rr=new Jt(pe,mi,wt+1,ct,Me),Lr=new Jt(at,Lt,0,Pe,Me),Nr=new Jt(new Array(0),Ha,0,Zi,Pa)},Fr=e=>{let i;for(i=0;i<ct;i++)e.dyn_ltree[i*2]=0;for(i=0;i<Pe;i++)e.dyn_dtree[i*2]=0;for(i=0;i<Zi;i++)e.bl_tree[i*2]=0;e.dyn_ltree[Bi*2]=1,e.opt_len=e.static_len=0,e.sym_next=e.matches=0},Or=e=>{e.bi_valid>8?ut(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0},nn=(e,i,t,n)=>{const r=i*2,a=t*2;return e[r]<e[a]||e[r]===e[a]&&n[i]<=n[t]},ei=(e,i,t)=>{const n=e.heap[t];let r=t<<1;for(;r<=e.heap_len&&(r<e.heap_len&&nn(i,e.heap[r+1],e.heap[r],e.depth)&&r++,!nn(i,n,e.heap[r],e.depth));)e.heap[t]=e.heap[r],t=r,r<<=1;e.heap[t]=n},rn=(e,i,t)=>{let n,r,a=0,s,l;if(e.sym_next!==0)do n=e.pending_buf[e.sym_buf+a++]&255,n+=(e.pending_buf[e.sym_buf+a++]&255)<<8,r=e.pending_buf[e.sym_buf+a++],n===0?de(e,r,i):(s=dt[r],de(e,s+wt+1,i),l=mi[s],l!==0&&(r-=Ui[s],W(e,r,l)),n--,s=Zr(n),de(e,s,t),l=Lt[s],l!==0&&(n-=Ut[s],W(e,n,l)));while(a<e.sym_next);de(e,Bi,i)},bi=(e,i)=>{const t=i.dyn_tree,n=i.stat_desc.static_tree,r=i.stat_desc.has_stree,a=i.stat_desc.elems;let s,l,c=-1,o;for(e.heap_len=0,e.heap_max=Dr,s=0;s<a;s++)t[s*2]!==0?(e.heap[++e.heap_len]=c=s,e.depth[s]=0):t[s*2+1]=0;for(;e.heap_len<2;)o=e.heap[++e.heap_len]=c<2?++c:0,t[o*2]=1,e.depth[o]=0,e.opt_len--,r&&(e.static_len-=n[o*2+1]);for(i.max_code=c,s=e.heap_len>>1;s>=1;s--)ei(e,t,s);o=a;do s=e.heap[1],e.heap[1]=e.heap[e.heap_len--],ei(e,t,1),l=e.heap[1],e.heap[--e.heap_max]=s,e.heap[--e.heap_max]=l,t[o*2]=t[s*2]+t[l*2],e.depth[o]=(e.depth[s]>=e.depth[l]?e.depth[s]:e.depth[l])+1,t[s*2+1]=t[l*2+1]=o,e.heap[1]=o++,ei(e,t,1);while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],Xa(e,i),Ur(t,c,e.bl_count)},an=(e,i,t)=>{let n,r=-1,a,s=i[0*2+1],l=0,c=7,o=4;for(s===0&&(c=138,o=3),i[(t+1)*2+1]=65535,n=0;n<=t;n++)a=s,s=i[(n+1)*2+1],!(++l<c&&a===s)&&(l<o?e.bl_tree[a*2]+=l:a!==0?(a!==r&&e.bl_tree[a*2]++,e.bl_tree[Mr*2]++):l<=10?e.bl_tree[Ir*2]++:e.bl_tree[Cr*2]++,l=0,r=a,s===0?(c=138,o=3):a===s?(c=6,o=3):(c=7,o=4))},sn=(e,i,t)=>{let n,r=-1,a,s=i[0*2+1],l=0,c=7,o=4;for(s===0&&(c=138,o=3),n=0;n<=t;n++)if(a=s,s=i[(n+1)*2+1],!(++l<c&&a===s)){if(l<o)do de(e,a,e.bl_tree);while(--l!==0);else a!==0?(a!==r&&(de(e,a,e.bl_tree),l--),de(e,Mr,e.bl_tree),W(e,l-3,2)):l<=10?(de(e,Ir,e.bl_tree),W(e,l-3,3)):(de(e,Cr,e.bl_tree),W(e,l-11,7));l=0,r=a,s===0?(c=138,o=3):a===s?(c=6,o=3):(c=7,o=4)}},Ga=e=>{let i;for(an(e,e.dyn_ltree,e.l_desc.max_code),an(e,e.dyn_dtree,e.d_desc.max_code),bi(e,e.bl_desc),i=Zi-1;i>=3&&e.bl_tree[zr[i]*2+1]===0;i--);return e.opt_len+=3*(i+1)+5+5+4,i},Wa=(e,i,t,n)=>{let r;for(W(e,i-257,5),W(e,t-1,5),W(e,n-4,4),r=0;r<n;r++)W(e,e.bl_tree[zr[r]*2+1],3);sn(e,e.dyn_ltree,i-1),sn(e,e.dyn_dtree,t-1)},Ka=e=>{let i=4093624447,t;for(t=0;t<=31;t++,i>>>=1)if(i&1&&e.dyn_ltree[t*2]!==0)return en;if(e.dyn_ltree[9*2]!==0||e.dyn_ltree[10*2]!==0||e.dyn_ltree[13*2]!==0)return tn;for(t=32;t<wt;t++)if(e.dyn_ltree[t*2]!==0)return tn;return en};let ln=!1;const qa=e=>{ln||(ja(),ln=!0),e.l_desc=new Qt(e.dyn_ltree,Rr),e.d_desc=new Qt(e.dyn_dtree,Lr),e.bl_desc=new Qt(e.bl_tree,Nr),e.bi_buf=0,e.bi_valid=0,Fr(e)},$r=(e,i,t,n)=>{W(e,(Ua<<1)+(n?1:0),3),Or(e),ut(e,t),ut(e,~t),t&&e.pending_buf.set(e.window.subarray(i,i+t),e.pending),e.pending+=t},Ja=e=>{W(e,Sr<<1,3),de(e,Bi,pe),Ya(e)},Qa=(e,i,t,n)=>{let r,a,s=0;e.level>0?(e.strm.data_type===Ba&&(e.strm.data_type=Ka(e)),bi(e,e.l_desc),bi(e,e.d_desc),s=Ga(e),r=e.opt_len+3+7>>>3,a=e.static_len+3+7>>>3,a<=r&&(r=a)):r=a=t+5,t+4<=r&&i!==-1?$r(e,i,t,n):e.strategy===Za||a===r?(W(e,(Sr<<1)+(n?1:0),3),rn(e,pe,at)):(W(e,(Fa<<1)+(n?1:0),3),Wa(e,e.l_desc.max_code+1,e.d_desc.max_code+1,s+1),rn(e,e.dyn_ltree,e.dyn_dtree)),Fr(e),n&&Or(e)},es=(e,i,t)=>(e.pending_buf[e.sym_buf+e.sym_next++]=i,e.pending_buf[e.sym_buf+e.sym_next++]=i>>8,e.pending_buf[e.sym_buf+e.sym_next++]=t,i===0?e.dyn_ltree[t*2]++:(e.matches++,i--,e.dyn_ltree[(dt[t]+wt+1)*2]++,e.dyn_dtree[Zr(i)*2]++),e.sym_next===e.sym_end);var ts=qa,is=$r,ns=Qa,rs=es,as=Ja,ss={_tr_init:ts,_tr_stored_block:is,_tr_flush_block:ns,_tr_tally:rs,_tr_align:as};const ls=(e,i,t,n)=>{let r=e&65535|0,a=e>>>16&65535|0,s=0;for(;t!==0;){s=t>2e3?2e3:t,t-=s;do r=r+i[n++]|0,a=a+r|0;while(--s);r%=65521,a%=65521}return r|a<<16|0};var _t=ls;const os=()=>{let e,i=[];for(var t=0;t<256;t++){e=t;for(var n=0;n<8;n++)e=e&1?3988292384^e>>>1:e>>>1;i[t]=e}return i},fs=new Uint32Array(os()),cs=(e,i,t,n)=>{const r=fs,a=n+t;e^=-1;for(let s=n;s<a;s++)e=e>>>8^r[(e^i[s])&255];return e^-1};var H=cs,Re={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},Be={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:hs,_tr_stored_block:pi,_tr_flush_block:ds,_tr_tally:Ee,_tr_align:us}=ss,{Z_NO_FLUSH:Te,Z_PARTIAL_FLUSH:_s,Z_FULL_FLUSH:ms,Z_FINISH:re,Z_BLOCK:on,Z_OK:V,Z_STREAM_END:fn,Z_STREAM_ERROR:ue,Z_DATA_ERROR:bs,Z_BUF_ERROR:ti,Z_DEFAULT_COMPRESSION:ps,Z_FILTERED:gs,Z_HUFFMAN_ONLY:At,Z_RLE:ws,Z_FIXED:vs,Z_DEFAULT_STRATEGY:ks,Z_UNKNOWN:ys,Z_DEFLATED:Vt}=Be,xs=9,Es=15,Ts=8,As=29,Ss=256,gi=Ss+1+As,Ds=30,Ms=19,Is=2*gi+1,Cs=15,z=3,xe=258,_e=xe+z+1,zs=32,He=42,Fi=57,wi=69,vi=73,ki=91,yi=103,Ie=113,nt=666,G=1,Qe=2,Le=3,et=4,Rs=3,Ce=(e,i)=>(e.msg=Re[i],i),cn=e=>e*2-(e>4?9:0),ye=e=>{let i=e.length;for(;--i>=0;)e[i]=0},Ls=e=>{let i,t,n,r=e.w_size;i=e.hash_size,n=i;do t=e.head[--n],e.head[n]=t>=r?t-r:0;while(--i);i=r,n=i;do t=e.prev[--n],e.prev[n]=t>=r?t-r:0;while(--i)};let Ns=(e,i,t)=>(i<<e.hash_shift^t)&e.hash_mask,Ae=Ns;const K=e=>{const i=e.state;let t=i.pending;t>e.avail_out&&(t=e.avail_out),t!==0&&(e.output.set(i.pending_buf.subarray(i.pending_out,i.pending_out+t),e.next_out),e.next_out+=t,i.pending_out+=t,e.total_out+=t,e.avail_out-=t,i.pending-=t,i.pending===0&&(i.pending_out=0))},J=(e,i)=>{ds(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,i),e.block_start=e.strstart,K(e.strm)},B=(e,i)=>{e.pending_buf[e.pending++]=i},tt=(e,i)=>{e.pending_buf[e.pending++]=i>>>8&255,e.pending_buf[e.pending++]=i&255},xi=(e,i,t,n)=>{let r=e.avail_in;return r>n&&(r=n),r===0?0:(e.avail_in-=r,i.set(e.input.subarray(e.next_in,e.next_in+r),t),e.state.wrap===1?e.adler=_t(e.adler,i,r,t):e.state.wrap===2&&(e.adler=H(e.adler,i,r,t)),e.next_in+=r,e.total_in+=r,r)},Pr=(e,i)=>{let t=e.max_chain_length,n=e.strstart,r,a,s=e.prev_length,l=e.nice_match;const c=e.strstart>e.w_size-_e?e.strstart-(e.w_size-_e):0,o=e.window,f=e.w_mask,u=e.prev,d=e.strstart+xe;let h=o[n+s-1],m=o[n+s];e.prev_length>=e.good_match&&(t>>=2),l>e.lookahead&&(l=e.lookahead);do if(r=i,!(o[r+s]!==m||o[r+s-1]!==h||o[r]!==o[n]||o[++r]!==o[n+1])){n+=2,r++;do;while(o[++n]===o[++r]&&o[++n]===o[++r]&&o[++n]===o[++r]&&o[++n]===o[++r]&&o[++n]===o[++r]&&o[++n]===o[++r]&&o[++n]===o[++r]&&o[++n]===o[++r]&&n<d);if(a=xe-(d-n),n=d-xe,a>s){if(e.match_start=i,s=a,a>=l)break;h=o[n+s-1],m=o[n+s]}}while((i=u[i&f])>c&&--t!==0);return s<=e.lookahead?s:e.lookahead},Ve=e=>{const i=e.w_size;let t,n,r;do{if(n=e.window_size-e.lookahead-e.strstart,e.strstart>=i+(i-_e)&&(e.window.set(e.window.subarray(i,i+i-n),0),e.match_start-=i,e.strstart-=i,e.block_start-=i,e.insert>e.strstart&&(e.insert=e.strstart),Ls(e),n+=i),e.strm.avail_in===0)break;if(t=xi(e.strm,e.window,e.strstart+e.lookahead,n),e.lookahead+=t,e.lookahead+e.insert>=z)for(r=e.strstart-e.insert,e.ins_h=e.window[r],e.ins_h=Ae(e,e.ins_h,e.window[r+1]);e.insert&&(e.ins_h=Ae(e,e.ins_h,e.window[r+z-1]),e.prev[r&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=r,r++,e.insert--,!(e.lookahead+e.insert<z)););}while(e.lookahead<_e&&e.strm.avail_in!==0)},Hr=(e,i)=>{let t=e.pending_buf_size-5>e.w_size?e.w_size:e.pending_buf_size-5,n,r,a,s=0,l=e.strm.avail_in;do{if(n=65535,a=e.bi_valid+42>>3,e.strm.avail_out<a||(a=e.strm.avail_out-a,r=e.strstart-e.block_start,n>r+e.strm.avail_in&&(n=r+e.strm.avail_in),n>a&&(n=a),n<t&&(n===0&&i!==re||i===Te||n!==r+e.strm.avail_in)))break;s=i===re&&n===r+e.strm.avail_in?1:0,pi(e,0,0,s),e.pending_buf[e.pending-4]=n,e.pending_buf[e.pending-3]=n>>8,e.pending_buf[e.pending-2]=~n,e.pending_buf[e.pending-1]=~n>>8,K(e.strm),r&&(r>n&&(r=n),e.strm.output.set(e.window.subarray(e.block_start,e.block_start+r),e.strm.next_out),e.strm.next_out+=r,e.strm.avail_out-=r,e.strm.total_out+=r,e.block_start+=r,n-=r),n&&(xi(e.strm,e.strm.output,e.strm.next_out,n),e.strm.next_out+=n,e.strm.avail_out-=n,e.strm.total_out+=n)}while(s===0);return l-=e.strm.avail_in,l&&(l>=e.w_size?(e.matches=2,e.window.set(e.strm.input.subarray(e.strm.next_in-e.w_size,e.strm.next_in),0),e.strstart=e.w_size,e.insert=e.strstart):(e.window_size-e.strstart<=l&&(e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,e.insert>e.strstart&&(e.insert=e.strstart)),e.window.set(e.strm.input.subarray(e.strm.next_in-l,e.strm.next_in),e.strstart),e.strstart+=l,e.insert+=l>e.w_size-e.insert?e.w_size-e.insert:l),e.block_start=e.strstart),e.high_water<e.strstart&&(e.high_water=e.strstart),s?et:i!==Te&&i!==re&&e.strm.avail_in===0&&e.strstart===e.block_start?Qe:(a=e.window_size-e.strstart,e.strm.avail_in>a&&e.block_start>=e.w_size&&(e.block_start-=e.w_size,e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,a+=e.w_size,e.insert>e.strstart&&(e.insert=e.strstart)),a>e.strm.avail_in&&(a=e.strm.avail_in),a&&(xi(e.strm,e.window,e.strstart,a),e.strstart+=a,e.insert+=a>e.w_size-e.insert?e.w_size-e.insert:a),e.high_water<e.strstart&&(e.high_water=e.strstart),a=e.bi_valid+42>>3,a=e.pending_buf_size-a>65535?65535:e.pending_buf_size-a,t=a>e.w_size?e.w_size:a,r=e.strstart-e.block_start,(r>=t||(r||i===re)&&i!==Te&&e.strm.avail_in===0&&r<=a)&&(n=r>a?a:r,s=i===re&&e.strm.avail_in===0&&n===r?1:0,pi(e,e.block_start,n,s),e.block_start+=n,K(e.strm)),s?Le:G)},ii=(e,i)=>{let t,n;for(;;){if(e.lookahead<_e){if(Ve(e),e.lookahead<_e&&i===Te)return G;if(e.lookahead===0)break}if(t=0,e.lookahead>=z&&(e.ins_h=Ae(e,e.ins_h,e.window[e.strstart+z-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),t!==0&&e.strstart-t<=e.w_size-_e&&(e.match_length=Pr(e,t)),e.match_length>=z)if(n=Ee(e,e.strstart-e.match_start,e.match_length-z),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=z){e.match_length--;do e.strstart++,e.ins_h=Ae(e,e.ins_h,e.window[e.strstart+z-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart;while(--e.match_length!==0);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=Ae(e,e.ins_h,e.window[e.strstart+1]);else n=Ee(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(J(e,!1),e.strm.avail_out===0))return G}return e.insert=e.strstart<z-1?e.strstart:z-1,i===re?(J(e,!0),e.strm.avail_out===0?Le:et):e.sym_next&&(J(e,!1),e.strm.avail_out===0)?G:Qe},Fe=(e,i)=>{let t,n,r;for(;;){if(e.lookahead<_e){if(Ve(e),e.lookahead<_e&&i===Te)return G;if(e.lookahead===0)break}if(t=0,e.lookahead>=z&&(e.ins_h=Ae(e,e.ins_h,e.window[e.strstart+z-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=z-1,t!==0&&e.prev_length<e.max_lazy_match&&e.strstart-t<=e.w_size-_e&&(e.match_length=Pr(e,t),e.match_length<=5&&(e.strategy===gs||e.match_length===z&&e.strstart-e.match_start>4096)&&(e.match_length=z-1)),e.prev_length>=z&&e.match_length<=e.prev_length){r=e.strstart+e.lookahead-z,n=Ee(e,e.strstart-1-e.prev_match,e.prev_length-z),e.lookahead-=e.prev_length-1,e.prev_length-=2;do++e.strstart<=r&&(e.ins_h=Ae(e,e.ins_h,e.window[e.strstart+z-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart);while(--e.prev_length!==0);if(e.match_available=0,e.match_length=z-1,e.strstart++,n&&(J(e,!1),e.strm.avail_out===0))return G}else if(e.match_available){if(n=Ee(e,0,e.window[e.strstart-1]),n&&J(e,!1),e.strstart++,e.lookahead--,e.strm.avail_out===0)return G}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=Ee(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<z-1?e.strstart:z-1,i===re?(J(e,!0),e.strm.avail_out===0?Le:et):e.sym_next&&(J(e,!1),e.strm.avail_out===0)?G:Qe},Zs=(e,i)=>{let t,n,r,a;const s=e.window;for(;;){if(e.lookahead<=xe){if(Ve(e),e.lookahead<=xe&&i===Te)return G;if(e.lookahead===0)break}if(e.match_length=0,e.lookahead>=z&&e.strstart>0&&(r=e.strstart-1,n=s[r],n===s[++r]&&n===s[++r]&&n===s[++r])){a=e.strstart+xe;do;while(n===s[++r]&&n===s[++r]&&n===s[++r]&&n===s[++r]&&n===s[++r]&&n===s[++r]&&n===s[++r]&&n===s[++r]&&r<a);e.match_length=xe-(a-r),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=z?(t=Ee(e,1,e.match_length-z),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(t=Ee(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),t&&(J(e,!1),e.strm.avail_out===0))return G}return e.insert=0,i===re?(J(e,!0),e.strm.avail_out===0?Le:et):e.sym_next&&(J(e,!1),e.strm.avail_out===0)?G:Qe},Bs=(e,i)=>{let t;for(;;){if(e.lookahead===0&&(Ve(e),e.lookahead===0)){if(i===Te)return G;break}if(e.match_length=0,t=Ee(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,t&&(J(e,!1),e.strm.avail_out===0))return G}return e.insert=0,i===re?(J(e,!0),e.strm.avail_out===0?Le:et):e.sym_next&&(J(e,!1),e.strm.avail_out===0)?G:Qe};function he(e,i,t,n,r){this.good_length=e,this.max_lazy=i,this.nice_length=t,this.max_chain=n,this.func=r}const rt=[new he(0,0,0,0,Hr),new he(4,4,8,4,ii),new he(4,5,16,8,ii),new he(4,6,32,32,ii),new he(4,4,16,16,Fe),new he(8,16,32,32,Fe),new he(8,16,128,128,Fe),new he(8,32,128,256,Fe),new he(32,128,258,1024,Fe),new he(32,258,258,4096,Fe)],Us=e=>{e.window_size=2*e.w_size,ye(e.head),e.max_lazy_match=rt[e.level].max_lazy,e.good_match=rt[e.level].good_length,e.nice_match=rt[e.level].nice_length,e.max_chain_length=rt[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=z-1,e.match_available=0,e.ins_h=0};function Fs(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=Vt,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(Is*2),this.dyn_dtree=new Uint16Array((2*Ds+1)*2),this.bl_tree=new Uint16Array((2*Ms+1)*2),ye(this.dyn_ltree),ye(this.dyn_dtree),ye(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(Cs+1),this.heap=new Uint16Array(2*gi+1),ye(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(2*gi+1),ye(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const vt=e=>{if(!e)return 1;const i=e.state;return!i||i.strm!==e||i.status!==He&&i.status!==Fi&&i.status!==wi&&i.status!==vi&&i.status!==ki&&i.status!==yi&&i.status!==Ie&&i.status!==nt?1:0},Vr=e=>{if(vt(e))return Ce(e,ue);e.total_in=e.total_out=0,e.data_type=ys;const i=e.state;return i.pending=0,i.pending_out=0,i.wrap<0&&(i.wrap=-i.wrap),i.status=i.wrap===2?Fi:i.wrap?He:Ie,e.adler=i.wrap===2?0:1,i.last_flush=-2,hs(i),V},Yr=e=>{const i=Vr(e);return i===V&&Us(e.state),i},Os=(e,i)=>vt(e)||e.state.wrap!==2?ue:(e.state.gzhead=i,V),Xr=(e,i,t,n,r,a)=>{if(!e)return ue;let s=1;if(i===ps&&(i=6),n<0?(s=0,n=-n):n>15&&(s=2,n-=16),r<1||r>xs||t!==Vt||n<8||n>15||i<0||i>9||a<0||a>vs||n===8&&s!==1)return Ce(e,ue);n===8&&(n=9);const l=new Fs;return e.state=l,l.strm=e,l.status=He,l.wrap=s,l.gzhead=null,l.w_bits=n,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=r+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+z-1)/z),l.window=new Uint8Array(l.w_size*2),l.head=new Uint16Array(l.hash_size),l.prev=new Uint16Array(l.w_size),l.lit_bufsize=1<<r+6,l.pending_buf_size=l.lit_bufsize*4,l.pending_buf=new Uint8Array(l.pending_buf_size),l.sym_buf=l.lit_bufsize,l.sym_end=(l.lit_bufsize-1)*3,l.level=i,l.strategy=a,l.method=t,Yr(e)},$s=(e,i)=>Xr(e,i,Vt,Es,Ts,ks),Ps=(e,i)=>{if(vt(e)||i>on||i<0)return e?Ce(e,ue):ue;const t=e.state;if(!e.output||e.avail_in!==0&&!e.input||t.status===nt&&i!==re)return Ce(e,e.avail_out===0?ti:ue);const n=t.last_flush;if(t.last_flush=i,t.pending!==0){if(K(e),e.avail_out===0)return t.last_flush=-1,V}else if(e.avail_in===0&&cn(i)<=cn(n)&&i!==re)return Ce(e,ti);if(t.status===nt&&e.avail_in!==0)return Ce(e,ti);if(t.status===He&&t.wrap===0&&(t.status=Ie),t.status===He){let r=Vt+(t.w_bits-8<<4)<<8,a=-1;if(t.strategy>=At||t.level<2?a=0:t.level<6?a=1:t.level===6?a=2:a=3,r|=a<<6,t.strstart!==0&&(r|=zs),r+=31-r%31,tt(t,r),t.strstart!==0&&(tt(t,e.adler>>>16),tt(t,e.adler&65535)),e.adler=1,t.status=Ie,K(e),t.pending!==0)return t.last_flush=-1,V}if(t.status===Fi){if(e.adler=0,B(t,31),B(t,139),B(t,8),t.gzhead)B(t,(t.gzhead.text?1:0)+(t.gzhead.hcrc?2:0)+(t.gzhead.extra?4:0)+(t.gzhead.name?8:0)+(t.gzhead.comment?16:0)),B(t,t.gzhead.time&255),B(t,t.gzhead.time>>8&255),B(t,t.gzhead.time>>16&255),B(t,t.gzhead.time>>24&255),B(t,t.level===9?2:t.strategy>=At||t.level<2?4:0),B(t,t.gzhead.os&255),t.gzhead.extra&&t.gzhead.extra.length&&(B(t,t.gzhead.extra.length&255),B(t,t.gzhead.extra.length>>8&255)),t.gzhead.hcrc&&(e.adler=H(e.adler,t.pending_buf,t.pending,0)),t.gzindex=0,t.status=wi;else if(B(t,0),B(t,0),B(t,0),B(t,0),B(t,0),B(t,t.level===9?2:t.strategy>=At||t.level<2?4:0),B(t,Rs),t.status=Ie,K(e),t.pending!==0)return t.last_flush=-1,V}if(t.status===wi){if(t.gzhead.extra){let r=t.pending,a=(t.gzhead.extra.length&65535)-t.gzindex;for(;t.pending+a>t.pending_buf_size;){let l=t.pending_buf_size-t.pending;if(t.pending_buf.set(t.gzhead.extra.subarray(t.gzindex,t.gzindex+l),t.pending),t.pending=t.pending_buf_size,t.gzhead.hcrc&&t.pending>r&&(e.adler=H(e.adler,t.pending_buf,t.pending-r,r)),t.gzindex+=l,K(e),t.pending!==0)return t.last_flush=-1,V;r=0,a-=l}let s=new Uint8Array(t.gzhead.extra);t.pending_buf.set(s.subarray(t.gzindex,t.gzindex+a),t.pending),t.pending+=a,t.gzhead.hcrc&&t.pending>r&&(e.adler=H(e.adler,t.pending_buf,t.pending-r,r)),t.gzindex=0}t.status=vi}if(t.status===vi){if(t.gzhead.name){let r=t.pending,a;do{if(t.pending===t.pending_buf_size){if(t.gzhead.hcrc&&t.pending>r&&(e.adler=H(e.adler,t.pending_buf,t.pending-r,r)),K(e),t.pending!==0)return t.last_flush=-1,V;r=0}t.gzindex<t.gzhead.name.length?a=t.gzhead.name.charCodeAt(t.gzindex++)&255:a=0,B(t,a)}while(a!==0);t.gzhead.hcrc&&t.pending>r&&(e.adler=H(e.adler,t.pending_buf,t.pending-r,r)),t.gzindex=0}t.status=ki}if(t.status===ki){if(t.gzhead.comment){let r=t.pending,a;do{if(t.pending===t.pending_buf_size){if(t.gzhead.hcrc&&t.pending>r&&(e.adler=H(e.adler,t.pending_buf,t.pending-r,r)),K(e),t.pending!==0)return t.last_flush=-1,V;r=0}t.gzindex<t.gzhead.comment.length?a=t.gzhead.comment.charCodeAt(t.gzindex++)&255:a=0,B(t,a)}while(a!==0);t.gzhead.hcrc&&t.pending>r&&(e.adler=H(e.adler,t.pending_buf,t.pending-r,r))}t.status=yi}if(t.status===yi){if(t.gzhead.hcrc){if(t.pending+2>t.pending_buf_size&&(K(e),t.pending!==0))return t.last_flush=-1,V;B(t,e.adler&255),B(t,e.adler>>8&255),e.adler=0}if(t.status=Ie,K(e),t.pending!==0)return t.last_flush=-1,V}if(e.avail_in!==0||t.lookahead!==0||i!==Te&&t.status!==nt){let r=t.level===0?Hr(t,i):t.strategy===At?Bs(t,i):t.strategy===ws?Zs(t,i):rt[t.level].func(t,i);if((r===Le||r===et)&&(t.status=nt),r===G||r===Le)return e.avail_out===0&&(t.last_flush=-1),V;if(r===Qe&&(i===_s?us(t):i!==on&&(pi(t,0,0,!1),i===ms&&(ye(t.head),t.lookahead===0&&(t.strstart=0,t.block_start=0,t.insert=0))),K(e),e.avail_out===0))return t.last_flush=-1,V}return i!==re?V:t.wrap<=0?fn:(t.wrap===2?(B(t,e.adler&255),B(t,e.adler>>8&255),B(t,e.adler>>16&255),B(t,e.adler>>24&255),B(t,e.total_in&255),B(t,e.total_in>>8&255),B(t,e.total_in>>16&255),B(t,e.total_in>>24&255)):(tt(t,e.adler>>>16),tt(t,e.adler&65535)),K(e),t.wrap>0&&(t.wrap=-t.wrap),t.pending!==0?V:fn)},Hs=e=>{if(vt(e))return ue;const i=e.state.status;return e.state=null,i===Ie?Ce(e,bs):V},Vs=(e,i)=>{let t=i.length;if(vt(e))return ue;const n=e.state,r=n.wrap;if(r===2||r===1&&n.status!==He||n.lookahead)return ue;if(r===1&&(e.adler=_t(e.adler,i,t,0)),n.wrap=0,t>=n.w_size){r===0&&(ye(n.head),n.strstart=0,n.block_start=0,n.insert=0);let c=new Uint8Array(n.w_size);c.set(i.subarray(t-n.w_size,t),0),i=c,t=n.w_size}const a=e.avail_in,s=e.next_in,l=e.input;for(e.avail_in=t,e.next_in=0,e.input=i,Ve(n);n.lookahead>=z;){let c=n.strstart,o=n.lookahead-(z-1);do n.ins_h=Ae(n,n.ins_h,n.window[c+z-1]),n.prev[c&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=c,c++;while(--o);n.strstart=c,n.lookahead=z-1,Ve(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=z-1,n.match_available=0,e.next_in=s,e.input=l,e.avail_in=a,n.wrap=r,V};var Ys=$s,Xs=Xr,js=Yr,Gs=Vr,Ws=Os,Ks=Ps,qs=Hs,Js=Vs,Qs="pako deflate (from Nodeca project)",st={deflateInit:Ys,deflateInit2:Xs,deflateReset:js,deflateResetKeep:Gs,deflateSetHeader:Ws,deflate:Ks,deflateEnd:qs,deflateSetDictionary:Js,deflateInfo:Qs};const el=(e,i)=>Object.prototype.hasOwnProperty.call(e,i);var tl=function(e){const i=Array.prototype.slice.call(arguments,1);for(;i.length;){const t=i.shift();if(t){if(typeof t!="object")throw new TypeError(t+"must be non-object");for(const n in t)el(t,n)&&(e[n]=t[n])}}return e},il=e=>{let i=0;for(let n=0,r=e.length;n<r;n++)i+=e[n].length;const t=new Uint8Array(i);for(let n=0,r=0,a=e.length;n<a;n++){let s=e[n];t.set(s,r),r+=s.length}return t},Yt={assign:tl,flattenChunks:il};let jr=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{jr=!1}const mt=new Uint8Array(256);for(let e=0;e<256;e++)mt[e]=e>=252?6:e>=248?5:e>=240?4:e>=224?3:e>=192?2:1;mt[254]=mt[254]=1;var nl=e=>{if(typeof TextEncoder=="function"&&TextEncoder.prototype.encode)return new TextEncoder().encode(e);let i,t,n,r,a,s=e.length,l=0;for(r=0;r<s;r++)t=e.charCodeAt(r),(t&64512)===55296&&r+1<s&&(n=e.charCodeAt(r+1),(n&64512)===56320&&(t=65536+(t-55296<<10)+(n-56320),r++)),l+=t<128?1:t<2048?2:t<65536?3:4;for(i=new Uint8Array(l),a=0,r=0;a<l;r++)t=e.charCodeAt(r),(t&64512)===55296&&r+1<s&&(n=e.charCodeAt(r+1),(n&64512)===56320&&(t=65536+(t-55296<<10)+(n-56320),r++)),t<128?i[a++]=t:t<2048?(i[a++]=192|t>>>6,i[a++]=128|t&63):t<65536?(i[a++]=224|t>>>12,i[a++]=128|t>>>6&63,i[a++]=128|t&63):(i[a++]=240|t>>>18,i[a++]=128|t>>>12&63,i[a++]=128|t>>>6&63,i[a++]=128|t&63);return i};const rl=(e,i)=>{if(i<65534&&e.subarray&&jr)return String.fromCharCode.apply(null,e.length===i?e:e.subarray(0,i));let t="";for(let n=0;n<i;n++)t+=String.fromCharCode(e[n]);return t};var al=(e,i)=>{const t=i||e.length;if(typeof TextDecoder=="function"&&TextDecoder.prototype.decode)return new TextDecoder().decode(e.subarray(0,i));let n,r;const a=new Array(t*2);for(r=0,n=0;n<t;){let s=e[n++];if(s<128){a[r++]=s;continue}let l=mt[s];if(l>4){a[r++]=65533,n+=l-1;continue}for(s&=l===2?31:l===3?15:7;l>1&&n<t;)s=s<<6|e[n++]&63,l--;if(l>1){a[r++]=65533;continue}s<65536?a[r++]=s:(s-=65536,a[r++]=55296|s>>10&1023,a[r++]=56320|s&1023)}return rl(a,r)},sl=(e,i)=>{i=i||e.length,i>e.length&&(i=e.length);let t=i-1;for(;t>=0&&(e[t]&192)===128;)t--;return t<0||t===0?i:t+mt[e[t]]>i?t:i},bt={string2buf:nl,buf2string:al,utf8border:sl};function ll(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}var Gr=ll;const Wr=Object.prototype.toString,{Z_NO_FLUSH:ol,Z_SYNC_FLUSH:fl,Z_FULL_FLUSH:cl,Z_FINISH:hl,Z_OK:Ft,Z_STREAM_END:dl,Z_DEFAULT_COMPRESSION:ul,Z_DEFAULT_STRATEGY:_l,Z_DEFLATED:ml}=Be;function kt(e){this.options=Yt.assign({level:ul,method:ml,chunkSize:16384,windowBits:15,memLevel:8,strategy:_l},e||{});let i=this.options;i.raw&&i.windowBits>0?i.windowBits=-i.windowBits:i.gzip&&i.windowBits>0&&i.windowBits<16&&(i.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Gr,this.strm.avail_out=0;let t=st.deflateInit2(this.strm,i.level,i.method,i.windowBits,i.memLevel,i.strategy);if(t!==Ft)throw new Error(Re[t]);if(i.header&&st.deflateSetHeader(this.strm,i.header),i.dictionary){let n;if(typeof i.dictionary=="string"?n=bt.string2buf(i.dictionary):Wr.call(i.dictionary)==="[object ArrayBuffer]"?n=new Uint8Array(i.dictionary):n=i.dictionary,t=st.deflateSetDictionary(this.strm,n),t!==Ft)throw new Error(Re[t]);this._dict_set=!0}}kt.prototype.push=function(e,i){const t=this.strm,n=this.options.chunkSize;let r,a;if(this.ended)return!1;for(i===~~i?a=i:a=i===!0?hl:ol,typeof e=="string"?t.input=bt.string2buf(e):Wr.call(e)==="[object ArrayBuffer]"?t.input=new Uint8Array(e):t.input=e,t.next_in=0,t.avail_in=t.input.length;;){if(t.avail_out===0&&(t.output=new Uint8Array(n),t.next_out=0,t.avail_out=n),(a===fl||a===cl)&&t.avail_out<=6){this.onData(t.output.subarray(0,t.next_out)),t.avail_out=0;continue}if(r=st.deflate(t,a),r===dl)return t.next_out>0&&this.onData(t.output.subarray(0,t.next_out)),r=st.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===Ft;if(t.avail_out===0){this.onData(t.output);continue}if(a>0&&t.next_out>0){this.onData(t.output.subarray(0,t.next_out)),t.avail_out=0;continue}if(t.avail_in===0)break}return!0};kt.prototype.onData=function(e){this.chunks.push(e)};kt.prototype.onEnd=function(e){e===Ft&&(this.result=Yt.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};function Oi(e,i){const t=new kt(i);if(t.push(e,!0),t.err)throw t.msg||Re[t.err];return t.result}function bl(e,i){return i=i||{},i.raw=!0,Oi(e,i)}function pl(e,i){return i=i||{},i.gzip=!0,Oi(e,i)}var gl=kt,wl=Oi,vl=bl,kl=pl,yl=Be,xl={Deflate:gl,deflate:wl,deflateRaw:vl,gzip:kl,constants:yl};const St=16209,El=16191;var Tl=function(i,t){let n,r,a,s,l,c,o,f,u,d,h,m,p,g,b,v,E,w,k,S,x,Z,M,A;const D=i.state;n=i.next_in,M=i.input,r=n+(i.avail_in-5),a=i.next_out,A=i.output,s=a-(t-i.avail_out),l=a+(i.avail_out-257),c=D.dmax,o=D.wsize,f=D.whave,u=D.wnext,d=D.window,h=D.hold,m=D.bits,p=D.lencode,g=D.distcode,b=(1<<D.lenbits)-1,v=(1<<D.distbits)-1;e:do{m<15&&(h+=M[n++]<<m,m+=8,h+=M[n++]<<m,m+=8),E=p[h&b];t:for(;;){if(w=E>>>24,h>>>=w,m-=w,w=E>>>16&255,w===0)A[a++]=E&65535;else if(w&16){k=E&65535,w&=15,w&&(m<w&&(h+=M[n++]<<m,m+=8),k+=h&(1<<w)-1,h>>>=w,m-=w),m<15&&(h+=M[n++]<<m,m+=8,h+=M[n++]<<m,m+=8),E=g[h&v];i:for(;;){if(w=E>>>24,h>>>=w,m-=w,w=E>>>16&255,w&16){if(S=E&65535,w&=15,m<w&&(h+=M[n++]<<m,m+=8,m<w&&(h+=M[n++]<<m,m+=8)),S+=h&(1<<w)-1,S>c){i.msg="invalid distance too far back",D.mode=St;break e}if(h>>>=w,m-=w,w=a-s,S>w){if(w=S-w,w>f&&D.sane){i.msg="invalid distance too far back",D.mode=St;break e}if(x=0,Z=d,u===0){if(x+=o-w,w<k){k-=w;do A[a++]=d[x++];while(--w);x=a-S,Z=A}}else if(u<w){if(x+=o+u-w,w-=u,w<k){k-=w;do A[a++]=d[x++];while(--w);if(x=0,u<k){w=u,k-=w;do A[a++]=d[x++];while(--w);x=a-S,Z=A}}}else if(x+=u-w,w<k){k-=w;do A[a++]=d[x++];while(--w);x=a-S,Z=A}for(;k>2;)A[a++]=Z[x++],A[a++]=Z[x++],A[a++]=Z[x++],k-=3;k&&(A[a++]=Z[x++],k>1&&(A[a++]=Z[x++]))}else{x=a-S;do A[a++]=A[x++],A[a++]=A[x++],A[a++]=A[x++],k-=3;while(k>2);k&&(A[a++]=A[x++],k>1&&(A[a++]=A[x++]))}}else if(w&64){i.msg="invalid distance code",D.mode=St;break e}else{E=g[(E&65535)+(h&(1<<w)-1)];continue i}break}}else if(w&64)if(w&32){D.mode=El;break e}else{i.msg="invalid literal/length code",D.mode=St;break e}else{E=p[(E&65535)+(h&(1<<w)-1)];continue t}break}}while(n<r&&a<l);k=m>>3,n-=k,m-=k<<3,h&=(1<<m)-1,i.next_in=n,i.next_out=a,i.avail_in=n<r?5+(r-n):5-(n-r),i.avail_out=a<l?257+(l-a):257-(a-l),D.hold=h,D.bits=m};const Oe=15,hn=852,dn=592,un=0,ni=1,_n=2,Al=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),Sl=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),Dl=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),Ml=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),Il=(e,i,t,n,r,a,s,l)=>{const c=l.bits;let o=0,f=0,u=0,d=0,h=0,m=0,p=0,g=0,b=0,v=0,E,w,k,S,x,Z=null,M;const A=new Uint16Array(Oe+1),D=new Uint16Array(Oe+1);let y=null,j,xt,Et;for(o=0;o<=Oe;o++)A[o]=0;for(f=0;f<n;f++)A[i[t+f]]++;for(h=c,d=Oe;d>=1&&A[d]===0;d--);if(h>d&&(h=d),d===0)return r[a++]=1<<24|64<<16|0,r[a++]=1<<24|64<<16|0,l.bits=1,0;for(u=1;u<d&&A[u]===0;u++);for(h<u&&(h=u),g=1,o=1;o<=Oe;o++)if(g<<=1,g-=A[o],g<0)return-1;if(g>0&&(e===un||d!==1))return-1;for(D[1]=0,o=1;o<Oe;o++)D[o+1]=D[o]+A[o];for(f=0;f<n;f++)i[t+f]!==0&&(s[D[i[t+f]]++]=f);if(e===un?(Z=y=s,M=20):e===ni?(Z=Al,y=Sl,M=257):(Z=Dl,y=Ml,M=0),v=0,f=0,o=u,x=a,m=h,p=0,k=-1,b=1<<h,S=b-1,e===ni&&b>hn||e===_n&&b>dn)return 1;for(;;){j=o-p,s[f]+1<M?(xt=0,Et=s[f]):s[f]>=M?(xt=y[s[f]-M],Et=Z[s[f]-M]):(xt=96,Et=0),E=1<<o-p,w=1<<m,u=w;do w-=E,r[x+(v>>p)+w]=j<<24|xt<<16|Et|0;while(w!==0);for(E=1<<o-1;v&E;)E>>=1;if(E!==0?(v&=E-1,v+=E):v=0,f++,--A[o]===0){if(o===d)break;o=i[t+s[f]]}if(o>h&&(v&S)!==k){for(p===0&&(p=h),x+=u,m=o-p,g=1<<m;m+p<d&&(g-=A[m+p],!(g<=0));)m++,g<<=1;if(b+=1<<m,e===ni&&b>hn||e===_n&&b>dn)return 1;k=v&S,r[k]=h<<24|m<<16|x-a|0}}return v!==0&&(r[x+v]=o-p<<24|64<<16|0),l.bits=h,0};var lt=Il;const Cl=0,Kr=1,qr=2,{Z_FINISH:mn,Z_BLOCK:zl,Z_TREES:Dt,Z_OK:Ne,Z_STREAM_END:Rl,Z_NEED_DICT:Ll,Z_STREAM_ERROR:le,Z_DATA_ERROR:Jr,Z_MEM_ERROR:Qr,Z_BUF_ERROR:Nl,Z_DEFLATED:bn}=Be,Xt=16180,pn=16181,gn=16182,wn=16183,vn=16184,kn=16185,yn=16186,xn=16187,En=16188,Tn=16189,Ot=16190,be=16191,ri=16192,An=16193,ai=16194,Sn=16195,Dn=16196,Mn=16197,In=16198,Mt=16199,It=16200,Cn=16201,zn=16202,Rn=16203,Ln=16204,Nn=16205,si=16206,Zn=16207,Bn=16208,$=16209,ea=16210,ta=16211,Zl=852,Bl=592,Ul=15,Fl=Ul,Un=e=>(e>>>24&255)+(e>>>8&65280)+((e&65280)<<8)+((e&255)<<24);function Ol(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Ue=e=>{if(!e)return 1;const i=e.state;return!i||i.strm!==e||i.mode<Xt||i.mode>ta?1:0},ia=e=>{if(Ue(e))return le;const i=e.state;return e.total_in=e.total_out=i.total=0,e.msg="",i.wrap&&(e.adler=i.wrap&1),i.mode=Xt,i.last=0,i.havedict=0,i.flags=-1,i.dmax=32768,i.head=null,i.hold=0,i.bits=0,i.lencode=i.lendyn=new Int32Array(Zl),i.distcode=i.distdyn=new Int32Array(Bl),i.sane=1,i.back=-1,Ne},na=e=>{if(Ue(e))return le;const i=e.state;return i.wsize=0,i.whave=0,i.wnext=0,ia(e)},ra=(e,i)=>{let t;if(Ue(e))return le;const n=e.state;return i<0?(t=0,i=-i):(t=(i>>4)+5,i<48&&(i&=15)),i&&(i<8||i>15)?le:(n.window!==null&&n.wbits!==i&&(n.window=null),n.wrap=t,n.wbits=i,na(e))},aa=(e,i)=>{if(!e)return le;const t=new Ol;e.state=t,t.strm=e,t.window=null,t.mode=Xt;const n=ra(e,i);return n!==Ne&&(e.state=null),n},$l=e=>aa(e,Fl);let Fn=!0,li,oi;const Pl=e=>{if(Fn){li=new Int32Array(512),oi=new Int32Array(32);let i=0;for(;i<144;)e.lens[i++]=8;for(;i<256;)e.lens[i++]=9;for(;i<280;)e.lens[i++]=7;for(;i<288;)e.lens[i++]=8;for(lt(Kr,e.lens,0,288,li,0,e.work,{bits:9}),i=0;i<32;)e.lens[i++]=5;lt(qr,e.lens,0,32,oi,0,e.work,{bits:5}),Fn=!1}e.lencode=li,e.lenbits=9,e.distcode=oi,e.distbits=5},sa=(e,i,t,n)=>{let r;const a=e.state;return a.window===null&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new Uint8Array(a.wsize)),n>=a.wsize?(a.window.set(i.subarray(t-a.wsize,t),0),a.wnext=0,a.whave=a.wsize):(r=a.wsize-a.wnext,r>n&&(r=n),a.window.set(i.subarray(t-n,t-n+r),a.wnext),n-=r,n?(a.window.set(i.subarray(t-n,t),0),a.wnext=n,a.whave=a.wsize):(a.wnext+=r,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=r))),0},Hl=(e,i)=>{let t,n,r,a,s,l,c,o,f,u,d,h,m,p,g=0,b,v,E,w,k,S,x,Z;const M=new Uint8Array(4);let A,D;const y=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(Ue(e)||!e.output||!e.input&&e.avail_in!==0)return le;t=e.state,t.mode===be&&(t.mode=ri),s=e.next_out,r=e.output,c=e.avail_out,a=e.next_in,n=e.input,l=e.avail_in,o=t.hold,f=t.bits,u=l,d=c,Z=Ne;e:for(;;)switch(t.mode){case Xt:if(t.wrap===0){t.mode=ri;break}for(;f<16;){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}if(t.wrap&2&&o===35615){t.wbits===0&&(t.wbits=15),t.check=0,M[0]=o&255,M[1]=o>>>8&255,t.check=H(t.check,M,2,0),o=0,f=0,t.mode=pn;break}if(t.head&&(t.head.done=!1),!(t.wrap&1)||(((o&255)<<8)+(o>>8))%31){e.msg="incorrect header check",t.mode=$;break}if((o&15)!==bn){e.msg="unknown compression method",t.mode=$;break}if(o>>>=4,f-=4,x=(o&15)+8,t.wbits===0&&(t.wbits=x),x>15||x>t.wbits){e.msg="invalid window size",t.mode=$;break}t.dmax=1<<t.wbits,t.flags=0,e.adler=t.check=1,t.mode=o&512?Tn:be,o=0,f=0;break;case pn:for(;f<16;){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}if(t.flags=o,(t.flags&255)!==bn){e.msg="unknown compression method",t.mode=$;break}if(t.flags&57344){e.msg="unknown header flags set",t.mode=$;break}t.head&&(t.head.text=o>>8&1),t.flags&512&&t.wrap&4&&(M[0]=o&255,M[1]=o>>>8&255,t.check=H(t.check,M,2,0)),o=0,f=0,t.mode=gn;case gn:for(;f<32;){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}t.head&&(t.head.time=o),t.flags&512&&t.wrap&4&&(M[0]=o&255,M[1]=o>>>8&255,M[2]=o>>>16&255,M[3]=o>>>24&255,t.check=H(t.check,M,4,0)),o=0,f=0,t.mode=wn;case wn:for(;f<16;){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}t.head&&(t.head.xflags=o&255,t.head.os=o>>8),t.flags&512&&t.wrap&4&&(M[0]=o&255,M[1]=o>>>8&255,t.check=H(t.check,M,2,0)),o=0,f=0,t.mode=vn;case vn:if(t.flags&1024){for(;f<16;){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}t.length=o,t.head&&(t.head.extra_len=o),t.flags&512&&t.wrap&4&&(M[0]=o&255,M[1]=o>>>8&255,t.check=H(t.check,M,2,0)),o=0,f=0}else t.head&&(t.head.extra=null);t.mode=kn;case kn:if(t.flags&1024&&(h=t.length,h>l&&(h=l),h&&(t.head&&(x=t.head.extra_len-t.length,t.head.extra||(t.head.extra=new Uint8Array(t.head.extra_len)),t.head.extra.set(n.subarray(a,a+h),x)),t.flags&512&&t.wrap&4&&(t.check=H(t.check,n,h,a)),l-=h,a+=h,t.length-=h),t.length))break e;t.length=0,t.mode=yn;case yn:if(t.flags&2048){if(l===0)break e;h=0;do x=n[a+h++],t.head&&x&&t.length<65536&&(t.head.name+=String.fromCharCode(x));while(x&&h<l);if(t.flags&512&&t.wrap&4&&(t.check=H(t.check,n,h,a)),l-=h,a+=h,x)break e}else t.head&&(t.head.name=null);t.length=0,t.mode=xn;case xn:if(t.flags&4096){if(l===0)break e;h=0;do x=n[a+h++],t.head&&x&&t.length<65536&&(t.head.comment+=String.fromCharCode(x));while(x&&h<l);if(t.flags&512&&t.wrap&4&&(t.check=H(t.check,n,h,a)),l-=h,a+=h,x)break e}else t.head&&(t.head.comment=null);t.mode=En;case En:if(t.flags&512){for(;f<16;){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}if(t.wrap&4&&o!==(t.check&65535)){e.msg="header crc mismatch",t.mode=$;break}o=0,f=0}t.head&&(t.head.hcrc=t.flags>>9&1,t.head.done=!0),e.adler=t.check=0,t.mode=be;break;case Tn:for(;f<32;){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}e.adler=t.check=Un(o),o=0,f=0,t.mode=Ot;case Ot:if(t.havedict===0)return e.next_out=s,e.avail_out=c,e.next_in=a,e.avail_in=l,t.hold=o,t.bits=f,Ll;e.adler=t.check=1,t.mode=be;case be:if(i===zl||i===Dt)break e;case ri:if(t.last){o>>>=f&7,f-=f&7,t.mode=si;break}for(;f<3;){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}switch(t.last=o&1,o>>>=1,f-=1,o&3){case 0:t.mode=An;break;case 1:if(Pl(t),t.mode=Mt,i===Dt){o>>>=2,f-=2;break e}break;case 2:t.mode=Dn;break;case 3:e.msg="invalid block type",t.mode=$}o>>>=2,f-=2;break;case An:for(o>>>=f&7,f-=f&7;f<32;){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}if((o&65535)!==(o>>>16^65535)){e.msg="invalid stored block lengths",t.mode=$;break}if(t.length=o&65535,o=0,f=0,t.mode=ai,i===Dt)break e;case ai:t.mode=Sn;case Sn:if(h=t.length,h){if(h>l&&(h=l),h>c&&(h=c),h===0)break e;r.set(n.subarray(a,a+h),s),l-=h,a+=h,c-=h,s+=h,t.length-=h;break}t.mode=be;break;case Dn:for(;f<14;){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}if(t.nlen=(o&31)+257,o>>>=5,f-=5,t.ndist=(o&31)+1,o>>>=5,f-=5,t.ncode=(o&15)+4,o>>>=4,f-=4,t.nlen>286||t.ndist>30){e.msg="too many length or distance symbols",t.mode=$;break}t.have=0,t.mode=Mn;case Mn:for(;t.have<t.ncode;){for(;f<3;){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}t.lens[y[t.have++]]=o&7,o>>>=3,f-=3}for(;t.have<19;)t.lens[y[t.have++]]=0;if(t.lencode=t.lendyn,t.lenbits=7,A={bits:t.lenbits},Z=lt(Cl,t.lens,0,19,t.lencode,0,t.work,A),t.lenbits=A.bits,Z){e.msg="invalid code lengths set",t.mode=$;break}t.have=0,t.mode=In;case In:for(;t.have<t.nlen+t.ndist;){for(;g=t.lencode[o&(1<<t.lenbits)-1],b=g>>>24,v=g>>>16&255,E=g&65535,!(b<=f);){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}if(E<16)o>>>=b,f-=b,t.lens[t.have++]=E;else{if(E===16){for(D=b+2;f<D;){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}if(o>>>=b,f-=b,t.have===0){e.msg="invalid bit length repeat",t.mode=$;break}x=t.lens[t.have-1],h=3+(o&3),o>>>=2,f-=2}else if(E===17){for(D=b+3;f<D;){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}o>>>=b,f-=b,x=0,h=3+(o&7),o>>>=3,f-=3}else{for(D=b+7;f<D;){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}o>>>=b,f-=b,x=0,h=11+(o&127),o>>>=7,f-=7}if(t.have+h>t.nlen+t.ndist){e.msg="invalid bit length repeat",t.mode=$;break}for(;h--;)t.lens[t.have++]=x}}if(t.mode===$)break;if(t.lens[256]===0){e.msg="invalid code -- missing end-of-block",t.mode=$;break}if(t.lenbits=9,A={bits:t.lenbits},Z=lt(Kr,t.lens,0,t.nlen,t.lencode,0,t.work,A),t.lenbits=A.bits,Z){e.msg="invalid literal/lengths set",t.mode=$;break}if(t.distbits=6,t.distcode=t.distdyn,A={bits:t.distbits},Z=lt(qr,t.lens,t.nlen,t.ndist,t.distcode,0,t.work,A),t.distbits=A.bits,Z){e.msg="invalid distances set",t.mode=$;break}if(t.mode=Mt,i===Dt)break e;case Mt:t.mode=It;case It:if(l>=6&&c>=258){e.next_out=s,e.avail_out=c,e.next_in=a,e.avail_in=l,t.hold=o,t.bits=f,Tl(e,d),s=e.next_out,r=e.output,c=e.avail_out,a=e.next_in,n=e.input,l=e.avail_in,o=t.hold,f=t.bits,t.mode===be&&(t.back=-1);break}for(t.back=0;g=t.lencode[o&(1<<t.lenbits)-1],b=g>>>24,v=g>>>16&255,E=g&65535,!(b<=f);){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}if(v&&!(v&240)){for(w=b,k=v,S=E;g=t.lencode[S+((o&(1<<w+k)-1)>>w)],b=g>>>24,v=g>>>16&255,E=g&65535,!(w+b<=f);){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}o>>>=w,f-=w,t.back+=w}if(o>>>=b,f-=b,t.back+=b,t.length=E,v===0){t.mode=Nn;break}if(v&32){t.back=-1,t.mode=be;break}if(v&64){e.msg="invalid literal/length code",t.mode=$;break}t.extra=v&15,t.mode=Cn;case Cn:if(t.extra){for(D=t.extra;f<D;){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}t.length+=o&(1<<t.extra)-1,o>>>=t.extra,f-=t.extra,t.back+=t.extra}t.was=t.length,t.mode=zn;case zn:for(;g=t.distcode[o&(1<<t.distbits)-1],b=g>>>24,v=g>>>16&255,E=g&65535,!(b<=f);){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}if(!(v&240)){for(w=b,k=v,S=E;g=t.distcode[S+((o&(1<<w+k)-1)>>w)],b=g>>>24,v=g>>>16&255,E=g&65535,!(w+b<=f);){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}o>>>=w,f-=w,t.back+=w}if(o>>>=b,f-=b,t.back+=b,v&64){e.msg="invalid distance code",t.mode=$;break}t.offset=E,t.extra=v&15,t.mode=Rn;case Rn:if(t.extra){for(D=t.extra;f<D;){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}t.offset+=o&(1<<t.extra)-1,o>>>=t.extra,f-=t.extra,t.back+=t.extra}if(t.offset>t.dmax){e.msg="invalid distance too far back",t.mode=$;break}t.mode=Ln;case Ln:if(c===0)break e;if(h=d-c,t.offset>h){if(h=t.offset-h,h>t.whave&&t.sane){e.msg="invalid distance too far back",t.mode=$;break}h>t.wnext?(h-=t.wnext,m=t.wsize-h):m=t.wnext-h,h>t.length&&(h=t.length),p=t.window}else p=r,m=s-t.offset,h=t.length;h>c&&(h=c),c-=h,t.length-=h;do r[s++]=p[m++];while(--h);t.length===0&&(t.mode=It);break;case Nn:if(c===0)break e;r[s++]=t.length,c--,t.mode=It;break;case si:if(t.wrap){for(;f<32;){if(l===0)break e;l--,o|=n[a++]<<f,f+=8}if(d-=c,e.total_out+=d,t.total+=d,t.wrap&4&&d&&(e.adler=t.check=t.flags?H(t.check,r,d,s-d):_t(t.check,r,d,s-d)),d=c,t.wrap&4&&(t.flags?o:Un(o))!==t.check){e.msg="incorrect data check",t.mode=$;break}o=0,f=0}t.mode=Zn;case Zn:if(t.wrap&&t.flags){for(;f<32;){if(l===0)break e;l--,o+=n[a++]<<f,f+=8}if(t.wrap&4&&o!==(t.total&4294967295)){e.msg="incorrect length check",t.mode=$;break}o=0,f=0}t.mode=Bn;case Bn:Z=Rl;break e;case $:Z=Jr;break e;case ea:return Qr;case ta:default:return le}return e.next_out=s,e.avail_out=c,e.next_in=a,e.avail_in=l,t.hold=o,t.bits=f,(t.wsize||d!==e.avail_out&&t.mode<$&&(t.mode<si||i!==mn))&&sa(e,e.output,e.next_out,d-e.avail_out),u-=e.avail_in,d-=e.avail_out,e.total_in+=u,e.total_out+=d,t.total+=d,t.wrap&4&&d&&(e.adler=t.check=t.flags?H(t.check,r,d,e.next_out-d):_t(t.check,r,d,e.next_out-d)),e.data_type=t.bits+(t.last?64:0)+(t.mode===be?128:0)+(t.mode===Mt||t.mode===ai?256:0),(u===0&&d===0||i===mn)&&Z===Ne&&(Z=Nl),Z},Vl=e=>{if(Ue(e))return le;let i=e.state;return i.window&&(i.window=null),e.state=null,Ne},Yl=(e,i)=>{if(Ue(e))return le;const t=e.state;return t.wrap&2?(t.head=i,i.done=!1,Ne):le},Xl=(e,i)=>{const t=i.length;let n,r,a;return Ue(e)||(n=e.state,n.wrap!==0&&n.mode!==Ot)?le:n.mode===Ot&&(r=1,r=_t(r,i,t,0),r!==n.check)?Jr:(a=sa(e,i,t,t),a?(n.mode=ea,Qr):(n.havedict=1,Ne))};var jl=na,Gl=ra,Wl=ia,Kl=$l,ql=aa,Jl=Hl,Ql=Vl,eo=Yl,to=Xl,io="pako inflate (from Nodeca project)",ge={inflateReset:jl,inflateReset2:Gl,inflateResetKeep:Wl,inflateInit:Kl,inflateInit2:ql,inflate:Jl,inflateEnd:Ql,inflateGetHeader:eo,inflateSetDictionary:to,inflateInfo:io};function no(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var ro=no;const la=Object.prototype.toString,{Z_NO_FLUSH:ao,Z_FINISH:so,Z_OK:pt,Z_STREAM_END:fi,Z_NEED_DICT:ci,Z_STREAM_ERROR:lo,Z_DATA_ERROR:On,Z_MEM_ERROR:oo}=Be;function yt(e){this.options=Yt.assign({chunkSize:1024*64,windowBits:15,to:""},e||{});const i=this.options;i.raw&&i.windowBits>=0&&i.windowBits<16&&(i.windowBits=-i.windowBits,i.windowBits===0&&(i.windowBits=-15)),i.windowBits>=0&&i.windowBits<16&&!(e&&e.windowBits)&&(i.windowBits+=32),i.windowBits>15&&i.windowBits<48&&(i.windowBits&15||(i.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Gr,this.strm.avail_out=0;let t=ge.inflateInit2(this.strm,i.windowBits);if(t!==pt)throw new Error(Re[t]);if(this.header=new ro,ge.inflateGetHeader(this.strm,this.header),i.dictionary&&(typeof i.dictionary=="string"?i.dictionary=bt.string2buf(i.dictionary):la.call(i.dictionary)==="[object ArrayBuffer]"&&(i.dictionary=new Uint8Array(i.dictionary)),i.raw&&(t=ge.inflateSetDictionary(this.strm,i.dictionary),t!==pt)))throw new Error(Re[t])}yt.prototype.push=function(e,i){const t=this.strm,n=this.options.chunkSize,r=this.options.dictionary;let a,s,l;if(this.ended)return!1;for(i===~~i?s=i:s=i===!0?so:ao,la.call(e)==="[object ArrayBuffer]"?t.input=new Uint8Array(e):t.input=e,t.next_in=0,t.avail_in=t.input.length;;){for(t.avail_out===0&&(t.output=new Uint8Array(n),t.next_out=0,t.avail_out=n),a=ge.inflate(t,s),a===ci&&r&&(a=ge.inflateSetDictionary(t,r),a===pt?a=ge.inflate(t,s):a===On&&(a=ci));t.avail_in>0&&a===fi&&t.state.wrap>0&&e[t.next_in]!==0;)ge.inflateReset(t),a=ge.inflate(t,s);switch(a){case lo:case On:case ci:case oo:return this.onEnd(a),this.ended=!0,!1}if(l=t.avail_out,t.next_out&&(t.avail_out===0||a===fi))if(this.options.to==="string"){let c=bt.utf8border(t.output,t.next_out),o=t.next_out-c,f=bt.buf2string(t.output,c);t.next_out=o,t.avail_out=n-o,o&&t.output.set(t.output.subarray(c,c+o),0),this.onData(f)}else this.onData(t.output.length===t.next_out?t.output:t.output.subarray(0,t.next_out));if(!(a===pt&&l===0)){if(a===fi)return a=ge.inflateEnd(this.strm),this.onEnd(a),this.ended=!0,!0;if(t.avail_in===0)break}}return!0};yt.prototype.onData=function(e){this.chunks.push(e)};yt.prototype.onEnd=function(e){e===pt&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=Yt.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};function $i(e,i){const t=new yt(i);if(t.push(e),t.err)throw t.msg||Re[t.err];return t.result}function fo(e,i){return i=i||{},i.raw=!0,$i(e,i)}var co=yt,ho=$i,uo=fo,_o=$i,mo=Be,bo={Inflate:co,inflate:ho,inflateRaw:uo,ungzip:_o,constants:mo};const{Deflate:po,deflate:go,deflateRaw:wo,gzip:vo}=xl,{Inflate:ko,inflate:yo,inflateRaw:xo,ungzip:Eo}=bo;var To=po,Ao=go,So=wo,Do=vo,Mo=ko,Io=yo,Co=xo,zo=Eo,Ro=Be,$n={Deflate:To,deflate:Ao,deflateRaw:So,gzip:Do,Inflate:Mo,inflate:Io,inflateRaw:Co,ungzip:zo,constants:Ro};function ve(e){let i=0;if(e.length==0)return i;for(let t=0;t<e.length;t++){const n=e.charCodeAt(t);i=(i<<5)-i+n,i|=0}return i>>>0}class oa{constructor(i=4096){_(this,"buffer");_(this,"pointer",0);this.buffer=new ArrayBuffer(i)}update(i=512){if(this.buffer.byteLength<this.pointer+i){const t=new Uint8Array(this.buffer.byteLength+i+1024);t.set(new Uint8Array(this.buffer),0),this.buffer=t.buffer}}final(){return this.buffer.slice(0,this.pointer)}putByte(i){this.update(1),new DataView(this.buffer).setUint8(this.pointer++,i)}putBuffer(i){this.update(i.byteLength),new Uint8Array(this.buffer).set(new Uint8Array(i),this.pointer),this.pointer+=i.byteLength}}class fa{constructor(i){_(this,"buffer");_(this,"pointer",0);this.buffer=i}getByte(){return new DataView(this.buffer).getUint8(this.pointer++)}getBuffer(i){const t=this.buffer.slice(this.pointer,this.pointer+i);return this.pointer+=i,t}}class ke{toBinary(i){const t=new oa;return t.putBuffer(new Uint32Array([this.magic()]).buffer),this.encode(t,i),t.final()}fromBinary(i){const t=new fa(i);if(new Uint32Array(t.getBuffer(4))[0]!=this.magic())throw new Error("Parser magic value does not match.");return this.decode(t)}toBase64(i){return Ki.fromUint8Array(new Uint8Array(this.toBinary(i)))}fromBase64(i){return this.fromBinary(Ki.toUint8Array(i).buffer)}}class Lo extends ke{encode(i,t){if(t==0n){i.putByte(0);return}let n=t;for(;n!=0n;){let r=Number(n&0x7fn)|128;n>>=7n,n==0n&&(r&=127),i.putByte(r)}}decode(i){let t=0n,n=0n,r;do{r=i.getByte();const a=BigInt(r&127);t|=a<<n,n+=7n}while(r&128);return t}magic(){return ve("UsizeParser")}}function De(){return new Lo}class No extends ke{encode(i,t){De().encode(i,BigInt(t.byteLength)),i.putBuffer(t)}decode(i){const t=Number(De().decode(i));return i.getBuffer(t)}magic(){return ve("BinaryParser")}}function gt(){return new No}class Zo extends ke{constructor(t){super();_(this,"type");this.type=t}encode(t,n){t.update(8);const r=new DataView(t.buffer);switch(this.type){case"u8":r.setUint8(t.pointer,n),t.pointer+=1;break;case"u16":r.setUint16(t.pointer,n,!0),t.pointer+=2;break;case"u32":r.setUint32(t.pointer,n,!0),t.pointer+=4;break;case"i8":r.setInt8(t.pointer,n),t.pointer+=1;break;case"i16":r.setInt16(t.pointer,n,!0),t.pointer+=2;break;case"i32":r.setInt32(t.pointer,n,!0),t.pointer+=4;break;case"f32":r.setFloat32(t.pointer,n),t.pointer+=4;break;case"f64":r.setFloat64(t.pointer,n,!0),t.pointer+=8;break;default:throw new Error("NumParser invalid type.")}}decode(t){const n=new DataView(t.buffer);let r;switch(this.type){case"u8":r=n.getUint8(t.pointer),t.pointer+=1;break;case"u16":r=n.getUint16(t.pointer,!0),t.pointer+=2;break;case"u32":r=n.getUint32(t.pointer,!0),t.pointer+=4;break;case"i8":r=n.getInt8(t.pointer),t.pointer+=1;break;case"i16":r=n.getInt16(t.pointer,!0),t.pointer+=2;break;case"i32":r=n.getInt32(t.pointer,!0),t.pointer+=4;break;case"f32":r=n.getFloat32(t.pointer),t.pointer+=4;break;case"f64":r=n.getFloat64(t.pointer,!0),t.pointer+=8;break;default:throw new Error("NumParser invalid type.")}return r}magic(){return ve("NumberParser")}}function $t(e){return new Zo(e)}class Bo extends ke{encode(i,t){gt().encode(i,new TextEncoder().encode(t))}decode(i){return new TextDecoder("utf-8").decode(gt().decode(i))}magic(){return ve("StringParser")}}function Uo(){return new Bo}class Fo extends ke{constructor(t){super();_(this,"objType");_(this,"keys");this.objType=t,this.keys=Object.keys(this.objType).toSorted()}encode(t,n){for(const r of this.keys)this.objType[r].encode(t,n[r])}decode(t){let n={};for(const r of this.keys)n[r]=this.objType[r].decode(t);return n}magic(){return ve(`StringParser:${this.keys.map(t=>`${String(t)}-${this.objType[t].magic()}`).join(",")}`)}}function Ei(e){return new Fo(e)}class Oo extends ke{constructor(t){super();_(this,"arrType");this.arrType=t}encode(t,n){De().encode(t,BigInt(n.length));for(const r of n)this.arrType.encode(t,r)}decode(t){const n=Number(De().decode(t)),r=[];for(let a=0;a<n;a++)r.push(this.arrType.decode(t));return r}magic(){return ve(`ArrayParser:${this.arrType.magic()}`)}}function $o(e){return new Oo(e)}class Po extends ke{constructor(t,n){super();_(this,"keyType");_(this,"valueType");this.keyType=t,this.valueType=n}encode(t,n){const r=Object.entries(n);De().encode(t,BigInt(r.length));for(const[a,s]of r)this.keyType.encode(t,a),this.valueType.encode(t,s)}decode(t){const n={},r=Number(De().decode(t));for(let a=0;a<r;a++){const s=this.keyType.decode(t),l=this.valueType.decode(t);n[s]=l}return n}magic(){return ve(`RecordParser:${this.keyType.magic()}-${this.valueType.magic()}`)}}function Ho(e,i){return new Po(e,i)}class Vo extends ke{encode(i,t){De().encode(i,BigInt(t.valueOf()))}decode(i){return new Date(Number(De().decode(i)))}magic(){return ve("DateParser")}}function ca(){return new Vo}class Yo extends ke{constructor(t,n){super();_(this,"parser");_(this,"compressed");this.parser=t,this.compressed=n}encode(t,n){const r=new oa;this.parser.encode(r,n);let a=r.final();this.compressed&&(a=$n.deflate(a).buffer),gt().encode(t,a)}decode(t){let n=gt().decode(t);this.compressed&&(n=$n.inflate(n).buffer);const r=new fa(n);return this.parser.decode(r)}magic(){return ve(`PackedParser:${this.parser.magic()}:${this.compressed?"Compressed":"Uncompressed"}`)}}function Xo(e,i){return new Yo(e,i)}class ha{constructor(i,t,n){_(this,"world");_(this,"chunkX");_(this,"chunkY");this.world=i,this.chunkX=t,this.chunkY=n}isGenerated(){return this instanceof Ye}generate(){if(this.isGenerated())throw new Error("Cannot generate an already generated chunk.");console.log(`Generating new chunk: ${this.chunkX}, ${this.chunkY}`);const i=[];for(let t=0;t<C;t++)for(let n=0;n<C;n++){const r=this.world.generateTile(this.chunkX*C+n,this.chunkY*C+t);i.push(r)}return new Ye(this.world,this.chunkX,this.chunkY,i)}}class Ye extends ha{constructor(t,n,r,a){super(t,n,r);_(this,"tiles");_(this,"deaths",[]);if(this.tiles=a,this.tiles.length!=C*C)throw new Error("GeneratedChunk incorrect tiles length.")}getTileAbsolute(t,n){return this.getTile(t-this.chunkX*C,n-this.chunkY*C)}getTile(t,n){return this.tiles[t+n*C]}resetTileAbsolute(t,n){return this.resetTile(t-this.chunkX*C,n-this.chunkY*C)}resetTile(t,n){this.tiles[t+n*C]=Ar(this.world,this.chunkX*C+t,this.chunkY*C+n)}encodeTiles(){const t=new qi(2048);for(const n of this.tiles)n.save(t);return t.final()}static decodeTiles(t,n,r,a){const s=new qi(a);let l=[];for(let c=0;c<C;c++)for(let o=0;o<C;o++){const f=n*C+o,u=r*C+c,h=Tr(t,f,u).load(t,f,u,s);l.push(h)}return new Ye(t,n,r,l)}save(){return{deaths:this.deaths,tiles:this.encodeTiles()}}static load(t,n,r,a){const s=Ye.decodeTiles(t,n,r,a.tiles);return s.deaths=a.deaths,s}}let jo=0;function Go(){return jo++}class Wo{constructor(){_(this,"_dispatcherDestroyed",!1);_(this,"listeners",{})}get dispatcherDestroyed(){return this._dispatcherDestroyed}dispatcherCheckDestroyed(){if(this.dispatcherDestroyed)throw new Error("EventDispatcher used after destroyed.")}getListenersArr(i){return this.listeners[i]||(this.listeners[i]=[]),this.listeners[i]}*listenersIter(){for(const i in this.listeners){const t=this.listeners[i];for(const n of t)yield n}}addEventListener(i,t,n=!1,r=0){this.dispatcherCheckDestroyed();let a=this.getListenersArr(i);const s={key:i,callbackfn:t,priority:r,id:Go(),once:n};return a.push(s),a.sort((l,c)=>l.priority-c.priority),s}dispatchEvent(i,t){this.dispatcherCheckDestroyed();const n=this.getListenersArr(i);for(const r of n){let a=!1;if(r.callbackfn({data:t,dispatcher:this,listener:r,stopPropagation:()=>a=!0}),r.once&&this.removeEventListener(r),a)break}}removeEventListener(i){this.dispatcherCheckDestroyed();let t=!1;if(typeof i!="number"){const n=this.getListenersArr(i.key);for(const r of n)r.id==i.id&&(n.splice(n.indexOf(r),1),t=!0)}else for(const n of this.listenersIter())n.id==i&&this.removeEventListener(n)&&(t=!0);return t}destroyDispatcher(){this.dispatcherCheckDestroyed(),this._dispatcherDestroyed=!0;for(const i in this.listeners)delete this.listeners[i]}}function*Ko(e,i){let t=e,n=i,r=1,a=1;for(;;){for(;2*t*r<a;)yield{x:t,y:n},t+=r;for(;2*n*r<a;)yield{x:t,y:n},n+=r;r=-1*r,a+=1}}class jt extends Wo{constructor(t){super();_(this,"seed");_(this,"tileSeed");_(this,"biomeSeed");_(this,"createdAt",new Date);_(this,"deaths",0);_(this,"chunks",{});_(this,"_revealCount",0);_(this,"_died",!1);this.seed=(t&4294967295)>>>0;const n=Mi(this.seed,!1);this.tileSeed=n(),this.biomeSeed=n(),this.addEventListener("die",({data:{x:r,y:a}})=>{this.deaths++;const s=this.getGeneratedChunk(Math.floor(r/C),Math.floor(a/C));s.deaths.push({x:r-s.chunkX*C,y:a-s.chunkY*C,diedAt:new Date})})}generateTile(t,n){return Ar(this,t,n)}getChunk(t,n){const r=this.chunks[`${t},${n}`];return r||new ha(this,t,n)}getGeneratedChunk(t,n){const r=this.getChunk(t,n);if(r.isGenerated())return r;const a=r.generate();return this.chunks[`${t},${n}`]=a,a}getTile(t,n){const r=Math.floor(t/C),a=Math.floor(n/C);return this.getGeneratedChunk(r,a).getTileAbsolute(t,n)}flag(t,n){const r=this.getTile(t,n);if(r.isDeathTile())return;const a=r.numFlags();r.flag();const s=r.numFlags();s==0&&s!=a&&(this.dispatchEvent("particle_unflag",{x:t,y:n}),this.dispatchEvent("sound_unflag",null))}_reveal(t,n){const r=this.getTile(t,n);if(r.reveal())if(this._revealCount++,r.numMines()>0){this._died=!0,this.dispatchEvent("particle_explosion",{x:r.x,y:r.y}),this.dispatchEvent("die",{x:r.x,y:r.y});return}else this.dispatchEvent("particle_reveal",{x:r.x,y:r.y});let a=[],s=[];for(r.minesNearby()==r.flagsNearby()&&s.push(r);s.length>0;){const l=s.pop();a.push(l);for(const c of l.searchPattern){const o=this.getTile(l.x+c.x,l.y+c.y);s.some(f=>f.x==o.x&&f.y==o.y)||a.some(f=>f.x==o.x&&f.y==o.y)||(o.minesNearby()==0?s.push(o):a.push(o))}}for(const l of a)l.reveal()&&(this._revealCount++,l.numMines()>0?(this._died=!0,this.dispatchEvent("particle_explosion",{x:l.x,y:l.y}),this.dispatchEvent("die",{x:r.x,y:r.y})):this.dispatchEvent("particle_reveal",{x:l.x,y:l.y}))}reveal(t,n){return this._revealCount=0,this._died=!1,this._reveal(t,n),this._revealCount>0&&this.dispatchEvent("sound_reveal",this._revealCount),this._died&&this.dispatchEvent("sound_explosion",null),this._died}reset(t,n){const r=this.getChunk(Math.floor(t/C),Math.floor(n/C));r.isGenerated()&&r.resetTileAbsolute(t,n)}closest0(t,n){for(const{x:r,y:a}of Ko(t,n)){const s=this.getTile(r,a);if(s.numMines()==0&&s.minesNearby()==0)return{x:r,y:a}}throw new Error("This error should never happen, it's just here to make TypeScript happy.")}save(){const t={seed:this.seed,createdAt:this.createdAt,numDeaths:this.deaths,chunks:{}};for(const n in this.chunks){const r=n,a=this.chunks[r];t.chunks[r]=a.save()}return t}static load(t){const n=new jt(t.seed);n.createdAt=t.createdAt,n.deaths=t.numDeaths;for(const r in t.chunks){const a=r,[s,l,c]=a.match(/^(-?\d+),(-?\d+)$/),[o,f]=[parseInt(l),parseInt(c)],u=t.chunks[a];n.chunks[a]=Ye.load(n,o,f,u)}return n}}function Pn(e,i){console.log("Loaded new world"),i&&localStorage.setItem(e,"PLACEHOLDER");const t=new jt(Math.floor(Math.random()*4294967295)),n=t.closest0(0,0);return t.reveal(n.x,n.y),t}function qo(e){const i=localStorage.getItem(e);if(i){console.log("Loaded saved world");try{return jt.load(da.fromBase64(i))}catch(t){return console.error("Failed to load world."),console.error(t),Pn(e,!1)}}else return Pn(e,!0)}function Jo(e,i){if(localStorage.getItem(e)!==null){console.log("Save world");try{localStorage.setItem(e,da.toBase64(i.save())),localStorage.removeItem("save_error")}catch(t){localStorage.setItem("save_error",String(t))}}}const Qo=Ei({deaths:$o(Ei({x:$t("u8"),y:$t("u8"),diedAt:ca()})),tiles:gt()}),da=Xo(Ei({seed:$t("u32"),createdAt:ca(),numDeaths:$t("u32"),chunks:Ho(Uo(),Qo)}),!0),ua=(e,i)=>{const t=new ResizeObserver(()=>{i(e.clientWidth,e.clientHeight)});return t.observe(e),{destroy(){t.unobserve(e),t.disconnect()}}};class ef{constructor(i,t,n,r){_(this,"world");_(this,"theme");_(this,"canvas");_(this,"ctx");_(this,"viewport");this.world=i,this.theme=t,this.canvas=n;const a=this.canvas.getContext("2d");if(!a)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=a,this.viewport=r}async init(){}destroy(){}renderWorld(){this.ctx.imageSmoothingEnabled=!1,this.viewport.transformCtx(this.ctx),this.viewport.forEachTileInViewport(i=>{this.theme.drawTile(this.ctx,i)},0),this.viewport.forEachChunkInViewport(i=>{i.deaths.forEach(t=>{this.theme.drawDeathIcon(this.ctx,i.chunkX*C+t.x,i.chunkY*C+t.y)})},0),this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.renderWorld()}}class tf{constructor(i){_(this,"world");_(this,"width",0);_(this,"height",0);_(this,"cameraX",0);_(this,"cameraY",0);_(this,"cameraZoom",32);_(this,"cameraMinZoom",4);_(this,"cameraMaxZoom",64);this.world=i}setSize(i,t){this.width=i,this.height=t}cameraWidth(){return this.width/this.cameraZoom}cameraHeight(){return this.height/this.cameraZoom}cameraTranslate(i,t){this.cameraX-=i/this.cameraZoom,this.cameraY-=t/this.cameraZoom}forceCameraZoom(){return this.width/this.cameraZoom<this.cameraMinZoom&&(this.cameraZoom=this.width/this.cameraMinZoom),this.height/this.cameraZoom<this.cameraMinZoom&&(this.cameraZoom=this.height/this.cameraMinZoom),this.width/this.cameraZoom>this.cameraMaxZoom&&(this.cameraZoom=this.width/this.cameraMaxZoom),this.height/this.cameraZoom>this.cameraMaxZoom&&(this.cameraZoom=this.height/this.cameraMaxZoom),this.cameraZoom}cameraScale(i){const t=this.cameraX+this.cameraWidth()*.5,n=this.cameraY+this.cameraHeight()*.5;this.cameraZoom*=i,this.forceCameraZoom();const r=this.cameraX+this.cameraWidth()*.5,a=this.cameraY+this.cameraHeight()*.5;return this.cameraX-=r-t,this.cameraY-=a-n,this.cameraZoom}cameraBounds(i=0){return{minX:Math.floor(this.cameraX-i),minY:Math.floor(this.cameraY-i),maxX:Math.ceil(this.cameraX+this.cameraWidth()+i),maxY:Math.ceil(this.cameraY+this.cameraHeight()+i)}}isInCameraBounds(i,t,n=0){const r=this.cameraBounds(n);return i>=r.minX&&i<=r.maxX&&t>=r.minY&&t<=r.maxY}cameraPos(i,t){return{x:Math.floor(i/this.cameraZoom+this.cameraX),y:Math.floor(t/this.cameraZoom+this.cameraY)}}transformCtx(i){i.scale(this.cameraZoom,this.cameraZoom),i.translate(-this.cameraX,-this.cameraY)}forEachTileInViewport(i,t=0){const n=this.cameraBounds(t);for(let r=n.minX;r<n.maxX;r++)for(let a=n.minY;a<n.maxY;a++){const s=this.world.getTile(r,a);i(s)}}forEachChunkInViewport(i,t=0){const n=this.cameraBounds(t);n.minX=Math.floor(n.minX/C),n.minY=Math.floor(n.minY/C),n.maxX=Math.ceil(n.maxX/C),n.maxY=Math.ceil(n.maxY/C);for(let r=n.minX;r<n.maxX;r++)for(let a=n.minY;a<n.maxY;a++){const s=this.world.getChunk(r,a);s.isGenerated()&&i(s)}}}class Gt{constructor(){_(this,"_alive",!0);_(this,"_lifetime",0)}get alive(){return this._alive}set alive(i){this._alive=i}get lifetime(){return this._lifetime}rendererUpdate(i,t){this._lifetime+=t,this.update(i,t)}}class nf extends Gt{constructor(t){super();_(this,"type","explosion");_(this,"maxLifetime",500);_(this,"tile");this.tile=t}update(t,n){this.lifetime>this.maxLifetime&&(this.alive=!1)}}function Wt(e){return e<0?0:e>1?1:e}function _a(e,i){if(e instanceof HTMLCanvasElement){const t=e.getContext("2d");if(!t)throw new Error("2d canvas context is not supported on this machine or browser.");return[e,t]}else if(e instanceof HTMLImageElement){const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");if(!n)throw new Error("2d canvas context is not supported on this machine or browser.");return[t,n]}else if(typeof e=="number"){const t=document.createElement("canvas");t.width=e,t.height=i;const n=t.getContext("2d");if(!n)throw new Error("2d canvas context is not supported on this machine or browser.");return[t,n]}else{const t=document.createElement("canvas"),n=t.getContext("2d");if(!n)throw new Error("2d canvas context is not supported on this machine or browser.");return[t,n]}}class rf extends Gt{constructor(t){super();_(this,"type","faketile");_(this,"tile");this.tile=t}get opacity(){return Wt(2-this.lifetime/250+2)}update(t,n){this.lifetime>2e3&&(this.alive=!1)}}class Hn extends Gt{constructor(t,n,r,a){super();_(this,"type","flag");_(this,"x");_(this,"y");_(this,"dx");_(this,"dy");_(this,"r");_(this,"dr");_(this,"isMultiFlag");_(this,"numFlags");this.x=t,this.y=n,this.dx=(Math.random()-.5)*.005,this.dy=-(Math.random()*.002+.005),this.r=0,this.dr=(Math.random()-.5)*.01,this.isMultiFlag=r,this.numFlags=a}get opacity(){return Wt(1-this.lifetime/250+.5)}update(t,n){this.dy+=5e-5*n,this.dx*=.99,this.dy*=this.dy<0?1:.95,this.x+=this.dx*n,this.y+=this.dy*n,this.r+=this.dr*n,this.lifetime>=500&&(this.alive=!1)}}class af extends Gt{constructor(t){super();_(this,"type","tilereveal");_(this,"tile");_(this,"x");_(this,"y");_(this,"dx");_(this,"dy");_(this,"r");_(this,"dr");_(this,"totalLifetime");this.tile=t,this.x=this.tile.x,this.y=this.tile.y,this.dx=(Math.random()-.5)*.005,this.dy=-(Math.random()*.002+.005),this.r=0,this.dr=(Math.random()-.5)*.01,this.totalLifetime=Math.random()*750+250}get opacity(){return Wt(1-this.lifetime/(this.totalLifetime/2)+.5)}update(t,n){this.dy+=5e-5*n,this.dx*=.99,this.dy*=this.dy<0?1:.98,this.x+=this.dx*n,this.y+=this.dy*n,this.r+=this.dr*n,this.lifetime>=this.totalLifetime&&(this.alive=!1)}}class sf{constructor(i,t,n,r){_(this,"world");_(this,"theme");_(this,"canvas");_(this,"ctx");_(this,"viewport");_(this,"particles",[]);_(this,"listeners",[]);_(this,"lastFrameTime",-1);this.world=i,this.theme=t,this.canvas=n;const a=this.canvas.getContext("2d");if(!a)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=a,this.viewport=r}async init(){this.listeners.push(this.world.addEventListener("particle_unflag",({data:{x:i,y:t}})=>{const n=this.world.getTile(i,t);n instanceof xr?this.particles.push(new Hn(i,t,!0,n.numMaxMines)):this.particles.push(new Hn(i,t,!1,1))})),this.listeners.push(this.world.addEventListener("particle_explosion",({data:{x:i,y:t}})=>{const n=this.world.getTile(i,t);this.particles.unshift(new rf(n)),this.particles.push(new nf(n))})),this.listeners.push(this.world.addEventListener("particle_reveal",({data:{x:i,y:t}})=>{const n=this.world.getTile(i,t);this.particles.push(new af(n))}))}destroy(){let i;for(;i=this.listeners.pop();)this.world.removeEventListener(i)}renderParticles(i){this.ctx.imageSmoothingEnabled=!1,this.viewport.transformCtx(this.ctx);for(let t=0;t<this.particles.length;t++){const n=this.particles[t];n.rendererUpdate(this,i),n.alive||(this.particles.splice(t,1),t--)}for(const t of this.particles)this.theme.drawParticle(this.ctx,t);this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.ctx.fillStyle="transparent",this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const i=performance.now();if(this.lastFrameTime==-1)this.renderParticles(0);else{const t=i-this.lastFrameTime;this.renderParticles(t)}this.lastFrameTime=i}}function lf(e){let i,t,n,r,a,s,l;return{c(){i=R("div"),t=R("canvas"),n=ae(),r=R("canvas"),this.h()},l(c){i=L(c,"DIV",{class:!0});var o=F(i);t=L(o,"CANVAS",{}),F(t).forEach(T),n=se(o),r=L(o,"CANVAS",{}),F(r).forEach(T),o.forEach(T),this.h()},h(){I(i,"class","w-full h-full force-overlap cursor-pointer")},m(c,o){P(c,i,o),U(i,t),e[12](t),U(i,n),U(i,r),e[13](r),e[14](i),s||(l=[q(window,"keydown",e[10]),q(window,"keyup",e[11]),er(a=ua.call(null,i,e[15])),q(i,"mousedown",e[16]),q(i,"mouseup",e[17]),q(i,"mousemove",e[18]),q(i,"wheel",e[19],{passive:!0}),q(i,"contextmenu",of)],s=!0)},p(c,[o]){a&&tr(a.update)&&o&62&&a.update.call(null,c[15])},i:ze,o:ze,d(c){c&&T(i),e[12](null),e[13](null),e[14](null),s=!1,Ti(l)}}}const of=e=>{e.preventDefault()};function ff(e,i,t){const n=ga();let r,{world:a}=i,{theme:s}=i;const l=new tf(a);let c,o,f,u,d=!0,h=!1,m=-1;const p=()=>{cancelAnimationFrame(m),m=requestAnimationFrame(p),h&&(t(5,h=!1),c.render()),f.render()};let g=new Set,b=-1;Ai(async()=>{c=new ef(a,s,o,l),f=new sf(a,s,u,l),clearInterval(b),b=setInterval(()=>{let y=!1;g.has("[")&&l.cameraZoom!=l.cameraScale(1.04)&&(y=!0),g.has("]")&&l.cameraZoom!=l.cameraScale(.96)&&(y=!0),g.has("ArrowUp")&&(l.cameraTranslate(0,10),y=!0),g.has("ArrowDown")&&(l.cameraTranslate(0,-10),y=!0),g.has("ArrowLeft")&&(l.cameraTranslate(10,0),y=!0),g.has("ArrowRight")&&(l.cameraTranslate(-10,0),y=!0),g.has("s")&&(t(1,l.cameraZoom=Math.pow(2,Math.ceil(Math.log(l.cameraZoom)/Math.log(2))),l),l.cameraScale(1),y=!0),y&&t(5,h=!0)},1e3/60),await c.init(),await f.init(),setTimeout(()=>{l.setSize(o.width,o.height),t(5,h=!0),p()},100)}),ir(()=>{c.destroy(),f.destroy(),cancelAnimationFrame(m),clearInterval(b)});const v=y=>{g.add(y.key)},E=y=>{g.delete(y.key)};function w(y){Ct[y?"unshift":"push"](()=>{o=y,t(2,o)})}function k(y){Ct[y?"unshift":"push"](()=>{u=y,t(3,u)})}function S(y){Ct[y?"unshift":"push"](()=>{r=y,t(0,r)})}const x=(y,j)=>{t(2,o.width=y,o),t(2,o.height=j,o),t(3,u.width=y,u),t(3,u.height=j,u),l.setSize(y,j),l.cameraScale(1),d&&(l.cameraTranslate(y/2,j/2),t(4,d=!1)),t(5,h=!0)},Z=y=>{if(document.pointerLockElement!=r){if(y.button==1)r.requestPointerLock(),y.preventDefault();else if(y.button==0){y.preventDefault();const j=l.cameraPos(y.offsetX,y.offsetY);n("action",{type:"reveal",pos:j}),t(5,h=!0)}else if(y.button==2){y.preventDefault();const j=l.cameraPos(y.offsetX,y.offsetY);n("action",{type:"flag",pos:j}),t(5,h=!0)}else if(y.button==3){y.preventDefault();const j=l.cameraPos(y.offsetX,y.offsetY);n("action",{type:"reset",pos:j}),t(5,h=!0)}}},M=y=>{document.pointerLockElement==r&&y.button==1&&document.exitPointerLock()},A=y=>{document.pointerLockElement==r&&(l.cameraTranslate(y.movementX,y.movementY),t(5,h=!0))},D=y=>{const j=y.deltaY>0?.9:1.1;l.cameraZoom!=l.cameraScale(j)&&t(5,h=!0)};return e.$$set=y=>{"world"in y&&t(8,a=y.world),"theme"in y&&t(9,s=y.theme)},[r,l,o,u,d,h,n,g,a,s,v,E,w,k,S,x,Z,M,A,D]}class cf extends fe{constructor(i){super(),ce(this,i,ff,lf,oe,{world:8,theme:9})}}class ma{constructor(i,t){_(this,"textures");_(this,"img");typeof i=="string"?(this.img=document.createElement("img"),this.img.loading="eager",this.img.src=i):this.img=i,this.textures=t}awaitLoad(){return new Promise((i,t)=>{if(this.img instanceof HTMLCanvasElement||this.img.complete&&this.img.naturalWidth!==0)return i();const n=()=>{this.img.removeEventListener("load",n),this.img.removeEventListener("error",r),i()},r=()=>{this.img.removeEventListener("load",n),this.img.removeEventListener("error",r),t()};this.img.addEventListener("load",n),this.img.addEventListener("error",r)})}onLoad(i){this.awaitLoad().then(()=>i(this))}draw(i,t,n,r,a,s){const[l,c,o,f]=this.textures[t];i.drawImage(this.img,l,c,o,f,n,r,a,s)}toImageDataAtlas(){const[i,t]=_a(this.img.width,this.img.height);return t.imageSmoothingEnabled=!1,t.drawImage(this.img,0,0),new hf(Object.fromEntries(Object.entries(this.textures).map(([n,[r,a,s,l]])=>[n,t.getImageData(r,a,s,l)])))}}class hf{constructor(i){_(this,"textures");this.textures=i}toImageAtlas(i=!0){let t=0,n=0,r={},a=0;for(const c in this.textures){const o=this.textures[c];i&&a++,r[c]={x:a,y:i?1:0,width:o.width,height:o.height,name:c},a+=o.width+(i?1:0),t=a,n=Math.max(n,o.height+(i?2:0))}const[s,l]=_a(t,n);for(const c in r){const o=r[c];l.putImageData(this.textures[c],o.x,o.y)}return new ma(s,Object.fromEntries(Object.entries(r).map(([c,o])=>(o=o,[c,[o.x,o.y,o.width,o.height]]))))}}class df{constructor(){_(this,"volume",1)}playSound(i,t=1){const n=this.soundEffects[i],r=Wt(t*this.volume);if(r<=0)return;const a=document.createElement("audio");a.src=n.src,a.volume=r,a.playbackRate=1+Math.random()*n.variation,a.preservesPitch=!1;const s=()=>{a.removeEventListener("ended",s),a.remove()};a.addEventListener("ended",s),a.play()}}class uf extends df{constructor(){super(...arguments);_(this,"tileset",new ma("/infinite-minesweeper/retro/tileset.png",{null:[0,0,16,16],skull:[0,16,16,16],bomb:[16,0,16,16],explosion1:[16,16,16,16],explosion2:[16,32,16,16],explosion3:[16,48,16,16],explosion4:[16,64,16,16],flag:[32,16,16,16],flag_1:[32,32,16,16],flag_2:[32,48,16,16],flag_3:[32,64,16,16],number_0:[48,0,16,16],number_1:[48,16,16,16],number_2:[48,32,16,16],number_3:[48,48,16,16],number_4:[48,64,16,16],number_5:[48,80,16,16],number_6:[48,96,16,16],number_7:[48,112,16,16],number_8:[48,128,16,16],number_9:[48,144,16,16],number_10:[48,160,16,16],number_11:[48,176,16,16],number_12:[48,192,16,16],number_13:[48,208,16,16],number_14:[48,224,16,16],number_15:[48,240,16,16],number_16:[48,256,16,16],number_17:[48,272,16,16],number_18:[48,288,16,16],number_19:[48,304,16,16],number_20:[48,320,16,16],number_21:[48,336,16,16],number_22:[48,352,16,16],number_23:[48,368,16,16],number_24:[48,384,16,16],tile_vanilla_covered:[64,0,16,16],tile_vanilla_revealed:[80,0,16,16],tile_chocolate_covered:[64,16,16,16],tile_chocolate_revealed:[80,16,16,16],tile_waffle_light_covered:[64,32,16,16],tile_waffle_light_revealed:[80,32,16,16],tile_waffle_dark_covered:[96,32,16,16],tile_waffle_dark_revealed:[112,32,16,16],tile_stroopwafel_light_covered:[64,48,16,16],tile_stroopwafel_light_revealed:[80,48,16,16],tile_stroopwafel_dark_covered:[96,48,16,16],tile_stroopwafel_dark_revealed:[112,48,16,16],tile_blueberry_covered:[64,64,16,16],tile_blueberry_revealed:[80,64,16,16]}));_(this,"soundEffects",{reveal:{src:"/infinite-minesweeper/retro/reveal.wav",variation:.25},unflag:{src:"/infinite-minesweeper/retro/unflag.wav",variation:.25},explosion:{src:"/infinite-minesweeper/retro/explosion.wav",variation:.25}})}async init(){await this.tileset.awaitLoad(),this.tileset=this.tileset.toImageDataAtlas().toImageAtlas(!0)}drawNearby(t,n){switch(n){case 0:break;case 1:this.tileset.draw(t,"number_1",0,0,1,1);break;case 2:this.tileset.draw(t,"number_2",0,0,1,1);break;case 3:this.tileset.draw(t,"number_3",0,0,1,1);break;case 4:this.tileset.draw(t,"number_4",0,0,1,1);break;case 5:this.tileset.draw(t,"number_5",0,0,1,1);break;case 6:this.tileset.draw(t,"number_6",0,0,1,1);break;case 7:this.tileset.draw(t,"number_7",0,0,1,1);break;case 8:this.tileset.draw(t,"number_8",0,0,1,1);break;case 9:this.tileset.draw(t,"number_9",0,0,1,1);break;case 10:this.tileset.draw(t,"number_10",0,0,1,1);break;case 11:this.tileset.draw(t,"number_11",0,0,1,1);break;case 12:this.tileset.draw(t,"number_12",0,0,1,1);break;case 13:this.tileset.draw(t,"number_13",0,0,1,1);break;case 14:this.tileset.draw(t,"number_14",0,0,1,1);break;case 15:this.tileset.draw(t,"number_15",0,0,1,1);break;case 16:this.tileset.draw(t,"number_16",0,0,1,1);break;case 17:this.tileset.draw(t,"number_17",0,0,1,1);break;case 18:this.tileset.draw(t,"number_18",0,0,1,1);break;case 19:this.tileset.draw(t,"number_19",0,0,1,1);break;case 20:this.tileset.draw(t,"number_20",0,0,1,1);break;case 21:this.tileset.draw(t,"number_21",0,0,1,1);break;case 22:this.tileset.draw(t,"number_22",0,0,1,1);break;case 23:this.tileset.draw(t,"number_23",0,0,1,1);break;case 24:this.tileset.draw(t,"number_24",0,0,1,1);break;default:throw new Error("ThemeRetro invalid draw nearby count.")}}drawFlags(t,n){switch(n){case 0:break;case 1:this.tileset.draw(t,"flag_1",0,0,1,1);break;case 2:this.tileset.draw(t,"flag_2",0,0,1,1);break;case 3:this.tileset.draw(t,"flag_3",0,0,1,1);break;default:throw new Error("ThemeRetro invalid draw flag count.")}}drawSingleMineTile(t,n,r,a,s){if(s){this.tileset.draw(t,r,0,0,1,1);return}switch(n.state){case Rt.Covered:this.tileset.draw(t,r,0,0,1,1);break;case Rt.Flagged:this.tileset.draw(t,r,0,0,1,1),this.tileset.draw(t,"flag",0,0,1,1);break;case Rt.Revealed:{this.tileset.draw(t,a,0,0,1,1),this.drawNearby(t,n.minesNearby());break}}}drawMultiMineTile(t,n,r,a,s){if(s){this.tileset.draw(t,r,0,0,1,1);return}n.isRevealed?(this.tileset.draw(t,a,0,0,1,1),this.drawNearby(t,n.minesNearby())):(this.tileset.draw(t,r,0,0,1,1),this.drawFlags(t,n.numFlags()))}drawForcedTile(t,n,r){switch(n.type){case"vanilla":this.drawSingleMineTile(t,n,"tile_vanilla_covered","tile_vanilla_revealed",r);break;case"chocolate":this.drawSingleMineTile(t,n,"tile_chocolate_covered","tile_chocolate_revealed",r);break;case"waffle":{n.isDark?this.drawSingleMineTile(t,n,"tile_waffle_dark_covered","tile_waffle_dark_revealed",r):this.drawSingleMineTile(t,n,"tile_waffle_light_covered","tile_waffle_light_revealed",r);break}case"stroopwafel":{n.isDark?this.drawSingleMineTile(t,n,"tile_stroopwafel_dark_covered","tile_stroopwafel_dark_revealed",r):this.drawSingleMineTile(t,n,"tile_stroopwafel_light_covered","tile_stroopwafel_light_revealed",r);break}case"blueberry":{this.drawMultiMineTile(t,n,"tile_blueberry_covered","tile_blueberry_revealed",r);break}}}drawTile(t,n){t.save(),t.translate(n.x,n.y),this.drawForcedTile(t,n,!1),t.restore()}drawParticle(t,n){switch(t.save(),n.type){case"flag":{t.translate(n.x+.5,n.y+.5),t.rotate(n.r),t.globalAlpha=n.opacity,n.isMultiFlag?(t.translate(-.5,-.5),this.drawFlags(t,n.numFlags)):this.tileset.draw(t,"flag",-.5,-.5,1,1);break}case"explosion":{const r=["explosion1","explosion2","explosion3","explosion4"],a=Math.min(Math.floor(n.lifetime/n.maxLifetime*r.length),r.length-1);this.tileset.draw(t,r[a],n.tile.x,n.tile.y,1,1);break}case"faketile":{t.translate(n.tile.x,n.tile.y),t.globalAlpha=n.opacity,this.drawForcedTile(t,n.tile,!0);break}case"tilereveal":{t.translate(n.x+.5,n.y+.5),t.rotate(n.r),t.translate(-.5,-.5),t.globalAlpha=n.opacity,this.drawForcedTile(t,n.tile,!0);break}}t.globalAlpha=1,t.restore()}drawDeathIcon(t,n,r){this.tileset.draw(t,"skull",n,r,1,1)}}const _f=or(.25),Nt=or(null);function Vn(e){let i,t;return i=new cf({props:{world:e[1],theme:e[2]}}),i.$on("action",e[6]),{c(){Q(i.$$.fragment)},l(n){ee(i.$$.fragment,n)},m(n,r){te(i,n,r),t=!0},p(n,r){const a={};r&2&&(a.world=n[1]),r&4&&(a.theme=n[2]),i.$set(a)},i(n){t||(N(i.$$.fragment,n),t=!0)},o(n){O(i.$$.fragment,n),t=!1},d(n){ie(i,n)}}}function mf(e){let i,t,n,r,a=e[1]&&e[2]&&Vn(e);return{c(){a&&a.c(),i=Se()},l(s){a&&a.l(s),i=Se()},m(s,l){a&&a.m(s,l),P(s,i,l),t=!0,n||(r=q(window,"beforeunload",e[5]),n=!0)},p(s,[l]){s[1]&&s[2]?a?(a.p(s,l),l&6&&N(a,1)):(a=Vn(s),a.c(),N(a,1),a.m(i.parentNode,i)):a&&(ot(),O(a,1,1,()=>{a=null}),ft())},i(s){t||(N(a),t=!0)},o(s){O(a),t=!1},d(s){s&&T(i),a&&a.d(s),n=!1,r()}}}function bf(e,i,t){let n,r;di(e,Nt,f=>t(3,n=f)),di(e,_f,f=>t(4,r=f));let{saveSlot:a}=i,s,l=new uf;Ai(async()=>{await l.init(),t(1,s=qo(a)),Pi(Nt,n=s,n),s.addEventListener("sound_unflag",()=>{l.playSound("unflag")}),s.addEventListener("sound_reveal",({data:f})=>{l.playSound("reveal",f/10+.9)}),s.addEventListener("sound_explosion",()=>{l.playSound("explosion")})}),ir(()=>{location.reload()});const c=()=>{Pi(Nt,n=null,n),Jo(a,s)},o=f=>{f.detail.type=="reveal"?s.reveal(f.detail.pos.x,f.detail.pos.y):f.detail.type=="flag"?s.flag(f.detail.pos.x,f.detail.pos.y):f.detail.type=="reset"&&s.reset(f.detail.pos.x,f.detail.pos.y)};return e.$$set=f=>{"saveSlot"in f&&t(0,a=f.saveSlot)},e.$$.update=()=>{e.$$.dirty&16&&t(2,l.volume=r,l)},[a,s,l,n,r,c,o]}class pf extends fe{constructor(i){super(),ce(this,i,bf,mf,oe,{saveSlot:0})}}/**
 * @license lucide-svelte v0.372.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const gf={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":2,"stroke-linecap":"round","stroke-linejoin":"round"},Yn=gf;function Xn(e,i,t){const n=e.slice();return n[10]=i[t][0],n[11]=i[t][1],n}function hi(e){let i,t=[e[11]],n={};for(let r=0;r<t.length;r+=1)n=X(n,t[r]);return{c(){i=nr(e[10]),this.h()},l(r){i=rr(r,e[10],{}),F(i).forEach(T),this.h()},h(){Zt(i,n)},m(r,a){P(r,i,a)},p(r,a){Zt(i,n=Ke(t,[a&32&&r[11]]))},d(r){r&&T(i)}}}function jn(e){let i=e[10],t,n=e[10]&&hi(e);return{c(){n&&n.c(),t=Se()},l(r){n&&n.l(r),t=Se()},m(r,a){n&&n.m(r,a),P(r,t,a)},p(r,a){r[10]?i?oe(i,r[10])?(n.d(1),n=hi(r),i=r[10],n.c(),n.m(t.parentNode,t)):n.p(r,a):(n=hi(r),i=r[10],n.c(),n.m(t.parentNode,t)):i&&(n.d(1),n=null,i=r[10])},d(r){r&&T(t),n&&n.d(r)}}}function wf(e){let i,t,n,r,a,s=Bt(e[5]),l=[];for(let d=0;d<s.length;d+=1)l[d]=jn(Xn(e,s,d));const c=e[9].default,o=Xe(c,e,e[8],null);let f=[Yn,e[6],{width:e[2]},{height:e[2]},{stroke:e[1]},{"stroke-width":n=e[4]?Number(e[3])*24/Number(e[2]):e[3]},{class:r=`lucide-icon lucide lucide-${e[0]} ${e[7].class??""}`}],u={};for(let d=0;d<f.length;d+=1)u=X(u,f[d]);return{c(){i=nr("svg");for(let d=0;d<l.length;d+=1)l[d].c();t=Se(),o&&o.c(),this.h()},l(d){i=rr(d,"svg",{width:!0,height:!0,stroke:!0,"stroke-width":!0,class:!0});var h=F(i);for(let m=0;m<l.length;m+=1)l[m].l(h);t=Se(),o&&o.l(h),h.forEach(T),this.h()},h(){Zt(i,u)},m(d,h){P(d,i,h);for(let m=0;m<l.length;m+=1)l[m]&&l[m].m(i,null);U(i,t),o&&o.m(i,null),a=!0},p(d,[h]){if(h&32){s=Bt(d[5]);let m;for(m=0;m<s.length;m+=1){const p=Xn(d,s,m);l[m]?l[m].p(p,h):(l[m]=jn(p),l[m].c(),l[m].m(i,t))}for(;m<l.length;m+=1)l[m].d(1);l.length=s.length}o&&o.p&&(!a||h&256)&&je(o,c,d,d[8],a?We(c,d[8],h,null):Ge(d[8]),null),Zt(i,u=Ke(f,[Yn,h&64&&d[6],(!a||h&4)&&{width:d[2]},(!a||h&4)&&{height:d[2]},(!a||h&2)&&{stroke:d[1]},(!a||h&28&&n!==(n=d[4]?Number(d[3])*24/Number(d[2]):d[3]))&&{"stroke-width":n},(!a||h&129&&r!==(r=`lucide-icon lucide lucide-${d[0]} ${d[7].class??""}`))&&{class:r}]))},i(d){a||(N(o,d),a=!0)},o(d){O(o,d),a=!1},d(d){d&&T(i),ar(l,d),o&&o.d(d)}}}function vf(e,i,t){const n=["name","color","size","strokeWidth","absoluteStrokeWidth","iconNode"];let r=Hi(i,n),{$$slots:a={},$$scope:s}=i,{name:l}=i,{color:c="currentColor"}=i,{size:o=24}=i,{strokeWidth:f=2}=i,{absoluteStrokeWidth:u=!1}=i,{iconNode:d}=i;return e.$$set=h=>{t(7,i=X(X({},i),me(h))),t(6,r=Hi(i,n)),"name"in h&&t(0,l=h.name),"color"in h&&t(1,c=h.color),"size"in h&&t(2,o=h.size),"strokeWidth"in h&&t(3,f=h.strokeWidth),"absoluteStrokeWidth"in h&&t(4,u=h.absoluteStrokeWidth),"iconNode"in h&&t(5,d=h.iconNode),"$$scope"in h&&t(8,s=h.$$scope)},i=me(i),[l,c,o,f,u,d,r,i,s,a]}class Kt extends fe{constructor(i){super(),ce(this,i,vf,wf,oe,{name:0,color:1,size:2,strokeWidth:3,absoluteStrokeWidth:4,iconNode:5})}}function kf(e){let i;const t=e[2].default,n=Xe(t,e,e[3],null);return{c(){n&&n.c()},l(r){n&&n.l(r)},m(r,a){n&&n.m(r,a),i=!0},p(r,a){n&&n.p&&(!i||a&8)&&je(n,t,r,r[3],i?We(t,r[3],a,null):Ge(r[3]),null)},i(r){i||(N(n,r),i=!0)},o(r){O(n,r),i=!1},d(r){n&&n.d(r)}}}function yf(e){let i,t;const n=[{name:"info"},e[1],{iconNode:e[0]}];let r={$$slots:{default:[kf]},$$scope:{ctx:e}};for(let a=0;a<n.length;a+=1)r=X(r,n[a]);return i=new Kt({props:r}),{c(){Q(i.$$.fragment)},l(a){ee(i.$$.fragment,a)},m(a,s){te(i,a,s),t=!0},p(a,[s]){const l=s&3?Ke(n,[n[0],s&2&&Pt(a[1]),s&1&&{iconNode:a[0]}]):{};s&8&&(l.$$scope={dirty:s,ctx:a}),i.$set(l)},i(a){t||(N(i.$$.fragment,a),t=!0)},o(a){O(i.$$.fragment,a),t=!1},d(a){ie(i,a)}}}function xf(e,i,t){let{$$slots:n={},$$scope:r}=i;const a=[["circle",{cx:"12",cy:"12",r:"10"}],["path",{d:"M12 16v-4"}],["path",{d:"M12 8h.01"}]];return e.$$set=s=>{t(1,i=X(X({},i),me(s))),"$$scope"in s&&t(3,r=s.$$scope)},i=me(i),[a,i,n,r]}class Ef extends fe{constructor(i){super(),ce(this,i,xf,yf,oe,{})}}function Gn(e){let i,t,n,r,a,s,l=e[1]&&Wn(e);const c=e[3].default,o=Xe(c,e,e[2],null);return{c(){i=R("div"),t=R("div"),l&&l.c(),n=ae(),r=R("div"),a=R("div"),o&&o.c(),this.h()},l(f){i=L(f,"DIV",{class:!0});var u=F(i);t=L(u,"DIV",{class:!0});var d=F(t);l&&l.l(d),d.forEach(T),n=se(u),r=L(u,"DIV",{class:!0});var h=F(r);a=L(h,"DIV",{class:!0});var m=F(a);o&&o.l(m),m.forEach(T),h.forEach(T),u.forEach(T),this.h()},h(){I(t,"class","modal-background -z-10 bg-black bg-opacity-30 shadow-vignette-heavy svelte-pwpa02"),I(a,"class","pointer-events-auto"),I(r,"class","modal-content flex justify-center items-center pointer-events-none p-8 svelte-pwpa02"),I(i,"class","modal fixed top-0 left-0 bottom-0 right-0 grid grid-cols-1 grid-rows-1 svelte-pwpa02")},m(f,u){P(f,i,u),U(i,t),l&&l.m(t,null),U(i,n),U(i,r),U(r,a),o&&o.m(a,null),s=!0},p(f,u){f[1]?l?l.p(f,u):(l=Wn(f),l.c(),l.m(t,null)):l&&(l.d(1),l=null),o&&o.p&&(!s||u&4)&&je(o,c,f,f[2],s?We(c,f[2],u,null):Ge(f[2]),null)},i(f){s||(N(o,f),s=!0)},o(f){O(o,f),s=!1},d(f){f&&T(i),l&&l.d(),o&&o.d(f)}}}function Wn(e){let i,t,n;return{c(){i=R("button"),this.h()},l(r){i=L(r,"BUTTON",{class:!0,"aria-label":!0}),F(i).forEach(T),this.h()},h(){I(i,"class","w-full h-full"),I(i,"aria-label","Close Modal")},m(r,a){P(r,i,a),t||(n=q(i,"click",e[4]),t=!0)},p:ze,d(r){r&&T(i),t=!1,n()}}}function Tf(e){let i,t,n=e[0]&&Gn(e);return{c(){n&&n.c(),i=Se()},l(r){n&&n.l(r),i=Se()},m(r,a){n&&n.m(r,a),P(r,i,a),t=!0},p(r,[a]){r[0]?n?(n.p(r,a),a&1&&N(n,1)):(n=Gn(r),n.c(),N(n,1),n.m(i.parentNode,i)):n&&(ot(),O(n,1,1,()=>{n=null}),ft())},i(r){t||(N(n),t=!0)},o(r){O(n),t=!1},d(r){r&&T(i),n&&n.d(r)}}}function Af(e,i,t){let{$$slots:n={},$$scope:r}=i,{visible:a=!1}=i,{closable:s=!0}=i;const l=()=>t(0,a=!1);return e.$$set=c=>{"visible"in c&&t(0,a=c.visible),"closable"in c&&t(1,s=c.closable),"$$scope"in c&&t(2,r=c.$$scope)},[a,s,r,n,l]}class Sf extends fe{constructor(i){super(),ce(this,i,Af,Tf,oe,{visible:0,closable:1})}}function Df(e){let i;const t=e[2].default,n=Xe(t,e,e[3],null);return{c(){n&&n.c()},l(r){n&&n.l(r)},m(r,a){n&&n.m(r,a),i=!0},p(r,a){n&&n.p&&(!i||a&8)&&je(n,t,r,r[3],i?We(t,r[3],a,null):Ge(r[3]),null)},i(r){i||(N(n,r),i=!0)},o(r){O(n,r),i=!1},d(r){n&&n.d(r)}}}function Mf(e){let i,t;const n=[{name:"chevron-left"},e[1],{iconNode:e[0]}];let r={$$slots:{default:[Df]},$$scope:{ctx:e}};for(let a=0;a<n.length;a+=1)r=X(r,n[a]);return i=new Kt({props:r}),{c(){Q(i.$$.fragment)},l(a){ee(i.$$.fragment,a)},m(a,s){te(i,a,s),t=!0},p(a,[s]){const l=s&3?Ke(n,[n[0],s&2&&Pt(a[1]),s&1&&{iconNode:a[0]}]):{};s&8&&(l.$$scope={dirty:s,ctx:a}),i.$set(l)},i(a){t||(N(i.$$.fragment,a),t=!0)},o(a){O(i.$$.fragment,a),t=!1},d(a){ie(i,a)}}}function If(e,i,t){let{$$slots:n={},$$scope:r}=i;const a=[["path",{d:"m15 18-6-6 6-6"}]];return e.$$set=s=>{t(1,i=X(X({},i),me(s))),"$$scope"in s&&t(3,r=s.$$scope)},i=me(i),[a,i,n,r]}class Cf extends fe{constructor(i){super(),ce(this,i,If,Mf,oe,{})}}function zf(e){let i;const t=e[2].default,n=Xe(t,e,e[3],null);return{c(){n&&n.c()},l(r){n&&n.l(r)},m(r,a){n&&n.m(r,a),i=!0},p(r,a){n&&n.p&&(!i||a&8)&&je(n,t,r,r[3],i?We(t,r[3],a,null):Ge(r[3]),null)},i(r){i||(N(n,r),i=!0)},o(r){O(n,r),i=!1},d(r){n&&n.d(r)}}}function Rf(e){let i,t;const n=[{name:"chevron-right"},e[1],{iconNode:e[0]}];let r={$$slots:{default:[zf]},$$scope:{ctx:e}};for(let a=0;a<n.length;a+=1)r=X(r,n[a]);return i=new Kt({props:r}),{c(){Q(i.$$.fragment)},l(a){ee(i.$$.fragment,a)},m(a,s){te(i,a,s),t=!0},p(a,[s]){const l=s&3?Ke(n,[n[0],s&2&&Pt(a[1]),s&1&&{iconNode:a[0]}]):{};s&8&&(l.$$scope={dirty:s,ctx:a}),i.$set(l)},i(a){t||(N(i.$$.fragment,a),t=!0)},o(a){O(i.$$.fragment,a),t=!1},d(a){ie(i,a)}}}function Lf(e,i,t){let{$$slots:n={},$$scope:r}=i;const a=[["path",{d:"m9 18 6-6-6-6"}]];return e.$$set=s=>{t(1,i=X(X({},i),me(s))),"$$scope"in s&&t(3,r=s.$$scope)},i=me(i),[a,i,n,r]}class Nf extends fe{constructor(i){super(),ce(this,i,Lf,Rf,oe,{})}}function Zf(e){let i,t='<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_blueberry_screenshot.png" alt="Blueberry Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Blueberry</h2> <div class="biome-description svelte-1pkhcy2">Tiles may have up to 3 mines.</div></div>';return{c(){i=R("div"),i.innerHTML=t,this.h()},l(n){i=L(n,"DIV",{class:!0,"data-svelte-h":!0}),Ze(i)!=="svelte-1pq8aco"&&(i.innerHTML=t),this.h()},h(){I(i,"class","biome svelte-1pkhcy2")},m(n,r){P(n,i,r)},d(n){n&&T(i)}}}function Bf(e){let i,t=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_stroopwafel_screenshot.png" alt="Stroopwafel Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Stroopwafel</h2> <div class="biome-description svelte-1pkhcy2">3x3 checkers of tiles.<br/>
                        Dark checkered sections have 8 mines.<br/>
                        Light checkered sections have 1 mine.</div></div>`;return{c(){i=R("div"),i.innerHTML=t,this.h()},l(n){i=L(n,"DIV",{class:!0,"data-svelte-h":!0}),Ze(i)!=="svelte-4cbz83"&&(i.innerHTML=t),this.h()},h(){I(i,"class","biome svelte-1pkhcy2")},m(n,r){P(n,i,r)},d(n){n&&T(i)}}}function Uf(e){let i,t=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_waffle_screenshot.png" alt="Waffle Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Waffle</h2> <div class="biome-description svelte-1pkhcy2">2x2 checkers of tiles.<br/>
                        Dark checkered sections have 3 mines.<br/>
                        Light checkered sections have 1 mine.</div></div>`;return{c(){i=R("div"),i.innerHTML=t,this.h()},l(n){i=L(n,"DIV",{class:!0,"data-svelte-h":!0}),Ze(i)!=="svelte-1ji8mo3"&&(i.innerHTML=t),this.h()},h(){I(i,"class","biome svelte-1pkhcy2")},m(n,r){P(n,i,r)},d(n){n&&T(i)}}}function Ff(e){let i,t=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_chocolate_screenshot.png" alt="Chocolate Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Chocolate</h2> <div class="biome-description svelte-1pkhcy2">The standard Minesweeper rules.<br/>
                        Much more mines than Vanilla biome.</div></div>`;return{c(){i=R("div"),i.innerHTML=t,this.h()},l(n){i=L(n,"DIV",{class:!0,"data-svelte-h":!0}),Ze(i)!=="svelte-gc9i28"&&(i.innerHTML=t),this.h()},h(){I(i,"class","biome svelte-1pkhcy2")},m(n,r){P(n,i,r)},d(n){n&&T(i)}}}function Of(e){let i,t='<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_vanilla_screenshot.png" alt="Vanilla Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Vanilla</h2> <div class="biome-description svelte-1pkhcy2">The standard Minesweeper rules.</div></div>';return{c(){i=R("div"),i.innerHTML=t,this.h()},l(n){i=L(n,"DIV",{class:!0,"data-svelte-h":!0}),Ze(i)!=="svelte-ic5bha"&&(i.innerHTML=t),this.h()},h(){I(i,"class","biome svelte-1pkhcy2")},m(n,r){P(n,i,r)},d(n){n&&T(i)}}}function $f(e){let i,t,n,r,a,s,l,c,o,f,u,d;function h(g,b){if(g[0]=="Vanilla")return Of;if(g[0]=="Chocolate")return Ff;if(g[0]=="Waffle")return Uf;if(g[0]=="Stroopwafel")return Bf;if(g[0]=="Blueberry")return Zf}let m=h(e),p=m&&m(e);return s=new Cf({}),o=new Nf({}),{c(){i=R("div"),t=R("div"),p&&p.c(),n=ae(),r=R("div"),a=R("button"),Q(s.$$.fragment),l=ae(),c=R("button"),Q(o.$$.fragment),this.h()},l(g){i=L(g,"DIV",{class:!0});var b=F(i);t=L(b,"DIV",{class:!0});var v=F(t);p&&p.l(v),v.forEach(T),n=se(b),r=L(b,"DIV",{class:!0});var E=F(r);a=L(E,"BUTTON",{class:!0});var w=F(a);ee(s.$$.fragment,w),w.forEach(T),l=se(E),c=L(E,"BUTTON",{class:!0});var k=F(c);ee(o.$$.fragment,k),k.forEach(T),E.forEach(T),b.forEach(T),this.h()},h(){I(t,"class","pointer-events-auto px-12"),I(a,"class","pointer-events-auto pl-4 hover:-translate-x-1 transition-transform"),I(c,"class","pointer-events-auto pr-4 hover:translate-x-1 transition-transform"),I(r,"class","pointer-events-none flex justify-between z-10"),I(i,"class","w-full h-full force-overlap text-white")},m(g,b){P(g,i,b),U(i,t),p&&p.m(t,null),U(i,n),U(i,r),U(r,a),te(s,a,null),U(r,l),U(r,c),te(o,c,null),f=!0,u||(d=[q(a,"click",e[2]),q(c,"click",e[3])],u=!0)},p(g,[b]){m!==(m=h(g))&&(p&&p.d(1),p=m&&m(g),p&&(p.c(),p.m(t,null)))},i(g){f||(N(s.$$.fragment,g),N(o.$$.fragment,g),f=!0)},o(g){O(s.$$.fragment,g),O(o.$$.fragment,g),f=!1},d(g){g&&T(i),p&&p.d(),ie(s),ie(o),u=!1,Ti(d)}}}function Pf(e,i,t){const n=["Vanilla","Chocolate","Waffle","Stroopwafel","Blueberry"];let r="Vanilla";function a(c){let o=n.indexOf(r);o+=c=="next"?1:-1,o>=n.length&&(o=0),o<0&&(o=n.length-1),t(0,r=n[o])}return[r,a,c=>{c.preventDefault(),a("prev")},c=>{c.preventDefault(),a("next")}]}class Hf extends fe{constructor(i){super(),ce(this,i,Pf,$f,oe,{})}}function Kn(e,i,t){const n=e.slice();return n[3]=i[t],n}function qn(e){let i,t=e[3]+"",n,r,a,s,l;function c(){return e[2](e[3])}return{c(){i=R("button"),n=sr(t),r=ae(),this.h()},l(o){i=L(o,"BUTTON",{class:!0});var f=F(i);n=lr(f,t),r=se(f),f.forEach(T),this.h()},h(){I(i,"class","tab w-full flex justify-center py-1 px-4 rounded-md svelte-1v0way8"),i.disabled=a=e[3]==e[0],Vi(i,"selected",e[3]==e[0])},m(o,f){P(o,i,f),U(i,n),U(i,r),s||(l=q(i,"click",c),s=!0)},p(o,f){e=o,f&1&&a!==(a=e[3]==e[0])&&(i.disabled=a),f&3&&Vi(i,"selected",e[3]==e[0])},d(o){o&&T(i),s=!1,l()}}}function Vf(e){let i,t=`<span>Left Click: Reveal tile
                    <br/>
                    Right Click: Flag tile
                    <br/>
                    Middle Click: Move view
                    <br/>
                    Scroll Wheel: Zoom view
                    <br/> <br/>
                    Arrow Keys: Move view
                    <br/>
                    Open Square Bracket &#39;[&#39;: View zoom In
                    <br/>
                    Close Square Bracket &#39;]&#39;: View zoom Out
                    <br/></span>`;return{c(){i=R("div"),i.innerHTML=t,this.h()},l(n){i=L(n,"DIV",{class:!0,"data-svelte-h":!0}),Ze(i)!=="svelte-docn7k"&&(i.innerHTML=t),this.h()},h(){I(i,"class","px-4")},m(n,r){P(n,i,r)},i:ze,o:ze,d(n){n&&T(i)}}}function Yf(e){let i,t,n;return t=new Hf({}),{c(){i=R("div"),Q(t.$$.fragment),this.h()},l(r){i=L(r,"DIV",{class:!0});var a=F(i);ee(t.$$.fragment,a),a.forEach(T),this.h()},h(){I(i,"class","w-full h-full inline")},m(r,a){P(r,i,a),te(t,i,null),n=!0},i(r){n||(N(t.$$.fragment,r),n=!0)},o(r){O(t.$$.fragment,r),n=!1},d(r){r&&T(i),ie(t)}}}function Xf(e){let i,t=`<div><a class="text-2xl font-bold" href="https://vulae.github.io/infinite-minesweeper">Infinite Minesweeper</a> <br/>
                    An infinite twist on Minesweeper that adds biomes that change the rules of the game.</div> <div class="pt-4"><span class="float-right text-xs font-extrabold">*Source code available on
                        <a class="underline" href="https://github.com/Vulae/infinite-minesweeper">GitHub</a></span></div>`;return{c(){i=R("div"),i.innerHTML=t,this.h()},l(n){i=L(n,"DIV",{class:!0,"data-svelte-h":!0}),Ze(i)!=="svelte-1yloiaf"&&(i.innerHTML=t),this.h()},h(){I(i,"class","px-4 w-full h-full flex flex-col justify-between")},m(n,r){P(n,i,r)},i:ze,o:ze,d(n){n&&T(i)}}}function jf(e){let i,t,n,r,a,s,l,c,o,f=Bt(e[1]),u=[];for(let p=0;p<f.length;p+=1)u[p]=qn(Kn(e,f,p));const d=[Xf,Yf,Vf],h=[];function m(p,g){return p[0]=="Information"?0:p[0]=="Biomes"?1:p[0]=="Controls"?2:-1}return~(l=m(e))&&(c=h[l]=d[l](e)),{c(){i=R("div"),t=R("div");for(let p=0;p<u.length;p+=1)u[p].c();n=ae(),r=R("div"),a=ae(),s=R("div"),c&&c.c(),this.h()},l(p){i=L(p,"DIV",{class:!0});var g=F(i);t=L(g,"DIV",{class:!0});var b=F(t);for(let E=0;E<u.length;E+=1)u[E].l(b);b.forEach(T),n=se(g),r=L(g,"DIV",{class:!0}),F(r).forEach(T),a=se(g),s=L(g,"DIV",{class:!0});var v=F(s);c&&c.l(v),v.forEach(T),g.forEach(T),this.h()},h(){I(t,"class","px-4 grid grid-flow-col gap-4 items-center font-bold"),I(r,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full"),I(s,"class","w-[32rem] h-64 py-2 font-semibold"),I(i,"class","grid px-4 py-2 rounded-2xl bg-white bg-opacity-50")},m(p,g){P(p,i,g),U(i,t);for(let b=0;b<u.length;b+=1)u[b]&&u[b].m(t,null);U(i,n),U(i,r),U(i,a),U(i,s),~l&&h[l].m(s,null),o=!0},p(p,[g]){if(g&3){f=Bt(p[1]);let v;for(v=0;v<f.length;v+=1){const E=Kn(p,f,v);u[v]?u[v].p(E,g):(u[v]=qn(E),u[v].c(),u[v].m(t,null))}for(;v<u.length;v+=1)u[v].d(1);u.length=f.length}let b=l;l=m(p),l!==b&&(c&&(ot(),O(h[b],1,1,()=>{h[b]=null}),ft()),~l?(c=h[l],c||(c=h[l]=d[l](p),c.c()),N(c,1),c.m(s,null)):c=null)},i(p){o||(N(c),o=!0)},o(p){O(c),o=!1},d(p){p&&T(i),ar(u,p),~l&&h[l].d()}}}function Gf(e,i,t){const n=["Information","Biomes","Controls"];let r="Information";return[r,n,s=>t(0,r=s)]}class Wf extends fe{constructor(i){super(),ce(this,i,Gf,jf,oe,{})}}function Kf(e){let i;const t=e[2].default,n=Xe(t,e,e[3],null);return{c(){n&&n.c()},l(r){n&&n.l(r)},m(r,a){n&&n.m(r,a),i=!0},p(r,a){n&&n.p&&(!i||a&8)&&je(n,t,r,r[3],i?We(t,r[3],a,null):Ge(r[3]),null)},i(r){i||(N(n,r),i=!0)},o(r){O(n,r),i=!1},d(r){n&&n.d(r)}}}function qf(e){let i,t;const n=[{name:"skull"},e[1],{iconNode:e[0]}];let r={$$slots:{default:[Kf]},$$scope:{ctx:e}};for(let a=0;a<n.length;a+=1)r=X(r,n[a]);return i=new Kt({props:r}),{c(){Q(i.$$.fragment)},l(a){ee(i.$$.fragment,a)},m(a,s){te(i,a,s),t=!0},p(a,[s]){const l=s&3?Ke(n,[n[0],s&2&&Pt(a[1]),s&1&&{iconNode:a[0]}]):{};s&8&&(l.$$scope={dirty:s,ctx:a}),i.$set(l)},i(a){t||(N(i.$$.fragment,a),t=!0)},o(a){O(i.$$.fragment,a),t=!1},d(a){ie(i,a)}}}function Jf(e,i,t){let{$$slots:n={},$$scope:r}=i;const a=[["circle",{cx:"9",cy:"12",r:"1"}],["circle",{cx:"15",cy:"12",r:"1"}],["path",{d:"M8 20v2h8v-2"}],["path",{d:"m12.5 17-.5-1-.5 1h1z"}],["path",{d:"M16 20a2 2 0 0 0 1.56-3.25 8 8 0 1 0-11.12 0A2 2 0 0 0 8 20"}]];return e.$$set=s=>{t(1,i=X(X({},i),me(s))),"$$scope"in s&&t(3,r=s.$$scope)},i=me(i),[a,i,n,r]}class Qf extends fe{constructor(i){super(),ce(this,i,Jf,qf,oe,{})}}function Jn(e){let i,t;return i=new pf({props:{saveSlot:e[0]}}),{c(){Q(i.$$.fragment)},l(n){ee(i.$$.fragment,n)},m(n,r){te(i,n,r),t=!0},p(n,r){const a={};r&1&&(a.saveSlot=n[0]),i.$set(a)},i(n){t||(N(i.$$.fragment,n),t=!0)},o(n){O(i.$$.fragment,n),t=!1},d(n){ie(i,n)}}}function Qn(e){let i,t,n,r,a,s,l,c,o;return r=new Qf({}),{c(){i=R("div"),t=ae(),n=R("div"),Q(r.$$.fragment),a=ae(),s=R("span"),l=sr(e[4]),this.h()},l(f){i=L(f,"DIV",{class:!0}),F(i).forEach(T),t=se(f),n=L(f,"DIV",{class:!0,title:!0});var u=F(n);ee(r.$$.fragment,u),a=se(u),s=L(u,"SPAN",{class:!0});var d=F(s);l=lr(d,e[4]),d.forEach(T),u.forEach(T),this.h()},h(){I(i,"class","w-full h-full bg-white rounded-full p-[1px]"),I(s,"class","text-sm"),I(n,"class","flex items-center"),I(n,"title",c=e[4]+" deaths"),ne(n,"flex-direction",e[1]=="horizontal"?"row":"column")},m(f,u){P(f,i,u),P(f,t,u),P(f,n,u),te(r,n,null),U(n,a),U(n,s),U(s,l),o=!0},p(f,u){(!o||u&16)&&va(l,f[4]),(!o||u&16&&c!==(c=f[4]+" deaths"))&&I(n,"title",c),u&2&&ne(n,"flex-direction",f[1]=="horizontal"?"row":"column")},i(f){o||(N(r.$$.fragment,f),o=!0)},o(f){O(r.$$.fragment,f),o=!1},d(f){f&&(T(i),T(t),T(n)),ie(r)}}}function ec(e){let i,t;return i=new Wf({}),{c(){Q(i.$$.fragment)},l(n){ee(i.$$.fragment,n)},m(n,r){te(i,n,r),t=!0},i(n){t||(N(i.$$.fragment,n),t=!0)},o(n){O(i.$$.fragment,n),t=!1},d(n){ie(i,n)}}}function tc(e){let i,t,n,r,a,s,l,c,o,f,u,d,h,m,p,g,b=e[0]&&Jn(e);c=new Ef({});let v=e[4]!==null&&Qn(e);function E(k){e[8](k)}let w={$$slots:{default:[ec]},$$scope:{ctx:e}};return e[3]!==void 0&&(w.visible=e[3]),d=new Sf({props:w}),Ct.push(()=>ka(d,"visible",E)),{c(){i=R("div"),t=R("div"),b&&b.c(),n=ae(),r=R("div"),a=R("div"),s=R("div"),l=R("button"),Q(c.$$.fragment),o=ae(),v&&v.c(),u=ae(),Q(d.$$.fragment),this.h()},l(k){i=L(k,"DIV",{class:!0});var S=F(i);t=L(S,"DIV",{class:!0});var x=F(t);b&&b.l(x),x.forEach(T),n=se(S),r=L(S,"DIV",{class:!0});var Z=F(r);a=L(Z,"DIV",{class:!0});var M=F(a);s=L(M,"DIV",{class:!0});var A=F(s);l=L(A,"BUTTON",{class:!0,title:!0});var D=F(l);ee(c.$$.fragment,D),D.forEach(T),o=se(A),v&&v.l(A),A.forEach(T),M.forEach(T),Z.forEach(T),S.forEach(T),u=se(k),ee(d.$$.fragment,k),this.h()},h(){I(t,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1"),I(l,"class","rounded-full drop-shadow-sm"),I(l,"title","Information"),I(s,"class","pointer-events-auto flex items-center gap-2 rounded-full bg-white bg-opacity-30 backdrop-blur-md shadow-lg text-white font-bold stroke-[3]"),ne(s,"flex-direction",e[1]=="vertical"?"column":"row"),ne(s,"padding",e[1]=="vertical"?"1rem 0.5rem":"0.5rem 1rem"),I(a,"class","w-full h-full flex items-center p-4"),ne(a,"flex-direction",e[1]=="vertical"?"row":"column"),ne(a,"justify-content",e[2]=="start"?"start":"end"),I(r,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1 pointer-events-none"),ne(r,"opacity",e[3]?0:1),I(i,"class","w-screen h-screen grid grid-cols-1 grid-rows-1")},m(k,S){P(k,i,S),U(i,t),b&&b.m(t,null),U(i,n),U(i,r),U(r,a),U(a,s),U(s,l),te(c,l,null),U(s,o),v&&v.m(s,null),P(k,u,S),te(d,k,S),m=!0,p||(g=[q(l,"click",e[6]),er(f=ua.call(null,r,e[7]))],p=!0)},p(k,[S]){k[0]?b?(b.p(k,S),S&1&&N(b,1)):(b=Jn(k),b.c(),N(b,1),b.m(t,null)):b&&(ot(),O(b,1,1,()=>{b=null}),ft()),k[4]!==null?v?(v.p(k,S),S&16&&N(v,1)):(v=Qn(k),v.c(),N(v,1),v.m(s,null)):v&&(ot(),O(v,1,1,()=>{v=null}),ft()),S&2&&ne(s,"flex-direction",k[1]=="vertical"?"column":"row"),S&2&&ne(s,"padding",k[1]=="vertical"?"1rem 0.5rem":"0.5rem 1rem"),S&2&&ne(a,"flex-direction",k[1]=="vertical"?"row":"column"),S&4&&ne(a,"justify-content",k[2]=="start"?"start":"end"),f&&tr(f.update)&&S&6&&f.update.call(null,k[7]),S&8&&ne(r,"opacity",k[3]?0:1);const x={};S&512&&(x.$$scope={dirty:S,ctx:k}),!h&&S&8&&(h=!0,x.visible=k[3],wa(()=>h=!1)),d.$set(x)},i(k){m||(N(b),N(c.$$.fragment,k),N(v),N(d.$$.fragment,k),m=!0)},o(k){O(b),O(c.$$.fragment,k),O(v),O(d.$$.fragment,k),m=!1},d(k){k&&(T(i),T(u)),b&&b.d(),ie(c),v&&v.d(),ie(d,k),p=!1,Ti(g)}}}function ic(e,i,t){let n;di(e,Nt,d=>t(5,n=d));let r=null;Ai(()=>{const d=new URL(location.href);t(0,r=d.searchParams.get("saveSlot")??"save")});let a="vertical",s="end",l=!0,c;const o=()=>t(3,l=!0),f=(d,h)=>{t(1,a=d>h?"vertical":"horizontal"),t(2,s=d>h?"end":"start")};function u(d){l=d,t(3,l)}return e.$$.update=()=>{e.$$.dirty&32&&(n!==null?(t(4,c=n.deaths),n.addEventListener("die",()=>{t(4,c=n.deaths)})):t(4,c=null))},[r,a,s,l,c,n,o,f,u]}class lc extends fe{constructor(i){super(),ce(this,i,ic,tc,oe,{})}}export{lc as component};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
