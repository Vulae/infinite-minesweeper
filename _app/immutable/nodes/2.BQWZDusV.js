var Wa=Object.defineProperty;var Ga=(e,i,t)=>i in e?Wa(e,i,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[i]=t;var p=(e,i,t)=>(Ga(e,typeof i!="symbol"?i+"":i,t),t);import{s as le,e as I,a as be,c as M,b as L,f as E,g as ge,p as Z,i as H,h as N,S as q,T as Hn,H as Pn,n as Re,E as mi,U as Ka,o as bi,V as Yn,r as St,l as Ee,k as ja,z as ft,W as Q,w as Xn,x as Vn,X as zt,B as ct,C as ht,D as dt,Y as Wn,Z as Mi,_ as Ae,y as He,t as qa,d as Ja,$ as Zi,q as we,a0 as Qa}from"../chunks/scheduler.CQ95xRcU.js";import{S as he,i as de,a as U,g as Zt,t as B,c as Lt,b as ie,d as ne,m as ae,e as re,f as er}from"../chunks/index.BKYeFALl.js";import{w as tr}from"../chunks/index.Biooxvnx.js";function Rt(e){return(e==null?void 0:e.length)!==void 0?e:Array.from(e)}function ut(e,i){const t={},n={},a={$$scope:1};let r=e.length;for(;r--;){const l=e[r],s=i[r];if(s){for(const c in l)c in s||(n[c]=1);for(const c in s)a[c]||(t[c]=s[c],a[c]=1);e[r]=s}else for(const c in l)a[c]=1}for(const l in n)l in t||(t[l]=void 0);return t}function gi(e){return typeof e=="object"&&e!==null?e:{}}/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */const ir=4,Li=0,Ni=1,nr=2;function Pe(e){let i=e.length;for(;--i>=0;)e[i]=0}const ar=0,Gn=1,rr=2,lr=3,sr=258,wi=29,_t=256,et=_t+1+wi,Oe=30,pi=19,Kn=2*et+1,Se=15,Pt=16,or=7,vi=256,jn=16,qn=17,Jn=18,ai=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),Tt=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),fr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),Qn=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),cr=512,_e=new Array((et+2)*2);Pe(_e);const qe=new Array(Oe*2);Pe(qe);const tt=new Array(cr);Pe(tt);const it=new Array(sr-lr+1);Pe(it);const ki=new Array(wi);Pe(ki);const Ct=new Array(Oe);Pe(Ct);function Yt(e,i,t,n,a){this.static_tree=e,this.extra_bits=i,this.extra_base=t,this.elems=n,this.max_length=a,this.has_stree=e&&e.length}let ea,ta,ia;function Xt(e,i){this.dyn_tree=e,this.max_code=0,this.stat_desc=i}const na=e=>e<256?tt[e]:tt[256+(e>>>7)],nt=(e,i)=>{e.pending_buf[e.pending++]=i&255,e.pending_buf[e.pending++]=i>>>8&255},K=(e,i,t)=>{e.bi_valid>Pt-t?(e.bi_buf|=i<<e.bi_valid&65535,nt(e,e.bi_buf),e.bi_buf=i>>Pt-e.bi_valid,e.bi_valid+=t-Pt):(e.bi_buf|=i<<e.bi_valid&65535,e.bi_valid+=t)},oe=(e,i,t)=>{K(e,t[i*2],t[i*2+1])},aa=(e,i)=>{let t=0;do t|=e&1,e>>>=1,t<<=1;while(--i>0);return t>>>1},hr=e=>{e.bi_valid===16?(nt(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=e.bi_buf&255,e.bi_buf>>=8,e.bi_valid-=8)},dr=(e,i)=>{const t=i.dyn_tree,n=i.max_code,a=i.stat_desc.static_tree,r=i.stat_desc.has_stree,l=i.stat_desc.extra_bits,s=i.stat_desc.extra_base,c=i.stat_desc.max_length;let o,f,u,d,h,m,g=0;for(d=0;d<=Se;d++)e.bl_count[d]=0;for(t[e.heap[e.heap_max]*2+1]=0,o=e.heap_max+1;o<Kn;o++)f=e.heap[o],d=t[t[f*2+1]*2+1]+1,d>c&&(d=c,g++),t[f*2+1]=d,!(f>n)&&(e.bl_count[d]++,h=0,f>=s&&(h=l[f-s]),m=t[f*2],e.opt_len+=m*(d+h),r&&(e.static_len+=m*(a[f*2+1]+h)));if(g!==0){do{for(d=c-1;e.bl_count[d]===0;)d--;e.bl_count[d]--,e.bl_count[d+1]+=2,e.bl_count[c]--,g-=2}while(g>0);for(d=c;d!==0;d--)for(f=e.bl_count[d];f!==0;)u=e.heap[--o],!(u>n)&&(t[u*2+1]!==d&&(e.opt_len+=(d-t[u*2+1])*t[u*2],t[u*2+1]=d),f--)}},ra=(e,i,t)=>{const n=new Array(Se+1);let a=0,r,l;for(r=1;r<=Se;r++)a=a+t[r-1]<<1,n[r]=a;for(l=0;l<=i;l++){let s=e[l*2+1];s!==0&&(e[l*2]=aa(n[s]++,s))}},ur=()=>{let e,i,t,n,a;const r=new Array(Se+1);for(t=0,n=0;n<wi-1;n++)for(ki[n]=t,e=0;e<1<<ai[n];e++)it[t++]=n;for(it[t-1]=n,a=0,n=0;n<16;n++)for(Ct[n]=a,e=0;e<1<<Tt[n];e++)tt[a++]=n;for(a>>=7;n<Oe;n++)for(Ct[n]=a<<7,e=0;e<1<<Tt[n]-7;e++)tt[256+a++]=n;for(i=0;i<=Se;i++)r[i]=0;for(e=0;e<=143;)_e[e*2+1]=8,e++,r[8]++;for(;e<=255;)_e[e*2+1]=9,e++,r[9]++;for(;e<=279;)_e[e*2+1]=7,e++,r[7]++;for(;e<=287;)_e[e*2+1]=8,e++,r[8]++;for(ra(_e,et+1,r),e=0;e<Oe;e++)qe[e*2+1]=5,qe[e*2]=aa(e,5);ea=new Yt(_e,ai,_t+1,et,Se),ta=new Yt(qe,Tt,0,Oe,Se),ia=new Yt(new Array(0),fr,0,pi,or)},la=e=>{let i;for(i=0;i<et;i++)e.dyn_ltree[i*2]=0;for(i=0;i<Oe;i++)e.dyn_dtree[i*2]=0;for(i=0;i<pi;i++)e.bl_tree[i*2]=0;e.dyn_ltree[vi*2]=1,e.opt_len=e.static_len=0,e.sym_next=e.matches=0},sa=e=>{e.bi_valid>8?nt(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0},Ui=(e,i,t,n)=>{const a=i*2,r=t*2;return e[a]<e[r]||e[a]===e[r]&&n[i]<=n[t]},Vt=(e,i,t)=>{const n=e.heap[t];let a=t<<1;for(;a<=e.heap_len&&(a<e.heap_len&&Ui(i,e.heap[a+1],e.heap[a],e.depth)&&a++,!Ui(i,n,e.heap[a],e.depth));)e.heap[t]=e.heap[a],t=a,a<<=1;e.heap[t]=n},Oi=(e,i,t)=>{let n,a,r=0,l,s;if(e.sym_next!==0)do n=e.pending_buf[e.sym_buf+r++]&255,n+=(e.pending_buf[e.sym_buf+r++]&255)<<8,a=e.pending_buf[e.sym_buf+r++],n===0?oe(e,a,i):(l=it[a],oe(e,l+_t+1,i),s=ai[l],s!==0&&(a-=ki[l],K(e,a,s)),n--,l=na(n),oe(e,l,t),s=Tt[l],s!==0&&(n-=Ct[l],K(e,n,s)));while(r<e.sym_next);oe(e,vi,i)},ri=(e,i)=>{const t=i.dyn_tree,n=i.stat_desc.static_tree,a=i.stat_desc.has_stree,r=i.stat_desc.elems;let l,s,c=-1,o;for(e.heap_len=0,e.heap_max=Kn,l=0;l<r;l++)t[l*2]!==0?(e.heap[++e.heap_len]=c=l,e.depth[l]=0):t[l*2+1]=0;for(;e.heap_len<2;)o=e.heap[++e.heap_len]=c<2?++c:0,t[o*2]=1,e.depth[o]=0,e.opt_len--,a&&(e.static_len-=n[o*2+1]);for(i.max_code=c,l=e.heap_len>>1;l>=1;l--)Vt(e,t,l);o=r;do l=e.heap[1],e.heap[1]=e.heap[e.heap_len--],Vt(e,t,1),s=e.heap[1],e.heap[--e.heap_max]=l,e.heap[--e.heap_max]=s,t[o*2]=t[l*2]+t[s*2],e.depth[o]=(e.depth[l]>=e.depth[s]?e.depth[l]:e.depth[s])+1,t[l*2+1]=t[s*2+1]=o,e.heap[1]=o++,Vt(e,t,1);while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],dr(e,i),ra(t,c,e.bl_count)},Bi=(e,i,t)=>{let n,a=-1,r,l=i[0*2+1],s=0,c=7,o=4;for(l===0&&(c=138,o=3),i[(t+1)*2+1]=65535,n=0;n<=t;n++)r=l,l=i[(n+1)*2+1],!(++s<c&&r===l)&&(s<o?e.bl_tree[r*2]+=s:r!==0?(r!==a&&e.bl_tree[r*2]++,e.bl_tree[jn*2]++):s<=10?e.bl_tree[qn*2]++:e.bl_tree[Jn*2]++,s=0,a=r,l===0?(c=138,o=3):r===l?(c=6,o=3):(c=7,o=4))},Fi=(e,i,t)=>{let n,a=-1,r,l=i[0*2+1],s=0,c=7,o=4;for(l===0&&(c=138,o=3),n=0;n<=t;n++)if(r=l,l=i[(n+1)*2+1],!(++s<c&&r===l)){if(s<o)do oe(e,r,e.bl_tree);while(--s!==0);else r!==0?(r!==a&&(oe(e,r,e.bl_tree),s--),oe(e,jn,e.bl_tree),K(e,s-3,2)):s<=10?(oe(e,qn,e.bl_tree),K(e,s-3,3)):(oe(e,Jn,e.bl_tree),K(e,s-11,7));s=0,a=r,l===0?(c=138,o=3):r===l?(c=6,o=3):(c=7,o=4)}},_r=e=>{let i;for(Bi(e,e.dyn_ltree,e.l_desc.max_code),Bi(e,e.dyn_dtree,e.d_desc.max_code),ri(e,e.bl_desc),i=pi-1;i>=3&&e.bl_tree[Qn[i]*2+1]===0;i--);return e.opt_len+=3*(i+1)+5+5+4,i},mr=(e,i,t,n)=>{let a;for(K(e,i-257,5),K(e,t-1,5),K(e,n-4,4),a=0;a<n;a++)K(e,e.bl_tree[Qn[a]*2+1],3);Fi(e,e.dyn_ltree,i-1),Fi(e,e.dyn_dtree,t-1)},br=e=>{let i=4093624447,t;for(t=0;t<=31;t++,i>>>=1)if(i&1&&e.dyn_ltree[t*2]!==0)return Li;if(e.dyn_ltree[9*2]!==0||e.dyn_ltree[10*2]!==0||e.dyn_ltree[13*2]!==0)return Ni;for(t=32;t<_t;t++)if(e.dyn_ltree[t*2]!==0)return Ni;return Li};let $i=!1;const gr=e=>{$i||(ur(),$i=!0),e.l_desc=new Xt(e.dyn_ltree,ea),e.d_desc=new Xt(e.dyn_dtree,ta),e.bl_desc=new Xt(e.bl_tree,ia),e.bi_buf=0,e.bi_valid=0,la(e)},oa=(e,i,t,n)=>{K(e,(ar<<1)+(n?1:0),3),sa(e),nt(e,t),nt(e,~t),t&&e.pending_buf.set(e.window.subarray(i,i+t),e.pending),e.pending+=t},wr=e=>{K(e,Gn<<1,3),oe(e,vi,_e),hr(e)},pr=(e,i,t,n)=>{let a,r,l=0;e.level>0?(e.strm.data_type===nr&&(e.strm.data_type=br(e)),ri(e,e.l_desc),ri(e,e.d_desc),l=_r(e),a=e.opt_len+3+7>>>3,r=e.static_len+3+7>>>3,r<=a&&(a=r)):a=r=t+5,t+4<=a&&i!==-1?oa(e,i,t,n):e.strategy===ir||r===a?(K(e,(Gn<<1)+(n?1:0),3),Oi(e,_e,qe)):(K(e,(rr<<1)+(n?1:0),3),mr(e,e.l_desc.max_code+1,e.d_desc.max_code+1,l+1),Oi(e,e.dyn_ltree,e.dyn_dtree)),la(e),n&&sa(e)},vr=(e,i,t)=>(e.pending_buf[e.sym_buf+e.sym_next++]=i,e.pending_buf[e.sym_buf+e.sym_next++]=i>>8,e.pending_buf[e.sym_buf+e.sym_next++]=t,i===0?e.dyn_ltree[t*2]++:(e.matches++,i--,e.dyn_ltree[(it[t]+_t+1)*2]++,e.dyn_dtree[na(i)*2]++),e.sym_next===e.sym_end);var kr=gr,xr=oa,yr=pr,Er=vr,Ar=wr,Sr={_tr_init:kr,_tr_stored_block:xr,_tr_flush_block:yr,_tr_tally:Er,_tr_align:Ar};const Tr=(e,i,t,n)=>{let a=e&65535|0,r=e>>>16&65535|0,l=0;for(;t!==0;){l=t>2e3?2e3:t,t-=l;do a=a+i[n++]|0,r=r+a|0;while(--l);a%=65521,r%=65521}return a|r<<16|0};var at=Tr;const Dr=()=>{let e,i=[];for(var t=0;t<256;t++){e=t;for(var n=0;n<8;n++)e=e&1?3988292384^e>>>1:e>>>1;i[t]=e}return i},zr=new Uint32Array(Dr()),Rr=(e,i,t,n)=>{const a=zr,r=n+t;e^=-1;for(let l=n;l<r;l++)e=e>>>8^a[(e^i[l])&255];return e^-1};var P=Rr,Ce={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},Ze={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:Cr,_tr_stored_block:li,_tr_flush_block:Ir,_tr_tally:ke,_tr_align:Mr}=Sr,{Z_NO_FLUSH:xe,Z_PARTIAL_FLUSH:Zr,Z_FULL_FLUSH:Lr,Z_FINISH:ee,Z_BLOCK:Hi,Z_OK:Y,Z_STREAM_END:Pi,Z_STREAM_ERROR:fe,Z_DATA_ERROR:Nr,Z_BUF_ERROR:Wt,Z_DEFAULT_COMPRESSION:Ur,Z_FILTERED:Or,Z_HUFFMAN_ONLY:vt,Z_RLE:Br,Z_FIXED:Fr,Z_DEFAULT_STRATEGY:$r,Z_UNKNOWN:Hr,Z_DEFLATED:Nt}=Ze,Pr=9,Yr=15,Xr=8,Vr=29,Wr=256,si=Wr+1+Vr,Gr=30,Kr=19,jr=2*si+1,qr=15,z=3,ve=258,ce=ve+z+1,Jr=32,Fe=42,xi=57,oi=69,fi=73,ci=91,hi=103,Te=113,Ge=666,G=1,Ye=2,Ie=3,Xe=4,Qr=3,De=(e,i)=>(e.msg=Ce[i],i),Yi=e=>e*2-(e>4?9:0),pe=e=>{let i=e.length;for(;--i>=0;)e[i]=0},el=e=>{let i,t,n,a=e.w_size;i=e.hash_size,n=i;do t=e.head[--n],e.head[n]=t>=a?t-a:0;while(--i);i=a,n=i;do t=e.prev[--n],e.prev[n]=t>=a?t-a:0;while(--i)};let tl=(e,i,t)=>(i<<e.hash_shift^t)&e.hash_mask,ye=tl;const j=e=>{const i=e.state;let t=i.pending;t>e.avail_out&&(t=e.avail_out),t!==0&&(e.output.set(i.pending_buf.subarray(i.pending_out,i.pending_out+t),e.next_out),e.next_out+=t,i.pending_out+=t,e.total_out+=t,e.avail_out-=t,i.pending-=t,i.pending===0&&(i.pending_out=0))},J=(e,i)=>{Ir(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,i),e.block_start=e.strstart,j(e.strm)},C=(e,i)=>{e.pending_buf[e.pending++]=i},We=(e,i)=>{e.pending_buf[e.pending++]=i>>>8&255,e.pending_buf[e.pending++]=i&255},di=(e,i,t,n)=>{let a=e.avail_in;return a>n&&(a=n),a===0?0:(e.avail_in-=a,i.set(e.input.subarray(e.next_in,e.next_in+a),t),e.state.wrap===1?e.adler=at(e.adler,i,a,t):e.state.wrap===2&&(e.adler=P(e.adler,i,a,t)),e.next_in+=a,e.total_in+=a,a)},fa=(e,i)=>{let t=e.max_chain_length,n=e.strstart,a,r,l=e.prev_length,s=e.nice_match;const c=e.strstart>e.w_size-ce?e.strstart-(e.w_size-ce):0,o=e.window,f=e.w_mask,u=e.prev,d=e.strstart+ve;let h=o[n+l-1],m=o[n+l];e.prev_length>=e.good_match&&(t>>=2),s>e.lookahead&&(s=e.lookahead);do if(a=i,!(o[a+l]!==m||o[a+l-1]!==h||o[a]!==o[n]||o[++a]!==o[n+1])){n+=2,a++;do;while(o[++n]===o[++a]&&o[++n]===o[++a]&&o[++n]===o[++a]&&o[++n]===o[++a]&&o[++n]===o[++a]&&o[++n]===o[++a]&&o[++n]===o[++a]&&o[++n]===o[++a]&&n<d);if(r=ve-(d-n),n=d-ve,r>l){if(e.match_start=i,l=r,r>=s)break;h=o[n+l-1],m=o[n+l]}}while((i=u[i&f])>c&&--t!==0);return l<=e.lookahead?l:e.lookahead},$e=e=>{const i=e.w_size;let t,n,a;do{if(n=e.window_size-e.lookahead-e.strstart,e.strstart>=i+(i-ce)&&(e.window.set(e.window.subarray(i,i+i-n),0),e.match_start-=i,e.strstart-=i,e.block_start-=i,e.insert>e.strstart&&(e.insert=e.strstart),el(e),n+=i),e.strm.avail_in===0)break;if(t=di(e.strm,e.window,e.strstart+e.lookahead,n),e.lookahead+=t,e.lookahead+e.insert>=z)for(a=e.strstart-e.insert,e.ins_h=e.window[a],e.ins_h=ye(e,e.ins_h,e.window[a+1]);e.insert&&(e.ins_h=ye(e,e.ins_h,e.window[a+z-1]),e.prev[a&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=a,a++,e.insert--,!(e.lookahead+e.insert<z)););}while(e.lookahead<ce&&e.strm.avail_in!==0)},ca=(e,i)=>{let t=e.pending_buf_size-5>e.w_size?e.w_size:e.pending_buf_size-5,n,a,r,l=0,s=e.strm.avail_in;do{if(n=65535,r=e.bi_valid+42>>3,e.strm.avail_out<r||(r=e.strm.avail_out-r,a=e.strstart-e.block_start,n>a+e.strm.avail_in&&(n=a+e.strm.avail_in),n>r&&(n=r),n<t&&(n===0&&i!==ee||i===xe||n!==a+e.strm.avail_in)))break;l=i===ee&&n===a+e.strm.avail_in?1:0,li(e,0,0,l),e.pending_buf[e.pending-4]=n,e.pending_buf[e.pending-3]=n>>8,e.pending_buf[e.pending-2]=~n,e.pending_buf[e.pending-1]=~n>>8,j(e.strm),a&&(a>n&&(a=n),e.strm.output.set(e.window.subarray(e.block_start,e.block_start+a),e.strm.next_out),e.strm.next_out+=a,e.strm.avail_out-=a,e.strm.total_out+=a,e.block_start+=a,n-=a),n&&(di(e.strm,e.strm.output,e.strm.next_out,n),e.strm.next_out+=n,e.strm.avail_out-=n,e.strm.total_out+=n)}while(l===0);return s-=e.strm.avail_in,s&&(s>=e.w_size?(e.matches=2,e.window.set(e.strm.input.subarray(e.strm.next_in-e.w_size,e.strm.next_in),0),e.strstart=e.w_size,e.insert=e.strstart):(e.window_size-e.strstart<=s&&(e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,e.insert>e.strstart&&(e.insert=e.strstart)),e.window.set(e.strm.input.subarray(e.strm.next_in-s,e.strm.next_in),e.strstart),e.strstart+=s,e.insert+=s>e.w_size-e.insert?e.w_size-e.insert:s),e.block_start=e.strstart),e.high_water<e.strstart&&(e.high_water=e.strstart),l?Xe:i!==xe&&i!==ee&&e.strm.avail_in===0&&e.strstart===e.block_start?Ye:(r=e.window_size-e.strstart,e.strm.avail_in>r&&e.block_start>=e.w_size&&(e.block_start-=e.w_size,e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,r+=e.w_size,e.insert>e.strstart&&(e.insert=e.strstart)),r>e.strm.avail_in&&(r=e.strm.avail_in),r&&(di(e.strm,e.window,e.strstart,r),e.strstart+=r,e.insert+=r>e.w_size-e.insert?e.w_size-e.insert:r),e.high_water<e.strstart&&(e.high_water=e.strstart),r=e.bi_valid+42>>3,r=e.pending_buf_size-r>65535?65535:e.pending_buf_size-r,t=r>e.w_size?e.w_size:r,a=e.strstart-e.block_start,(a>=t||(a||i===ee)&&i!==xe&&e.strm.avail_in===0&&a<=r)&&(n=a>r?r:a,l=i===ee&&e.strm.avail_in===0&&n===a?1:0,li(e,e.block_start,n,l),e.block_start+=n,j(e.strm)),l?Ie:G)},Gt=(e,i)=>{let t,n;for(;;){if(e.lookahead<ce){if($e(e),e.lookahead<ce&&i===xe)return G;if(e.lookahead===0)break}if(t=0,e.lookahead>=z&&(e.ins_h=ye(e,e.ins_h,e.window[e.strstart+z-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),t!==0&&e.strstart-t<=e.w_size-ce&&(e.match_length=fa(e,t)),e.match_length>=z)if(n=ke(e,e.strstart-e.match_start,e.match_length-z),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=z){e.match_length--;do e.strstart++,e.ins_h=ye(e,e.ins_h,e.window[e.strstart+z-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart;while(--e.match_length!==0);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=ye(e,e.ins_h,e.window[e.strstart+1]);else n=ke(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(J(e,!1),e.strm.avail_out===0))return G}return e.insert=e.strstart<z-1?e.strstart:z-1,i===ee?(J(e,!0),e.strm.avail_out===0?Ie:Xe):e.sym_next&&(J(e,!1),e.strm.avail_out===0)?G:Ye},Ne=(e,i)=>{let t,n,a;for(;;){if(e.lookahead<ce){if($e(e),e.lookahead<ce&&i===xe)return G;if(e.lookahead===0)break}if(t=0,e.lookahead>=z&&(e.ins_h=ye(e,e.ins_h,e.window[e.strstart+z-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=z-1,t!==0&&e.prev_length<e.max_lazy_match&&e.strstart-t<=e.w_size-ce&&(e.match_length=fa(e,t),e.match_length<=5&&(e.strategy===Or||e.match_length===z&&e.strstart-e.match_start>4096)&&(e.match_length=z-1)),e.prev_length>=z&&e.match_length<=e.prev_length){a=e.strstart+e.lookahead-z,n=ke(e,e.strstart-1-e.prev_match,e.prev_length-z),e.lookahead-=e.prev_length-1,e.prev_length-=2;do++e.strstart<=a&&(e.ins_h=ye(e,e.ins_h,e.window[e.strstart+z-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart);while(--e.prev_length!==0);if(e.match_available=0,e.match_length=z-1,e.strstart++,n&&(J(e,!1),e.strm.avail_out===0))return G}else if(e.match_available){if(n=ke(e,0,e.window[e.strstart-1]),n&&J(e,!1),e.strstart++,e.lookahead--,e.strm.avail_out===0)return G}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=ke(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<z-1?e.strstart:z-1,i===ee?(J(e,!0),e.strm.avail_out===0?Ie:Xe):e.sym_next&&(J(e,!1),e.strm.avail_out===0)?G:Ye},il=(e,i)=>{let t,n,a,r;const l=e.window;for(;;){if(e.lookahead<=ve){if($e(e),e.lookahead<=ve&&i===xe)return G;if(e.lookahead===0)break}if(e.match_length=0,e.lookahead>=z&&e.strstart>0&&(a=e.strstart-1,n=l[a],n===l[++a]&&n===l[++a]&&n===l[++a])){r=e.strstart+ve;do;while(n===l[++a]&&n===l[++a]&&n===l[++a]&&n===l[++a]&&n===l[++a]&&n===l[++a]&&n===l[++a]&&n===l[++a]&&a<r);e.match_length=ve-(r-a),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=z?(t=ke(e,1,e.match_length-z),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(t=ke(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),t&&(J(e,!1),e.strm.avail_out===0))return G}return e.insert=0,i===ee?(J(e,!0),e.strm.avail_out===0?Ie:Xe):e.sym_next&&(J(e,!1),e.strm.avail_out===0)?G:Ye},nl=(e,i)=>{let t;for(;;){if(e.lookahead===0&&($e(e),e.lookahead===0)){if(i===xe)return G;break}if(e.match_length=0,t=ke(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,t&&(J(e,!1),e.strm.avail_out===0))return G}return e.insert=0,i===ee?(J(e,!0),e.strm.avail_out===0?Ie:Xe):e.sym_next&&(J(e,!1),e.strm.avail_out===0)?G:Ye};function se(e,i,t,n,a){this.good_length=e,this.max_lazy=i,this.nice_length=t,this.max_chain=n,this.func=a}const Ke=[new se(0,0,0,0,ca),new se(4,4,8,4,Gt),new se(4,5,16,8,Gt),new se(4,6,32,32,Gt),new se(4,4,16,16,Ne),new se(8,16,32,32,Ne),new se(8,16,128,128,Ne),new se(8,32,128,256,Ne),new se(32,128,258,1024,Ne),new se(32,258,258,4096,Ne)],al=e=>{e.window_size=2*e.w_size,pe(e.head),e.max_lazy_match=Ke[e.level].max_lazy,e.good_match=Ke[e.level].good_length,e.nice_match=Ke[e.level].nice_length,e.max_chain_length=Ke[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=z-1,e.match_available=0,e.ins_h=0};function rl(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=Nt,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(jr*2),this.dyn_dtree=new Uint16Array((2*Gr+1)*2),this.bl_tree=new Uint16Array((2*Kr+1)*2),pe(this.dyn_ltree),pe(this.dyn_dtree),pe(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(qr+1),this.heap=new Uint16Array(2*si+1),pe(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(2*si+1),pe(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const mt=e=>{if(!e)return 1;const i=e.state;return!i||i.strm!==e||i.status!==Fe&&i.status!==xi&&i.status!==oi&&i.status!==fi&&i.status!==ci&&i.status!==hi&&i.status!==Te&&i.status!==Ge?1:0},ha=e=>{if(mt(e))return De(e,fe);e.total_in=e.total_out=0,e.data_type=Hr;const i=e.state;return i.pending=0,i.pending_out=0,i.wrap<0&&(i.wrap=-i.wrap),i.status=i.wrap===2?xi:i.wrap?Fe:Te,e.adler=i.wrap===2?0:1,i.last_flush=-2,Cr(i),Y},da=e=>{const i=ha(e);return i===Y&&al(e.state),i},ll=(e,i)=>mt(e)||e.state.wrap!==2?fe:(e.state.gzhead=i,Y),ua=(e,i,t,n,a,r)=>{if(!e)return fe;let l=1;if(i===Ur&&(i=6),n<0?(l=0,n=-n):n>15&&(l=2,n-=16),a<1||a>Pr||t!==Nt||n<8||n>15||i<0||i>9||r<0||r>Fr||n===8&&l!==1)return De(e,fe);n===8&&(n=9);const s=new rl;return e.state=s,s.strm=e,s.status=Fe,s.wrap=l,s.gzhead=null,s.w_bits=n,s.w_size=1<<s.w_bits,s.w_mask=s.w_size-1,s.hash_bits=a+7,s.hash_size=1<<s.hash_bits,s.hash_mask=s.hash_size-1,s.hash_shift=~~((s.hash_bits+z-1)/z),s.window=new Uint8Array(s.w_size*2),s.head=new Uint16Array(s.hash_size),s.prev=new Uint16Array(s.w_size),s.lit_bufsize=1<<a+6,s.pending_buf_size=s.lit_bufsize*4,s.pending_buf=new Uint8Array(s.pending_buf_size),s.sym_buf=s.lit_bufsize,s.sym_end=(s.lit_bufsize-1)*3,s.level=i,s.strategy=r,s.method=t,da(e)},sl=(e,i)=>ua(e,i,Nt,Yr,Xr,$r),ol=(e,i)=>{if(mt(e)||i>Hi||i<0)return e?De(e,fe):fe;const t=e.state;if(!e.output||e.avail_in!==0&&!e.input||t.status===Ge&&i!==ee)return De(e,e.avail_out===0?Wt:fe);const n=t.last_flush;if(t.last_flush=i,t.pending!==0){if(j(e),e.avail_out===0)return t.last_flush=-1,Y}else if(e.avail_in===0&&Yi(i)<=Yi(n)&&i!==ee)return De(e,Wt);if(t.status===Ge&&e.avail_in!==0)return De(e,Wt);if(t.status===Fe&&t.wrap===0&&(t.status=Te),t.status===Fe){let a=Nt+(t.w_bits-8<<4)<<8,r=-1;if(t.strategy>=vt||t.level<2?r=0:t.level<6?r=1:t.level===6?r=2:r=3,a|=r<<6,t.strstart!==0&&(a|=Jr),a+=31-a%31,We(t,a),t.strstart!==0&&(We(t,e.adler>>>16),We(t,e.adler&65535)),e.adler=1,t.status=Te,j(e),t.pending!==0)return t.last_flush=-1,Y}if(t.status===xi){if(e.adler=0,C(t,31),C(t,139),C(t,8),t.gzhead)C(t,(t.gzhead.text?1:0)+(t.gzhead.hcrc?2:0)+(t.gzhead.extra?4:0)+(t.gzhead.name?8:0)+(t.gzhead.comment?16:0)),C(t,t.gzhead.time&255),C(t,t.gzhead.time>>8&255),C(t,t.gzhead.time>>16&255),C(t,t.gzhead.time>>24&255),C(t,t.level===9?2:t.strategy>=vt||t.level<2?4:0),C(t,t.gzhead.os&255),t.gzhead.extra&&t.gzhead.extra.length&&(C(t,t.gzhead.extra.length&255),C(t,t.gzhead.extra.length>>8&255)),t.gzhead.hcrc&&(e.adler=P(e.adler,t.pending_buf,t.pending,0)),t.gzindex=0,t.status=oi;else if(C(t,0),C(t,0),C(t,0),C(t,0),C(t,0),C(t,t.level===9?2:t.strategy>=vt||t.level<2?4:0),C(t,Qr),t.status=Te,j(e),t.pending!==0)return t.last_flush=-1,Y}if(t.status===oi){if(t.gzhead.extra){let a=t.pending,r=(t.gzhead.extra.length&65535)-t.gzindex;for(;t.pending+r>t.pending_buf_size;){let s=t.pending_buf_size-t.pending;if(t.pending_buf.set(t.gzhead.extra.subarray(t.gzindex,t.gzindex+s),t.pending),t.pending=t.pending_buf_size,t.gzhead.hcrc&&t.pending>a&&(e.adler=P(e.adler,t.pending_buf,t.pending-a,a)),t.gzindex+=s,j(e),t.pending!==0)return t.last_flush=-1,Y;a=0,r-=s}let l=new Uint8Array(t.gzhead.extra);t.pending_buf.set(l.subarray(t.gzindex,t.gzindex+r),t.pending),t.pending+=r,t.gzhead.hcrc&&t.pending>a&&(e.adler=P(e.adler,t.pending_buf,t.pending-a,a)),t.gzindex=0}t.status=fi}if(t.status===fi){if(t.gzhead.name){let a=t.pending,r;do{if(t.pending===t.pending_buf_size){if(t.gzhead.hcrc&&t.pending>a&&(e.adler=P(e.adler,t.pending_buf,t.pending-a,a)),j(e),t.pending!==0)return t.last_flush=-1,Y;a=0}t.gzindex<t.gzhead.name.length?r=t.gzhead.name.charCodeAt(t.gzindex++)&255:r=0,C(t,r)}while(r!==0);t.gzhead.hcrc&&t.pending>a&&(e.adler=P(e.adler,t.pending_buf,t.pending-a,a)),t.gzindex=0}t.status=ci}if(t.status===ci){if(t.gzhead.comment){let a=t.pending,r;do{if(t.pending===t.pending_buf_size){if(t.gzhead.hcrc&&t.pending>a&&(e.adler=P(e.adler,t.pending_buf,t.pending-a,a)),j(e),t.pending!==0)return t.last_flush=-1,Y;a=0}t.gzindex<t.gzhead.comment.length?r=t.gzhead.comment.charCodeAt(t.gzindex++)&255:r=0,C(t,r)}while(r!==0);t.gzhead.hcrc&&t.pending>a&&(e.adler=P(e.adler,t.pending_buf,t.pending-a,a))}t.status=hi}if(t.status===hi){if(t.gzhead.hcrc){if(t.pending+2>t.pending_buf_size&&(j(e),t.pending!==0))return t.last_flush=-1,Y;C(t,e.adler&255),C(t,e.adler>>8&255),e.adler=0}if(t.status=Te,j(e),t.pending!==0)return t.last_flush=-1,Y}if(e.avail_in!==0||t.lookahead!==0||i!==xe&&t.status!==Ge){let a=t.level===0?ca(t,i):t.strategy===vt?nl(t,i):t.strategy===Br?il(t,i):Ke[t.level].func(t,i);if((a===Ie||a===Xe)&&(t.status=Ge),a===G||a===Ie)return e.avail_out===0&&(t.last_flush=-1),Y;if(a===Ye&&(i===Zr?Mr(t):i!==Hi&&(li(t,0,0,!1),i===Lr&&(pe(t.head),t.lookahead===0&&(t.strstart=0,t.block_start=0,t.insert=0))),j(e),e.avail_out===0))return t.last_flush=-1,Y}return i!==ee?Y:t.wrap<=0?Pi:(t.wrap===2?(C(t,e.adler&255),C(t,e.adler>>8&255),C(t,e.adler>>16&255),C(t,e.adler>>24&255),C(t,e.total_in&255),C(t,e.total_in>>8&255),C(t,e.total_in>>16&255),C(t,e.total_in>>24&255)):(We(t,e.adler>>>16),We(t,e.adler&65535)),j(e),t.wrap>0&&(t.wrap=-t.wrap),t.pending!==0?Y:Pi)},fl=e=>{if(mt(e))return fe;const i=e.state.status;return e.state=null,i===Te?De(e,Nr):Y},cl=(e,i)=>{let t=i.length;if(mt(e))return fe;const n=e.state,a=n.wrap;if(a===2||a===1&&n.status!==Fe||n.lookahead)return fe;if(a===1&&(e.adler=at(e.adler,i,t,0)),n.wrap=0,t>=n.w_size){a===0&&(pe(n.head),n.strstart=0,n.block_start=0,n.insert=0);let c=new Uint8Array(n.w_size);c.set(i.subarray(t-n.w_size,t),0),i=c,t=n.w_size}const r=e.avail_in,l=e.next_in,s=e.input;for(e.avail_in=t,e.next_in=0,e.input=i,$e(n);n.lookahead>=z;){let c=n.strstart,o=n.lookahead-(z-1);do n.ins_h=ye(n,n.ins_h,n.window[c+z-1]),n.prev[c&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=c,c++;while(--o);n.strstart=c,n.lookahead=z-1,$e(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=z-1,n.match_available=0,e.next_in=l,e.input=s,e.avail_in=r,n.wrap=a,Y};var hl=sl,dl=ua,ul=da,_l=ha,ml=ll,bl=ol,gl=fl,wl=cl,pl="pako deflate (from Nodeca project)",Je={deflateInit:hl,deflateInit2:dl,deflateReset:ul,deflateResetKeep:_l,deflateSetHeader:ml,deflate:bl,deflateEnd:gl,deflateSetDictionary:wl,deflateInfo:pl};const vl=(e,i)=>Object.prototype.hasOwnProperty.call(e,i);var kl=function(e){const i=Array.prototype.slice.call(arguments,1);for(;i.length;){const t=i.shift();if(t){if(typeof t!="object")throw new TypeError(t+"must be non-object");for(const n in t)vl(t,n)&&(e[n]=t[n])}}return e},xl=e=>{let i=0;for(let n=0,a=e.length;n<a;n++)i+=e[n].length;const t=new Uint8Array(i);for(let n=0,a=0,r=e.length;n<r;n++){let l=e[n];t.set(l,a),a+=l.length}return t},Ut={assign:kl,flattenChunks:xl};let _a=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{_a=!1}const rt=new Uint8Array(256);for(let e=0;e<256;e++)rt[e]=e>=252?6:e>=248?5:e>=240?4:e>=224?3:e>=192?2:1;rt[254]=rt[254]=1;var yl=e=>{if(typeof TextEncoder=="function"&&TextEncoder.prototype.encode)return new TextEncoder().encode(e);let i,t,n,a,r,l=e.length,s=0;for(a=0;a<l;a++)t=e.charCodeAt(a),(t&64512)===55296&&a+1<l&&(n=e.charCodeAt(a+1),(n&64512)===56320&&(t=65536+(t-55296<<10)+(n-56320),a++)),s+=t<128?1:t<2048?2:t<65536?3:4;for(i=new Uint8Array(s),r=0,a=0;r<s;a++)t=e.charCodeAt(a),(t&64512)===55296&&a+1<l&&(n=e.charCodeAt(a+1),(n&64512)===56320&&(t=65536+(t-55296<<10)+(n-56320),a++)),t<128?i[r++]=t:t<2048?(i[r++]=192|t>>>6,i[r++]=128|t&63):t<65536?(i[r++]=224|t>>>12,i[r++]=128|t>>>6&63,i[r++]=128|t&63):(i[r++]=240|t>>>18,i[r++]=128|t>>>12&63,i[r++]=128|t>>>6&63,i[r++]=128|t&63);return i};const El=(e,i)=>{if(i<65534&&e.subarray&&_a)return String.fromCharCode.apply(null,e.length===i?e:e.subarray(0,i));let t="";for(let n=0;n<i;n++)t+=String.fromCharCode(e[n]);return t};var Al=(e,i)=>{const t=i||e.length;if(typeof TextDecoder=="function"&&TextDecoder.prototype.decode)return new TextDecoder().decode(e.subarray(0,i));let n,a;const r=new Array(t*2);for(a=0,n=0;n<t;){let l=e[n++];if(l<128){r[a++]=l;continue}let s=rt[l];if(s>4){r[a++]=65533,n+=s-1;continue}for(l&=s===2?31:s===3?15:7;s>1&&n<t;)l=l<<6|e[n++]&63,s--;if(s>1){r[a++]=65533;continue}l<65536?r[a++]=l:(l-=65536,r[a++]=55296|l>>10&1023,r[a++]=56320|l&1023)}return El(r,a)},Sl=(e,i)=>{i=i||e.length,i>e.length&&(i=e.length);let t=i-1;for(;t>=0&&(e[t]&192)===128;)t--;return t<0||t===0?i:t+rt[e[t]]>i?t:i},lt={string2buf:yl,buf2string:Al,utf8border:Sl};function Tl(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}var ma=Tl;const ba=Object.prototype.toString,{Z_NO_FLUSH:Dl,Z_SYNC_FLUSH:zl,Z_FULL_FLUSH:Rl,Z_FINISH:Cl,Z_OK:It,Z_STREAM_END:Il,Z_DEFAULT_COMPRESSION:Ml,Z_DEFAULT_STRATEGY:Zl,Z_DEFLATED:Ll}=Ze;function bt(e){this.options=Ut.assign({level:Ml,method:Ll,chunkSize:16384,windowBits:15,memLevel:8,strategy:Zl},e||{});let i=this.options;i.raw&&i.windowBits>0?i.windowBits=-i.windowBits:i.gzip&&i.windowBits>0&&i.windowBits<16&&(i.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new ma,this.strm.avail_out=0;let t=Je.deflateInit2(this.strm,i.level,i.method,i.windowBits,i.memLevel,i.strategy);if(t!==It)throw new Error(Ce[t]);if(i.header&&Je.deflateSetHeader(this.strm,i.header),i.dictionary){let n;if(typeof i.dictionary=="string"?n=lt.string2buf(i.dictionary):ba.call(i.dictionary)==="[object ArrayBuffer]"?n=new Uint8Array(i.dictionary):n=i.dictionary,t=Je.deflateSetDictionary(this.strm,n),t!==It)throw new Error(Ce[t]);this._dict_set=!0}}bt.prototype.push=function(e,i){const t=this.strm,n=this.options.chunkSize;let a,r;if(this.ended)return!1;for(i===~~i?r=i:r=i===!0?Cl:Dl,typeof e=="string"?t.input=lt.string2buf(e):ba.call(e)==="[object ArrayBuffer]"?t.input=new Uint8Array(e):t.input=e,t.next_in=0,t.avail_in=t.input.length;;){if(t.avail_out===0&&(t.output=new Uint8Array(n),t.next_out=0,t.avail_out=n),(r===zl||r===Rl)&&t.avail_out<=6){this.onData(t.output.subarray(0,t.next_out)),t.avail_out=0;continue}if(a=Je.deflate(t,r),a===Il)return t.next_out>0&&this.onData(t.output.subarray(0,t.next_out)),a=Je.deflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===It;if(t.avail_out===0){this.onData(t.output);continue}if(r>0&&t.next_out>0){this.onData(t.output.subarray(0,t.next_out)),t.avail_out=0;continue}if(t.avail_in===0)break}return!0};bt.prototype.onData=function(e){this.chunks.push(e)};bt.prototype.onEnd=function(e){e===It&&(this.result=Ut.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};function yi(e,i){const t=new bt(i);if(t.push(e,!0),t.err)throw t.msg||Ce[t.err];return t.result}function Nl(e,i){return i=i||{},i.raw=!0,yi(e,i)}function Ul(e,i){return i=i||{},i.gzip=!0,yi(e,i)}var Ol=bt,Bl=yi,Fl=Nl,$l=Ul,Hl=Ze,Pl={Deflate:Ol,deflate:Bl,deflateRaw:Fl,gzip:$l,constants:Hl};const kt=16209,Yl=16191;var Xl=function(i,t){let n,a,r,l,s,c,o,f,u,d,h,m,g,_,v,x,w,b,S,F,y,R,T,A;const D=i.state;n=i.next_in,T=i.input,a=n+(i.avail_in-5),r=i.next_out,A=i.output,l=r-(t-i.avail_out),s=r+(i.avail_out-257),c=D.dmax,o=D.wsize,f=D.whave,u=D.wnext,d=D.window,h=D.hold,m=D.bits,g=D.lencode,_=D.distcode,v=(1<<D.lenbits)-1,x=(1<<D.distbits)-1;e:do{m<15&&(h+=T[n++]<<m,m+=8,h+=T[n++]<<m,m+=8),w=g[h&v];t:for(;;){if(b=w>>>24,h>>>=b,m-=b,b=w>>>16&255,b===0)A[r++]=w&65535;else if(b&16){S=w&65535,b&=15,b&&(m<b&&(h+=T[n++]<<m,m+=8),S+=h&(1<<b)-1,h>>>=b,m-=b),m<15&&(h+=T[n++]<<m,m+=8,h+=T[n++]<<m,m+=8),w=_[h&x];i:for(;;){if(b=w>>>24,h>>>=b,m-=b,b=w>>>16&255,b&16){if(F=w&65535,b&=15,m<b&&(h+=T[n++]<<m,m+=8,m<b&&(h+=T[n++]<<m,m+=8)),F+=h&(1<<b)-1,F>c){i.msg="invalid distance too far back",D.mode=kt;break e}if(h>>>=b,m-=b,b=r-l,F>b){if(b=F-b,b>f&&D.sane){i.msg="invalid distance too far back",D.mode=kt;break e}if(y=0,R=d,u===0){if(y+=o-b,b<S){S-=b;do A[r++]=d[y++];while(--b);y=r-F,R=A}}else if(u<b){if(y+=o+u-b,b-=u,b<S){S-=b;do A[r++]=d[y++];while(--b);if(y=0,u<S){b=u,S-=b;do A[r++]=d[y++];while(--b);y=r-F,R=A}}}else if(y+=u-b,b<S){S-=b;do A[r++]=d[y++];while(--b);y=r-F,R=A}for(;S>2;)A[r++]=R[y++],A[r++]=R[y++],A[r++]=R[y++],S-=3;S&&(A[r++]=R[y++],S>1&&(A[r++]=R[y++]))}else{y=r-F;do A[r++]=A[y++],A[r++]=A[y++],A[r++]=A[y++],S-=3;while(S>2);S&&(A[r++]=A[y++],S>1&&(A[r++]=A[y++]))}}else if(b&64){i.msg="invalid distance code",D.mode=kt;break e}else{w=_[(w&65535)+(h&(1<<b)-1)];continue i}break}}else if(b&64)if(b&32){D.mode=Yl;break e}else{i.msg="invalid literal/length code",D.mode=kt;break e}else{w=g[(w&65535)+(h&(1<<b)-1)];continue t}break}}while(n<a&&r<s);S=m>>3,n-=S,m-=S<<3,h&=(1<<m)-1,i.next_in=n,i.next_out=r,i.avail_in=n<a?5+(a-n):5-(n-a),i.avail_out=r<s?257+(s-r):257-(r-s),D.hold=h,D.bits=m};const Ue=15,Xi=852,Vi=592,Wi=0,Kt=1,Gi=2,Vl=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),Wl=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),Gl=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),Kl=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),jl=(e,i,t,n,a,r,l,s)=>{const c=s.bits;let o=0,f=0,u=0,d=0,h=0,m=0,g=0,_=0,v=0,x=0,w,b,S,F,y,R=null,T;const A=new Uint16Array(Ue+1),D=new Uint16Array(Ue+1);let k=null,W,wt,pt;for(o=0;o<=Ue;o++)A[o]=0;for(f=0;f<n;f++)A[i[t+f]]++;for(h=c,d=Ue;d>=1&&A[d]===0;d--);if(h>d&&(h=d),d===0)return a[r++]=1<<24|64<<16|0,a[r++]=1<<24|64<<16|0,s.bits=1,0;for(u=1;u<d&&A[u]===0;u++);for(h<u&&(h=u),_=1,o=1;o<=Ue;o++)if(_<<=1,_-=A[o],_<0)return-1;if(_>0&&(e===Wi||d!==1))return-1;for(D[1]=0,o=1;o<Ue;o++)D[o+1]=D[o]+A[o];for(f=0;f<n;f++)i[t+f]!==0&&(l[D[i[t+f]]++]=f);if(e===Wi?(R=k=l,T=20):e===Kt?(R=Vl,k=Wl,T=257):(R=Gl,k=Kl,T=0),x=0,f=0,o=u,y=r,m=h,g=0,S=-1,v=1<<h,F=v-1,e===Kt&&v>Xi||e===Gi&&v>Vi)return 1;for(;;){W=o-g,l[f]+1<T?(wt=0,pt=l[f]):l[f]>=T?(wt=k[l[f]-T],pt=R[l[f]-T]):(wt=96,pt=0),w=1<<o-g,b=1<<m,u=b;do b-=w,a[y+(x>>g)+b]=W<<24|wt<<16|pt|0;while(b!==0);for(w=1<<o-1;x&w;)w>>=1;if(w!==0?(x&=w-1,x+=w):x=0,f++,--A[o]===0){if(o===d)break;o=i[t+l[f]]}if(o>h&&(x&F)!==S){for(g===0&&(g=h),y+=u,m=o-g,_=1<<m;m+g<d&&(_-=A[m+g],!(_<=0));)m++,_<<=1;if(v+=1<<m,e===Kt&&v>Xi||e===Gi&&v>Vi)return 1;S=x&F,a[S]=h<<24|m<<16|y-r|0}}return x!==0&&(a[y+x]=o-g<<24|64<<16|0),s.bits=h,0};var Qe=jl;const ql=0,ga=1,wa=2,{Z_FINISH:Ki,Z_BLOCK:Jl,Z_TREES:xt,Z_OK:Me,Z_STREAM_END:Ql,Z_NEED_DICT:es,Z_STREAM_ERROR:te,Z_DATA_ERROR:pa,Z_MEM_ERROR:va,Z_BUF_ERROR:ts,Z_DEFLATED:ji}=Ze,Ot=16180,qi=16181,Ji=16182,Qi=16183,en=16184,tn=16185,nn=16186,an=16187,rn=16188,ln=16189,Mt=16190,ue=16191,jt=16192,sn=16193,qt=16194,on=16195,fn=16196,cn=16197,hn=16198,yt=16199,Et=16200,dn=16201,un=16202,_n=16203,mn=16204,bn=16205,Jt=16206,gn=16207,wn=16208,O=16209,ka=16210,xa=16211,is=852,ns=592,as=15,rs=as,pn=e=>(e>>>24&255)+(e>>>8&65280)+((e&65280)<<8)+((e&255)<<24);function ls(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Le=e=>{if(!e)return 1;const i=e.state;return!i||i.strm!==e||i.mode<Ot||i.mode>xa?1:0},ya=e=>{if(Le(e))return te;const i=e.state;return e.total_in=e.total_out=i.total=0,e.msg="",i.wrap&&(e.adler=i.wrap&1),i.mode=Ot,i.last=0,i.havedict=0,i.flags=-1,i.dmax=32768,i.head=null,i.hold=0,i.bits=0,i.lencode=i.lendyn=new Int32Array(is),i.distcode=i.distdyn=new Int32Array(ns),i.sane=1,i.back=-1,Me},Ea=e=>{if(Le(e))return te;const i=e.state;return i.wsize=0,i.whave=0,i.wnext=0,ya(e)},Aa=(e,i)=>{let t;if(Le(e))return te;const n=e.state;return i<0?(t=0,i=-i):(t=(i>>4)+5,i<48&&(i&=15)),i&&(i<8||i>15)?te:(n.window!==null&&n.wbits!==i&&(n.window=null),n.wrap=t,n.wbits=i,Ea(e))},Sa=(e,i)=>{if(!e)return te;const t=new ls;e.state=t,t.strm=e,t.window=null,t.mode=Ot;const n=Aa(e,i);return n!==Me&&(e.state=null),n},ss=e=>Sa(e,rs);let vn=!0,Qt,ei;const os=e=>{if(vn){Qt=new Int32Array(512),ei=new Int32Array(32);let i=0;for(;i<144;)e.lens[i++]=8;for(;i<256;)e.lens[i++]=9;for(;i<280;)e.lens[i++]=7;for(;i<288;)e.lens[i++]=8;for(Qe(ga,e.lens,0,288,Qt,0,e.work,{bits:9}),i=0;i<32;)e.lens[i++]=5;Qe(wa,e.lens,0,32,ei,0,e.work,{bits:5}),vn=!1}e.lencode=Qt,e.lenbits=9,e.distcode=ei,e.distbits=5},Ta=(e,i,t,n)=>{let a;const r=e.state;return r.window===null&&(r.wsize=1<<r.wbits,r.wnext=0,r.whave=0,r.window=new Uint8Array(r.wsize)),n>=r.wsize?(r.window.set(i.subarray(t-r.wsize,t),0),r.wnext=0,r.whave=r.wsize):(a=r.wsize-r.wnext,a>n&&(a=n),r.window.set(i.subarray(t-n,t-n+a),r.wnext),n-=a,n?(r.window.set(i.subarray(t-n,t),0),r.wnext=n,r.whave=r.wsize):(r.wnext+=a,r.wnext===r.wsize&&(r.wnext=0),r.whave<r.wsize&&(r.whave+=a))),0},fs=(e,i)=>{let t,n,a,r,l,s,c,o,f,u,d,h,m,g,_=0,v,x,w,b,S,F,y,R;const T=new Uint8Array(4);let A,D;const k=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(Le(e)||!e.output||!e.input&&e.avail_in!==0)return te;t=e.state,t.mode===ue&&(t.mode=jt),l=e.next_out,a=e.output,c=e.avail_out,r=e.next_in,n=e.input,s=e.avail_in,o=t.hold,f=t.bits,u=s,d=c,R=Me;e:for(;;)switch(t.mode){case Ot:if(t.wrap===0){t.mode=jt;break}for(;f<16;){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}if(t.wrap&2&&o===35615){t.wbits===0&&(t.wbits=15),t.check=0,T[0]=o&255,T[1]=o>>>8&255,t.check=P(t.check,T,2,0),o=0,f=0,t.mode=qi;break}if(t.head&&(t.head.done=!1),!(t.wrap&1)||(((o&255)<<8)+(o>>8))%31){e.msg="incorrect header check",t.mode=O;break}if((o&15)!==ji){e.msg="unknown compression method",t.mode=O;break}if(o>>>=4,f-=4,y=(o&15)+8,t.wbits===0&&(t.wbits=y),y>15||y>t.wbits){e.msg="invalid window size",t.mode=O;break}t.dmax=1<<t.wbits,t.flags=0,e.adler=t.check=1,t.mode=o&512?ln:ue,o=0,f=0;break;case qi:for(;f<16;){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}if(t.flags=o,(t.flags&255)!==ji){e.msg="unknown compression method",t.mode=O;break}if(t.flags&57344){e.msg="unknown header flags set",t.mode=O;break}t.head&&(t.head.text=o>>8&1),t.flags&512&&t.wrap&4&&(T[0]=o&255,T[1]=o>>>8&255,t.check=P(t.check,T,2,0)),o=0,f=0,t.mode=Ji;case Ji:for(;f<32;){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}t.head&&(t.head.time=o),t.flags&512&&t.wrap&4&&(T[0]=o&255,T[1]=o>>>8&255,T[2]=o>>>16&255,T[3]=o>>>24&255,t.check=P(t.check,T,4,0)),o=0,f=0,t.mode=Qi;case Qi:for(;f<16;){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}t.head&&(t.head.xflags=o&255,t.head.os=o>>8),t.flags&512&&t.wrap&4&&(T[0]=o&255,T[1]=o>>>8&255,t.check=P(t.check,T,2,0)),o=0,f=0,t.mode=en;case en:if(t.flags&1024){for(;f<16;){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}t.length=o,t.head&&(t.head.extra_len=o),t.flags&512&&t.wrap&4&&(T[0]=o&255,T[1]=o>>>8&255,t.check=P(t.check,T,2,0)),o=0,f=0}else t.head&&(t.head.extra=null);t.mode=tn;case tn:if(t.flags&1024&&(h=t.length,h>s&&(h=s),h&&(t.head&&(y=t.head.extra_len-t.length,t.head.extra||(t.head.extra=new Uint8Array(t.head.extra_len)),t.head.extra.set(n.subarray(r,r+h),y)),t.flags&512&&t.wrap&4&&(t.check=P(t.check,n,h,r)),s-=h,r+=h,t.length-=h),t.length))break e;t.length=0,t.mode=nn;case nn:if(t.flags&2048){if(s===0)break e;h=0;do y=n[r+h++],t.head&&y&&t.length<65536&&(t.head.name+=String.fromCharCode(y));while(y&&h<s);if(t.flags&512&&t.wrap&4&&(t.check=P(t.check,n,h,r)),s-=h,r+=h,y)break e}else t.head&&(t.head.name=null);t.length=0,t.mode=an;case an:if(t.flags&4096){if(s===0)break e;h=0;do y=n[r+h++],t.head&&y&&t.length<65536&&(t.head.comment+=String.fromCharCode(y));while(y&&h<s);if(t.flags&512&&t.wrap&4&&(t.check=P(t.check,n,h,r)),s-=h,r+=h,y)break e}else t.head&&(t.head.comment=null);t.mode=rn;case rn:if(t.flags&512){for(;f<16;){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}if(t.wrap&4&&o!==(t.check&65535)){e.msg="header crc mismatch",t.mode=O;break}o=0,f=0}t.head&&(t.head.hcrc=t.flags>>9&1,t.head.done=!0),e.adler=t.check=0,t.mode=ue;break;case ln:for(;f<32;){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}e.adler=t.check=pn(o),o=0,f=0,t.mode=Mt;case Mt:if(t.havedict===0)return e.next_out=l,e.avail_out=c,e.next_in=r,e.avail_in=s,t.hold=o,t.bits=f,es;e.adler=t.check=1,t.mode=ue;case ue:if(i===Jl||i===xt)break e;case jt:if(t.last){o>>>=f&7,f-=f&7,t.mode=Jt;break}for(;f<3;){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}switch(t.last=o&1,o>>>=1,f-=1,o&3){case 0:t.mode=sn;break;case 1:if(os(t),t.mode=yt,i===xt){o>>>=2,f-=2;break e}break;case 2:t.mode=fn;break;case 3:e.msg="invalid block type",t.mode=O}o>>>=2,f-=2;break;case sn:for(o>>>=f&7,f-=f&7;f<32;){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}if((o&65535)!==(o>>>16^65535)){e.msg="invalid stored block lengths",t.mode=O;break}if(t.length=o&65535,o=0,f=0,t.mode=qt,i===xt)break e;case qt:t.mode=on;case on:if(h=t.length,h){if(h>s&&(h=s),h>c&&(h=c),h===0)break e;a.set(n.subarray(r,r+h),l),s-=h,r+=h,c-=h,l+=h,t.length-=h;break}t.mode=ue;break;case fn:for(;f<14;){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}if(t.nlen=(o&31)+257,o>>>=5,f-=5,t.ndist=(o&31)+1,o>>>=5,f-=5,t.ncode=(o&15)+4,o>>>=4,f-=4,t.nlen>286||t.ndist>30){e.msg="too many length or distance symbols",t.mode=O;break}t.have=0,t.mode=cn;case cn:for(;t.have<t.ncode;){for(;f<3;){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}t.lens[k[t.have++]]=o&7,o>>>=3,f-=3}for(;t.have<19;)t.lens[k[t.have++]]=0;if(t.lencode=t.lendyn,t.lenbits=7,A={bits:t.lenbits},R=Qe(ql,t.lens,0,19,t.lencode,0,t.work,A),t.lenbits=A.bits,R){e.msg="invalid code lengths set",t.mode=O;break}t.have=0,t.mode=hn;case hn:for(;t.have<t.nlen+t.ndist;){for(;_=t.lencode[o&(1<<t.lenbits)-1],v=_>>>24,x=_>>>16&255,w=_&65535,!(v<=f);){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}if(w<16)o>>>=v,f-=v,t.lens[t.have++]=w;else{if(w===16){for(D=v+2;f<D;){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}if(o>>>=v,f-=v,t.have===0){e.msg="invalid bit length repeat",t.mode=O;break}y=t.lens[t.have-1],h=3+(o&3),o>>>=2,f-=2}else if(w===17){for(D=v+3;f<D;){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}o>>>=v,f-=v,y=0,h=3+(o&7),o>>>=3,f-=3}else{for(D=v+7;f<D;){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}o>>>=v,f-=v,y=0,h=11+(o&127),o>>>=7,f-=7}if(t.have+h>t.nlen+t.ndist){e.msg="invalid bit length repeat",t.mode=O;break}for(;h--;)t.lens[t.have++]=y}}if(t.mode===O)break;if(t.lens[256]===0){e.msg="invalid code -- missing end-of-block",t.mode=O;break}if(t.lenbits=9,A={bits:t.lenbits},R=Qe(ga,t.lens,0,t.nlen,t.lencode,0,t.work,A),t.lenbits=A.bits,R){e.msg="invalid literal/lengths set",t.mode=O;break}if(t.distbits=6,t.distcode=t.distdyn,A={bits:t.distbits},R=Qe(wa,t.lens,t.nlen,t.ndist,t.distcode,0,t.work,A),t.distbits=A.bits,R){e.msg="invalid distances set",t.mode=O;break}if(t.mode=yt,i===xt)break e;case yt:t.mode=Et;case Et:if(s>=6&&c>=258){e.next_out=l,e.avail_out=c,e.next_in=r,e.avail_in=s,t.hold=o,t.bits=f,Xl(e,d),l=e.next_out,a=e.output,c=e.avail_out,r=e.next_in,n=e.input,s=e.avail_in,o=t.hold,f=t.bits,t.mode===ue&&(t.back=-1);break}for(t.back=0;_=t.lencode[o&(1<<t.lenbits)-1],v=_>>>24,x=_>>>16&255,w=_&65535,!(v<=f);){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}if(x&&!(x&240)){for(b=v,S=x,F=w;_=t.lencode[F+((o&(1<<b+S)-1)>>b)],v=_>>>24,x=_>>>16&255,w=_&65535,!(b+v<=f);){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}o>>>=b,f-=b,t.back+=b}if(o>>>=v,f-=v,t.back+=v,t.length=w,x===0){t.mode=bn;break}if(x&32){t.back=-1,t.mode=ue;break}if(x&64){e.msg="invalid literal/length code",t.mode=O;break}t.extra=x&15,t.mode=dn;case dn:if(t.extra){for(D=t.extra;f<D;){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}t.length+=o&(1<<t.extra)-1,o>>>=t.extra,f-=t.extra,t.back+=t.extra}t.was=t.length,t.mode=un;case un:for(;_=t.distcode[o&(1<<t.distbits)-1],v=_>>>24,x=_>>>16&255,w=_&65535,!(v<=f);){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}if(!(x&240)){for(b=v,S=x,F=w;_=t.distcode[F+((o&(1<<b+S)-1)>>b)],v=_>>>24,x=_>>>16&255,w=_&65535,!(b+v<=f);){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}o>>>=b,f-=b,t.back+=b}if(o>>>=v,f-=v,t.back+=v,x&64){e.msg="invalid distance code",t.mode=O;break}t.offset=w,t.extra=x&15,t.mode=_n;case _n:if(t.extra){for(D=t.extra;f<D;){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}t.offset+=o&(1<<t.extra)-1,o>>>=t.extra,f-=t.extra,t.back+=t.extra}if(t.offset>t.dmax){e.msg="invalid distance too far back",t.mode=O;break}t.mode=mn;case mn:if(c===0)break e;if(h=d-c,t.offset>h){if(h=t.offset-h,h>t.whave&&t.sane){e.msg="invalid distance too far back",t.mode=O;break}h>t.wnext?(h-=t.wnext,m=t.wsize-h):m=t.wnext-h,h>t.length&&(h=t.length),g=t.window}else g=a,m=l-t.offset,h=t.length;h>c&&(h=c),c-=h,t.length-=h;do a[l++]=g[m++];while(--h);t.length===0&&(t.mode=Et);break;case bn:if(c===0)break e;a[l++]=t.length,c--,t.mode=Et;break;case Jt:if(t.wrap){for(;f<32;){if(s===0)break e;s--,o|=n[r++]<<f,f+=8}if(d-=c,e.total_out+=d,t.total+=d,t.wrap&4&&d&&(e.adler=t.check=t.flags?P(t.check,a,d,l-d):at(t.check,a,d,l-d)),d=c,t.wrap&4&&(t.flags?o:pn(o))!==t.check){e.msg="incorrect data check",t.mode=O;break}o=0,f=0}t.mode=gn;case gn:if(t.wrap&&t.flags){for(;f<32;){if(s===0)break e;s--,o+=n[r++]<<f,f+=8}if(t.wrap&4&&o!==(t.total&4294967295)){e.msg="incorrect length check",t.mode=O;break}o=0,f=0}t.mode=wn;case wn:R=Ql;break e;case O:R=pa;break e;case ka:return va;case xa:default:return te}return e.next_out=l,e.avail_out=c,e.next_in=r,e.avail_in=s,t.hold=o,t.bits=f,(t.wsize||d!==e.avail_out&&t.mode<O&&(t.mode<Jt||i!==Ki))&&Ta(e,e.output,e.next_out,d-e.avail_out),u-=e.avail_in,d-=e.avail_out,e.total_in+=u,e.total_out+=d,t.total+=d,t.wrap&4&&d&&(e.adler=t.check=t.flags?P(t.check,a,d,e.next_out-d):at(t.check,a,d,e.next_out-d)),e.data_type=t.bits+(t.last?64:0)+(t.mode===ue?128:0)+(t.mode===yt||t.mode===qt?256:0),(u===0&&d===0||i===Ki)&&R===Me&&(R=ts),R},cs=e=>{if(Le(e))return te;let i=e.state;return i.window&&(i.window=null),e.state=null,Me},hs=(e,i)=>{if(Le(e))return te;const t=e.state;return t.wrap&2?(t.head=i,i.done=!1,Me):te},ds=(e,i)=>{const t=i.length;let n,a,r;return Le(e)||(n=e.state,n.wrap!==0&&n.mode!==Mt)?te:n.mode===Mt&&(a=1,a=at(a,i,t,0),a!==n.check)?pa:(r=Ta(e,i,t,t),r?(n.mode=ka,va):(n.havedict=1,Me))};var us=Ea,_s=Aa,ms=ya,bs=ss,gs=Sa,ws=fs,ps=cs,vs=hs,ks=ds,xs="pako inflate (from Nodeca project)",me={inflateReset:us,inflateReset2:_s,inflateResetKeep:ms,inflateInit:bs,inflateInit2:gs,inflate:ws,inflateEnd:ps,inflateGetHeader:vs,inflateSetDictionary:ks,inflateInfo:xs};function ys(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var Es=ys;const Da=Object.prototype.toString,{Z_NO_FLUSH:As,Z_FINISH:Ss,Z_OK:st,Z_STREAM_END:ti,Z_NEED_DICT:ii,Z_STREAM_ERROR:Ts,Z_DATA_ERROR:kn,Z_MEM_ERROR:Ds}=Ze;function gt(e){this.options=Ut.assign({chunkSize:1024*64,windowBits:15,to:""},e||{});const i=this.options;i.raw&&i.windowBits>=0&&i.windowBits<16&&(i.windowBits=-i.windowBits,i.windowBits===0&&(i.windowBits=-15)),i.windowBits>=0&&i.windowBits<16&&!(e&&e.windowBits)&&(i.windowBits+=32),i.windowBits>15&&i.windowBits<48&&(i.windowBits&15||(i.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new ma,this.strm.avail_out=0;let t=me.inflateInit2(this.strm,i.windowBits);if(t!==st)throw new Error(Ce[t]);if(this.header=new Es,me.inflateGetHeader(this.strm,this.header),i.dictionary&&(typeof i.dictionary=="string"?i.dictionary=lt.string2buf(i.dictionary):Da.call(i.dictionary)==="[object ArrayBuffer]"&&(i.dictionary=new Uint8Array(i.dictionary)),i.raw&&(t=me.inflateSetDictionary(this.strm,i.dictionary),t!==st)))throw new Error(Ce[t])}gt.prototype.push=function(e,i){const t=this.strm,n=this.options.chunkSize,a=this.options.dictionary;let r,l,s;if(this.ended)return!1;for(i===~~i?l=i:l=i===!0?Ss:As,Da.call(e)==="[object ArrayBuffer]"?t.input=new Uint8Array(e):t.input=e,t.next_in=0,t.avail_in=t.input.length;;){for(t.avail_out===0&&(t.output=new Uint8Array(n),t.next_out=0,t.avail_out=n),r=me.inflate(t,l),r===ii&&a&&(r=me.inflateSetDictionary(t,a),r===st?r=me.inflate(t,l):r===kn&&(r=ii));t.avail_in>0&&r===ti&&t.state.wrap>0&&e[t.next_in]!==0;)me.inflateReset(t),r=me.inflate(t,l);switch(r){case Ts:case kn:case ii:case Ds:return this.onEnd(r),this.ended=!0,!1}if(s=t.avail_out,t.next_out&&(t.avail_out===0||r===ti))if(this.options.to==="string"){let c=lt.utf8border(t.output,t.next_out),o=t.next_out-c,f=lt.buf2string(t.output,c);t.next_out=o,t.avail_out=n-o,o&&t.output.set(t.output.subarray(c,c+o),0),this.onData(f)}else this.onData(t.output.length===t.next_out?t.output:t.output.subarray(0,t.next_out));if(!(r===st&&s===0)){if(r===ti)return r=me.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,!0;if(t.avail_in===0)break}}return!0};gt.prototype.onData=function(e){this.chunks.push(e)};gt.prototype.onEnd=function(e){e===st&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=Ut.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};function Ei(e,i){const t=new gt(i);if(t.push(e),t.err)throw t.msg||Ce[t.err];return t.result}function zs(e,i){return i=i||{},i.raw=!0,Ei(e,i)}var Rs=gt,Cs=Ei,Is=zs,Ms=Ei,Zs=Ze,Ls={Inflate:Rs,inflate:Cs,inflateRaw:Is,ungzip:Ms,constants:Zs};const{Deflate:Ns,deflate:Us,deflateRaw:Os,gzip:Bs}=Pl,{Inflate:Fs,inflate:$s,inflateRaw:Hs,ungzip:Ps}=Ls;var Ys=Ns,Xs=Us,Vs=Os,Ws=Bs,Gs=Fs,Ks=$s,js=Hs,qs=Ps,Js=Ze,xn={Deflate:Ys,deflate:Xs,deflateRaw:Vs,gzip:Ws,Inflate:Gs,inflate:Ks,inflateRaw:js,ungzip:qs,constants:Js};class yn{constructor(i){p(this,"buffer");p(this,"bytePointer",0);p(this,"bitPointer",0);this.buffer=typeof i=="number"?new ArrayBuffer(i):"buffer"in i?i.buffer:i}get view(){return new DataView(this.buffer)}skipBits(i){this.bitPointer+=i,this.bytePointer+=Math.floor(this.bitPointer/8),this.bitPointer%=8}final(){return this.buffer.slice(0,this.bitPointer==0?this.bytePointer:this.bytePointer+1)}readBit(){const t=(this.view.getUint8(this.bytePointer)>>this.bitPointer&1)!=0;return this.skipBits(1),t}readBits(i){let t=0;for(let n=0;n<i;n++)t|=(this.readBit()?1:0)<<n;return t}writeBit(i){let t=this.view.getUint8(this.bytePointer);i?t|=1<<this.bitPointer:t&=1<<this.bitPointer^255,this.view.setUint8(this.bytePointer,t),this.skipBits(1)}writeBits(i,t){for(let n=0;n<i;n++)this.writeBit((t&1)!=0),t>>=1}}const $=64;function Ai(e,i){return()=>{e|=0,e=e+2654435769|0;let t=e^e>>>16;t=Math.imul(t,569420461),t=t^t>>>15,t=Math.imul(t,1935289751);const n=(t=t^t>>>15)>>>0;return i?n/4294967296:n}}function ze(e,i,t,n){return e^=e<<13|e>>>17,e=e*2158630691+3333583613&4294967295,e^=i,e^=e<<13|e>>>17,e=e*2158630691+3333583613&4294967295,e^=t,e^=e<<13|e>>>17,e=e*2158630691+3333583613&4294967295,e^=n,e^=e<<16|e>>>15,e=e*2158630691+3333583613&4294967295,(e>>>0)/4294967295}function Qs(e,i){i*=e.reduce((t,n)=>t+n,0);for(let t=0;t<e.length;t++)if(i-=e[t],i<=0)return t;throw new Error("Invalid weights")}function eo(e,i,t,n){let a=[];for(let s=Math.floor(i)-1;s<Math.ceil(i)+1;s++)for(let c=Math.floor(t)-1;c<Math.ceil(t)+1;c++)a.push({x:s+ze(e,s,c,0)-.5,y:c+ze(e,s,c,1)-.5,type:Qs(n,ze(e,s,c,2))});let r=1/0,l=-1;for(const s of a){const c=Math.sqrt((s.x-i)**2+(s.y-t)**2);c<r&&(r=c,l=s.type)}if(l==-1)throw new Error("Voronoi noise error.");return l}function En(e,i,t){function n(h,m,g){return(m-h)*((g*(g*6-15)+10)*g*g*g)+h}const a=(h,m)=>{const g=ze(e,h,m,0);return{x:Math.cos(g),y:Math.sin(g)}},r=(h,m,g,_)=>{const v=a(h,m),x=g-h,w=_-m;return x*v.x+w*v.y},l=Math.floor(i),s=l+1,c=Math.floor(t),o=c+1,f=i-l,u=t-c;return n(n(r(l,c,i,t),r(s,c,i,t),f),n(r(l,o,i,t),r(s,o,i,t),f),u)}class to{constructor(i,t,n){p(this,"world");p(this,"x");p(this,"y");p(this,"minesNearbyCache",null);this.world=i,this.x=t,this.y=n}minesNearby(i=!1){if(this.minesNearbyCache!==null&&i)return this.minesNearbyCache;this.minesNearbyCache=0;for(const t of this.searchPattern)this.minesNearbyCache+=this.world.getTile(this.x+t.x,this.y+t.y).numMines();return this.minesNearbyCache}flagsNearby(){let i=0;for(const t of this.searchPattern)i+=this.world.getTile(this.x+t.x,this.y+t.y).numFlags();return i}static load(i,t,n,a){throw new Error("Tile.load needs to be implemented on derived class.")}}var V=(e=>(e[e.Covered=0]="Covered",e[e.Flagged=1]="Flagged",e[e.Revealed=2]="Revealed",e))(V||{});class Bt extends to{constructor(t,n,a,r){super(t,n,a);p(this,"isMine");p(this,"state",0);p(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this.isMine=r}numMines(){return this.isMine?1:0}numFlags(){return this.state==1?1:0}flag(){this.state!=2&&(this.state==0?this.state=1:this.state=0)}reveal(){return this.state!=0?!1:(this.state=2,!0)}}class Si extends Bt{constructor(t,n,a){const r=ze(t.tileSeed,n,a,0)>.625;super(t,n,a,r);p(this,"type","chocolate")}save(t){t.writeBits(2,this.state)}static load(t,n,a,r){const l=new Si(t,n,a);switch(r.readBits(2)){case V.Covered:break;case V.Flagged:l.flag();break;case V.Revealed:l.reveal();break}return l}}function An(e,i,t){const n=Math.floor(i/e),a=Math.floor(t/e);return(n+a%2)%2==0}function za(e,i,t,n){const a=Math.floor(t/i),r=Math.floor(n/i),l=(a+r%2)%2==0,s=Math.abs(t%i)+Math.abs(n%i)*i,c=Math.floor(ze(e.tileSeed,a,r,0)*i**2),o=l?s!=c:s==c;return{isDark:l,isMine:o}}class Ti extends Bt{constructor(t,n,a){const{isDark:r,isMine:l}=za(t,2,n,a);super(t,n,a,l);p(this,"type","waffle");p(this,"isDark");this.isDark=r}save(t){t.writeBits(2,this.state)}static load(t,n,a,r){const l=new Ti(t,n,a);switch(r.readBits(2)){case V.Covered:break;case V.Flagged:l.flag();break;case V.Revealed:l.reveal();break}return l}}class Di extends Bt{constructor(t,n,a){const{isDark:r,isMine:l}=za(t,3,n,a);super(t,n,a,l);p(this,"type","stroopwafel");p(this,"isDark");this.isDark=r}save(t){t.writeBits(2,this.state)}static load(t,n,a,r){const l=new Di(t,n,a);switch(r.readBits(2)){case V.Covered:break;case V.Flagged:l.flag();break;case V.Revealed:l.reveal();break}return l}}class zi extends Bt{constructor(t,n,a){const r=ze(t.tileSeed,n,a,0)>.875;super(t,n,a,r);p(this,"type","vanilla")}save(t){t.writeBits(2,this.state)}static load(t,n,a,r){const l=new zi(t,n,a);switch(r.readBits(2)){case V.Covered:break;case V.Flagged:l.flag();break;case V.Revealed:l.reveal();break}return l}}const io={type:"collection",weight:1,scale:24,smoothness:.8,biomes:[{type:"collection",weight:5,scale:24,smoothness:.8,biomes:[{type:"biome",weight:3,tile:zi},{type:"biome",weight:1,tile:Si}]},{type:"collection",weight:2,scale:64,smoothness:0,biomes:[{type:"biome",weight:1,tile:Ti},{type:"biome",weight:2,tile:Di}]}]};function no(e,i,t,n,a){const r=Ai(e,!1),l=En(r(),i,t)*n,s=En(r(),i,t)*n;return eo(r(),i+l,t+s,a)}function Ra(e,i,t){const n=Ai(e.biomeSeed,!1);let a=io;for(;a.type=="collection";){const r=no(n(),i/a.scale,t/a.scale,a.smoothness,a.biomes.map(l=>l.weight));a=a.biomes[r]}return a.tile}function Ca(e,i,t){const n=Ra(e,i,t);return new n(e,i,t)}class Ia{constructor(i,t,n){p(this,"world");p(this,"chunkX");p(this,"chunkY");this.world=i,this.chunkX=t,this.chunkY=n}isGenerated(){return this instanceof ot}generate(){if(this.isGenerated())throw new Error("Cannot generate an already generated chunk.");console.log(`Generating new chunk: ${this.chunkX}, ${this.chunkY}`);const i=[];for(let t=0;t<$;t++)for(let n=0;n<$;n++){const a=this.world.generateTile(this.chunkX*$+n,this.chunkY*$+t);i.push(a)}return new ot(this.world,this.chunkX,this.chunkY,i)}}class ot extends Ia{constructor(t,n,a,r){super(t,n,a);p(this,"tiles");if(this.tiles=r,this.tiles.length!=$*$)throw new Error("GeneratedChunk incorrect tiles length.")}getTileAbsolute(t,n){return this.getTile(t-this.chunkX*$,n-this.chunkY*$)}getTile(t,n){return this.tiles[t+n*$]}resetTileAbsolute(t,n){return this.resetTile(t-this.chunkX*$,n-this.chunkY*$)}resetTile(t,n){this.tiles[t+n*$]=Ca(this.world,this.chunkX*$+t,this.chunkY*$+n)}save(){const t=new yn(2048);for(const n of this.tiles)n.save(t);return xn.deflate(t.final()).buffer}static load(t,n,a,r){const l=new yn(xn.inflate(r));let s=[];for(let c=0;c<$;c++)for(let o=0;o<$;o++){const f=n*$+o,u=a*$+c,h=Ra(t,f,u).load(t,f,u,l);s.push(h)}return new ot(t,n,a,s)}}const Ma="3.7.7",ao=Ma,Ve=typeof Buffer=="function",Sn=typeof TextDecoder=="function"?new TextDecoder:void 0,Tn=typeof TextEncoder=="function"?new TextEncoder:void 0,ro="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",je=Array.prototype.slice.call(ro),At=(e=>{let i={};return e.forEach((t,n)=>i[t]=n),i})(je),lo=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,X=String.fromCharCode.bind(String),Dn=typeof Uint8Array.from=="function"?Uint8Array.from.bind(Uint8Array):e=>new Uint8Array(Array.prototype.slice.call(e,0)),Za=e=>e.replace(/=/g,"").replace(/[+\/]/g,i=>i=="+"?"-":"_"),La=e=>e.replace(/[^A-Za-z0-9\+\/]/g,""),Na=e=>{let i,t,n,a,r="";const l=e.length%3;for(let s=0;s<e.length;){if((t=e.charCodeAt(s++))>255||(n=e.charCodeAt(s++))>255||(a=e.charCodeAt(s++))>255)throw new TypeError("invalid character found");i=t<<16|n<<8|a,r+=je[i>>18&63]+je[i>>12&63]+je[i>>6&63]+je[i&63]}return l?r.slice(0,l-3)+"===".substring(l):r},Ri=typeof btoa=="function"?e=>btoa(e):Ve?e=>Buffer.from(e,"binary").toString("base64"):Na,ui=Ve?e=>Buffer.from(e).toString("base64"):e=>{let t=[];for(let n=0,a=e.length;n<a;n+=4096)t.push(X.apply(null,e.subarray(n,n+4096)));return Ri(t.join(""))},Dt=(e,i=!1)=>i?Za(ui(e)):ui(e),so=e=>{if(e.length<2){var i=e.charCodeAt(0);return i<128?e:i<2048?X(192|i>>>6)+X(128|i&63):X(224|i>>>12&15)+X(128|i>>>6&63)+X(128|i&63)}else{var i=65536+(e.charCodeAt(0)-55296)*1024+(e.charCodeAt(1)-56320);return X(240|i>>>18&7)+X(128|i>>>12&63)+X(128|i>>>6&63)+X(128|i&63)}},oo=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,Ua=e=>e.replace(oo,so),zn=Ve?e=>Buffer.from(e,"utf8").toString("base64"):Tn?e=>ui(Tn.encode(e)):e=>Ri(Ua(e)),Be=(e,i=!1)=>i?Za(zn(e)):zn(e),Rn=e=>Be(e,!0),fo=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,co=e=>{switch(e.length){case 4:var i=(7&e.charCodeAt(0))<<18|(63&e.charCodeAt(1))<<12|(63&e.charCodeAt(2))<<6|63&e.charCodeAt(3),t=i-65536;return X((t>>>10)+55296)+X((t&1023)+56320);case 3:return X((15&e.charCodeAt(0))<<12|(63&e.charCodeAt(1))<<6|63&e.charCodeAt(2));default:return X((31&e.charCodeAt(0))<<6|63&e.charCodeAt(1))}},Oa=e=>e.replace(fo,co),Ba=e=>{if(e=e.replace(/\s+/g,""),!lo.test(e))throw new TypeError("malformed base64.");e+="==".slice(2-(e.length&3));let i,t="",n,a;for(let r=0;r<e.length;)i=At[e.charAt(r++)]<<18|At[e.charAt(r++)]<<12|(n=At[e.charAt(r++)])<<6|(a=At[e.charAt(r++)]),t+=n===64?X(i>>16&255):a===64?X(i>>16&255,i>>8&255):X(i>>16&255,i>>8&255,i&255);return t},Ci=typeof atob=="function"?e=>atob(La(e)):Ve?e=>Buffer.from(e,"base64").toString("binary"):Ba,Fa=Ve?e=>Dn(Buffer.from(e,"base64")):e=>Dn(Ci(e).split("").map(i=>i.charCodeAt(0))),$a=e=>Fa(Ha(e)),ho=Ve?e=>Buffer.from(e,"base64").toString("utf8"):Sn?e=>Sn.decode(Fa(e)):e=>Oa(Ci(e)),Ha=e=>La(e.replace(/[-_]/g,i=>i=="-"?"+":"/")),_i=e=>ho(Ha(e)),uo=e=>{if(typeof e!="string")return!1;const i=e.replace(/\s+/g,"").replace(/={0,2}$/,"");return!/[^\s0-9a-zA-Z\+/]/.test(i)||!/[^\s0-9a-zA-Z\-_]/.test(i)},Pa=e=>({value:e,enumerable:!1,writable:!0,configurable:!0}),Ya=function(){const e=(i,t)=>Object.defineProperty(String.prototype,i,Pa(t));e("fromBase64",function(){return _i(this)}),e("toBase64",function(i){return Be(this,i)}),e("toBase64URI",function(){return Be(this,!0)}),e("toBase64URL",function(){return Be(this,!0)}),e("toUint8Array",function(){return $a(this)})},Xa=function(){const e=(i,t)=>Object.defineProperty(Uint8Array.prototype,i,Pa(t));e("toBase64",function(i){return Dt(this,i)}),e("toBase64URI",function(){return Dt(this,!0)}),e("toBase64URL",function(){return Dt(this,!0)})},_o=()=>{Ya(),Xa()},Cn={version:Ma,VERSION:ao,atob:Ci,atobPolyfill:Ba,btoa:Ri,btoaPolyfill:Na,fromBase64:_i,toBase64:Be,encode:Be,encodeURI:Rn,encodeURL:Rn,utob:Ua,btou:Oa,decode:_i,isValid:uo,fromUint8Array:Dt,toUint8Array:$a,extendString:Ya,extendUint8Array:Xa,extendBuiltins:_o};let mo=0;function bo(){return mo++}class go{constructor(){p(this,"_dispatcherDestroyed",!1);p(this,"listeners",{})}get dispatcherDestroyed(){return this._dispatcherDestroyed}dispatcherCheckDestroyed(){if(this.dispatcherDestroyed)throw new Error("EventDispatcher used after destroyed.")}getListenersArr(i){return this.listeners[i]||(this.listeners[i]=[]),this.listeners[i]}*listenersIter(){for(const i in this.listeners){const t=this.listeners[i];for(const n of t)yield n}}addEventListener(i,t,n=!1,a=0){this.dispatcherCheckDestroyed();let r=this.getListenersArr(i);const l={key:i,callbackfn:t,priority:a,id:bo(),once:n};return r.push(l),r.sort((s,c)=>s.priority-c.priority),l}dispatchEvent(i,t){this.dispatcherCheckDestroyed();const n=this.getListenersArr(i);for(const a of n){let r=!1;if(a.callbackfn({data:t,dispatcher:this,listener:a,stopPropagation:()=>r=!0}),a.once&&this.removeEventListener(a),r)break}}removeEventListener(i){this.dispatcherCheckDestroyed();let t=!1;if(typeof i!="number"){const n=this.getListenersArr(i.key);for(const a of n)a.id==i.id&&(n.splice(n.indexOf(a),1),t=!0)}else for(const n of this.listenersIter())n.id==i&&this.removeEventListener(n)&&(t=!0);return t}destroyDispatcher(){this.dispatcherCheckDestroyed(),this._dispatcherDestroyed=!0;for(const i in this.listeners)delete this.listeners[i]}}function*wo(e,i){let t=e,n=i,a=1,r=1;for(;;){for(;2*t*a<r;)yield{x:t,y:n},t+=a;for(;2*n*a<r;)yield{x:t,y:n},n+=a;a=-1*a,r+=1}}class Ft extends go{constructor(t){super();p(this,"seed");p(this,"tileSeed");p(this,"biomeSeed");p(this,"chunks",{});p(this,"_revealCount",0);p(this,"_died",!1);this.seed=t;const n=Ai(this.seed,!1);this.tileSeed=n(),this.biomeSeed=n()}generateTile(t,n){return Ca(this,t,n)}getChunk(t,n){const a=this.chunks[`${t},${n}`];return a||new Ia(this,t,n)}getGeneratedChunk(t,n){const a=this.getChunk(t,n);if(a.isGenerated())return a;const r=a.generate();return this.chunks[`${t},${n}`]=r,r}getTile(t,n){const a=Math.floor(t/$),r=Math.floor(n/$);return this.getGeneratedChunk(a,r).getTileAbsolute(t,n)}flag(t,n){const a=this.getTile(t,n),r=a.numFlags();a.flag();const l=a.numFlags();l==0&&l!=r&&(this.dispatchEvent("particle_unflag",{x:t,y:n}),this.dispatchEvent("sound_unflag",null))}_reveal(t,n){const a=this.getTile(t,n);if(a.reveal())if(this._revealCount++,a.numMines()>0){this._died=!0,this.dispatchEvent("particle_explosion",{x:a.x,y:a.y});return}else this.dispatchEvent("particle_reveal",{x:a.x,y:a.y});let r=[],l=[];for(a.minesNearby()==a.flagsNearby()&&l.push(a);l.length>0;){const s=l.pop();r.push(s);for(const c of s.searchPattern){const o=this.getTile(s.x+c.x,s.y+c.y);l.some(f=>f.x==o.x&&f.y==o.y)||r.some(f=>f.x==o.x&&f.y==o.y)||(o.minesNearby()==0?l.push(o):r.push(o))}}for(const s of r)s.reveal()&&(this._revealCount++,s.numMines()>0?(this._died=!0,this.dispatchEvent("particle_explosion",{x:s.x,y:s.y})):this.dispatchEvent("particle_reveal",{x:s.x,y:s.y}))}reveal(t,n){return this._revealCount=0,this._died=!1,this._reveal(t,n),this._revealCount>0&&this.dispatchEvent("sound_reveal",this._revealCount),this._died&&this.dispatchEvent("sound_explosion",null),this._died}reset(t,n){const a=this.getChunk(Math.floor(t/$),Math.floor(n/$));a.isGenerated()&&a.resetTileAbsolute(t,n)}closest0(t,n){for(const{x:a,y:r}of wo(t,n)){const l=this.getTile(a,r);if(l.numMines()==0&&l.minesNearby()==0)return{x:a,y:r}}throw new Error("This error should never happen, it's just here to make TypeScript happy.")}save(){const t={seed:this.seed,chunks:{}};for(const n in this.chunks){const a=n,l=this.chunks[a].save();t.chunks[a]=Cn.fromUint8Array(new Uint8Array(l))}return t}static load(t){const n=new Ft(t.seed);for(const a in t.chunks){const r=a,l=t.chunks[r],s=Cn.toUint8Array(l).buffer,[c,o,f]=r.match(/^(-?\d+),(-?\d+)$/),[u,d]=[parseInt(o),parseInt(f)];n.chunks[r]=ot.load(n,u,d,s)}return n}}function In(e,i){console.log("Loaded new world"),i&&localStorage.setItem(e,"PLACEHOLDER");const t=new Ft(Math.floor(Math.random()*4294967295)),n=t.closest0(0,0);return t.reveal(n.x,n.y),t}function po(e){const i=localStorage.getItem(e);if(i){console.log("Loaded saved world");try{const t=JSON.parse(i);return Ft.load(t)}catch(t){return console.error("Failed to load world."),console.error(t),In(e,!1)}}else return In(e,!0)}function vo(e,i){localStorage.getItem(e)!==null&&(console.log("Save world"),localStorage.setItem(e,JSON.stringify(i.save())))}const Va=(e,i)=>{const t=new ResizeObserver(()=>{i(e.clientWidth,e.clientHeight)});return t.observe(e),{destroy(){t.unobserve(e),t.disconnect()}}};class ko{constructor(i,t,n,a){p(this,"world");p(this,"theme");p(this,"canvas");p(this,"ctx");p(this,"viewport");this.world=i,this.theme=t,this.canvas=n;const r=this.canvas.getContext("2d");if(!r)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=r,this.viewport=a}async init(){}destroy(){}renderWorld(){this.ctx.imageSmoothingEnabled=!1,this.viewport.transformCtx(this.ctx);const i=this.viewport.cameraBounds(1);for(let t=i.minX;t<i.maxX;t++)for(let n=i.minY;n<i.maxY;n++){this.ctx.save(),this.ctx.translate(t,n);const a=this.world.getTile(t,n);this.theme.drawTile(this.ctx,a),this.ctx.restore()}this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.renderWorld()}}class xo{constructor(i){p(this,"world");p(this,"width",0);p(this,"height",0);p(this,"cameraX",0);p(this,"cameraY",0);p(this,"cameraZoom",32);p(this,"cameraMinZoom",4);p(this,"cameraMaxZoom",64);this.world=i}setSize(i,t){this.width=i,this.height=t}cameraWidth(){return this.width/this.cameraZoom}cameraHeight(){return this.height/this.cameraZoom}cameraTranslate(i,t){this.cameraX-=i/this.cameraZoom,this.cameraY-=t/this.cameraZoom}forceCameraZoom(){return this.width/this.cameraZoom<this.cameraMinZoom&&(this.cameraZoom=this.width/this.cameraMinZoom),this.height/this.cameraZoom<this.cameraMinZoom&&(this.cameraZoom=this.height/this.cameraMinZoom),this.width/this.cameraZoom>this.cameraMaxZoom&&(this.cameraZoom=this.width/this.cameraMaxZoom),this.height/this.cameraZoom>this.cameraMaxZoom&&(this.cameraZoom=this.height/this.cameraMaxZoom),this.cameraZoom}cameraScale(i){const t=this.cameraX+this.cameraWidth()*.5,n=this.cameraY+this.cameraHeight()*.5;this.cameraZoom*=i,this.forceCameraZoom();const a=this.cameraX+this.cameraWidth()*.5,r=this.cameraY+this.cameraHeight()*.5;return this.cameraX-=a-t,this.cameraY-=r-n,this.cameraZoom}cameraBounds(i=0){return{minX:Math.floor(this.cameraX-i),minY:Math.floor(this.cameraY-i),maxX:Math.ceil(this.cameraX+this.cameraWidth()+i),maxY:Math.ceil(this.cameraY+this.cameraHeight()+i)}}isInCameraBounds(i,t,n=0){const a=this.cameraBounds(n);return i>=a.minX&&i<=a.maxX&&t>=a.minY&&t<=a.maxY}cameraPos(i,t){return{x:Math.floor(i/this.cameraZoom+this.cameraX),y:Math.floor(t/this.cameraZoom+this.cameraY)}}transformCtx(i){i.scale(this.cameraZoom,this.cameraZoom),i.translate(-this.cameraX,-this.cameraY)}}class $t{constructor(){p(this,"_alive",!0);p(this,"_lifetime",0)}get alive(){return this._alive}set alive(i){this._alive=i}get lifetime(){return this._lifetime}rendererUpdate(i,t){this._lifetime+=t,this.update(i,t)}}class yo extends $t{constructor(t){super();p(this,"type","explosion");p(this,"maxLifetime",500);p(this,"tile");this.tile=t}update(t,n){this.lifetime>this.maxLifetime&&(this.alive=!1)}}function Ht(e){return e<0?0:e>1?1:e}class Eo extends $t{constructor(t){super();p(this,"type","faketile");p(this,"tile");this.tile=t}get opacity(){return Ht(2-this.lifetime/250+2)}update(t,n){this.lifetime>2e3&&(this.alive=!1)}}class Ao extends $t{constructor(t,n){super();p(this,"type","flag");p(this,"x");p(this,"y");p(this,"dx");p(this,"dy");p(this,"r");p(this,"dr");this.x=t,this.y=n,this.dx=(Math.random()-.5)*.005,this.dy=-(Math.random()*.002+.005),this.r=0,this.dr=(Math.random()-.5)*.01}get opacity(){return Ht(1-this.lifetime/250+.5)}update(t,n){this.dy+=5e-5*n,this.dx*=.99,this.dy*=this.dy<0?1:.95,this.x+=this.dx*n,this.y+=this.dy*n,this.r+=this.dr*n,this.lifetime>=500&&(this.alive=!1)}}class So extends $t{constructor(t){super();p(this,"type","tilereveal");p(this,"tile");p(this,"x");p(this,"y");p(this,"dx");p(this,"dy");p(this,"r");p(this,"dr");p(this,"totalLifetime");this.tile=t,this.x=this.tile.x,this.y=this.tile.y,this.dx=(Math.random()-.5)*.005,this.dy=-(Math.random()*.002+.005),this.r=0,this.dr=(Math.random()-.5)*.01,this.totalLifetime=Math.random()*750+250}get opacity(){return Ht(1-this.lifetime/(this.totalLifetime/2)+.5)}update(t,n){this.dy+=5e-5*n,this.dx*=.99,this.dy*=this.dy<0?1:.98,this.x+=this.dx*n,this.y+=this.dy*n,this.r+=this.dr*n,this.lifetime>=this.totalLifetime&&(this.alive=!1)}}class To{constructor(i,t,n,a){p(this,"world");p(this,"theme");p(this,"canvas");p(this,"ctx");p(this,"viewport");p(this,"particles",[]);p(this,"listeners",[]);p(this,"lastFrameTime",-1);this.world=i,this.theme=t,this.canvas=n;const r=this.canvas.getContext("2d");if(!r)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=r,this.viewport=a}async init(){this.listeners.push(this.world.addEventListener("particle_unflag",({data:{x:i,y:t}})=>{this.particles.push(new Ao(i,t))})),this.listeners.push(this.world.addEventListener("particle_explosion",({data:{x:i,y:t}})=>{const n=this.world.getTile(i,t);this.particles.push(new Eo(n)),this.particles.push(new yo(n))})),this.listeners.push(this.world.addEventListener("particle_reveal",({data:{x:i,y:t}})=>{const n=this.world.getTile(i,t);this.particles.push(new So(n))}))}destroy(){let i;for(;i=this.listeners.pop();)this.world.removeEventListener(i)}renderParticles(i){this.ctx.imageSmoothingEnabled=!1,this.viewport.transformCtx(this.ctx);for(let t=0;t<this.particles.length;t++){const n=this.particles[t];n.rendererUpdate(this,i),n.alive||(this.particles.splice(t,1),t--)}for(const t of this.particles)this.theme.drawParticle(this.ctx,t);this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.ctx.fillStyle="transparent",this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const i=performance.now();if(this.lastFrameTime==-1)this.renderParticles(0);else{const t=i-this.lastFrameTime;this.renderParticles(t)}this.lastFrameTime=i}}function Do(e){let i,t,n,a,r,l,s;return{c(){i=I("div"),t=I("canvas"),n=be(),a=I("canvas"),this.h()},l(c){i=M(c,"DIV",{class:!0});var o=L(i);t=M(o,"CANVAS",{}),L(t).forEach(E),n=ge(o),a=M(o,"CANVAS",{}),L(a).forEach(E),o.forEach(E),this.h()},h(){Z(i,"class","w-full h-full force-overlap cursor-pointer")},m(c,o){H(c,i,o),N(i,t),e[12](t),N(i,n),N(i,a),e[13](a),e[14](i),l||(s=[q(window,"keydown",e[10]),q(window,"keyup",e[11]),Hn(r=Va.call(null,i,e[15])),q(i,"mousedown",e[16]),q(i,"mouseup",e[17]),q(i,"mousemove",e[18]),q(i,"wheel",e[19],{passive:!0}),q(i,"contextmenu",zo)],l=!0)},p(c,[o]){r&&Pn(r.update)&&o&62&&r.update.call(null,c[15])},i:Re,o:Re,d(c){c&&E(i),e[12](null),e[13](null),e[14](null),l=!1,mi(s)}}}const zo=e=>{e.preventDefault()};function Ro(e,i,t){const n=Ka();let a,{world:r}=i,{theme:l}=i;const s=new xo(r);let c,o,f,u,d=!0,h=!1,m=-1;const g=()=>{cancelAnimationFrame(m),m=requestAnimationFrame(g),h&&(t(5,h=!1),c.render()),f.render()};let _=new Set,v=-1;bi(async()=>{c=new ko(r,l,o,s),f=new To(r,l,u,s),clearInterval(v),v=setInterval(()=>{let k=!1;_.has("[")&&s.cameraZoom!=s.cameraScale(1.04)&&(k=!0),_.has("]")&&s.cameraZoom!=s.cameraScale(.96)&&(k=!0),_.has("ArrowUp")&&(s.cameraTranslate(0,10),k=!0),_.has("ArrowDown")&&(s.cameraTranslate(0,-10),k=!0),_.has("ArrowLeft")&&(s.cameraTranslate(10,0),k=!0),_.has("ArrowRight")&&(s.cameraTranslate(-10,0),k=!0),_.has("s")&&(t(1,s.cameraZoom=Math.pow(2,Math.ceil(Math.log(s.cameraZoom)/Math.log(2))),s),s.cameraScale(1),k=!0),k&&t(5,h=!0)},1e3/60),await c.init(),await f.init(),setTimeout(()=>{s.setSize(o.width,o.height),t(5,h=!0),g()},100)}),Yn(()=>{c.destroy(),f.destroy(),cancelAnimationFrame(m),clearInterval(v)});const x=k=>{_.add(k.key)},w=k=>{_.delete(k.key)};function b(k){St[k?"unshift":"push"](()=>{o=k,t(2,o)})}function S(k){St[k?"unshift":"push"](()=>{u=k,t(3,u)})}function F(k){St[k?"unshift":"push"](()=>{a=k,t(0,a)})}const y=(k,W)=>{t(2,o.width=k,o),t(2,o.height=W,o),t(3,u.width=k,u),t(3,u.height=W,u),s.setSize(k,W),s.cameraScale(1),d&&(s.cameraTranslate(k/2,W/2),t(4,d=!1)),t(5,h=!0)},R=k=>{if(document.pointerLockElement!=a){if(k.button==1)a.requestPointerLock(),k.preventDefault();else if(k.button==0){k.preventDefault();const W=s.cameraPos(k.offsetX,k.offsetY);n("action",{type:"reveal",pos:W}),t(5,h=!0)}else if(k.button==2){k.preventDefault();const W=s.cameraPos(k.offsetX,k.offsetY);n("action",{type:"flag",pos:W}),t(5,h=!0)}else if(k.button==3){k.preventDefault();const W=s.cameraPos(k.offsetX,k.offsetY);n("action",{type:"reset",pos:W}),t(5,h=!0)}}},T=k=>{document.pointerLockElement==a&&k.button==1&&document.exitPointerLock()},A=k=>{document.pointerLockElement==a&&(s.cameraTranslate(k.movementX,k.movementY),t(5,h=!0))},D=k=>{const W=k.deltaY>0?.9:1.1;s.cameraZoom!=s.cameraScale(W)&&t(5,h=!0)};return e.$$set=k=>{"world"in k&&t(8,r=k.world),"theme"in k&&t(9,l=k.theme)},[a,s,o,u,d,h,n,_,r,l,x,w,b,S,F,y,R,T,A,D]}class Co extends he{constructor(i){super(),de(this,i,Ro,Do,le,{world:8,theme:9})}}class Io{constructor(i,t){p(this,"textures");p(this,"src");p(this,"img");this.src=i,this.img=document.createElement("img"),this.img.src=this.src,this.textures=t}awaitLoad(){return new Promise((i,t)=>{if(this.img.naturalWidth!==0)return i();const n=()=>{this.img.removeEventListener("load",n),this.img.removeEventListener("error",a),i()},a=()=>{this.img.removeEventListener("load",n),this.img.removeEventListener("error",a),t()};this.img.addEventListener("load",n),this.img.addEventListener("error",a)})}onLoad(i){this.awaitLoad().then(()=>i(this))}draw(i,t,n,a,r,l){const[s,c,o,f]=this.textures[t];i.drawImage(this.img,s,c,o,f,n,a,r,l)}}class Mo{constructor(){p(this,"volume",1)}playSound(i,t=1){const n=this.soundEffects[i],a=Ht(t*this.volume);if(a<=0)return;const r=document.createElement("audio");r.src=n.src,r.volume=a,r.playbackRate=1+Math.random()*n.variation,r.preservesPitch=!1;const l=()=>{r.removeEventListener("ended",l),r.remove()};r.addEventListener("ended",l),r.play()}}class Zo extends Mo{constructor(){super(...arguments);p(this,"tileset",new Io("/infinite-minesweeper/retro/tileset.png",{null:[0,0,16,16],bomb:[16,0,16,16],explosion1:[16,16,16,16],explosion2:[16,32,16,16],explosion3:[16,48,16,16],explosion4:[16,64,16,16],flag:[32,16,16,16],number_0:[48,0,16,16],number_1:[48,16,16,16],number_2:[48,32,16,16],number_3:[48,48,16,16],number_4:[48,64,16,16],number_5:[48,80,16,16],number_6:[48,96,16,16],number_7:[48,112,16,16],number_8:[48,128,16,16],tile_vanilla_covered:[64,0,16,16],tile_vanilla_revealed:[80,0,16,16],tile_chocolate_covered:[64,16,16,16],tile_chocolate_revealed:[80,16,16,16],tile_waffle_light_covered:[64,32,16,16],tile_waffle_light_revealed:[80,32,16,16],tile_waffle_dark_covered:[96,32,16,16],tile_waffle_dark_revealed:[112,32,16,16],tile_stroopwafel_light_covered:[64,48,16,16],tile_stroopwafel_light_revealed:[80,48,16,16],tile_stroopwafel_dark_covered:[96,48,16,16],tile_stroopwafel_dark_revealed:[112,48,16,16]}));p(this,"soundEffects",{reveal:{src:"/infinite-minesweeper/retro/reveal.wav",variation:.25},unflag:{src:"/infinite-minesweeper/retro/unflag.wav",variation:.25},explosion:{src:"/infinite-minesweeper/retro/explosion.wav",variation:.25}})}async init(){await this.tileset.awaitLoad()}drawNearby(t,n){switch(n.minesNearby(!0)){case 0:break;case 1:this.tileset.draw(t,"number_1",0,0,1,1);break;case 2:this.tileset.draw(t,"number_2",0,0,1,1);break;case 3:this.tileset.draw(t,"number_3",0,0,1,1);break;case 4:this.tileset.draw(t,"number_4",0,0,1,1);break;case 5:this.tileset.draw(t,"number_5",0,0,1,1);break;case 6:this.tileset.draw(t,"number_6",0,0,1,1);break;case 7:this.tileset.draw(t,"number_7",0,0,1,1);break;case 8:this.tileset.draw(t,"number_8",0,0,1,1);break;default:throw new Error("ThemeRetro invalid draw nearby count.")}}drawSingleMineTile(t,n,a,r,l){if(l){this.tileset.draw(t,a,0,0,1,1);return}switch(n.state){case V.Covered:this.tileset.draw(t,a,0,0,1,1);break;case V.Flagged:this.tileset.draw(t,a,0,0,1,1),this.tileset.draw(t,"flag",0,0,1,1);break;case V.Revealed:{this.tileset.draw(t,r,0,0,1,1),n.isMine?this.tileset.draw(t,"bomb",0,0,1,1):this.drawNearby(t,n);break}}}drawForcedTile(t,n,a){switch(n.type){case"vanilla":this.drawSingleMineTile(t,n,"tile_vanilla_covered","tile_vanilla_revealed",a);break;case"chocolate":this.drawSingleMineTile(t,n,"tile_chocolate_covered","tile_chocolate_revealed",a);break;case"waffle":{An(2,n.x,n.y)?this.drawSingleMineTile(t,n,"tile_waffle_dark_covered","tile_waffle_dark_revealed",a):this.drawSingleMineTile(t,n,"tile_waffle_light_covered","tile_waffle_light_revealed",a);break}case"stroopwafel":{An(3,n.x,n.y)?this.drawSingleMineTile(t,n,"tile_stroopwafel_dark_covered","tile_stroopwafel_dark_revealed",a):this.drawSingleMineTile(t,n,"tile_stroopwafel_light_covered","tile_stroopwafel_light_revealed",a);break}}}drawTile(t,n){this.drawForcedTile(t,n,!1)}drawParticle(t,n){switch(t.save(),n.type){case"flag":{t.translate(n.x+.5,n.y+.5),t.rotate(n.r),t.globalAlpha=n.opacity,this.tileset.draw(t,"flag",-.5,-.5,1,1);break}case"explosion":{const a=["explosion1","explosion2","explosion3","explosion4"],r=Math.min(Math.floor(n.lifetime/n.maxLifetime*a.length),a.length-1);this.tileset.draw(t,a[r],n.tile.x,n.tile.y,1,1);break}case"faketile":{t.translate(n.tile.x,n.tile.y),t.globalAlpha=n.opacity,this.drawForcedTile(t,n.tile,!0);break}case"tilereveal":{t.translate(n.x+.5,n.y+.5),t.rotate(n.r),t.translate(-.5,-.5),t.globalAlpha=n.opacity,this.drawForcedTile(t,n.tile,!0);break}}t.globalAlpha=1,t.restore()}}const Lo=tr(.25);function Mn(e){let i,t;return i=new Co({props:{world:e[1],theme:e[2]}}),i.$on("action",e[5]),{c(){ie(i.$$.fragment)},l(n){ne(i.$$.fragment,n)},m(n,a){ae(i,n,a),t=!0},p(n,a){const r={};a&2&&(r.world=n[1]),a&4&&(r.theme=n[2]),i.$set(r)},i(n){t||(U(i.$$.fragment,n),t=!0)},o(n){B(i.$$.fragment,n),t=!1},d(n){re(i,n)}}}function No(e){let i,t,n,a,r=e[1]&&e[2]&&Mn(e);return{c(){r&&r.c(),i=Ee()},l(l){r&&r.l(l),i=Ee()},m(l,s){r&&r.m(l,s),H(l,i,s),t=!0,n||(a=q(window,"beforeunload",e[4]),n=!0)},p(l,[s]){l[1]&&l[2]?r?(r.p(l,s),s&6&&U(r,1)):(r=Mn(l),r.c(),U(r,1),r.m(i.parentNode,i)):r&&(Zt(),B(r,1,1,()=>{r=null}),Lt())},i(l){t||(U(r),t=!0)},o(l){B(r),t=!1},d(l){l&&E(i),r&&r.d(l),n=!1,a()}}}function Uo(e,i,t){let n;ja(e,Lo,o=>t(3,n=o));let{saveSlot:a}=i,r,l=new Zo;bi(async()=>{await l.init(),t(1,r=po(a)),r.addEventListener("sound_unflag",()=>{l.playSound("unflag")}),r.addEventListener("sound_reveal",({data:o})=>{l.playSound("reveal",o/10+.9)}),r.addEventListener("sound_explosion",()=>{l.playSound("explosion")})}),Yn(()=>{location.reload()});const s=()=>{vo(a,r)},c=o=>{o.detail.type=="reveal"?r.reveal(o.detail.pos.x,o.detail.pos.y):o.detail.type=="flag"?r.flag(o.detail.pos.x,o.detail.pos.y):o.detail.type=="reset"&&r.reset(o.detail.pos.x,o.detail.pos.y)};return e.$$set=o=>{"saveSlot"in o&&t(0,a=o.saveSlot)},e.$$.update=()=>{e.$$.dirty&8&&t(2,l.volume=n,l)},[a,r,l,n,s,c]}class Oo extends he{constructor(i){super(),de(this,i,Uo,No,le,{saveSlot:0})}}/**
 * @license lucide-svelte v0.372.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Bo={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":2,"stroke-linecap":"round","stroke-linejoin":"round"},Zn=Bo;function Ln(e,i,t){const n=e.slice();return n[10]=i[t][0],n[11]=i[t][1],n}function ni(e){let i,t=[e[11]],n={};for(let a=0;a<t.length;a+=1)n=Q(n,t[a]);return{c(){i=Xn(e[10]),this.h()},l(a){i=Vn(a,e[10],{}),L(i).forEach(E),this.h()},h(){zt(i,n)},m(a,r){H(a,i,r)},p(a,r){zt(i,n=ut(t,[r&32&&a[11]]))},d(a){a&&E(i)}}}function Nn(e){let i=e[10],t,n=e[10]&&ni(e);return{c(){n&&n.c(),t=Ee()},l(a){n&&n.l(a),t=Ee()},m(a,r){n&&n.m(a,r),H(a,t,r)},p(a,r){a[10]?i?le(i,a[10])?(n.d(1),n=ni(a),i=a[10],n.c(),n.m(t.parentNode,t)):n.p(a,r):(n=ni(a),i=a[10],n.c(),n.m(t.parentNode,t)):i&&(n.d(1),n=null,i=a[10])},d(a){a&&E(t),n&&n.d(a)}}}function Fo(e){let i,t,n,a,r,l=Rt(e[5]),s=[];for(let d=0;d<l.length;d+=1)s[d]=Nn(Ln(e,l,d));const c=e[9].default,o=ft(c,e,e[8],null);let f=[Zn,e[6],{width:e[2]},{height:e[2]},{stroke:e[1]},{"stroke-width":n=e[4]?Number(e[3])*24/Number(e[2]):e[3]},{class:a=`lucide-icon lucide lucide-${e[0]} ${e[7].class??""}`}],u={};for(let d=0;d<f.length;d+=1)u=Q(u,f[d]);return{c(){i=Xn("svg");for(let d=0;d<s.length;d+=1)s[d].c();t=Ee(),o&&o.c(),this.h()},l(d){i=Vn(d,"svg",{width:!0,height:!0,stroke:!0,"stroke-width":!0,class:!0});var h=L(i);for(let m=0;m<s.length;m+=1)s[m].l(h);t=Ee(),o&&o.l(h),h.forEach(E),this.h()},h(){zt(i,u)},m(d,h){H(d,i,h);for(let m=0;m<s.length;m+=1)s[m]&&s[m].m(i,null);N(i,t),o&&o.m(i,null),r=!0},p(d,[h]){if(h&32){l=Rt(d[5]);let m;for(m=0;m<l.length;m+=1){const g=Ln(d,l,m);s[m]?s[m].p(g,h):(s[m]=Nn(g),s[m].c(),s[m].m(i,t))}for(;m<s.length;m+=1)s[m].d(1);s.length=l.length}o&&o.p&&(!r||h&256)&&ct(o,c,d,d[8],r?dt(c,d[8],h,null):ht(d[8]),null),zt(i,u=ut(f,[Zn,h&64&&d[6],(!r||h&4)&&{width:d[2]},(!r||h&4)&&{height:d[2]},(!r||h&2)&&{stroke:d[1]},(!r||h&28&&n!==(n=d[4]?Number(d[3])*24/Number(d[2]):d[3]))&&{"stroke-width":n},(!r||h&129&&a!==(a=`lucide-icon lucide lucide-${d[0]} ${d[7].class??""}`))&&{class:a}]))},i(d){r||(U(o,d),r=!0)},o(d){B(o,d),r=!1},d(d){d&&E(i),Wn(s,d),o&&o.d(d)}}}function $o(e,i,t){const n=["name","color","size","strokeWidth","absoluteStrokeWidth","iconNode"];let a=Mi(i,n),{$$slots:r={},$$scope:l}=i,{name:s}=i,{color:c="currentColor"}=i,{size:o=24}=i,{strokeWidth:f=2}=i,{absoluteStrokeWidth:u=!1}=i,{iconNode:d}=i;return e.$$set=h=>{t(7,i=Q(Q({},i),Ae(h))),t(6,a=Mi(i,n)),"name"in h&&t(0,s=h.name),"color"in h&&t(1,c=h.color),"size"in h&&t(2,o=h.size),"strokeWidth"in h&&t(3,f=h.strokeWidth),"absoluteStrokeWidth"in h&&t(4,u=h.absoluteStrokeWidth),"iconNode"in h&&t(5,d=h.iconNode),"$$scope"in h&&t(8,l=h.$$scope)},i=Ae(i),[s,c,o,f,u,d,a,i,l,r]}class Ii extends he{constructor(i){super(),de(this,i,$o,Fo,le,{name:0,color:1,size:2,strokeWidth:3,absoluteStrokeWidth:4,iconNode:5})}}function Ho(e){let i;const t=e[2].default,n=ft(t,e,e[3],null);return{c(){n&&n.c()},l(a){n&&n.l(a)},m(a,r){n&&n.m(a,r),i=!0},p(a,r){n&&n.p&&(!i||r&8)&&ct(n,t,a,a[3],i?dt(t,a[3],r,null):ht(a[3]),null)},i(a){i||(U(n,a),i=!0)},o(a){B(n,a),i=!1},d(a){n&&n.d(a)}}}function Po(e){let i,t;const n=[{name:"info"},e[1],{iconNode:e[0]}];let a={$$slots:{default:[Ho]},$$scope:{ctx:e}};for(let r=0;r<n.length;r+=1)a=Q(a,n[r]);return i=new Ii({props:a}),{c(){ie(i.$$.fragment)},l(r){ne(i.$$.fragment,r)},m(r,l){ae(i,r,l),t=!0},p(r,[l]){const s=l&3?ut(n,[n[0],l&2&&gi(r[1]),l&1&&{iconNode:r[0]}]):{};l&8&&(s.$$scope={dirty:l,ctx:r}),i.$set(s)},i(r){t||(U(i.$$.fragment,r),t=!0)},o(r){B(i.$$.fragment,r),t=!1},d(r){re(i,r)}}}function Yo(e,i,t){let{$$slots:n={},$$scope:a}=i;const r=[["circle",{cx:"12",cy:"12",r:"10"}],["path",{d:"M12 16v-4"}],["path",{d:"M12 8h.01"}]];return e.$$set=l=>{t(1,i=Q(Q({},i),Ae(l))),"$$scope"in l&&t(3,a=l.$$scope)},i=Ae(i),[r,i,n,a]}class Xo extends he{constructor(i){super(),de(this,i,Yo,Po,le,{})}}function Un(e){let i,t,n,a,r,l,s=e[1]&&On(e);const c=e[3].default,o=ft(c,e,e[2],null);return{c(){i=I("div"),t=I("div"),s&&s.c(),n=be(),a=I("div"),r=I("div"),o&&o.c(),this.h()},l(f){i=M(f,"DIV",{class:!0});var u=L(i);t=M(u,"DIV",{class:!0});var d=L(t);s&&s.l(d),d.forEach(E),n=ge(u),a=M(u,"DIV",{class:!0});var h=L(a);r=M(h,"DIV",{class:!0});var m=L(r);o&&o.l(m),m.forEach(E),h.forEach(E),u.forEach(E),this.h()},h(){Z(t,"class","modal-background -z-10 bg-black bg-opacity-30 shadow-vignette-heavy svelte-pwpa02"),Z(r,"class","pointer-events-auto"),Z(a,"class","modal-content flex justify-center items-center pointer-events-none p-8 svelte-pwpa02"),Z(i,"class","modal fixed top-0 left-0 bottom-0 right-0 grid grid-cols-1 grid-rows-1 svelte-pwpa02")},m(f,u){H(f,i,u),N(i,t),s&&s.m(t,null),N(i,n),N(i,a),N(a,r),o&&o.m(r,null),l=!0},p(f,u){f[1]?s?s.p(f,u):(s=On(f),s.c(),s.m(t,null)):s&&(s.d(1),s=null),o&&o.p&&(!l||u&4)&&ct(o,c,f,f[2],l?dt(c,f[2],u,null):ht(f[2]),null)},i(f){l||(U(o,f),l=!0)},o(f){B(o,f),l=!1},d(f){f&&E(i),s&&s.d(),o&&o.d(f)}}}function On(e){let i,t,n;return{c(){i=I("button"),this.h()},l(a){i=M(a,"BUTTON",{class:!0,"aria-label":!0}),L(i).forEach(E),this.h()},h(){Z(i,"class","w-full h-full"),Z(i,"aria-label","Close Modal")},m(a,r){H(a,i,r),t||(n=q(i,"click",e[4]),t=!0)},p:Re,d(a){a&&E(i),t=!1,n()}}}function Vo(e){let i,t,n=e[0]&&Un(e);return{c(){n&&n.c(),i=Ee()},l(a){n&&n.l(a),i=Ee()},m(a,r){n&&n.m(a,r),H(a,i,r),t=!0},p(a,[r]){a[0]?n?(n.p(a,r),r&1&&U(n,1)):(n=Un(a),n.c(),U(n,1),n.m(i.parentNode,i)):n&&(Zt(),B(n,1,1,()=>{n=null}),Lt())},i(a){t||(U(n),t=!0)},o(a){B(n),t=!1},d(a){a&&E(i),n&&n.d(a)}}}function Wo(e,i,t){let{$$slots:n={},$$scope:a}=i,{visible:r=!1}=i,{closable:l=!0}=i;const s=()=>t(0,r=!1);return e.$$set=c=>{"visible"in c&&t(0,r=c.visible),"closable"in c&&t(1,l=c.closable),"$$scope"in c&&t(2,a=c.$$scope)},[r,l,a,n,s]}class Go extends he{constructor(i){super(),de(this,i,Wo,Vo,le,{visible:0,closable:1})}}function Ko(e){let i;const t=e[2].default,n=ft(t,e,e[3],null);return{c(){n&&n.c()},l(a){n&&n.l(a)},m(a,r){n&&n.m(a,r),i=!0},p(a,r){n&&n.p&&(!i||r&8)&&ct(n,t,a,a[3],i?dt(t,a[3],r,null):ht(a[3]),null)},i(a){i||(U(n,a),i=!0)},o(a){B(n,a),i=!1},d(a){n&&n.d(a)}}}function jo(e){let i,t;const n=[{name:"chevron-left"},e[1],{iconNode:e[0]}];let a={$$slots:{default:[Ko]},$$scope:{ctx:e}};for(let r=0;r<n.length;r+=1)a=Q(a,n[r]);return i=new Ii({props:a}),{c(){ie(i.$$.fragment)},l(r){ne(i.$$.fragment,r)},m(r,l){ae(i,r,l),t=!0},p(r,[l]){const s=l&3?ut(n,[n[0],l&2&&gi(r[1]),l&1&&{iconNode:r[0]}]):{};l&8&&(s.$$scope={dirty:l,ctx:r}),i.$set(s)},i(r){t||(U(i.$$.fragment,r),t=!0)},o(r){B(i.$$.fragment,r),t=!1},d(r){re(i,r)}}}function qo(e,i,t){let{$$slots:n={},$$scope:a}=i;const r=[["path",{d:"m15 18-6-6 6-6"}]];return e.$$set=l=>{t(1,i=Q(Q({},i),Ae(l))),"$$scope"in l&&t(3,a=l.$$scope)},i=Ae(i),[r,i,n,a]}class Jo extends he{constructor(i){super(),de(this,i,qo,jo,le,{})}}function Qo(e){let i;const t=e[2].default,n=ft(t,e,e[3],null);return{c(){n&&n.c()},l(a){n&&n.l(a)},m(a,r){n&&n.m(a,r),i=!0},p(a,r){n&&n.p&&(!i||r&8)&&ct(n,t,a,a[3],i?dt(t,a[3],r,null):ht(a[3]),null)},i(a){i||(U(n,a),i=!0)},o(a){B(n,a),i=!1},d(a){n&&n.d(a)}}}function ef(e){let i,t;const n=[{name:"chevron-right"},e[1],{iconNode:e[0]}];let a={$$slots:{default:[Qo]},$$scope:{ctx:e}};for(let r=0;r<n.length;r+=1)a=Q(a,n[r]);return i=new Ii({props:a}),{c(){ie(i.$$.fragment)},l(r){ne(i.$$.fragment,r)},m(r,l){ae(i,r,l),t=!0},p(r,[l]){const s=l&3?ut(n,[n[0],l&2&&gi(r[1]),l&1&&{iconNode:r[0]}]):{};l&8&&(s.$$scope={dirty:l,ctx:r}),i.$set(s)},i(r){t||(U(i.$$.fragment,r),t=!0)},o(r){B(i.$$.fragment,r),t=!1},d(r){re(i,r)}}}function tf(e,i,t){let{$$slots:n={},$$scope:a}=i;const r=[["path",{d:"m9 18 6-6-6-6"}]];return e.$$set=l=>{t(1,i=Q(Q({},i),Ae(l))),"$$scope"in l&&t(3,a=l.$$scope)},i=Ae(i),[r,i,n,a]}class nf extends he{constructor(i){super(),de(this,i,tf,ef,le,{})}}function af(e){let i,t=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_stroopwafel_screenshot.png" alt="Stroopwafel Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Stroopwafel</h2> <div class="biome-description svelte-1pkhcy2">3x3 checkers of tiles.<br/>
                        Dark checkered sections have 8 mines.<br/>
                        Light checkered sections have 1 mine.</div></div>`;return{c(){i=I("div"),i.innerHTML=t,this.h()},l(n){i=M(n,"DIV",{class:!0,"data-svelte-h":!0}),He(i)!=="svelte-4cbz83"&&(i.innerHTML=t),this.h()},h(){Z(i,"class","biome svelte-1pkhcy2")},m(n,a){H(n,i,a)},d(n){n&&E(i)}}}function rf(e){let i,t=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_waffle_screenshot.png" alt="Waffle Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Waffle</h2> <div class="biome-description svelte-1pkhcy2">2x2 checkers of tiles.<br/>
                        Dark checkered sections have 3 mines.<br/>
                        Light checkered sections have 1 mine.</div></div>`;return{c(){i=I("div"),i.innerHTML=t,this.h()},l(n){i=M(n,"DIV",{class:!0,"data-svelte-h":!0}),He(i)!=="svelte-1ji8mo3"&&(i.innerHTML=t),this.h()},h(){Z(i,"class","biome svelte-1pkhcy2")},m(n,a){H(n,i,a)},d(n){n&&E(i)}}}function lf(e){let i,t=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_chocolate_screenshot.png" alt="Chocolate Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Chocolate</h2> <div class="biome-description svelte-1pkhcy2">The standard Minesweeper rules.
                        <br/>
                        Much more mines than Vanilla biome.</div></div>`;return{c(){i=I("div"),i.innerHTML=t,this.h()},l(n){i=M(n,"DIV",{class:!0,"data-svelte-h":!0}),He(i)!=="svelte-xvgk1u"&&(i.innerHTML=t),this.h()},h(){Z(i,"class","biome svelte-1pkhcy2")},m(n,a){H(n,i,a)},d(n){n&&E(i)}}}function sf(e){let i,t='<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_vanilla_screenshot.png" alt="Vanilla Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Vanilla</h2> <div class="biome-description svelte-1pkhcy2">The standard Minesweeper rules.</div></div>';return{c(){i=I("div"),i.innerHTML=t,this.h()},l(n){i=M(n,"DIV",{class:!0,"data-svelte-h":!0}),He(i)!=="svelte-ic5bha"&&(i.innerHTML=t),this.h()},h(){Z(i,"class","biome svelte-1pkhcy2")},m(n,a){H(n,i,a)},d(n){n&&E(i)}}}function of(e){let i,t,n,a,r,l,s,c,o,f,u,d;function h(_,v){if(_[0]=="Vanilla")return sf;if(_[0]=="Chocolate")return lf;if(_[0]=="Waffle")return rf;if(_[0]=="Stroopwafel")return af}let m=h(e),g=m&&m(e);return l=new Jo({}),o=new nf({}),{c(){i=I("div"),t=I("div"),g&&g.c(),n=be(),a=I("div"),r=I("button"),ie(l.$$.fragment),s=be(),c=I("button"),ie(o.$$.fragment),this.h()},l(_){i=M(_,"DIV",{class:!0});var v=L(i);t=M(v,"DIV",{class:!0});var x=L(t);g&&g.l(x),x.forEach(E),n=ge(v),a=M(v,"DIV",{class:!0});var w=L(a);r=M(w,"BUTTON",{class:!0});var b=L(r);ne(l.$$.fragment,b),b.forEach(E),s=ge(w),c=M(w,"BUTTON",{class:!0});var S=L(c);ne(o.$$.fragment,S),S.forEach(E),w.forEach(E),v.forEach(E),this.h()},h(){Z(t,"class","pointer-events-auto px-12"),Z(r,"class","pointer-events-auto pl-4 hover:-translate-x-1 transition-transform"),Z(c,"class","pointer-events-auto pr-4 hover:translate-x-1 transition-transform"),Z(a,"class","pointer-events-none flex justify-between z-10"),Z(i,"class","w-full h-full force-overlap text-white")},m(_,v){H(_,i,v),N(i,t),g&&g.m(t,null),N(i,n),N(i,a),N(a,r),ae(l,r,null),N(a,s),N(a,c),ae(o,c,null),f=!0,u||(d=[q(r,"click",e[2]),q(c,"click",e[3])],u=!0)},p(_,[v]){m!==(m=h(_))&&(g&&g.d(1),g=m&&m(_),g&&(g.c(),g.m(t,null)))},i(_){f||(U(l.$$.fragment,_),U(o.$$.fragment,_),f=!0)},o(_){B(l.$$.fragment,_),B(o.$$.fragment,_),f=!1},d(_){_&&E(i),g&&g.d(),re(l),re(o),u=!1,mi(d)}}}function ff(e,i,t){const n=["Vanilla","Chocolate","Waffle","Stroopwafel"];let a="Vanilla";function r(c){let o=n.indexOf(a);o+=c=="next"?1:-1,o>=n.length&&(o=0),o<0&&(o=n.length-1),t(0,a=n[o])}return[a,r,c=>{c.preventDefault(),r("prev")},c=>{c.preventDefault(),r("next")}]}class cf extends he{constructor(i){super(),de(this,i,ff,of,le,{})}}function Bn(e,i,t){const n=e.slice();return n[3]=i[t],n}function Fn(e){let i,t=e[3]+"",n,a,r,l,s;function c(){return e[2](e[3])}return{c(){i=I("button"),n=qa(t),a=be(),this.h()},l(o){i=M(o,"BUTTON",{class:!0});var f=L(i);n=Ja(f,t),a=ge(f),f.forEach(E),this.h()},h(){Z(i,"class","tab w-full flex justify-center py-1 px-4 rounded-md svelte-1v0way8"),i.disabled=r=e[3]==e[0],Zi(i,"selected",e[3]==e[0])},m(o,f){H(o,i,f),N(i,n),N(i,a),l||(s=q(i,"click",c),l=!0)},p(o,f){e=o,f&1&&r!==(r=e[3]==e[0])&&(i.disabled=r),f&3&&Zi(i,"selected",e[3]==e[0])},d(o){o&&E(i),l=!1,s()}}}function hf(e){let i,t=`<span>Left Click: Reveal tile
                    <br/>
                    Right Click: Flag tile
                    <br/>
                    Middle Click: Move view
                    <br/>
                    Scroll Wheel: Zoom view
                    <br/> <br/>
                    Arrow Keys: Move view
                    <br/>
                    Open Square Bracket &#39;[&#39;: View zoom In
                    <br/>
                    Close Square Bracket &#39;]&#39;: View zoom Out
                    <br/></span>`;return{c(){i=I("div"),i.innerHTML=t,this.h()},l(n){i=M(n,"DIV",{class:!0,"data-svelte-h":!0}),He(i)!=="svelte-docn7k"&&(i.innerHTML=t),this.h()},h(){Z(i,"class","px-4")},m(n,a){H(n,i,a)},i:Re,o:Re,d(n){n&&E(i)}}}function df(e){let i,t,n;return t=new cf({}),{c(){i=I("div"),ie(t.$$.fragment),this.h()},l(a){i=M(a,"DIV",{class:!0});var r=L(i);ne(t.$$.fragment,r),r.forEach(E),this.h()},h(){Z(i,"class","w-full h-full inline")},m(a,r){H(a,i,r),ae(t,i,null),n=!0},i(a){n||(U(t.$$.fragment,a),n=!0)},o(a){B(t.$$.fragment,a),n=!1},d(a){a&&E(i),re(t)}}}function uf(e){let i,t=`<div><a class="text-2xl font-bold" href="https://vulae.github.io/infinite-minesweeper">Infinite Minesweeper</a> <br/>
                    An infinite twist on Minesweeper that adds biomes that change the rules of the game.</div> <div class="pt-4"><span class="float-right text-xs font-extrabold">*Source code available on
                        <a class="underline" href="https://github.com/Vulae/infinite-minesweeper">GitHub</a></span></div>`;return{c(){i=I("div"),i.innerHTML=t,this.h()},l(n){i=M(n,"DIV",{class:!0,"data-svelte-h":!0}),He(i)!=="svelte-1yloiaf"&&(i.innerHTML=t),this.h()},h(){Z(i,"class","px-4 w-full h-full flex flex-col justify-between")},m(n,a){H(n,i,a)},i:Re,o:Re,d(n){n&&E(i)}}}function _f(e){let i,t,n,a,r,l,s,c,o,f=Rt(e[1]),u=[];for(let g=0;g<f.length;g+=1)u[g]=Fn(Bn(e,f,g));const d=[uf,df,hf],h=[];function m(g,_){return g[0]=="Information"?0:g[0]=="Biomes"?1:g[0]=="Controls"?2:-1}return~(s=m(e))&&(c=h[s]=d[s](e)),{c(){i=I("div"),t=I("div");for(let g=0;g<u.length;g+=1)u[g].c();n=be(),a=I("div"),r=be(),l=I("div"),c&&c.c(),this.h()},l(g){i=M(g,"DIV",{class:!0});var _=L(i);t=M(_,"DIV",{class:!0});var v=L(t);for(let w=0;w<u.length;w+=1)u[w].l(v);v.forEach(E),n=ge(_),a=M(_,"DIV",{class:!0}),L(a).forEach(E),r=ge(_),l=M(_,"DIV",{class:!0});var x=L(l);c&&c.l(x),x.forEach(E),_.forEach(E),this.h()},h(){Z(t,"class","px-4 grid grid-flow-col gap-4 items-center font-bold"),Z(a,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full"),Z(l,"class","w-[32rem] h-64 py-2 font-semibold"),Z(i,"class","grid px-4 py-2 rounded-2xl bg-white bg-opacity-50")},m(g,_){H(g,i,_),N(i,t);for(let v=0;v<u.length;v+=1)u[v]&&u[v].m(t,null);N(i,n),N(i,a),N(i,r),N(i,l),~s&&h[s].m(l,null),o=!0},p(g,[_]){if(_&3){f=Rt(g[1]);let x;for(x=0;x<f.length;x+=1){const w=Bn(g,f,x);u[x]?u[x].p(w,_):(u[x]=Fn(w),u[x].c(),u[x].m(t,null))}for(;x<u.length;x+=1)u[x].d(1);u.length=f.length}let v=s;s=m(g),s!==v&&(c&&(Zt(),B(h[v],1,1,()=>{h[v]=null}),Lt()),~s?(c=h[s],c||(c=h[s]=d[s](g),c.c()),U(c,1),c.m(l,null)):c=null)},i(g){o||(U(c),o=!0)},o(g){B(c),o=!1},d(g){g&&E(i),Wn(u,g),~s&&h[s].d()}}}function mf(e,i,t){const n=["Information","Biomes","Controls"];let a="Information";return[a,n,l=>t(0,a=l)]}class bf extends he{constructor(i){super(),de(this,i,mf,_f,le,{})}}function $n(e){let i,t;return i=new Oo({props:{saveSlot:e[0]}}),{c(){ie(i.$$.fragment)},l(n){ne(i.$$.fragment,n)},m(n,a){ae(i,n,a),t=!0},p(n,a){const r={};a&1&&(r.saveSlot=n[0]),i.$set(r)},i(n){t||(U(i.$$.fragment,n),t=!0)},o(n){B(i.$$.fragment,n),t=!1},d(n){re(i,n)}}}function gf(e){let i,t;return i=new bf({}),{c(){ie(i.$$.fragment)},l(n){ne(i.$$.fragment,n)},m(n,a){ae(i,n,a),t=!0},i(n){t||(U(i.$$.fragment,n),t=!0)},o(n){B(i.$$.fragment,n),t=!1},d(n){re(i,n)}}}function wf(e){let i,t,n,a,r,l,s,c,o,f,u,d,h,m,g,_=e[0]&&$n(e);c=new Xo({});function v(w){e[6](w)}let x={$$slots:{default:[gf]},$$scope:{ctx:e}};return e[3]!==void 0&&(x.visible=e[3]),u=new Go({props:x}),St.push(()=>er(u,"visible",v)),{c(){i=I("div"),t=I("div"),_&&_.c(),n=be(),a=I("div"),r=I("div"),l=I("div"),s=I("button"),ie(c.$$.fragment),f=be(),ie(u.$$.fragment),this.h()},l(w){i=M(w,"DIV",{class:!0});var b=L(i);t=M(b,"DIV",{class:!0});var S=L(t);_&&_.l(S),S.forEach(E),n=ge(b),a=M(b,"DIV",{class:!0});var F=L(a);r=M(F,"DIV",{class:!0});var y=L(r);l=M(y,"DIV",{class:!0});var R=L(l);s=M(R,"BUTTON",{class:!0});var T=L(s);ne(c.$$.fragment,T),T.forEach(E),R.forEach(E),y.forEach(E),F.forEach(E),b.forEach(E),f=ge(w),ne(u.$$.fragment,w),this.h()},h(){Z(t,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1"),Z(s,"class","rounded-full drop-shadow-sm"),Z(l,"class","pointer-events-auto flex items-center gap-2 rounded-full bg-white bg-opacity-30 backdrop-blur-md shadow-lg text-white font-bold stroke-[3]"),we(l,"flex-direction",e[1]=="vertical"?"column":"row"),we(l,"padding",e[1]=="vertical"?"1rem 0.5rem":"0.5rem 1rem"),Z(r,"class","w-full h-full flex items-center p-4"),we(r,"flex-direction",e[1]=="vertical"?"row":"column"),we(r,"justify-content",e[2]=="start"?"start":"end"),Z(a,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1 pointer-events-none"),Z(i,"class","w-screen h-screen grid grid-cols-1 grid-rows-1")},m(w,b){H(w,i,b),N(i,t),_&&_.m(t,null),N(i,n),N(i,a),N(a,r),N(r,l),N(l,s),ae(c,s,null),H(w,f,b),ae(u,w,b),h=!0,m||(g=[q(s,"click",e[4]),Hn(o=Va.call(null,a,e[5]))],m=!0)},p(w,[b]){w[0]?_?(_.p(w,b),b&1&&U(_,1)):(_=$n(w),_.c(),U(_,1),_.m(t,null)):_&&(Zt(),B(_,1,1,()=>{_=null}),Lt()),b&2&&we(l,"flex-direction",w[1]=="vertical"?"column":"row"),b&2&&we(l,"padding",w[1]=="vertical"?"1rem 0.5rem":"0.5rem 1rem"),b&2&&we(r,"flex-direction",w[1]=="vertical"?"row":"column"),b&4&&we(r,"justify-content",w[2]=="start"?"start":"end"),o&&Pn(o.update)&&b&6&&o.update.call(null,w[5]);const S={};b&128&&(S.$$scope={dirty:b,ctx:w}),!d&&b&8&&(d=!0,S.visible=w[3],Qa(()=>d=!1)),u.$set(S)},i(w){h||(U(_),U(c.$$.fragment,w),U(u.$$.fragment,w),h=!0)},o(w){B(_),B(c.$$.fragment,w),B(u.$$.fragment,w),h=!1},d(w){w&&(E(i),E(f)),_&&_.d(),re(c),re(u,w),m=!1,mi(g)}}}function pf(e,i,t){let n=null;bi(()=>{const f=new URL(location.href);t(0,n=f.searchParams.get("saveSlot")??"save")});let a="vertical",r="end",l=!0;const s=()=>t(3,l=!0),c=(f,u)=>{t(1,a=f>u?"vertical":"horizontal"),t(2,r=f>u?"end":"start")};function o(f){l=f,t(3,l)}return[n,a,r,l,s,c,o]}class Ef extends he{constructor(i){super(),de(this,i,pf,wf,le,{})}}export{Ef as component};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
