var Va=Object.defineProperty;var Wa=(e,n,t)=>n in e?Va(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t;var S=(e,n,t)=>(Wa(e,typeof n!="symbol"?n+"":n,t),t);import{s as ae,e as Z,c as M,b as L,f as y,p as C,i as F,S as K,T as Bi,H as Fi,n as De,E as dn,U as Ga,o as un,V as Hi,r as Pi,l as ve,z as st,W as q,w as Yi,x as Xi,X as Tt,h as U,B as ft,C as ct,D as ht,Y as Vi,Z as In,_ as ke,a as xe,g as ye,y as Fe,t as Ka,d as ja,$ as Cn,q as _e,a0 as qa}from"../chunks/scheduler.CQ95xRcU.js";import{S as fe,i as ce,a as N,g as Ct,t as O,c as Zt,b as ee,d as te,m as ne,e as ie,f as Ja}from"../chunks/index.BKYeFALl.js";function zt(e){return(e==null?void 0:e.length)!==void 0?e:Array.from(e)}function dt(e,n){const t={},i={},a={$$scope:1};let r=e.length;for(;r--;){const l=e[r],o=n[r];if(o){for(const c in l)c in o||(i[c]=1);for(const c in o)a[c]||(t[c]=o[c],a[c]=1);e[r]=o}else for(const c in l)a[c]=1}for(const l in i)l in t||(t[l]=void 0);return t}function _n(e){return typeof e=="object"&&e!==null?e:{}}/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */const Qa=4,Zn=0,Mn=1,er=2;function He(e){let n=e.length;for(;--n>=0;)e[n]=0}const tr=0,Wi=1,nr=2,ir=3,ar=258,bn=29,ut=256,Qe=ut+1+bn,$e=30,mn=19,Gi=2*Qe+1,Ae=15,Ot=16,rr=7,gn=256,Ki=16,ji=17,qi=18,en=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),At=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),lr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),Ji=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),or=512,de=new Array((Qe+2)*2);He(de);const je=new Array($e*2);He(je);const et=new Array(or);He(et);const tt=new Array(ar-ir+1);He(tt);const wn=new Array(bn);He(wn);const Dt=new Array($e);He(Dt);function Bt(e,n,t,i,a){this.static_tree=e,this.extra_bits=n,this.extra_base=t,this.elems=i,this.max_length=a,this.has_stree=e&&e.length}let Qi,ea,ta;function Ft(e,n){this.dyn_tree=e,this.max_code=0,this.stat_desc=n}const na=e=>e<256?et[e]:et[256+(e>>>7)],nt=(e,n)=>{e.pending_buf[e.pending++]=n&255,e.pending_buf[e.pending++]=n>>>8&255},W=(e,n,t)=>{e.bi_valid>Ot-t?(e.bi_buf|=n<<e.bi_valid&65535,nt(e,e.bi_buf),e.bi_buf=n>>Ot-e.bi_valid,e.bi_valid+=t-Ot):(e.bi_buf|=n<<e.bi_valid&65535,e.bi_valid+=t)},le=(e,n,t)=>{W(e,t[n*2],t[n*2+1])},ia=(e,n)=>{let t=0;do t|=e&1,e>>>=1,t<<=1;while(--n>0);return t>>>1},sr=e=>{e.bi_valid===16?(nt(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=e.bi_buf&255,e.bi_buf>>=8,e.bi_valid-=8)},fr=(e,n)=>{const t=n.dyn_tree,i=n.max_code,a=n.stat_desc.static_tree,r=n.stat_desc.has_stree,l=n.stat_desc.extra_bits,o=n.stat_desc.extra_base,c=n.stat_desc.max_length;let s,f,u,d,h,_,g=0;for(d=0;d<=Ae;d++)e.bl_count[d]=0;for(t[e.heap[e.heap_max]*2+1]=0,s=e.heap_max+1;s<Gi;s++)f=e.heap[s],d=t[t[f*2+1]*2+1]+1,d>c&&(d=c,g++),t[f*2+1]=d,!(f>i)&&(e.bl_count[d]++,h=0,f>=o&&(h=l[f-o]),_=t[f*2],e.opt_len+=_*(d+h),r&&(e.static_len+=_*(a[f*2+1]+h)));if(g!==0){do{for(d=c-1;e.bl_count[d]===0;)d--;e.bl_count[d]--,e.bl_count[d+1]+=2,e.bl_count[c]--,g-=2}while(g>0);for(d=c;d!==0;d--)for(f=e.bl_count[d];f!==0;)u=e.heap[--s],!(u>i)&&(t[u*2+1]!==d&&(e.opt_len+=(d-t[u*2+1])*t[u*2],t[u*2+1]=d),f--)}},aa=(e,n,t)=>{const i=new Array(Ae+1);let a=0,r,l;for(r=1;r<=Ae;r++)a=a+t[r-1]<<1,i[r]=a;for(l=0;l<=n;l++){let o=e[l*2+1];o!==0&&(e[l*2]=ia(i[o]++,o))}},cr=()=>{let e,n,t,i,a;const r=new Array(Ae+1);for(t=0,i=0;i<bn-1;i++)for(wn[i]=t,e=0;e<1<<en[i];e++)tt[t++]=i;for(tt[t-1]=i,a=0,i=0;i<16;i++)for(Dt[i]=a,e=0;e<1<<At[i];e++)et[a++]=i;for(a>>=7;i<$e;i++)for(Dt[i]=a<<7,e=0;e<1<<At[i]-7;e++)et[256+a++]=i;for(n=0;n<=Ae;n++)r[n]=0;for(e=0;e<=143;)de[e*2+1]=8,e++,r[8]++;for(;e<=255;)de[e*2+1]=9,e++,r[9]++;for(;e<=279;)de[e*2+1]=7,e++,r[7]++;for(;e<=287;)de[e*2+1]=8,e++,r[8]++;for(aa(de,Qe+1,r),e=0;e<$e;e++)je[e*2+1]=5,je[e*2]=ia(e,5);Qi=new Bt(de,en,ut+1,Qe,Ae),ea=new Bt(je,At,0,$e,Ae),ta=new Bt(new Array(0),lr,0,mn,rr)},ra=e=>{let n;for(n=0;n<Qe;n++)e.dyn_ltree[n*2]=0;for(n=0;n<$e;n++)e.dyn_dtree[n*2]=0;for(n=0;n<mn;n++)e.bl_tree[n*2]=0;e.dyn_ltree[gn*2]=1,e.opt_len=e.static_len=0,e.sym_next=e.matches=0},la=e=>{e.bi_valid>8?nt(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0},Nn=(e,n,t,i)=>{const a=n*2,r=t*2;return e[a]<e[r]||e[a]===e[r]&&i[n]<=i[t]},Ht=(e,n,t)=>{const i=e.heap[t];let a=t<<1;for(;a<=e.heap_len&&(a<e.heap_len&&Nn(n,e.heap[a+1],e.heap[a],e.depth)&&a++,!Nn(n,i,e.heap[a],e.depth));)e.heap[t]=e.heap[a],t=a,a<<=1;e.heap[t]=i},Ln=(e,n,t)=>{let i,a,r=0,l,o;if(e.sym_next!==0)do i=e.pending_buf[e.sym_buf+r++]&255,i+=(e.pending_buf[e.sym_buf+r++]&255)<<8,a=e.pending_buf[e.sym_buf+r++],i===0?le(e,a,n):(l=tt[a],le(e,l+ut+1,n),o=en[l],o!==0&&(a-=wn[l],W(e,a,o)),i--,l=na(i),le(e,l,t),o=At[l],o!==0&&(i-=Dt[l],W(e,i,o)));while(r<e.sym_next);le(e,gn,n)},tn=(e,n)=>{const t=n.dyn_tree,i=n.stat_desc.static_tree,a=n.stat_desc.has_stree,r=n.stat_desc.elems;let l,o,c=-1,s;for(e.heap_len=0,e.heap_max=Gi,l=0;l<r;l++)t[l*2]!==0?(e.heap[++e.heap_len]=c=l,e.depth[l]=0):t[l*2+1]=0;for(;e.heap_len<2;)s=e.heap[++e.heap_len]=c<2?++c:0,t[s*2]=1,e.depth[s]=0,e.opt_len--,a&&(e.static_len-=i[s*2+1]);for(n.max_code=c,l=e.heap_len>>1;l>=1;l--)Ht(e,t,l);s=r;do l=e.heap[1],e.heap[1]=e.heap[e.heap_len--],Ht(e,t,1),o=e.heap[1],e.heap[--e.heap_max]=l,e.heap[--e.heap_max]=o,t[s*2]=t[l*2]+t[o*2],e.depth[s]=(e.depth[l]>=e.depth[o]?e.depth[l]:e.depth[o])+1,t[l*2+1]=t[o*2+1]=s,e.heap[1]=s++,Ht(e,t,1);while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],fr(e,n),aa(t,c,e.bl_count)},$n=(e,n,t)=>{let i,a=-1,r,l=n[0*2+1],o=0,c=7,s=4;for(l===0&&(c=138,s=3),n[(t+1)*2+1]=65535,i=0;i<=t;i++)r=l,l=n[(i+1)*2+1],!(++o<c&&r===l)&&(o<s?e.bl_tree[r*2]+=o:r!==0?(r!==a&&e.bl_tree[r*2]++,e.bl_tree[Ki*2]++):o<=10?e.bl_tree[ji*2]++:e.bl_tree[qi*2]++,o=0,a=r,l===0?(c=138,s=3):r===l?(c=6,s=3):(c=7,s=4))},Un=(e,n,t)=>{let i,a=-1,r,l=n[0*2+1],o=0,c=7,s=4;for(l===0&&(c=138,s=3),i=0;i<=t;i++)if(r=l,l=n[(i+1)*2+1],!(++o<c&&r===l)){if(o<s)do le(e,r,e.bl_tree);while(--o!==0);else r!==0?(r!==a&&(le(e,r,e.bl_tree),o--),le(e,Ki,e.bl_tree),W(e,o-3,2)):o<=10?(le(e,ji,e.bl_tree),W(e,o-3,3)):(le(e,qi,e.bl_tree),W(e,o-11,7));o=0,a=r,l===0?(c=138,s=3):r===l?(c=6,s=3):(c=7,s=4)}},hr=e=>{let n;for($n(e,e.dyn_ltree,e.l_desc.max_code),$n(e,e.dyn_dtree,e.d_desc.max_code),tn(e,e.bl_desc),n=mn-1;n>=3&&e.bl_tree[Ji[n]*2+1]===0;n--);return e.opt_len+=3*(n+1)+5+5+4,n},dr=(e,n,t,i)=>{let a;for(W(e,n-257,5),W(e,t-1,5),W(e,i-4,4),a=0;a<i;a++)W(e,e.bl_tree[Ji[a]*2+1],3);Un(e,e.dyn_ltree,n-1),Un(e,e.dyn_dtree,t-1)},ur=e=>{let n=4093624447,t;for(t=0;t<=31;t++,n>>>=1)if(n&1&&e.dyn_ltree[t*2]!==0)return Zn;if(e.dyn_ltree[9*2]!==0||e.dyn_ltree[10*2]!==0||e.dyn_ltree[13*2]!==0)return Mn;for(t=32;t<ut;t++)if(e.dyn_ltree[t*2]!==0)return Mn;return Zn};let On=!1;const _r=e=>{On||(cr(),On=!0),e.l_desc=new Ft(e.dyn_ltree,Qi),e.d_desc=new Ft(e.dyn_dtree,ea),e.bl_desc=new Ft(e.bl_tree,ta),e.bi_buf=0,e.bi_valid=0,ra(e)},oa=(e,n,t,i)=>{W(e,(tr<<1)+(i?1:0),3),la(e),nt(e,t),nt(e,~t),t&&e.pending_buf.set(e.window.subarray(n,n+t),e.pending),e.pending+=t},br=e=>{W(e,Wi<<1,3),le(e,gn,de),sr(e)},mr=(e,n,t,i)=>{let a,r,l=0;e.level>0?(e.strm.data_type===er&&(e.strm.data_type=ur(e)),tn(e,e.l_desc),tn(e,e.d_desc),l=hr(e),a=e.opt_len+3+7>>>3,r=e.static_len+3+7>>>3,r<=a&&(a=r)):a=r=t+5,t+4<=a&&n!==-1?oa(e,n,t,i):e.strategy===Qa||r===a?(W(e,(Wi<<1)+(i?1:0),3),Ln(e,de,je)):(W(e,(nr<<1)+(i?1:0),3),dr(e,e.l_desc.max_code+1,e.d_desc.max_code+1,l+1),Ln(e,e.dyn_ltree,e.dyn_dtree)),ra(e),i&&la(e)},gr=(e,n,t)=>(e.pending_buf[e.sym_buf+e.sym_next++]=n,e.pending_buf[e.sym_buf+e.sym_next++]=n>>8,e.pending_buf[e.sym_buf+e.sym_next++]=t,n===0?e.dyn_ltree[t*2]++:(e.matches++,n--,e.dyn_ltree[(tt[t]+ut+1)*2]++,e.dyn_dtree[na(n)*2]++),e.sym_next===e.sym_end);var wr=_r,pr=oa,vr=mr,kr=gr,xr=br,yr={_tr_init:wr,_tr_stored_block:pr,_tr_flush_block:vr,_tr_tally:kr,_tr_align:xr};const Er=(e,n,t,i)=>{let a=e&65535|0,r=e>>>16&65535|0,l=0;for(;t!==0;){l=t>2e3?2e3:t,t-=l;do a=a+n[i++]|0,r=r+a|0;while(--l);a%=65521,r%=65521}return a|r<<16|0};var it=Er;const Ar=()=>{let e,n=[];for(var t=0;t<256;t++){e=t;for(var i=0;i<8;i++)e=e&1?3988292384^e>>>1:e>>>1;n[t]=e}return n},Sr=new Uint32Array(Ar()),Tr=(e,n,t,i)=>{const a=Sr,r=i+t;e^=-1;for(let l=i;l<r;l++)e=e>>>8^a[(e^n[l])&255];return e^-1};var H=Tr,Re={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},Ze={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:zr,_tr_stored_block:nn,_tr_flush_block:Dr,_tr_tally:ge,_tr_align:Rr}=yr,{Z_NO_FLUSH:we,Z_PARTIAL_FLUSH:Ir,Z_FULL_FLUSH:Cr,Z_FINISH:J,Z_BLOCK:Bn,Z_OK:P,Z_STREAM_END:Fn,Z_STREAM_ERROR:oe,Z_DATA_ERROR:Zr,Z_BUF_ERROR:Pt,Z_DEFAULT_COMPRESSION:Mr,Z_FILTERED:Nr,Z_HUFFMAN_ONLY:pt,Z_RLE:Lr,Z_FIXED:$r,Z_DEFAULT_STRATEGY:Ur,Z_UNKNOWN:Or,Z_DEFLATED:Mt}=Ze,Br=9,Fr=15,Hr=8,Pr=29,Yr=256,an=Yr+1+Pr,Xr=30,Vr=19,Wr=2*an+1,Gr=15,z=3,me=258,se=me+z+1,Kr=32,Oe=42,pn=57,rn=69,ln=73,on=91,sn=103,Se=113,We=666,V=1,Pe=2,Ie=3,Ye=4,jr=3,Te=(e,n)=>(e.msg=Re[n],n),Hn=e=>e*2-(e>4?9:0),be=e=>{let n=e.length;for(;--n>=0;)e[n]=0},qr=e=>{let n,t,i,a=e.w_size;n=e.hash_size,i=n;do t=e.head[--i],e.head[i]=t>=a?t-a:0;while(--n);n=a,i=n;do t=e.prev[--i],e.prev[i]=t>=a?t-a:0;while(--n)};let Jr=(e,n,t)=>(n<<e.hash_shift^t)&e.hash_mask,pe=Jr;const G=e=>{const n=e.state;let t=n.pending;t>e.avail_out&&(t=e.avail_out),t!==0&&(e.output.set(n.pending_buf.subarray(n.pending_out,n.pending_out+t),e.next_out),e.next_out+=t,n.pending_out+=t,e.total_out+=t,e.avail_out-=t,n.pending-=t,n.pending===0&&(n.pending_out=0))},j=(e,n)=>{Dr(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,n),e.block_start=e.strstart,G(e.strm)},R=(e,n)=>{e.pending_buf[e.pending++]=n},Ve=(e,n)=>{e.pending_buf[e.pending++]=n>>>8&255,e.pending_buf[e.pending++]=n&255},fn=(e,n,t,i)=>{let a=e.avail_in;return a>i&&(a=i),a===0?0:(e.avail_in-=a,n.set(e.input.subarray(e.next_in,e.next_in+a),t),e.state.wrap===1?e.adler=it(e.adler,n,a,t):e.state.wrap===2&&(e.adler=H(e.adler,n,a,t)),e.next_in+=a,e.total_in+=a,a)},sa=(e,n)=>{let t=e.max_chain_length,i=e.strstart,a,r,l=e.prev_length,o=e.nice_match;const c=e.strstart>e.w_size-se?e.strstart-(e.w_size-se):0,s=e.window,f=e.w_mask,u=e.prev,d=e.strstart+me;let h=s[i+l-1],_=s[i+l];e.prev_length>=e.good_match&&(t>>=2),o>e.lookahead&&(o=e.lookahead);do if(a=n,!(s[a+l]!==_||s[a+l-1]!==h||s[a]!==s[i]||s[++a]!==s[i+1])){i+=2,a++;do;while(s[++i]===s[++a]&&s[++i]===s[++a]&&s[++i]===s[++a]&&s[++i]===s[++a]&&s[++i]===s[++a]&&s[++i]===s[++a]&&s[++i]===s[++a]&&s[++i]===s[++a]&&i<d);if(r=me-(d-i),i=d-me,r>l){if(e.match_start=n,l=r,r>=o)break;h=s[i+l-1],_=s[i+l]}}while((n=u[n&f])>c&&--t!==0);return l<=e.lookahead?l:e.lookahead},Be=e=>{const n=e.w_size;let t,i,a;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=n+(n-se)&&(e.window.set(e.window.subarray(n,n+n-i),0),e.match_start-=n,e.strstart-=n,e.block_start-=n,e.insert>e.strstart&&(e.insert=e.strstart),qr(e),i+=n),e.strm.avail_in===0)break;if(t=fn(e.strm,e.window,e.strstart+e.lookahead,i),e.lookahead+=t,e.lookahead+e.insert>=z)for(a=e.strstart-e.insert,e.ins_h=e.window[a],e.ins_h=pe(e,e.ins_h,e.window[a+1]);e.insert&&(e.ins_h=pe(e,e.ins_h,e.window[a+z-1]),e.prev[a&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=a,a++,e.insert--,!(e.lookahead+e.insert<z)););}while(e.lookahead<se&&e.strm.avail_in!==0)},fa=(e,n)=>{let t=e.pending_buf_size-5>e.w_size?e.w_size:e.pending_buf_size-5,i,a,r,l=0,o=e.strm.avail_in;do{if(i=65535,r=e.bi_valid+42>>3,e.strm.avail_out<r||(r=e.strm.avail_out-r,a=e.strstart-e.block_start,i>a+e.strm.avail_in&&(i=a+e.strm.avail_in),i>r&&(i=r),i<t&&(i===0&&n!==J||n===we||i!==a+e.strm.avail_in)))break;l=n===J&&i===a+e.strm.avail_in?1:0,nn(e,0,0,l),e.pending_buf[e.pending-4]=i,e.pending_buf[e.pending-3]=i>>8,e.pending_buf[e.pending-2]=~i,e.pending_buf[e.pending-1]=~i>>8,G(e.strm),a&&(a>i&&(a=i),e.strm.output.set(e.window.subarray(e.block_start,e.block_start+a),e.strm.next_out),e.strm.next_out+=a,e.strm.avail_out-=a,e.strm.total_out+=a,e.block_start+=a,i-=a),i&&(fn(e.strm,e.strm.output,e.strm.next_out,i),e.strm.next_out+=i,e.strm.avail_out-=i,e.strm.total_out+=i)}while(l===0);return o-=e.strm.avail_in,o&&(o>=e.w_size?(e.matches=2,e.window.set(e.strm.input.subarray(e.strm.next_in-e.w_size,e.strm.next_in),0),e.strstart=e.w_size,e.insert=e.strstart):(e.window_size-e.strstart<=o&&(e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,e.insert>e.strstart&&(e.insert=e.strstart)),e.window.set(e.strm.input.subarray(e.strm.next_in-o,e.strm.next_in),e.strstart),e.strstart+=o,e.insert+=o>e.w_size-e.insert?e.w_size-e.insert:o),e.block_start=e.strstart),e.high_water<e.strstart&&(e.high_water=e.strstart),l?Ye:n!==we&&n!==J&&e.strm.avail_in===0&&e.strstart===e.block_start?Pe:(r=e.window_size-e.strstart,e.strm.avail_in>r&&e.block_start>=e.w_size&&(e.block_start-=e.w_size,e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,r+=e.w_size,e.insert>e.strstart&&(e.insert=e.strstart)),r>e.strm.avail_in&&(r=e.strm.avail_in),r&&(fn(e.strm,e.window,e.strstart,r),e.strstart+=r,e.insert+=r>e.w_size-e.insert?e.w_size-e.insert:r),e.high_water<e.strstart&&(e.high_water=e.strstart),r=e.bi_valid+42>>3,r=e.pending_buf_size-r>65535?65535:e.pending_buf_size-r,t=r>e.w_size?e.w_size:r,a=e.strstart-e.block_start,(a>=t||(a||n===J)&&n!==we&&e.strm.avail_in===0&&a<=r)&&(i=a>r?r:a,l=n===J&&e.strm.avail_in===0&&i===a?1:0,nn(e,e.block_start,i,l),e.block_start+=i,G(e.strm)),l?Ie:V)},Yt=(e,n)=>{let t,i;for(;;){if(e.lookahead<se){if(Be(e),e.lookahead<se&&n===we)return V;if(e.lookahead===0)break}if(t=0,e.lookahead>=z&&(e.ins_h=pe(e,e.ins_h,e.window[e.strstart+z-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),t!==0&&e.strstart-t<=e.w_size-se&&(e.match_length=sa(e,t)),e.match_length>=z)if(i=ge(e,e.strstart-e.match_start,e.match_length-z),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=z){e.match_length--;do e.strstart++,e.ins_h=pe(e,e.ins_h,e.window[e.strstart+z-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart;while(--e.match_length!==0);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=pe(e,e.ins_h,e.window[e.strstart+1]);else i=ge(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(i&&(j(e,!1),e.strm.avail_out===0))return V}return e.insert=e.strstart<z-1?e.strstart:z-1,n===J?(j(e,!0),e.strm.avail_out===0?Ie:Ye):e.sym_next&&(j(e,!1),e.strm.avail_out===0)?V:Pe},Ne=(e,n)=>{let t,i,a;for(;;){if(e.lookahead<se){if(Be(e),e.lookahead<se&&n===we)return V;if(e.lookahead===0)break}if(t=0,e.lookahead>=z&&(e.ins_h=pe(e,e.ins_h,e.window[e.strstart+z-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=z-1,t!==0&&e.prev_length<e.max_lazy_match&&e.strstart-t<=e.w_size-se&&(e.match_length=sa(e,t),e.match_length<=5&&(e.strategy===Nr||e.match_length===z&&e.strstart-e.match_start>4096)&&(e.match_length=z-1)),e.prev_length>=z&&e.match_length<=e.prev_length){a=e.strstart+e.lookahead-z,i=ge(e,e.strstart-1-e.prev_match,e.prev_length-z),e.lookahead-=e.prev_length-1,e.prev_length-=2;do++e.strstart<=a&&(e.ins_h=pe(e,e.ins_h,e.window[e.strstart+z-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart);while(--e.prev_length!==0);if(e.match_available=0,e.match_length=z-1,e.strstart++,i&&(j(e,!1),e.strm.avail_out===0))return V}else if(e.match_available){if(i=ge(e,0,e.window[e.strstart-1]),i&&j(e,!1),e.strstart++,e.lookahead--,e.strm.avail_out===0)return V}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(i=ge(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<z-1?e.strstart:z-1,n===J?(j(e,!0),e.strm.avail_out===0?Ie:Ye):e.sym_next&&(j(e,!1),e.strm.avail_out===0)?V:Pe},Qr=(e,n)=>{let t,i,a,r;const l=e.window;for(;;){if(e.lookahead<=me){if(Be(e),e.lookahead<=me&&n===we)return V;if(e.lookahead===0)break}if(e.match_length=0,e.lookahead>=z&&e.strstart>0&&(a=e.strstart-1,i=l[a],i===l[++a]&&i===l[++a]&&i===l[++a])){r=e.strstart+me;do;while(i===l[++a]&&i===l[++a]&&i===l[++a]&&i===l[++a]&&i===l[++a]&&i===l[++a]&&i===l[++a]&&i===l[++a]&&a<r);e.match_length=me-(r-a),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=z?(t=ge(e,1,e.match_length-z),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(t=ge(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),t&&(j(e,!1),e.strm.avail_out===0))return V}return e.insert=0,n===J?(j(e,!0),e.strm.avail_out===0?Ie:Ye):e.sym_next&&(j(e,!1),e.strm.avail_out===0)?V:Pe},el=(e,n)=>{let t;for(;;){if(e.lookahead===0&&(Be(e),e.lookahead===0)){if(n===we)return V;break}if(e.match_length=0,t=ge(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,t&&(j(e,!1),e.strm.avail_out===0))return V}return e.insert=0,n===J?(j(e,!0),e.strm.avail_out===0?Ie:Ye):e.sym_next&&(j(e,!1),e.strm.avail_out===0)?V:Pe};function re(e,n,t,i,a){this.good_length=e,this.max_lazy=n,this.nice_length=t,this.max_chain=i,this.func=a}const Ge=[new re(0,0,0,0,fa),new re(4,4,8,4,Yt),new re(4,5,16,8,Yt),new re(4,6,32,32,Yt),new re(4,4,16,16,Ne),new re(8,16,32,32,Ne),new re(8,16,128,128,Ne),new re(8,32,128,256,Ne),new re(32,128,258,1024,Ne),new re(32,258,258,4096,Ne)],tl=e=>{e.window_size=2*e.w_size,be(e.head),e.max_lazy_match=Ge[e.level].max_lazy,e.good_match=Ge[e.level].good_length,e.nice_match=Ge[e.level].nice_length,e.max_chain_length=Ge[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=z-1,e.match_available=0,e.ins_h=0};function nl(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=Mt,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(Wr*2),this.dyn_dtree=new Uint16Array((2*Xr+1)*2),this.bl_tree=new Uint16Array((2*Vr+1)*2),be(this.dyn_ltree),be(this.dyn_dtree),be(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(Gr+1),this.heap=new Uint16Array(2*an+1),be(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(2*an+1),be(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const _t=e=>{if(!e)return 1;const n=e.state;return!n||n.strm!==e||n.status!==Oe&&n.status!==pn&&n.status!==rn&&n.status!==ln&&n.status!==on&&n.status!==sn&&n.status!==Se&&n.status!==We?1:0},ca=e=>{if(_t(e))return Te(e,oe);e.total_in=e.total_out=0,e.data_type=Or;const n=e.state;return n.pending=0,n.pending_out=0,n.wrap<0&&(n.wrap=-n.wrap),n.status=n.wrap===2?pn:n.wrap?Oe:Se,e.adler=n.wrap===2?0:1,n.last_flush=-2,zr(n),P},ha=e=>{const n=ca(e);return n===P&&tl(e.state),n},il=(e,n)=>_t(e)||e.state.wrap!==2?oe:(e.state.gzhead=n,P),da=(e,n,t,i,a,r)=>{if(!e)return oe;let l=1;if(n===Mr&&(n=6),i<0?(l=0,i=-i):i>15&&(l=2,i-=16),a<1||a>Br||t!==Mt||i<8||i>15||n<0||n>9||r<0||r>$r||i===8&&l!==1)return Te(e,oe);i===8&&(i=9);const o=new nl;return e.state=o,o.strm=e,o.status=Oe,o.wrap=l,o.gzhead=null,o.w_bits=i,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=a+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+z-1)/z),o.window=new Uint8Array(o.w_size*2),o.head=new Uint16Array(o.hash_size),o.prev=new Uint16Array(o.w_size),o.lit_bufsize=1<<a+6,o.pending_buf_size=o.lit_bufsize*4,o.pending_buf=new Uint8Array(o.pending_buf_size),o.sym_buf=o.lit_bufsize,o.sym_end=(o.lit_bufsize-1)*3,o.level=n,o.strategy=r,o.method=t,ha(e)},al=(e,n)=>da(e,n,Mt,Fr,Hr,Ur),rl=(e,n)=>{if(_t(e)||n>Bn||n<0)return e?Te(e,oe):oe;const t=e.state;if(!e.output||e.avail_in!==0&&!e.input||t.status===We&&n!==J)return Te(e,e.avail_out===0?Pt:oe);const i=t.last_flush;if(t.last_flush=n,t.pending!==0){if(G(e),e.avail_out===0)return t.last_flush=-1,P}else if(e.avail_in===0&&Hn(n)<=Hn(i)&&n!==J)return Te(e,Pt);if(t.status===We&&e.avail_in!==0)return Te(e,Pt);if(t.status===Oe&&t.wrap===0&&(t.status=Se),t.status===Oe){let a=Mt+(t.w_bits-8<<4)<<8,r=-1;if(t.strategy>=pt||t.level<2?r=0:t.level<6?r=1:t.level===6?r=2:r=3,a|=r<<6,t.strstart!==0&&(a|=Kr),a+=31-a%31,Ve(t,a),t.strstart!==0&&(Ve(t,e.adler>>>16),Ve(t,e.adler&65535)),e.adler=1,t.status=Se,G(e),t.pending!==0)return t.last_flush=-1,P}if(t.status===pn){if(e.adler=0,R(t,31),R(t,139),R(t,8),t.gzhead)R(t,(t.gzhead.text?1:0)+(t.gzhead.hcrc?2:0)+(t.gzhead.extra?4:0)+(t.gzhead.name?8:0)+(t.gzhead.comment?16:0)),R(t,t.gzhead.time&255),R(t,t.gzhead.time>>8&255),R(t,t.gzhead.time>>16&255),R(t,t.gzhead.time>>24&255),R(t,t.level===9?2:t.strategy>=pt||t.level<2?4:0),R(t,t.gzhead.os&255),t.gzhead.extra&&t.gzhead.extra.length&&(R(t,t.gzhead.extra.length&255),R(t,t.gzhead.extra.length>>8&255)),t.gzhead.hcrc&&(e.adler=H(e.adler,t.pending_buf,t.pending,0)),t.gzindex=0,t.status=rn;else if(R(t,0),R(t,0),R(t,0),R(t,0),R(t,0),R(t,t.level===9?2:t.strategy>=pt||t.level<2?4:0),R(t,jr),t.status=Se,G(e),t.pending!==0)return t.last_flush=-1,P}if(t.status===rn){if(t.gzhead.extra){let a=t.pending,r=(t.gzhead.extra.length&65535)-t.gzindex;for(;t.pending+r>t.pending_buf_size;){let o=t.pending_buf_size-t.pending;if(t.pending_buf.set(t.gzhead.extra.subarray(t.gzindex,t.gzindex+o),t.pending),t.pending=t.pending_buf_size,t.gzhead.hcrc&&t.pending>a&&(e.adler=H(e.adler,t.pending_buf,t.pending-a,a)),t.gzindex+=o,G(e),t.pending!==0)return t.last_flush=-1,P;a=0,r-=o}let l=new Uint8Array(t.gzhead.extra);t.pending_buf.set(l.subarray(t.gzindex,t.gzindex+r),t.pending),t.pending+=r,t.gzhead.hcrc&&t.pending>a&&(e.adler=H(e.adler,t.pending_buf,t.pending-a,a)),t.gzindex=0}t.status=ln}if(t.status===ln){if(t.gzhead.name){let a=t.pending,r;do{if(t.pending===t.pending_buf_size){if(t.gzhead.hcrc&&t.pending>a&&(e.adler=H(e.adler,t.pending_buf,t.pending-a,a)),G(e),t.pending!==0)return t.last_flush=-1,P;a=0}t.gzindex<t.gzhead.name.length?r=t.gzhead.name.charCodeAt(t.gzindex++)&255:r=0,R(t,r)}while(r!==0);t.gzhead.hcrc&&t.pending>a&&(e.adler=H(e.adler,t.pending_buf,t.pending-a,a)),t.gzindex=0}t.status=on}if(t.status===on){if(t.gzhead.comment){let a=t.pending,r;do{if(t.pending===t.pending_buf_size){if(t.gzhead.hcrc&&t.pending>a&&(e.adler=H(e.adler,t.pending_buf,t.pending-a,a)),G(e),t.pending!==0)return t.last_flush=-1,P;a=0}t.gzindex<t.gzhead.comment.length?r=t.gzhead.comment.charCodeAt(t.gzindex++)&255:r=0,R(t,r)}while(r!==0);t.gzhead.hcrc&&t.pending>a&&(e.adler=H(e.adler,t.pending_buf,t.pending-a,a))}t.status=sn}if(t.status===sn){if(t.gzhead.hcrc){if(t.pending+2>t.pending_buf_size&&(G(e),t.pending!==0))return t.last_flush=-1,P;R(t,e.adler&255),R(t,e.adler>>8&255),e.adler=0}if(t.status=Se,G(e),t.pending!==0)return t.last_flush=-1,P}if(e.avail_in!==0||t.lookahead!==0||n!==we&&t.status!==We){let a=t.level===0?fa(t,n):t.strategy===pt?el(t,n):t.strategy===Lr?Qr(t,n):Ge[t.level].func(t,n);if((a===Ie||a===Ye)&&(t.status=We),a===V||a===Ie)return e.avail_out===0&&(t.last_flush=-1),P;if(a===Pe&&(n===Ir?Rr(t):n!==Bn&&(nn(t,0,0,!1),n===Cr&&(be(t.head),t.lookahead===0&&(t.strstart=0,t.block_start=0,t.insert=0))),G(e),e.avail_out===0))return t.last_flush=-1,P}return n!==J?P:t.wrap<=0?Fn:(t.wrap===2?(R(t,e.adler&255),R(t,e.adler>>8&255),R(t,e.adler>>16&255),R(t,e.adler>>24&255),R(t,e.total_in&255),R(t,e.total_in>>8&255),R(t,e.total_in>>16&255),R(t,e.total_in>>24&255)):(Ve(t,e.adler>>>16),Ve(t,e.adler&65535)),G(e),t.wrap>0&&(t.wrap=-t.wrap),t.pending!==0?P:Fn)},ll=e=>{if(_t(e))return oe;const n=e.state.status;return e.state=null,n===Se?Te(e,Zr):P},ol=(e,n)=>{let t=n.length;if(_t(e))return oe;const i=e.state,a=i.wrap;if(a===2||a===1&&i.status!==Oe||i.lookahead)return oe;if(a===1&&(e.adler=it(e.adler,n,t,0)),i.wrap=0,t>=i.w_size){a===0&&(be(i.head),i.strstart=0,i.block_start=0,i.insert=0);let c=new Uint8Array(i.w_size);c.set(n.subarray(t-i.w_size,t),0),n=c,t=i.w_size}const r=e.avail_in,l=e.next_in,o=e.input;for(e.avail_in=t,e.next_in=0,e.input=n,Be(i);i.lookahead>=z;){let c=i.strstart,s=i.lookahead-(z-1);do i.ins_h=pe(i,i.ins_h,i.window[c+z-1]),i.prev[c&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=c,c++;while(--s);i.strstart=c,i.lookahead=z-1,Be(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=z-1,i.match_available=0,e.next_in=l,e.input=o,e.avail_in=r,i.wrap=a,P};var sl=al,fl=da,cl=ha,hl=ca,dl=il,ul=rl,_l=ll,bl=ol,ml="pako deflate (from Nodeca project)",qe={deflateInit:sl,deflateInit2:fl,deflateReset:cl,deflateResetKeep:hl,deflateSetHeader:dl,deflate:ul,deflateEnd:_l,deflateSetDictionary:bl,deflateInfo:ml};const gl=(e,n)=>Object.prototype.hasOwnProperty.call(e,n);var wl=function(e){const n=Array.prototype.slice.call(arguments,1);for(;n.length;){const t=n.shift();if(t){if(typeof t!="object")throw new TypeError(t+"must be non-object");for(const i in t)gl(t,i)&&(e[i]=t[i])}}return e},pl=e=>{let n=0;for(let i=0,a=e.length;i<a;i++)n+=e[i].length;const t=new Uint8Array(n);for(let i=0,a=0,r=e.length;i<r;i++){let l=e[i];t.set(l,a),a+=l.length}return t},Nt={assign:wl,flattenChunks:pl};let ua=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{ua=!1}const at=new Uint8Array(256);for(let e=0;e<256;e++)at[e]=e>=252?6:e>=248?5:e>=240?4:e>=224?3:e>=192?2:1;at[254]=at[254]=1;var vl=e=>{if(typeof TextEncoder=="function"&&TextEncoder.prototype.encode)return new TextEncoder().encode(e);let n,t,i,a,r,l=e.length,o=0;for(a=0;a<l;a++)t=e.charCodeAt(a),(t&64512)===55296&&a+1<l&&(i=e.charCodeAt(a+1),(i&64512)===56320&&(t=65536+(t-55296<<10)+(i-56320),a++)),o+=t<128?1:t<2048?2:t<65536?3:4;for(n=new Uint8Array(o),r=0,a=0;r<o;a++)t=e.charCodeAt(a),(t&64512)===55296&&a+1<l&&(i=e.charCodeAt(a+1),(i&64512)===56320&&(t=65536+(t-55296<<10)+(i-56320),a++)),t<128?n[r++]=t:t<2048?(n[r++]=192|t>>>6,n[r++]=128|t&63):t<65536?(n[r++]=224|t>>>12,n[r++]=128|t>>>6&63,n[r++]=128|t&63):(n[r++]=240|t>>>18,n[r++]=128|t>>>12&63,n[r++]=128|t>>>6&63,n[r++]=128|t&63);return n};const kl=(e,n)=>{if(n<65534&&e.subarray&&ua)return String.fromCharCode.apply(null,e.length===n?e:e.subarray(0,n));let t="";for(let i=0;i<n;i++)t+=String.fromCharCode(e[i]);return t};var xl=(e,n)=>{const t=n||e.length;if(typeof TextDecoder=="function"&&TextDecoder.prototype.decode)return new TextDecoder().decode(e.subarray(0,n));let i,a;const r=new Array(t*2);for(a=0,i=0;i<t;){let l=e[i++];if(l<128){r[a++]=l;continue}let o=at[l];if(o>4){r[a++]=65533,i+=o-1;continue}for(l&=o===2?31:o===3?15:7;o>1&&i<t;)l=l<<6|e[i++]&63,o--;if(o>1){r[a++]=65533;continue}l<65536?r[a++]=l:(l-=65536,r[a++]=55296|l>>10&1023,r[a++]=56320|l&1023)}return kl(r,a)},yl=(e,n)=>{n=n||e.length,n>e.length&&(n=e.length);let t=n-1;for(;t>=0&&(e[t]&192)===128;)t--;return t<0||t===0?n:t+at[e[t]]>n?t:n},rt={string2buf:vl,buf2string:xl,utf8border:yl};function El(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}var _a=El;const ba=Object.prototype.toString,{Z_NO_FLUSH:Al,Z_SYNC_FLUSH:Sl,Z_FULL_FLUSH:Tl,Z_FINISH:zl,Z_OK:Rt,Z_STREAM_END:Dl,Z_DEFAULT_COMPRESSION:Rl,Z_DEFAULT_STRATEGY:Il,Z_DEFLATED:Cl}=Ze;function bt(e){this.options=Nt.assign({level:Rl,method:Cl,chunkSize:16384,windowBits:15,memLevel:8,strategy:Il},e||{});let n=this.options;n.raw&&n.windowBits>0?n.windowBits=-n.windowBits:n.gzip&&n.windowBits>0&&n.windowBits<16&&(n.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new _a,this.strm.avail_out=0;let t=qe.deflateInit2(this.strm,n.level,n.method,n.windowBits,n.memLevel,n.strategy);if(t!==Rt)throw new Error(Re[t]);if(n.header&&qe.deflateSetHeader(this.strm,n.header),n.dictionary){let i;if(typeof n.dictionary=="string"?i=rt.string2buf(n.dictionary):ba.call(n.dictionary)==="[object ArrayBuffer]"?i=new Uint8Array(n.dictionary):i=n.dictionary,t=qe.deflateSetDictionary(this.strm,i),t!==Rt)throw new Error(Re[t]);this._dict_set=!0}}bt.prototype.push=function(e,n){const t=this.strm,i=this.options.chunkSize;let a,r;if(this.ended)return!1;for(n===~~n?r=n:r=n===!0?zl:Al,typeof e=="string"?t.input=rt.string2buf(e):ba.call(e)==="[object ArrayBuffer]"?t.input=new Uint8Array(e):t.input=e,t.next_in=0,t.avail_in=t.input.length;;){if(t.avail_out===0&&(t.output=new Uint8Array(i),t.next_out=0,t.avail_out=i),(r===Sl||r===Tl)&&t.avail_out<=6){this.onData(t.output.subarray(0,t.next_out)),t.avail_out=0;continue}if(a=qe.deflate(t,r),a===Dl)return t.next_out>0&&this.onData(t.output.subarray(0,t.next_out)),a=qe.deflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===Rt;if(t.avail_out===0){this.onData(t.output);continue}if(r>0&&t.next_out>0){this.onData(t.output.subarray(0,t.next_out)),t.avail_out=0;continue}if(t.avail_in===0)break}return!0};bt.prototype.onData=function(e){this.chunks.push(e)};bt.prototype.onEnd=function(e){e===Rt&&(this.result=Nt.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};function vn(e,n){const t=new bt(n);if(t.push(e,!0),t.err)throw t.msg||Re[t.err];return t.result}function Zl(e,n){return n=n||{},n.raw=!0,vn(e,n)}function Ml(e,n){return n=n||{},n.gzip=!0,vn(e,n)}var Nl=bt,Ll=vn,$l=Zl,Ul=Ml,Ol=Ze,Bl={Deflate:Nl,deflate:Ll,deflateRaw:$l,gzip:Ul,constants:Ol};const vt=16209,Fl=16191;var Hl=function(n,t){let i,a,r,l,o,c,s,f,u,d,h,_,g,m,v,k,p,b,w,D,x,I,A,E;const T=n.state;i=n.next_in,A=n.input,a=i+(n.avail_in-5),r=n.next_out,E=n.output,l=r-(t-n.avail_out),o=r+(n.avail_out-257),c=T.dmax,s=T.wsize,f=T.whave,u=T.wnext,d=T.window,h=T.hold,_=T.bits,g=T.lencode,m=T.distcode,v=(1<<T.lenbits)-1,k=(1<<T.distbits)-1;e:do{_<15&&(h+=A[i++]<<_,_+=8,h+=A[i++]<<_,_+=8),p=g[h&v];t:for(;;){if(b=p>>>24,h>>>=b,_-=b,b=p>>>16&255,b===0)E[r++]=p&65535;else if(b&16){w=p&65535,b&=15,b&&(_<b&&(h+=A[i++]<<_,_+=8),w+=h&(1<<b)-1,h>>>=b,_-=b),_<15&&(h+=A[i++]<<_,_+=8,h+=A[i++]<<_,_+=8),p=m[h&k];n:for(;;){if(b=p>>>24,h>>>=b,_-=b,b=p>>>16&255,b&16){if(D=p&65535,b&=15,_<b&&(h+=A[i++]<<_,_+=8,_<b&&(h+=A[i++]<<_,_+=8)),D+=h&(1<<b)-1,D>c){n.msg="invalid distance too far back",T.mode=vt;break e}if(h>>>=b,_-=b,b=r-l,D>b){if(b=D-b,b>f&&T.sane){n.msg="invalid distance too far back",T.mode=vt;break e}if(x=0,I=d,u===0){if(x+=s-b,b<w){w-=b;do E[r++]=d[x++];while(--b);x=r-D,I=E}}else if(u<b){if(x+=s+u-b,b-=u,b<w){w-=b;do E[r++]=d[x++];while(--b);if(x=0,u<w){b=u,w-=b;do E[r++]=d[x++];while(--b);x=r-D,I=E}}}else if(x+=u-b,b<w){w-=b;do E[r++]=d[x++];while(--b);x=r-D,I=E}for(;w>2;)E[r++]=I[x++],E[r++]=I[x++],E[r++]=I[x++],w-=3;w&&(E[r++]=I[x++],w>1&&(E[r++]=I[x++]))}else{x=r-D;do E[r++]=E[x++],E[r++]=E[x++],E[r++]=E[x++],w-=3;while(w>2);w&&(E[r++]=E[x++],w>1&&(E[r++]=E[x++]))}}else if(b&64){n.msg="invalid distance code",T.mode=vt;break e}else{p=m[(p&65535)+(h&(1<<b)-1)];continue n}break}}else if(b&64)if(b&32){T.mode=Fl;break e}else{n.msg="invalid literal/length code",T.mode=vt;break e}else{p=g[(p&65535)+(h&(1<<b)-1)];continue t}break}}while(i<a&&r<o);w=_>>3,i-=w,_-=w<<3,h&=(1<<_)-1,n.next_in=i,n.next_out=r,n.avail_in=i<a?5+(a-i):5-(i-a),n.avail_out=r<o?257+(o-r):257-(r-o),T.hold=h,T.bits=_};const Le=15,Pn=852,Yn=592,Xn=0,Xt=1,Vn=2,Pl=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),Yl=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),Xl=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),Vl=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),Wl=(e,n,t,i,a,r,l,o)=>{const c=o.bits;let s=0,f=0,u=0,d=0,h=0,_=0,g=0,m=0,v=0,k=0,p,b,w,D,x,I=null,A;const E=new Uint16Array(Le+1),T=new Uint16Array(Le+1);let Ee=null,Rn,gt,wt;for(s=0;s<=Le;s++)E[s]=0;for(f=0;f<i;f++)E[n[t+f]]++;for(h=c,d=Le;d>=1&&E[d]===0;d--);if(h>d&&(h=d),d===0)return a[r++]=1<<24|64<<16|0,a[r++]=1<<24|64<<16|0,o.bits=1,0;for(u=1;u<d&&E[u]===0;u++);for(h<u&&(h=u),m=1,s=1;s<=Le;s++)if(m<<=1,m-=E[s],m<0)return-1;if(m>0&&(e===Xn||d!==1))return-1;for(T[1]=0,s=1;s<Le;s++)T[s+1]=T[s]+E[s];for(f=0;f<i;f++)n[t+f]!==0&&(l[T[n[t+f]]++]=f);if(e===Xn?(I=Ee=l,A=20):e===Xt?(I=Pl,Ee=Yl,A=257):(I=Xl,Ee=Vl,A=0),k=0,f=0,s=u,x=r,_=h,g=0,w=-1,v=1<<h,D=v-1,e===Xt&&v>Pn||e===Vn&&v>Yn)return 1;for(;;){Rn=s-g,l[f]+1<A?(gt=0,wt=l[f]):l[f]>=A?(gt=Ee[l[f]-A],wt=I[l[f]-A]):(gt=96,wt=0),p=1<<s-g,b=1<<_,u=b;do b-=p,a[x+(k>>g)+b]=Rn<<24|gt<<16|wt|0;while(b!==0);for(p=1<<s-1;k&p;)p>>=1;if(p!==0?(k&=p-1,k+=p):k=0,f++,--E[s]===0){if(s===d)break;s=n[t+l[f]]}if(s>h&&(k&D)!==w){for(g===0&&(g=h),x+=u,_=s-g,m=1<<_;_+g<d&&(m-=E[_+g],!(m<=0));)_++,m<<=1;if(v+=1<<_,e===Xt&&v>Pn||e===Vn&&v>Yn)return 1;w=k&D,a[w]=h<<24|_<<16|x-r|0}}return k!==0&&(a[x+k]=s-g<<24|64<<16|0),o.bits=h,0};var Je=Wl;const Gl=0,ma=1,ga=2,{Z_FINISH:Wn,Z_BLOCK:Kl,Z_TREES:kt,Z_OK:Ce,Z_STREAM_END:jl,Z_NEED_DICT:ql,Z_STREAM_ERROR:Q,Z_DATA_ERROR:wa,Z_MEM_ERROR:pa,Z_BUF_ERROR:Jl,Z_DEFLATED:Gn}=Ze,Lt=16180,Kn=16181,jn=16182,qn=16183,Jn=16184,Qn=16185,ei=16186,ti=16187,ni=16188,ii=16189,It=16190,he=16191,Vt=16192,ai=16193,Wt=16194,ri=16195,li=16196,oi=16197,si=16198,xt=16199,yt=16200,fi=16201,ci=16202,hi=16203,di=16204,ui=16205,Gt=16206,_i=16207,bi=16208,$=16209,va=16210,ka=16211,Ql=852,eo=592,to=15,no=to,mi=e=>(e>>>24&255)+(e>>>8&65280)+((e&65280)<<8)+((e&255)<<24);function io(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Me=e=>{if(!e)return 1;const n=e.state;return!n||n.strm!==e||n.mode<Lt||n.mode>ka?1:0},xa=e=>{if(Me(e))return Q;const n=e.state;return e.total_in=e.total_out=n.total=0,e.msg="",n.wrap&&(e.adler=n.wrap&1),n.mode=Lt,n.last=0,n.havedict=0,n.flags=-1,n.dmax=32768,n.head=null,n.hold=0,n.bits=0,n.lencode=n.lendyn=new Int32Array(Ql),n.distcode=n.distdyn=new Int32Array(eo),n.sane=1,n.back=-1,Ce},ya=e=>{if(Me(e))return Q;const n=e.state;return n.wsize=0,n.whave=0,n.wnext=0,xa(e)},Ea=(e,n)=>{let t;if(Me(e))return Q;const i=e.state;return n<0?(t=0,n=-n):(t=(n>>4)+5,n<48&&(n&=15)),n&&(n<8||n>15)?Q:(i.window!==null&&i.wbits!==n&&(i.window=null),i.wrap=t,i.wbits=n,ya(e))},Aa=(e,n)=>{if(!e)return Q;const t=new io;e.state=t,t.strm=e,t.window=null,t.mode=Lt;const i=Ea(e,n);return i!==Ce&&(e.state=null),i},ao=e=>Aa(e,no);let gi=!0,Kt,jt;const ro=e=>{if(gi){Kt=new Int32Array(512),jt=new Int32Array(32);let n=0;for(;n<144;)e.lens[n++]=8;for(;n<256;)e.lens[n++]=9;for(;n<280;)e.lens[n++]=7;for(;n<288;)e.lens[n++]=8;for(Je(ma,e.lens,0,288,Kt,0,e.work,{bits:9}),n=0;n<32;)e.lens[n++]=5;Je(ga,e.lens,0,32,jt,0,e.work,{bits:5}),gi=!1}e.lencode=Kt,e.lenbits=9,e.distcode=jt,e.distbits=5},Sa=(e,n,t,i)=>{let a;const r=e.state;return r.window===null&&(r.wsize=1<<r.wbits,r.wnext=0,r.whave=0,r.window=new Uint8Array(r.wsize)),i>=r.wsize?(r.window.set(n.subarray(t-r.wsize,t),0),r.wnext=0,r.whave=r.wsize):(a=r.wsize-r.wnext,a>i&&(a=i),r.window.set(n.subarray(t-i,t-i+a),r.wnext),i-=a,i?(r.window.set(n.subarray(t-i,t),0),r.wnext=i,r.whave=r.wsize):(r.wnext+=a,r.wnext===r.wsize&&(r.wnext=0),r.whave<r.wsize&&(r.whave+=a))),0},lo=(e,n)=>{let t,i,a,r,l,o,c,s,f,u,d,h,_,g,m=0,v,k,p,b,w,D,x,I;const A=new Uint8Array(4);let E,T;const Ee=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(Me(e)||!e.output||!e.input&&e.avail_in!==0)return Q;t=e.state,t.mode===he&&(t.mode=Vt),l=e.next_out,a=e.output,c=e.avail_out,r=e.next_in,i=e.input,o=e.avail_in,s=t.hold,f=t.bits,u=o,d=c,I=Ce;e:for(;;)switch(t.mode){case Lt:if(t.wrap===0){t.mode=Vt;break}for(;f<16;){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}if(t.wrap&2&&s===35615){t.wbits===0&&(t.wbits=15),t.check=0,A[0]=s&255,A[1]=s>>>8&255,t.check=H(t.check,A,2,0),s=0,f=0,t.mode=Kn;break}if(t.head&&(t.head.done=!1),!(t.wrap&1)||(((s&255)<<8)+(s>>8))%31){e.msg="incorrect header check",t.mode=$;break}if((s&15)!==Gn){e.msg="unknown compression method",t.mode=$;break}if(s>>>=4,f-=4,x=(s&15)+8,t.wbits===0&&(t.wbits=x),x>15||x>t.wbits){e.msg="invalid window size",t.mode=$;break}t.dmax=1<<t.wbits,t.flags=0,e.adler=t.check=1,t.mode=s&512?ii:he,s=0,f=0;break;case Kn:for(;f<16;){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}if(t.flags=s,(t.flags&255)!==Gn){e.msg="unknown compression method",t.mode=$;break}if(t.flags&57344){e.msg="unknown header flags set",t.mode=$;break}t.head&&(t.head.text=s>>8&1),t.flags&512&&t.wrap&4&&(A[0]=s&255,A[1]=s>>>8&255,t.check=H(t.check,A,2,0)),s=0,f=0,t.mode=jn;case jn:for(;f<32;){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}t.head&&(t.head.time=s),t.flags&512&&t.wrap&4&&(A[0]=s&255,A[1]=s>>>8&255,A[2]=s>>>16&255,A[3]=s>>>24&255,t.check=H(t.check,A,4,0)),s=0,f=0,t.mode=qn;case qn:for(;f<16;){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}t.head&&(t.head.xflags=s&255,t.head.os=s>>8),t.flags&512&&t.wrap&4&&(A[0]=s&255,A[1]=s>>>8&255,t.check=H(t.check,A,2,0)),s=0,f=0,t.mode=Jn;case Jn:if(t.flags&1024){for(;f<16;){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}t.length=s,t.head&&(t.head.extra_len=s),t.flags&512&&t.wrap&4&&(A[0]=s&255,A[1]=s>>>8&255,t.check=H(t.check,A,2,0)),s=0,f=0}else t.head&&(t.head.extra=null);t.mode=Qn;case Qn:if(t.flags&1024&&(h=t.length,h>o&&(h=o),h&&(t.head&&(x=t.head.extra_len-t.length,t.head.extra||(t.head.extra=new Uint8Array(t.head.extra_len)),t.head.extra.set(i.subarray(r,r+h),x)),t.flags&512&&t.wrap&4&&(t.check=H(t.check,i,h,r)),o-=h,r+=h,t.length-=h),t.length))break e;t.length=0,t.mode=ei;case ei:if(t.flags&2048){if(o===0)break e;h=0;do x=i[r+h++],t.head&&x&&t.length<65536&&(t.head.name+=String.fromCharCode(x));while(x&&h<o);if(t.flags&512&&t.wrap&4&&(t.check=H(t.check,i,h,r)),o-=h,r+=h,x)break e}else t.head&&(t.head.name=null);t.length=0,t.mode=ti;case ti:if(t.flags&4096){if(o===0)break e;h=0;do x=i[r+h++],t.head&&x&&t.length<65536&&(t.head.comment+=String.fromCharCode(x));while(x&&h<o);if(t.flags&512&&t.wrap&4&&(t.check=H(t.check,i,h,r)),o-=h,r+=h,x)break e}else t.head&&(t.head.comment=null);t.mode=ni;case ni:if(t.flags&512){for(;f<16;){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}if(t.wrap&4&&s!==(t.check&65535)){e.msg="header crc mismatch",t.mode=$;break}s=0,f=0}t.head&&(t.head.hcrc=t.flags>>9&1,t.head.done=!0),e.adler=t.check=0,t.mode=he;break;case ii:for(;f<32;){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}e.adler=t.check=mi(s),s=0,f=0,t.mode=It;case It:if(t.havedict===0)return e.next_out=l,e.avail_out=c,e.next_in=r,e.avail_in=o,t.hold=s,t.bits=f,ql;e.adler=t.check=1,t.mode=he;case he:if(n===Kl||n===kt)break e;case Vt:if(t.last){s>>>=f&7,f-=f&7,t.mode=Gt;break}for(;f<3;){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}switch(t.last=s&1,s>>>=1,f-=1,s&3){case 0:t.mode=ai;break;case 1:if(ro(t),t.mode=xt,n===kt){s>>>=2,f-=2;break e}break;case 2:t.mode=li;break;case 3:e.msg="invalid block type",t.mode=$}s>>>=2,f-=2;break;case ai:for(s>>>=f&7,f-=f&7;f<32;){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}if((s&65535)!==(s>>>16^65535)){e.msg="invalid stored block lengths",t.mode=$;break}if(t.length=s&65535,s=0,f=0,t.mode=Wt,n===kt)break e;case Wt:t.mode=ri;case ri:if(h=t.length,h){if(h>o&&(h=o),h>c&&(h=c),h===0)break e;a.set(i.subarray(r,r+h),l),o-=h,r+=h,c-=h,l+=h,t.length-=h;break}t.mode=he;break;case li:for(;f<14;){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}if(t.nlen=(s&31)+257,s>>>=5,f-=5,t.ndist=(s&31)+1,s>>>=5,f-=5,t.ncode=(s&15)+4,s>>>=4,f-=4,t.nlen>286||t.ndist>30){e.msg="too many length or distance symbols",t.mode=$;break}t.have=0,t.mode=oi;case oi:for(;t.have<t.ncode;){for(;f<3;){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}t.lens[Ee[t.have++]]=s&7,s>>>=3,f-=3}for(;t.have<19;)t.lens[Ee[t.have++]]=0;if(t.lencode=t.lendyn,t.lenbits=7,E={bits:t.lenbits},I=Je(Gl,t.lens,0,19,t.lencode,0,t.work,E),t.lenbits=E.bits,I){e.msg="invalid code lengths set",t.mode=$;break}t.have=0,t.mode=si;case si:for(;t.have<t.nlen+t.ndist;){for(;m=t.lencode[s&(1<<t.lenbits)-1],v=m>>>24,k=m>>>16&255,p=m&65535,!(v<=f);){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}if(p<16)s>>>=v,f-=v,t.lens[t.have++]=p;else{if(p===16){for(T=v+2;f<T;){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}if(s>>>=v,f-=v,t.have===0){e.msg="invalid bit length repeat",t.mode=$;break}x=t.lens[t.have-1],h=3+(s&3),s>>>=2,f-=2}else if(p===17){for(T=v+3;f<T;){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}s>>>=v,f-=v,x=0,h=3+(s&7),s>>>=3,f-=3}else{for(T=v+7;f<T;){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}s>>>=v,f-=v,x=0,h=11+(s&127),s>>>=7,f-=7}if(t.have+h>t.nlen+t.ndist){e.msg="invalid bit length repeat",t.mode=$;break}for(;h--;)t.lens[t.have++]=x}}if(t.mode===$)break;if(t.lens[256]===0){e.msg="invalid code -- missing end-of-block",t.mode=$;break}if(t.lenbits=9,E={bits:t.lenbits},I=Je(ma,t.lens,0,t.nlen,t.lencode,0,t.work,E),t.lenbits=E.bits,I){e.msg="invalid literal/lengths set",t.mode=$;break}if(t.distbits=6,t.distcode=t.distdyn,E={bits:t.distbits},I=Je(ga,t.lens,t.nlen,t.ndist,t.distcode,0,t.work,E),t.distbits=E.bits,I){e.msg="invalid distances set",t.mode=$;break}if(t.mode=xt,n===kt)break e;case xt:t.mode=yt;case yt:if(o>=6&&c>=258){e.next_out=l,e.avail_out=c,e.next_in=r,e.avail_in=o,t.hold=s,t.bits=f,Hl(e,d),l=e.next_out,a=e.output,c=e.avail_out,r=e.next_in,i=e.input,o=e.avail_in,s=t.hold,f=t.bits,t.mode===he&&(t.back=-1);break}for(t.back=0;m=t.lencode[s&(1<<t.lenbits)-1],v=m>>>24,k=m>>>16&255,p=m&65535,!(v<=f);){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}if(k&&!(k&240)){for(b=v,w=k,D=p;m=t.lencode[D+((s&(1<<b+w)-1)>>b)],v=m>>>24,k=m>>>16&255,p=m&65535,!(b+v<=f);){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}s>>>=b,f-=b,t.back+=b}if(s>>>=v,f-=v,t.back+=v,t.length=p,k===0){t.mode=ui;break}if(k&32){t.back=-1,t.mode=he;break}if(k&64){e.msg="invalid literal/length code",t.mode=$;break}t.extra=k&15,t.mode=fi;case fi:if(t.extra){for(T=t.extra;f<T;){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}t.length+=s&(1<<t.extra)-1,s>>>=t.extra,f-=t.extra,t.back+=t.extra}t.was=t.length,t.mode=ci;case ci:for(;m=t.distcode[s&(1<<t.distbits)-1],v=m>>>24,k=m>>>16&255,p=m&65535,!(v<=f);){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}if(!(k&240)){for(b=v,w=k,D=p;m=t.distcode[D+((s&(1<<b+w)-1)>>b)],v=m>>>24,k=m>>>16&255,p=m&65535,!(b+v<=f);){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}s>>>=b,f-=b,t.back+=b}if(s>>>=v,f-=v,t.back+=v,k&64){e.msg="invalid distance code",t.mode=$;break}t.offset=p,t.extra=k&15,t.mode=hi;case hi:if(t.extra){for(T=t.extra;f<T;){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}t.offset+=s&(1<<t.extra)-1,s>>>=t.extra,f-=t.extra,t.back+=t.extra}if(t.offset>t.dmax){e.msg="invalid distance too far back",t.mode=$;break}t.mode=di;case di:if(c===0)break e;if(h=d-c,t.offset>h){if(h=t.offset-h,h>t.whave&&t.sane){e.msg="invalid distance too far back",t.mode=$;break}h>t.wnext?(h-=t.wnext,_=t.wsize-h):_=t.wnext-h,h>t.length&&(h=t.length),g=t.window}else g=a,_=l-t.offset,h=t.length;h>c&&(h=c),c-=h,t.length-=h;do a[l++]=g[_++];while(--h);t.length===0&&(t.mode=yt);break;case ui:if(c===0)break e;a[l++]=t.length,c--,t.mode=yt;break;case Gt:if(t.wrap){for(;f<32;){if(o===0)break e;o--,s|=i[r++]<<f,f+=8}if(d-=c,e.total_out+=d,t.total+=d,t.wrap&4&&d&&(e.adler=t.check=t.flags?H(t.check,a,d,l-d):it(t.check,a,d,l-d)),d=c,t.wrap&4&&(t.flags?s:mi(s))!==t.check){e.msg="incorrect data check",t.mode=$;break}s=0,f=0}t.mode=_i;case _i:if(t.wrap&&t.flags){for(;f<32;){if(o===0)break e;o--,s+=i[r++]<<f,f+=8}if(t.wrap&4&&s!==(t.total&4294967295)){e.msg="incorrect length check",t.mode=$;break}s=0,f=0}t.mode=bi;case bi:I=jl;break e;case $:I=wa;break e;case va:return pa;case ka:default:return Q}return e.next_out=l,e.avail_out=c,e.next_in=r,e.avail_in=o,t.hold=s,t.bits=f,(t.wsize||d!==e.avail_out&&t.mode<$&&(t.mode<Gt||n!==Wn))&&Sa(e,e.output,e.next_out,d-e.avail_out),u-=e.avail_in,d-=e.avail_out,e.total_in+=u,e.total_out+=d,t.total+=d,t.wrap&4&&d&&(e.adler=t.check=t.flags?H(t.check,a,d,e.next_out-d):it(t.check,a,d,e.next_out-d)),e.data_type=t.bits+(t.last?64:0)+(t.mode===he?128:0)+(t.mode===xt||t.mode===Wt?256:0),(u===0&&d===0||n===Wn)&&I===Ce&&(I=Jl),I},oo=e=>{if(Me(e))return Q;let n=e.state;return n.window&&(n.window=null),e.state=null,Ce},so=(e,n)=>{if(Me(e))return Q;const t=e.state;return t.wrap&2?(t.head=n,n.done=!1,Ce):Q},fo=(e,n)=>{const t=n.length;let i,a,r;return Me(e)||(i=e.state,i.wrap!==0&&i.mode!==It)?Q:i.mode===It&&(a=1,a=it(a,n,t,0),a!==i.check)?wa:(r=Sa(e,n,t,t),r?(i.mode=va,pa):(i.havedict=1,Ce))};var co=ya,ho=Ea,uo=xa,_o=ao,bo=Aa,mo=lo,go=oo,wo=so,po=fo,vo="pako inflate (from Nodeca project)",ue={inflateReset:co,inflateReset2:ho,inflateResetKeep:uo,inflateInit:_o,inflateInit2:bo,inflate:mo,inflateEnd:go,inflateGetHeader:wo,inflateSetDictionary:po,inflateInfo:vo};function ko(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var xo=ko;const Ta=Object.prototype.toString,{Z_NO_FLUSH:yo,Z_FINISH:Eo,Z_OK:lt,Z_STREAM_END:qt,Z_NEED_DICT:Jt,Z_STREAM_ERROR:Ao,Z_DATA_ERROR:wi,Z_MEM_ERROR:So}=Ze;function mt(e){this.options=Nt.assign({chunkSize:1024*64,windowBits:15,to:""},e||{});const n=this.options;n.raw&&n.windowBits>=0&&n.windowBits<16&&(n.windowBits=-n.windowBits,n.windowBits===0&&(n.windowBits=-15)),n.windowBits>=0&&n.windowBits<16&&!(e&&e.windowBits)&&(n.windowBits+=32),n.windowBits>15&&n.windowBits<48&&(n.windowBits&15||(n.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new _a,this.strm.avail_out=0;let t=ue.inflateInit2(this.strm,n.windowBits);if(t!==lt)throw new Error(Re[t]);if(this.header=new xo,ue.inflateGetHeader(this.strm,this.header),n.dictionary&&(typeof n.dictionary=="string"?n.dictionary=rt.string2buf(n.dictionary):Ta.call(n.dictionary)==="[object ArrayBuffer]"&&(n.dictionary=new Uint8Array(n.dictionary)),n.raw&&(t=ue.inflateSetDictionary(this.strm,n.dictionary),t!==lt)))throw new Error(Re[t])}mt.prototype.push=function(e,n){const t=this.strm,i=this.options.chunkSize,a=this.options.dictionary;let r,l,o;if(this.ended)return!1;for(n===~~n?l=n:l=n===!0?Eo:yo,Ta.call(e)==="[object ArrayBuffer]"?t.input=new Uint8Array(e):t.input=e,t.next_in=0,t.avail_in=t.input.length;;){for(t.avail_out===0&&(t.output=new Uint8Array(i),t.next_out=0,t.avail_out=i),r=ue.inflate(t,l),r===Jt&&a&&(r=ue.inflateSetDictionary(t,a),r===lt?r=ue.inflate(t,l):r===wi&&(r=Jt));t.avail_in>0&&r===qt&&t.state.wrap>0&&e[t.next_in]!==0;)ue.inflateReset(t),r=ue.inflate(t,l);switch(r){case Ao:case wi:case Jt:case So:return this.onEnd(r),this.ended=!0,!1}if(o=t.avail_out,t.next_out&&(t.avail_out===0||r===qt))if(this.options.to==="string"){let c=rt.utf8border(t.output,t.next_out),s=t.next_out-c,f=rt.buf2string(t.output,c);t.next_out=s,t.avail_out=i-s,s&&t.output.set(t.output.subarray(c,c+s),0),this.onData(f)}else this.onData(t.output.length===t.next_out?t.output:t.output.subarray(0,t.next_out));if(!(r===lt&&o===0)){if(r===qt)return r=ue.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,!0;if(t.avail_in===0)break}}return!0};mt.prototype.onData=function(e){this.chunks.push(e)};mt.prototype.onEnd=function(e){e===lt&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=Nt.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};function kn(e,n){const t=new mt(n);if(t.push(e),t.err)throw t.msg||Re[t.err];return t.result}function To(e,n){return n=n||{},n.raw=!0,kn(e,n)}var zo=mt,Do=kn,Ro=To,Io=kn,Co=Ze,Zo={Inflate:zo,inflate:Do,inflateRaw:Ro,ungzip:Io,constants:Co};const{Deflate:Mo,deflate:No,deflateRaw:Lo,gzip:$o}=Bl,{Inflate:Uo,inflate:Oo,inflateRaw:Bo,ungzip:Fo}=Zo;var Ho=Mo,Po=No,Yo=Lo,Xo=$o,Vo=Uo,Wo=Oo,Go=Bo,Ko=Fo,jo=Ze,pi={Deflate:Ho,deflate:Po,deflateRaw:Yo,gzip:Xo,Inflate:Vo,inflate:Wo,inflateRaw:Go,ungzip:Ko,constants:jo};class vi{constructor(n){S(this,"buffer");S(this,"bytePointer",0);S(this,"bitPointer",0);this.buffer=typeof n=="number"?new ArrayBuffer(n):"buffer"in n?n.buffer:n}get view(){return new DataView(this.buffer)}skipBits(n){this.bitPointer+=n,this.bytePointer+=Math.floor(this.bitPointer/8),this.bitPointer%=8}final(){return this.buffer.slice(0,this.bitPointer==0?this.bytePointer:this.bytePointer+1)}readBit(){const t=(this.view.getUint8(this.bytePointer)>>this.bitPointer&1)!=0;return this.skipBits(1),t}readBits(n){let t=0;for(let i=0;i<n;i++)t|=(this.readBit()?1:0)<<i;return t}writeBit(n){let t=this.view.getUint8(this.bytePointer);n?t|=1<<this.bitPointer:t&=1<<this.bitPointer^255,this.view.setUint8(this.bytePointer,t),this.skipBits(1)}writeBits(n,t){for(let i=0;i<n;i++)this.writeBit((t&1)!=0),t>>=1}}const B=64;function xn(e,n){return()=>{e|=0,e=e+2654435769|0;let t=e^e>>>16;t=Math.imul(t,569420461),t=t^t>>>15,t=Math.imul(t,1935289751);const i=(t=t^t>>>15)>>>0;return n?i/4294967296:i}}function ze(e,n,t,i){return e^=e<<13|e>>>17,e=e*2158630691+3333583613&4294967295,e^=n,e^=e<<13|e>>>17,e=e*2158630691+3333583613&4294967295,e^=t,e^=e<<13|e>>>17,e=e*2158630691+3333583613&4294967295,e^=i,e^=e<<16|e>>>15,e=e*2158630691+3333583613&4294967295,(e>>>0)/4294967295}function qo(e,n){n*=e.reduce((t,i)=>t+i,0);for(let t=0;t<e.length;t++)if(n-=e[t],n<=0)return t;throw new Error("Invalid weights")}function Jo(e,n,t,i){let a=[];for(let o=Math.floor(n)-1;o<Math.ceil(n)+1;o++)for(let c=Math.floor(t)-1;c<Math.ceil(t)+1;c++)a.push({x:o+ze(e,o,c,0)-.5,y:c+ze(e,o,c,1)-.5,type:qo(i,ze(e,o,c,2))});let r=1/0,l=-1;for(const o of a){const c=Math.sqrt((o.x-n)**2+(o.y-t)**2);c<r&&(r=c,l=o.type)}if(l==-1)throw new Error("Voronoi noise error.");return l}function ki(e,n,t){function i(h,_,g){return(_-h)*((g*(g*6-15)+10)*g*g*g)+h}const a=(h,_)=>{const g=ze(e,h,_,0);return{x:Math.cos(g),y:Math.sin(g)}},r=(h,_,g,m)=>{const v=a(h,_),k=g-h,p=m-_;return k*v.x+p*v.y},l=Math.floor(n),o=l+1,c=Math.floor(t),s=c+1,f=n-l,u=t-c;return i(i(r(l,c,n,t),r(o,c,n,t),f),i(r(l,s,n,t),r(o,s,n,t),f),u)}class Qo{constructor(n,t,i){S(this,"world");S(this,"x");S(this,"y");this.world=n,this.x=t,this.y=i}minesNearby(){let n=0;for(const t of this.searchPattern)n+=this.world.getTile(this.x+t.x,this.y+t.y).numMines();return n}flagsNearby(){let n=0;for(const t of this.searchPattern)n+=this.world.getTile(this.x+t.x,this.y+t.y).numFlags();return n}static load(n,t,i,a){throw new Error("Tile.load needs to be implemented on derived class.")}}var X=(e=>(e[e.Covered=0]="Covered",e[e.Flagged=1]="Flagged",e[e.Revealed=2]="Revealed",e))(X||{});class $t extends Qo{constructor(t,i,a,r){super(t,i,a);S(this,"isMine");S(this,"state",0);S(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this.isMine=r}numMines(){return this.isMine?1:0}numFlags(){return this.state==1?1:0}flag(){this.state!=2&&(this.state==0?this.state=1:this.state=0)}reveal(){this.state!=1&&(this.state=2)}}class yn extends $t{constructor(t,i,a){const r=ze(t.tileSeed,i,a,0)>.625;super(t,i,a,r);S(this,"type","chocolate")}save(t){t.writeBits(2,this.state)}static load(t,i,a,r){const l=new yn(t,i,a);switch(r.readBits(2)){case X.Covered:break;case X.Flagged:l.flag();break;case X.Revealed:l.reveal();break}return l}}function xi(e,n,t){const i=Math.floor(n/e),a=Math.floor(t/e);return(i+a%2)%2==0}function za(e,n,t,i){const a=Math.floor(t/n),r=Math.floor(i/n),l=(a+r%2)%2==0,o=Math.abs(t%n)+Math.abs(i%n)*n,c=Math.floor(ze(e.tileSeed,a,r,0)*n**2),s=l?o!=c:o==c;return{isDark:l,isMine:s}}class En extends $t{constructor(t,i,a){const{isDark:r,isMine:l}=za(t,2,i,a);super(t,i,a,l);S(this,"type","waffle");S(this,"isDark");this.isDark=r}save(t){t.writeBits(2,this.state)}static load(t,i,a,r){const l=new En(t,i,a);switch(r.readBits(2)){case X.Covered:break;case X.Flagged:l.flag();break;case X.Revealed:l.reveal();break}return l}}class An extends $t{constructor(t,i,a){const{isDark:r,isMine:l}=za(t,3,i,a);super(t,i,a,l);S(this,"type","stroopwafel");S(this,"isDark");this.isDark=r}save(t){t.writeBits(2,this.state)}static load(t,i,a,r){const l=new An(t,i,a);switch(r.readBits(2)){case X.Covered:break;case X.Flagged:l.flag();break;case X.Revealed:l.reveal();break}return l}}class Sn extends $t{constructor(t,i,a){const r=ze(t.tileSeed,i,a,0)>.875;super(t,i,a,r);S(this,"type","vanilla")}save(t){t.writeBits(2,this.state)}static load(t,i,a,r){const l=new Sn(t,i,a);switch(r.readBits(2)){case X.Covered:break;case X.Flagged:l.flag();break;case X.Revealed:l.reveal();break}return l}}const es={type:"collection",weight:1,scale:24,smoothness:.8,biomes:[{type:"collection",weight:5,scale:24,smoothness:.8,biomes:[{type:"biome",weight:3,tile:Sn},{type:"biome",weight:1,tile:yn}]},{type:"collection",weight:2,scale:64,smoothness:0,biomes:[{type:"biome",weight:1,tile:En},{type:"biome",weight:2,tile:An}]}]};function ts(e,n,t,i,a){const r=xn(e,!1),l=ki(r(),n,t)*i,o=ki(r(),n,t)*i;return Jo(r(),n+l,t+o,a)}function Da(e,n,t){const i=xn(e.biomeSeed,!1);let a=es;for(;a.type=="collection";){const r=ts(i(),n/a.scale,t/a.scale,a.smoothness,a.biomes.map(l=>l.weight));a=a.biomes[r]}return a.tile}function Ra(e,n,t){const i=Da(e,n,t);return new i(e,n,t)}class Ia{constructor(n,t,i){S(this,"world");S(this,"chunkX");S(this,"chunkY");this.world=n,this.chunkX=t,this.chunkY=i}isGenerated(){return this instanceof ot}generate(){if(this.isGenerated())throw new Error("Cannot generate an already generated chunk.");console.log(`Generating new chunk: ${this.chunkX}, ${this.chunkY}`);const n=[];for(let t=0;t<B;t++)for(let i=0;i<B;i++){const a=this.world.generateTile(this.chunkX*B+i,this.chunkY*B+t);n.push(a)}return new ot(this.world,this.chunkX,this.chunkY,n)}}class ot extends Ia{constructor(t,i,a,r){super(t,i,a);S(this,"tiles");if(this.tiles=r,this.tiles.length!=B*B)throw new Error("GeneratedChunk incorrect tiles length.")}getTileAbsolute(t,i){return this.getTile(t-this.chunkX*B,i-this.chunkY*B)}getTile(t,i){return this.tiles[t+i*B]}resetTileAbsolute(t,i){return this.resetTile(t-this.chunkX*B,i-this.chunkY*B)}resetTile(t,i){this.tiles[t+i*B]=Ra(this.world,this.chunkX*B+t,this.chunkY*B+i)}save(){const t=new vi(2048);for(const i of this.tiles)i.save(t);return pi.deflate(t.final()).buffer}static load(t,i,a,r){const l=new vi(pi.inflate(r));let o=[];for(let c=0;c<B;c++)for(let s=0;s<B;s++){const f=i*B+s,u=a*B+c,h=Da(t,f,u).load(t,f,u,l);o.push(h)}return new ot(t,i,a,o)}}const Ca="3.7.7",ns=Ca,Xe=typeof Buffer=="function",yi=typeof TextDecoder=="function"?new TextDecoder:void 0,Ei=typeof TextEncoder=="function"?new TextEncoder:void 0,is="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",Ke=Array.prototype.slice.call(is),Et=(e=>{let n={};return e.forEach((t,i)=>n[t]=i),n})(Ke),as=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,Y=String.fromCharCode.bind(String),Ai=typeof Uint8Array.from=="function"?Uint8Array.from.bind(Uint8Array):e=>new Uint8Array(Array.prototype.slice.call(e,0)),Za=e=>e.replace(/=/g,"").replace(/[+\/]/g,n=>n=="+"?"-":"_"),Ma=e=>e.replace(/[^A-Za-z0-9\+\/]/g,""),Na=e=>{let n,t,i,a,r="";const l=e.length%3;for(let o=0;o<e.length;){if((t=e.charCodeAt(o++))>255||(i=e.charCodeAt(o++))>255||(a=e.charCodeAt(o++))>255)throw new TypeError("invalid character found");n=t<<16|i<<8|a,r+=Ke[n>>18&63]+Ke[n>>12&63]+Ke[n>>6&63]+Ke[n&63]}return l?r.slice(0,l-3)+"===".substring(l):r},Tn=typeof btoa=="function"?e=>btoa(e):Xe?e=>Buffer.from(e,"binary").toString("base64"):Na,cn=Xe?e=>Buffer.from(e).toString("base64"):e=>{let t=[];for(let i=0,a=e.length;i<a;i+=4096)t.push(Y.apply(null,e.subarray(i,i+4096)));return Tn(t.join(""))},St=(e,n=!1)=>n?Za(cn(e)):cn(e),rs=e=>{if(e.length<2){var n=e.charCodeAt(0);return n<128?e:n<2048?Y(192|n>>>6)+Y(128|n&63):Y(224|n>>>12&15)+Y(128|n>>>6&63)+Y(128|n&63)}else{var n=65536+(e.charCodeAt(0)-55296)*1024+(e.charCodeAt(1)-56320);return Y(240|n>>>18&7)+Y(128|n>>>12&63)+Y(128|n>>>6&63)+Y(128|n&63)}},ls=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,La=e=>e.replace(ls,rs),Si=Xe?e=>Buffer.from(e,"utf8").toString("base64"):Ei?e=>cn(Ei.encode(e)):e=>Tn(La(e)),Ue=(e,n=!1)=>n?Za(Si(e)):Si(e),Ti=e=>Ue(e,!0),os=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,ss=e=>{switch(e.length){case 4:var n=(7&e.charCodeAt(0))<<18|(63&e.charCodeAt(1))<<12|(63&e.charCodeAt(2))<<6|63&e.charCodeAt(3),t=n-65536;return Y((t>>>10)+55296)+Y((t&1023)+56320);case 3:return Y((15&e.charCodeAt(0))<<12|(63&e.charCodeAt(1))<<6|63&e.charCodeAt(2));default:return Y((31&e.charCodeAt(0))<<6|63&e.charCodeAt(1))}},$a=e=>e.replace(os,ss),Ua=e=>{if(e=e.replace(/\s+/g,""),!as.test(e))throw new TypeError("malformed base64.");e+="==".slice(2-(e.length&3));let n,t="",i,a;for(let r=0;r<e.length;)n=Et[e.charAt(r++)]<<18|Et[e.charAt(r++)]<<12|(i=Et[e.charAt(r++)])<<6|(a=Et[e.charAt(r++)]),t+=i===64?Y(n>>16&255):a===64?Y(n>>16&255,n>>8&255):Y(n>>16&255,n>>8&255,n&255);return t},zn=typeof atob=="function"?e=>atob(Ma(e)):Xe?e=>Buffer.from(e,"base64").toString("binary"):Ua,Oa=Xe?e=>Ai(Buffer.from(e,"base64")):e=>Ai(zn(e).split("").map(n=>n.charCodeAt(0))),Ba=e=>Oa(Fa(e)),fs=Xe?e=>Buffer.from(e,"base64").toString("utf8"):yi?e=>yi.decode(Oa(e)):e=>$a(zn(e)),Fa=e=>Ma(e.replace(/[-_]/g,n=>n=="-"?"+":"/")),hn=e=>fs(Fa(e)),cs=e=>{if(typeof e!="string")return!1;const n=e.replace(/\s+/g,"").replace(/={0,2}$/,"");return!/[^\s0-9a-zA-Z\+/]/.test(n)||!/[^\s0-9a-zA-Z\-_]/.test(n)},Ha=e=>({value:e,enumerable:!1,writable:!0,configurable:!0}),Pa=function(){const e=(n,t)=>Object.defineProperty(String.prototype,n,Ha(t));e("fromBase64",function(){return hn(this)}),e("toBase64",function(n){return Ue(this,n)}),e("toBase64URI",function(){return Ue(this,!0)}),e("toBase64URL",function(){return Ue(this,!0)}),e("toUint8Array",function(){return Ba(this)})},Ya=function(){const e=(n,t)=>Object.defineProperty(Uint8Array.prototype,n,Ha(t));e("toBase64",function(n){return St(this,n)}),e("toBase64URI",function(){return St(this,!0)}),e("toBase64URL",function(){return St(this,!0)})},hs=()=>{Pa(),Ya()},zi={version:Ca,VERSION:ns,atob:zn,atobPolyfill:Ua,btoa:Tn,btoaPolyfill:Na,fromBase64:hn,toBase64:Ue,encode:Ue,encodeURI:Ti,encodeURL:Ti,utob:La,btou:$a,decode:hn,isValid:cs,fromUint8Array:St,toUint8Array:Ba,extendString:Pa,extendUint8Array:Ya,extendBuiltins:hs};function*ds(e,n){let t=e,i=n,a=1,r=1;for(;;){for(;2*t*a<r;)yield{x:t,y:i},t+=a;for(;2*i*a<r;)yield{x:t,y:i},i+=a;a=-1*a,r+=1}}class Ut{constructor(n){S(this,"seed");S(this,"tileSeed");S(this,"biomeSeed");S(this,"chunks",{});this.seed=n;const t=xn(this.seed,!1);this.tileSeed=t(),this.biomeSeed=t()}generateTile(n,t){return Ra(this,n,t)}getChunk(n,t){const i=this.chunks[`${n},${t}`];return i||new Ia(this,n,t)}getGeneratedChunk(n,t){const i=this.getChunk(n,t);if(i.isGenerated())return i;const a=i.generate();return this.chunks[`${n},${t}`]=a,a}getTile(n,t){const i=Math.floor(n/B),a=Math.floor(t/B);return this.getGeneratedChunk(i,a).getTileAbsolute(n,t)}flag(n,t){return this.getTile(n,t).flag()}reveal(n,t,i=!0){const a=this.getTile(n,t);if(a.reveal(),a.numMines()>0)return!0;if(a.minesNearby()>0)if(i){let o=!1;if(a.flagsNearby()==a.minesNearby())for(const c of a.searchPattern)this.reveal(a.x+c.x,a.y+c.y,!1)&&(o=!0);return o}else return!1;let r=[],l=[a];for(;l.length>0;){const o=l.pop();r.push(o);for(const c of o.searchPattern){const s=this.getTile(o.x+c.x,o.y+c.y);l.some(f=>f.x==s.x&&f.y==s.y)||r.some(f=>f.x==s.x&&f.y==s.y)||(s.minesNearby()==0?l.push(s):r.push(s))}}return r.forEach(o=>o.reveal()),!1}reset(n,t){const i=this.getChunk(Math.floor(n/B),Math.floor(t/B));i.isGenerated()&&i.resetTileAbsolute(n,t)}closest0(n,t){for(const{x:i,y:a}of ds(n,t)){const r=this.getTile(i,a);if(r.numMines()==0&&r.minesNearby()==0)return{x:i,y:a}}throw new Error("This error should never happen, it's just here to make TypeScript happy.")}save(){const n={seed:this.seed,chunks:{}};for(const t in this.chunks){const i=t,r=this.chunks[i].save();n.chunks[i]=zi.fromUint8Array(new Uint8Array(r))}return n}static load(n){const t=new Ut(n.seed);for(const i in n.chunks){const a=i,r=n.chunks[a],l=zi.toUint8Array(r).buffer,[o,c,s]=a.match(/^(-?\d+),(-?\d+)$/),[f,u]=[parseInt(c),parseInt(s)];t.chunks[a]=ot.load(t,f,u,l)}return t}}function Di(e,n){console.log("Loaded new world"),n&&localStorage.setItem(e,"PLACEHOLDER");const t=new Ut(Math.floor(Math.random()*4294967295)),i=t.closest0(0,0);return t.reveal(i.x,i.y),t}function us(e){const n=localStorage.getItem(e);if(n){console.log("Loaded saved world");try{const t=JSON.parse(n);return Ut.load(t)}catch(t){return console.error("Failed to load world."),console.error(t),Di(e,!1)}}else return Di(e,!0)}function Ri(e,n){localStorage.getItem(e)!==null&&(console.log("Save world"),localStorage.setItem(e,JSON.stringify(n.save())))}const Xa=(e,n)=>{const t=new ResizeObserver(()=>{n(e.clientWidth,e.clientHeight)});return t.observe(e),{destroy(){t.unobserve(e),t.disconnect()}}};class _s{constructor(n,t){S(this,"textures");S(this,"src");S(this,"img");this.src=n,this.img=document.createElement("img"),this.img.src=this.src,this.textures=t}awaitLoad(){return new Promise((n,t)=>{if(this.img.naturalWidth!==0)return n();const i=()=>{this.img.removeEventListener("load",i),this.img.removeEventListener("error",a),n()},a=()=>{this.img.removeEventListener("load",i),this.img.removeEventListener("error",a),t()};this.img.addEventListener("load",i),this.img.addEventListener("error",a)})}onLoad(n){this.awaitLoad().then(()=>n(this))}draw(n,t,i,a,r,l){const[o,c,s,f]=this.textures[t];n.drawImage(this.img,o,c,s,f,i,a,r,l)}}class bs{}class ms extends bs{constructor(){super(...arguments);S(this,"tileset",new _s("/infinite-minesweeper/tileset_retro.png",{null:[0,0,16,16],bomb:[16,0,16,16],explosion:[16,16,16,16],flag:[32,16,16,16],number_0:[48,0,16,16],number_1:[48,16,16,16],number_2:[48,32,16,16],number_3:[48,48,16,16],number_4:[48,64,16,16],number_5:[48,80,16,16],number_6:[48,96,16,16],number_7:[48,112,16,16],number_8:[48,128,16,16],tile_vanilla_covered:[64,0,16,16],tile_vanilla_revealed:[80,0,16,16],tile_chocolate_covered:[64,16,16,16],tile_chocolate_revealed:[80,16,16,16],tile_waffle_light_covered:[64,32,16,16],tile_waffle_light_revealed:[80,32,16,16],tile_waffle_dark_covered:[96,32,16,16],tile_waffle_dark_revealed:[112,32,16,16],tile_stroopwafel_light_covered:[64,48,16,16],tile_stroopwafel_light_revealed:[80,48,16,16],tile_stroopwafel_dark_covered:[96,48,16,16],tile_stroopwafel_dark_revealed:[112,48,16,16]}))}async init(){await this.tileset.awaitLoad()}drawNearby(t,i){switch(i.minesNearby()){case 0:break;case 1:this.tileset.draw(t,"number_1",0,0,1,1);break;case 2:this.tileset.draw(t,"number_2",0,0,1,1);break;case 3:this.tileset.draw(t,"number_3",0,0,1,1);break;case 4:this.tileset.draw(t,"number_4",0,0,1,1);break;case 5:this.tileset.draw(t,"number_5",0,0,1,1);break;case 6:this.tileset.draw(t,"number_6",0,0,1,1);break;case 7:this.tileset.draw(t,"number_7",0,0,1,1);break;case 8:this.tileset.draw(t,"number_8",0,0,1,1);break;default:throw new Error("ThemeRetro invalid draw nearby count.")}}drawSingleMineTile(t,i,a,r){switch(i.state){case X.Covered:this.tileset.draw(t,a,0,0,1,1);break;case X.Flagged:this.tileset.draw(t,a,0,0,1,1),this.tileset.draw(t,"flag",0,0,1,1);break;case X.Revealed:{this.tileset.draw(t,r,0,0,1,1),i.isMine?this.tileset.draw(t,"bomb",0,0,1,1):this.drawNearby(t,i);break}}}drawTile(t,i){switch(i.type){case"vanilla":this.drawSingleMineTile(t,i,"tile_vanilla_covered","tile_vanilla_revealed");break;case"chocolate":this.drawSingleMineTile(t,i,"tile_chocolate_covered","tile_chocolate_revealed");break;case"waffle":{xi(2,i.x,i.y)?this.drawSingleMineTile(t,i,"tile_waffle_dark_covered","tile_waffle_dark_revealed"):this.drawSingleMineTile(t,i,"tile_waffle_light_covered","tile_waffle_light_revealed");break}case"stroopwafel":{xi(3,i.x,i.y)?this.drawSingleMineTile(t,i,"tile_stroopwafel_dark_covered","tile_stroopwafel_dark_revealed"):this.drawSingleMineTile(t,i,"tile_stroopwafel_light_covered","tile_stroopwafel_light_revealed");break}}}}class gs{constructor(n,t){S(this,"world");S(this,"canvas");S(this,"ctx");S(this,"theme",new ms);S(this,"cameraX",0);S(this,"cameraY",0);S(this,"cameraZoom",32);S(this,"cameraMinZoom",4);S(this,"cameraMaxZoom",64);this.world=n,this.canvas=t;const i=this.canvas.getContext("2d");if(!i)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=i}async init(){await this.theme.init()}cameraWidth(){return this.canvas.width/this.cameraZoom}cameraHeight(){return this.canvas.height/this.cameraZoom}cameraTranslate(n,t){this.cameraX-=n/this.cameraZoom,this.cameraY-=t/this.cameraZoom}cameraScale(n){const t=this.cameraX+this.cameraWidth()*.5,i=this.cameraY+this.cameraHeight()*.5;this.cameraZoom*=n,this.canvas.width/this.cameraZoom<this.cameraMinZoom&&(this.cameraZoom=this.canvas.width/this.cameraMinZoom),this.canvas.height/this.cameraZoom<this.cameraMinZoom&&(this.cameraZoom=this.canvas.height/this.cameraMinZoom),this.canvas.width/this.cameraZoom>this.cameraMaxZoom&&(this.cameraZoom=this.canvas.width/this.cameraMaxZoom),this.canvas.height/this.cameraZoom>this.cameraMaxZoom&&(this.cameraZoom=this.canvas.height/this.cameraMaxZoom);const a=this.cameraX+this.cameraWidth()*.5,r=this.cameraY+this.cameraHeight()*.5;return this.cameraX-=a-t,this.cameraY-=r-i,this.cameraZoom}cameraBounds(n=0){return{minX:Math.floor(this.cameraX-n),minY:Math.floor(this.cameraY-n),maxX:Math.ceil(this.cameraX+this.cameraWidth()+n),maxY:Math.ceil(this.cameraY+this.cameraHeight()+n)}}cameraPos(n,t){return{x:Math.floor(n/this.cameraZoom+this.cameraX),y:Math.floor(t/this.cameraZoom+this.cameraY)}}renderWorld(){this.ctx.imageSmoothingEnabled=!1,this.ctx.scale(this.cameraZoom,this.cameraZoom),this.ctx.translate(-this.cameraX,-this.cameraY);const n=this.cameraBounds(1);for(let t=n.minX;t<n.maxX;t++)for(let i=n.minY;i<n.maxY;i++){this.ctx.save(),this.ctx.translate(t,i),this.ctx.scale(1.01,1.01);const a=this.world.getTile(t,i);this.theme.drawTile(this.ctx,a),this.ctx.restore()}this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.ctx.fillStyle="purple",this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.renderWorld()}}function ws(e){let n,t,i,a;return{c(){n=Z("canvas"),this.h()},l(r){n=M(r,"CANVAS",{class:!0}),L(n).forEach(y),this.h()},h(){C(n,"class","w-full h-full cursor-pointer")},m(r,l){F(r,n,l),e[9](n),i||(a=[K(window,"keydown",e[7]),K(window,"keyup",e[8]),Bi(t=Xa.call(null,n,e[10])),K(n,"mousedown",e[11]),K(n,"mouseup",e[12]),K(n,"mousemove",e[13]),K(n,"wheel",e[14],{passive:!0}),K(n,"contextmenu",ps)],i=!0)},p(r,[l]){t&&Fi(t.update)&&l&15&&t.update.call(null,r[10])},i:De,o:De,d(r){r&&y(n),e[9](null),i=!1,dn(a)}}}const ps=e=>{e.preventDefault()};function vs(e,n,t){const i=Ga();let{world:a}=n,r,l,o=!0,c=!1,s=-1;const f=()=>{cancelAnimationFrame(s),s=requestAnimationFrame(f),c&&(t(3,c=!1),r.render())};let u=new Set,d=-1;un(async()=>{t(0,r=new gs(a,l)),clearInterval(d),d=setInterval(()=>{let w=!1;u.has("[")&&r.cameraZoom!=r.cameraScale(1.04)&&(w=!0),u.has("]")&&r.cameraZoom!=r.cameraScale(.96)&&(w=!0),u.has("ArrowUp")&&(r.cameraTranslate(0,10),w=!0),u.has("ArrowDown")&&(r.cameraTranslate(0,-10),w=!0),u.has("ArrowLeft")&&(r.cameraTranslate(10,0),w=!0),u.has("ArrowRight")&&(r.cameraTranslate(-10,0),w=!0),u.has("s")&&(t(0,r.cameraZoom=Math.pow(2,Math.ceil(Math.log(r.cameraZoom)/Math.log(2))),r),r.cameraScale(1),w=!0),w&&t(3,c=!0)},1e3/60),await r.init(),setTimeout(()=>{f()},100)}),Hi(()=>{cancelAnimationFrame(s),clearInterval(d)});const h=w=>{u.add(w.key)},_=w=>{u.delete(w.key)};function g(w){Pi[w?"unshift":"push"](()=>{l=w,t(1,l)})}const m=(w,D)=>{t(1,l.width=w,l),t(1,l.height=D,l),r.cameraScale(1),o&&(r.cameraTranslate(l.width/2,l.height/2),t(2,o=!1)),t(3,c=!0)},v=w=>{if(document.pointerLockElement!=l){if(w.button==1)l.requestPointerLock(),w.preventDefault();else if(w.button==0){w.preventDefault();const D=r.cameraPos(w.offsetX,w.offsetY);i("action",{type:"reveal",pos:D}),t(3,c=!0)}else if(w.button==2){w.preventDefault();const D=r.cameraPos(w.offsetX,w.offsetY);i("action",{type:"flag",pos:D}),t(3,c=!0)}else if(w.button==3){w.preventDefault();const D=r.cameraPos(w.offsetX,w.offsetY);i("action",{type:"reset",pos:D}),t(3,c=!0)}}},k=w=>{document.pointerLockElement==l&&w.button==1&&document.exitPointerLock()},p=w=>{document.pointerLockElement==l&&(r.cameraTranslate(w.movementX,w.movementY),t(3,c=!0))},b=w=>{const D=w.deltaY>0?.9:1.1;r.cameraZoom!=r.cameraScale(D)&&t(3,c=!0)};return e.$$set=w=>{"world"in w&&t(6,a=w.world)},[r,l,o,c,i,u,a,h,_,g,m,v,k,p,b]}class ks extends fe{constructor(n){super(),ce(this,n,vs,ws,ae,{world:6})}}function Ii(e){let n,t;return n=new ks({props:{world:e[1]}}),n.$on("action",e[3]),{c(){ee(n.$$.fragment)},l(i){te(n.$$.fragment,i)},m(i,a){ne(n,i,a),t=!0},p(i,a){const r={};a&2&&(r.world=i[1]),n.$set(r)},i(i){t||(N(n.$$.fragment,i),t=!0)},o(i){O(n.$$.fragment,i),t=!1},d(i){ie(n,i)}}}function xs(e){let n,t,i,a,r=e[1]&&Ii(e);return{c(){r&&r.c(),n=ve()},l(l){r&&r.l(l),n=ve()},m(l,o){r&&r.m(l,o),F(l,n,o),t=!0,i||(a=K(window,"beforeunload",e[2]),i=!0)},p(l,[o]){l[1]?r?(r.p(l,o),o&2&&N(r,1)):(r=Ii(l),r.c(),N(r,1),r.m(n.parentNode,n)):r&&(Ct(),O(r,1,1,()=>{r=null}),Zt())},i(l){t||(N(r),t=!0)},o(l){O(r),t=!1},d(l){l&&y(n),r&&r.d(l),i=!1,a()}}}function ys(e,n,t){let{saveSlot:i}=n,a;un(async()=>{t(1,a=us(i))}),Hi(()=>{Ri(i,a)});const r=()=>{Ri(i,a)},l=o=>{o.detail.type=="reveal"?a.reveal(o.detail.pos.x,o.detail.pos.y):o.detail.type=="flag"?a.flag(o.detail.pos.x,o.detail.pos.y):o.detail.type=="reset"&&a.reset(o.detail.pos.x,o.detail.pos.y)};return e.$$set=o=>{"saveSlot"in o&&t(0,i=o.saveSlot)},[i,a,r,l]}class Es extends fe{constructor(n){super(),ce(this,n,ys,xs,ae,{saveSlot:0})}}/**
 * @license lucide-svelte v0.372.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const As={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":2,"stroke-linecap":"round","stroke-linejoin":"round"},Ci=As;function Zi(e,n,t){const i=e.slice();return i[10]=n[t][0],i[11]=n[t][1],i}function Qt(e){let n,t=[e[11]],i={};for(let a=0;a<t.length;a+=1)i=q(i,t[a]);return{c(){n=Yi(e[10]),this.h()},l(a){n=Xi(a,e[10],{}),L(n).forEach(y),this.h()},h(){Tt(n,i)},m(a,r){F(a,n,r)},p(a,r){Tt(n,i=dt(t,[r&32&&a[11]]))},d(a){a&&y(n)}}}function Mi(e){let n=e[10],t,i=e[10]&&Qt(e);return{c(){i&&i.c(),t=ve()},l(a){i&&i.l(a),t=ve()},m(a,r){i&&i.m(a,r),F(a,t,r)},p(a,r){a[10]?n?ae(n,a[10])?(i.d(1),i=Qt(a),n=a[10],i.c(),i.m(t.parentNode,t)):i.p(a,r):(i=Qt(a),n=a[10],i.c(),i.m(t.parentNode,t)):n&&(i.d(1),i=null,n=a[10])},d(a){a&&y(t),i&&i.d(a)}}}function Ss(e){let n,t,i,a,r,l=zt(e[5]),o=[];for(let d=0;d<l.length;d+=1)o[d]=Mi(Zi(e,l,d));const c=e[9].default,s=st(c,e,e[8],null);let f=[Ci,e[6],{width:e[2]},{height:e[2]},{stroke:e[1]},{"stroke-width":i=e[4]?Number(e[3])*24/Number(e[2]):e[3]},{class:a=`lucide-icon lucide lucide-${e[0]} ${e[7].class??""}`}],u={};for(let d=0;d<f.length;d+=1)u=q(u,f[d]);return{c(){n=Yi("svg");for(let d=0;d<o.length;d+=1)o[d].c();t=ve(),s&&s.c(),this.h()},l(d){n=Xi(d,"svg",{width:!0,height:!0,stroke:!0,"stroke-width":!0,class:!0});var h=L(n);for(let _=0;_<o.length;_+=1)o[_].l(h);t=ve(),s&&s.l(h),h.forEach(y),this.h()},h(){Tt(n,u)},m(d,h){F(d,n,h);for(let _=0;_<o.length;_+=1)o[_]&&o[_].m(n,null);U(n,t),s&&s.m(n,null),r=!0},p(d,[h]){if(h&32){l=zt(d[5]);let _;for(_=0;_<l.length;_+=1){const g=Zi(d,l,_);o[_]?o[_].p(g,h):(o[_]=Mi(g),o[_].c(),o[_].m(n,t))}for(;_<o.length;_+=1)o[_].d(1);o.length=l.length}s&&s.p&&(!r||h&256)&&ft(s,c,d,d[8],r?ht(c,d[8],h,null):ct(d[8]),null),Tt(n,u=dt(f,[Ci,h&64&&d[6],(!r||h&4)&&{width:d[2]},(!r||h&4)&&{height:d[2]},(!r||h&2)&&{stroke:d[1]},(!r||h&28&&i!==(i=d[4]?Number(d[3])*24/Number(d[2]):d[3]))&&{"stroke-width":i},(!r||h&129&&a!==(a=`lucide-icon lucide lucide-${d[0]} ${d[7].class??""}`))&&{class:a}]))},i(d){r||(N(s,d),r=!0)},o(d){O(s,d),r=!1},d(d){d&&y(n),Vi(o,d),s&&s.d(d)}}}function Ts(e,n,t){const i=["name","color","size","strokeWidth","absoluteStrokeWidth","iconNode"];let a=In(n,i),{$$slots:r={},$$scope:l}=n,{name:o}=n,{color:c="currentColor"}=n,{size:s=24}=n,{strokeWidth:f=2}=n,{absoluteStrokeWidth:u=!1}=n,{iconNode:d}=n;return e.$$set=h=>{t(7,n=q(q({},n),ke(h))),t(6,a=In(n,i)),"name"in h&&t(0,o=h.name),"color"in h&&t(1,c=h.color),"size"in h&&t(2,s=h.size),"strokeWidth"in h&&t(3,f=h.strokeWidth),"absoluteStrokeWidth"in h&&t(4,u=h.absoluteStrokeWidth),"iconNode"in h&&t(5,d=h.iconNode),"$$scope"in h&&t(8,l=h.$$scope)},n=ke(n),[o,c,s,f,u,d,a,n,l,r]}class Dn extends fe{constructor(n){super(),ce(this,n,Ts,Ss,ae,{name:0,color:1,size:2,strokeWidth:3,absoluteStrokeWidth:4,iconNode:5})}}function zs(e){let n;const t=e[2].default,i=st(t,e,e[3],null);return{c(){i&&i.c()},l(a){i&&i.l(a)},m(a,r){i&&i.m(a,r),n=!0},p(a,r){i&&i.p&&(!n||r&8)&&ft(i,t,a,a[3],n?ht(t,a[3],r,null):ct(a[3]),null)},i(a){n||(N(i,a),n=!0)},o(a){O(i,a),n=!1},d(a){i&&i.d(a)}}}function Ds(e){let n,t;const i=[{name:"info"},e[1],{iconNode:e[0]}];let a={$$slots:{default:[zs]},$$scope:{ctx:e}};for(let r=0;r<i.length;r+=1)a=q(a,i[r]);return n=new Dn({props:a}),{c(){ee(n.$$.fragment)},l(r){te(n.$$.fragment,r)},m(r,l){ne(n,r,l),t=!0},p(r,[l]){const o=l&3?dt(i,[i[0],l&2&&_n(r[1]),l&1&&{iconNode:r[0]}]):{};l&8&&(o.$$scope={dirty:l,ctx:r}),n.$set(o)},i(r){t||(N(n.$$.fragment,r),t=!0)},o(r){O(n.$$.fragment,r),t=!1},d(r){ie(n,r)}}}function Rs(e,n,t){let{$$slots:i={},$$scope:a}=n;const r=[["circle",{cx:"12",cy:"12",r:"10"}],["path",{d:"M12 16v-4"}],["path",{d:"M12 8h.01"}]];return e.$$set=l=>{t(1,n=q(q({},n),ke(l))),"$$scope"in l&&t(3,a=l.$$scope)},n=ke(n),[r,n,i,a]}class Is extends fe{constructor(n){super(),ce(this,n,Rs,Ds,ae,{})}}function Ni(e){let n,t,i,a,r,l,o=e[1]&&Li(e);const c=e[3].default,s=st(c,e,e[2],null);return{c(){n=Z("div"),t=Z("div"),o&&o.c(),i=xe(),a=Z("div"),r=Z("div"),s&&s.c(),this.h()},l(f){n=M(f,"DIV",{class:!0});var u=L(n);t=M(u,"DIV",{class:!0});var d=L(t);o&&o.l(d),d.forEach(y),i=ye(u),a=M(u,"DIV",{class:!0});var h=L(a);r=M(h,"DIV",{class:!0});var _=L(r);s&&s.l(_),_.forEach(y),h.forEach(y),u.forEach(y),this.h()},h(){C(t,"class","modal-background -z-10 bg-black bg-opacity-30 shadow-vignette-heavy svelte-pwpa02"),C(r,"class","pointer-events-auto"),C(a,"class","modal-content flex justify-center items-center pointer-events-none p-8 svelte-pwpa02"),C(n,"class","modal fixed top-0 left-0 bottom-0 right-0 grid grid-cols-1 grid-rows-1 svelte-pwpa02")},m(f,u){F(f,n,u),U(n,t),o&&o.m(t,null),U(n,i),U(n,a),U(a,r),s&&s.m(r,null),l=!0},p(f,u){f[1]?o?o.p(f,u):(o=Li(f),o.c(),o.m(t,null)):o&&(o.d(1),o=null),s&&s.p&&(!l||u&4)&&ft(s,c,f,f[2],l?ht(c,f[2],u,null):ct(f[2]),null)},i(f){l||(N(s,f),l=!0)},o(f){O(s,f),l=!1},d(f){f&&y(n),o&&o.d(),s&&s.d(f)}}}function Li(e){let n,t,i;return{c(){n=Z("button"),this.h()},l(a){n=M(a,"BUTTON",{class:!0,"aria-label":!0}),L(n).forEach(y),this.h()},h(){C(n,"class","w-full h-full"),C(n,"aria-label","Close Modal")},m(a,r){F(a,n,r),t||(i=K(n,"click",e[4]),t=!0)},p:De,d(a){a&&y(n),t=!1,i()}}}function Cs(e){let n,t,i=e[0]&&Ni(e);return{c(){i&&i.c(),n=ve()},l(a){i&&i.l(a),n=ve()},m(a,r){i&&i.m(a,r),F(a,n,r),t=!0},p(a,[r]){a[0]?i?(i.p(a,r),r&1&&N(i,1)):(i=Ni(a),i.c(),N(i,1),i.m(n.parentNode,n)):i&&(Ct(),O(i,1,1,()=>{i=null}),Zt())},i(a){t||(N(i),t=!0)},o(a){O(i),t=!1},d(a){a&&y(n),i&&i.d(a)}}}function Zs(e,n,t){let{$$slots:i={},$$scope:a}=n,{visible:r=!1}=n,{closable:l=!0}=n;const o=()=>t(0,r=!1);return e.$$set=c=>{"visible"in c&&t(0,r=c.visible),"closable"in c&&t(1,l=c.closable),"$$scope"in c&&t(2,a=c.$$scope)},[r,l,a,i,o]}class Ms extends fe{constructor(n){super(),ce(this,n,Zs,Cs,ae,{visible:0,closable:1})}}function Ns(e){let n;const t=e[2].default,i=st(t,e,e[3],null);return{c(){i&&i.c()},l(a){i&&i.l(a)},m(a,r){i&&i.m(a,r),n=!0},p(a,r){i&&i.p&&(!n||r&8)&&ft(i,t,a,a[3],n?ht(t,a[3],r,null):ct(a[3]),null)},i(a){n||(N(i,a),n=!0)},o(a){O(i,a),n=!1},d(a){i&&i.d(a)}}}function Ls(e){let n,t;const i=[{name:"chevron-left"},e[1],{iconNode:e[0]}];let a={$$slots:{default:[Ns]},$$scope:{ctx:e}};for(let r=0;r<i.length;r+=1)a=q(a,i[r]);return n=new Dn({props:a}),{c(){ee(n.$$.fragment)},l(r){te(n.$$.fragment,r)},m(r,l){ne(n,r,l),t=!0},p(r,[l]){const o=l&3?dt(i,[i[0],l&2&&_n(r[1]),l&1&&{iconNode:r[0]}]):{};l&8&&(o.$$scope={dirty:l,ctx:r}),n.$set(o)},i(r){t||(N(n.$$.fragment,r),t=!0)},o(r){O(n.$$.fragment,r),t=!1},d(r){ie(n,r)}}}function $s(e,n,t){let{$$slots:i={},$$scope:a}=n;const r=[["path",{d:"m15 18-6-6 6-6"}]];return e.$$set=l=>{t(1,n=q(q({},n),ke(l))),"$$scope"in l&&t(3,a=l.$$scope)},n=ke(n),[r,n,i,a]}class Us extends fe{constructor(n){super(),ce(this,n,$s,Ls,ae,{})}}function Os(e){let n;const t=e[2].default,i=st(t,e,e[3],null);return{c(){i&&i.c()},l(a){i&&i.l(a)},m(a,r){i&&i.m(a,r),n=!0},p(a,r){i&&i.p&&(!n||r&8)&&ft(i,t,a,a[3],n?ht(t,a[3],r,null):ct(a[3]),null)},i(a){n||(N(i,a),n=!0)},o(a){O(i,a),n=!1},d(a){i&&i.d(a)}}}function Bs(e){let n,t;const i=[{name:"chevron-right"},e[1],{iconNode:e[0]}];let a={$$slots:{default:[Os]},$$scope:{ctx:e}};for(let r=0;r<i.length;r+=1)a=q(a,i[r]);return n=new Dn({props:a}),{c(){ee(n.$$.fragment)},l(r){te(n.$$.fragment,r)},m(r,l){ne(n,r,l),t=!0},p(r,[l]){const o=l&3?dt(i,[i[0],l&2&&_n(r[1]),l&1&&{iconNode:r[0]}]):{};l&8&&(o.$$scope={dirty:l,ctx:r}),n.$set(o)},i(r){t||(N(n.$$.fragment,r),t=!0)},o(r){O(n.$$.fragment,r),t=!1},d(r){ie(n,r)}}}function Fs(e,n,t){let{$$slots:i={},$$scope:a}=n;const r=[["path",{d:"m9 18 6-6-6-6"}]];return e.$$set=l=>{t(1,n=q(q({},n),ke(l))),"$$scope"in l&&t(3,a=l.$$scope)},n=ke(n),[r,n,i,a]}class Hs extends fe{constructor(n){super(),ce(this,n,Fs,Bs,ae,{})}}function Ps(e){let n,t=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_stroopwafel_screenshot.png" alt="Stroopwafel Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Stroopwafel</h2> <div class="biome-description svelte-1pkhcy2">3x3 checkers of tiles.<br/>
                        Dark checkered sections have 8 mines.<br/>
                        Light checkered sections have 1 mine.</div></div>`;return{c(){n=Z("div"),n.innerHTML=t,this.h()},l(i){n=M(i,"DIV",{class:!0,"data-svelte-h":!0}),Fe(n)!=="svelte-4cbz83"&&(n.innerHTML=t),this.h()},h(){C(n,"class","biome svelte-1pkhcy2")},m(i,a){F(i,n,a)},d(i){i&&y(n)}}}function Ys(e){let n,t=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_waffle_screenshot.png" alt="Waffle Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Waffle</h2> <div class="biome-description svelte-1pkhcy2">2x2 checkers of tiles.<br/>
                        Dark checkered sections have 3 mines.<br/>
                        Light checkered sections have 1 mine.</div></div>`;return{c(){n=Z("div"),n.innerHTML=t,this.h()},l(i){n=M(i,"DIV",{class:!0,"data-svelte-h":!0}),Fe(n)!=="svelte-1ji8mo3"&&(n.innerHTML=t),this.h()},h(){C(n,"class","biome svelte-1pkhcy2")},m(i,a){F(i,n,a)},d(i){i&&y(n)}}}function Xs(e){let n,t=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_chocolate_screenshot.png" alt="Chocolate Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Chocolate</h2> <div class="biome-description svelte-1pkhcy2">The standard Minesweeper rules.
                        <br/>
                        Much more mines than Vanilla biome.</div></div>`;return{c(){n=Z("div"),n.innerHTML=t,this.h()},l(i){n=M(i,"DIV",{class:!0,"data-svelte-h":!0}),Fe(n)!=="svelte-xvgk1u"&&(n.innerHTML=t),this.h()},h(){C(n,"class","biome svelte-1pkhcy2")},m(i,a){F(i,n,a)},d(i){i&&y(n)}}}function Vs(e){let n,t='<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_vanilla_screenshot.png" alt="Vanilla Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Vanilla</h2> <div class="biome-description svelte-1pkhcy2">The standard Minesweeper rules.</div></div>';return{c(){n=Z("div"),n.innerHTML=t,this.h()},l(i){n=M(i,"DIV",{class:!0,"data-svelte-h":!0}),Fe(n)!=="svelte-ic5bha"&&(n.innerHTML=t),this.h()},h(){C(n,"class","biome svelte-1pkhcy2")},m(i,a){F(i,n,a)},d(i){i&&y(n)}}}function Ws(e){let n,t,i,a,r,l,o,c,s,f,u,d;function h(m,v){if(m[0]=="Vanilla")return Vs;if(m[0]=="Chocolate")return Xs;if(m[0]=="Waffle")return Ys;if(m[0]=="Stroopwafel")return Ps}let _=h(e),g=_&&_(e);return l=new Us({}),s=new Hs({}),{c(){n=Z("div"),t=Z("div"),g&&g.c(),i=xe(),a=Z("div"),r=Z("button"),ee(l.$$.fragment),o=xe(),c=Z("button"),ee(s.$$.fragment),this.h()},l(m){n=M(m,"DIV",{class:!0});var v=L(n);t=M(v,"DIV",{class:!0});var k=L(t);g&&g.l(k),k.forEach(y),i=ye(v),a=M(v,"DIV",{class:!0});var p=L(a);r=M(p,"BUTTON",{class:!0});var b=L(r);te(l.$$.fragment,b),b.forEach(y),o=ye(p),c=M(p,"BUTTON",{class:!0});var w=L(c);te(s.$$.fragment,w),w.forEach(y),p.forEach(y),v.forEach(y),this.h()},h(){C(t,"class","pointer-events-auto px-12"),C(r,"class","pointer-events-auto pl-4 hover:-translate-x-1 transition-transform"),C(c,"class","pointer-events-auto pr-4 hover:translate-x-1 transition-transform"),C(a,"class","pointer-events-none flex justify-between z-10"),C(n,"class","w-full h-full force-overlap text-white")},m(m,v){F(m,n,v),U(n,t),g&&g.m(t,null),U(n,i),U(n,a),U(a,r),ne(l,r,null),U(a,o),U(a,c),ne(s,c,null),f=!0,u||(d=[K(r,"click",e[2]),K(c,"click",e[3])],u=!0)},p(m,[v]){_!==(_=h(m))&&(g&&g.d(1),g=_&&_(m),g&&(g.c(),g.m(t,null)))},i(m){f||(N(l.$$.fragment,m),N(s.$$.fragment,m),f=!0)},o(m){O(l.$$.fragment,m),O(s.$$.fragment,m),f=!1},d(m){m&&y(n),g&&g.d(),ie(l),ie(s),u=!1,dn(d)}}}function Gs(e,n,t){const i=["Vanilla","Chocolate","Waffle","Stroopwafel"];let a="Vanilla";function r(c){let s=i.indexOf(a);s+=c=="next"?1:-1,s>=i.length&&(s=0),s<0&&(s=i.length-1),t(0,a=i[s])}return[a,r,c=>{c.preventDefault(),r("prev")},c=>{c.preventDefault(),r("next")}]}class Ks extends fe{constructor(n){super(),ce(this,n,Gs,Ws,ae,{})}}function $i(e,n,t){const i=e.slice();return i[3]=n[t],i}function Ui(e){let n,t=e[3]+"",i,a,r,l,o;function c(){return e[2](e[3])}return{c(){n=Z("button"),i=Ka(t),a=xe(),this.h()},l(s){n=M(s,"BUTTON",{class:!0});var f=L(n);i=ja(f,t),a=ye(f),f.forEach(y),this.h()},h(){C(n,"class","tab w-full flex justify-center py-1 px-4 rounded-md svelte-1v0way8"),n.disabled=r=e[3]==e[0],Cn(n,"selected",e[3]==e[0])},m(s,f){F(s,n,f),U(n,i),U(n,a),l||(o=K(n,"click",c),l=!0)},p(s,f){e=s,f&1&&r!==(r=e[3]==e[0])&&(n.disabled=r),f&3&&Cn(n,"selected",e[3]==e[0])},d(s){s&&y(n),l=!1,o()}}}function js(e){let n,t=`<span>Left Click: Reveal tile
                    <br/>
                    Right Click: Flag tile
                    <br/>
                    Middle Click: Move view
                    <br/>
                    Scroll Wheel: Zoom view
                    <br/> <br/>
                    Arrow Keys: Move view
                    <br/>
                    Open Square Bracket &#39;[&#39;: View zoom In
                    <br/>
                    Close Square Bracket &#39;]&#39;: View zoom Out
                    <br/></span>`;return{c(){n=Z("div"),n.innerHTML=t,this.h()},l(i){n=M(i,"DIV",{class:!0,"data-svelte-h":!0}),Fe(n)!=="svelte-docn7k"&&(n.innerHTML=t),this.h()},h(){C(n,"class","px-4")},m(i,a){F(i,n,a)},i:De,o:De,d(i){i&&y(n)}}}function qs(e){let n,t,i;return t=new Ks({}),{c(){n=Z("div"),ee(t.$$.fragment),this.h()},l(a){n=M(a,"DIV",{class:!0});var r=L(n);te(t.$$.fragment,r),r.forEach(y),this.h()},h(){C(n,"class","w-full h-full inline")},m(a,r){F(a,n,r),ne(t,n,null),i=!0},i(a){i||(N(t.$$.fragment,a),i=!0)},o(a){O(t.$$.fragment,a),i=!1},d(a){a&&y(n),ie(t)}}}function Js(e){let n,t=`<div><a class="text-2xl font-bold" href="https://vulae.github.io/infinite-minesweeper">Infinite Minesweeper</a> <br/>
                    An infinite twist on Minesweeper that adds biomes that change the rules of the game.</div> <div class="pt-4"><span class="float-right text-xs font-extrabold">*Source code available on
                        <a class="underline" href="https://github.com/Vulae/infinite-minesweeper">GitHub</a></span></div>`;return{c(){n=Z("div"),n.innerHTML=t,this.h()},l(i){n=M(i,"DIV",{class:!0,"data-svelte-h":!0}),Fe(n)!=="svelte-1yloiaf"&&(n.innerHTML=t),this.h()},h(){C(n,"class","px-4 w-full h-full flex flex-col justify-between")},m(i,a){F(i,n,a)},i:De,o:De,d(i){i&&y(n)}}}function Qs(e){let n,t,i,a,r,l,o,c,s,f=zt(e[1]),u=[];for(let g=0;g<f.length;g+=1)u[g]=Ui($i(e,f,g));const d=[Js,qs,js],h=[];function _(g,m){return g[0]=="Information"?0:g[0]=="Biomes"?1:g[0]=="Controls"?2:-1}return~(o=_(e))&&(c=h[o]=d[o](e)),{c(){n=Z("div"),t=Z("div");for(let g=0;g<u.length;g+=1)u[g].c();i=xe(),a=Z("div"),r=xe(),l=Z("div"),c&&c.c(),this.h()},l(g){n=M(g,"DIV",{class:!0});var m=L(n);t=M(m,"DIV",{class:!0});var v=L(t);for(let p=0;p<u.length;p+=1)u[p].l(v);v.forEach(y),i=ye(m),a=M(m,"DIV",{class:!0}),L(a).forEach(y),r=ye(m),l=M(m,"DIV",{class:!0});var k=L(l);c&&c.l(k),k.forEach(y),m.forEach(y),this.h()},h(){C(t,"class","px-4 grid grid-flow-col gap-4 items-center font-bold"),C(a,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full"),C(l,"class","w-[32rem] h-64 py-2 font-semibold"),C(n,"class","grid px-4 py-2 rounded-2xl bg-white bg-opacity-50")},m(g,m){F(g,n,m),U(n,t);for(let v=0;v<u.length;v+=1)u[v]&&u[v].m(t,null);U(n,i),U(n,a),U(n,r),U(n,l),~o&&h[o].m(l,null),s=!0},p(g,[m]){if(m&3){f=zt(g[1]);let k;for(k=0;k<f.length;k+=1){const p=$i(g,f,k);u[k]?u[k].p(p,m):(u[k]=Ui(p),u[k].c(),u[k].m(t,null))}for(;k<u.length;k+=1)u[k].d(1);u.length=f.length}let v=o;o=_(g),o!==v&&(c&&(Ct(),O(h[v],1,1,()=>{h[v]=null}),Zt()),~o?(c=h[o],c||(c=h[o]=d[o](g),c.c()),N(c,1),c.m(l,null)):c=null)},i(g){s||(N(c),s=!0)},o(g){O(c),s=!1},d(g){g&&y(n),Vi(u,g),~o&&h[o].d()}}}function ef(e,n,t){const i=["Information","Biomes","Controls"];let a="Information";return[a,i,l=>t(0,a=l)]}class tf extends fe{constructor(n){super(),ce(this,n,ef,Qs,ae,{})}}function Oi(e){let n,t;return n=new Es({props:{saveSlot:e[0]}}),{c(){ee(n.$$.fragment)},l(i){te(n.$$.fragment,i)},m(i,a){ne(n,i,a),t=!0},p(i,a){const r={};a&1&&(r.saveSlot=i[0]),n.$set(r)},i(i){t||(N(n.$$.fragment,i),t=!0)},o(i){O(n.$$.fragment,i),t=!1},d(i){ie(n,i)}}}function nf(e){let n,t;return n=new tf({}),{c(){ee(n.$$.fragment)},l(i){te(n.$$.fragment,i)},m(i,a){ne(n,i,a),t=!0},i(i){t||(N(n.$$.fragment,i),t=!0)},o(i){O(n.$$.fragment,i),t=!1},d(i){ie(n,i)}}}function af(e){let n,t,i,a,r,l,o,c,s,f,u,d,h,_,g,m=e[0]&&Oi(e);c=new Is({});function v(p){e[6](p)}let k={$$slots:{default:[nf]},$$scope:{ctx:e}};return e[3]!==void 0&&(k.visible=e[3]),u=new Ms({props:k}),Pi.push(()=>Ja(u,"visible",v)),{c(){n=Z("div"),t=Z("div"),m&&m.c(),i=xe(),a=Z("div"),r=Z("div"),l=Z("div"),o=Z("button"),ee(c.$$.fragment),f=xe(),ee(u.$$.fragment),this.h()},l(p){n=M(p,"DIV",{class:!0});var b=L(n);t=M(b,"DIV",{class:!0});var w=L(t);m&&m.l(w),w.forEach(y),i=ye(b),a=M(b,"DIV",{class:!0});var D=L(a);r=M(D,"DIV",{class:!0});var x=L(r);l=M(x,"DIV",{class:!0});var I=L(l);o=M(I,"BUTTON",{class:!0});var A=L(o);te(c.$$.fragment,A),A.forEach(y),I.forEach(y),x.forEach(y),D.forEach(y),b.forEach(y),f=ye(p),te(u.$$.fragment,p),this.h()},h(){C(t,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1"),C(o,"class","rounded-full drop-shadow-sm"),C(l,"class","pointer-events-auto flex items-center gap-2 rounded-full bg-white bg-opacity-30 backdrop-blur-md shadow-lg text-white font-bold stroke-[3]"),_e(l,"flex-direction",e[1]=="vertical"?"column":"row"),_e(l,"padding",e[1]=="vertical"?"1rem 0.5rem":"0.5rem 1rem"),C(r,"class","w-full h-full flex items-center p-4"),_e(r,"flex-direction",e[1]=="vertical"?"row":"column"),_e(r,"justify-content",e[2]=="start"?"start":"end"),C(a,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1 pointer-events-none"),C(n,"class","w-screen h-screen grid grid-cols-1 grid-rows-1")},m(p,b){F(p,n,b),U(n,t),m&&m.m(t,null),U(n,i),U(n,a),U(a,r),U(r,l),U(l,o),ne(c,o,null),F(p,f,b),ne(u,p,b),h=!0,_||(g=[K(o,"click",e[4]),Bi(s=Xa.call(null,a,e[5]))],_=!0)},p(p,[b]){p[0]?m?(m.p(p,b),b&1&&N(m,1)):(m=Oi(p),m.c(),N(m,1),m.m(t,null)):m&&(Ct(),O(m,1,1,()=>{m=null}),Zt()),b&2&&_e(l,"flex-direction",p[1]=="vertical"?"column":"row"),b&2&&_e(l,"padding",p[1]=="vertical"?"1rem 0.5rem":"0.5rem 1rem"),b&2&&_e(r,"flex-direction",p[1]=="vertical"?"row":"column"),b&4&&_e(r,"justify-content",p[2]=="start"?"start":"end"),s&&Fi(s.update)&&b&6&&s.update.call(null,p[5]);const w={};b&128&&(w.$$scope={dirty:b,ctx:p}),!d&&b&8&&(d=!0,w.visible=p[3],qa(()=>d=!1)),u.$set(w)},i(p){h||(N(m),N(c.$$.fragment,p),N(u.$$.fragment,p),h=!0)},o(p){O(m),O(c.$$.fragment,p),O(u.$$.fragment,p),h=!1},d(p){p&&(y(n),y(f)),m&&m.d(),ie(c),ie(u,p),_=!1,dn(g)}}}function rf(e,n,t){let i=null;un(()=>{const f=new URL(location.href);t(0,i=f.searchParams.get("saveSlot")??"save")});let a="vertical",r="end",l=!0;const o=()=>t(3,l=!0),c=(f,u)=>{t(1,a=f>u?"vertical":"horizontal"),t(2,r=f>u?"end":"start")};function s(f){l=f,t(3,l)}return[i,a,r,l,o,c,s]}class ff extends fe{constructor(n){super(),ce(this,n,rf,af,ae,{})}}export{ff as component};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
