var ja=Object.defineProperty;var Va=(e,n,t)=>n in e?ja(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t;var Z=(e,n,t)=>(Va(e,typeof n!="symbol"?n+"":n,t),t);import{s as Te,l as Ct,P as le,Q as Wi,r as Ue,R as $i,b as L,f as T,S as Tt,i as J,h as N,u as Mt,p as Ut,q as Lt,T as qa,U as Hn,V as Le,e as O,a as ce,t as me,c as F,g as he,d as pe,o as B,j as zt,W as te,X as Ja,E as Qa,n as ln,B as er,Y as tr,w as ji,Z as nr,y as Dt,_ as on,$ as ir}from"../chunks/scheduler.jOu4T3ze.js";import{S as Ye,i as Ge,t as H,a as K,b as Oe,d as Fe,m as Be,e as He,g as vn,c as kn,f as sn}from"../chunks/index.45lNn86r.js";function Pn(e){return(e==null?void 0:e.length)!==void 0?e:Array.from(e)}function Ot(e,n){const t={},i={},a={$$scope:1};let r=e.length;for(;r--;){const o=e[r],l=n[r];if(l){for(const c in o)c in l||(i[c]=1);for(const c in l)a[c]||(t[c]=l[c],a[c]=1);e[r]=l}else for(const c in o)a[c]=1}for(const o in i)o in t||(t[o]=void 0);return t}function Vi(e){return typeof e=="object"&&e!==null?e:{}}class ar{constructor(n,t){Z(this,"world");Z(this,"canvas");Z(this,"ctx");Z(this,"cameraX",0);Z(this,"cameraY",0);Z(this,"cameraZoom",32);Z(this,"cameraMinZoom",4);Z(this,"cameraMaxZoom",64);this.world=n,this.canvas=t;const i=this.canvas.getContext("2d");if(!i)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=i}cameraWidth(){return this.canvas.width/this.cameraZoom}cameraHeight(){return this.canvas.height/this.cameraZoom}cameraTranslate(n,t){this.cameraX-=n/this.cameraZoom,this.cameraY-=t/this.cameraZoom}cameraScale(n){const t=this.cameraX+this.cameraWidth()*.5,i=this.cameraY+this.cameraHeight()*.5;this.cameraZoom*=n,this.canvas.width/this.cameraZoom<this.cameraMinZoom&&(this.cameraZoom=this.canvas.width/this.cameraMinZoom),this.canvas.height/this.cameraZoom<this.cameraMinZoom&&(this.cameraZoom=this.canvas.height/this.cameraMinZoom),this.canvas.width/this.cameraZoom>this.cameraMaxZoom&&(this.cameraZoom=this.canvas.width/this.cameraMaxZoom),this.canvas.height/this.cameraZoom>this.cameraMaxZoom&&(this.cameraZoom=this.canvas.height/this.cameraMaxZoom);const a=this.cameraX+this.cameraWidth()*.5,r=this.cameraY+this.cameraHeight()*.5;return this.cameraX-=a-t,this.cameraY-=r-i,this.cameraZoom}cameraBounds(n=0){return{minX:Math.floor(this.cameraX-n),minY:Math.floor(this.cameraY-n),maxX:Math.ceil(this.cameraX+this.cameraWidth()+n),maxY:Math.ceil(this.cameraY+this.cameraHeight()+n)}}cameraPos(n,t){return{x:Math.floor(n/this.cameraZoom+this.cameraX),y:Math.floor(t/this.cameraZoom+this.cameraY)}}renderWorld(){this.ctx.imageSmoothingEnabled=!1,this.ctx.scale(this.cameraZoom,this.cameraZoom),this.ctx.translate(-this.cameraX,-this.cameraY);const n=this.cameraBounds(1);for(let t=n.minX;t<n.maxX;t++)for(let i=n.minY;i<n.maxY;i++)this.ctx.save(),this.ctx.translate(t,i),this.ctx.scale(1.01,1.01),this.world.getTile(t,i).render(this.ctx),this.ctx.restore();this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.ctx.fillStyle="purple",this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.renderWorld()}}/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */const rr=4,Xn=0,Yn=1,lr=2;function Ke(e){let n=e.length;for(;--n>=0;)e[n]=0}const or=0,qi=1,sr=2,fr=3,cr=258,xn=29,dt=256,it=dt+1+xn,Ce=30,yn=19,Ji=2*it+1,ve=15,Yt=16,hr=7,En=256,Qi=16,ea=17,ta=18,fn=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),At=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),dr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),na=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),_r=512,se=new Array((it+2)*2);Ke(se);const et=new Array(Ce*2);Ke(et);const at=new Array(_r);Ke(at);const rt=new Array(cr-fr+1);Ke(rt);const An=new Array(xn);Ke(An);const Rt=new Array(Ce);Ke(Rt);function Gt(e,n,t,i,a){this.static_tree=e,this.extra_bits=n,this.extra_base=t,this.elems=i,this.max_length=a,this.has_stree=e&&e.length}let ia,aa,ra;function Kt(e,n){this.dyn_tree=e,this.max_code=0,this.stat_desc=n}const la=e=>e<256?at[e]:at[256+(e>>>7)],lt=(e,n)=>{e.pending_buf[e.pending++]=n&255,e.pending_buf[e.pending++]=n>>>8&255},j=(e,n,t)=>{e.bi_valid>Yt-t?(e.bi_buf|=n<<e.bi_valid&65535,lt(e,e.bi_buf),e.bi_buf=n>>Yt-e.bi_valid,e.bi_valid+=t-Yt):(e.bi_buf|=n<<e.bi_valid&65535,e.bi_valid+=t)},ie=(e,n,t)=>{j(e,t[n*2],t[n*2+1])},oa=(e,n)=>{let t=0;do t|=e&1,e>>>=1,t<<=1;while(--n>0);return t>>>1},ur=e=>{e.bi_valid===16?(lt(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=e.bi_buf&255,e.bi_buf>>=8,e.bi_valid-=8)},br=(e,n)=>{const t=n.dyn_tree,i=n.max_code,a=n.stat_desc.static_tree,r=n.stat_desc.has_stree,o=n.stat_desc.extra_bits,l=n.stat_desc.extra_base,c=n.stat_desc.max_length;let s,f,g,d,h,_,m=0;for(d=0;d<=ve;d++)e.bl_count[d]=0;for(t[e.heap[e.heap_max]*2+1]=0,s=e.heap_max+1;s<Ji;s++)f=e.heap[s],d=t[t[f*2+1]*2+1]+1,d>c&&(d=c,m++),t[f*2+1]=d,!(f>i)&&(e.bl_count[d]++,h=0,f>=l&&(h=o[f-l]),_=t[f*2],e.opt_len+=_*(d+h),r&&(e.static_len+=_*(a[f*2+1]+h)));if(m!==0){do{for(d=c-1;e.bl_count[d]===0;)d--;e.bl_count[d]--,e.bl_count[d+1]+=2,e.bl_count[c]--,m-=2}while(m>0);for(d=c;d!==0;d--)for(f=e.bl_count[d];f!==0;)g=e.heap[--s],!(g>i)&&(t[g*2+1]!==d&&(e.opt_len+=(d-t[g*2+1])*t[g*2],t[g*2+1]=d),f--)}},sa=(e,n,t)=>{const i=new Array(ve+1);let a=0,r,o;for(r=1;r<=ve;r++)a=a+t[r-1]<<1,i[r]=a;for(o=0;o<=n;o++){let l=e[o*2+1];l!==0&&(e[o*2]=oa(i[l]++,l))}},gr=()=>{let e,n,t,i,a;const r=new Array(ve+1);for(t=0,i=0;i<xn-1;i++)for(An[i]=t,e=0;e<1<<fn[i];e++)rt[t++]=i;for(rt[t-1]=i,a=0,i=0;i<16;i++)for(Rt[i]=a,e=0;e<1<<At[i];e++)at[a++]=i;for(a>>=7;i<Ce;i++)for(Rt[i]=a<<7,e=0;e<1<<At[i]-7;e++)at[256+a++]=i;for(n=0;n<=ve;n++)r[n]=0;for(e=0;e<=143;)se[e*2+1]=8,e++,r[8]++;for(;e<=255;)se[e*2+1]=9,e++,r[9]++;for(;e<=279;)se[e*2+1]=7,e++,r[7]++;for(;e<=287;)se[e*2+1]=8,e++,r[8]++;for(sa(se,it+1,r),e=0;e<Ce;e++)et[e*2+1]=5,et[e*2]=oa(e,5);ia=new Gt(se,fn,dt+1,it,ve),aa=new Gt(et,At,0,Ce,ve),ra=new Gt(new Array(0),dr,0,yn,hr)},fa=e=>{let n;for(n=0;n<it;n++)e.dyn_ltree[n*2]=0;for(n=0;n<Ce;n++)e.dyn_dtree[n*2]=0;for(n=0;n<yn;n++)e.bl_tree[n*2]=0;e.dyn_ltree[En*2]=1,e.opt_len=e.static_len=0,e.sym_next=e.matches=0},ca=e=>{e.bi_valid>8?lt(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0},Gn=(e,n,t,i)=>{const a=n*2,r=t*2;return e[a]<e[r]||e[a]===e[r]&&i[n]<=i[t]},Wt=(e,n,t)=>{const i=e.heap[t];let a=t<<1;for(;a<=e.heap_len&&(a<e.heap_len&&Gn(n,e.heap[a+1],e.heap[a],e.depth)&&a++,!Gn(n,i,e.heap[a],e.depth));)e.heap[t]=e.heap[a],t=a,a<<=1;e.heap[t]=i},Kn=(e,n,t)=>{let i,a,r=0,o,l;if(e.sym_next!==0)do i=e.pending_buf[e.sym_buf+r++]&255,i+=(e.pending_buf[e.sym_buf+r++]&255)<<8,a=e.pending_buf[e.sym_buf+r++],i===0?ie(e,a,n):(o=rt[a],ie(e,o+dt+1,n),l=fn[o],l!==0&&(a-=An[o],j(e,a,l)),i--,o=la(i),ie(e,o,t),l=At[o],l!==0&&(i-=Rt[o],j(e,i,l)));while(r<e.sym_next);ie(e,En,n)},cn=(e,n)=>{const t=n.dyn_tree,i=n.stat_desc.static_tree,a=n.stat_desc.has_stree,r=n.stat_desc.elems;let o,l,c=-1,s;for(e.heap_len=0,e.heap_max=Ji,o=0;o<r;o++)t[o*2]!==0?(e.heap[++e.heap_len]=c=o,e.depth[o]=0):t[o*2+1]=0;for(;e.heap_len<2;)s=e.heap[++e.heap_len]=c<2?++c:0,t[s*2]=1,e.depth[s]=0,e.opt_len--,a&&(e.static_len-=i[s*2+1]);for(n.max_code=c,o=e.heap_len>>1;o>=1;o--)Wt(e,t,o);s=r;do o=e.heap[1],e.heap[1]=e.heap[e.heap_len--],Wt(e,t,1),l=e.heap[1],e.heap[--e.heap_max]=o,e.heap[--e.heap_max]=l,t[s*2]=t[o*2]+t[l*2],e.depth[s]=(e.depth[o]>=e.depth[l]?e.depth[o]:e.depth[l])+1,t[o*2+1]=t[l*2+1]=s,e.heap[1]=s++,Wt(e,t,1);while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],br(e,n),sa(t,c,e.bl_count)},Wn=(e,n,t)=>{let i,a=-1,r,o=n[0*2+1],l=0,c=7,s=4;for(o===0&&(c=138,s=3),n[(t+1)*2+1]=65535,i=0;i<=t;i++)r=o,o=n[(i+1)*2+1],!(++l<c&&r===o)&&(l<s?e.bl_tree[r*2]+=l:r!==0?(r!==a&&e.bl_tree[r*2]++,e.bl_tree[Qi*2]++):l<=10?e.bl_tree[ea*2]++:e.bl_tree[ta*2]++,l=0,a=r,o===0?(c=138,s=3):r===o?(c=6,s=3):(c=7,s=4))},$n=(e,n,t)=>{let i,a=-1,r,o=n[0*2+1],l=0,c=7,s=4;for(o===0&&(c=138,s=3),i=0;i<=t;i++)if(r=o,o=n[(i+1)*2+1],!(++l<c&&r===o)){if(l<s)do ie(e,r,e.bl_tree);while(--l!==0);else r!==0?(r!==a&&(ie(e,r,e.bl_tree),l--),ie(e,Qi,e.bl_tree),j(e,l-3,2)):l<=10?(ie(e,ea,e.bl_tree),j(e,l-3,3)):(ie(e,ta,e.bl_tree),j(e,l-11,7));l=0,a=r,o===0?(c=138,s=3):r===o?(c=6,s=3):(c=7,s=4)}},wr=e=>{let n;for(Wn(e,e.dyn_ltree,e.l_desc.max_code),Wn(e,e.dyn_dtree,e.d_desc.max_code),cn(e,e.bl_desc),n=yn-1;n>=3&&e.bl_tree[na[n]*2+1]===0;n--);return e.opt_len+=3*(n+1)+5+5+4,n},mr=(e,n,t,i)=>{let a;for(j(e,n-257,5),j(e,t-1,5),j(e,i-4,4),a=0;a<i;a++)j(e,e.bl_tree[na[a]*2+1],3);$n(e,e.dyn_ltree,n-1),$n(e,e.dyn_dtree,t-1)},pr=e=>{let n=4093624447,t;for(t=0;t<=31;t++,n>>>=1)if(n&1&&e.dyn_ltree[t*2]!==0)return Xn;if(e.dyn_ltree[9*2]!==0||e.dyn_ltree[10*2]!==0||e.dyn_ltree[13*2]!==0)return Yn;for(t=32;t<dt;t++)if(e.dyn_ltree[t*2]!==0)return Yn;return Xn};let jn=!1;const vr=e=>{jn||(gr(),jn=!0),e.l_desc=new Kt(e.dyn_ltree,ia),e.d_desc=new Kt(e.dyn_dtree,aa),e.bl_desc=new Kt(e.bl_tree,ra),e.bi_buf=0,e.bi_valid=0,fa(e)},ha=(e,n,t,i)=>{j(e,(or<<1)+(i?1:0),3),ca(e),lt(e,t),lt(e,~t),t&&e.pending_buf.set(e.window.subarray(n,n+t),e.pending),e.pending+=t},kr=e=>{j(e,qi<<1,3),ie(e,En,se),ur(e)},xr=(e,n,t,i)=>{let a,r,o=0;e.level>0?(e.strm.data_type===lr&&(e.strm.data_type=pr(e)),cn(e,e.l_desc),cn(e,e.d_desc),o=wr(e),a=e.opt_len+3+7>>>3,r=e.static_len+3+7>>>3,r<=a&&(a=r)):a=r=t+5,t+4<=a&&n!==-1?ha(e,n,t,i):e.strategy===rr||r===a?(j(e,(qi<<1)+(i?1:0),3),Kn(e,se,et)):(j(e,(sr<<1)+(i?1:0),3),mr(e,e.l_desc.max_code+1,e.d_desc.max_code+1,o+1),Kn(e,e.dyn_ltree,e.dyn_dtree)),fa(e),i&&ca(e)},yr=(e,n,t)=>(e.pending_buf[e.sym_buf+e.sym_next++]=n,e.pending_buf[e.sym_buf+e.sym_next++]=n>>8,e.pending_buf[e.sym_buf+e.sym_next++]=t,n===0?e.dyn_ltree[t*2]++:(e.matches++,n--,e.dyn_ltree[(rt[t]+dt+1)*2]++,e.dyn_dtree[la(n)*2]++),e.sym_next===e.sym_end);var Er=vr,Ar=ha,Sr=xr,Tr=yr,zr=kr,Dr={_tr_init:Er,_tr_stored_block:Ar,_tr_flush_block:Sr,_tr_tally:Tr,_tr_align:zr};const Rr=(e,n,t,i)=>{let a=e&65535|0,r=e>>>16&65535|0,o=0;for(;t!==0;){o=t>2e3?2e3:t,t-=o;do a=a+n[i++]|0,r=r+a|0;while(--o);a%=65521,r%=65521}return a|r<<16|0};var ot=Rr;const Zr=()=>{let e,n=[];for(var t=0;t<256;t++){e=t;for(var i=0;i<8;i++)e=e&1?3988292384^e>>>1:e>>>1;n[t]=e}return n},Ir=new Uint32Array(Zr()),Nr=(e,n,t,i)=>{const a=Ir,r=i+t;e^=-1;for(let o=i;o<r;o++)e=e>>>8^a[(e^n[o])&255];return e^-1};var P=Nr,Ee={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},ze={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:Cr,_tr_stored_block:hn,_tr_flush_block:Mr,_tr_tally:ue,_tr_align:Ur}=Dr,{Z_NO_FLUSH:be,Z_PARTIAL_FLUSH:Lr,Z_FULL_FLUSH:Or,Z_FINISH:Q,Z_BLOCK:Vn,Z_OK:Y,Z_STREAM_END:qn,Z_STREAM_ERROR:ae,Z_DATA_ERROR:Fr,Z_BUF_ERROR:$t,Z_DEFAULT_COMPRESSION:Br,Z_FILTERED:Hr,Z_HUFFMAN_ONLY:pt,Z_RLE:Pr,Z_FIXED:Xr,Z_DEFAULT_STRATEGY:Yr,Z_UNKNOWN:Gr,Z_DEFLATED:Ft}=ze,Kr=9,Wr=15,$r=8,jr=29,Vr=256,dn=Vr+1+jr,qr=30,Jr=19,Qr=2*dn+1,el=15,D=3,_e=258,re=_e+D+1,tl=32,Pe=42,Sn=57,_n=69,un=73,bn=91,gn=103,ke=113,qe=666,$=1,We=2,Ae=3,$e=4,nl=3,xe=(e,n)=>(e.msg=Ee[n],n),Jn=e=>e*2-(e>4?9:0),de=e=>{let n=e.length;for(;--n>=0;)e[n]=0},il=e=>{let n,t,i,a=e.w_size;n=e.hash_size,i=n;do t=e.head[--i],e.head[i]=t>=a?t-a:0;while(--n);n=a,i=n;do t=e.prev[--i],e.prev[i]=t>=a?t-a:0;while(--n)};let al=(e,n,t)=>(n<<e.hash_shift^t)&e.hash_mask,ge=al;const V=e=>{const n=e.state;let t=n.pending;t>e.avail_out&&(t=e.avail_out),t!==0&&(e.output.set(n.pending_buf.subarray(n.pending_out,n.pending_out+t),e.next_out),e.next_out+=t,n.pending_out+=t,e.total_out+=t,e.avail_out-=t,n.pending-=t,n.pending===0&&(n.pending_out=0))},q=(e,n)=>{Mr(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,n),e.block_start=e.strstart,V(e.strm)},I=(e,n)=>{e.pending_buf[e.pending++]=n},Ve=(e,n)=>{e.pending_buf[e.pending++]=n>>>8&255,e.pending_buf[e.pending++]=n&255},wn=(e,n,t,i)=>{let a=e.avail_in;return a>i&&(a=i),a===0?0:(e.avail_in-=a,n.set(e.input.subarray(e.next_in,e.next_in+a),t),e.state.wrap===1?e.adler=ot(e.adler,n,a,t):e.state.wrap===2&&(e.adler=P(e.adler,n,a,t)),e.next_in+=a,e.total_in+=a,a)},da=(e,n)=>{let t=e.max_chain_length,i=e.strstart,a,r,o=e.prev_length,l=e.nice_match;const c=e.strstart>e.w_size-re?e.strstart-(e.w_size-re):0,s=e.window,f=e.w_mask,g=e.prev,d=e.strstart+_e;let h=s[i+o-1],_=s[i+o];e.prev_length>=e.good_match&&(t>>=2),l>e.lookahead&&(l=e.lookahead);do if(a=n,!(s[a+o]!==_||s[a+o-1]!==h||s[a]!==s[i]||s[++a]!==s[i+1])){i+=2,a++;do;while(s[++i]===s[++a]&&s[++i]===s[++a]&&s[++i]===s[++a]&&s[++i]===s[++a]&&s[++i]===s[++a]&&s[++i]===s[++a]&&s[++i]===s[++a]&&s[++i]===s[++a]&&i<d);if(r=_e-(d-i),i=d-_e,r>o){if(e.match_start=n,o=r,r>=l)break;h=s[i+o-1],_=s[i+o]}}while((n=g[n&f])>c&&--t!==0);return o<=e.lookahead?o:e.lookahead},Xe=e=>{const n=e.w_size;let t,i,a;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=n+(n-re)&&(e.window.set(e.window.subarray(n,n+n-i),0),e.match_start-=n,e.strstart-=n,e.block_start-=n,e.insert>e.strstart&&(e.insert=e.strstart),il(e),i+=n),e.strm.avail_in===0)break;if(t=wn(e.strm,e.window,e.strstart+e.lookahead,i),e.lookahead+=t,e.lookahead+e.insert>=D)for(a=e.strstart-e.insert,e.ins_h=e.window[a],e.ins_h=ge(e,e.ins_h,e.window[a+1]);e.insert&&(e.ins_h=ge(e,e.ins_h,e.window[a+D-1]),e.prev[a&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=a,a++,e.insert--,!(e.lookahead+e.insert<D)););}while(e.lookahead<re&&e.strm.avail_in!==0)},_a=(e,n)=>{let t=e.pending_buf_size-5>e.w_size?e.w_size:e.pending_buf_size-5,i,a,r,o=0,l=e.strm.avail_in;do{if(i=65535,r=e.bi_valid+42>>3,e.strm.avail_out<r||(r=e.strm.avail_out-r,a=e.strstart-e.block_start,i>a+e.strm.avail_in&&(i=a+e.strm.avail_in),i>r&&(i=r),i<t&&(i===0&&n!==Q||n===be||i!==a+e.strm.avail_in)))break;o=n===Q&&i===a+e.strm.avail_in?1:0,hn(e,0,0,o),e.pending_buf[e.pending-4]=i,e.pending_buf[e.pending-3]=i>>8,e.pending_buf[e.pending-2]=~i,e.pending_buf[e.pending-1]=~i>>8,V(e.strm),a&&(a>i&&(a=i),e.strm.output.set(e.window.subarray(e.block_start,e.block_start+a),e.strm.next_out),e.strm.next_out+=a,e.strm.avail_out-=a,e.strm.total_out+=a,e.block_start+=a,i-=a),i&&(wn(e.strm,e.strm.output,e.strm.next_out,i),e.strm.next_out+=i,e.strm.avail_out-=i,e.strm.total_out+=i)}while(o===0);return l-=e.strm.avail_in,l&&(l>=e.w_size?(e.matches=2,e.window.set(e.strm.input.subarray(e.strm.next_in-e.w_size,e.strm.next_in),0),e.strstart=e.w_size,e.insert=e.strstart):(e.window_size-e.strstart<=l&&(e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,e.insert>e.strstart&&(e.insert=e.strstart)),e.window.set(e.strm.input.subarray(e.strm.next_in-l,e.strm.next_in),e.strstart),e.strstart+=l,e.insert+=l>e.w_size-e.insert?e.w_size-e.insert:l),e.block_start=e.strstart),e.high_water<e.strstart&&(e.high_water=e.strstart),o?$e:n!==be&&n!==Q&&e.strm.avail_in===0&&e.strstart===e.block_start?We:(r=e.window_size-e.strstart,e.strm.avail_in>r&&e.block_start>=e.w_size&&(e.block_start-=e.w_size,e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,r+=e.w_size,e.insert>e.strstart&&(e.insert=e.strstart)),r>e.strm.avail_in&&(r=e.strm.avail_in),r&&(wn(e.strm,e.window,e.strstart,r),e.strstart+=r,e.insert+=r>e.w_size-e.insert?e.w_size-e.insert:r),e.high_water<e.strstart&&(e.high_water=e.strstart),r=e.bi_valid+42>>3,r=e.pending_buf_size-r>65535?65535:e.pending_buf_size-r,t=r>e.w_size?e.w_size:r,a=e.strstart-e.block_start,(a>=t||(a||n===Q)&&n!==be&&e.strm.avail_in===0&&a<=r)&&(i=a>r?r:a,o=n===Q&&e.strm.avail_in===0&&i===a?1:0,hn(e,e.block_start,i,o),e.block_start+=i,V(e.strm)),o?Ae:$)},jt=(e,n)=>{let t,i;for(;;){if(e.lookahead<re){if(Xe(e),e.lookahead<re&&n===be)return $;if(e.lookahead===0)break}if(t=0,e.lookahead>=D&&(e.ins_h=ge(e,e.ins_h,e.window[e.strstart+D-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),t!==0&&e.strstart-t<=e.w_size-re&&(e.match_length=da(e,t)),e.match_length>=D)if(i=ue(e,e.strstart-e.match_start,e.match_length-D),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=D){e.match_length--;do e.strstart++,e.ins_h=ge(e,e.ins_h,e.window[e.strstart+D-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart;while(--e.match_length!==0);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=ge(e,e.ins_h,e.window[e.strstart+1]);else i=ue(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(i&&(q(e,!1),e.strm.avail_out===0))return $}return e.insert=e.strstart<D-1?e.strstart:D-1,n===Q?(q(e,!0),e.strm.avail_out===0?Ae:$e):e.sym_next&&(q(e,!1),e.strm.avail_out===0)?$:We},Ie=(e,n)=>{let t,i,a;for(;;){if(e.lookahead<re){if(Xe(e),e.lookahead<re&&n===be)return $;if(e.lookahead===0)break}if(t=0,e.lookahead>=D&&(e.ins_h=ge(e,e.ins_h,e.window[e.strstart+D-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=D-1,t!==0&&e.prev_length<e.max_lazy_match&&e.strstart-t<=e.w_size-re&&(e.match_length=da(e,t),e.match_length<=5&&(e.strategy===Hr||e.match_length===D&&e.strstart-e.match_start>4096)&&(e.match_length=D-1)),e.prev_length>=D&&e.match_length<=e.prev_length){a=e.strstart+e.lookahead-D,i=ue(e,e.strstart-1-e.prev_match,e.prev_length-D),e.lookahead-=e.prev_length-1,e.prev_length-=2;do++e.strstart<=a&&(e.ins_h=ge(e,e.ins_h,e.window[e.strstart+D-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart);while(--e.prev_length!==0);if(e.match_available=0,e.match_length=D-1,e.strstart++,i&&(q(e,!1),e.strm.avail_out===0))return $}else if(e.match_available){if(i=ue(e,0,e.window[e.strstart-1]),i&&q(e,!1),e.strstart++,e.lookahead--,e.strm.avail_out===0)return $}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(i=ue(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<D-1?e.strstart:D-1,n===Q?(q(e,!0),e.strm.avail_out===0?Ae:$e):e.sym_next&&(q(e,!1),e.strm.avail_out===0)?$:We},rl=(e,n)=>{let t,i,a,r;const o=e.window;for(;;){if(e.lookahead<=_e){if(Xe(e),e.lookahead<=_e&&n===be)return $;if(e.lookahead===0)break}if(e.match_length=0,e.lookahead>=D&&e.strstart>0&&(a=e.strstart-1,i=o[a],i===o[++a]&&i===o[++a]&&i===o[++a])){r=e.strstart+_e;do;while(i===o[++a]&&i===o[++a]&&i===o[++a]&&i===o[++a]&&i===o[++a]&&i===o[++a]&&i===o[++a]&&i===o[++a]&&a<r);e.match_length=_e-(r-a),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=D?(t=ue(e,1,e.match_length-D),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(t=ue(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),t&&(q(e,!1),e.strm.avail_out===0))return $}return e.insert=0,n===Q?(q(e,!0),e.strm.avail_out===0?Ae:$e):e.sym_next&&(q(e,!1),e.strm.avail_out===0)?$:We},ll=(e,n)=>{let t;for(;;){if(e.lookahead===0&&(Xe(e),e.lookahead===0)){if(n===be)return $;break}if(e.match_length=0,t=ue(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,t&&(q(e,!1),e.strm.avail_out===0))return $}return e.insert=0,n===Q?(q(e,!0),e.strm.avail_out===0?Ae:$e):e.sym_next&&(q(e,!1),e.strm.avail_out===0)?$:We};function ne(e,n,t,i,a){this.good_length=e,this.max_lazy=n,this.nice_length=t,this.max_chain=i,this.func=a}const Je=[new ne(0,0,0,0,_a),new ne(4,4,8,4,jt),new ne(4,5,16,8,jt),new ne(4,6,32,32,jt),new ne(4,4,16,16,Ie),new ne(8,16,32,32,Ie),new ne(8,16,128,128,Ie),new ne(8,32,128,256,Ie),new ne(32,128,258,1024,Ie),new ne(32,258,258,4096,Ie)],ol=e=>{e.window_size=2*e.w_size,de(e.head),e.max_lazy_match=Je[e.level].max_lazy,e.good_match=Je[e.level].good_length,e.nice_match=Je[e.level].nice_length,e.max_chain_length=Je[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=D-1,e.match_available=0,e.ins_h=0};function sl(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=Ft,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(Qr*2),this.dyn_dtree=new Uint16Array((2*qr+1)*2),this.bl_tree=new Uint16Array((2*Jr+1)*2),de(this.dyn_ltree),de(this.dyn_dtree),de(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(el+1),this.heap=new Uint16Array(2*dn+1),de(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(2*dn+1),de(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const _t=e=>{if(!e)return 1;const n=e.state;return!n||n.strm!==e||n.status!==Pe&&n.status!==Sn&&n.status!==_n&&n.status!==un&&n.status!==bn&&n.status!==gn&&n.status!==ke&&n.status!==qe?1:0},ua=e=>{if(_t(e))return xe(e,ae);e.total_in=e.total_out=0,e.data_type=Gr;const n=e.state;return n.pending=0,n.pending_out=0,n.wrap<0&&(n.wrap=-n.wrap),n.status=n.wrap===2?Sn:n.wrap?Pe:ke,e.adler=n.wrap===2?0:1,n.last_flush=-2,Cr(n),Y},ba=e=>{const n=ua(e);return n===Y&&ol(e.state),n},fl=(e,n)=>_t(e)||e.state.wrap!==2?ae:(e.state.gzhead=n,Y),ga=(e,n,t,i,a,r)=>{if(!e)return ae;let o=1;if(n===Br&&(n=6),i<0?(o=0,i=-i):i>15&&(o=2,i-=16),a<1||a>Kr||t!==Ft||i<8||i>15||n<0||n>9||r<0||r>Xr||i===8&&o!==1)return xe(e,ae);i===8&&(i=9);const l=new sl;return e.state=l,l.strm=e,l.status=Pe,l.wrap=o,l.gzhead=null,l.w_bits=i,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=a+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+D-1)/D),l.window=new Uint8Array(l.w_size*2),l.head=new Uint16Array(l.hash_size),l.prev=new Uint16Array(l.w_size),l.lit_bufsize=1<<a+6,l.pending_buf_size=l.lit_bufsize*4,l.pending_buf=new Uint8Array(l.pending_buf_size),l.sym_buf=l.lit_bufsize,l.sym_end=(l.lit_bufsize-1)*3,l.level=n,l.strategy=r,l.method=t,ba(e)},cl=(e,n)=>ga(e,n,Ft,Wr,$r,Yr),hl=(e,n)=>{if(_t(e)||n>Vn||n<0)return e?xe(e,ae):ae;const t=e.state;if(!e.output||e.avail_in!==0&&!e.input||t.status===qe&&n!==Q)return xe(e,e.avail_out===0?$t:ae);const i=t.last_flush;if(t.last_flush=n,t.pending!==0){if(V(e),e.avail_out===0)return t.last_flush=-1,Y}else if(e.avail_in===0&&Jn(n)<=Jn(i)&&n!==Q)return xe(e,$t);if(t.status===qe&&e.avail_in!==0)return xe(e,$t);if(t.status===Pe&&t.wrap===0&&(t.status=ke),t.status===Pe){let a=Ft+(t.w_bits-8<<4)<<8,r=-1;if(t.strategy>=pt||t.level<2?r=0:t.level<6?r=1:t.level===6?r=2:r=3,a|=r<<6,t.strstart!==0&&(a|=tl),a+=31-a%31,Ve(t,a),t.strstart!==0&&(Ve(t,e.adler>>>16),Ve(t,e.adler&65535)),e.adler=1,t.status=ke,V(e),t.pending!==0)return t.last_flush=-1,Y}if(t.status===Sn){if(e.adler=0,I(t,31),I(t,139),I(t,8),t.gzhead)I(t,(t.gzhead.text?1:0)+(t.gzhead.hcrc?2:0)+(t.gzhead.extra?4:0)+(t.gzhead.name?8:0)+(t.gzhead.comment?16:0)),I(t,t.gzhead.time&255),I(t,t.gzhead.time>>8&255),I(t,t.gzhead.time>>16&255),I(t,t.gzhead.time>>24&255),I(t,t.level===9?2:t.strategy>=pt||t.level<2?4:0),I(t,t.gzhead.os&255),t.gzhead.extra&&t.gzhead.extra.length&&(I(t,t.gzhead.extra.length&255),I(t,t.gzhead.extra.length>>8&255)),t.gzhead.hcrc&&(e.adler=P(e.adler,t.pending_buf,t.pending,0)),t.gzindex=0,t.status=_n;else if(I(t,0),I(t,0),I(t,0),I(t,0),I(t,0),I(t,t.level===9?2:t.strategy>=pt||t.level<2?4:0),I(t,nl),t.status=ke,V(e),t.pending!==0)return t.last_flush=-1,Y}if(t.status===_n){if(t.gzhead.extra){let a=t.pending,r=(t.gzhead.extra.length&65535)-t.gzindex;for(;t.pending+r>t.pending_buf_size;){let l=t.pending_buf_size-t.pending;if(t.pending_buf.set(t.gzhead.extra.subarray(t.gzindex,t.gzindex+l),t.pending),t.pending=t.pending_buf_size,t.gzhead.hcrc&&t.pending>a&&(e.adler=P(e.adler,t.pending_buf,t.pending-a,a)),t.gzindex+=l,V(e),t.pending!==0)return t.last_flush=-1,Y;a=0,r-=l}let o=new Uint8Array(t.gzhead.extra);t.pending_buf.set(o.subarray(t.gzindex,t.gzindex+r),t.pending),t.pending+=r,t.gzhead.hcrc&&t.pending>a&&(e.adler=P(e.adler,t.pending_buf,t.pending-a,a)),t.gzindex=0}t.status=un}if(t.status===un){if(t.gzhead.name){let a=t.pending,r;do{if(t.pending===t.pending_buf_size){if(t.gzhead.hcrc&&t.pending>a&&(e.adler=P(e.adler,t.pending_buf,t.pending-a,a)),V(e),t.pending!==0)return t.last_flush=-1,Y;a=0}t.gzindex<t.gzhead.name.length?r=t.gzhead.name.charCodeAt(t.gzindex++)&255:r=0,I(t,r)}while(r!==0);t.gzhead.hcrc&&t.pending>a&&(e.adler=P(e.adler,t.pending_buf,t.pending-a,a)),t.gzindex=0}t.status=bn}if(t.status===bn){if(t.gzhead.comment){let a=t.pending,r;do{if(t.pending===t.pending_buf_size){if(t.gzhead.hcrc&&t.pending>a&&(e.adler=P(e.adler,t.pending_buf,t.pending-a,a)),V(e),t.pending!==0)return t.last_flush=-1,Y;a=0}t.gzindex<t.gzhead.comment.length?r=t.gzhead.comment.charCodeAt(t.gzindex++)&255:r=0,I(t,r)}while(r!==0);t.gzhead.hcrc&&t.pending>a&&(e.adler=P(e.adler,t.pending_buf,t.pending-a,a))}t.status=gn}if(t.status===gn){if(t.gzhead.hcrc){if(t.pending+2>t.pending_buf_size&&(V(e),t.pending!==0))return t.last_flush=-1,Y;I(t,e.adler&255),I(t,e.adler>>8&255),e.adler=0}if(t.status=ke,V(e),t.pending!==0)return t.last_flush=-1,Y}if(e.avail_in!==0||t.lookahead!==0||n!==be&&t.status!==qe){let a=t.level===0?_a(t,n):t.strategy===pt?ll(t,n):t.strategy===Pr?rl(t,n):Je[t.level].func(t,n);if((a===Ae||a===$e)&&(t.status=qe),a===$||a===Ae)return e.avail_out===0&&(t.last_flush=-1),Y;if(a===We&&(n===Lr?Ur(t):n!==Vn&&(hn(t,0,0,!1),n===Or&&(de(t.head),t.lookahead===0&&(t.strstart=0,t.block_start=0,t.insert=0))),V(e),e.avail_out===0))return t.last_flush=-1,Y}return n!==Q?Y:t.wrap<=0?qn:(t.wrap===2?(I(t,e.adler&255),I(t,e.adler>>8&255),I(t,e.adler>>16&255),I(t,e.adler>>24&255),I(t,e.total_in&255),I(t,e.total_in>>8&255),I(t,e.total_in>>16&255),I(t,e.total_in>>24&255)):(Ve(t,e.adler>>>16),Ve(t,e.adler&65535)),V(e),t.wrap>0&&(t.wrap=-t.wrap),t.pending!==0?Y:qn)},dl=e=>{if(_t(e))return ae;const n=e.state.status;return e.state=null,n===ke?xe(e,Fr):Y},_l=(e,n)=>{let t=n.length;if(_t(e))return ae;const i=e.state,a=i.wrap;if(a===2||a===1&&i.status!==Pe||i.lookahead)return ae;if(a===1&&(e.adler=ot(e.adler,n,t,0)),i.wrap=0,t>=i.w_size){a===0&&(de(i.head),i.strstart=0,i.block_start=0,i.insert=0);let c=new Uint8Array(i.w_size);c.set(n.subarray(t-i.w_size,t),0),n=c,t=i.w_size}const r=e.avail_in,o=e.next_in,l=e.input;for(e.avail_in=t,e.next_in=0,e.input=n,Xe(i);i.lookahead>=D;){let c=i.strstart,s=i.lookahead-(D-1);do i.ins_h=ge(i,i.ins_h,i.window[c+D-1]),i.prev[c&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=c,c++;while(--s);i.strstart=c,i.lookahead=D-1,Xe(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=D-1,i.match_available=0,e.next_in=o,e.input=l,e.avail_in=r,i.wrap=a,Y};var ul=cl,bl=ga,gl=ba,wl=ua,ml=fl,pl=hl,vl=dl,kl=_l,xl="pako deflate (from Nodeca project)",tt={deflateInit:ul,deflateInit2:bl,deflateReset:gl,deflateResetKeep:wl,deflateSetHeader:ml,deflate:pl,deflateEnd:vl,deflateSetDictionary:kl,deflateInfo:xl};const yl=(e,n)=>Object.prototype.hasOwnProperty.call(e,n);var El=function(e){const n=Array.prototype.slice.call(arguments,1);for(;n.length;){const t=n.shift();if(t){if(typeof t!="object")throw new TypeError(t+"must be non-object");for(const i in t)yl(t,i)&&(e[i]=t[i])}}return e},Al=e=>{let n=0;for(let i=0,a=e.length;i<a;i++)n+=e[i].length;const t=new Uint8Array(n);for(let i=0,a=0,r=e.length;i<r;i++){let o=e[i];t.set(o,a),a+=o.length}return t},Bt={assign:El,flattenChunks:Al};let wa=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{wa=!1}const st=new Uint8Array(256);for(let e=0;e<256;e++)st[e]=e>=252?6:e>=248?5:e>=240?4:e>=224?3:e>=192?2:1;st[254]=st[254]=1;var Sl=e=>{if(typeof TextEncoder=="function"&&TextEncoder.prototype.encode)return new TextEncoder().encode(e);let n,t,i,a,r,o=e.length,l=0;for(a=0;a<o;a++)t=e.charCodeAt(a),(t&64512)===55296&&a+1<o&&(i=e.charCodeAt(a+1),(i&64512)===56320&&(t=65536+(t-55296<<10)+(i-56320),a++)),l+=t<128?1:t<2048?2:t<65536?3:4;for(n=new Uint8Array(l),r=0,a=0;r<l;a++)t=e.charCodeAt(a),(t&64512)===55296&&a+1<o&&(i=e.charCodeAt(a+1),(i&64512)===56320&&(t=65536+(t-55296<<10)+(i-56320),a++)),t<128?n[r++]=t:t<2048?(n[r++]=192|t>>>6,n[r++]=128|t&63):t<65536?(n[r++]=224|t>>>12,n[r++]=128|t>>>6&63,n[r++]=128|t&63):(n[r++]=240|t>>>18,n[r++]=128|t>>>12&63,n[r++]=128|t>>>6&63,n[r++]=128|t&63);return n};const Tl=(e,n)=>{if(n<65534&&e.subarray&&wa)return String.fromCharCode.apply(null,e.length===n?e:e.subarray(0,n));let t="";for(let i=0;i<n;i++)t+=String.fromCharCode(e[i]);return t};var zl=(e,n)=>{const t=n||e.length;if(typeof TextDecoder=="function"&&TextDecoder.prototype.decode)return new TextDecoder().decode(e.subarray(0,n));let i,a;const r=new Array(t*2);for(a=0,i=0;i<t;){let o=e[i++];if(o<128){r[a++]=o;continue}let l=st[o];if(l>4){r[a++]=65533,i+=l-1;continue}for(o&=l===2?31:l===3?15:7;l>1&&i<t;)o=o<<6|e[i++]&63,l--;if(l>1){r[a++]=65533;continue}o<65536?r[a++]=o:(o-=65536,r[a++]=55296|o>>10&1023,r[a++]=56320|o&1023)}return Tl(r,a)},Dl=(e,n)=>{n=n||e.length,n>e.length&&(n=e.length);let t=n-1;for(;t>=0&&(e[t]&192)===128;)t--;return t<0||t===0?n:t+st[e[t]]>n?t:n},ft={string2buf:Sl,buf2string:zl,utf8border:Dl};function Rl(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}var ma=Rl;const pa=Object.prototype.toString,{Z_NO_FLUSH:Zl,Z_SYNC_FLUSH:Il,Z_FULL_FLUSH:Nl,Z_FINISH:Cl,Z_OK:Zt,Z_STREAM_END:Ml,Z_DEFAULT_COMPRESSION:Ul,Z_DEFAULT_STRATEGY:Ll,Z_DEFLATED:Ol}=ze;function ut(e){this.options=Bt.assign({level:Ul,method:Ol,chunkSize:16384,windowBits:15,memLevel:8,strategy:Ll},e||{});let n=this.options;n.raw&&n.windowBits>0?n.windowBits=-n.windowBits:n.gzip&&n.windowBits>0&&n.windowBits<16&&(n.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new ma,this.strm.avail_out=0;let t=tt.deflateInit2(this.strm,n.level,n.method,n.windowBits,n.memLevel,n.strategy);if(t!==Zt)throw new Error(Ee[t]);if(n.header&&tt.deflateSetHeader(this.strm,n.header),n.dictionary){let i;if(typeof n.dictionary=="string"?i=ft.string2buf(n.dictionary):pa.call(n.dictionary)==="[object ArrayBuffer]"?i=new Uint8Array(n.dictionary):i=n.dictionary,t=tt.deflateSetDictionary(this.strm,i),t!==Zt)throw new Error(Ee[t]);this._dict_set=!0}}ut.prototype.push=function(e,n){const t=this.strm,i=this.options.chunkSize;let a,r;if(this.ended)return!1;for(n===~~n?r=n:r=n===!0?Cl:Zl,typeof e=="string"?t.input=ft.string2buf(e):pa.call(e)==="[object ArrayBuffer]"?t.input=new Uint8Array(e):t.input=e,t.next_in=0,t.avail_in=t.input.length;;){if(t.avail_out===0&&(t.output=new Uint8Array(i),t.next_out=0,t.avail_out=i),(r===Il||r===Nl)&&t.avail_out<=6){this.onData(t.output.subarray(0,t.next_out)),t.avail_out=0;continue}if(a=tt.deflate(t,r),a===Ml)return t.next_out>0&&this.onData(t.output.subarray(0,t.next_out)),a=tt.deflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===Zt;if(t.avail_out===0){this.onData(t.output);continue}if(r>0&&t.next_out>0){this.onData(t.output.subarray(0,t.next_out)),t.avail_out=0;continue}if(t.avail_in===0)break}return!0};ut.prototype.onData=function(e){this.chunks.push(e)};ut.prototype.onEnd=function(e){e===Zt&&(this.result=Bt.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};function Tn(e,n){const t=new ut(n);if(t.push(e,!0),t.err)throw t.msg||Ee[t.err];return t.result}function Fl(e,n){return n=n||{},n.raw=!0,Tn(e,n)}function Bl(e,n){return n=n||{},n.gzip=!0,Tn(e,n)}var Hl=ut,Pl=Tn,Xl=Fl,Yl=Bl,Gl=ze,Kl={Deflate:Hl,deflate:Pl,deflateRaw:Xl,gzip:Yl,constants:Gl};const vt=16209,Wl=16191;var $l=function(n,t){let i,a,r,o,l,c,s,f,g,d,h,_,m,v,w,y,E,b,A,z,p,S,u,k;const x=n.state;i=n.next_in,u=n.input,a=i+(n.avail_in-5),r=n.next_out,k=n.output,o=r-(t-n.avail_out),l=r+(n.avail_out-257),c=x.dmax,s=x.wsize,f=x.whave,g=x.wnext,d=x.window,h=x.hold,_=x.bits,m=x.lencode,v=x.distcode,w=(1<<x.lenbits)-1,y=(1<<x.distbits)-1;e:do{_<15&&(h+=u[i++]<<_,_+=8,h+=u[i++]<<_,_+=8),E=m[h&w];t:for(;;){if(b=E>>>24,h>>>=b,_-=b,b=E>>>16&255,b===0)k[r++]=E&65535;else if(b&16){A=E&65535,b&=15,b&&(_<b&&(h+=u[i++]<<_,_+=8),A+=h&(1<<b)-1,h>>>=b,_-=b),_<15&&(h+=u[i++]<<_,_+=8,h+=u[i++]<<_,_+=8),E=v[h&y];n:for(;;){if(b=E>>>24,h>>>=b,_-=b,b=E>>>16&255,b&16){if(z=E&65535,b&=15,_<b&&(h+=u[i++]<<_,_+=8,_<b&&(h+=u[i++]<<_,_+=8)),z+=h&(1<<b)-1,z>c){n.msg="invalid distance too far back",x.mode=vt;break e}if(h>>>=b,_-=b,b=r-o,z>b){if(b=z-b,b>f&&x.sane){n.msg="invalid distance too far back",x.mode=vt;break e}if(p=0,S=d,g===0){if(p+=s-b,b<A){A-=b;do k[r++]=d[p++];while(--b);p=r-z,S=k}}else if(g<b){if(p+=s+g-b,b-=g,b<A){A-=b;do k[r++]=d[p++];while(--b);if(p=0,g<A){b=g,A-=b;do k[r++]=d[p++];while(--b);p=r-z,S=k}}}else if(p+=g-b,b<A){A-=b;do k[r++]=d[p++];while(--b);p=r-z,S=k}for(;A>2;)k[r++]=S[p++],k[r++]=S[p++],k[r++]=S[p++],A-=3;A&&(k[r++]=S[p++],A>1&&(k[r++]=S[p++]))}else{p=r-z;do k[r++]=k[p++],k[r++]=k[p++],k[r++]=k[p++],A-=3;while(A>2);A&&(k[r++]=k[p++],A>1&&(k[r++]=k[p++]))}}else if(b&64){n.msg="invalid distance code",x.mode=vt;break e}else{E=v[(E&65535)+(h&(1<<b)-1)];continue n}break}}else if(b&64)if(b&32){x.mode=Wl;break e}else{n.msg="invalid literal/length code",x.mode=vt;break e}else{E=m[(E&65535)+(h&(1<<b)-1)];continue t}break}}while(i<a&&r<l);A=_>>3,i-=A,_-=A<<3,h&=(1<<_)-1,n.next_in=i,n.next_out=r,n.avail_in=i<a?5+(a-i):5-(i-a),n.avail_out=r<l?257+(l-r):257-(r-l),x.hold=h,x.bits=_};const Ne=15,Qn=852,ei=592,ti=0,Vt=1,ni=2,jl=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),Vl=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),ql=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),Jl=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),Ql=(e,n,t,i,a,r,o,l)=>{const c=l.bits;let s=0,f=0,g=0,d=0,h=0,_=0,m=0,v=0,w=0,y=0,E,b,A,z,p,S=null,u;const k=new Uint16Array(Ne+1),x=new Uint16Array(Ne+1);let M=null,gt,we,R;for(s=0;s<=Ne;s++)k[s]=0;for(f=0;f<i;f++)k[n[t+f]]++;for(h=c,d=Ne;d>=1&&k[d]===0;d--);if(h>d&&(h=d),d===0)return a[r++]=1<<24|64<<16|0,a[r++]=1<<24|64<<16|0,l.bits=1,0;for(g=1;g<d&&k[g]===0;g++);for(h<g&&(h=g),v=1,s=1;s<=Ne;s++)if(v<<=1,v-=k[s],v<0)return-1;if(v>0&&(e===ti||d!==1))return-1;for(x[1]=0,s=1;s<Ne;s++)x[s+1]=x[s]+k[s];for(f=0;f<i;f++)n[t+f]!==0&&(o[x[n[t+f]]++]=f);if(e===ti?(S=M=o,u=20):e===Vt?(S=jl,M=Vl,u=257):(S=ql,M=Jl,u=0),y=0,f=0,s=g,p=r,_=h,m=0,A=-1,w=1<<h,z=w-1,e===Vt&&w>Qn||e===ni&&w>ei)return 1;for(;;){gt=s-m,o[f]+1<u?(we=0,R=o[f]):o[f]>=u?(we=M[o[f]-u],R=S[o[f]-u]):(we=96,R=0),E=1<<s-m,b=1<<_,g=b;do b-=E,a[p+(y>>m)+b]=gt<<24|we<<16|R|0;while(b!==0);for(E=1<<s-1;y&E;)E>>=1;if(E!==0?(y&=E-1,y+=E):y=0,f++,--k[s]===0){if(s===d)break;s=n[t+o[f]]}if(s>h&&(y&z)!==A){for(m===0&&(m=h),p+=g,_=s-m,v=1<<_;_+m<d&&(v-=k[_+m],!(v<=0));)_++,v<<=1;if(w+=1<<_,e===Vt&&w>Qn||e===ni&&w>ei)return 1;A=y&z,a[A]=h<<24|_<<16|p-r|0}}return y!==0&&(a[p+y]=s-m<<24|64<<16|0),l.bits=h,0};var nt=Ql;const eo=0,va=1,ka=2,{Z_FINISH:ii,Z_BLOCK:to,Z_TREES:kt,Z_OK:Se,Z_STREAM_END:no,Z_NEED_DICT:io,Z_STREAM_ERROR:ee,Z_DATA_ERROR:xa,Z_MEM_ERROR:ya,Z_BUF_ERROR:ao,Z_DEFLATED:ai}=ze,Ht=16180,ri=16181,li=16182,oi=16183,si=16184,fi=16185,ci=16186,hi=16187,di=16188,_i=16189,It=16190,oe=16191,qt=16192,ui=16193,Jt=16194,bi=16195,gi=16196,wi=16197,mi=16198,xt=16199,yt=16200,pi=16201,vi=16202,ki=16203,xi=16204,yi=16205,Qt=16206,Ei=16207,Ai=16208,U=16209,Ea=16210,Aa=16211,ro=852,lo=592,oo=15,so=oo,Si=e=>(e>>>24&255)+(e>>>8&65280)+((e&65280)<<8)+((e&255)<<24);function fo(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const De=e=>{if(!e)return 1;const n=e.state;return!n||n.strm!==e||n.mode<Ht||n.mode>Aa?1:0},Sa=e=>{if(De(e))return ee;const n=e.state;return e.total_in=e.total_out=n.total=0,e.msg="",n.wrap&&(e.adler=n.wrap&1),n.mode=Ht,n.last=0,n.havedict=0,n.flags=-1,n.dmax=32768,n.head=null,n.hold=0,n.bits=0,n.lencode=n.lendyn=new Int32Array(ro),n.distcode=n.distdyn=new Int32Array(lo),n.sane=1,n.back=-1,Se},Ta=e=>{if(De(e))return ee;const n=e.state;return n.wsize=0,n.whave=0,n.wnext=0,Sa(e)},za=(e,n)=>{let t;if(De(e))return ee;const i=e.state;return n<0?(t=0,n=-n):(t=(n>>4)+5,n<48&&(n&=15)),n&&(n<8||n>15)?ee:(i.window!==null&&i.wbits!==n&&(i.window=null),i.wrap=t,i.wbits=n,Ta(e))},Da=(e,n)=>{if(!e)return ee;const t=new fo;e.state=t,t.strm=e,t.window=null,t.mode=Ht;const i=za(e,n);return i!==Se&&(e.state=null),i},co=e=>Da(e,so);let Ti=!0,en,tn;const ho=e=>{if(Ti){en=new Int32Array(512),tn=new Int32Array(32);let n=0;for(;n<144;)e.lens[n++]=8;for(;n<256;)e.lens[n++]=9;for(;n<280;)e.lens[n++]=7;for(;n<288;)e.lens[n++]=8;for(nt(va,e.lens,0,288,en,0,e.work,{bits:9}),n=0;n<32;)e.lens[n++]=5;nt(ka,e.lens,0,32,tn,0,e.work,{bits:5}),Ti=!1}e.lencode=en,e.lenbits=9,e.distcode=tn,e.distbits=5},Ra=(e,n,t,i)=>{let a;const r=e.state;return r.window===null&&(r.wsize=1<<r.wbits,r.wnext=0,r.whave=0,r.window=new Uint8Array(r.wsize)),i>=r.wsize?(r.window.set(n.subarray(t-r.wsize,t),0),r.wnext=0,r.whave=r.wsize):(a=r.wsize-r.wnext,a>i&&(a=i),r.window.set(n.subarray(t-i,t-i+a),r.wnext),i-=a,i?(r.window.set(n.subarray(t-i,t),0),r.wnext=i,r.whave=r.wsize):(r.wnext+=a,r.wnext===r.wsize&&(r.wnext=0),r.whave<r.wsize&&(r.whave+=a))),0},_o=(e,n)=>{let t,i,a,r,o,l,c,s,f,g,d,h,_,m,v=0,w,y,E,b,A,z,p,S;const u=new Uint8Array(4);let k,x;const M=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(De(e)||!e.output||!e.input&&e.avail_in!==0)return ee;t=e.state,t.mode===oe&&(t.mode=qt),o=e.next_out,a=e.output,c=e.avail_out,r=e.next_in,i=e.input,l=e.avail_in,s=t.hold,f=t.bits,g=l,d=c,S=Se;e:for(;;)switch(t.mode){case Ht:if(t.wrap===0){t.mode=qt;break}for(;f<16;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}if(t.wrap&2&&s===35615){t.wbits===0&&(t.wbits=15),t.check=0,u[0]=s&255,u[1]=s>>>8&255,t.check=P(t.check,u,2,0),s=0,f=0,t.mode=ri;break}if(t.head&&(t.head.done=!1),!(t.wrap&1)||(((s&255)<<8)+(s>>8))%31){e.msg="incorrect header check",t.mode=U;break}if((s&15)!==ai){e.msg="unknown compression method",t.mode=U;break}if(s>>>=4,f-=4,p=(s&15)+8,t.wbits===0&&(t.wbits=p),p>15||p>t.wbits){e.msg="invalid window size",t.mode=U;break}t.dmax=1<<t.wbits,t.flags=0,e.adler=t.check=1,t.mode=s&512?_i:oe,s=0,f=0;break;case ri:for(;f<16;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}if(t.flags=s,(t.flags&255)!==ai){e.msg="unknown compression method",t.mode=U;break}if(t.flags&57344){e.msg="unknown header flags set",t.mode=U;break}t.head&&(t.head.text=s>>8&1),t.flags&512&&t.wrap&4&&(u[0]=s&255,u[1]=s>>>8&255,t.check=P(t.check,u,2,0)),s=0,f=0,t.mode=li;case li:for(;f<32;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}t.head&&(t.head.time=s),t.flags&512&&t.wrap&4&&(u[0]=s&255,u[1]=s>>>8&255,u[2]=s>>>16&255,u[3]=s>>>24&255,t.check=P(t.check,u,4,0)),s=0,f=0,t.mode=oi;case oi:for(;f<16;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}t.head&&(t.head.xflags=s&255,t.head.os=s>>8),t.flags&512&&t.wrap&4&&(u[0]=s&255,u[1]=s>>>8&255,t.check=P(t.check,u,2,0)),s=0,f=0,t.mode=si;case si:if(t.flags&1024){for(;f<16;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}t.length=s,t.head&&(t.head.extra_len=s),t.flags&512&&t.wrap&4&&(u[0]=s&255,u[1]=s>>>8&255,t.check=P(t.check,u,2,0)),s=0,f=0}else t.head&&(t.head.extra=null);t.mode=fi;case fi:if(t.flags&1024&&(h=t.length,h>l&&(h=l),h&&(t.head&&(p=t.head.extra_len-t.length,t.head.extra||(t.head.extra=new Uint8Array(t.head.extra_len)),t.head.extra.set(i.subarray(r,r+h),p)),t.flags&512&&t.wrap&4&&(t.check=P(t.check,i,h,r)),l-=h,r+=h,t.length-=h),t.length))break e;t.length=0,t.mode=ci;case ci:if(t.flags&2048){if(l===0)break e;h=0;do p=i[r+h++],t.head&&p&&t.length<65536&&(t.head.name+=String.fromCharCode(p));while(p&&h<l);if(t.flags&512&&t.wrap&4&&(t.check=P(t.check,i,h,r)),l-=h,r+=h,p)break e}else t.head&&(t.head.name=null);t.length=0,t.mode=hi;case hi:if(t.flags&4096){if(l===0)break e;h=0;do p=i[r+h++],t.head&&p&&t.length<65536&&(t.head.comment+=String.fromCharCode(p));while(p&&h<l);if(t.flags&512&&t.wrap&4&&(t.check=P(t.check,i,h,r)),l-=h,r+=h,p)break e}else t.head&&(t.head.comment=null);t.mode=di;case di:if(t.flags&512){for(;f<16;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}if(t.wrap&4&&s!==(t.check&65535)){e.msg="header crc mismatch",t.mode=U;break}s=0,f=0}t.head&&(t.head.hcrc=t.flags>>9&1,t.head.done=!0),e.adler=t.check=0,t.mode=oe;break;case _i:for(;f<32;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}e.adler=t.check=Si(s),s=0,f=0,t.mode=It;case It:if(t.havedict===0)return e.next_out=o,e.avail_out=c,e.next_in=r,e.avail_in=l,t.hold=s,t.bits=f,io;e.adler=t.check=1,t.mode=oe;case oe:if(n===to||n===kt)break e;case qt:if(t.last){s>>>=f&7,f-=f&7,t.mode=Qt;break}for(;f<3;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}switch(t.last=s&1,s>>>=1,f-=1,s&3){case 0:t.mode=ui;break;case 1:if(ho(t),t.mode=xt,n===kt){s>>>=2,f-=2;break e}break;case 2:t.mode=gi;break;case 3:e.msg="invalid block type",t.mode=U}s>>>=2,f-=2;break;case ui:for(s>>>=f&7,f-=f&7;f<32;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}if((s&65535)!==(s>>>16^65535)){e.msg="invalid stored block lengths",t.mode=U;break}if(t.length=s&65535,s=0,f=0,t.mode=Jt,n===kt)break e;case Jt:t.mode=bi;case bi:if(h=t.length,h){if(h>l&&(h=l),h>c&&(h=c),h===0)break e;a.set(i.subarray(r,r+h),o),l-=h,r+=h,c-=h,o+=h,t.length-=h;break}t.mode=oe;break;case gi:for(;f<14;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}if(t.nlen=(s&31)+257,s>>>=5,f-=5,t.ndist=(s&31)+1,s>>>=5,f-=5,t.ncode=(s&15)+4,s>>>=4,f-=4,t.nlen>286||t.ndist>30){e.msg="too many length or distance symbols",t.mode=U;break}t.have=0,t.mode=wi;case wi:for(;t.have<t.ncode;){for(;f<3;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}t.lens[M[t.have++]]=s&7,s>>>=3,f-=3}for(;t.have<19;)t.lens[M[t.have++]]=0;if(t.lencode=t.lendyn,t.lenbits=7,k={bits:t.lenbits},S=nt(eo,t.lens,0,19,t.lencode,0,t.work,k),t.lenbits=k.bits,S){e.msg="invalid code lengths set",t.mode=U;break}t.have=0,t.mode=mi;case mi:for(;t.have<t.nlen+t.ndist;){for(;v=t.lencode[s&(1<<t.lenbits)-1],w=v>>>24,y=v>>>16&255,E=v&65535,!(w<=f);){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}if(E<16)s>>>=w,f-=w,t.lens[t.have++]=E;else{if(E===16){for(x=w+2;f<x;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}if(s>>>=w,f-=w,t.have===0){e.msg="invalid bit length repeat",t.mode=U;break}p=t.lens[t.have-1],h=3+(s&3),s>>>=2,f-=2}else if(E===17){for(x=w+3;f<x;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}s>>>=w,f-=w,p=0,h=3+(s&7),s>>>=3,f-=3}else{for(x=w+7;f<x;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}s>>>=w,f-=w,p=0,h=11+(s&127),s>>>=7,f-=7}if(t.have+h>t.nlen+t.ndist){e.msg="invalid bit length repeat",t.mode=U;break}for(;h--;)t.lens[t.have++]=p}}if(t.mode===U)break;if(t.lens[256]===0){e.msg="invalid code -- missing end-of-block",t.mode=U;break}if(t.lenbits=9,k={bits:t.lenbits},S=nt(va,t.lens,0,t.nlen,t.lencode,0,t.work,k),t.lenbits=k.bits,S){e.msg="invalid literal/lengths set",t.mode=U;break}if(t.distbits=6,t.distcode=t.distdyn,k={bits:t.distbits},S=nt(ka,t.lens,t.nlen,t.ndist,t.distcode,0,t.work,k),t.distbits=k.bits,S){e.msg="invalid distances set",t.mode=U;break}if(t.mode=xt,n===kt)break e;case xt:t.mode=yt;case yt:if(l>=6&&c>=258){e.next_out=o,e.avail_out=c,e.next_in=r,e.avail_in=l,t.hold=s,t.bits=f,$l(e,d),o=e.next_out,a=e.output,c=e.avail_out,r=e.next_in,i=e.input,l=e.avail_in,s=t.hold,f=t.bits,t.mode===oe&&(t.back=-1);break}for(t.back=0;v=t.lencode[s&(1<<t.lenbits)-1],w=v>>>24,y=v>>>16&255,E=v&65535,!(w<=f);){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}if(y&&!(y&240)){for(b=w,A=y,z=E;v=t.lencode[z+((s&(1<<b+A)-1)>>b)],w=v>>>24,y=v>>>16&255,E=v&65535,!(b+w<=f);){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}s>>>=b,f-=b,t.back+=b}if(s>>>=w,f-=w,t.back+=w,t.length=E,y===0){t.mode=yi;break}if(y&32){t.back=-1,t.mode=oe;break}if(y&64){e.msg="invalid literal/length code",t.mode=U;break}t.extra=y&15,t.mode=pi;case pi:if(t.extra){for(x=t.extra;f<x;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}t.length+=s&(1<<t.extra)-1,s>>>=t.extra,f-=t.extra,t.back+=t.extra}t.was=t.length,t.mode=vi;case vi:for(;v=t.distcode[s&(1<<t.distbits)-1],w=v>>>24,y=v>>>16&255,E=v&65535,!(w<=f);){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}if(!(y&240)){for(b=w,A=y,z=E;v=t.distcode[z+((s&(1<<b+A)-1)>>b)],w=v>>>24,y=v>>>16&255,E=v&65535,!(b+w<=f);){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}s>>>=b,f-=b,t.back+=b}if(s>>>=w,f-=w,t.back+=w,y&64){e.msg="invalid distance code",t.mode=U;break}t.offset=E,t.extra=y&15,t.mode=ki;case ki:if(t.extra){for(x=t.extra;f<x;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}t.offset+=s&(1<<t.extra)-1,s>>>=t.extra,f-=t.extra,t.back+=t.extra}if(t.offset>t.dmax){e.msg="invalid distance too far back",t.mode=U;break}t.mode=xi;case xi:if(c===0)break e;if(h=d-c,t.offset>h){if(h=t.offset-h,h>t.whave&&t.sane){e.msg="invalid distance too far back",t.mode=U;break}h>t.wnext?(h-=t.wnext,_=t.wsize-h):_=t.wnext-h,h>t.length&&(h=t.length),m=t.window}else m=a,_=o-t.offset,h=t.length;h>c&&(h=c),c-=h,t.length-=h;do a[o++]=m[_++];while(--h);t.length===0&&(t.mode=yt);break;case yi:if(c===0)break e;a[o++]=t.length,c--,t.mode=yt;break;case Qt:if(t.wrap){for(;f<32;){if(l===0)break e;l--,s|=i[r++]<<f,f+=8}if(d-=c,e.total_out+=d,t.total+=d,t.wrap&4&&d&&(e.adler=t.check=t.flags?P(t.check,a,d,o-d):ot(t.check,a,d,o-d)),d=c,t.wrap&4&&(t.flags?s:Si(s))!==t.check){e.msg="incorrect data check",t.mode=U;break}s=0,f=0}t.mode=Ei;case Ei:if(t.wrap&&t.flags){for(;f<32;){if(l===0)break e;l--,s+=i[r++]<<f,f+=8}if(t.wrap&4&&s!==(t.total&4294967295)){e.msg="incorrect length check",t.mode=U;break}s=0,f=0}t.mode=Ai;case Ai:S=no;break e;case U:S=xa;break e;case Ea:return ya;case Aa:default:return ee}return e.next_out=o,e.avail_out=c,e.next_in=r,e.avail_in=l,t.hold=s,t.bits=f,(t.wsize||d!==e.avail_out&&t.mode<U&&(t.mode<Qt||n!==ii))&&Ra(e,e.output,e.next_out,d-e.avail_out),g-=e.avail_in,d-=e.avail_out,e.total_in+=g,e.total_out+=d,t.total+=d,t.wrap&4&&d&&(e.adler=t.check=t.flags?P(t.check,a,d,e.next_out-d):ot(t.check,a,d,e.next_out-d)),e.data_type=t.bits+(t.last?64:0)+(t.mode===oe?128:0)+(t.mode===xt||t.mode===Jt?256:0),(g===0&&d===0||n===ii)&&S===Se&&(S=ao),S},uo=e=>{if(De(e))return ee;let n=e.state;return n.window&&(n.window=null),e.state=null,Se},bo=(e,n)=>{if(De(e))return ee;const t=e.state;return t.wrap&2?(t.head=n,n.done=!1,Se):ee},go=(e,n)=>{const t=n.length;let i,a,r;return De(e)||(i=e.state,i.wrap!==0&&i.mode!==It)?ee:i.mode===It&&(a=1,a=ot(a,n,t,0),a!==i.check)?xa:(r=Ra(e,n,t,t),r?(i.mode=Ea,ya):(i.havedict=1,Se))};var wo=Ta,mo=za,po=Sa,vo=co,ko=Da,xo=_o,yo=uo,Eo=bo,Ao=go,So="pako inflate (from Nodeca project)",fe={inflateReset:wo,inflateReset2:mo,inflateResetKeep:po,inflateInit:vo,inflateInit2:ko,inflate:xo,inflateEnd:yo,inflateGetHeader:Eo,inflateSetDictionary:Ao,inflateInfo:So};function To(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var zo=To;const Za=Object.prototype.toString,{Z_NO_FLUSH:Do,Z_FINISH:Ro,Z_OK:ct,Z_STREAM_END:nn,Z_NEED_DICT:an,Z_STREAM_ERROR:Zo,Z_DATA_ERROR:zi,Z_MEM_ERROR:Io}=ze;function bt(e){this.options=Bt.assign({chunkSize:1024*64,windowBits:15,to:""},e||{});const n=this.options;n.raw&&n.windowBits>=0&&n.windowBits<16&&(n.windowBits=-n.windowBits,n.windowBits===0&&(n.windowBits=-15)),n.windowBits>=0&&n.windowBits<16&&!(e&&e.windowBits)&&(n.windowBits+=32),n.windowBits>15&&n.windowBits<48&&(n.windowBits&15||(n.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new ma,this.strm.avail_out=0;let t=fe.inflateInit2(this.strm,n.windowBits);if(t!==ct)throw new Error(Ee[t]);if(this.header=new zo,fe.inflateGetHeader(this.strm,this.header),n.dictionary&&(typeof n.dictionary=="string"?n.dictionary=ft.string2buf(n.dictionary):Za.call(n.dictionary)==="[object ArrayBuffer]"&&(n.dictionary=new Uint8Array(n.dictionary)),n.raw&&(t=fe.inflateSetDictionary(this.strm,n.dictionary),t!==ct)))throw new Error(Ee[t])}bt.prototype.push=function(e,n){const t=this.strm,i=this.options.chunkSize,a=this.options.dictionary;let r,o,l;if(this.ended)return!1;for(n===~~n?o=n:o=n===!0?Ro:Do,Za.call(e)==="[object ArrayBuffer]"?t.input=new Uint8Array(e):t.input=e,t.next_in=0,t.avail_in=t.input.length;;){for(t.avail_out===0&&(t.output=new Uint8Array(i),t.next_out=0,t.avail_out=i),r=fe.inflate(t,o),r===an&&a&&(r=fe.inflateSetDictionary(t,a),r===ct?r=fe.inflate(t,o):r===zi&&(r=an));t.avail_in>0&&r===nn&&t.state.wrap>0&&e[t.next_in]!==0;)fe.inflateReset(t),r=fe.inflate(t,o);switch(r){case Zo:case zi:case an:case Io:return this.onEnd(r),this.ended=!0,!1}if(l=t.avail_out,t.next_out&&(t.avail_out===0||r===nn))if(this.options.to==="string"){let c=ft.utf8border(t.output,t.next_out),s=t.next_out-c,f=ft.buf2string(t.output,c);t.next_out=s,t.avail_out=i-s,s&&t.output.set(t.output.subarray(c,c+s),0),this.onData(f)}else this.onData(t.output.length===t.next_out?t.output:t.output.subarray(0,t.next_out));if(!(r===ct&&l===0)){if(r===nn)return r=fe.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,!0;if(t.avail_in===0)break}}return!0};bt.prototype.onData=function(e){this.chunks.push(e)};bt.prototype.onEnd=function(e){e===ct&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=Bt.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};function zn(e,n){const t=new bt(n);if(t.push(e),t.err)throw t.msg||Ee[t.err];return t.result}function No(e,n){return n=n||{},n.raw=!0,zn(e,n)}var Co=bt,Mo=zn,Uo=No,Lo=zn,Oo=ze,Fo={Inflate:Co,inflate:Mo,inflateRaw:Uo,ungzip:Lo,constants:Oo};const{Deflate:Bo,deflate:Ho,deflateRaw:Po,gzip:Xo}=Kl,{Inflate:Yo,inflate:Go,inflateRaw:Ko,ungzip:Wo}=Fo;var $o=Bo,jo=Ho,Vo=Po,qo=Xo,Jo=Yo,Qo=Go,es=Ko,ts=Wo,ns=ze,Di={Deflate:$o,deflate:jo,deflateRaw:Vo,gzip:qo,Inflate:Jo,inflate:Qo,inflateRaw:es,ungzip:ts,constants:ns};class Ri{constructor(n){Z(this,"buffer");Z(this,"bytePointer",0);Z(this,"bitPointer",0);this.buffer=typeof n=="number"?new ArrayBuffer(n):"buffer"in n?n.buffer:n}get view(){return new DataView(this.buffer)}skipBits(n){this.bitPointer+=n,this.bytePointer+=Math.floor(this.bitPointer/8),this.bitPointer%=8}final(){return this.buffer.slice(0,this.bitPointer==0?this.bytePointer:this.bytePointer+1)}readBit(){const t=(this.view.getUint8(this.bytePointer)>>this.bitPointer&1)!=0;return this.skipBits(1),t}readBits(n){let t=0;for(let i=0;i<n;i++)t|=(this.readBit()?1:0)<<i;return t}writeBit(n){let t=this.view.getUint8(this.bytePointer);n?t|=1<<this.bitPointer:t&=1<<this.bitPointer^255,this.view.setUint8(this.bytePointer,t),this.skipBits(1)}writeBits(n,t){for(let i=0;i<n;i++)this.writeBit((t&1)!=0),t>>=1}}const W=64;function Dn(e,n){return()=>{e|=0,e=e+2654435769|0;let t=e^e>>>16;t=Math.imul(t,569420461),t=t^t>>>15,t=Math.imul(t,1935289751);const i=(t=t^t>>>15)>>>0;return n?i/4294967296:i}}function ye(e,n,t,i){return e^=e<<13|e>>>17,e=e*2158630691+3333583613&4294967295,e^=n,e^=e<<13|e>>>17,e=e*2158630691+3333583613&4294967295,e^=t,e^=e<<13|e>>>17,e=e*2158630691+3333583613&4294967295,e^=i,e^=e<<16|e>>>15,e=e*2158630691+3333583613&4294967295,(e>>>0)/4294967295}function is(e,n){n*=e.reduce((t,i)=>t+i,0);for(let t=0;t<e.length;t++)if(n-=e[t],n<=0)return t;throw new Error("Invalid weights")}function as(e,n,t,i){let a=[];for(let l=Math.floor(n)-1;l<Math.ceil(n)+1;l++)for(let c=Math.floor(t)-1;c<Math.ceil(t)+1;c++)a.push({x:l+ye(e,l,c,0)-.5,y:c+ye(e,l,c,1)-.5,type:is(i,ye(e,l,c,2))});let r=1/0,o=-1;for(const l of a){const c=Math.sqrt((l.x-n)**2+(l.y-t)**2);c<r&&(r=c,o=l.type)}if(o==-1)throw new Error("Voronoi noise error.");return o}function Zi(e,n,t){function i(h,_,m){return(_-h)*((m*(m*6-15)+10)*m*m*m)+h}const a=(h,_)=>{const m=ye(e,h,_,0);return{x:Math.cos(m),y:Math.sin(m)}},r=(h,_,m,v)=>{const w=a(h,_),y=m-h,E=v-_;return y*w.x+E*w.y},o=Math.floor(n),l=o+1,c=Math.floor(t),s=c+1,f=n-o,g=t-c;return i(i(r(o,c,n,t),r(l,c,n,t),f),i(r(o,s,n,t),r(l,s,n,t),f),g)}class rs{constructor(n,t){Z(this,"textures");Z(this,"src");Z(this,"img");this.src=n,this.img=document.createElement("img"),this.img.src=this.src,this.textures=t}awaitLoad(){return new Promise((n,t)=>{if(this.img.naturalWidth!==0)return n();const i=()=>{this.img.removeEventListener("load",i),this.img.removeEventListener("error",a),n()},a=()=>{this.img.removeEventListener("load",i),this.img.removeEventListener("error",a),t()};this.img.addEventListener("load",i),this.img.addEventListener("error",a)})}onLoad(n){this.awaitLoad().then(()=>n(this))}draw(n,t,i,a,r,o){const[l,c,s,f]=this.textures[t];n.drawImage(this.img,l,c,s,f,i,a,r,o)}}const C=new rs("/infinite-minesweeper/tileset.png",{null:[0,0,16,16],bomb:[16,0,16,16],explosion:[16,16,16,16],flag:[32,16,16,16],number_0:[48,0,16,16],number_1:[48,16,16,16],number_2:[48,32,16,16],number_3:[48,48,16,16],number_4:[48,64,16,16],number_5:[48,80,16,16],number_6:[48,96,16,16],number_7:[48,112,16,16],number_8:[48,128,16,16],vanilla_tile_covered:[64,0,16,16],vanilla_tile_revealed:[80,0,16,16],chocolate_tile_covered:[64,16,16,16],chocolate_tile_revealed:[80,16,16,16],waffle_tile_covered_light:[64,32,16,16],waffle_tile_revealed_light:[80,32,16,16],waffle_tile_covered_dark:[96,32,16,16],waffle_tile_revealed_dark:[112,32,16,16],stroopwafel_tile_covered_light:[64,48,16,16],stroopwafel_tile_revealed_light:[80,48,16,16],stroopwafel_tile_covered_dark:[96,48,16,16],stroopwafel_tile_revealed_dark:[112,48,16,16]});function Pt(e){switch(e){case 0:return"number_0";case 1:return"number_1";case 2:return"number_2";case 3:return"number_3";case 4:return"number_4";case 5:return"number_5";case 6:return"number_6";case 7:return"number_7";case 8:return"number_8";default:return"null"}}class ls{constructor(n,t,i){Z(this,"world");Z(this,"x");Z(this,"y");this.world=n,this.x=t,this.y=i}minesNearby(){let n=0;for(const t of this.searchPattern)n+=this.world.getTile(this.x+t.x,this.y+t.y).numMines();return n}flagsNearby(){let n=0;for(const t of this.searchPattern)n+=this.world.getTile(this.x+t.x,this.y+t.y).numFlags();return n}static load(n,t,i,a){throw new Error("Tile.load needs to be implemented on derived class.")}}class Xt extends ls{constructor(t,i,a,r){super(t,i,a);Z(this,"isMine");Z(this,"state",0);Z(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this.isMine=r}numMines(){return this.isMine?1:0}numFlags(){return this.state==1?1:0}flag(){this.state!=2&&(this.state==0?this.state=1:this.state=0)}reveal(){this.state!=1&&(this.state=2)}}class Rn extends Xt{constructor(n,t,i){const a=ye(n.tileSeed,t,i,0)>.875;super(n,t,i,a)}render(n){switch(this.state){case 0:{C.draw(n,"vanilla_tile_covered",0,0,1,1);break}case 1:{C.draw(n,"vanilla_tile_covered",0,0,1,1),C.draw(n,"flag",0,0,1,1);break}case 2:{C.draw(n,"vanilla_tile_revealed",0,0,1,1),this.isMine?C.draw(n,"bomb",0,0,1,1):C.draw(n,Pt(this.minesNearby()),0,0,1,1);break}}}save(n){n.writeBits(2,this.state)}static load(n,t,i,a){const r=new Rn(n,t,i);switch(a.readBits(2)){case 0:break;case 1:r.flag();break;case 2:r.reveal();break}return r}}class Zn extends Xt{constructor(n,t,i){const a=ye(n.tileSeed,t,i,0)>.625;super(n,t,i,a)}render(n){switch(this.state){case 0:{C.draw(n,"chocolate_tile_covered",0,0,1,1);break}case 1:{C.draw(n,"chocolate_tile_covered",0,0,1,1),C.draw(n,"flag",0,0,1,1);break}case 2:{C.draw(n,"chocolate_tile_revealed",0,0,1,1),this.isMine?C.draw(n,"bomb",0,0,1,1):C.draw(n,Pt(this.minesNearby()),0,0,1,1);break}}}save(n){n.writeBits(2,this.state)}static load(n,t,i,a){const r=new Zn(n,t,i);switch(a.readBits(2)){case 0:break;case 1:r.flag();break;case 2:r.reveal();break}return r}}function Ia(e,n,t,i){const a=Math.floor(t/n),r=Math.floor(i/n),o=(a+r%2)%2==0,l=Math.abs(t%n)+Math.abs(i%n)*n,c=Math.floor(ye(e.tileSeed,a,r,0)*n**2),s=o?l!=c:l==c;return{isDark:o,isMine:s}}class In extends Xt{constructor(t,i,a){const{isDark:r,isMine:o}=Ia(t,2,i,a);super(t,i,a,o);Z(this,"isDark");this.isDark=r}render(t){switch(this.state){case 0:{C.draw(t,this.isDark?"waffle_tile_covered_dark":"waffle_tile_covered_light",0,0,1,1);break}case 1:{C.draw(t,this.isDark?"waffle_tile_covered_dark":"waffle_tile_covered_light",0,0,1,1),C.draw(t,"flag",0,0,1,1);break}case 2:{C.draw(t,this.isDark?"waffle_tile_revealed_dark":"waffle_tile_revealed_light",0,0,1,1),this.isMine?C.draw(t,"bomb",0,0,1,1):C.draw(t,Pt(this.minesNearby()),0,0,1,1);break}}}save(t){t.writeBits(2,this.state)}static load(t,i,a,r){const o=new In(t,i,a);switch(r.readBits(2)){case 0:break;case 1:o.flag();break;case 2:o.reveal();break}return o}}class Nn extends Xt{constructor(t,i,a){const{isDark:r,isMine:o}=Ia(t,3,i,a);super(t,i,a,o);Z(this,"isDark");this.isDark=r}render(t){switch(this.state){case 0:{C.draw(t,this.isDark?"stroopwafel_tile_covered_dark":"stroopwafel_tile_covered_light",0,0,1,1);break}case 1:{C.draw(t,this.isDark?"stroopwafel_tile_covered_dark":"stroopwafel_tile_covered_light",0,0,1,1),C.draw(t,"flag",0,0,1,1);break}case 2:{C.draw(t,this.isDark?"stroopwafel_tile_revealed_dark":"stroopwafel_tile_revealed_light",0,0,1,1),this.isMine?C.draw(t,"bomb",0,0,1,1):C.draw(t,Pt(this.minesNearby()),0,0,1,1);break}}}save(t){t.writeBits(2,this.state)}static load(t,i,a,r){const o=new Nn(t,i,a);switch(r.readBits(2)){case 0:break;case 1:o.flag();break;case 2:o.reveal();break}return o}}const os={type:"collection",weight:1,scale:24,smoothness:.8,biomes:[{type:"collection",weight:5,scale:24,smoothness:.8,biomes:[{type:"biome",weight:3,tile:Rn},{type:"biome",weight:1,tile:Zn}]},{type:"collection",weight:2,scale:64,smoothness:0,biomes:[{type:"biome",weight:1,tile:In},{type:"biome",weight:2,tile:Nn}]}]};function ss(e,n,t,i,a){const r=Dn(e,!1),o=Zi(r(),n,t)*i,l=Zi(r(),n,t)*i;return as(r(),n+o,t+l,a)}function Na(e,n,t){const i=Dn(e.biomeSeed,!1);let a=os;for(;a.type=="collection";){const r=ss(i(),n/a.scale,t/a.scale,a.smoothness,a.biomes.map(o=>o.weight));a=a.biomes[r]}return a.tile}function fs(e,n,t){const i=Na(e,n,t);return new i(e,n,t)}class Ca{constructor(n,t,i){Z(this,"world");Z(this,"chunkX");Z(this,"chunkY");this.world=n,this.chunkX=t,this.chunkY=i}isGenerated(){return this instanceof ht}generate(){if(this.isGenerated())throw new Error("Cannot generate an already generated chunk.");console.log(`Generating new chunk: ${this.chunkX}, ${this.chunkY}`);const n=[];for(let t=0;t<W;t++)for(let i=0;i<W;i++){const a=this.world.generateTile(this.chunkX*W+i,this.chunkY*W+t);n.push(a)}return new ht(this.world,this.chunkX,this.chunkY,n)}}class ht extends Ca{constructor(t,i,a,r){super(t,i,a);Z(this,"tiles");if(this.tiles=r,this.tiles.length!=W*W)throw new Error("GeneratedChunk incorrect tiles length.")}getTileAbsolute(t,i){return this.getTile(t-this.chunkX*W,i-this.chunkY*W)}getTile(t,i){return this.tiles[t+i*W]}save(){const t=new Ri(2048);for(const i of this.tiles)i.save(t);return Di.deflate(t.final()).buffer}static load(t,i,a,r){const o=new Ri(Di.inflate(r));let l=[];for(let c=0;c<W;c++)for(let s=0;s<W;s++){const f=i*W+s,g=a*W+c,h=Na(t,f,g).load(t,f,g,o);l.push(h)}return new ht(t,i,a,l)}}const Ma="3.7.7",cs=Ma,je=typeof Buffer=="function",Ii=typeof TextDecoder=="function"?new TextDecoder:void 0,Ni=typeof TextEncoder=="function"?new TextEncoder:void 0,hs="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",Qe=Array.prototype.slice.call(hs),Et=(e=>{let n={};return e.forEach((t,i)=>n[t]=i),n})(Qe),ds=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,G=String.fromCharCode.bind(String),Ci=typeof Uint8Array.from=="function"?Uint8Array.from.bind(Uint8Array):e=>new Uint8Array(Array.prototype.slice.call(e,0)),Ua=e=>e.replace(/=/g,"").replace(/[+\/]/g,n=>n=="+"?"-":"_"),La=e=>e.replace(/[^A-Za-z0-9\+\/]/g,""),Oa=e=>{let n,t,i,a,r="";const o=e.length%3;for(let l=0;l<e.length;){if((t=e.charCodeAt(l++))>255||(i=e.charCodeAt(l++))>255||(a=e.charCodeAt(l++))>255)throw new TypeError("invalid character found");n=t<<16|i<<8|a,r+=Qe[n>>18&63]+Qe[n>>12&63]+Qe[n>>6&63]+Qe[n&63]}return o?r.slice(0,o-3)+"===".substring(o):r},Cn=typeof btoa=="function"?e=>btoa(e):je?e=>Buffer.from(e,"binary").toString("base64"):Oa,mn=je?e=>Buffer.from(e).toString("base64"):e=>{let t=[];for(let i=0,a=e.length;i<a;i+=4096)t.push(G.apply(null,e.subarray(i,i+4096)));return Cn(t.join(""))},St=(e,n=!1)=>n?Ua(mn(e)):mn(e),_s=e=>{if(e.length<2){var n=e.charCodeAt(0);return n<128?e:n<2048?G(192|n>>>6)+G(128|n&63):G(224|n>>>12&15)+G(128|n>>>6&63)+G(128|n&63)}else{var n=65536+(e.charCodeAt(0)-55296)*1024+(e.charCodeAt(1)-56320);return G(240|n>>>18&7)+G(128|n>>>12&63)+G(128|n>>>6&63)+G(128|n&63)}},us=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,Fa=e=>e.replace(us,_s),Mi=je?e=>Buffer.from(e,"utf8").toString("base64"):Ni?e=>mn(Ni.encode(e)):e=>Cn(Fa(e)),Me=(e,n=!1)=>n?Ua(Mi(e)):Mi(e),Ui=e=>Me(e,!0),bs=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,gs=e=>{switch(e.length){case 4:var n=(7&e.charCodeAt(0))<<18|(63&e.charCodeAt(1))<<12|(63&e.charCodeAt(2))<<6|63&e.charCodeAt(3),t=n-65536;return G((t>>>10)+55296)+G((t&1023)+56320);case 3:return G((15&e.charCodeAt(0))<<12|(63&e.charCodeAt(1))<<6|63&e.charCodeAt(2));default:return G((31&e.charCodeAt(0))<<6|63&e.charCodeAt(1))}},Ba=e=>e.replace(bs,gs),Ha=e=>{if(e=e.replace(/\s+/g,""),!ds.test(e))throw new TypeError("malformed base64.");e+="==".slice(2-(e.length&3));let n,t="",i,a;for(let r=0;r<e.length;)n=Et[e.charAt(r++)]<<18|Et[e.charAt(r++)]<<12|(i=Et[e.charAt(r++)])<<6|(a=Et[e.charAt(r++)]),t+=i===64?G(n>>16&255):a===64?G(n>>16&255,n>>8&255):G(n>>16&255,n>>8&255,n&255);return t},Mn=typeof atob=="function"?e=>atob(La(e)):je?e=>Buffer.from(e,"base64").toString("binary"):Ha,Pa=je?e=>Ci(Buffer.from(e,"base64")):e=>Ci(Mn(e).split("").map(n=>n.charCodeAt(0))),Xa=e=>Pa(Ya(e)),ws=je?e=>Buffer.from(e,"base64").toString("utf8"):Ii?e=>Ii.decode(Pa(e)):e=>Ba(Mn(e)),Ya=e=>La(e.replace(/[-_]/g,n=>n=="-"?"+":"/")),pn=e=>ws(Ya(e)),ms=e=>{if(typeof e!="string")return!1;const n=e.replace(/\s+/g,"").replace(/={0,2}$/,"");return!/[^\s0-9a-zA-Z\+/]/.test(n)||!/[^\s0-9a-zA-Z\-_]/.test(n)},Ga=e=>({value:e,enumerable:!1,writable:!0,configurable:!0}),Ka=function(){const e=(n,t)=>Object.defineProperty(String.prototype,n,Ga(t));e("fromBase64",function(){return pn(this)}),e("toBase64",function(n){return Me(this,n)}),e("toBase64URI",function(){return Me(this,!0)}),e("toBase64URL",function(){return Me(this,!0)}),e("toUint8Array",function(){return Xa(this)})},Wa=function(){const e=(n,t)=>Object.defineProperty(Uint8Array.prototype,n,Ga(t));e("toBase64",function(n){return St(this,n)}),e("toBase64URI",function(){return St(this,!0)}),e("toBase64URL",function(){return St(this,!0)})},ps=()=>{Ka(),Wa()},Li={version:Ma,VERSION:cs,atob:Mn,atobPolyfill:Ha,btoa:Cn,btoaPolyfill:Oa,fromBase64:pn,toBase64:Me,encode:Me,encodeURI:Ui,encodeURL:Ui,utob:Fa,btou:Ba,decode:pn,isValid:ms,fromUint8Array:St,toUint8Array:Xa,extendString:Ka,extendUint8Array:Wa,extendBuiltins:ps};function*vs(e,n){let t=e,i=n,a=1,r=1;for(;;){for(;2*t*a<r;)yield{x:t,y:i},t+=a;for(;2*i*a<r;)yield{x:t,y:i},i+=a;a=-1*a,r+=1}}class Nt{constructor(n){Z(this,"seed");Z(this,"tileSeed");Z(this,"biomeSeed");Z(this,"chunks",{});this.seed=n;const t=Dn(this.seed,!1);this.tileSeed=t(),this.biomeSeed=t()}generateTile(n,t){return fs(this,n,t)}getChunk(n,t){const i=this.chunks[`${n},${t}`];return i||new Ca(this,n,t)}getGeneratedChunk(n,t){const i=this.getChunk(n,t);if(i.isGenerated())return i;const a=i.generate();return this.chunks[`${n},${t}`]=a,a}getTile(n,t){const i=Math.floor(n/W),a=Math.floor(t/W);return this.getGeneratedChunk(i,a).getTileAbsolute(n,t)}flag(n,t){return this.getTile(n,t).flag()}reveal(n,t,i=!0){const a=this.getTile(n,t);if(a.reveal(),a.numMines()>0)return!0;if(a.minesNearby()>0)if(i){let l=!1;if(a.flagsNearby()==a.minesNearby())for(const c of a.searchPattern)this.reveal(a.x+c.x,a.y+c.y,!1)&&(l=!0);return l}else return!1;let r=[],o=[a];for(;o.length>0;){const l=o.pop();r.push(l);for(const c of l.searchPattern){const s=this.getTile(l.x+c.x,l.y+c.y);o.some(f=>f.x==s.x&&f.y==s.y)||r.some(f=>f.x==s.x&&f.y==s.y)||(s.minesNearby()==0?o.push(s):r.push(s))}}return r.forEach(l=>l.reveal()),!1}closest0(n,t){for(const{x:i,y:a}of vs(n,t)){const r=this.getTile(i,a);if(r.numMines()==0&&r.minesNearby()==0)return{x:i,y:a}}throw new Error("This error should never happen, it's just here to make TypeScript happy.")}save(){const n={seed:this.seed,chunks:{}};for(const t in this.chunks){const i=t,r=this.chunks[i].save();n.chunks[i]=Li.fromUint8Array(new Uint8Array(r))}return n}static load(n){const t=new Nt(n.seed);for(const i in n.chunks){const a=i,r=n.chunks[a],o=Li.toUint8Array(r).buffer,[l,c,s]=a.match(/^(-?\d+),(-?\d+)$/),[f,g]=[parseInt(c),parseInt(s)];t.chunks[a]=ht.load(t,f,g,o)}return t}}/**
 * @license lucide-svelte v0.372.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const ks={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":2,"stroke-linecap":"round","stroke-linejoin":"round"},Oi=ks;function Fi(e,n,t){const i=e.slice();return i[10]=n[t][0],i[11]=n[t][1],i}function rn(e){let n,t=[e[11]],i={};for(let a=0;a<t.length;a+=1)i=le(i,t[a]);return{c(){n=Wi(e[10]),this.h()},l(a){n=$i(a,e[10],{}),L(n).forEach(T),this.h()},h(){Tt(n,i)},m(a,r){J(a,n,r)},p(a,r){Tt(n,i=Ot(t,[r&32&&a[11]]))},d(a){a&&T(n)}}}function Bi(e){let n=e[10],t,i=e[10]&&rn(e);return{c(){i&&i.c(),t=Ue()},l(a){i&&i.l(a),t=Ue()},m(a,r){i&&i.m(a,r),J(a,t,r)},p(a,r){a[10]?n?Te(n,a[10])?(i.d(1),i=rn(a),n=a[10],i.c(),i.m(t.parentNode,t)):i.p(a,r):(i=rn(a),n=a[10],i.c(),i.m(t.parentNode,t)):n&&(i.d(1),i=null,n=a[10])},d(a){a&&T(t),i&&i.d(a)}}}function xs(e){let n,t,i,a,r,o=Pn(e[5]),l=[];for(let d=0;d<o.length;d+=1)l[d]=Bi(Fi(e,o,d));const c=e[9].default,s=Ct(c,e,e[8],null);let f=[Oi,e[6],{width:e[2]},{height:e[2]},{stroke:e[1]},{"stroke-width":i=e[4]?Number(e[3])*24/Number(e[2]):e[3]},{class:a=`lucide-icon lucide lucide-${e[0]} ${e[7].class??""}`}],g={};for(let d=0;d<f.length;d+=1)g=le(g,f[d]);return{c(){n=Wi("svg");for(let d=0;d<l.length;d+=1)l[d].c();t=Ue(),s&&s.c(),this.h()},l(d){n=$i(d,"svg",{width:!0,height:!0,stroke:!0,"stroke-width":!0,class:!0});var h=L(n);for(let _=0;_<l.length;_+=1)l[_].l(h);t=Ue(),s&&s.l(h),h.forEach(T),this.h()},h(){Tt(n,g)},m(d,h){J(d,n,h);for(let _=0;_<l.length;_+=1)l[_]&&l[_].m(n,null);N(n,t),s&&s.m(n,null),r=!0},p(d,[h]){if(h&32){o=Pn(d[5]);let _;for(_=0;_<o.length;_+=1){const m=Fi(d,o,_);l[_]?l[_].p(m,h):(l[_]=Bi(m),l[_].c(),l[_].m(n,t))}for(;_<l.length;_+=1)l[_].d(1);l.length=o.length}s&&s.p&&(!r||h&256)&&Mt(s,c,d,d[8],r?Lt(c,d[8],h,null):Ut(d[8]),null),Tt(n,g=Ot(f,[Oi,h&64&&d[6],(!r||h&4)&&{width:d[2]},(!r||h&4)&&{height:d[2]},(!r||h&2)&&{stroke:d[1]},(!r||h&28&&i!==(i=d[4]?Number(d[3])*24/Number(d[2]):d[3]))&&{"stroke-width":i},(!r||h&129&&a!==(a=`lucide-icon lucide lucide-${d[0]} ${d[7].class??""}`))&&{class:a}]))},i(d){r||(H(s,d),r=!0)},o(d){K(s,d),r=!1},d(d){d&&T(n),qa(l,d),s&&s.d(d)}}}function ys(e,n,t){const i=["name","color","size","strokeWidth","absoluteStrokeWidth","iconNode"];let a=Hn(n,i),{$$slots:r={},$$scope:o}=n,{name:l}=n,{color:c="currentColor"}=n,{size:s=24}=n,{strokeWidth:f=2}=n,{absoluteStrokeWidth:g=!1}=n,{iconNode:d}=n;return e.$$set=h=>{t(7,n=le(le({},n),Le(h))),t(6,a=Hn(n,i)),"name"in h&&t(0,l=h.name),"color"in h&&t(1,c=h.color),"size"in h&&t(2,s=h.size),"strokeWidth"in h&&t(3,f=h.strokeWidth),"absoluteStrokeWidth"in h&&t(4,g=h.absoluteStrokeWidth),"iconNode"in h&&t(5,d=h.iconNode),"$$scope"in h&&t(8,o=h.$$scope)},n=Le(n),[l,c,s,f,g,d,a,n,o,r]}class $a extends Ye{constructor(n){super(),Ge(this,n,ys,xs,Te,{name:0,color:1,size:2,strokeWidth:3,absoluteStrokeWidth:4,iconNode:5})}}function Es(e){let n;const t=e[2].default,i=Ct(t,e,e[3],null);return{c(){i&&i.c()},l(a){i&&i.l(a)},m(a,r){i&&i.m(a,r),n=!0},p(a,r){i&&i.p&&(!n||r&8)&&Mt(i,t,a,a[3],n?Lt(t,a[3],r,null):Ut(a[3]),null)},i(a){n||(H(i,a),n=!0)},o(a){K(i,a),n=!1},d(a){i&&i.d(a)}}}function As(e){let n,t;const i=[{name:"info"},e[1],{iconNode:e[0]}];let a={$$slots:{default:[Es]},$$scope:{ctx:e}};for(let r=0;r<i.length;r+=1)a=le(a,i[r]);return n=new $a({props:a}),{c(){Oe(n.$$.fragment)},l(r){Fe(n.$$.fragment,r)},m(r,o){Be(n,r,o),t=!0},p(r,[o]){const l=o&3?Ot(i,[i[0],o&2&&Vi(r[1]),o&1&&{iconNode:r[0]}]):{};o&8&&(l.$$scope={dirty:o,ctx:r}),n.$set(l)},i(r){t||(H(n.$$.fragment,r),t=!0)},o(r){K(n.$$.fragment,r),t=!1},d(r){He(n,r)}}}function Ss(e,n,t){let{$$slots:i={},$$scope:a}=n;const r=[["circle",{cx:"12",cy:"12",r:"10"}],["path",{d:"M12 16v-4"}],["path",{d:"M12 8h.01"}]];return e.$$set=o=>{t(1,n=le(le({},n),Le(o))),"$$scope"in o&&t(3,a=o.$$scope)},n=Le(n),[r,n,i,a]}class Ts extends Ye{constructor(n){super(),Ge(this,n,Ss,As,Te,{})}}function zs(e){let n;const t=e[2].default,i=Ct(t,e,e[3],null);return{c(){i&&i.c()},l(a){i&&i.l(a)},m(a,r){i&&i.m(a,r),n=!0},p(a,r){i&&i.p&&(!n||r&8)&&Mt(i,t,a,a[3],n?Lt(t,a[3],r,null):Ut(a[3]),null)},i(a){n||(H(i,a),n=!0)},o(a){K(i,a),n=!1},d(a){i&&i.d(a)}}}function Ds(e){let n,t;const i=[{name:"x"},e[1],{iconNode:e[0]}];let a={$$slots:{default:[zs]},$$scope:{ctx:e}};for(let r=0;r<i.length;r+=1)a=le(a,i[r]);return n=new $a({props:a}),{c(){Oe(n.$$.fragment)},l(r){Fe(n.$$.fragment,r)},m(r,o){Be(n,r,o),t=!0},p(r,[o]){const l=o&3?Ot(i,[i[0],o&2&&Vi(r[1]),o&1&&{iconNode:r[0]}]):{};o&8&&(l.$$scope={dirty:o,ctx:r}),n.$set(l)},i(r){t||(H(n.$$.fragment,r),t=!0)},o(r){K(n.$$.fragment,r),t=!1},d(r){He(n,r)}}}function Rs(e,n,t){let{$$slots:i={},$$scope:a}=n;const r=[["path",{d:"M18 6 6 18"}],["path",{d:"m6 6 12 12"}]];return e.$$set=o=>{t(1,n=le(le({},n),Le(o))),"$$scope"in o&&t(3,a=o.$$scope)},n=Le(n),[r,n,i,a]}class Zs extends Ye{constructor(n){super(),Ge(this,n,Rs,Ds,Te,{})}}function Hi(e){let n,t,i,a,r,o,l,c,s,f,g,d,h=e[2]&&Pi(e),_=e[2]&&Xi(e);const m=e[4].default,v=Ct(m,e,e[3],null);return{c(){n=O("div"),t=O("div"),i=O("div"),h&&h.c(),a=ce(),r=O("div"),o=O("div"),l=O("span"),c=me(e[1]),s=ce(),_&&_.c(),f=ce(),g=O("div"),v&&v.c(),this.h()},l(w){n=F(w,"DIV",{class:!0});var y=L(n);t=F(y,"DIV",{class:!0});var E=L(t);i=F(E,"DIV",{class:!0});var b=L(i);h&&h.l(b),b.forEach(T),a=he(E),r=F(E,"DIV",{class:!0});var A=L(r);o=F(A,"DIV",{class:!0});var z=L(o);l=F(z,"SPAN",{});var p=L(l);c=pe(p,e[1]),p.forEach(T),s=he(z),_&&_.l(z),z.forEach(T),f=he(A),g=F(A,"DIV",{class:!0});var S=L(g);v&&v.l(S),S.forEach(T),A.forEach(T),E.forEach(T),y.forEach(T),this.h()},h(){B(i,"class","absolute top-0 left-0 w-full h-full bg-black bg-opacity-50"),B(o,"class","border-zinc-800 border-b-2 px-2 py-1 text-white font-semibold flex justify-between items-center gap-4"),B(g,"class","px-2 py-1"),B(r,"class","z-20 border-zinc-800 border-2 bg-zinc-900"),B(t,"class","relative w-full h-full flex justify-center items-center"),B(n,"class","z-50 fixed top-0 left-0 w-screen h-screen")},m(w,y){J(w,n,y),N(n,t),N(t,i),h&&h.m(i,null),N(t,a),N(t,r),N(r,o),N(o,l),N(l,c),N(o,s),_&&_.m(o,null),N(r,f),N(r,g),v&&v.m(g,null),d=!0},p(w,y){w[2]?h?h.p(w,y):(h=Pi(w),h.c(),h.m(i,null)):h&&(h.d(1),h=null),(!d||y&2)&&zt(c,w[1]),w[2]?_?(_.p(w,y),y&4&&H(_,1)):(_=Xi(w),_.c(),H(_,1),_.m(o,null)):_&&(vn(),K(_,1,1,()=>{_=null}),kn()),v&&v.p&&(!d||y&8)&&Mt(v,m,w,w[3],d?Lt(m,w[3],y,null):Ut(w[3]),null)},i(w){d||(H(_),H(v,w),d=!0)},o(w){K(_),K(v,w),d=!1},d(w){w&&T(n),h&&h.d(),_&&_.d(),v&&v.d(w)}}}function Pi(e){let n,t,i,a;return{c(){n=O("button"),this.h()},l(r){n=F(r,"BUTTON",{class:!0,title:!0}),L(n).forEach(T),this.h()},h(){B(n,"class","absolute top-0 left-0 w-full h-full"),B(n,"title",t="Close "+e[1])},m(r,o){J(r,n,o),i||(a=te(n,"click",e[5]),i=!0)},p(r,o){o&2&&t!==(t="Close "+r[1])&&B(n,"title",t)},d(r){r&&T(n),i=!1,a()}}}function Xi(e){let n,t,i,a,r,o;return t=new Zs({}),{c(){n=O("button"),Oe(t.$$.fragment),this.h()},l(l){n=F(l,"BUTTON",{class:!0,title:!0});var c=L(n);Fe(t.$$.fragment,c),c.forEach(T),this.h()},h(){B(n,"class","float-right"),B(n,"title",i="Close "+e[1])},m(l,c){J(l,n,c),Be(t,n,null),a=!0,r||(o=te(n,"click",e[6]),r=!0)},p(l,c){(!a||c&2&&i!==(i="Close "+l[1]))&&B(n,"title",i)},i(l){a||(H(t.$$.fragment,l),a=!0)},o(l){K(t.$$.fragment,l),a=!1},d(l){l&&T(n),He(t),r=!1,o()}}}function Is(e){let n,t,i=e[0]&&Hi(e);return{c(){i&&i.c(),n=Ue()},l(a){i&&i.l(a),n=Ue()},m(a,r){i&&i.m(a,r),J(a,n,r),t=!0},p(a,[r]){a[0]?i?(i.p(a,r),r&1&&H(i,1)):(i=Hi(a),i.c(),H(i,1),i.m(n.parentNode,n)):i&&(vn(),K(i,1,1,()=>{i=null}),kn())},i(a){t||(H(i),t=!0)},o(a){K(i),t=!1},d(a){a&&T(n),i&&i.d(a)}}}function Ns(e,n,t){let{$$slots:i={},$$scope:a}=n,{visible:r=!1}=n,{title:o}=n,{closable:l=!0}=n;const c=()=>t(0,r=!1),s=()=>t(0,r=!1);return e.$$set=f=>{"visible"in f&&t(0,r=f.visible),"title"in f&&t(1,o=f.title),"closable"in f&&t(2,l=f.closable),"$$scope"in f&&t(3,a=f.$$scope)},[r,o,l,a,i,c,s]}class Cs extends Ye{constructor(n){super(),Ge(this,n,Ns,Is,Te,{visible:0,title:1,closable:2})}}function Ms(e){const n=localStorage.getItem(e);if(n){console.log("Loaded saved world");const t=JSON.parse(n);return Nt.load(t)}else{console.log("Loaded new world"),localStorage.setItem(e,"PLACEHOLDER");const t=new Nt(Math.floor(Math.random()*4294967295)),i=t.closest0(0,0);return t.reveal(i.x,i.y),t}}function Yi(e,n){localStorage.getItem(e)!==null&&(console.log("Save world"),localStorage.setItem(e,JSON.stringify(n.save())))}const Us=(e,n)=>{const t=new ResizeObserver(()=>{n(e.clientWidth,e.clientHeight)});return t.observe(e),{destroy(){t.unobserve(e),t.disconnect()}}};function Ls(e){let n,t,i,a;return{c(){n=O("canvas"),this.h()},l(r){n=F(r,"CANVAS",{class:!0}),L(n).forEach(T),this.h()},h(){B(n,"class","w-full h-full cursor-pointer")},m(r,o){J(r,n,o),e[12](n),i||(a=[te(window,"keydown",e[9]),te(window,"keyup",e[10]),te(window,"unload",e[11]),Ja(t=Us.call(null,n,e[13])),te(n,"mousedown",e[14]),te(n,"mouseup",e[15]),te(n,"mousemove",e[16]),te(n,"wheel",e[17],{passive:!0}),te(n,"contextmenu",Os)],i=!0)},p(r,[o]){t&&Qa(t.update)&&o&60&&t.update.call(null,r[13])},i:ln,o:ln,d(r){r&&T(n),e[12](null),i=!1,er(a)}}}const Os=e=>{e.preventDefault()};function Fs(e,n,t){const i=tr();let{saveSlot:a}=n,{debugNumFrames:r=0}=n,{debugFrameTime:o=0}=n,l,c=!0,s,f,g=!1,d=-1;const h=()=>{if(cancelAnimationFrame(d),d=requestAnimationFrame(h),g){t(5,g=!1),t(7,r++,r);const u=performance.now();f.render(),t(8,o=performance.now()-u)}};let _=new Set,m=-1;ji(()=>{t(1,s=Ms(a)),t(2,f=new ar(s,l)),C.onLoad(()=>{t(5,g=!0)}),clearInterval(m),m=setInterval(()=>{let u=!1;_.has("[")&&f.cameraZoom!=f.cameraScale(1.04)&&(u=!0),_.has("]")&&f.cameraZoom!=f.cameraScale(.96)&&(u=!0),_.has("ArrowUp")&&(f.cameraTranslate(0,10),u=!0),_.has("ArrowDown")&&(f.cameraTranslate(0,-10),u=!0),_.has("ArrowLeft")&&(f.cameraTranslate(10,0),u=!0),_.has("ArrowRight")&&(f.cameraTranslate(-10,0),u=!0),u&&t(5,g=!0)},1e3/60),h()}),nr(()=>{cancelAnimationFrame(d),clearInterval(m),Yi(a,s)});const v=u=>{_.add(u.key)},w=u=>{_.delete(u.key)},y=()=>{Yi(a,s)};function E(u){Dt[u?"unshift":"push"](()=>{l=u,t(3,l)})}const b=(u,k)=>{t(3,l.width=u,l),t(3,l.height=k,l),f.cameraScale(1),c&&(f.cameraTranslate(l.width/2,l.height/2),t(4,c=!1)),t(5,g=!0)},A=u=>{if(document.pointerLockElement!=l){if(u.button==1)l.requestPointerLock(),u.preventDefault();else if(u.button==0){u.preventDefault();const k=f.cameraPos(u.offsetX,u.offsetY);s.reveal(k.x,k.y),t(5,g=!0)}else if(u.button==2){u.preventDefault();const k=f.cameraPos(u.offsetX,u.offsetY);s.flag(k.x,k.y),t(5,g=!0)}}},z=u=>{document.pointerLockElement==l&&u.button==1&&document.exitPointerLock()},p=u=>{document.pointerLockElement==l&&(f.cameraTranslate(u.movementX,u.movementY),t(5,g=!0))},S=u=>{const k=u.deltaY>0?.9:1.1;f.cameraZoom!=f.cameraScale(k)&&t(5,g=!0)};return e.$$set=u=>{"saveSlot"in u&&t(0,a=u.saveSlot),"debugNumFrames"in u&&t(7,r=u.debugNumFrames),"debugFrameTime"in u&&t(8,o=u.debugFrameTime)},e.$$.update=()=>{e.$$.dirty&2&&s&&i("worldChange",s),e.$$.dirty&4&&f&&i("rendererChange",f)},[a,s,f,l,c,g,_,r,o,v,w,y,E,b,A,z,p,S]}class Bs extends Ye{constructor(n){super(),Ge(this,n,Fs,Ls,Te,{saveSlot:0,debugNumFrames:7,debugFrameTime:8})}}function Gi(e){let n,t,i,a;function r(c){e[6](c)}function o(c){e[7](c)}let l={saveSlot:e[0]};return e[4]!==void 0&&(l.debugNumFrames=e[4]),e[5]!==void 0&&(l.debugFrameTime=e[5]),n=new Bs({props:l}),Dt.push(()=>sn(n,"debugNumFrames",r)),Dt.push(()=>sn(n,"debugFrameTime",o)),n.$on("worldChange",e[8]),n.$on("rendererChange",e[9]),{c(){Oe(n.$$.fragment)},l(c){Fe(n.$$.fragment,c)},m(c,s){Be(n,c,s),a=!0},p(c,s){const f={};s&1&&(f.saveSlot=c[0]),!t&&s&16&&(t=!0,f.debugNumFrames=c[4],on(()=>t=!1)),!i&&s&32&&(i=!0,f.debugFrameTime=c[5],on(()=>i=!1)),n.$set(f)},i(c){a||(H(n.$$.fragment,c),a=!0)},o(c){K(n.$$.fragment,c),a=!1},d(c){He(n,c)}}}function Ki(e){let n,t,i=e[2].seed+"",a,r,o;return{c(){n=O("span"),t=me("Seed: "),a=me(i),r=ce(),o=O("br")},l(l){n=F(l,"SPAN",{});var c=L(n);t=pe(c,"Seed: "),a=pe(c,i),r=he(c),c.forEach(T),o=F(l,"BR",{})},m(l,c){J(l,n,c),N(n,t),N(n,a),N(n,r),J(l,o,c)},p(l,c){c&4&&i!==(i=l[2].seed+"")&&zt(a,i)},d(l){l&&(T(n),T(o))}}}function Hs(e){let n,t=`<h1 class="text-2xl"><a href="https://vulae.github.io/infinite-minesweeper">Infinite Minesweeper</a></h1> <h2 class="text-xl">CONTROLS</h2>
        Left Click: Reveal tile
        <br/>
        Right Click: Flag tile
        <br/>
        Middle Click / Arrow Keys: Move view
        <br/>
        Scroll Wheel: Zoom view
        <br/>
        Open Bracket &#39;[&#39;: Zoom In
        <br/>
        Close Bracket &#39;]&#39;: Zoom Out
        <br/>`;return{c(){n=O("span"),n.innerHTML=t,this.h()},l(i){n=F(i,"SPAN",{class:!0,"data-svelte-h":!0}),ir(n)!=="svelte-s5h82y"&&(n.innerHTML=t),this.h()},h(){B(n,"class","text-white font-semibold font-segoe")},m(i,a){J(i,n,a)},p:ln,d(i){i&&T(n)}}}function Ps(e){let n,t,i,a,r,o,l,c,s,f,g,d,h,_,m,v,w,y=Math.round(e[5]*10)/10+"",E,b,A,z,p,S,u,k,x=e[0]&&Gi(e);c=new Ts({props:{size:32,strokeWidth:3}});let M=e[2]&&Ki(e);function gt(R){e[11](R)}let we={title:"Information",$$slots:{default:[Hs]},$$scope:{ctx:e}};return e[1]!==void 0&&(we.visible=e[1]),z=new Cs({props:we}),Dt.push(()=>sn(z,"visible",gt)),{c(){n=O("div"),t=O("div"),x&&x.c(),i=ce(),a=O("div"),r=O("div"),o=O("div"),l=O("button"),Oe(c.$$.fragment),s=ce(),f=O("div"),g=O("div"),d=O("div"),M&&M.c(),h=ce(),_=O("span"),m=me("Frame "),v=me(e[4]),w=ce(),E=me(y),b=me("ms"),A=ce(),Oe(z.$$.fragment),this.h()},l(R){n=F(R,"DIV",{class:!0});var X=L(n);t=F(X,"DIV",{class:!0});var Re=L(t);x&&x.l(Re),Re.forEach(T),i=he(X),a=F(X,"DIV",{class:!0});var Un=L(a);r=F(Un,"DIV",{class:!0});var wt=L(r);o=F(wt,"DIV",{class:!0});var Ln=L(o);l=F(Ln,"BUTTON",{class:!0});var On=L(l);Fe(c.$$.fragment,On),On.forEach(T),Ln.forEach(T),s=he(wt),f=F(wt,"DIV",{class:!0});var Fn=L(f);g=F(Fn,"DIV",{class:!0});var Bn=L(g);d=F(Bn,"DIV",{class:!0});var mt=L(d);M&&M.l(mt),h=he(mt),_=F(mt,"SPAN",{});var Ze=L(_);m=pe(Ze,"Frame "),v=pe(Ze,e[4]),w=he(Ze),E=pe(Ze,y),b=pe(Ze,"ms"),Ze.forEach(T),mt.forEach(T),Bn.forEach(T),Fn.forEach(T),wt.forEach(T),Un.forEach(T),X.forEach(T),A=he(R),Fe(z.$$.fragment,R),this.h()},h(){B(t,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1"),B(l,"class","text-blue-500 bg-zinc-800 outline outline-black outline-1 rounded-full w-min flex items-center justify-center"),B(o,"class","pointer-events-auto p-4 h-min"),B(d,"class","text-white font-bold"),B(g,"class","p-4 bg-zinc-800 bg-opacity-70 outline outline-zinc-600 rounded-lg"),B(f,"class","pointer-events-auto p-4 h-min"),B(r,"class","w-full h-full flex justify-between"),B(a,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1 pointer-events-none"),B(n,"class","w-screen h-screen grid grid-cols-1 grid-rows-1")},m(R,X){J(R,n,X),N(n,t),x&&x.m(t,null),N(n,i),N(n,a),N(a,r),N(r,o),N(o,l),Be(c,l,null),N(r,s),N(r,f),N(f,g),N(g,d),M&&M.m(d,null),N(d,h),N(d,_),N(_,m),N(_,v),N(_,w),N(_,E),N(_,b),J(R,A,X),Be(z,R,X),S=!0,u||(k=te(l,"click",e[10]),u=!0)},p(R,[X]){R[0]?x?(x.p(R,X),X&1&&H(x,1)):(x=Gi(R),x.c(),H(x,1),x.m(t,null)):x&&(vn(),K(x,1,1,()=>{x=null}),kn()),R[2]?M?M.p(R,X):(M=Ki(R),M.c(),M.m(d,h)):M&&(M.d(1),M=null),(!S||X&16)&&zt(v,R[4]),(!S||X&32)&&y!==(y=Math.round(R[5]*10)/10+"")&&zt(E,y);const Re={};X&4096&&(Re.$$scope={dirty:X,ctx:R}),!p&&X&2&&(p=!0,Re.visible=R[1],on(()=>p=!1)),z.$set(Re)},i(R){S||(H(x),H(c.$$.fragment,R),H(z.$$.fragment,R),S=!0)},o(R){K(x),K(c.$$.fragment,R),K(z.$$.fragment,R),S=!1},d(R){R&&(T(n),T(A)),x&&x.d(),He(c),M&&M.d(),He(z,R),u=!1,k()}}}function Xs(e,n,t){let i=null;ji(()=>{const m=new URL(location.href);t(0,i=m.searchParams.get("saveSlot")??"save")});let a=!0,r,o,l=0,c=0;function s(m){l=m,t(4,l)}function f(m){c=m,t(5,c)}const g=m=>t(2,r=m.detail),d=m=>t(3,o=m.detail),h=()=>t(1,a=!0);function _(m){a=m,t(1,a)}return[i,a,r,o,l,c,s,f,g,d,h,_]}class Ws extends Ye{constructor(n){super(),Ge(this,n,Xs,Ps,Te,{})}}export{Ws as component};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
