var ga=Object.defineProperty;var pa=(t,i,e)=>i in t?ga(t,i,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[i]=e;var u=(t,i,e)=>(pa(t,typeof i!="symbol"?i+"":i,e),e);import{s as ce,e as R,a as se,c as z,b as F,f as E,g as le,p as I,i as O,h as U,S as q,T as tr,H as ir,n as Ne,E as Ti,U as wa,o as Si,V as nr,r as zt,l as Ae,k as di,W as Hi,z as je,X,w as rr,x as ar,Y as Zt,B as Ge,C as We,D as Ke,Z as sr,_ as Vi,$ as be,y as Me,t as lr,d as or,a0 as Yi,q as re,a1 as va,j as ya}from"../chunks/scheduler.cZO4XJDa.js";import{S as fe,i as he,a as L,g as ct,t as $,c as ft,b as ee,d as te,m as ie,e as ne,f as ka}from"../chunks/index.DNYDBKQr.js";import{w as cr}from"../chunks/index.3RnFC1FZ.js";function Ut(t){return(t==null?void 0:t.length)!==void 0?t:Array.from(t)}function qe(t,i){const e={},n={},r={$$scope:1};let a=t.length;for(;a--;){const s=t[a],l=i[a];if(l){for(const f in s)f in l||(n[f]=1);for(const f in l)r[f]||(e[f]=l[f],r[f]=1);t[a]=l}else for(const f in s)r[f]=1}for(const s in n)s in e||(e[s]=void 0);return e}function Ht(t){return typeof t=="object"&&t!==null?t:{}}const fr="3.7.7",xa=fr,Je=typeof Buffer=="function",Xi=typeof TextDecoder=="function"?new TextDecoder:void 0,ji=typeof TextEncoder=="function"?new TextEncoder:void 0,Ea="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",nt=Array.prototype.slice.call(Ea),At=(t=>{let i={};return t.forEach((e,n)=>i[e]=n),i})(nt),Ta=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,Y=String.fromCharCode.bind(String),Gi=typeof Uint8Array.from=="function"?Uint8Array.from.bind(Uint8Array):t=>new Uint8Array(Array.prototype.slice.call(t,0)),hr=t=>t.replace(/=/g,"").replace(/[+\/]/g,i=>i=="+"?"-":"_"),dr=t=>t.replace(/[^A-Za-z0-9\+\/]/g,""),ur=t=>{let i,e,n,r,a="";const s=t.length%3;for(let l=0;l<t.length;){if((e=t.charCodeAt(l++))>255||(n=t.charCodeAt(l++))>255||(r=t.charCodeAt(l++))>255)throw new TypeError("invalid character found");i=e<<16|n<<8|r,a+=nt[i>>18&63]+nt[i>>12&63]+nt[i>>6&63]+nt[i&63]}return s?a.slice(0,s-3)+"===".substring(s):a},Ai=typeof btoa=="function"?t=>btoa(t):Je?t=>Buffer.from(t,"binary").toString("base64"):ur,ui=Je?t=>Buffer.from(t).toString("base64"):t=>{let e=[];for(let n=0,r=t.length;n<r;n+=4096)e.push(Y.apply(null,t.subarray(n,n+4096)));return Ai(e.join(""))},Nt=(t,i=!1)=>i?hr(ui(t)):ui(t),Sa=t=>{if(t.length<2){var i=t.charCodeAt(0);return i<128?t:i<2048?Y(192|i>>>6)+Y(128|i&63):Y(224|i>>>12&15)+Y(128|i>>>6&63)+Y(128|i&63)}else{var i=65536+(t.charCodeAt(0)-55296)*1024+(t.charCodeAt(1)-56320);return Y(240|i>>>18&7)+Y(128|i>>>12&63)+Y(128|i>>>6&63)+Y(128|i&63)}},Aa=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,_r=t=>t.replace(Aa,Sa),Wi=Je?t=>Buffer.from(t,"utf8").toString("base64"):ji?t=>ui(ji.encode(t)):t=>Ai(_r(t)),Pe=(t,i=!1)=>i?hr(Wi(t)):Wi(t),Ki=t=>Pe(t,!0),Da=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,Ma=t=>{switch(t.length){case 4:var i=(7&t.charCodeAt(0))<<18|(63&t.charCodeAt(1))<<12|(63&t.charCodeAt(2))<<6|63&t.charCodeAt(3),e=i-65536;return Y((e>>>10)+55296)+Y((e&1023)+56320);case 3:return Y((15&t.charCodeAt(0))<<12|(63&t.charCodeAt(1))<<6|63&t.charCodeAt(2));default:return Y((31&t.charCodeAt(0))<<6|63&t.charCodeAt(1))}},mr=t=>t.replace(Da,Ma),br=t=>{if(t=t.replace(/\s+/g,""),!Ta.test(t))throw new TypeError("malformed base64.");t+="==".slice(2-(t.length&3));let i,e="",n,r;for(let a=0;a<t.length;)i=At[t.charAt(a++)]<<18|At[t.charAt(a++)]<<12|(n=At[t.charAt(a++)])<<6|(r=At[t.charAt(a++)]),e+=n===64?Y(i>>16&255):r===64?Y(i>>16&255,i>>8&255):Y(i>>16&255,i>>8&255,i&255);return e},Di=typeof atob=="function"?t=>atob(dr(t)):Je?t=>Buffer.from(t,"base64").toString("binary"):br,gr=Je?t=>Gi(Buffer.from(t,"base64")):t=>Gi(Di(t).split("").map(i=>i.charCodeAt(0))),pr=t=>gr(wr(t)),Ia=Je?t=>Buffer.from(t,"base64").toString("utf8"):Xi?t=>Xi.decode(gr(t)):t=>mr(Di(t)),wr=t=>dr(t.replace(/[-_]/g,i=>i=="-"?"+":"/")),_i=t=>Ia(wr(t)),Ca=t=>{if(typeof t!="string")return!1;const i=t.replace(/\s+/g,"").replace(/={0,2}$/,"");return!/[^\s0-9a-zA-Z\+/]/.test(i)||!/[^\s0-9a-zA-Z\-_]/.test(i)},vr=t=>({value:t,enumerable:!1,writable:!0,configurable:!0}),yr=function(){const t=(i,e)=>Object.defineProperty(String.prototype,i,vr(e));t("fromBase64",function(){return _i(this)}),t("toBase64",function(i){return Pe(this,i)}),t("toBase64URI",function(){return Pe(this,!0)}),t("toBase64URL",function(){return Pe(this,!0)}),t("toUint8Array",function(){return pr(this)})},kr=function(){const t=(i,e)=>Object.defineProperty(Uint8Array.prototype,i,vr(e));t("toBase64",function(i){return Nt(this,i)}),t("toBase64URI",function(){return Nt(this,!0)}),t("toBase64URL",function(){return Nt(this,!0)})},Ra=()=>{yr(),kr()},qi={version:fr,VERSION:xa,atob:Di,atobPolyfill:br,btoa:Ai,btoaPolyfill:ur,fromBase64:_i,toBase64:Pe,encode:Pe,encodeURI:Ki,encodeURL:Ki,utob:_r,btou:mr,decode:_i,isValid:Ca,fromUint8Array:Nt,toUint8Array:pr,extendString:yr,extendUint8Array:kr,extendBuiltins:Ra};class Ji{constructor(i){u(this,"buffer");u(this,"bytePointer",0);u(this,"bitPointer",0);this.buffer=typeof i=="number"?new ArrayBuffer(i):"buffer"in i?i.buffer:i}get view(){return new DataView(this.buffer)}skipBits(i){this.bitPointer+=i,this.bytePointer+=Math.floor(this.bitPointer/8),this.bitPointer%=8}final(){return this.buffer.slice(0,this.bitPointer==0?this.bytePointer:this.bytePointer+1)}readBit(){const e=(this.view.getUint8(this.bytePointer)>>this.bitPointer&1)!=0;return this.skipBits(1),e}readBits(i){let e=0;for(let n=0;n<i;n++)e|=(this.readBit()?1:0)<<n;return e}writeBit(i){let e=this.view.getUint8(this.bytePointer);i?e|=1<<this.bitPointer:e&=1<<this.bitPointer^255,this.view.setUint8(this.bytePointer,e),this.skipBits(1)}writeBits(i,e){for(let n=0;n<i;n++)this.writeBit((e&1)!=0),e>>=1}}function Qi(t){let i=0;for(;t;)t&=t-1,i++;return i}const C=64;function Mi(t,i){return()=>{t|=0,t=t+2654435769|0;let e=t^t>>>16;e=Math.imul(e,569420461),e=e^e>>>15,e=Math.imul(e,1935289751);const n=(e=e^e>>>15)>>>0;return i?n/4294967296:n}}function J(t,i,e,n){return t^=t<<13|t>>>17,t=t*2158630691+3333583613&4294967295,t^=i,t^=t<<13|t>>>17,t=t*2158630691+3333583613&4294967295,t^=e,t^=t<<13|t>>>17,t=t*2158630691+3333583613&4294967295,t^=n,t^=t<<16|t>>>15,t=t*2158630691+3333583613&4294967295,(t>>>0)/4294967295}function za(t,i){i*=t.reduce((e,n)=>e+n,0);for(let e=0;e<t.length;e++)if(i-=t[e],i<=0)return e;throw new Error("Invalid weights")}function Na(t,i,e,n){let r=1/0,a=-1;for(let s=Math.floor(i)-1;s<Math.ceil(i)+1;s++)for(let l=Math.floor(e)-1;l<Math.ceil(e)+1;l++){const f=s+J(t,s,l,0)-.5,o=l+J(t,s,l,1)-.5,c=(f-i)**2+(o-e)**2;c<r&&(r=c,a=za(n,J(t,s,l,2)))}if(a==-1)throw new Error("Voronoi noise error.");return a}function en(t,i,e){function n(h,m,g){return(m-h)*((g*(g*6-15)+10)*g*g*g)+h}const r=(h,m)=>{const g=J(t,h,m,0);return{x:Math.cos(g),y:Math.sin(g)}},a=(h,m,g,p)=>{const b=r(h,m),v=g-h,T=p-m;return v*b.x+T*b.y},s=Math.floor(i),l=s+1,f=Math.floor(e),o=f+1,c=i-s,_=e-f;return n(n(a(s,f,i,e),a(l,f,i,e),c),n(a(s,o,i,e),a(l,o,i,e),c),_)}class xr{constructor(i,e,n){u(this,"world");u(this,"x");u(this,"y");u(this,"minesNearbyCache",null);this.world=i,this.x=e,this.y=n}minesNearby(i=!1){if(this.minesNearbyCache!==null&&i)return this.minesNearbyCache;this.minesNearbyCache=0;for(const e of this.searchPattern)this.minesNearbyCache+=this.world.getTile(this.x+e.x,this.y+e.y).numMines();return this.minesNearbyCache}flagsNearby(){let i=0;for(const e of this.searchPattern)i+=this.world.getTile(this.x+e.x,this.y+e.y).numFlags();return i}isDeathTile(){const i=this.world.getGeneratedChunk(Math.floor(this.x/C),Math.floor(this.y/C)),e=this.x-i.chunkX*C,n=this.y-i.chunkY*C;return i.deaths.some(r=>r.x==e&&r.y==n)}static load(i,e,n,r){throw new Error("Tile.load needs to be implemented on derived class.")}}class Er extends xr{constructor(e,n,r,a){super(e,n,r);u(this,"_numMines");u(this,"_numFlags",0);u(this,"isRevealed",!1);u(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this._numMines=a}numMines(){return this._numMines}numFlags(){return this._numFlags}flag(){this.isRevealed||(this._numFlags++,this._numFlags%=this.numMaxMines+1)}reveal(){return this.isRevealed||this._numFlags>0?!1:(this._numMines==0?this.isRevealed=!0:this._numFlags=this._numMines,!0)}save(e){e.writeBit(this.isRevealed),this.isRevealed||e.writeBits(Qi(this.numMaxMines),this._numFlags)}static loadInternal(e,n){return e.isRevealed=n.readBit(),e.isRevealed||(e._numFlags=n.readBits(Qi(e.numMaxMines))),e}static load(e,n,r,a){throw new Error("MultiMineTile.load needs to be implemented on derived class.")}}class Ii extends Er{constructor(e,n,r){const a=J(e.tileSeed,n,r,0)>.8?Math.floor(J(e.tileSeed,n,r,1)*4)+1:0;super(e,n,r,a);u(this,"type","blueberry");u(this,"numMaxMines",3)}static load(e,n,r,a){return this.loadInternal(new Ii(e,n,r),a)}}var Ie=(t=>(t[t.Covered=0]="Covered",t[t.Flagged=1]="Flagged",t[t.Revealed=2]="Revealed",t))(Ie||{});class vt extends xr{constructor(e,n,r,a){super(e,n,r);u(this,"isMine");u(this,"state",0);u(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this.isMine=a}numMines(){return this.isMine?1:0}numFlags(){return this.state==1?1:0}flag(){this.state!=2&&(this.state==0?this.state=1:this.state=0)}reveal(){return this.state!=0?!1:(this.isMine?this.state=1:this.state=2,!0)}save(e){this.isMine?e.writeBit(this.state==1):e.writeBits(2,this.state)}static loadInternal(e,n){return e.isMine?e.state=n.readBit()?1:0:e.state=n.readBits(2),e}static load(e,n,r,a){throw new Error("SingleMineTile.load needs to be implemented on derived class.")}}class Ci extends vt{constructor(e,n,r){const a=J(e.tileSeed,n,r,0)>.625;super(e,n,r,a);u(this,"type","chocolate")}static load(e,n,r,a){return this.loadInternal(new Ci(e,n,r),a)}}class Ri extends vt{constructor(e,n,r){const a=J(e.tileSeed,n,r,0)>.825;super(e,n,r,a);u(this,"type","strawberry");u(this,"secondaryNearbyCountModifier",null);u(this,"secondaryNearbyCountRightSide",!1);J(e.tileSeed,n,r,1)>.3&&(this.secondaryNearbyCountModifier=J(e.tileSeed,n,r,2)>.3?1:-1,this.secondaryNearbyCountRightSide=J(e.tileSeed,n,r,3)>.5)}minesNearbySecondary(e=!1){if(this.secondaryNearbyCountModifier==null)return null;const n=this.minesNearby(e);if(n<=0)return null;const r=n+this.secondaryNearbyCountModifier;return r<=0?null:r}static load(e,n,r,a){return this.loadInternal(new Ri(e,n,r),a)}}function Tr(t,i,e,n){const r=Math.floor(e/i),a=Math.floor(n/i),s=(r+a%2)%2==0,l=Math.abs(e%i)+Math.abs(n%i)*i,f=Math.floor(J(t.tileSeed,r,a,0)*i**2),o=s?l!=f:l==f;return{isDark:s,isMine:o}}class zi extends vt{constructor(e,n,r){const{isDark:a,isMine:s}=Tr(e,2,n,r);super(e,n,r,s);u(this,"type","waffle");u(this,"isDark");this.isDark=a}static load(e,n,r,a){return this.loadInternal(new zi(e,n,r),a)}}class Ni extends vt{constructor(e,n,r){const{isDark:a,isMine:s}=Tr(e,3,n,r);super(e,n,r,s);u(this,"type","stroopwafel");u(this,"isDark");this.isDark=a}static load(e,n,r,a){return this.loadInternal(new Ni(e,n,r),a)}}class Li extends vt{constructor(e,n,r){const a=J(e.tileSeed,n,r,0)>.85;super(e,n,r,a);u(this,"type","vanilla")}static load(e,n,r,a){return this.loadInternal(new Li(e,n,r),a)}}const La={type:"collection",weight:1,scale:24,smoothness:.8,biomes:[{type:"collection",weight:5,scale:24,smoothness:.8,biomes:[{type:"biome",weight:3,tile:Li},{type:"biome",weight:1,tile:Ci}]},{type:"collection",weight:2,scale:64,smoothness:0,biomes:[{type:"biome",weight:1,tile:zi},{type:"biome",weight:2,tile:Ni}]},{type:"collection",weight:2,scale:32,smoothness:.5,biomes:[{type:"biome",weight:1,tile:Ii},{type:"biome",weight:1,tile:Ri}]}]};function Ba(t,i,e,n,r){const a=Mi(t,!1),s=en(a(),i,e)*n,l=en(a(),i,e)*n;return Na(a(),i+s,e+l,r)}function Sr(t,i,e){const n=Mi(t.biomeSeed,!1);let r=La;for(;r.type=="collection";){const a=Ba(n(),i/r.scale,e/r.scale,r.smoothness,r.biomes.map(s=>s.weight));r=r.biomes[a]}return r.tile}function Ar(t,i,e){const n=Sr(t,i,e);return new n(t,i,e)}/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */const Za=4,tn=0,nn=1,Ua=2;function Qe(t){let i=t.length;for(;--i>=0;)t[i]=0}const Fa=0,Dr=1,$a=2,Oa=3,Pa=258,Bi=29,yt=256,ht=yt+1+Bi,He=30,Zi=19,Mr=2*ht+1,Ce=15,qt=16,Ha=7,Ui=256,Ir=16,Cr=17,Rr=18,mi=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),Lt=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),Va=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),zr=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),Ya=512,ve=new Array((ht+2)*2);Qe(ve);const st=new Array(He*2);Qe(st);const dt=new Array(Ya);Qe(dt);const ut=new Array(Pa-Oa+1);Qe(ut);const Fi=new Array(Bi);Qe(Fi);const Ft=new Array(He);Qe(Ft);function Jt(t,i,e,n,r){this.static_tree=t,this.extra_bits=i,this.extra_base=e,this.elems=n,this.max_length=r,this.has_stree=t&&t.length}let Nr,Lr,Br;function Qt(t,i){this.dyn_tree=t,this.max_code=0,this.stat_desc=i}const Zr=t=>t<256?dt[t]:dt[256+(t>>>7)],_t=(t,i)=>{t.pending_buf[t.pending++]=i&255,t.pending_buf[t.pending++]=i>>>8&255},W=(t,i,e)=>{t.bi_valid>qt-e?(t.bi_buf|=i<<t.bi_valid&65535,_t(t,t.bi_buf),t.bi_buf=i>>qt-t.bi_valid,t.bi_valid+=e-qt):(t.bi_buf|=i<<t.bi_valid&65535,t.bi_valid+=e)},ue=(t,i,e)=>{W(t,e[i*2],e[i*2+1])},Ur=(t,i)=>{let e=0;do e|=t&1,t>>>=1,e<<=1;while(--i>0);return e>>>1},Xa=t=>{t.bi_valid===16?(_t(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=t.bi_buf&255,t.bi_buf>>=8,t.bi_valid-=8)},ja=(t,i)=>{const e=i.dyn_tree,n=i.max_code,r=i.stat_desc.static_tree,a=i.stat_desc.has_stree,s=i.stat_desc.extra_bits,l=i.stat_desc.extra_base,f=i.stat_desc.max_length;let o,c,_,d,h,m,g=0;for(d=0;d<=Ce;d++)t.bl_count[d]=0;for(e[t.heap[t.heap_max]*2+1]=0,o=t.heap_max+1;o<Mr;o++)c=t.heap[o],d=e[e[c*2+1]*2+1]+1,d>f&&(d=f,g++),e[c*2+1]=d,!(c>n)&&(t.bl_count[d]++,h=0,c>=l&&(h=s[c-l]),m=e[c*2],t.opt_len+=m*(d+h),a&&(t.static_len+=m*(r[c*2+1]+h)));if(g!==0){do{for(d=f-1;t.bl_count[d]===0;)d--;t.bl_count[d]--,t.bl_count[d+1]+=2,t.bl_count[f]--,g-=2}while(g>0);for(d=f;d!==0;d--)for(c=t.bl_count[d];c!==0;)_=t.heap[--o],!(_>n)&&(e[_*2+1]!==d&&(t.opt_len+=(d-e[_*2+1])*e[_*2],e[_*2+1]=d),c--)}},Fr=(t,i,e)=>{const n=new Array(Ce+1);let r=0,a,s;for(a=1;a<=Ce;a++)r=r+e[a-1]<<1,n[a]=r;for(s=0;s<=i;s++){let l=t[s*2+1];l!==0&&(t[s*2]=Ur(n[l]++,l))}},Ga=()=>{let t,i,e,n,r;const a=new Array(Ce+1);for(e=0,n=0;n<Bi-1;n++)for(Fi[n]=e,t=0;t<1<<mi[n];t++)ut[e++]=n;for(ut[e-1]=n,r=0,n=0;n<16;n++)for(Ft[n]=r,t=0;t<1<<Lt[n];t++)dt[r++]=n;for(r>>=7;n<He;n++)for(Ft[n]=r<<7,t=0;t<1<<Lt[n]-7;t++)dt[256+r++]=n;for(i=0;i<=Ce;i++)a[i]=0;for(t=0;t<=143;)ve[t*2+1]=8,t++,a[8]++;for(;t<=255;)ve[t*2+1]=9,t++,a[9]++;for(;t<=279;)ve[t*2+1]=7,t++,a[7]++;for(;t<=287;)ve[t*2+1]=8,t++,a[8]++;for(Fr(ve,ht+1,a),t=0;t<He;t++)st[t*2+1]=5,st[t*2]=Ur(t,5);Nr=new Jt(ve,mi,yt+1,ht,Ce),Lr=new Jt(st,Lt,0,He,Ce),Br=new Jt(new Array(0),Va,0,Zi,Ha)},$r=t=>{let i;for(i=0;i<ht;i++)t.dyn_ltree[i*2]=0;for(i=0;i<He;i++)t.dyn_dtree[i*2]=0;for(i=0;i<Zi;i++)t.bl_tree[i*2]=0;t.dyn_ltree[Ui*2]=1,t.opt_len=t.static_len=0,t.sym_next=t.matches=0},Or=t=>{t.bi_valid>8?_t(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0},rn=(t,i,e,n)=>{const r=i*2,a=e*2;return t[r]<t[a]||t[r]===t[a]&&n[i]<=n[e]},ei=(t,i,e)=>{const n=t.heap[e];let r=e<<1;for(;r<=t.heap_len&&(r<t.heap_len&&rn(i,t.heap[r+1],t.heap[r],t.depth)&&r++,!rn(i,n,t.heap[r],t.depth));)t.heap[e]=t.heap[r],e=r,r<<=1;t.heap[e]=n},an=(t,i,e)=>{let n,r,a=0,s,l;if(t.sym_next!==0)do n=t.pending_buf[t.sym_buf+a++]&255,n+=(t.pending_buf[t.sym_buf+a++]&255)<<8,r=t.pending_buf[t.sym_buf+a++],n===0?ue(t,r,i):(s=ut[r],ue(t,s+yt+1,i),l=mi[s],l!==0&&(r-=Fi[s],W(t,r,l)),n--,s=Zr(n),ue(t,s,e),l=Lt[s],l!==0&&(n-=Ft[s],W(t,n,l)));while(a<t.sym_next);ue(t,Ui,i)},bi=(t,i)=>{const e=i.dyn_tree,n=i.stat_desc.static_tree,r=i.stat_desc.has_stree,a=i.stat_desc.elems;let s,l,f=-1,o;for(t.heap_len=0,t.heap_max=Mr,s=0;s<a;s++)e[s*2]!==0?(t.heap[++t.heap_len]=f=s,t.depth[s]=0):e[s*2+1]=0;for(;t.heap_len<2;)o=t.heap[++t.heap_len]=f<2?++f:0,e[o*2]=1,t.depth[o]=0,t.opt_len--,r&&(t.static_len-=n[o*2+1]);for(i.max_code=f,s=t.heap_len>>1;s>=1;s--)ei(t,e,s);o=a;do s=t.heap[1],t.heap[1]=t.heap[t.heap_len--],ei(t,e,1),l=t.heap[1],t.heap[--t.heap_max]=s,t.heap[--t.heap_max]=l,e[o*2]=e[s*2]+e[l*2],t.depth[o]=(t.depth[s]>=t.depth[l]?t.depth[s]:t.depth[l])+1,e[s*2+1]=e[l*2+1]=o,t.heap[1]=o++,ei(t,e,1);while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],ja(t,i),Fr(e,f,t.bl_count)},sn=(t,i,e)=>{let n,r=-1,a,s=i[0*2+1],l=0,f=7,o=4;for(s===0&&(f=138,o=3),i[(e+1)*2+1]=65535,n=0;n<=e;n++)a=s,s=i[(n+1)*2+1],!(++l<f&&a===s)&&(l<o?t.bl_tree[a*2]+=l:a!==0?(a!==r&&t.bl_tree[a*2]++,t.bl_tree[Ir*2]++):l<=10?t.bl_tree[Cr*2]++:t.bl_tree[Rr*2]++,l=0,r=a,s===0?(f=138,o=3):a===s?(f=6,o=3):(f=7,o=4))},ln=(t,i,e)=>{let n,r=-1,a,s=i[0*2+1],l=0,f=7,o=4;for(s===0&&(f=138,o=3),n=0;n<=e;n++)if(a=s,s=i[(n+1)*2+1],!(++l<f&&a===s)){if(l<o)do ue(t,a,t.bl_tree);while(--l!==0);else a!==0?(a!==r&&(ue(t,a,t.bl_tree),l--),ue(t,Ir,t.bl_tree),W(t,l-3,2)):l<=10?(ue(t,Cr,t.bl_tree),W(t,l-3,3)):(ue(t,Rr,t.bl_tree),W(t,l-11,7));l=0,r=a,s===0?(f=138,o=3):a===s?(f=6,o=3):(f=7,o=4)}},Wa=t=>{let i;for(sn(t,t.dyn_ltree,t.l_desc.max_code),sn(t,t.dyn_dtree,t.d_desc.max_code),bi(t,t.bl_desc),i=Zi-1;i>=3&&t.bl_tree[zr[i]*2+1]===0;i--);return t.opt_len+=3*(i+1)+5+5+4,i},Ka=(t,i,e,n)=>{let r;for(W(t,i-257,5),W(t,e-1,5),W(t,n-4,4),r=0;r<n;r++)W(t,t.bl_tree[zr[r]*2+1],3);ln(t,t.dyn_ltree,i-1),ln(t,t.dyn_dtree,e-1)},qa=t=>{let i=4093624447,e;for(e=0;e<=31;e++,i>>>=1)if(i&1&&t.dyn_ltree[e*2]!==0)return tn;if(t.dyn_ltree[9*2]!==0||t.dyn_ltree[10*2]!==0||t.dyn_ltree[13*2]!==0)return nn;for(e=32;e<yt;e++)if(t.dyn_ltree[e*2]!==0)return nn;return tn};let on=!1;const Ja=t=>{on||(Ga(),on=!0),t.l_desc=new Qt(t.dyn_ltree,Nr),t.d_desc=new Qt(t.dyn_dtree,Lr),t.bl_desc=new Qt(t.bl_tree,Br),t.bi_buf=0,t.bi_valid=0,$r(t)},Pr=(t,i,e,n)=>{W(t,(Fa<<1)+(n?1:0),3),Or(t),_t(t,e),_t(t,~e),e&&t.pending_buf.set(t.window.subarray(i,i+e),t.pending),t.pending+=e},Qa=t=>{W(t,Dr<<1,3),ue(t,Ui,ve),Xa(t)},es=(t,i,e,n)=>{let r,a,s=0;t.level>0?(t.strm.data_type===Ua&&(t.strm.data_type=qa(t)),bi(t,t.l_desc),bi(t,t.d_desc),s=Wa(t),r=t.opt_len+3+7>>>3,a=t.static_len+3+7>>>3,a<=r&&(r=a)):r=a=e+5,e+4<=r&&i!==-1?Pr(t,i,e,n):t.strategy===Za||a===r?(W(t,(Dr<<1)+(n?1:0),3),an(t,ve,st)):(W(t,($a<<1)+(n?1:0),3),Ka(t,t.l_desc.max_code+1,t.d_desc.max_code+1,s+1),an(t,t.dyn_ltree,t.dyn_dtree)),$r(t),n&&Or(t)},ts=(t,i,e)=>(t.pending_buf[t.sym_buf+t.sym_next++]=i,t.pending_buf[t.sym_buf+t.sym_next++]=i>>8,t.pending_buf[t.sym_buf+t.sym_next++]=e,i===0?t.dyn_ltree[e*2]++:(t.matches++,i--,t.dyn_ltree[(ut[e]+yt+1)*2]++,t.dyn_dtree[Zr(i)*2]++),t.sym_next===t.sym_end);var is=Ja,ns=Pr,rs=es,as=ts,ss=Qa,ls={_tr_init:is,_tr_stored_block:ns,_tr_flush_block:rs,_tr_tally:as,_tr_align:ss};const os=(t,i,e,n)=>{let r=t&65535|0,a=t>>>16&65535|0,s=0;for(;e!==0;){s=e>2e3?2e3:e,e-=s;do r=r+i[n++]|0,a=a+r|0;while(--s);r%=65521,a%=65521}return r|a<<16|0};var mt=os;const cs=()=>{let t,i=[];for(var e=0;e<256;e++){t=e;for(var n=0;n<8;n++)t=t&1?3988292384^t>>>1:t>>>1;i[e]=t}return i},fs=new Uint32Array(cs()),hs=(t,i,e,n)=>{const r=fs,a=n+e;t^=-1;for(let s=n;s<a;s++)t=t>>>8^r[(t^i[s])&255];return t^-1};var H=hs,Le={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},Ue={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:ds,_tr_stored_block:gi,_tr_flush_block:us,_tr_tally:Ee,_tr_align:_s}=ls,{Z_NO_FLUSH:Te,Z_PARTIAL_FLUSH:ms,Z_FULL_FLUSH:bs,Z_FINISH:ae,Z_BLOCK:cn,Z_OK:V,Z_STREAM_END:fn,Z_STREAM_ERROR:_e,Z_DATA_ERROR:gs,Z_BUF_ERROR:ti,Z_DEFAULT_COMPRESSION:ps,Z_FILTERED:ws,Z_HUFFMAN_ONLY:Dt,Z_RLE:vs,Z_FIXED:ys,Z_DEFAULT_STRATEGY:ks,Z_UNKNOWN:xs,Z_DEFLATED:Vt}=Ue,Es=9,Ts=15,Ss=8,As=29,Ds=256,pi=Ds+1+As,Ms=30,Is=19,Cs=2*pi+1,Rs=15,N=3,xe=258,me=xe+N+1,zs=32,Ve=42,$i=57,wi=69,vi=73,yi=91,ki=103,Re=113,rt=666,G=1,et=2,Be=3,tt=4,Ns=3,ze=(t,i)=>(t.msg=Le[i],i),hn=t=>t*2-(t>4?9:0),ke=t=>{let i=t.length;for(;--i>=0;)t[i]=0},Ls=t=>{let i,e,n,r=t.w_size;i=t.hash_size,n=i;do e=t.head[--n],t.head[n]=e>=r?e-r:0;while(--i);i=r,n=i;do e=t.prev[--n],t.prev[n]=e>=r?e-r:0;while(--i)};let Bs=(t,i,e)=>(i<<t.hash_shift^e)&t.hash_mask,Se=Bs;const K=t=>{const i=t.state;let e=i.pending;e>t.avail_out&&(e=t.avail_out),e!==0&&(t.output.set(i.pending_buf.subarray(i.pending_out,i.pending_out+e),t.next_out),t.next_out+=e,i.pending_out+=e,t.total_out+=e,t.avail_out-=e,i.pending-=e,i.pending===0&&(i.pending_out=0))},Q=(t,i)=>{us(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,i),t.block_start=t.strstart,K(t.strm)},Z=(t,i)=>{t.pending_buf[t.pending++]=i},it=(t,i)=>{t.pending_buf[t.pending++]=i>>>8&255,t.pending_buf[t.pending++]=i&255},xi=(t,i,e,n)=>{let r=t.avail_in;return r>n&&(r=n),r===0?0:(t.avail_in-=r,i.set(t.input.subarray(t.next_in,t.next_in+r),e),t.state.wrap===1?t.adler=mt(t.adler,i,r,e):t.state.wrap===2&&(t.adler=H(t.adler,i,r,e)),t.next_in+=r,t.total_in+=r,r)},Hr=(t,i)=>{let e=t.max_chain_length,n=t.strstart,r,a,s=t.prev_length,l=t.nice_match;const f=t.strstart>t.w_size-me?t.strstart-(t.w_size-me):0,o=t.window,c=t.w_mask,_=t.prev,d=t.strstart+xe;let h=o[n+s-1],m=o[n+s];t.prev_length>=t.good_match&&(e>>=2),l>t.lookahead&&(l=t.lookahead);do if(r=i,!(o[r+s]!==m||o[r+s-1]!==h||o[r]!==o[n]||o[++r]!==o[n+1])){n+=2,r++;do;while(o[++n]===o[++r]&&o[++n]===o[++r]&&o[++n]===o[++r]&&o[++n]===o[++r]&&o[++n]===o[++r]&&o[++n]===o[++r]&&o[++n]===o[++r]&&o[++n]===o[++r]&&n<d);if(a=xe-(d-n),n=d-xe,a>s){if(t.match_start=i,s=a,a>=l)break;h=o[n+s-1],m=o[n+s]}}while((i=_[i&c])>f&&--e!==0);return s<=t.lookahead?s:t.lookahead},Ye=t=>{const i=t.w_size;let e,n,r;do{if(n=t.window_size-t.lookahead-t.strstart,t.strstart>=i+(i-me)&&(t.window.set(t.window.subarray(i,i+i-n),0),t.match_start-=i,t.strstart-=i,t.block_start-=i,t.insert>t.strstart&&(t.insert=t.strstart),Ls(t),n+=i),t.strm.avail_in===0)break;if(e=xi(t.strm,t.window,t.strstart+t.lookahead,n),t.lookahead+=e,t.lookahead+t.insert>=N)for(r=t.strstart-t.insert,t.ins_h=t.window[r],t.ins_h=Se(t,t.ins_h,t.window[r+1]);t.insert&&(t.ins_h=Se(t,t.ins_h,t.window[r+N-1]),t.prev[r&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=r,r++,t.insert--,!(t.lookahead+t.insert<N)););}while(t.lookahead<me&&t.strm.avail_in!==0)},Vr=(t,i)=>{let e=t.pending_buf_size-5>t.w_size?t.w_size:t.pending_buf_size-5,n,r,a,s=0,l=t.strm.avail_in;do{if(n=65535,a=t.bi_valid+42>>3,t.strm.avail_out<a||(a=t.strm.avail_out-a,r=t.strstart-t.block_start,n>r+t.strm.avail_in&&(n=r+t.strm.avail_in),n>a&&(n=a),n<e&&(n===0&&i!==ae||i===Te||n!==r+t.strm.avail_in)))break;s=i===ae&&n===r+t.strm.avail_in?1:0,gi(t,0,0,s),t.pending_buf[t.pending-4]=n,t.pending_buf[t.pending-3]=n>>8,t.pending_buf[t.pending-2]=~n,t.pending_buf[t.pending-1]=~n>>8,K(t.strm),r&&(r>n&&(r=n),t.strm.output.set(t.window.subarray(t.block_start,t.block_start+r),t.strm.next_out),t.strm.next_out+=r,t.strm.avail_out-=r,t.strm.total_out+=r,t.block_start+=r,n-=r),n&&(xi(t.strm,t.strm.output,t.strm.next_out,n),t.strm.next_out+=n,t.strm.avail_out-=n,t.strm.total_out+=n)}while(s===0);return l-=t.strm.avail_in,l&&(l>=t.w_size?(t.matches=2,t.window.set(t.strm.input.subarray(t.strm.next_in-t.w_size,t.strm.next_in),0),t.strstart=t.w_size,t.insert=t.strstart):(t.window_size-t.strstart<=l&&(t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,t.insert>t.strstart&&(t.insert=t.strstart)),t.window.set(t.strm.input.subarray(t.strm.next_in-l,t.strm.next_in),t.strstart),t.strstart+=l,t.insert+=l>t.w_size-t.insert?t.w_size-t.insert:l),t.block_start=t.strstart),t.high_water<t.strstart&&(t.high_water=t.strstart),s?tt:i!==Te&&i!==ae&&t.strm.avail_in===0&&t.strstart===t.block_start?et:(a=t.window_size-t.strstart,t.strm.avail_in>a&&t.block_start>=t.w_size&&(t.block_start-=t.w_size,t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,a+=t.w_size,t.insert>t.strstart&&(t.insert=t.strstart)),a>t.strm.avail_in&&(a=t.strm.avail_in),a&&(xi(t.strm,t.window,t.strstart,a),t.strstart+=a,t.insert+=a>t.w_size-t.insert?t.w_size-t.insert:a),t.high_water<t.strstart&&(t.high_water=t.strstart),a=t.bi_valid+42>>3,a=t.pending_buf_size-a>65535?65535:t.pending_buf_size-a,e=a>t.w_size?t.w_size:a,r=t.strstart-t.block_start,(r>=e||(r||i===ae)&&i!==Te&&t.strm.avail_in===0&&r<=a)&&(n=r>a?a:r,s=i===ae&&t.strm.avail_in===0&&n===r?1:0,gi(t,t.block_start,n,s),t.block_start+=n,K(t.strm)),s?Be:G)},ii=(t,i)=>{let e,n;for(;;){if(t.lookahead<me){if(Ye(t),t.lookahead<me&&i===Te)return G;if(t.lookahead===0)break}if(e=0,t.lookahead>=N&&(t.ins_h=Se(t,t.ins_h,t.window[t.strstart+N-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),e!==0&&t.strstart-e<=t.w_size-me&&(t.match_length=Hr(t,e)),t.match_length>=N)if(n=Ee(t,t.strstart-t.match_start,t.match_length-N),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=N){t.match_length--;do t.strstart++,t.ins_h=Se(t,t.ins_h,t.window[t.strstart+N-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart;while(--t.match_length!==0);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=Se(t,t.ins_h,t.window[t.strstart+1]);else n=Ee(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(n&&(Q(t,!1),t.strm.avail_out===0))return G}return t.insert=t.strstart<N-1?t.strstart:N-1,i===ae?(Q(t,!0),t.strm.avail_out===0?Be:tt):t.sym_next&&(Q(t,!1),t.strm.avail_out===0)?G:et},$e=(t,i)=>{let e,n,r;for(;;){if(t.lookahead<me){if(Ye(t),t.lookahead<me&&i===Te)return G;if(t.lookahead===0)break}if(e=0,t.lookahead>=N&&(t.ins_h=Se(t,t.ins_h,t.window[t.strstart+N-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=N-1,e!==0&&t.prev_length<t.max_lazy_match&&t.strstart-e<=t.w_size-me&&(t.match_length=Hr(t,e),t.match_length<=5&&(t.strategy===ws||t.match_length===N&&t.strstart-t.match_start>4096)&&(t.match_length=N-1)),t.prev_length>=N&&t.match_length<=t.prev_length){r=t.strstart+t.lookahead-N,n=Ee(t,t.strstart-1-t.prev_match,t.prev_length-N),t.lookahead-=t.prev_length-1,t.prev_length-=2;do++t.strstart<=r&&(t.ins_h=Se(t,t.ins_h,t.window[t.strstart+N-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart);while(--t.prev_length!==0);if(t.match_available=0,t.match_length=N-1,t.strstart++,n&&(Q(t,!1),t.strm.avail_out===0))return G}else if(t.match_available){if(n=Ee(t,0,t.window[t.strstart-1]),n&&Q(t,!1),t.strstart++,t.lookahead--,t.strm.avail_out===0)return G}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(n=Ee(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<N-1?t.strstart:N-1,i===ae?(Q(t,!0),t.strm.avail_out===0?Be:tt):t.sym_next&&(Q(t,!1),t.strm.avail_out===0)?G:et},Zs=(t,i)=>{let e,n,r,a;const s=t.window;for(;;){if(t.lookahead<=xe){if(Ye(t),t.lookahead<=xe&&i===Te)return G;if(t.lookahead===0)break}if(t.match_length=0,t.lookahead>=N&&t.strstart>0&&(r=t.strstart-1,n=s[r],n===s[++r]&&n===s[++r]&&n===s[++r])){a=t.strstart+xe;do;while(n===s[++r]&&n===s[++r]&&n===s[++r]&&n===s[++r]&&n===s[++r]&&n===s[++r]&&n===s[++r]&&n===s[++r]&&r<a);t.match_length=xe-(a-r),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=N?(e=Ee(t,1,t.match_length-N),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(e=Ee(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),e&&(Q(t,!1),t.strm.avail_out===0))return G}return t.insert=0,i===ae?(Q(t,!0),t.strm.avail_out===0?Be:tt):t.sym_next&&(Q(t,!1),t.strm.avail_out===0)?G:et},Us=(t,i)=>{let e;for(;;){if(t.lookahead===0&&(Ye(t),t.lookahead===0)){if(i===Te)return G;break}if(t.match_length=0,e=Ee(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,e&&(Q(t,!1),t.strm.avail_out===0))return G}return t.insert=0,i===ae?(Q(t,!0),t.strm.avail_out===0?Be:tt):t.sym_next&&(Q(t,!1),t.strm.avail_out===0)?G:et};function de(t,i,e,n,r){this.good_length=t,this.max_lazy=i,this.nice_length=e,this.max_chain=n,this.func=r}const at=[new de(0,0,0,0,Vr),new de(4,4,8,4,ii),new de(4,5,16,8,ii),new de(4,6,32,32,ii),new de(4,4,16,16,$e),new de(8,16,32,32,$e),new de(8,16,128,128,$e),new de(8,32,128,256,$e),new de(32,128,258,1024,$e),new de(32,258,258,4096,$e)],Fs=t=>{t.window_size=2*t.w_size,ke(t.head),t.max_lazy_match=at[t.level].max_lazy,t.good_match=at[t.level].good_length,t.nice_match=at[t.level].nice_length,t.max_chain_length=at[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=N-1,t.match_available=0,t.ins_h=0};function $s(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=Vt,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(Cs*2),this.dyn_dtree=new Uint16Array((2*Ms+1)*2),this.bl_tree=new Uint16Array((2*Is+1)*2),ke(this.dyn_ltree),ke(this.dyn_dtree),ke(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(Rs+1),this.heap=new Uint16Array(2*pi+1),ke(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(2*pi+1),ke(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const kt=t=>{if(!t)return 1;const i=t.state;return!i||i.strm!==t||i.status!==Ve&&i.status!==$i&&i.status!==wi&&i.status!==vi&&i.status!==yi&&i.status!==ki&&i.status!==Re&&i.status!==rt?1:0},Yr=t=>{if(kt(t))return ze(t,_e);t.total_in=t.total_out=0,t.data_type=xs;const i=t.state;return i.pending=0,i.pending_out=0,i.wrap<0&&(i.wrap=-i.wrap),i.status=i.wrap===2?$i:i.wrap?Ve:Re,t.adler=i.wrap===2?0:1,i.last_flush=-2,ds(i),V},Xr=t=>{const i=Yr(t);return i===V&&Fs(t.state),i},Os=(t,i)=>kt(t)||t.state.wrap!==2?_e:(t.state.gzhead=i,V),jr=(t,i,e,n,r,a)=>{if(!t)return _e;let s=1;if(i===ps&&(i=6),n<0?(s=0,n=-n):n>15&&(s=2,n-=16),r<1||r>Es||e!==Vt||n<8||n>15||i<0||i>9||a<0||a>ys||n===8&&s!==1)return ze(t,_e);n===8&&(n=9);const l=new $s;return t.state=l,l.strm=t,l.status=Ve,l.wrap=s,l.gzhead=null,l.w_bits=n,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=r+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+N-1)/N),l.window=new Uint8Array(l.w_size*2),l.head=new Uint16Array(l.hash_size),l.prev=new Uint16Array(l.w_size),l.lit_bufsize=1<<r+6,l.pending_buf_size=l.lit_bufsize*4,l.pending_buf=new Uint8Array(l.pending_buf_size),l.sym_buf=l.lit_bufsize,l.sym_end=(l.lit_bufsize-1)*3,l.level=i,l.strategy=a,l.method=e,Xr(t)},Ps=(t,i)=>jr(t,i,Vt,Ts,Ss,ks),Hs=(t,i)=>{if(kt(t)||i>cn||i<0)return t?ze(t,_e):_e;const e=t.state;if(!t.output||t.avail_in!==0&&!t.input||e.status===rt&&i!==ae)return ze(t,t.avail_out===0?ti:_e);const n=e.last_flush;if(e.last_flush=i,e.pending!==0){if(K(t),t.avail_out===0)return e.last_flush=-1,V}else if(t.avail_in===0&&hn(i)<=hn(n)&&i!==ae)return ze(t,ti);if(e.status===rt&&t.avail_in!==0)return ze(t,ti);if(e.status===Ve&&e.wrap===0&&(e.status=Re),e.status===Ve){let r=Vt+(e.w_bits-8<<4)<<8,a=-1;if(e.strategy>=Dt||e.level<2?a=0:e.level<6?a=1:e.level===6?a=2:a=3,r|=a<<6,e.strstart!==0&&(r|=zs),r+=31-r%31,it(e,r),e.strstart!==0&&(it(e,t.adler>>>16),it(e,t.adler&65535)),t.adler=1,e.status=Re,K(t),e.pending!==0)return e.last_flush=-1,V}if(e.status===$i){if(t.adler=0,Z(e,31),Z(e,139),Z(e,8),e.gzhead)Z(e,(e.gzhead.text?1:0)+(e.gzhead.hcrc?2:0)+(e.gzhead.extra?4:0)+(e.gzhead.name?8:0)+(e.gzhead.comment?16:0)),Z(e,e.gzhead.time&255),Z(e,e.gzhead.time>>8&255),Z(e,e.gzhead.time>>16&255),Z(e,e.gzhead.time>>24&255),Z(e,e.level===9?2:e.strategy>=Dt||e.level<2?4:0),Z(e,e.gzhead.os&255),e.gzhead.extra&&e.gzhead.extra.length&&(Z(e,e.gzhead.extra.length&255),Z(e,e.gzhead.extra.length>>8&255)),e.gzhead.hcrc&&(t.adler=H(t.adler,e.pending_buf,e.pending,0)),e.gzindex=0,e.status=wi;else if(Z(e,0),Z(e,0),Z(e,0),Z(e,0),Z(e,0),Z(e,e.level===9?2:e.strategy>=Dt||e.level<2?4:0),Z(e,Ns),e.status=Re,K(t),e.pending!==0)return e.last_flush=-1,V}if(e.status===wi){if(e.gzhead.extra){let r=e.pending,a=(e.gzhead.extra.length&65535)-e.gzindex;for(;e.pending+a>e.pending_buf_size;){let l=e.pending_buf_size-e.pending;if(e.pending_buf.set(e.gzhead.extra.subarray(e.gzindex,e.gzindex+l),e.pending),e.pending=e.pending_buf_size,e.gzhead.hcrc&&e.pending>r&&(t.adler=H(t.adler,e.pending_buf,e.pending-r,r)),e.gzindex+=l,K(t),e.pending!==0)return e.last_flush=-1,V;r=0,a-=l}let s=new Uint8Array(e.gzhead.extra);e.pending_buf.set(s.subarray(e.gzindex,e.gzindex+a),e.pending),e.pending+=a,e.gzhead.hcrc&&e.pending>r&&(t.adler=H(t.adler,e.pending_buf,e.pending-r,r)),e.gzindex=0}e.status=vi}if(e.status===vi){if(e.gzhead.name){let r=e.pending,a;do{if(e.pending===e.pending_buf_size){if(e.gzhead.hcrc&&e.pending>r&&(t.adler=H(t.adler,e.pending_buf,e.pending-r,r)),K(t),e.pending!==0)return e.last_flush=-1,V;r=0}e.gzindex<e.gzhead.name.length?a=e.gzhead.name.charCodeAt(e.gzindex++)&255:a=0,Z(e,a)}while(a!==0);e.gzhead.hcrc&&e.pending>r&&(t.adler=H(t.adler,e.pending_buf,e.pending-r,r)),e.gzindex=0}e.status=yi}if(e.status===yi){if(e.gzhead.comment){let r=e.pending,a;do{if(e.pending===e.pending_buf_size){if(e.gzhead.hcrc&&e.pending>r&&(t.adler=H(t.adler,e.pending_buf,e.pending-r,r)),K(t),e.pending!==0)return e.last_flush=-1,V;r=0}e.gzindex<e.gzhead.comment.length?a=e.gzhead.comment.charCodeAt(e.gzindex++)&255:a=0,Z(e,a)}while(a!==0);e.gzhead.hcrc&&e.pending>r&&(t.adler=H(t.adler,e.pending_buf,e.pending-r,r))}e.status=ki}if(e.status===ki){if(e.gzhead.hcrc){if(e.pending+2>e.pending_buf_size&&(K(t),e.pending!==0))return e.last_flush=-1,V;Z(e,t.adler&255),Z(e,t.adler>>8&255),t.adler=0}if(e.status=Re,K(t),e.pending!==0)return e.last_flush=-1,V}if(t.avail_in!==0||e.lookahead!==0||i!==Te&&e.status!==rt){let r=e.level===0?Vr(e,i):e.strategy===Dt?Us(e,i):e.strategy===vs?Zs(e,i):at[e.level].func(e,i);if((r===Be||r===tt)&&(e.status=rt),r===G||r===Be)return t.avail_out===0&&(e.last_flush=-1),V;if(r===et&&(i===ms?_s(e):i!==cn&&(gi(e,0,0,!1),i===bs&&(ke(e.head),e.lookahead===0&&(e.strstart=0,e.block_start=0,e.insert=0))),K(t),t.avail_out===0))return e.last_flush=-1,V}return i!==ae?V:e.wrap<=0?fn:(e.wrap===2?(Z(e,t.adler&255),Z(e,t.adler>>8&255),Z(e,t.adler>>16&255),Z(e,t.adler>>24&255),Z(e,t.total_in&255),Z(e,t.total_in>>8&255),Z(e,t.total_in>>16&255),Z(e,t.total_in>>24&255)):(it(e,t.adler>>>16),it(e,t.adler&65535)),K(t),e.wrap>0&&(e.wrap=-e.wrap),e.pending!==0?V:fn)},Vs=t=>{if(kt(t))return _e;const i=t.state.status;return t.state=null,i===Re?ze(t,gs):V},Ys=(t,i)=>{let e=i.length;if(kt(t))return _e;const n=t.state,r=n.wrap;if(r===2||r===1&&n.status!==Ve||n.lookahead)return _e;if(r===1&&(t.adler=mt(t.adler,i,e,0)),n.wrap=0,e>=n.w_size){r===0&&(ke(n.head),n.strstart=0,n.block_start=0,n.insert=0);let f=new Uint8Array(n.w_size);f.set(i.subarray(e-n.w_size,e),0),i=f,e=n.w_size}const a=t.avail_in,s=t.next_in,l=t.input;for(t.avail_in=e,t.next_in=0,t.input=i,Ye(n);n.lookahead>=N;){let f=n.strstart,o=n.lookahead-(N-1);do n.ins_h=Se(n,n.ins_h,n.window[f+N-1]),n.prev[f&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=f,f++;while(--o);n.strstart=f,n.lookahead=N-1,Ye(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=N-1,n.match_available=0,t.next_in=s,t.input=l,t.avail_in=a,n.wrap=r,V};var Xs=Ps,js=jr,Gs=Xr,Ws=Yr,Ks=Os,qs=Hs,Js=Vs,Qs=Ys,el="pako deflate (from Nodeca project)",lt={deflateInit:Xs,deflateInit2:js,deflateReset:Gs,deflateResetKeep:Ws,deflateSetHeader:Ks,deflate:qs,deflateEnd:Js,deflateSetDictionary:Qs,deflateInfo:el};const tl=(t,i)=>Object.prototype.hasOwnProperty.call(t,i);var il=function(t){const i=Array.prototype.slice.call(arguments,1);for(;i.length;){const e=i.shift();if(e){if(typeof e!="object")throw new TypeError(e+"must be non-object");for(const n in e)tl(e,n)&&(t[n]=e[n])}}return t},nl=t=>{let i=0;for(let n=0,r=t.length;n<r;n++)i+=t[n].length;const e=new Uint8Array(i);for(let n=0,r=0,a=t.length;n<a;n++){let s=t[n];e.set(s,r),r+=s.length}return e},Yt={assign:il,flattenChunks:nl};let Gr=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{Gr=!1}const bt=new Uint8Array(256);for(let t=0;t<256;t++)bt[t]=t>=252?6:t>=248?5:t>=240?4:t>=224?3:t>=192?2:1;bt[254]=bt[254]=1;var rl=t=>{if(typeof TextEncoder=="function"&&TextEncoder.prototype.encode)return new TextEncoder().encode(t);let i,e,n,r,a,s=t.length,l=0;for(r=0;r<s;r++)e=t.charCodeAt(r),(e&64512)===55296&&r+1<s&&(n=t.charCodeAt(r+1),(n&64512)===56320&&(e=65536+(e-55296<<10)+(n-56320),r++)),l+=e<128?1:e<2048?2:e<65536?3:4;for(i=new Uint8Array(l),a=0,r=0;a<l;r++)e=t.charCodeAt(r),(e&64512)===55296&&r+1<s&&(n=t.charCodeAt(r+1),(n&64512)===56320&&(e=65536+(e-55296<<10)+(n-56320),r++)),e<128?i[a++]=e:e<2048?(i[a++]=192|e>>>6,i[a++]=128|e&63):e<65536?(i[a++]=224|e>>>12,i[a++]=128|e>>>6&63,i[a++]=128|e&63):(i[a++]=240|e>>>18,i[a++]=128|e>>>12&63,i[a++]=128|e>>>6&63,i[a++]=128|e&63);return i};const al=(t,i)=>{if(i<65534&&t.subarray&&Gr)return String.fromCharCode.apply(null,t.length===i?t:t.subarray(0,i));let e="";for(let n=0;n<i;n++)e+=String.fromCharCode(t[n]);return e};var sl=(t,i)=>{const e=i||t.length;if(typeof TextDecoder=="function"&&TextDecoder.prototype.decode)return new TextDecoder().decode(t.subarray(0,i));let n,r;const a=new Array(e*2);for(r=0,n=0;n<e;){let s=t[n++];if(s<128){a[r++]=s;continue}let l=bt[s];if(l>4){a[r++]=65533,n+=l-1;continue}for(s&=l===2?31:l===3?15:7;l>1&&n<e;)s=s<<6|t[n++]&63,l--;if(l>1){a[r++]=65533;continue}s<65536?a[r++]=s:(s-=65536,a[r++]=55296|s>>10&1023,a[r++]=56320|s&1023)}return al(a,r)},ll=(t,i)=>{i=i||t.length,i>t.length&&(i=t.length);let e=i-1;for(;e>=0&&(t[e]&192)===128;)e--;return e<0||e===0?i:e+bt[t[e]]>i?e:i},gt={string2buf:rl,buf2string:sl,utf8border:ll};function ol(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}var Wr=ol;const Kr=Object.prototype.toString,{Z_NO_FLUSH:cl,Z_SYNC_FLUSH:fl,Z_FULL_FLUSH:hl,Z_FINISH:dl,Z_OK:$t,Z_STREAM_END:ul,Z_DEFAULT_COMPRESSION:_l,Z_DEFAULT_STRATEGY:ml,Z_DEFLATED:bl}=Ue;function xt(t){this.options=Yt.assign({level:_l,method:bl,chunkSize:16384,windowBits:15,memLevel:8,strategy:ml},t||{});let i=this.options;i.raw&&i.windowBits>0?i.windowBits=-i.windowBits:i.gzip&&i.windowBits>0&&i.windowBits<16&&(i.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Wr,this.strm.avail_out=0;let e=lt.deflateInit2(this.strm,i.level,i.method,i.windowBits,i.memLevel,i.strategy);if(e!==$t)throw new Error(Le[e]);if(i.header&&lt.deflateSetHeader(this.strm,i.header),i.dictionary){let n;if(typeof i.dictionary=="string"?n=gt.string2buf(i.dictionary):Kr.call(i.dictionary)==="[object ArrayBuffer]"?n=new Uint8Array(i.dictionary):n=i.dictionary,e=lt.deflateSetDictionary(this.strm,n),e!==$t)throw new Error(Le[e]);this._dict_set=!0}}xt.prototype.push=function(t,i){const e=this.strm,n=this.options.chunkSize;let r,a;if(this.ended)return!1;for(i===~~i?a=i:a=i===!0?dl:cl,typeof t=="string"?e.input=gt.string2buf(t):Kr.call(t)==="[object ArrayBuffer]"?e.input=new Uint8Array(t):e.input=t,e.next_in=0,e.avail_in=e.input.length;;){if(e.avail_out===0&&(e.output=new Uint8Array(n),e.next_out=0,e.avail_out=n),(a===fl||a===hl)&&e.avail_out<=6){this.onData(e.output.subarray(0,e.next_out)),e.avail_out=0;continue}if(r=lt.deflate(e,a),r===ul)return e.next_out>0&&this.onData(e.output.subarray(0,e.next_out)),r=lt.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===$t;if(e.avail_out===0){this.onData(e.output);continue}if(a>0&&e.next_out>0){this.onData(e.output.subarray(0,e.next_out)),e.avail_out=0;continue}if(e.avail_in===0)break}return!0};xt.prototype.onData=function(t){this.chunks.push(t)};xt.prototype.onEnd=function(t){t===$t&&(this.result=Yt.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};function Oi(t,i){const e=new xt(i);if(e.push(t,!0),e.err)throw e.msg||Le[e.err];return e.result}function gl(t,i){return i=i||{},i.raw=!0,Oi(t,i)}function pl(t,i){return i=i||{},i.gzip=!0,Oi(t,i)}var wl=xt,vl=Oi,yl=gl,kl=pl,xl=Ue,El={Deflate:wl,deflate:vl,deflateRaw:yl,gzip:kl,constants:xl};const Mt=16209,Tl=16191;var Sl=function(i,e){let n,r,a,s,l,f,o,c,_,d,h,m,g,p,b,v,T,w,y,A,x,B,M,S;const D=i.state;n=i.next_in,M=i.input,r=n+(i.avail_in-5),a=i.next_out,S=i.output,s=a-(e-i.avail_out),l=a+(i.avail_out-257),f=D.dmax,o=D.wsize,c=D.whave,_=D.wnext,d=D.window,h=D.hold,m=D.bits,g=D.lencode,p=D.distcode,b=(1<<D.lenbits)-1,v=(1<<D.distbits)-1;e:do{m<15&&(h+=M[n++]<<m,m+=8,h+=M[n++]<<m,m+=8),T=g[h&b];t:for(;;){if(w=T>>>24,h>>>=w,m-=w,w=T>>>16&255,w===0)S[a++]=T&65535;else if(w&16){y=T&65535,w&=15,w&&(m<w&&(h+=M[n++]<<m,m+=8),y+=h&(1<<w)-1,h>>>=w,m-=w),m<15&&(h+=M[n++]<<m,m+=8,h+=M[n++]<<m,m+=8),T=p[h&v];i:for(;;){if(w=T>>>24,h>>>=w,m-=w,w=T>>>16&255,w&16){if(A=T&65535,w&=15,m<w&&(h+=M[n++]<<m,m+=8,m<w&&(h+=M[n++]<<m,m+=8)),A+=h&(1<<w)-1,A>f){i.msg="invalid distance too far back",D.mode=Mt;break e}if(h>>>=w,m-=w,w=a-s,A>w){if(w=A-w,w>c&&D.sane){i.msg="invalid distance too far back",D.mode=Mt;break e}if(x=0,B=d,_===0){if(x+=o-w,w<y){y-=w;do S[a++]=d[x++];while(--w);x=a-A,B=S}}else if(_<w){if(x+=o+_-w,w-=_,w<y){y-=w;do S[a++]=d[x++];while(--w);if(x=0,_<y){w=_,y-=w;do S[a++]=d[x++];while(--w);x=a-A,B=S}}}else if(x+=_-w,w<y){y-=w;do S[a++]=d[x++];while(--w);x=a-A,B=S}for(;y>2;)S[a++]=B[x++],S[a++]=B[x++],S[a++]=B[x++],y-=3;y&&(S[a++]=B[x++],y>1&&(S[a++]=B[x++]))}else{x=a-A;do S[a++]=S[x++],S[a++]=S[x++],S[a++]=S[x++],y-=3;while(y>2);y&&(S[a++]=S[x++],y>1&&(S[a++]=S[x++]))}}else if(w&64){i.msg="invalid distance code",D.mode=Mt;break e}else{T=p[(T&65535)+(h&(1<<w)-1)];continue i}break}}else if(w&64)if(w&32){D.mode=Tl;break e}else{i.msg="invalid literal/length code",D.mode=Mt;break e}else{T=g[(T&65535)+(h&(1<<w)-1)];continue t}break}}while(n<r&&a<l);y=m>>3,n-=y,m-=y<<3,h&=(1<<m)-1,i.next_in=n,i.next_out=a,i.avail_in=n<r?5+(r-n):5-(n-r),i.avail_out=a<l?257+(l-a):257-(a-l),D.hold=h,D.bits=m};const Oe=15,dn=852,un=592,_n=0,ni=1,mn=2,Al=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),Dl=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),Ml=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),Il=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),Cl=(t,i,e,n,r,a,s,l)=>{const f=l.bits;let o=0,c=0,_=0,d=0,h=0,m=0,g=0,p=0,b=0,v=0,T,w,y,A,x,B=null,M;const S=new Uint16Array(Oe+1),D=new Uint16Array(Oe+1);let k=null,j,Tt,St;for(o=0;o<=Oe;o++)S[o]=0;for(c=0;c<n;c++)S[i[e+c]]++;for(h=f,d=Oe;d>=1&&S[d]===0;d--);if(h>d&&(h=d),d===0)return r[a++]=1<<24|64<<16|0,r[a++]=1<<24|64<<16|0,l.bits=1,0;for(_=1;_<d&&S[_]===0;_++);for(h<_&&(h=_),p=1,o=1;o<=Oe;o++)if(p<<=1,p-=S[o],p<0)return-1;if(p>0&&(t===_n||d!==1))return-1;for(D[1]=0,o=1;o<Oe;o++)D[o+1]=D[o]+S[o];for(c=0;c<n;c++)i[e+c]!==0&&(s[D[i[e+c]]++]=c);if(t===_n?(B=k=s,M=20):t===ni?(B=Al,k=Dl,M=257):(B=Ml,k=Il,M=0),v=0,c=0,o=_,x=a,m=h,g=0,y=-1,b=1<<h,A=b-1,t===ni&&b>dn||t===mn&&b>un)return 1;for(;;){j=o-g,s[c]+1<M?(Tt=0,St=s[c]):s[c]>=M?(Tt=k[s[c]-M],St=B[s[c]-M]):(Tt=96,St=0),T=1<<o-g,w=1<<m,_=w;do w-=T,r[x+(v>>g)+w]=j<<24|Tt<<16|St|0;while(w!==0);for(T=1<<o-1;v&T;)T>>=1;if(T!==0?(v&=T-1,v+=T):v=0,c++,--S[o]===0){if(o===d)break;o=i[e+s[c]]}if(o>h&&(v&A)!==y){for(g===0&&(g=h),x+=_,m=o-g,p=1<<m;m+g<d&&(p-=S[m+g],!(p<=0));)m++,p<<=1;if(b+=1<<m,t===ni&&b>dn||t===mn&&b>un)return 1;y=v&A,r[y]=h<<24|m<<16|x-a|0}}return v!==0&&(r[x+v]=o-g<<24|64<<16|0),l.bits=h,0};var ot=Cl;const Rl=0,qr=1,Jr=2,{Z_FINISH:bn,Z_BLOCK:zl,Z_TREES:It,Z_OK:Ze,Z_STREAM_END:Nl,Z_NEED_DICT:Ll,Z_STREAM_ERROR:oe,Z_DATA_ERROR:Qr,Z_MEM_ERROR:ea,Z_BUF_ERROR:Bl,Z_DEFLATED:gn}=Ue,Xt=16180,pn=16181,wn=16182,vn=16183,yn=16184,kn=16185,xn=16186,En=16187,Tn=16188,Sn=16189,Ot=16190,we=16191,ri=16192,An=16193,ai=16194,Dn=16195,Mn=16196,In=16197,Cn=16198,Ct=16199,Rt=16200,Rn=16201,zn=16202,Nn=16203,Ln=16204,Bn=16205,si=16206,Zn=16207,Un=16208,P=16209,ta=16210,ia=16211,Zl=852,Ul=592,Fl=15,$l=Fl,Fn=t=>(t>>>24&255)+(t>>>8&65280)+((t&65280)<<8)+((t&255)<<24);function Ol(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Fe=t=>{if(!t)return 1;const i=t.state;return!i||i.strm!==t||i.mode<Xt||i.mode>ia?1:0},na=t=>{if(Fe(t))return oe;const i=t.state;return t.total_in=t.total_out=i.total=0,t.msg="",i.wrap&&(t.adler=i.wrap&1),i.mode=Xt,i.last=0,i.havedict=0,i.flags=-1,i.dmax=32768,i.head=null,i.hold=0,i.bits=0,i.lencode=i.lendyn=new Int32Array(Zl),i.distcode=i.distdyn=new Int32Array(Ul),i.sane=1,i.back=-1,Ze},ra=t=>{if(Fe(t))return oe;const i=t.state;return i.wsize=0,i.whave=0,i.wnext=0,na(t)},aa=(t,i)=>{let e;if(Fe(t))return oe;const n=t.state;return i<0?(e=0,i=-i):(e=(i>>4)+5,i<48&&(i&=15)),i&&(i<8||i>15)?oe:(n.window!==null&&n.wbits!==i&&(n.window=null),n.wrap=e,n.wbits=i,ra(t))},sa=(t,i)=>{if(!t)return oe;const e=new Ol;t.state=e,e.strm=t,e.window=null,e.mode=Xt;const n=aa(t,i);return n!==Ze&&(t.state=null),n},Pl=t=>sa(t,$l);let $n=!0,li,oi;const Hl=t=>{if($n){li=new Int32Array(512),oi=new Int32Array(32);let i=0;for(;i<144;)t.lens[i++]=8;for(;i<256;)t.lens[i++]=9;for(;i<280;)t.lens[i++]=7;for(;i<288;)t.lens[i++]=8;for(ot(qr,t.lens,0,288,li,0,t.work,{bits:9}),i=0;i<32;)t.lens[i++]=5;ot(Jr,t.lens,0,32,oi,0,t.work,{bits:5}),$n=!1}t.lencode=li,t.lenbits=9,t.distcode=oi,t.distbits=5},la=(t,i,e,n)=>{let r;const a=t.state;return a.window===null&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new Uint8Array(a.wsize)),n>=a.wsize?(a.window.set(i.subarray(e-a.wsize,e),0),a.wnext=0,a.whave=a.wsize):(r=a.wsize-a.wnext,r>n&&(r=n),a.window.set(i.subarray(e-n,e-n+r),a.wnext),n-=r,n?(a.window.set(i.subarray(e-n,e),0),a.wnext=n,a.whave=a.wsize):(a.wnext+=r,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=r))),0},Vl=(t,i)=>{let e,n,r,a,s,l,f,o,c,_,d,h,m,g,p=0,b,v,T,w,y,A,x,B;const M=new Uint8Array(4);let S,D;const k=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(Fe(t)||!t.output||!t.input&&t.avail_in!==0)return oe;e=t.state,e.mode===we&&(e.mode=ri),s=t.next_out,r=t.output,f=t.avail_out,a=t.next_in,n=t.input,l=t.avail_in,o=e.hold,c=e.bits,_=l,d=f,B=Ze;e:for(;;)switch(e.mode){case Xt:if(e.wrap===0){e.mode=ri;break}for(;c<16;){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}if(e.wrap&2&&o===35615){e.wbits===0&&(e.wbits=15),e.check=0,M[0]=o&255,M[1]=o>>>8&255,e.check=H(e.check,M,2,0),o=0,c=0,e.mode=pn;break}if(e.head&&(e.head.done=!1),!(e.wrap&1)||(((o&255)<<8)+(o>>8))%31){t.msg="incorrect header check",e.mode=P;break}if((o&15)!==gn){t.msg="unknown compression method",e.mode=P;break}if(o>>>=4,c-=4,x=(o&15)+8,e.wbits===0&&(e.wbits=x),x>15||x>e.wbits){t.msg="invalid window size",e.mode=P;break}e.dmax=1<<e.wbits,e.flags=0,t.adler=e.check=1,e.mode=o&512?Sn:we,o=0,c=0;break;case pn:for(;c<16;){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}if(e.flags=o,(e.flags&255)!==gn){t.msg="unknown compression method",e.mode=P;break}if(e.flags&57344){t.msg="unknown header flags set",e.mode=P;break}e.head&&(e.head.text=o>>8&1),e.flags&512&&e.wrap&4&&(M[0]=o&255,M[1]=o>>>8&255,e.check=H(e.check,M,2,0)),o=0,c=0,e.mode=wn;case wn:for(;c<32;){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}e.head&&(e.head.time=o),e.flags&512&&e.wrap&4&&(M[0]=o&255,M[1]=o>>>8&255,M[2]=o>>>16&255,M[3]=o>>>24&255,e.check=H(e.check,M,4,0)),o=0,c=0,e.mode=vn;case vn:for(;c<16;){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}e.head&&(e.head.xflags=o&255,e.head.os=o>>8),e.flags&512&&e.wrap&4&&(M[0]=o&255,M[1]=o>>>8&255,e.check=H(e.check,M,2,0)),o=0,c=0,e.mode=yn;case yn:if(e.flags&1024){for(;c<16;){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}e.length=o,e.head&&(e.head.extra_len=o),e.flags&512&&e.wrap&4&&(M[0]=o&255,M[1]=o>>>8&255,e.check=H(e.check,M,2,0)),o=0,c=0}else e.head&&(e.head.extra=null);e.mode=kn;case kn:if(e.flags&1024&&(h=e.length,h>l&&(h=l),h&&(e.head&&(x=e.head.extra_len-e.length,e.head.extra||(e.head.extra=new Uint8Array(e.head.extra_len)),e.head.extra.set(n.subarray(a,a+h),x)),e.flags&512&&e.wrap&4&&(e.check=H(e.check,n,h,a)),l-=h,a+=h,e.length-=h),e.length))break e;e.length=0,e.mode=xn;case xn:if(e.flags&2048){if(l===0)break e;h=0;do x=n[a+h++],e.head&&x&&e.length<65536&&(e.head.name+=String.fromCharCode(x));while(x&&h<l);if(e.flags&512&&e.wrap&4&&(e.check=H(e.check,n,h,a)),l-=h,a+=h,x)break e}else e.head&&(e.head.name=null);e.length=0,e.mode=En;case En:if(e.flags&4096){if(l===0)break e;h=0;do x=n[a+h++],e.head&&x&&e.length<65536&&(e.head.comment+=String.fromCharCode(x));while(x&&h<l);if(e.flags&512&&e.wrap&4&&(e.check=H(e.check,n,h,a)),l-=h,a+=h,x)break e}else e.head&&(e.head.comment=null);e.mode=Tn;case Tn:if(e.flags&512){for(;c<16;){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}if(e.wrap&4&&o!==(e.check&65535)){t.msg="header crc mismatch",e.mode=P;break}o=0,c=0}e.head&&(e.head.hcrc=e.flags>>9&1,e.head.done=!0),t.adler=e.check=0,e.mode=we;break;case Sn:for(;c<32;){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}t.adler=e.check=Fn(o),o=0,c=0,e.mode=Ot;case Ot:if(e.havedict===0)return t.next_out=s,t.avail_out=f,t.next_in=a,t.avail_in=l,e.hold=o,e.bits=c,Ll;t.adler=e.check=1,e.mode=we;case we:if(i===zl||i===It)break e;case ri:if(e.last){o>>>=c&7,c-=c&7,e.mode=si;break}for(;c<3;){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}switch(e.last=o&1,o>>>=1,c-=1,o&3){case 0:e.mode=An;break;case 1:if(Hl(e),e.mode=Ct,i===It){o>>>=2,c-=2;break e}break;case 2:e.mode=Mn;break;case 3:t.msg="invalid block type",e.mode=P}o>>>=2,c-=2;break;case An:for(o>>>=c&7,c-=c&7;c<32;){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}if((o&65535)!==(o>>>16^65535)){t.msg="invalid stored block lengths",e.mode=P;break}if(e.length=o&65535,o=0,c=0,e.mode=ai,i===It)break e;case ai:e.mode=Dn;case Dn:if(h=e.length,h){if(h>l&&(h=l),h>f&&(h=f),h===0)break e;r.set(n.subarray(a,a+h),s),l-=h,a+=h,f-=h,s+=h,e.length-=h;break}e.mode=we;break;case Mn:for(;c<14;){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}if(e.nlen=(o&31)+257,o>>>=5,c-=5,e.ndist=(o&31)+1,o>>>=5,c-=5,e.ncode=(o&15)+4,o>>>=4,c-=4,e.nlen>286||e.ndist>30){t.msg="too many length or distance symbols",e.mode=P;break}e.have=0,e.mode=In;case In:for(;e.have<e.ncode;){for(;c<3;){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}e.lens[k[e.have++]]=o&7,o>>>=3,c-=3}for(;e.have<19;)e.lens[k[e.have++]]=0;if(e.lencode=e.lendyn,e.lenbits=7,S={bits:e.lenbits},B=ot(Rl,e.lens,0,19,e.lencode,0,e.work,S),e.lenbits=S.bits,B){t.msg="invalid code lengths set",e.mode=P;break}e.have=0,e.mode=Cn;case Cn:for(;e.have<e.nlen+e.ndist;){for(;p=e.lencode[o&(1<<e.lenbits)-1],b=p>>>24,v=p>>>16&255,T=p&65535,!(b<=c);){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}if(T<16)o>>>=b,c-=b,e.lens[e.have++]=T;else{if(T===16){for(D=b+2;c<D;){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}if(o>>>=b,c-=b,e.have===0){t.msg="invalid bit length repeat",e.mode=P;break}x=e.lens[e.have-1],h=3+(o&3),o>>>=2,c-=2}else if(T===17){for(D=b+3;c<D;){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}o>>>=b,c-=b,x=0,h=3+(o&7),o>>>=3,c-=3}else{for(D=b+7;c<D;){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}o>>>=b,c-=b,x=0,h=11+(o&127),o>>>=7,c-=7}if(e.have+h>e.nlen+e.ndist){t.msg="invalid bit length repeat",e.mode=P;break}for(;h--;)e.lens[e.have++]=x}}if(e.mode===P)break;if(e.lens[256]===0){t.msg="invalid code -- missing end-of-block",e.mode=P;break}if(e.lenbits=9,S={bits:e.lenbits},B=ot(qr,e.lens,0,e.nlen,e.lencode,0,e.work,S),e.lenbits=S.bits,B){t.msg="invalid literal/lengths set",e.mode=P;break}if(e.distbits=6,e.distcode=e.distdyn,S={bits:e.distbits},B=ot(Jr,e.lens,e.nlen,e.ndist,e.distcode,0,e.work,S),e.distbits=S.bits,B){t.msg="invalid distances set",e.mode=P;break}if(e.mode=Ct,i===It)break e;case Ct:e.mode=Rt;case Rt:if(l>=6&&f>=258){t.next_out=s,t.avail_out=f,t.next_in=a,t.avail_in=l,e.hold=o,e.bits=c,Sl(t,d),s=t.next_out,r=t.output,f=t.avail_out,a=t.next_in,n=t.input,l=t.avail_in,o=e.hold,c=e.bits,e.mode===we&&(e.back=-1);break}for(e.back=0;p=e.lencode[o&(1<<e.lenbits)-1],b=p>>>24,v=p>>>16&255,T=p&65535,!(b<=c);){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}if(v&&!(v&240)){for(w=b,y=v,A=T;p=e.lencode[A+((o&(1<<w+y)-1)>>w)],b=p>>>24,v=p>>>16&255,T=p&65535,!(w+b<=c);){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}o>>>=w,c-=w,e.back+=w}if(o>>>=b,c-=b,e.back+=b,e.length=T,v===0){e.mode=Bn;break}if(v&32){e.back=-1,e.mode=we;break}if(v&64){t.msg="invalid literal/length code",e.mode=P;break}e.extra=v&15,e.mode=Rn;case Rn:if(e.extra){for(D=e.extra;c<D;){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}e.length+=o&(1<<e.extra)-1,o>>>=e.extra,c-=e.extra,e.back+=e.extra}e.was=e.length,e.mode=zn;case zn:for(;p=e.distcode[o&(1<<e.distbits)-1],b=p>>>24,v=p>>>16&255,T=p&65535,!(b<=c);){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}if(!(v&240)){for(w=b,y=v,A=T;p=e.distcode[A+((o&(1<<w+y)-1)>>w)],b=p>>>24,v=p>>>16&255,T=p&65535,!(w+b<=c);){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}o>>>=w,c-=w,e.back+=w}if(o>>>=b,c-=b,e.back+=b,v&64){t.msg="invalid distance code",e.mode=P;break}e.offset=T,e.extra=v&15,e.mode=Nn;case Nn:if(e.extra){for(D=e.extra;c<D;){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}e.offset+=o&(1<<e.extra)-1,o>>>=e.extra,c-=e.extra,e.back+=e.extra}if(e.offset>e.dmax){t.msg="invalid distance too far back",e.mode=P;break}e.mode=Ln;case Ln:if(f===0)break e;if(h=d-f,e.offset>h){if(h=e.offset-h,h>e.whave&&e.sane){t.msg="invalid distance too far back",e.mode=P;break}h>e.wnext?(h-=e.wnext,m=e.wsize-h):m=e.wnext-h,h>e.length&&(h=e.length),g=e.window}else g=r,m=s-e.offset,h=e.length;h>f&&(h=f),f-=h,e.length-=h;do r[s++]=g[m++];while(--h);e.length===0&&(e.mode=Rt);break;case Bn:if(f===0)break e;r[s++]=e.length,f--,e.mode=Rt;break;case si:if(e.wrap){for(;c<32;){if(l===0)break e;l--,o|=n[a++]<<c,c+=8}if(d-=f,t.total_out+=d,e.total+=d,e.wrap&4&&d&&(t.adler=e.check=e.flags?H(e.check,r,d,s-d):mt(e.check,r,d,s-d)),d=f,e.wrap&4&&(e.flags?o:Fn(o))!==e.check){t.msg="incorrect data check",e.mode=P;break}o=0,c=0}e.mode=Zn;case Zn:if(e.wrap&&e.flags){for(;c<32;){if(l===0)break e;l--,o+=n[a++]<<c,c+=8}if(e.wrap&4&&o!==(e.total&4294967295)){t.msg="incorrect length check",e.mode=P;break}o=0,c=0}e.mode=Un;case Un:B=Nl;break e;case P:B=Qr;break e;case ta:return ea;case ia:default:return oe}return t.next_out=s,t.avail_out=f,t.next_in=a,t.avail_in=l,e.hold=o,e.bits=c,(e.wsize||d!==t.avail_out&&e.mode<P&&(e.mode<si||i!==bn))&&la(t,t.output,t.next_out,d-t.avail_out),_-=t.avail_in,d-=t.avail_out,t.total_in+=_,t.total_out+=d,e.total+=d,e.wrap&4&&d&&(t.adler=e.check=e.flags?H(e.check,r,d,t.next_out-d):mt(e.check,r,d,t.next_out-d)),t.data_type=e.bits+(e.last?64:0)+(e.mode===we?128:0)+(e.mode===Ct||e.mode===ai?256:0),(_===0&&d===0||i===bn)&&B===Ze&&(B=Bl),B},Yl=t=>{if(Fe(t))return oe;let i=t.state;return i.window&&(i.window=null),t.state=null,Ze},Xl=(t,i)=>{if(Fe(t))return oe;const e=t.state;return e.wrap&2?(e.head=i,i.done=!1,Ze):oe},jl=(t,i)=>{const e=i.length;let n,r,a;return Fe(t)||(n=t.state,n.wrap!==0&&n.mode!==Ot)?oe:n.mode===Ot&&(r=1,r=mt(r,i,e,0),r!==n.check)?Qr:(a=la(t,i,e,e),a?(n.mode=ta,ea):(n.havedict=1,Ze))};var Gl=ra,Wl=aa,Kl=na,ql=Pl,Jl=sa,Ql=Vl,eo=Yl,to=Xl,io=jl,no="pako inflate (from Nodeca project)",ye={inflateReset:Gl,inflateReset2:Wl,inflateResetKeep:Kl,inflateInit:ql,inflateInit2:Jl,inflate:Ql,inflateEnd:eo,inflateGetHeader:to,inflateSetDictionary:io,inflateInfo:no};function ro(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var ao=ro;const oa=Object.prototype.toString,{Z_NO_FLUSH:so,Z_FINISH:lo,Z_OK:pt,Z_STREAM_END:ci,Z_NEED_DICT:fi,Z_STREAM_ERROR:oo,Z_DATA_ERROR:On,Z_MEM_ERROR:co}=Ue;function Et(t){this.options=Yt.assign({chunkSize:1024*64,windowBits:15,to:""},t||{});const i=this.options;i.raw&&i.windowBits>=0&&i.windowBits<16&&(i.windowBits=-i.windowBits,i.windowBits===0&&(i.windowBits=-15)),i.windowBits>=0&&i.windowBits<16&&!(t&&t.windowBits)&&(i.windowBits+=32),i.windowBits>15&&i.windowBits<48&&(i.windowBits&15||(i.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Wr,this.strm.avail_out=0;let e=ye.inflateInit2(this.strm,i.windowBits);if(e!==pt)throw new Error(Le[e]);if(this.header=new ao,ye.inflateGetHeader(this.strm,this.header),i.dictionary&&(typeof i.dictionary=="string"?i.dictionary=gt.string2buf(i.dictionary):oa.call(i.dictionary)==="[object ArrayBuffer]"&&(i.dictionary=new Uint8Array(i.dictionary)),i.raw&&(e=ye.inflateSetDictionary(this.strm,i.dictionary),e!==pt)))throw new Error(Le[e])}Et.prototype.push=function(t,i){const e=this.strm,n=this.options.chunkSize,r=this.options.dictionary;let a,s,l;if(this.ended)return!1;for(i===~~i?s=i:s=i===!0?lo:so,oa.call(t)==="[object ArrayBuffer]"?e.input=new Uint8Array(t):e.input=t,e.next_in=0,e.avail_in=e.input.length;;){for(e.avail_out===0&&(e.output=new Uint8Array(n),e.next_out=0,e.avail_out=n),a=ye.inflate(e,s),a===fi&&r&&(a=ye.inflateSetDictionary(e,r),a===pt?a=ye.inflate(e,s):a===On&&(a=fi));e.avail_in>0&&a===ci&&e.state.wrap>0&&t[e.next_in]!==0;)ye.inflateReset(e),a=ye.inflate(e,s);switch(a){case oo:case On:case fi:case co:return this.onEnd(a),this.ended=!0,!1}if(l=e.avail_out,e.next_out&&(e.avail_out===0||a===ci))if(this.options.to==="string"){let f=gt.utf8border(e.output,e.next_out),o=e.next_out-f,c=gt.buf2string(e.output,f);e.next_out=o,e.avail_out=n-o,o&&e.output.set(e.output.subarray(f,f+o),0),this.onData(c)}else this.onData(e.output.length===e.next_out?e.output:e.output.subarray(0,e.next_out));if(!(a===pt&&l===0)){if(a===ci)return a=ye.inflateEnd(this.strm),this.onEnd(a),this.ended=!0,!0;if(e.avail_in===0)break}}return!0};Et.prototype.onData=function(t){this.chunks.push(t)};Et.prototype.onEnd=function(t){t===pt&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=Yt.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};function Pi(t,i){const e=new Et(i);if(e.push(t),e.err)throw e.msg||Le[e.err];return e.result}function fo(t,i){return i=i||{},i.raw=!0,Pi(t,i)}var ho=Et,uo=Pi,_o=fo,mo=Pi,bo=Ue,go={Inflate:ho,inflate:uo,inflateRaw:_o,ungzip:mo,constants:bo};const{Deflate:po,deflate:wo,deflateRaw:vo,gzip:yo}=El,{Inflate:ko,inflate:xo,inflateRaw:Eo,ungzip:To}=go;var So=po,Ao=wo,Do=vo,Mo=yo,Io=ko,Co=xo,Ro=Eo,zo=To,No=Ue,Pn={Deflate:So,deflate:Ao,deflateRaw:Do,gzip:Mo,Inflate:Io,inflate:Co,inflateRaw:Ro,ungzip:zo,constants:No};function ge(t){let i=0;if(t.length==0)return i;for(let e=0;e<t.length;e++){const n=t.charCodeAt(e);i=(i<<5)-i+n,i|=0}return i>>>0}class ca{constructor(i=4096){u(this,"buffer");u(this,"pointer",0);this.buffer=new ArrayBuffer(i)}update(i=512){if(this.buffer.byteLength<this.pointer+i){const e=new Uint8Array(this.buffer.byteLength+i+1024);e.set(new Uint8Array(this.buffer),0),this.buffer=e.buffer}}final(){return this.buffer.slice(0,this.pointer)}putByte(i){this.update(1),new DataView(this.buffer).setUint8(this.pointer++,i)}putBuffer(i){this.update(i.byteLength),new Uint8Array(this.buffer).set(new Uint8Array(i),this.pointer),this.pointer+=i.byteLength}}class fa{constructor(i){u(this,"buffer");u(this,"pointer",0);this.buffer=i}getByte(){return new DataView(this.buffer).getUint8(this.pointer++)}getBuffer(i){const e=this.buffer.slice(this.pointer,this.pointer+i);return this.pointer+=i,e}}class pe{toBinary(i){const e=new ca;return e.putBuffer(new Uint32Array([this.magic]).buffer),this.encode(e,i),e.final()}fromBinary(i){const e=new fa(i);if(new Uint32Array(e.getBuffer(4))[0]!=this.magic)throw new Error("Parser magic value does not match.");return this.decode(e)}toBase64(i){return qi.fromUint8Array(new Uint8Array(this.toBinary(i)))}fromBase64(i){return this.fromBinary(qi.toUint8Array(i).buffer)}}class Lo extends pe{constructor(e){super();u(this,"magic");u(this,"signed");this.signed=e,this.magic=ge(`BigIntParser:${this.signed?"Signed":"Unsigned"}`)}encode(e,n){const r=n<0n;if(r){if(!this.signed)throw new Error("Cannot encode negative bigint when parser is not signed.");n=-n}for(this.signed?(e.putByte(Number((n&0b00111111n)<<2n)|(r?2:0)|(n>0b00111111n?1:0)),n>>=6n):(e.putByte(Number((n&0b01111111n)<<1n)|(n>0b01111111n?1:0)),n>>=7n);n>0n;)e.putByte(Number((n&0b01111111n)<<1n)|(n>0b01111111n?1:0)),n>>=7n}decode(e){let n=e.getByte(),r=this.signed?BigInt(n&252)>>2n:BigInt(n&254)>>1n;const a=this.signed?!!(n&2):!1;let s=this.signed?6:7;for(;n&1;)n=e.getByte(),r|=BigInt((n&254)>>1)<<BigInt(s),s+=7;return a?-r:r}}function De(t=!0){return new Lo(t)}class Bo extends pe{constructor(){super(...arguments);u(this,"magic",ge("BinaryParser"))}encode(e,n){De(!1).encode(e,BigInt(n.byteLength)),e.putBuffer(n)}decode(e){const n=Number(De(!1).decode(e));return e.getBuffer(n)}}function wt(){return new Bo}class Zo extends pe{constructor(e){super();u(this,"magic");u(this,"type");this.type=e,this.magic=ge(`NumberParser:${this.type}`)}encode(e,n){e.update(8);const r=new DataView(e.buffer);switch(this.type){case"u8":r.setUint8(e.pointer,n),e.pointer+=1;break;case"u16":r.setUint16(e.pointer,n,!0),e.pointer+=2;break;case"u32":r.setUint32(e.pointer,n,!0),e.pointer+=4;break;case"u64":r.setBigUint64(e.pointer,n,!0),e.pointer+=8;break;case"i8":r.setInt8(e.pointer,n),e.pointer+=1;break;case"i16":r.setInt16(e.pointer,n,!0),e.pointer+=2;break;case"i32":r.setInt32(e.pointer,n,!0),e.pointer+=4;break;case"i64":r.setBigInt64(e.pointer,n,!0),e.pointer+=8;break;case"f32":r.setFloat32(e.pointer,n,!0),e.pointer+=4;break;case"f64":r.setFloat64(e.pointer,n,!0),e.pointer+=8;break;default:throw new Error("NumParser invalid type.")}}decode(e){const n=new DataView(e.buffer);let r;switch(this.type){case"u8":r=n.getUint8(e.pointer),e.pointer+=1;break;case"u16":r=n.getUint16(e.pointer,!0),e.pointer+=2;break;case"u32":r=n.getUint32(e.pointer,!0),e.pointer+=4;break;case"u64":r=n.getBigUint64(e.pointer,!0),e.pointer+=8;break;case"i8":r=n.getInt8(e.pointer),e.pointer+=1;break;case"i16":r=n.getInt16(e.pointer,!0),e.pointer+=2;break;case"i32":r=n.getInt32(e.pointer,!0),e.pointer+=4;break;case"i64":r=n.getBigInt64(e.pointer,!0),e.pointer+=8;break;case"f32":r=n.getFloat32(e.pointer,!0),e.pointer+=4;break;case"f64":r=n.getFloat64(e.pointer,!0),e.pointer+=8;break;default:throw new Error("NumParser invalid type.")}return r}}function Pt(t){return new Zo(t)}class Uo extends pe{constructor(){super(...arguments);u(this,"magic",ge("StringParser"))}encode(e,n){wt().encode(e,new TextEncoder().encode(n))}decode(e){return new TextDecoder("utf-8").decode(wt().decode(e))}}function Fo(){return new Uo}class $o extends pe{constructor(e){super();u(this,"magic");u(this,"objType");u(this,"keys");this.objType=e,this.keys=Object.keys(this.objType).toSorted(),this.magic=ge(`StringParser:${this.keys.map(n=>`${String(n)}-${this.objType[n].magic}`).join(",")}`)}encode(e,n){for(const r of this.keys)this.objType[r].encode(e,n[r])}decode(e){let n={};for(const r of this.keys)n[r]=this.objType[r].decode(e);return n}}function Ei(t){return new $o(t)}class Oo extends pe{constructor(e){super();u(this,"magic");u(this,"arrType");this.arrType=e,this.magic=ge(`ArrayParser:${this.arrType.magic}`)}encode(e,n){De(!1).encode(e,BigInt(n.length));for(const r of n)this.arrType.encode(e,r)}decode(e){const n=Number(De(!1).decode(e)),r=[];for(let a=0;a<n;a++)r.push(this.arrType.decode(e));return r}}function Po(t){return new Oo(t)}class Ho extends pe{constructor(e,n){super();u(this,"magic");u(this,"keyType");u(this,"valueType");this.keyType=e,this.valueType=n,this.magic=ge(`RecordParser:${this.keyType.magic}-${this.valueType.magic}`)}encode(e,n){const r=Object.entries(n);De(!1).encode(e,BigInt(r.length));for(const[a,s]of r)this.keyType.encode(e,a),this.valueType.encode(e,s)}decode(e){const n={},r=Number(De(!1).decode(e));for(let a=0;a<r;a++){const s=this.keyType.decode(e),l=this.valueType.decode(e);n[s]=l}return n}}function Vo(t,i){return new Ho(t,i)}class Yo extends pe{constructor(){super(...arguments);u(this,"magic",ge("DateParser"))}encode(e,n){De(!1).encode(e,BigInt(n.valueOf()))}decode(e){return new Date(Number(De(!1).decode(e)))}}function ha(){return new Yo}class Xo extends pe{constructor(e,n){super();u(this,"magic");u(this,"parser");u(this,"compressed");this.parser=e,this.compressed=n,this.magic=ge(`PackedParser:${this.parser.magic}:${this.compressed?"Compressed":"Uncompressed"}`)}encode(e,n){const r=new ca;this.parser.encode(r,n);let a=r.final();this.compressed&&(a=Pn.deflate(a).buffer),wt().encode(e,a)}decode(e){let n=wt().decode(e);this.compressed&&(n=Pn.inflate(n).buffer);const r=new fa(n);return this.parser.decode(r)}}function jo(t,i){return new Xo(t,i)}class Go extends pe{constructor(e,n){super();u(this,"magic");u(this,"modifier");u(this,"parser");this.modifier=e,this.parser=n,this.magic=ge(`ModifyHashParser:${this.parser.magic}:${this.modifier}`)}encode(e,n){this.parser.encode(e,n)}decode(e){return this.parser.decode(e)}}function Wo(t,i){return new Go(t,i)}class da{constructor(i,e,n){u(this,"world");u(this,"chunkX");u(this,"chunkY");this.world=i,this.chunkX=e,this.chunkY=n}isGenerated(){return this instanceof Xe}generate(){if(this.isGenerated())throw new Error("Cannot generate an already generated chunk.");console.log(`Generating new chunk: ${this.chunkX}, ${this.chunkY}`);const i=[];for(let e=0;e<C;e++)for(let n=0;n<C;n++){const r=this.world.generateTile(this.chunkX*C+n,this.chunkY*C+e);i.push(r)}return new Xe(this.world,this.chunkX,this.chunkY,i)}}class Xe extends da{constructor(e,n,r,a){super(e,n,r);u(this,"tiles");u(this,"deaths",[]);if(this.tiles=a,this.tiles.length!=C*C)throw new Error("GeneratedChunk incorrect tiles length.")}getTileAbsolute(e,n){return this.getTile(e-this.chunkX*C,n-this.chunkY*C)}getTile(e,n){return this.tiles[e+n*C]}resetTileAbsolute(e,n){return this.resetTile(e-this.chunkX*C,n-this.chunkY*C)}resetTile(e,n){this.tiles[e+n*C]=Ar(this.world,this.chunkX*C+e,this.chunkY*C+n)}encodeTiles(){const e=new Ji(2048);for(const n of this.tiles)n.save(e);return e.final()}static decodeTiles(e,n,r,a){const s=new Ji(a);let l=[];for(let f=0;f<C;f++)for(let o=0;o<C;o++){const c=n*C+o,_=r*C+f,h=Sr(e,c,_).load(e,c,_,s);l.push(h)}return new Xe(e,n,r,l)}save(){return{deaths:this.deaths,tiles:this.encodeTiles()}}static load(e,n,r,a){const s=Xe.decodeTiles(e,n,r,a.tiles);return s.deaths=a.deaths,s}}let Ko=0;function qo(){return Ko++}class Jo{constructor(){u(this,"_dispatcherDestroyed",!1);u(this,"listeners",{})}get dispatcherDestroyed(){return this._dispatcherDestroyed}dispatcherCheckDestroyed(){if(this.dispatcherDestroyed)throw new Error("EventDispatcher used after destroyed.")}getListenersArr(i){return this.listeners[i]||(this.listeners[i]=[]),this.listeners[i]}*listenersIter(){for(const i in this.listeners){const e=this.listeners[i];for(const n of e)yield n}}addEventListener(i,e,n=!1,r=0){this.dispatcherCheckDestroyed();let a=this.getListenersArr(i);const s={key:i,callbackfn:e,priority:r,id:qo(),once:n};return a.push(s),a.sort((l,f)=>l.priority-f.priority),s}dispatchEvent(i,e){this.dispatcherCheckDestroyed();const n=this.getListenersArr(i);for(const r of n){let a=!1;if(r.callbackfn({data:e,dispatcher:this,listener:r,stopPropagation:()=>a=!0}),r.once&&this.removeEventListener(r),a)break}}removeEventListener(i){this.dispatcherCheckDestroyed();let e=!1;if(typeof i!="number"){const n=this.getListenersArr(i.key);for(const r of n)r.id==i.id&&(n.splice(n.indexOf(r),1),e=!0)}else for(const n of this.listenersIter())n.id==i&&this.removeEventListener(n)&&(e=!0);return e}destroyDispatcher(){this.dispatcherCheckDestroyed(),this._dispatcherDestroyed=!0;for(const i in this.listeners)delete this.listeners[i]}}function*Qo(t,i){let e=t,n=i,r=1,a=1;for(;;){for(;2*e*r<a;)yield{x:e,y:n},e+=r;for(;2*n*r<a;)yield{x:e,y:n},n+=r;r=-1*r,a+=1}}class jt extends Jo{constructor(e){super();u(this,"seed");u(this,"tileSeed");u(this,"biomeSeed");u(this,"createdAt",new Date);u(this,"deaths",0);u(this,"chunks",{});u(this,"_revealCount",0);u(this,"_died",!1);this.seed=(e&4294967295)>>>0;const n=Mi(this.seed,!1);this.tileSeed=n(),this.biomeSeed=n(),this.addEventListener("die",({data:{x:r,y:a}})=>{this.deaths++;const s=this.getGeneratedChunk(Math.floor(r/C),Math.floor(a/C));s.deaths.push({x:r-s.chunkX*C,y:a-s.chunkY*C,diedAt:new Date})})}generateTile(e,n){return Ar(this,e,n)}getChunk(e,n){const r=this.chunks[`${e},${n}`];return r||new da(this,e,n)}getGeneratedChunk(e,n){const r=this.getChunk(e,n);if(r.isGenerated())return r;const a=r.generate();return this.chunks[`${e},${n}`]=a,a}getTile(e,n){const r=Math.floor(e/C),a=Math.floor(n/C);return this.getGeneratedChunk(r,a).getTileAbsolute(e,n)}flag(e,n){const r=this.getTile(e,n);if(r.isDeathTile())return;const a=r.numFlags();r.flag();const s=r.numFlags();s==0&&s!=a&&(this.dispatchEvent("particle_unflag",{x:e,y:n}),this.dispatchEvent("sound_unflag",null))}_reveal(e,n){const r=this.getTile(e,n);if(r.reveal())if(this._revealCount++,r.numMines()>0){this._died=!0,this.dispatchEvent("particle_explosion",{x:r.x,y:r.y}),this.dispatchEvent("die",{x:r.x,y:r.y});return}else this.dispatchEvent("particle_reveal",{x:r.x,y:r.y});let a=[],s=[];if(r.type=="strawberry"){const l=r.minesNearbySecondary(!1);l!=null&&l==r.flagsNearby()&&s.push(r)}for(r.minesNearby()==r.flagsNearby()&&(s.includes(r)||s.push(r));s.length>0;){const l=s.pop();a.push(l);for(const f of l.searchPattern){const o=this.getTile(l.x+f.x,l.y+f.y);s.some(c=>c.x==o.x&&c.y==o.y)||a.some(c=>c.x==o.x&&c.y==o.y)||(o.minesNearby()==0?s.push(o):a.push(o))}}for(const l of a)l.reveal()&&(this._revealCount++,l.numMines()>0?(this._died=!0,this.dispatchEvent("particle_explosion",{x:l.x,y:l.y}),this.dispatchEvent("die",{x:l.x,y:l.y})):this.dispatchEvent("particle_reveal",{x:l.x,y:l.y}))}reveal(e,n){return this._revealCount=0,this._died=!1,this._reveal(e,n),this._revealCount>0&&this.dispatchEvent("sound_reveal",this._revealCount),this._died&&this.dispatchEvent("sound_explosion",null),this._died}reset(e,n){const r=this.getChunk(Math.floor(e/C),Math.floor(n/C));r.isGenerated()&&r.resetTileAbsolute(e,n)}closest0(e,n){for(const{x:r,y:a}of Qo(e,n)){const s=this.getTile(r,a);if(s.numMines()==0&&s.minesNearby()==0)return{x:r,y:a}}throw new Error("This error should never happen, it's just here to make TypeScript happy.")}save(){const e={seed:this.seed,createdAt:this.createdAt,numDeaths:this.deaths,chunks:{}};for(const n in this.chunks){const r=n,a=this.chunks[r];e.chunks[r]=a.save()}return e}static load(e){const n=new jt(e.seed);n.createdAt=e.createdAt,n.deaths=e.numDeaths;for(const r in e.chunks){const a=r,[s,l,f]=a.match(/^(-?\d+),(-?\d+)$/),[o,c]=[parseInt(l),parseInt(f)],_=e.chunks[a];n.chunks[a]=Xe.load(n,o,c,_)}return n}}function Hn(t,i){console.log("Loaded new world"),i&&localStorage.setItem(t,"PLACEHOLDER");const e=new jt(Math.floor(Math.random()*4294967295)),n=e.closest0(0,0);return e.reveal(n.x,n.y),e}function ec(t){const i=localStorage.getItem(t);if(i){console.log("Loaded saved world");try{return jt.load(ua.fromBase64(i))}catch(e){return console.error("Failed to load world."),console.error(e),Hn(t,!1)}}else return Hn(t,!0)}function tc(t,i){if(localStorage.getItem(t)!==null){console.log("Save world");try{localStorage.setItem(t,ua.toBase64(i.save())),localStorage.removeItem("save_error")}catch(e){localStorage.setItem("save_error",String(e))}}}const ic=Ei({deaths:Po(Ei({x:Pt("u8"),y:Pt("u8"),diedAt:ha()})),tiles:wt()}),ua=Wo("v1.0.1",jo(Ei({seed:Pt("u32"),createdAt:ha(),numDeaths:Pt("u32"),chunks:Vo(Fo(),ic)}),!0)),_a=(t,i)=>{const e=new ResizeObserver(()=>{i(t.clientWidth,t.clientHeight)});return e.observe(t),{destroy(){e.unobserve(t),e.disconnect()}}};class nc{constructor(i,e,n,r){u(this,"world");u(this,"theme");u(this,"canvas");u(this,"ctx");u(this,"viewport");this.world=i,this.theme=e,this.canvas=n;const a=this.canvas.getContext("2d");if(!a)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=a,this.viewport=r}async init(){}destroy(){}renderWorld(){this.ctx.imageSmoothingEnabled=!1,this.viewport.transformCtx(this.ctx),this.viewport.forEachTileInViewport(i=>{this.theme.drawTile(this.ctx,i)},0),this.viewport.forEachChunkInViewport(i=>{i.deaths.forEach(e=>{this.theme.drawDeathIcon(this.ctx,i.chunkX*C+e.x,i.chunkY*C+e.y)})},0),this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.renderWorld()}}class rc{constructor(i){u(this,"world");u(this,"width",0);u(this,"height",0);u(this,"cameraX",0);u(this,"cameraY",0);u(this,"cameraZoom",32);u(this,"cameraMinZoom",4);u(this,"cameraMaxZoom",64);this.world=i}setSize(i,e){this.width=i,this.height=e}cameraWidth(){return this.width/this.cameraZoom}cameraHeight(){return this.height/this.cameraZoom}cameraTranslate(i,e){this.cameraX-=i/this.cameraZoom,this.cameraY-=e/this.cameraZoom}forceCameraZoom(){return this.width/this.cameraZoom<this.cameraMinZoom&&(this.cameraZoom=this.width/this.cameraMinZoom),this.height/this.cameraZoom<this.cameraMinZoom&&(this.cameraZoom=this.height/this.cameraMinZoom),this.width/this.cameraZoom>this.cameraMaxZoom&&(this.cameraZoom=this.width/this.cameraMaxZoom),this.height/this.cameraZoom>this.cameraMaxZoom&&(this.cameraZoom=this.height/this.cameraMaxZoom),this.cameraZoom}cameraScale(i){const e=this.cameraX+this.cameraWidth()*.5,n=this.cameraY+this.cameraHeight()*.5;this.cameraZoom*=i,this.forceCameraZoom();const r=this.cameraX+this.cameraWidth()*.5,a=this.cameraY+this.cameraHeight()*.5;return this.cameraX-=r-e,this.cameraY-=a-n,this.cameraZoom}cameraBounds(i=0){return{minX:Math.floor(this.cameraX-i),minY:Math.floor(this.cameraY-i),maxX:Math.ceil(this.cameraX+this.cameraWidth()+i),maxY:Math.ceil(this.cameraY+this.cameraHeight()+i)}}isInCameraBounds(i,e,n=0){const r=this.cameraBounds(n);return i>=r.minX&&i<=r.maxX&&e>=r.minY&&e<=r.maxY}cameraPos(i,e){return{x:Math.floor(i/this.cameraZoom+this.cameraX),y:Math.floor(e/this.cameraZoom+this.cameraY)}}transformCtx(i){i.scale(this.cameraZoom,this.cameraZoom),i.translate(-this.cameraX,-this.cameraY)}forEachTileInViewport(i,e=0){const n=this.cameraBounds(e);for(let r=n.minX;r<n.maxX;r++)for(let a=n.minY;a<n.maxY;a++){const s=this.world.getTile(r,a);i(s)}}forEachChunkInViewport(i,e=0){const n=this.cameraBounds(e);n.minX=Math.floor(n.minX/C),n.minY=Math.floor(n.minY/C),n.maxX=Math.ceil(n.maxX/C),n.maxY=Math.ceil(n.maxY/C);for(let r=n.minX;r<n.maxX;r++)for(let a=n.minY;a<n.maxY;a++){const s=this.world.getChunk(r,a);s.isGenerated()&&i(s)}}}class Gt{constructor(){u(this,"_alive",!0);u(this,"_lifetime",0)}get alive(){return this._alive}set alive(i){this._alive=i}get lifetime(){return this._lifetime}rendererUpdate(i,e){this._lifetime+=e,this.update(i,e)}}class ac extends Gt{constructor(e){super();u(this,"type","explosion");u(this,"maxLifetime",500);u(this,"tile");this.tile=e}update(e,n){this.lifetime>this.maxLifetime&&(this.alive=!1)}}function Wt(t){return t<0?0:t>1?1:t}function ma(t,i){if(t instanceof HTMLCanvasElement){const e=t.getContext("2d");if(!e)throw new Error("2d canvas context is not supported on this machine or browser.");return[t,e]}else if(t instanceof HTMLImageElement){const e=document.createElement("canvas");e.width=t.width,e.height=t.height;const n=e.getContext("2d");if(!n)throw new Error("2d canvas context is not supported on this machine or browser.");return[e,n]}else if(typeof t=="number"){const e=document.createElement("canvas");e.width=t,e.height=i;const n=e.getContext("2d");if(!n)throw new Error("2d canvas context is not supported on this machine or browser.");return[e,n]}else{const e=document.createElement("canvas"),n=e.getContext("2d");if(!n)throw new Error("2d canvas context is not supported on this machine or browser.");return[e,n]}}class sc extends Gt{constructor(e){super();u(this,"type","faketile");u(this,"tile");this.tile=e}get opacity(){return Wt(2-this.lifetime/250+2)}update(e,n){this.lifetime>2e3&&(this.alive=!1)}}class Vn extends Gt{constructor(e,n,r,a){super();u(this,"type","flag");u(this,"x");u(this,"y");u(this,"dx");u(this,"dy");u(this,"r");u(this,"dr");u(this,"isMultiFlag");u(this,"numFlags");this.x=e,this.y=n,this.dx=(Math.random()-.5)*.005,this.dy=-(Math.random()*.002+.005),this.r=0,this.dr=(Math.random()-.5)*.01,this.isMultiFlag=r,this.numFlags=a}get opacity(){return Wt(1-this.lifetime/250+.5)}update(e,n){this.dy+=5e-5*n,this.dx*=.99,this.dy*=this.dy<0?1:.95,this.x+=this.dx*n,this.y+=this.dy*n,this.r+=this.dr*n,this.lifetime>=500&&(this.alive=!1)}}class lc extends Gt{constructor(e){super();u(this,"type","tilereveal");u(this,"tile");u(this,"x");u(this,"y");u(this,"dx");u(this,"dy");u(this,"r");u(this,"dr");u(this,"totalLifetime");this.tile=e,this.x=this.tile.x,this.y=this.tile.y,this.dx=(Math.random()-.5)*.005,this.dy=-(Math.random()*.002+.005),this.r=0,this.dr=(Math.random()-.5)*.01,this.totalLifetime=Math.random()*750+250}get opacity(){return Wt(1-this.lifetime/(this.totalLifetime/2)+.5)}update(e,n){this.dy+=5e-5*n,this.dx*=.99,this.dy*=this.dy<0?1:.98,this.x+=this.dx*n,this.y+=this.dy*n,this.r+=this.dr*n,this.lifetime>=this.totalLifetime&&(this.alive=!1)}}class oc{constructor(i,e,n,r){u(this,"world");u(this,"theme");u(this,"canvas");u(this,"ctx");u(this,"viewport");u(this,"particles",[]);u(this,"listeners",[]);u(this,"lastFrameTime",-1);this.world=i,this.theme=e,this.canvas=n;const a=this.canvas.getContext("2d");if(!a)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=a,this.viewport=r}async init(){this.listeners.push(this.world.addEventListener("particle_unflag",({data:{x:i,y:e}})=>{const n=this.world.getTile(i,e);n instanceof Er?this.particles.push(new Vn(i,e,!0,n.numMaxMines)):this.particles.push(new Vn(i,e,!1,1))})),this.listeners.push(this.world.addEventListener("particle_explosion",({data:{x:i,y:e}})=>{const n=this.world.getTile(i,e);this.particles.unshift(new sc(n)),this.particles.push(new ac(n))})),this.listeners.push(this.world.addEventListener("particle_reveal",({data:{x:i,y:e}})=>{const n=this.world.getTile(i,e);this.particles.push(new lc(n))}))}destroy(){let i;for(;i=this.listeners.pop();)this.world.removeEventListener(i)}renderParticles(i){this.ctx.imageSmoothingEnabled=!1,this.viewport.transformCtx(this.ctx);for(let e=0;e<this.particles.length;e++){const n=this.particles[e];n.rendererUpdate(this,i),n.alive||(this.particles.splice(e,1),e--)}for(const e of this.particles)this.theme.drawParticle(this.ctx,e);this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.ctx.fillStyle="transparent",this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const i=performance.now();if(this.lastFrameTime==-1)this.renderParticles(0);else{const e=i-this.lastFrameTime;this.renderParticles(e)}this.lastFrameTime=i}}function cc(t){let i,e,n,r,a,s,l;return{c(){i=R("div"),e=R("canvas"),n=se(),r=R("canvas"),this.h()},l(f){i=z(f,"DIV",{class:!0});var o=F(i);e=z(o,"CANVAS",{}),F(e).forEach(E),n=le(o),r=z(o,"CANVAS",{}),F(r).forEach(E),o.forEach(E),this.h()},h(){I(i,"class","w-full h-full force-overlap cursor-pointer")},m(f,o){O(f,i,o),U(i,e),t[12](e),U(i,n),U(i,r),t[13](r),t[14](i),s||(l=[q(window,"keydown",t[10]),q(window,"keyup",t[11]),tr(a=_a.call(null,i,t[15])),q(i,"mousedown",t[16]),q(i,"mouseup",t[17]),q(i,"mousemove",t[18]),q(i,"wheel",t[19],{passive:!0}),q(i,"contextmenu",fc)],s=!0)},p(f,[o]){a&&ir(a.update)&&o&62&&a.update.call(null,f[15])},i:Ne,o:Ne,d(f){f&&E(i),t[12](null),t[13](null),t[14](null),s=!1,Ti(l)}}}const fc=t=>{t.preventDefault()};function hc(t,i,e){const n=wa();let r,{world:a}=i,{theme:s}=i;const l=new rc(a);let f,o,c,_,d=!0,h=!1,m=-1;const g=()=>{cancelAnimationFrame(m),m=requestAnimationFrame(g),h&&(e(5,h=!1),f.render()),c.render()};let p=new Set,b=-1;Si(async()=>{f=new nc(a,s,o,l),c=new oc(a,s,_,l),clearInterval(b),b=setInterval(()=>{let k=!1;p.has("[")&&l.cameraZoom!=l.cameraScale(1.04)&&(k=!0),p.has("]")&&l.cameraZoom!=l.cameraScale(.96)&&(k=!0),p.has("ArrowUp")&&(l.cameraTranslate(0,10),k=!0),p.has("ArrowDown")&&(l.cameraTranslate(0,-10),k=!0),p.has("ArrowLeft")&&(l.cameraTranslate(10,0),k=!0),p.has("ArrowRight")&&(l.cameraTranslate(-10,0),k=!0),p.has("s")&&(e(1,l.cameraZoom=Math.pow(2,Math.ceil(Math.log(l.cameraZoom)/Math.log(2))),l),l.cameraScale(1),k=!0),k&&e(5,h=!0)},1e3/60),await f.init(),await c.init(),setTimeout(()=>{l.setSize(o.width,o.height),e(5,h=!0),g()},100)}),nr(()=>{f.destroy(),c.destroy(),cancelAnimationFrame(m),clearInterval(b)});const v=k=>{p.add(k.key)},T=k=>{p.delete(k.key)};function w(k){zt[k?"unshift":"push"](()=>{o=k,e(2,o)})}function y(k){zt[k?"unshift":"push"](()=>{_=k,e(3,_)})}function A(k){zt[k?"unshift":"push"](()=>{r=k,e(0,r)})}const x=(k,j)=>{e(2,o.width=k,o),e(2,o.height=j,o),e(3,_.width=k,_),e(3,_.height=j,_),l.setSize(k,j),l.cameraScale(1),d&&(l.cameraTranslate(k/2,j/2),e(4,d=!1)),e(5,h=!0)},B=k=>{if(document.pointerLockElement!=r){if(k.button==1)r.requestPointerLock(),k.preventDefault();else if(k.button==0){k.preventDefault();const j=l.cameraPos(k.offsetX,k.offsetY);n("action",{type:"reveal",pos:j}),e(5,h=!0)}else if(k.button==2){k.preventDefault();const j=l.cameraPos(k.offsetX,k.offsetY);n("action",{type:"flag",pos:j}),e(5,h=!0)}else if(k.button==3){k.preventDefault();const j=l.cameraPos(k.offsetX,k.offsetY);n("action",{type:"reset",pos:j}),e(5,h=!0)}}},M=k=>{document.pointerLockElement==r&&k.button==1&&document.exitPointerLock()},S=k=>{document.pointerLockElement==r&&(l.cameraTranslate(k.movementX,k.movementY),e(5,h=!0))},D=k=>{const j=k.deltaY>0?.9:1.1;l.cameraZoom!=l.cameraScale(j)&&e(5,h=!0)};return t.$$set=k=>{"world"in k&&e(8,a=k.world),"theme"in k&&e(9,s=k.theme)},[r,l,o,_,d,h,n,p,a,s,v,T,w,y,A,x,B,M,S,D]}class dc extends fe{constructor(i){super(),he(this,i,hc,cc,ce,{world:8,theme:9})}}class ba{constructor(i,e){u(this,"textures");u(this,"img");typeof i=="string"?(this.img=document.createElement("img"),this.img.loading="eager",this.img.src=i):this.img=i,this.textures=e}awaitLoad(){return new Promise((i,e)=>{if(this.img instanceof HTMLCanvasElement||this.img.complete&&this.img.naturalWidth!==0)return i();const n=()=>{this.img.removeEventListener("load",n),this.img.removeEventListener("error",r),i()},r=()=>{this.img.removeEventListener("load",n),this.img.removeEventListener("error",r),e()};this.img.addEventListener("load",n),this.img.addEventListener("error",r)})}onLoad(i){this.awaitLoad().then(()=>i(this))}draw(i,e,n,r,a,s){const[l,f,o,c]=this.textures[e];i.drawImage(this.img,l,f,o,c,n,r,a,s)}toImageDataAtlas(){const[i,e]=ma(this.img.width,this.img.height);return e.imageSmoothingEnabled=!1,e.drawImage(this.img,0,0),new uc(Object.fromEntries(Object.entries(this.textures).map(([n,[r,a,s,l]])=>[n,e.getImageData(r,a,s,l)])))}}class uc{constructor(i){u(this,"textures");this.textures=i}toImageAtlas(i=!0){let e=0,n=0,r={},a=0;for(const f in this.textures){const o=this.textures[f];i&&a++,r[f]={x:a,y:i?1:0,width:o.width,height:o.height,name:f},a+=o.width+(i?1:0),e=a,n=Math.max(n,o.height+(i?2:0))}const[s,l]=ma(e,n);for(const f in r){const o=r[f];l.putImageData(this.textures[f],o.x,o.y)}return new ba(s,Object.fromEntries(Object.entries(r).map(([f,o])=>(o=o,[f,[o.x,o.y,o.width,o.height]]))))}}class _c{constructor(){u(this,"volume",1)}playSound(i,e=1){const n=this.soundEffects[i],r=Wt(e*this.volume);if(r<=0)return;const a=document.createElement("audio");a.src=n.src,a.volume=r,a.playbackRate=1+Math.random()*n.variation,a.preservesPitch=!1;const s=()=>{a.removeEventListener("ended",s),a.remove()};a.addEventListener("ended",s),a.play()}}class mc extends _c{constructor(){super(...arguments);u(this,"tileset",new ba("/infinite-minesweeper/retro/tileset.png",{null:[0,0,16,16],skull:[0,16,16,16],bomb:[16,0,16,16],explosion1:[16,16,16,16],explosion2:[16,32,16,16],explosion3:[16,48,16,16],explosion4:[16,64,16,16],flag:[32,16,16,16],flag_1:[32,32,16,16],flag_2:[32,48,16,16],flag_3:[32,64,16,16],number_0:[48,0,16,16],number_1:[48,16,16,16],number_2:[48,32,16,16],number_3:[48,48,16,16],number_4:[48,64,16,16],number_5:[48,80,16,16],number_6:[48,96,16,16],number_7:[48,112,16,16],number_8:[48,128,16,16],number_9:[48,144,16,16],number_10:[48,160,16,16],number_11:[48,176,16,16],number_12:[48,192,16,16],number_13:[48,208,16,16],number_14:[48,224,16,16],number_15:[48,240,16,16],number_16:[48,256,16,16],number_17:[48,272,16,16],number_18:[48,288,16,16],number_19:[48,304,16,16],number_20:[48,320,16,16],number_21:[48,336,16,16],number_22:[48,352,16,16],number_23:[48,368,16,16],number_24:[48,384,16,16],tile_vanilla_covered:[64,0,16,16],tile_vanilla_revealed:[80,0,16,16],tile_chocolate_covered:[64,16,16,16],tile_chocolate_revealed:[80,16,16,16],tile_waffle_light_covered:[64,32,16,16],tile_waffle_light_revealed:[80,32,16,16],tile_waffle_dark_covered:[96,32,16,16],tile_waffle_dark_revealed:[112,32,16,16],tile_stroopwafel_light_covered:[64,48,16,16],tile_stroopwafel_light_revealed:[80,48,16,16],tile_stroopwafel_dark_covered:[96,48,16,16],tile_stroopwafel_dark_revealed:[112,48,16,16],tile_blueberry_covered:[64,64,16,16],tile_blueberry_revealed:[80,64,16,16],tile_strawberry_covered:[64,80,16,16],tile_strawberry_revealed:[80,80,16,16]}));u(this,"soundEffects",{reveal:{src:"/infinite-minesweeper/retro/reveal.wav",variation:.25},unflag:{src:"/infinite-minesweeper/retro/unflag.wav",variation:.25},explosion:{src:"/infinite-minesweeper/retro/explosion.wav",variation:.25}})}async init(){await this.tileset.awaitLoad(),this.tileset=this.tileset.toImageDataAtlas().toImageAtlas(!0)}drawNearby(e,n){switch(n){case 0:break;case 1:this.tileset.draw(e,"number_1",0,0,1,1);break;case 2:this.tileset.draw(e,"number_2",0,0,1,1);break;case 3:this.tileset.draw(e,"number_3",0,0,1,1);break;case 4:this.tileset.draw(e,"number_4",0,0,1,1);break;case 5:this.tileset.draw(e,"number_5",0,0,1,1);break;case 6:this.tileset.draw(e,"number_6",0,0,1,1);break;case 7:this.tileset.draw(e,"number_7",0,0,1,1);break;case 8:this.tileset.draw(e,"number_8",0,0,1,1);break;case 9:this.tileset.draw(e,"number_9",0,0,1,1);break;case 10:this.tileset.draw(e,"number_10",0,0,1,1);break;case 11:this.tileset.draw(e,"number_11",0,0,1,1);break;case 12:this.tileset.draw(e,"number_12",0,0,1,1);break;case 13:this.tileset.draw(e,"number_13",0,0,1,1);break;case 14:this.tileset.draw(e,"number_14",0,0,1,1);break;case 15:this.tileset.draw(e,"number_15",0,0,1,1);break;case 16:this.tileset.draw(e,"number_16",0,0,1,1);break;case 17:this.tileset.draw(e,"number_17",0,0,1,1);break;case 18:this.tileset.draw(e,"number_18",0,0,1,1);break;case 19:this.tileset.draw(e,"number_19",0,0,1,1);break;case 20:this.tileset.draw(e,"number_20",0,0,1,1);break;case 21:this.tileset.draw(e,"number_21",0,0,1,1);break;case 22:this.tileset.draw(e,"number_22",0,0,1,1);break;case 23:this.tileset.draw(e,"number_23",0,0,1,1);break;case 24:this.tileset.draw(e,"number_24",0,0,1,1);break;default:throw new Error("ThemeRetro invalid draw nearby count.")}}drawFlags(e,n){switch(n){case 0:break;case 1:this.tileset.draw(e,"flag_1",0,0,1,1);break;case 2:this.tileset.draw(e,"flag_2",0,0,1,1);break;case 3:this.tileset.draw(e,"flag_3",0,0,1,1);break;default:throw new Error("ThemeRetro invalid draw flag count.")}}drawSingleMineTile(e,n,r,a,s){if(s){this.tileset.draw(e,r,0,0,1,1);return}switch(n.state){case Ie.Covered:this.tileset.draw(e,r,0,0,1,1);break;case Ie.Flagged:this.tileset.draw(e,r,0,0,1,1),this.tileset.draw(e,"flag",0,0,1,1);break;case Ie.Revealed:{this.tileset.draw(e,a,0,0,1,1),this.drawNearby(e,n.minesNearby());break}}}drawMultiMineTile(e,n,r,a,s){if(s){this.tileset.draw(e,r,0,0,1,1);return}n.isRevealed?(this.tileset.draw(e,a,0,0,1,1),this.drawNearby(e,n.minesNearby())):(this.tileset.draw(e,r,0,0,1,1),this.drawFlags(e,n.numFlags()))}drawStrawberryTile(e,n,r){if(r){this.tileset.draw(e,"tile_strawberry_covered",0,0,1,1);return}switch(n.state){case Ie.Covered:this.tileset.draw(e,"tile_strawberry_covered",0,0,1,1);break;case Ie.Flagged:this.tileset.draw(e,"tile_strawberry_covered",0,0,1,1),this.tileset.draw(e,"flag",0,0,1,1);break;case Ie.Revealed:{this.tileset.draw(e,"tile_strawberry_revealed",0,0,1,1);const a=n.minesNearbySecondary(!0);a!==null?(e.save(),e.scale(.55,.55),e.translate(.1,.45),this.drawNearby(e,n.secondaryNearbyCountRightSide?n.minesNearby(!0):a),e.translate(.7,0),this.drawNearby(e,n.secondaryNearbyCountRightSide?a:n.minesNearby(!0)),e.restore()):this.drawNearby(e,n.minesNearby());break}}}drawForcedTile(e,n,r){switch(n.type){case"vanilla":this.drawSingleMineTile(e,n,"tile_vanilla_covered","tile_vanilla_revealed",r);break;case"chocolate":this.drawSingleMineTile(e,n,"tile_chocolate_covered","tile_chocolate_revealed",r);break;case"waffle":{n.isDark?this.drawSingleMineTile(e,n,"tile_waffle_dark_covered","tile_waffle_dark_revealed",r):this.drawSingleMineTile(e,n,"tile_waffle_light_covered","tile_waffle_light_revealed",r);break}case"stroopwafel":{n.isDark?this.drawSingleMineTile(e,n,"tile_stroopwafel_dark_covered","tile_stroopwafel_dark_revealed",r):this.drawSingleMineTile(e,n,"tile_stroopwafel_light_covered","tile_stroopwafel_light_revealed",r);break}case"blueberry":{this.drawMultiMineTile(e,n,"tile_blueberry_covered","tile_blueberry_revealed",r);break}case"strawberry":{this.drawStrawberryTile(e,n,r);break}}}drawTile(e,n){e.save(),e.translate(n.x,n.y),this.drawForcedTile(e,n,!1),e.restore()}drawParticle(e,n){switch(e.save(),n.type){case"flag":{e.translate(n.x+.5,n.y+.5),e.rotate(n.r),e.globalAlpha=n.opacity,n.isMultiFlag?(e.translate(-.5,-.5),this.drawFlags(e,n.numFlags)):this.tileset.draw(e,"flag",-.5,-.5,1,1);break}case"explosion":{const r=["explosion1","explosion2","explosion3","explosion4"],a=Math.min(Math.floor(n.lifetime/n.maxLifetime*r.length),r.length-1);this.tileset.draw(e,r[a],n.tile.x,n.tile.y,1,1);break}case"faketile":{e.translate(n.tile.x,n.tile.y),e.globalAlpha=n.opacity,this.drawForcedTile(e,n.tile,!0);break}case"tilereveal":{e.translate(n.x+.5,n.y+.5),e.rotate(n.r),e.translate(-.5,-.5),e.globalAlpha=n.opacity,this.drawForcedTile(e,n.tile,!0);break}}e.globalAlpha=1,e.restore()}drawDeathIcon(e,n,r){this.tileset.draw(e,"skull",n,r,1,1)}}const bc=cr(.25),Bt=cr(null);function Yn(t){let i,e;return i=new dc({props:{world:t[1],theme:t[2]}}),i.$on("action",t[6]),{c(){ee(i.$$.fragment)},l(n){te(i.$$.fragment,n)},m(n,r){ie(i,n,r),e=!0},p(n,r){const a={};r&2&&(a.world=n[1]),r&4&&(a.theme=n[2]),i.$set(a)},i(n){e||(L(i.$$.fragment,n),e=!0)},o(n){$(i.$$.fragment,n),e=!1},d(n){ne(i,n)}}}function gc(t){let i,e,n,r,a=t[1]&&t[2]&&Yn(t);return{c(){a&&a.c(),i=Ae()},l(s){a&&a.l(s),i=Ae()},m(s,l){a&&a.m(s,l),O(s,i,l),e=!0,n||(r=q(window,"beforeunload",t[5]),n=!0)},p(s,[l]){s[1]&&s[2]?a?(a.p(s,l),l&6&&L(a,1)):(a=Yn(s),a.c(),L(a,1),a.m(i.parentNode,i)):a&&(ct(),$(a,1,1,()=>{a=null}),ft())},i(s){e||(L(a),e=!0)},o(s){$(a),e=!1},d(s){s&&E(i),a&&a.d(s),n=!1,r()}}}function pc(t,i,e){let n,r;di(t,Bt,c=>e(3,n=c)),di(t,bc,c=>e(4,r=c));let{saveSlot:a}=i,s,l=new mc;Si(async()=>{await l.init(),e(1,s=ec(a)),Hi(Bt,n=s,n),s.addEventListener("sound_unflag",()=>{l.playSound("unflag")}),s.addEventListener("sound_reveal",({data:c})=>{l.playSound("reveal",c/10+.9)}),s.addEventListener("sound_explosion",()=>{l.playSound("explosion")})}),nr(()=>{location.reload()});const f=()=>{Hi(Bt,n=null,n),tc(a,s)},o=c=>{c.detail.type=="reveal"?s.reveal(c.detail.pos.x,c.detail.pos.y):c.detail.type=="flag"?s.flag(c.detail.pos.x,c.detail.pos.y):c.detail.type=="reset"&&s.reset(c.detail.pos.x,c.detail.pos.y)};return t.$$set=c=>{"saveSlot"in c&&e(0,a=c.saveSlot)},t.$$.update=()=>{t.$$.dirty&16&&e(2,l.volume=r,l)},[a,s,l,n,r,f,o]}class wc extends fe{constructor(i){super(),he(this,i,pc,gc,ce,{saveSlot:0})}}/**
 * @license lucide-svelte v0.372.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const vc={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":2,"stroke-linecap":"round","stroke-linejoin":"round"},Xn=vc;function jn(t,i,e){const n=t.slice();return n[10]=i[e][0],n[11]=i[e][1],n}function hi(t){let i,e=[t[11]],n={};for(let r=0;r<e.length;r+=1)n=X(n,e[r]);return{c(){i=rr(t[10]),this.h()},l(r){i=ar(r,t[10],{}),F(i).forEach(E),this.h()},h(){Zt(i,n)},m(r,a){O(r,i,a)},p(r,a){Zt(i,n=qe(e,[a&32&&r[11]]))},d(r){r&&E(i)}}}function Gn(t){let i=t[10],e,n=t[10]&&hi(t);return{c(){n&&n.c(),e=Ae()},l(r){n&&n.l(r),e=Ae()},m(r,a){n&&n.m(r,a),O(r,e,a)},p(r,a){r[10]?i?ce(i,r[10])?(n.d(1),n=hi(r),i=r[10],n.c(),n.m(e.parentNode,e)):n.p(r,a):(n=hi(r),i=r[10],n.c(),n.m(e.parentNode,e)):i&&(n.d(1),n=null,i=r[10])},d(r){r&&E(e),n&&n.d(r)}}}function yc(t){let i,e,n,r,a,s=Ut(t[5]),l=[];for(let d=0;d<s.length;d+=1)l[d]=Gn(jn(t,s,d));const f=t[9].default,o=je(f,t,t[8],null);let c=[Xn,t[6],{width:t[2]},{height:t[2]},{stroke:t[1]},{"stroke-width":n=t[4]?Number(t[3])*24/Number(t[2]):t[3]},{class:r=`lucide-icon lucide lucide-${t[0]} ${t[7].class??""}`}],_={};for(let d=0;d<c.length;d+=1)_=X(_,c[d]);return{c(){i=rr("svg");for(let d=0;d<l.length;d+=1)l[d].c();e=Ae(),o&&o.c(),this.h()},l(d){i=ar(d,"svg",{width:!0,height:!0,stroke:!0,"stroke-width":!0,class:!0});var h=F(i);for(let m=0;m<l.length;m+=1)l[m].l(h);e=Ae(),o&&o.l(h),h.forEach(E),this.h()},h(){Zt(i,_)},m(d,h){O(d,i,h);for(let m=0;m<l.length;m+=1)l[m]&&l[m].m(i,null);U(i,e),o&&o.m(i,null),a=!0},p(d,[h]){if(h&32){s=Ut(d[5]);let m;for(m=0;m<s.length;m+=1){const g=jn(d,s,m);l[m]?l[m].p(g,h):(l[m]=Gn(g),l[m].c(),l[m].m(i,e))}for(;m<l.length;m+=1)l[m].d(1);l.length=s.length}o&&o.p&&(!a||h&256)&&Ge(o,f,d,d[8],a?Ke(f,d[8],h,null):We(d[8]),null),Zt(i,_=qe(c,[Xn,h&64&&d[6],(!a||h&4)&&{width:d[2]},(!a||h&4)&&{height:d[2]},(!a||h&2)&&{stroke:d[1]},(!a||h&28&&n!==(n=d[4]?Number(d[3])*24/Number(d[2]):d[3]))&&{"stroke-width":n},(!a||h&129&&r!==(r=`lucide-icon lucide lucide-${d[0]} ${d[7].class??""}`))&&{class:r}]))},i(d){a||(L(o,d),a=!0)},o(d){$(o,d),a=!1},d(d){d&&E(i),sr(l,d),o&&o.d(d)}}}function kc(t,i,e){const n=["name","color","size","strokeWidth","absoluteStrokeWidth","iconNode"];let r=Vi(i,n),{$$slots:a={},$$scope:s}=i,{name:l}=i,{color:f="currentColor"}=i,{size:o=24}=i,{strokeWidth:c=2}=i,{absoluteStrokeWidth:_=!1}=i,{iconNode:d}=i;return t.$$set=h=>{e(7,i=X(X({},i),be(h))),e(6,r=Vi(i,n)),"name"in h&&e(0,l=h.name),"color"in h&&e(1,f=h.color),"size"in h&&e(2,o=h.size),"strokeWidth"in h&&e(3,c=h.strokeWidth),"absoluteStrokeWidth"in h&&e(4,_=h.absoluteStrokeWidth),"iconNode"in h&&e(5,d=h.iconNode),"$$scope"in h&&e(8,s=h.$$scope)},i=be(i),[l,f,o,c,_,d,r,i,s,a]}class Kt extends fe{constructor(i){super(),he(this,i,kc,yc,ce,{name:0,color:1,size:2,strokeWidth:3,absoluteStrokeWidth:4,iconNode:5})}}function xc(t){let i;const e=t[2].default,n=je(e,t,t[3],null);return{c(){n&&n.c()},l(r){n&&n.l(r)},m(r,a){n&&n.m(r,a),i=!0},p(r,a){n&&n.p&&(!i||a&8)&&Ge(n,e,r,r[3],i?Ke(e,r[3],a,null):We(r[3]),null)},i(r){i||(L(n,r),i=!0)},o(r){$(n,r),i=!1},d(r){n&&n.d(r)}}}function Ec(t){let i,e;const n=[{name:"info"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[xc]},$$scope:{ctx:t}};for(let a=0;a<n.length;a+=1)r=X(r,n[a]);return i=new Kt({props:r}),{c(){ee(i.$$.fragment)},l(a){te(i.$$.fragment,a)},m(a,s){ie(i,a,s),e=!0},p(a,[s]){const l=s&3?qe(n,[n[0],s&2&&Ht(a[1]),s&1&&{iconNode:a[0]}]):{};s&8&&(l.$$scope={dirty:s,ctx:a}),i.$set(l)},i(a){e||(L(i.$$.fragment,a),e=!0)},o(a){$(i.$$.fragment,a),e=!1},d(a){ne(i,a)}}}function Tc(t,i,e){let{$$slots:n={},$$scope:r}=i;const a=[["circle",{cx:"12",cy:"12",r:"10"}],["path",{d:"M12 16v-4"}],["path",{d:"M12 8h.01"}]];return t.$$set=s=>{e(1,i=X(X({},i),be(s))),"$$scope"in s&&e(3,r=s.$$scope)},i=be(i),[a,i,n,r]}class Sc extends fe{constructor(i){super(),he(this,i,Tc,Ec,ce,{})}}function Wn(t){let i,e,n,r,a,s,l=t[1]&&Kn(t);const f=t[3].default,o=je(f,t,t[2],null);return{c(){i=R("div"),e=R("div"),l&&l.c(),n=se(),r=R("div"),a=R("div"),o&&o.c(),this.h()},l(c){i=z(c,"DIV",{class:!0});var _=F(i);e=z(_,"DIV",{class:!0});var d=F(e);l&&l.l(d),d.forEach(E),n=le(_),r=z(_,"DIV",{class:!0});var h=F(r);a=z(h,"DIV",{class:!0});var m=F(a);o&&o.l(m),m.forEach(E),h.forEach(E),_.forEach(E),this.h()},h(){I(e,"class","modal-background -z-10 bg-black bg-opacity-30 shadow-vignette-heavy svelte-pwpa02"),I(a,"class","pointer-events-auto"),I(r,"class","modal-content flex justify-center items-center pointer-events-none p-8 svelte-pwpa02"),I(i,"class","modal fixed top-0 left-0 bottom-0 right-0 grid grid-cols-1 grid-rows-1 svelte-pwpa02")},m(c,_){O(c,i,_),U(i,e),l&&l.m(e,null),U(i,n),U(i,r),U(r,a),o&&o.m(a,null),s=!0},p(c,_){c[1]?l?l.p(c,_):(l=Kn(c),l.c(),l.m(e,null)):l&&(l.d(1),l=null),o&&o.p&&(!s||_&4)&&Ge(o,f,c,c[2],s?Ke(f,c[2],_,null):We(c[2]),null)},i(c){s||(L(o,c),s=!0)},o(c){$(o,c),s=!1},d(c){c&&E(i),l&&l.d(),o&&o.d(c)}}}function Kn(t){let i,e,n;return{c(){i=R("button"),this.h()},l(r){i=z(r,"BUTTON",{class:!0,"aria-label":!0}),F(i).forEach(E),this.h()},h(){I(i,"class","w-full h-full"),I(i,"aria-label","Close Modal")},m(r,a){O(r,i,a),e||(n=q(i,"click",t[4]),e=!0)},p:Ne,d(r){r&&E(i),e=!1,n()}}}function Ac(t){let i,e,n=t[0]&&Wn(t);return{c(){n&&n.c(),i=Ae()},l(r){n&&n.l(r),i=Ae()},m(r,a){n&&n.m(r,a),O(r,i,a),e=!0},p(r,[a]){r[0]?n?(n.p(r,a),a&1&&L(n,1)):(n=Wn(r),n.c(),L(n,1),n.m(i.parentNode,i)):n&&(ct(),$(n,1,1,()=>{n=null}),ft())},i(r){e||(L(n),e=!0)},o(r){$(n),e=!1},d(r){r&&E(i),n&&n.d(r)}}}function Dc(t,i,e){let{$$slots:n={},$$scope:r}=i,{visible:a=!1}=i,{closable:s=!0}=i;const l=()=>e(0,a=!1);return t.$$set=f=>{"visible"in f&&e(0,a=f.visible),"closable"in f&&e(1,s=f.closable),"$$scope"in f&&e(2,r=f.$$scope)},[a,s,r,n,l]}class Mc extends fe{constructor(i){super(),he(this,i,Dc,Ac,ce,{visible:0,closable:1})}}function Ic(t){let i;const e=t[2].default,n=je(e,t,t[3],null);return{c(){n&&n.c()},l(r){n&&n.l(r)},m(r,a){n&&n.m(r,a),i=!0},p(r,a){n&&n.p&&(!i||a&8)&&Ge(n,e,r,r[3],i?Ke(e,r[3],a,null):We(r[3]),null)},i(r){i||(L(n,r),i=!0)},o(r){$(n,r),i=!1},d(r){n&&n.d(r)}}}function Cc(t){let i,e;const n=[{name:"chevron-left"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Ic]},$$scope:{ctx:t}};for(let a=0;a<n.length;a+=1)r=X(r,n[a]);return i=new Kt({props:r}),{c(){ee(i.$$.fragment)},l(a){te(i.$$.fragment,a)},m(a,s){ie(i,a,s),e=!0},p(a,[s]){const l=s&3?qe(n,[n[0],s&2&&Ht(a[1]),s&1&&{iconNode:a[0]}]):{};s&8&&(l.$$scope={dirty:s,ctx:a}),i.$set(l)},i(a){e||(L(i.$$.fragment,a),e=!0)},o(a){$(i.$$.fragment,a),e=!1},d(a){ne(i,a)}}}function Rc(t,i,e){let{$$slots:n={},$$scope:r}=i;const a=[["path",{d:"m15 18-6-6 6-6"}]];return t.$$set=s=>{e(1,i=X(X({},i),be(s))),"$$scope"in s&&e(3,r=s.$$scope)},i=be(i),[a,i,n,r]}class zc extends fe{constructor(i){super(),he(this,i,Rc,Cc,ce,{})}}function Nc(t){let i;const e=t[2].default,n=je(e,t,t[3],null);return{c(){n&&n.c()},l(r){n&&n.l(r)},m(r,a){n&&n.m(r,a),i=!0},p(r,a){n&&n.p&&(!i||a&8)&&Ge(n,e,r,r[3],i?Ke(e,r[3],a,null):We(r[3]),null)},i(r){i||(L(n,r),i=!0)},o(r){$(n,r),i=!1},d(r){n&&n.d(r)}}}function Lc(t){let i,e;const n=[{name:"chevron-right"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Nc]},$$scope:{ctx:t}};for(let a=0;a<n.length;a+=1)r=X(r,n[a]);return i=new Kt({props:r}),{c(){ee(i.$$.fragment)},l(a){te(i.$$.fragment,a)},m(a,s){ie(i,a,s),e=!0},p(a,[s]){const l=s&3?qe(n,[n[0],s&2&&Ht(a[1]),s&1&&{iconNode:a[0]}]):{};s&8&&(l.$$scope={dirty:s,ctx:a}),i.$set(l)},i(a){e||(L(i.$$.fragment,a),e=!0)},o(a){$(i.$$.fragment,a),e=!1},d(a){ne(i,a)}}}function Bc(t,i,e){let{$$slots:n={},$$scope:r}=i;const a=[["path",{d:"m9 18 6-6-6-6"}]];return t.$$set=s=>{e(1,i=X(X({},i),be(s))),"$$scope"in s&&e(3,r=s.$$scope)},i=be(i),[a,i,n,r]}class Zc extends fe{constructor(i){super(),he(this,i,Bc,Lc,ce,{})}}function Uc(t){let i,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_strawberry_screenshot.png" alt="Strawberry Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Strawberry</h2> <div class="biome-description svelte-1pkhcy2">Tile nearby mine count may have 2 values.
                        <br/><br/>
                        Be careful while revealing tiles; If any of the two values match, the tiles will auto reveal.</div></div>`;return{c(){i=R("div"),i.innerHTML=e,this.h()},l(n){i=z(n,"DIV",{class:!0,"data-svelte-h":!0}),Me(i)!=="svelte-1hn2487"&&(i.innerHTML=e),this.h()},h(){I(i,"class","biome svelte-1pkhcy2")},m(n,r){O(n,i,r)},d(n){n&&E(i)}}}function Fc(t){let i,e='<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_blueberry_screenshot.png" alt="Blueberry Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Blueberry</h2> <div class="biome-description svelte-1pkhcy2">Tiles may have up to 3 mines.</div></div>';return{c(){i=R("div"),i.innerHTML=e,this.h()},l(n){i=z(n,"DIV",{class:!0,"data-svelte-h":!0}),Me(i)!=="svelte-1pq8aco"&&(i.innerHTML=e),this.h()},h(){I(i,"class","biome svelte-1pkhcy2")},m(n,r){O(n,i,r)},d(n){n&&E(i)}}}function $c(t){let i,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_stroopwafel_screenshot.png" alt="Stroopwafel Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Stroopwafel</h2> <div class="biome-description svelte-1pkhcy2">3x3 checkers of tiles.<br/>
                        Dark checkered sections have 8 mines.<br/>
                        Light checkered sections have 1 mine.</div></div>`;return{c(){i=R("div"),i.innerHTML=e,this.h()},l(n){i=z(n,"DIV",{class:!0,"data-svelte-h":!0}),Me(i)!=="svelte-4cbz83"&&(i.innerHTML=e),this.h()},h(){I(i,"class","biome svelte-1pkhcy2")},m(n,r){O(n,i,r)},d(n){n&&E(i)}}}function Oc(t){let i,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_waffle_screenshot.png" alt="Waffle Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Waffle</h2> <div class="biome-description svelte-1pkhcy2">2x2 checkers of tiles.<br/>
                        Dark checkered sections have 3 mines.<br/>
                        Light checkered sections have 1 mine.</div></div>`;return{c(){i=R("div"),i.innerHTML=e,this.h()},l(n){i=z(n,"DIV",{class:!0,"data-svelte-h":!0}),Me(i)!=="svelte-1ji8mo3"&&(i.innerHTML=e),this.h()},h(){I(i,"class","biome svelte-1pkhcy2")},m(n,r){O(n,i,r)},d(n){n&&E(i)}}}function Pc(t){let i,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_chocolate_screenshot.png" alt="Chocolate Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Chocolate</h2> <div class="biome-description svelte-1pkhcy2">The standard Minesweeper rules.<br/>
                        Much more mines than Vanilla biome.</div></div>`;return{c(){i=R("div"),i.innerHTML=e,this.h()},l(n){i=z(n,"DIV",{class:!0,"data-svelte-h":!0}),Me(i)!=="svelte-gc9i28"&&(i.innerHTML=e),this.h()},h(){I(i,"class","biome svelte-1pkhcy2")},m(n,r){O(n,i,r)},d(n){n&&E(i)}}}function Hc(t){let i,e='<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_vanilla_screenshot.png" alt="Vanilla Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Vanilla</h2> <div class="biome-description svelte-1pkhcy2">The standard Minesweeper rules.</div></div>';return{c(){i=R("div"),i.innerHTML=e,this.h()},l(n){i=z(n,"DIV",{class:!0,"data-svelte-h":!0}),Me(i)!=="svelte-ic5bha"&&(i.innerHTML=e),this.h()},h(){I(i,"class","biome svelte-1pkhcy2")},m(n,r){O(n,i,r)},d(n){n&&E(i)}}}function Vc(t){let i,e,n,r,a,s,l,f,o,c,_,d;function h(p,b){if(p[0]=="Vanilla")return Hc;if(p[0]=="Chocolate")return Pc;if(p[0]=="Waffle")return Oc;if(p[0]=="Stroopwafel")return $c;if(p[0]=="Blueberry")return Fc;if(p[0]=="Strawberry")return Uc}let m=h(t),g=m&&m(t);return s=new zc({}),o=new Zc({}),{c(){i=R("div"),e=R("div"),g&&g.c(),n=se(),r=R("div"),a=R("button"),ee(s.$$.fragment),l=se(),f=R("button"),ee(o.$$.fragment),this.h()},l(p){i=z(p,"DIV",{class:!0});var b=F(i);e=z(b,"DIV",{class:!0});var v=F(e);g&&g.l(v),v.forEach(E),n=le(b),r=z(b,"DIV",{class:!0});var T=F(r);a=z(T,"BUTTON",{class:!0});var w=F(a);te(s.$$.fragment,w),w.forEach(E),l=le(T),f=z(T,"BUTTON",{class:!0});var y=F(f);te(o.$$.fragment,y),y.forEach(E),T.forEach(E),b.forEach(E),this.h()},h(){I(e,"class","pointer-events-auto px-12"),I(a,"class","pointer-events-auto pl-4 hover:-translate-x-1 transition-transform"),I(f,"class","pointer-events-auto pr-4 hover:translate-x-1 transition-transform"),I(r,"class","pointer-events-none flex justify-between z-10"),I(i,"class","w-full h-full force-overlap text-white")},m(p,b){O(p,i,b),U(i,e),g&&g.m(e,null),U(i,n),U(i,r),U(r,a),ie(s,a,null),U(r,l),U(r,f),ie(o,f,null),c=!0,_||(d=[q(a,"click",t[2]),q(f,"click",t[3])],_=!0)},p(p,[b]){m!==(m=h(p))&&(g&&g.d(1),g=m&&m(p),g&&(g.c(),g.m(e,null)))},i(p){c||(L(s.$$.fragment,p),L(o.$$.fragment,p),c=!0)},o(p){$(s.$$.fragment,p),$(o.$$.fragment,p),c=!1},d(p){p&&E(i),g&&g.d(),ne(s),ne(o),_=!1,Ti(d)}}}function Yc(t,i,e){const n=["Vanilla","Chocolate","Waffle","Stroopwafel","Blueberry","Strawberry"];let r="Vanilla";function a(f){let o=n.indexOf(r);o+=f=="next"?1:-1,o>=n.length&&(o=0),o<0&&(o=n.length-1),e(0,r=n[o])}return[r,a,f=>{f.preventDefault(),a("prev")},f=>{f.preventDefault(),a("next")}]}class Xc extends fe{constructor(i){super(),he(this,i,Yc,Vc,ce,{})}}function qn(t,i,e){const n=t.slice();return n[3]=i[e],n}function Jn(t){let i,e=t[3]+"",n,r,a,s,l;function f(){return t[2](t[3])}return{c(){i=R("button"),n=lr(e),r=se(),this.h()},l(o){i=z(o,"BUTTON",{class:!0});var c=F(i);n=or(c,e),r=le(c),c.forEach(E),this.h()},h(){I(i,"class","tab w-full flex justify-center py-1 px-4 rounded-md svelte-1v0way8"),i.disabled=a=t[3]==t[0],Yi(i,"selected",t[3]==t[0])},m(o,c){O(o,i,c),U(i,n),U(i,r),s||(l=q(i,"click",f),s=!0)},p(o,c){t=o,c&1&&a!==(a=t[3]==t[0])&&(i.disabled=a),c&3&&Yi(i,"selected",t[3]==t[0])},d(o){o&&E(i),s=!1,l()}}}function jc(t){let i,e=`<span>Left Click: Reveal tile
                    <br/>
                    Right Click: Flag tile
                    <br/>
                    Middle Click: Move view
                    <br/>
                    Scroll Wheel: Zoom view
                    <br/> <br/>
                    Arrow Keys: Move view
                    <br/>
                    Open Square Bracket &#39;[&#39;: View zoom In
                    <br/>
                    Close Square Bracket &#39;]&#39;: View zoom Out
                    <br/></span>`;return{c(){i=R("div"),i.innerHTML=e,this.h()},l(n){i=z(n,"DIV",{class:!0,"data-svelte-h":!0}),Me(i)!=="svelte-docn7k"&&(i.innerHTML=e),this.h()},h(){I(i,"class","px-4")},m(n,r){O(n,i,r)},i:Ne,o:Ne,d(n){n&&E(i)}}}function Gc(t){let i,e,n;return e=new Xc({}),{c(){i=R("div"),ee(e.$$.fragment),this.h()},l(r){i=z(r,"DIV",{class:!0});var a=F(i);te(e.$$.fragment,a),a.forEach(E),this.h()},h(){I(i,"class","w-full h-full inline")},m(r,a){O(r,i,a),ie(e,i,null),n=!0},i(r){n||(L(e.$$.fragment,r),n=!0)},o(r){$(e.$$.fragment,r),n=!1},d(r){r&&E(i),ne(e)}}}function Wc(t){let i,e=`<div><a class="text-2xl font-bold" href="https://vulae.github.io/infinite-minesweeper">Infinite Minesweeper</a> <br/>
                    An infinite twist on Minesweeper that adds biomes that change the rules of the game.</div> <div class="pt-4"><span class="float-right text-xs font-extrabold">*Source code available on
                        <a class="underline" href="https://github.com/Vulae/infinite-minesweeper">GitHub</a></span></div>`;return{c(){i=R("div"),i.innerHTML=e,this.h()},l(n){i=z(n,"DIV",{class:!0,"data-svelte-h":!0}),Me(i)!=="svelte-1yloiaf"&&(i.innerHTML=e),this.h()},h(){I(i,"class","px-4 w-full h-full flex flex-col justify-between")},m(n,r){O(n,i,r)},i:Ne,o:Ne,d(n){n&&E(i)}}}function Kc(t){let i,e,n,r,a,s,l,f,o,c=Ut(t[1]),_=[];for(let g=0;g<c.length;g+=1)_[g]=Jn(qn(t,c,g));const d=[Wc,Gc,jc],h=[];function m(g,p){return g[0]=="Information"?0:g[0]=="Biomes"?1:g[0]=="Controls"?2:-1}return~(l=m(t))&&(f=h[l]=d[l](t)),{c(){i=R("div"),e=R("div");for(let g=0;g<_.length;g+=1)_[g].c();n=se(),r=R("div"),a=se(),s=R("div"),f&&f.c(),this.h()},l(g){i=z(g,"DIV",{class:!0});var p=F(i);e=z(p,"DIV",{class:!0});var b=F(e);for(let T=0;T<_.length;T+=1)_[T].l(b);b.forEach(E),n=le(p),r=z(p,"DIV",{class:!0}),F(r).forEach(E),a=le(p),s=z(p,"DIV",{class:!0});var v=F(s);f&&f.l(v),v.forEach(E),p.forEach(E),this.h()},h(){I(e,"class","px-4 grid grid-flow-col gap-4 items-center font-bold"),I(r,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full"),I(s,"class","w-[32rem] h-64 py-2 font-semibold"),I(i,"class","grid px-4 py-2 rounded-2xl bg-white bg-opacity-50")},m(g,p){O(g,i,p),U(i,e);for(let b=0;b<_.length;b+=1)_[b]&&_[b].m(e,null);U(i,n),U(i,r),U(i,a),U(i,s),~l&&h[l].m(s,null),o=!0},p(g,[p]){if(p&3){c=Ut(g[1]);let v;for(v=0;v<c.length;v+=1){const T=qn(g,c,v);_[v]?_[v].p(T,p):(_[v]=Jn(T),_[v].c(),_[v].m(e,null))}for(;v<_.length;v+=1)_[v].d(1);_.length=c.length}let b=l;l=m(g),l!==b&&(f&&(ct(),$(h[b],1,1,()=>{h[b]=null}),ft()),~l?(f=h[l],f||(f=h[l]=d[l](g),f.c()),L(f,1),f.m(s,null)):f=null)},i(g){o||(L(f),o=!0)},o(g){$(f),o=!1},d(g){g&&E(i),sr(_,g),~l&&h[l].d()}}}function qc(t,i,e){const n=["Information","Biomes","Controls"];let r="Information";return[r,n,s=>e(0,r=s)]}class Jc extends fe{constructor(i){super(),he(this,i,qc,Kc,ce,{})}}function Qc(t){let i;const e=t[2].default,n=je(e,t,t[3],null);return{c(){n&&n.c()},l(r){n&&n.l(r)},m(r,a){n&&n.m(r,a),i=!0},p(r,a){n&&n.p&&(!i||a&8)&&Ge(n,e,r,r[3],i?Ke(e,r[3],a,null):We(r[3]),null)},i(r){i||(L(n,r),i=!0)},o(r){$(n,r),i=!1},d(r){n&&n.d(r)}}}function ef(t){let i,e;const n=[{name:"skull"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Qc]},$$scope:{ctx:t}};for(let a=0;a<n.length;a+=1)r=X(r,n[a]);return i=new Kt({props:r}),{c(){ee(i.$$.fragment)},l(a){te(i.$$.fragment,a)},m(a,s){ie(i,a,s),e=!0},p(a,[s]){const l=s&3?qe(n,[n[0],s&2&&Ht(a[1]),s&1&&{iconNode:a[0]}]):{};s&8&&(l.$$scope={dirty:s,ctx:a}),i.$set(l)},i(a){e||(L(i.$$.fragment,a),e=!0)},o(a){$(i.$$.fragment,a),e=!1},d(a){ne(i,a)}}}function tf(t,i,e){let{$$slots:n={},$$scope:r}=i;const a=[["circle",{cx:"9",cy:"12",r:"1"}],["circle",{cx:"15",cy:"12",r:"1"}],["path",{d:"M8 20v2h8v-2"}],["path",{d:"m12.5 17-.5-1-.5 1h1z"}],["path",{d:"M16 20a2 2 0 0 0 1.56-3.25 8 8 0 1 0-11.12 0A2 2 0 0 0 8 20"}]];return t.$$set=s=>{e(1,i=X(X({},i),be(s))),"$$scope"in s&&e(3,r=s.$$scope)},i=be(i),[a,i,n,r]}class nf extends fe{constructor(i){super(),he(this,i,tf,ef,ce,{})}}function Qn(t){let i,e;return i=new wc({props:{saveSlot:t[0]}}),{c(){ee(i.$$.fragment)},l(n){te(i.$$.fragment,n)},m(n,r){ie(i,n,r),e=!0},p(n,r){const a={};r&1&&(a.saveSlot=n[0]),i.$set(a)},i(n){e||(L(i.$$.fragment,n),e=!0)},o(n){$(i.$$.fragment,n),e=!1},d(n){ne(i,n)}}}function er(t){let i,e,n,r,a,s,l,f,o;return r=new nf({}),{c(){i=R("div"),e=se(),n=R("div"),ee(r.$$.fragment),a=se(),s=R("span"),l=lr(t[4]),this.h()},l(c){i=z(c,"DIV",{class:!0}),F(i).forEach(E),e=le(c),n=z(c,"DIV",{class:!0,title:!0});var _=F(n);te(r.$$.fragment,_),a=le(_),s=z(_,"SPAN",{class:!0});var d=F(s);l=or(d,t[4]),d.forEach(E),_.forEach(E),this.h()},h(){I(i,"class","w-full h-full bg-white rounded-full p-[1px]"),I(s,"class","text-sm"),I(n,"class","flex items-center"),I(n,"title",f=t[4]+" deaths"),re(n,"flex-direction",t[1]=="horizontal"?"row":"column")},m(c,_){O(c,i,_),O(c,e,_),O(c,n,_),ie(r,n,null),U(n,a),U(n,s),U(s,l),o=!0},p(c,_){(!o||_&16)&&ya(l,c[4]),(!o||_&16&&f!==(f=c[4]+" deaths"))&&I(n,"title",f),_&2&&re(n,"flex-direction",c[1]=="horizontal"?"row":"column")},i(c){o||(L(r.$$.fragment,c),o=!0)},o(c){$(r.$$.fragment,c),o=!1},d(c){c&&(E(i),E(e),E(n)),ne(r)}}}function rf(t){let i,e;return i=new Jc({}),{c(){ee(i.$$.fragment)},l(n){te(i.$$.fragment,n)},m(n,r){ie(i,n,r),e=!0},i(n){e||(L(i.$$.fragment,n),e=!0)},o(n){$(i.$$.fragment,n),e=!1},d(n){ne(i,n)}}}function af(t){let i,e,n,r,a,s,l,f,o,c,_,d,h,m,g,p,b=t[0]&&Qn(t);f=new Sc({});let v=t[4]!==null&&er(t);function T(y){t[8](y)}let w={$$slots:{default:[rf]},$$scope:{ctx:t}};return t[3]!==void 0&&(w.visible=t[3]),d=new Mc({props:w}),zt.push(()=>ka(d,"visible",T)),{c(){i=R("div"),e=R("div"),b&&b.c(),n=se(),r=R("div"),a=R("div"),s=R("div"),l=R("button"),ee(f.$$.fragment),o=se(),v&&v.c(),_=se(),ee(d.$$.fragment),this.h()},l(y){i=z(y,"DIV",{class:!0});var A=F(i);e=z(A,"DIV",{class:!0});var x=F(e);b&&b.l(x),x.forEach(E),n=le(A),r=z(A,"DIV",{class:!0});var B=F(r);a=z(B,"DIV",{class:!0});var M=F(a);s=z(M,"DIV",{class:!0});var S=F(s);l=z(S,"BUTTON",{class:!0,title:!0});var D=F(l);te(f.$$.fragment,D),D.forEach(E),o=le(S),v&&v.l(S),S.forEach(E),M.forEach(E),B.forEach(E),A.forEach(E),_=le(y),te(d.$$.fragment,y),this.h()},h(){I(e,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1"),I(l,"class","rounded-full drop-shadow-sm"),I(l,"title","Information"),I(s,"class","pointer-events-auto flex items-center gap-2 rounded-full bg-white bg-opacity-30 backdrop-blur-md shadow-lg text-white font-bold stroke-[3]"),re(s,"flex-direction",t[1]=="vertical"?"column":"row"),re(s,"padding",t[1]=="vertical"?"1rem 0.5rem":"0.5rem 1rem"),I(a,"class","w-full h-full flex items-center p-4"),re(a,"flex-direction",t[1]=="vertical"?"row":"column"),re(a,"justify-content",t[2]=="start"?"start":"end"),I(r,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1 pointer-events-none"),re(r,"opacity",t[3]?0:1),I(i,"class","w-screen h-screen grid grid-cols-1 grid-rows-1")},m(y,A){O(y,i,A),U(i,e),b&&b.m(e,null),U(i,n),U(i,r),U(r,a),U(a,s),U(s,l),ie(f,l,null),U(s,o),v&&v.m(s,null),O(y,_,A),ie(d,y,A),m=!0,g||(p=[q(l,"click",t[6]),tr(c=_a.call(null,r,t[7]))],g=!0)},p(y,[A]){y[0]?b?(b.p(y,A),A&1&&L(b,1)):(b=Qn(y),b.c(),L(b,1),b.m(e,null)):b&&(ct(),$(b,1,1,()=>{b=null}),ft()),y[4]!==null?v?(v.p(y,A),A&16&&L(v,1)):(v=er(y),v.c(),L(v,1),v.m(s,null)):v&&(ct(),$(v,1,1,()=>{v=null}),ft()),A&2&&re(s,"flex-direction",y[1]=="vertical"?"column":"row"),A&2&&re(s,"padding",y[1]=="vertical"?"1rem 0.5rem":"0.5rem 1rem"),A&2&&re(a,"flex-direction",y[1]=="vertical"?"row":"column"),A&4&&re(a,"justify-content",y[2]=="start"?"start":"end"),c&&ir(c.update)&&A&6&&c.update.call(null,y[7]),A&8&&re(r,"opacity",y[3]?0:1);const x={};A&512&&(x.$$scope={dirty:A,ctx:y}),!h&&A&8&&(h=!0,x.visible=y[3],va(()=>h=!1)),d.$set(x)},i(y){m||(L(b),L(f.$$.fragment,y),L(v),L(d.$$.fragment,y),m=!0)},o(y){$(b),$(f.$$.fragment,y),$(v),$(d.$$.fragment,y),m=!1},d(y){y&&(E(i),E(_)),b&&b.d(),ne(f),v&&v.d(),ne(d,y),g=!1,Ti(p)}}}function sf(t,i,e){let n;di(t,Bt,d=>e(5,n=d));let r=null;Si(()=>{const d=new URL(location.href);e(0,r=d.searchParams.get("saveSlot")??"save")});let a="vertical",s="end",l=!0,f;const o=()=>e(3,l=!0),c=(d,h)=>{e(1,a=d>h?"vertical":"horizontal"),e(2,s=d>h?"end":"start")};function _(d){l=d,e(3,l)}return t.$$.update=()=>{t.$$.dirty&32&&(n!==null?(e(4,f=n.deaths),n.addEventListener("die",()=>{e(4,f=n.deaths)})):e(4,f=null))},[r,a,s,l,f,n,o,c,_]}class hf extends fe{constructor(i){super(),he(this,i,sf,af,ce,{})}}export{hf as component};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
