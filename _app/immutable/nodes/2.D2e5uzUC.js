var Fo=Object.defineProperty;var Ho=(t,n,e)=>n in t?Fo(t,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[n]=e;var y=(t,n,e)=>(Ho(t,typeof n!="symbol"?n+"":n,e),e);import{s as fe,N as De,e as L,c as U,b as H,f as A,p as M,S as Lr,T as Xt,i as V,U as ce,V as Zo,P as Me,Q as Re,R as Oe,w as Jt,W as Ks,o as ii,X as ri,r as Ce,l as Ve,Y as Js,M as ve,n as Se,Z as Qs,z as ea,k as Rt,a as J,g as Q,_ as se,K as ta,L as na,$ as Qn,h as P,a0 as Ki,a1 as Ur,a2 as be,t as Qe,d as et,q as He,j as qn,a3 as Vo,a4 as zr,B as Yo,a5 as $r,a6 as Xo,a7 as Wo,a8 as dt}from"../chunks/scheduler.Cm_C_nGF.js";import{S as he,i as ue,a as F,t as Z,g as An,c as In,b as te,d as ne,m as ie,e as re,f as _t}from"../chunks/index.De5vRBfx.js";function Wt(t){return(t==null?void 0:t.length)!==void 0?t:Array.from(t)}function it(t,n){const e={},i={},r={$$scope:1};let s=t.length;for(;s--;){const a=t[s],o=n[s];if(o){for(const f in a)f in o||(i[f]=1);for(const f in o)r[f]||(e[f]=o[f],r[f]=1);t[s]=o}else for(const f in a)r[f]=1}for(const a in i)a in e||(e[a]=void 0);return e}function Tt(t){return typeof t=="object"&&t!==null?t:{}}class Br{constructor(n){y(this,"buffer");y(this,"bytePointer",0);y(this,"bitPointer",0);this.buffer=typeof n=="number"?new ArrayBuffer(n):"buffer"in n?n.buffer:n}get view(){return new DataView(this.buffer)}skipBits(n){this.bitPointer+=n,this.bytePointer+=Math.floor(this.bitPointer/8),this.bitPointer%=8}final(){return this.buffer.slice(0,this.bitPointer==0?this.bytePointer:this.bytePointer+1)}readBit(){const e=(this.view.getUint8(this.bytePointer)>>this.bitPointer&1)!=0;return this.skipBits(1),e}readBits(n){let e=0;for(let i=0;i<n;i++)e|=(this.readBit()?1:0)<<i;return e}writeBit(n){let e=this.view.getUint8(this.bytePointer);n?e|=1<<this.bitPointer:e&=1<<this.bitPointer^255,this.view.setUint8(this.bytePointer,e),this.skipBits(1)}writeBits(n,e){for(let i=0;i<n;i++)this.writeBit((e&1)!=0),e>>=1}}function Fr(t){let n=0;for(;t;)t&=t-1,n++;return n}const j=64;function Ji(t,n){return()=>{t|=0,t=t+2654435769|0;let e=t^t>>>16;e=Math.imul(e,569420461),e=e^e>>>15,e=Math.imul(e,1935289751);const i=(e=e^e>>>15)>>>0;return n?i/4294967296:i}}function Le(t,n,e,i){n=n*2654435761&2147483647,e=e*2246822519&2147483647,i=i*3266489917&2147483647,t=t*668265263&2147483647;let r=n^e^i^t;return r=r*374761393+2654435769,r^=r<<13,r^=r>>17,r^=r<<5,(r>>>0)/4294967296}function jo(t,n){n*=t.reduce((e,i)=>e+i,0);for(let e=0;e<t.length;e++)if(n-=t[e],n<=0)return e;throw new Error("Invalid weights")}function Go(t,n,e,i){let r=1/0,s=-1;for(let a=Math.floor(n)-1;a<Math.ceil(n)+1;a++)for(let o=Math.floor(e)-1;o<Math.ceil(e)+1;o++){const f=a+Le(t,a,o,0)-.5,l=o+Le(t,a,o,1)-.5,h=(f-n)**2+(l-e)**2;h<r&&(r=h,s=jo(i,Le(t,a,o,2)))}if(s==-1)throw new Error("Voronoi noise error.");return s}function Hr(t,n,e){function i(d,v,w){return(v-d)*((w*(w*6-15)+10)*w*w*w)+d}const r=(d,v)=>{const w=Le(t,d,v,0);return{x:Math.cos(w),y:Math.sin(w)}},s=(d,v,w,E)=>{const I=r(d,v),b=w-d,R=E-v;return b*I.x+R*I.y},a=Math.floor(n),o=a+1,f=Math.floor(e),l=f+1,h=n-a,p=e-f;return i(i(s(a,f,n,e),s(o,f,n,e),h),i(s(a,l,n,e),s(o,l,n,e),h),p)}function si(t){return t<0?0:t>1?1:t}function qo(t,n,e,i){return Math.sqrt((e-t)**2+(i-n)**2)}function Ko(t,n,e,i,r){return(t<n||t>e)&&console.warn(`Mapped value outside of mapping range. mapRange(${t}, ${n}, ${e}, ${i}, ${r})`),i+(t-n)/(e-n)*(r-i)}function Jo(t,n,e,i,r){return Math.floor(Ko(t,n,e,i,r+1))}function ia(t,n){if(t instanceof HTMLCanvasElement){const e=t.getContext("2d");if(!e)throw new Error("2d canvas context is not supported on this machine or browser.");return[t,e]}else if(t instanceof HTMLImageElement){const e=document.createElement("canvas");e.width=t.width,e.height=t.height;const i=e.getContext("2d");if(!i)throw new Error("2d canvas context is not supported on this machine or browser.");return[e,i]}else if(typeof t=="number"){const e=document.createElement("canvas");e.width=t,e.height=n;const i=e.getContext("2d");if(!i)throw new Error("2d canvas context is not supported on this machine or browser.");return[e,i]}else{const e=document.createElement("canvas"),i=e.getContext("2d");if(!i)throw new Error("2d canvas context is not supported on this machine or browser.");return[e,i]}}class ra{constructor(n,e,i){y(this,"world");y(this,"x");y(this,"y");y(this,"minesNearbyCache",null);this.world=n,this.x=e,this.y=i}minesNearby(n=!1){if(this.minesNearbyCache!==null&&n)return this.minesNearbyCache;this.minesNearbyCache=0;for(const e of this.searchPattern)this.minesNearbyCache+=this.world.getTile(this.x+e.x,this.y+e.y).numMines();return this.minesNearbyCache}flagsNearby(){let n=0;for(const e of this.searchPattern)n+=this.world.getTile(this.x+e.x,this.y+e.y).numFlags();return n}isDeathTile(){const n=this.world.getGeneratedChunk(Math.floor(this.x/j),Math.floor(this.y/j)),e=this.x-n.chunkX*j,i=this.y-n.chunkY*j;return n.deaths.some(r=>r.x==e&&r.y==i)}static load(n,e,i,r){throw new Error("Tile.load needs to be implemented on derived class.")}}class sa extends ra{constructor(e,i,r,s){super(e,i,r);y(this,"_numMines");y(this,"_numFlags",0);y(this,"isRevealed",!1);y(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this._numMines=s}numMines(){return this._numMines}numFlags(){return this._numFlags}flag(){this.isRevealed||(this._numFlags++,this._numFlags%=this.numMaxMines+1)}reveal(){return this.isRevealed||this._numFlags>0?!1:(this._numMines==0?this.isRevealed=!0:this._numFlags=this._numMines,!0)}save(e){e.writeBit(this.isRevealed),this.isRevealed||e.writeBits(Fr(this.numMaxMines),this._numFlags)}static loadInternal(e,i){return e.isRevealed=i.readBit(),e.isRevealed||(e._numFlags=i.readBits(Fr(e.numMaxMines))),e}static load(e,i,r,s){throw new Error("MultiMineTile.load needs to be implemented on derived class.")}}class Qi extends sa{constructor(e,i,r){const s=Le(e.tileSeed,i,r,0)>.8?Jo(Le(e.tileSeed,i,r,1),0,1,1,3):0;super(e,i,r,s);y(this,"type","blueberry");y(this,"numMaxMines",3)}static load(e,i,r,s){return this.loadInternal(new Qi(e,i,r),s)}}var Ct=(t=>(t[t.Covered=0]="Covered",t[t.Flagged=1]="Flagged",t[t.Revealed=2]="Revealed",t))(Ct||{});class Cn extends ra{constructor(e,i,r,s){super(e,i,r);y(this,"isMine");y(this,"state",0);y(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this.isMine=s}numMines(){return this.isMine?1:0}numFlags(){return this.state==1?1:0}flag(){this.state!=2&&(this.state==0?this.state=1:this.state=0)}reveal(){return this.state!=0?!1:(this.isMine?this.state=1:this.state=2,!0)}save(e){this.isMine?e.writeBit(this.state==1):e.writeBits(2,this.state)}static loadInternal(e,i){return e.isMine?e.state=i.readBit()?1:0:e.state=i.readBits(2),e}static load(e,i,r,s){throw new Error("SingleMineTile.load needs to be implemented on derived class.")}}class er extends Cn{constructor(e,i,r){const s=Le(e.tileSeed,i,r,0)>.625;super(e,i,r,s);y(this,"type","chocolate")}static load(e,i,r,s){return this.loadInternal(new er(e,i,r),s)}}class tr extends Cn{constructor(e,i,r){const s=Le(e.tileSeed,i,r,0)>.825;super(e,i,r,s);y(this,"type","strawberry");y(this,"secondaryNearbyCountModifier",null);y(this,"secondaryNearbyCountRightSide",!1);Le(e.tileSeed,i,r,1)>.3&&(this.secondaryNearbyCountModifier=Le(e.tileSeed,i,r,2)>.3?1:-1,this.secondaryNearbyCountRightSide=Le(e.tileSeed,i,r,3)>.5)}minesNearbySecondary(e=!1){if(this.secondaryNearbyCountModifier==null)return null;const i=this.minesNearby(e);if(i<=0)return null;const r=i+this.secondaryNearbyCountModifier;return r<=0?null:r}static load(e,i,r,s){return this.loadInternal(new tr(e,i,r),s)}}function aa(t,n,e,i){const r=Math.floor(e/n),s=Math.floor(i/n),a=(r+s%2)%2==0,o=Math.abs(e%n)+Math.abs(i%n)*n,f=Math.floor(Le(t.tileSeed,r,s,0)*n**2),l=a?o!=f:o==f;return{isDark:a,isMine:l}}class nr extends Cn{constructor(e,i,r){const{isDark:s,isMine:a}=aa(e,2,i,r);super(e,i,r,a);y(this,"type","waffle");y(this,"isDark");this.isDark=s}static load(e,i,r,s){return this.loadInternal(new nr(e,i,r),s)}}class ir extends Cn{constructor(e,i,r){const{isDark:s,isMine:a}=aa(e,3,i,r);super(e,i,r,a);y(this,"type","stroopwafel");y(this,"isDark");this.isDark=s}static load(e,i,r,s){return this.loadInternal(new ir(e,i,r),s)}}class rr extends Cn{constructor(e,i,r){const s=Le(e.tileSeed,i,r,0)>.85;super(e,i,r,s);y(this,"type","vanilla")}static load(e,i,r,s){return this.loadInternal(new rr(e,i,r),s)}}const Qo={type:"collection",weight:1,scale:24,smoothness:.8,biomes:[{type:"collection",weight:5,scale:24,smoothness:.8,biomes:[{type:"biome",weight:3,tile:rr},{type:"biome",weight:1,tile:er}]},{type:"collection",weight:2,scale:64,smoothness:0,biomes:[{type:"biome",weight:1,tile:nr},{type:"biome",weight:2,tile:ir}]},{type:"collection",weight:2,scale:32,smoothness:.5,biomes:[{type:"biome",weight:1,tile:Qi},{type:"biome",weight:1,tile:tr}]}]};function el(t,n,e,i,r){const s=Ji(t,!1),a=Hr(s(),n,e)*i,o=Hr(s(),n,e)*i;return Go(s(),n+a,e+o,r)}function oa(t,n,e){const i=Ji(t.biomeSeed,!1);let r=Qo;for(;r.type=="collection";){const s=el(i(),n/r.scale,e/r.scale,r.smoothness,r.biomes.map(a=>a.weight));r=r.biomes[s]}return r.tile}function la(t,n,e){const i=oa(t,n,e);return new i(t,n,e)}/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */const tl=4,Zr=0,Vr=1,nl=2;function Qt(t){let n=t.length;for(;--n>=0;)t[n]=0}const il=0,ca=1,rl=2,sl=3,al=258,sr=29,Nn=256,gn=Nn+1+sr,Vt=30,ar=19,fa=2*gn+1,Nt=15,ki=16,ol=7,or=256,ha=16,ua=17,da=18,zi=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),Kn=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),ll=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),_a=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),cl=512,mt=new Array((gn+2)*2);Qt(mt);const _n=new Array(Vt*2);Qt(_n);const vn=new Array(cl);Qt(vn);const bn=new Array(al-sl+1);Qt(bn);const lr=new Array(sr);Qt(lr);const ei=new Array(Vt);Qt(ei);function Ei(t,n,e,i,r){this.static_tree=t,this.extra_bits=n,this.extra_base=e,this.elems=i,this.max_length=r,this.has_stree=t&&t.length}let ma,pa,ga;function Ti(t,n){this.dyn_tree=t,this.max_code=0,this.stat_desc=n}const va=t=>t<256?vn[t]:vn[256+(t>>>7)],wn=(t,n)=>{t.pending_buf[t.pending++]=n&255,t.pending_buf[t.pending++]=n>>>8&255},Ne=(t,n,e)=>{t.bi_valid>ki-e?(t.bi_buf|=n<<t.bi_valid&65535,wn(t,t.bi_buf),t.bi_buf=n>>ki-t.bi_valid,t.bi_valid+=e-ki):(t.bi_buf|=n<<t.bi_valid&65535,t.bi_valid+=e)},Je=(t,n,e)=>{Ne(t,e[n*2],e[n*2+1])},ba=(t,n)=>{let e=0;do e|=t&1,t>>>=1,e<<=1;while(--n>0);return e>>>1},fl=t=>{t.bi_valid===16?(wn(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=t.bi_buf&255,t.bi_buf>>=8,t.bi_valid-=8)},hl=(t,n)=>{const e=n.dyn_tree,i=n.max_code,r=n.stat_desc.static_tree,s=n.stat_desc.has_stree,a=n.stat_desc.extra_bits,o=n.stat_desc.extra_base,f=n.stat_desc.max_length;let l,h,p,m,d,v,w=0;for(m=0;m<=Nt;m++)t.bl_count[m]=0;for(e[t.heap[t.heap_max]*2+1]=0,l=t.heap_max+1;l<fa;l++)h=t.heap[l],m=e[e[h*2+1]*2+1]+1,m>f&&(m=f,w++),e[h*2+1]=m,!(h>i)&&(t.bl_count[m]++,d=0,h>=o&&(d=a[h-o]),v=e[h*2],t.opt_len+=v*(m+d),s&&(t.static_len+=v*(r[h*2+1]+d)));if(w!==0){do{for(m=f-1;t.bl_count[m]===0;)m--;t.bl_count[m]--,t.bl_count[m+1]+=2,t.bl_count[f]--,w-=2}while(w>0);for(m=f;m!==0;m--)for(h=t.bl_count[m];h!==0;)p=t.heap[--l],!(p>i)&&(e[p*2+1]!==m&&(t.opt_len+=(m-e[p*2+1])*e[p*2],e[p*2+1]=m),h--)}},wa=(t,n,e)=>{const i=new Array(Nt+1);let r=0,s,a;for(s=1;s<=Nt;s++)r=r+e[s-1]<<1,i[s]=r;for(a=0;a<=n;a++){let o=t[a*2+1];o!==0&&(t[a*2]=ba(i[o]++,o))}},ul=()=>{let t,n,e,i,r;const s=new Array(Nt+1);for(e=0,i=0;i<sr-1;i++)for(lr[i]=e,t=0;t<1<<zi[i];t++)bn[e++]=i;for(bn[e-1]=i,r=0,i=0;i<16;i++)for(ei[i]=r,t=0;t<1<<Kn[i];t++)vn[r++]=i;for(r>>=7;i<Vt;i++)for(ei[i]=r<<7,t=0;t<1<<Kn[i]-7;t++)vn[256+r++]=i;for(n=0;n<=Nt;n++)s[n]=0;for(t=0;t<=143;)mt[t*2+1]=8,t++,s[8]++;for(;t<=255;)mt[t*2+1]=9,t++,s[9]++;for(;t<=279;)mt[t*2+1]=7,t++,s[7]++;for(;t<=287;)mt[t*2+1]=8,t++,s[8]++;for(wa(mt,gn+1,s),t=0;t<Vt;t++)_n[t*2+1]=5,_n[t*2]=ba(t,5);ma=new Ei(mt,zi,Nn+1,gn,Nt),pa=new Ei(_n,Kn,0,Vt,Nt),ga=new Ei(new Array(0),ll,0,ar,ol)},ya=t=>{let n;for(n=0;n<gn;n++)t.dyn_ltree[n*2]=0;for(n=0;n<Vt;n++)t.dyn_dtree[n*2]=0;for(n=0;n<ar;n++)t.bl_tree[n*2]=0;t.dyn_ltree[or*2]=1,t.opt_len=t.static_len=0,t.sym_next=t.matches=0},ka=t=>{t.bi_valid>8?wn(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0},Yr=(t,n,e,i)=>{const r=n*2,s=e*2;return t[r]<t[s]||t[r]===t[s]&&i[n]<=i[e]},Si=(t,n,e)=>{const i=t.heap[e];let r=e<<1;for(;r<=t.heap_len&&(r<t.heap_len&&Yr(n,t.heap[r+1],t.heap[r],t.depth)&&r++,!Yr(n,i,t.heap[r],t.depth));)t.heap[e]=t.heap[r],e=r,r<<=1;t.heap[e]=i},Xr=(t,n,e)=>{let i,r,s=0,a,o;if(t.sym_next!==0)do i=t.pending_buf[t.sym_buf+s++]&255,i+=(t.pending_buf[t.sym_buf+s++]&255)<<8,r=t.pending_buf[t.sym_buf+s++],i===0?Je(t,r,n):(a=bn[r],Je(t,a+Nn+1,n),o=zi[a],o!==0&&(r-=lr[a],Ne(t,r,o)),i--,a=va(i),Je(t,a,e),o=Kn[a],o!==0&&(i-=ei[a],Ne(t,i,o)));while(s<t.sym_next);Je(t,or,n)},$i=(t,n)=>{const e=n.dyn_tree,i=n.stat_desc.static_tree,r=n.stat_desc.has_stree,s=n.stat_desc.elems;let a,o,f=-1,l;for(t.heap_len=0,t.heap_max=fa,a=0;a<s;a++)e[a*2]!==0?(t.heap[++t.heap_len]=f=a,t.depth[a]=0):e[a*2+1]=0;for(;t.heap_len<2;)l=t.heap[++t.heap_len]=f<2?++f:0,e[l*2]=1,t.depth[l]=0,t.opt_len--,r&&(t.static_len-=i[l*2+1]);for(n.max_code=f,a=t.heap_len>>1;a>=1;a--)Si(t,e,a);l=s;do a=t.heap[1],t.heap[1]=t.heap[t.heap_len--],Si(t,e,1),o=t.heap[1],t.heap[--t.heap_max]=a,t.heap[--t.heap_max]=o,e[l*2]=e[a*2]+e[o*2],t.depth[l]=(t.depth[a]>=t.depth[o]?t.depth[a]:t.depth[o])+1,e[a*2+1]=e[o*2+1]=l,t.heap[1]=l++,Si(t,e,1);while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],hl(t,n),wa(e,f,t.bl_count)},Wr=(t,n,e)=>{let i,r=-1,s,a=n[0*2+1],o=0,f=7,l=4;for(a===0&&(f=138,l=3),n[(e+1)*2+1]=65535,i=0;i<=e;i++)s=a,a=n[(i+1)*2+1],!(++o<f&&s===a)&&(o<l?t.bl_tree[s*2]+=o:s!==0?(s!==r&&t.bl_tree[s*2]++,t.bl_tree[ha*2]++):o<=10?t.bl_tree[ua*2]++:t.bl_tree[da*2]++,o=0,r=s,a===0?(f=138,l=3):s===a?(f=6,l=3):(f=7,l=4))},jr=(t,n,e)=>{let i,r=-1,s,a=n[0*2+1],o=0,f=7,l=4;for(a===0&&(f=138,l=3),i=0;i<=e;i++)if(s=a,a=n[(i+1)*2+1],!(++o<f&&s===a)){if(o<l)do Je(t,s,t.bl_tree);while(--o!==0);else s!==0?(s!==r&&(Je(t,s,t.bl_tree),o--),Je(t,ha,t.bl_tree),Ne(t,o-3,2)):o<=10?(Je(t,ua,t.bl_tree),Ne(t,o-3,3)):(Je(t,da,t.bl_tree),Ne(t,o-11,7));o=0,r=s,a===0?(f=138,l=3):s===a?(f=6,l=3):(f=7,l=4)}},dl=t=>{let n;for(Wr(t,t.dyn_ltree,t.l_desc.max_code),Wr(t,t.dyn_dtree,t.d_desc.max_code),$i(t,t.bl_desc),n=ar-1;n>=3&&t.bl_tree[_a[n]*2+1]===0;n--);return t.opt_len+=3*(n+1)+5+5+4,n},_l=(t,n,e,i)=>{let r;for(Ne(t,n-257,5),Ne(t,e-1,5),Ne(t,i-4,4),r=0;r<i;r++)Ne(t,t.bl_tree[_a[r]*2+1],3);jr(t,t.dyn_ltree,n-1),jr(t,t.dyn_dtree,e-1)},ml=t=>{let n=4093624447,e;for(e=0;e<=31;e++,n>>>=1)if(n&1&&t.dyn_ltree[e*2]!==0)return Zr;if(t.dyn_ltree[9*2]!==0||t.dyn_ltree[10*2]!==0||t.dyn_ltree[13*2]!==0)return Vr;for(e=32;e<Nn;e++)if(t.dyn_ltree[e*2]!==0)return Vr;return Zr};let Gr=!1;const pl=t=>{Gr||(ul(),Gr=!0),t.l_desc=new Ti(t.dyn_ltree,ma),t.d_desc=new Ti(t.dyn_dtree,pa),t.bl_desc=new Ti(t.bl_tree,ga),t.bi_buf=0,t.bi_valid=0,ya(t)},Ea=(t,n,e,i)=>{Ne(t,(il<<1)+(i?1:0),3),ka(t),wn(t,e),wn(t,~e),e&&t.pending_buf.set(t.window.subarray(n,n+e),t.pending),t.pending+=e},gl=t=>{Ne(t,ca<<1,3),Je(t,or,mt),fl(t)},vl=(t,n,e,i)=>{let r,s,a=0;t.level>0?(t.strm.data_type===nl&&(t.strm.data_type=ml(t)),$i(t,t.l_desc),$i(t,t.d_desc),a=dl(t),r=t.opt_len+3+7>>>3,s=t.static_len+3+7>>>3,s<=r&&(r=s)):r=s=e+5,e+4<=r&&n!==-1?Ea(t,n,e,i):t.strategy===tl||s===r?(Ne(t,(ca<<1)+(i?1:0),3),Xr(t,mt,_n)):(Ne(t,(rl<<1)+(i?1:0),3),_l(t,t.l_desc.max_code+1,t.d_desc.max_code+1,a+1),Xr(t,t.dyn_ltree,t.dyn_dtree)),ya(t),i&&ka(t)},bl=(t,n,e)=>(t.pending_buf[t.sym_buf+t.sym_next++]=n,t.pending_buf[t.sym_buf+t.sym_next++]=n>>8,t.pending_buf[t.sym_buf+t.sym_next++]=e,n===0?t.dyn_ltree[e*2]++:(t.matches++,n--,t.dyn_ltree[(bn[e]+Nn+1)*2]++,t.dyn_dtree[va(n)*2]++),t.sym_next===t.sym_end);var wl=pl,yl=Ea,kl=vl,El=bl,Tl=gl,Sl={_tr_init:wl,_tr_stored_block:yl,_tr_flush_block:kl,_tr_tally:El,_tr_align:Tl};const xl=(t,n,e,i)=>{let r=t&65535|0,s=t>>>16&65535|0,a=0;for(;e!==0;){a=e>2e3?2e3:e,e-=a;do r=r+n[i++]|0,s=s+r|0;while(--a);r%=65521,s%=65521}return r|s<<16|0};var yn=xl;const Al=()=>{let t,n=[];for(var e=0;e<256;e++){t=e;for(var i=0;i<8;i++)t=t&1?3988292384^t>>>1:t>>>1;n[e]=t}return n},Il=new Uint32Array(Al()),Cl=(t,n,e,i)=>{const r=Il,s=i+e;t^=-1;for(let a=i;a<s;a++)t=t>>>8^r[(t^n[a])&255];return t^-1};var ge=Cl,Pt={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},zt={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:Nl,_tr_stored_block:Bi,_tr_flush_block:Dl,_tr_tally:wt,_tr_align:Ml}=Sl,{Z_NO_FLUSH:yt,Z_PARTIAL_FLUSH:Rl,Z_FULL_FLUSH:Ol,Z_FINISH:Ze,Z_BLOCK:qr,Z_OK:ke,Z_STREAM_END:Kr,Z_STREAM_ERROR:tt,Z_DATA_ERROR:Pl,Z_BUF_ERROR:xi,Z_DEFAULT_COMPRESSION:Ll,Z_FILTERED:Ul,Z_HUFFMAN_ONLY:Vn,Z_RLE:zl,Z_FIXED:$l,Z_DEFAULT_STRATEGY:Bl,Z_UNKNOWN:Fl,Z_DEFLATED:ai}=zt,Hl=9,Zl=15,Vl=8,Yl=29,Xl=256,Fi=Xl+1+Yl,Wl=30,jl=19,Gl=2*Fi+1,ql=15,G=3,bt=258,nt=bt+G+1,Kl=32,jt=42,cr=57,Hi=69,Zi=73,Vi=91,Yi=103,Dt=113,hn=666,Ae=1,en=2,Lt=3,tn=4,Jl=3,Mt=(t,n)=>(t.msg=Pt[n],n),Jr=t=>t*2-(t>4?9:0),vt=t=>{let n=t.length;for(;--n>=0;)t[n]=0},Ql=t=>{let n,e,i,r=t.w_size;n=t.hash_size,i=n;do e=t.head[--i],t.head[i]=e>=r?e-r:0;while(--n);n=r,i=n;do e=t.prev[--i],t.prev[i]=e>=r?e-r:0;while(--n)};let ec=(t,n,e)=>(n<<t.hash_shift^e)&t.hash_mask,kt=ec;const Pe=t=>{const n=t.state;let e=n.pending;e>t.avail_out&&(e=t.avail_out),e!==0&&(t.output.set(n.pending_buf.subarray(n.pending_out,n.pending_out+e),t.next_out),t.next_out+=e,n.pending_out+=e,t.total_out+=e,t.avail_out-=e,n.pending-=e,n.pending===0&&(n.pending_out=0))},Ue=(t,n)=>{Dl(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,n),t.block_start=t.strstart,Pe(t.strm)},K=(t,n)=>{t.pending_buf[t.pending++]=n},cn=(t,n)=>{t.pending_buf[t.pending++]=n>>>8&255,t.pending_buf[t.pending++]=n&255},Xi=(t,n,e,i)=>{let r=t.avail_in;return r>i&&(r=i),r===0?0:(t.avail_in-=r,n.set(t.input.subarray(t.next_in,t.next_in+r),e),t.state.wrap===1?t.adler=yn(t.adler,n,r,e):t.state.wrap===2&&(t.adler=ge(t.adler,n,r,e)),t.next_in+=r,t.total_in+=r,r)},Ta=(t,n)=>{let e=t.max_chain_length,i=t.strstart,r,s,a=t.prev_length,o=t.nice_match;const f=t.strstart>t.w_size-nt?t.strstart-(t.w_size-nt):0,l=t.window,h=t.w_mask,p=t.prev,m=t.strstart+bt;let d=l[i+a-1],v=l[i+a];t.prev_length>=t.good_match&&(e>>=2),o>t.lookahead&&(o=t.lookahead);do if(r=n,!(l[r+a]!==v||l[r+a-1]!==d||l[r]!==l[i]||l[++r]!==l[i+1])){i+=2,r++;do;while(l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&i<m);if(s=bt-(m-i),i=m-bt,s>a){if(t.match_start=n,a=s,s>=o)break;d=l[i+a-1],v=l[i+a]}}while((n=p[n&h])>f&&--e!==0);return a<=t.lookahead?a:t.lookahead},Gt=t=>{const n=t.w_size;let e,i,r;do{if(i=t.window_size-t.lookahead-t.strstart,t.strstart>=n+(n-nt)&&(t.window.set(t.window.subarray(n,n+n-i),0),t.match_start-=n,t.strstart-=n,t.block_start-=n,t.insert>t.strstart&&(t.insert=t.strstart),Ql(t),i+=n),t.strm.avail_in===0)break;if(e=Xi(t.strm,t.window,t.strstart+t.lookahead,i),t.lookahead+=e,t.lookahead+t.insert>=G)for(r=t.strstart-t.insert,t.ins_h=t.window[r],t.ins_h=kt(t,t.ins_h,t.window[r+1]);t.insert&&(t.ins_h=kt(t,t.ins_h,t.window[r+G-1]),t.prev[r&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=r,r++,t.insert--,!(t.lookahead+t.insert<G)););}while(t.lookahead<nt&&t.strm.avail_in!==0)},Sa=(t,n)=>{let e=t.pending_buf_size-5>t.w_size?t.w_size:t.pending_buf_size-5,i,r,s,a=0,o=t.strm.avail_in;do{if(i=65535,s=t.bi_valid+42>>3,t.strm.avail_out<s||(s=t.strm.avail_out-s,r=t.strstart-t.block_start,i>r+t.strm.avail_in&&(i=r+t.strm.avail_in),i>s&&(i=s),i<e&&(i===0&&n!==Ze||n===yt||i!==r+t.strm.avail_in)))break;a=n===Ze&&i===r+t.strm.avail_in?1:0,Bi(t,0,0,a),t.pending_buf[t.pending-4]=i,t.pending_buf[t.pending-3]=i>>8,t.pending_buf[t.pending-2]=~i,t.pending_buf[t.pending-1]=~i>>8,Pe(t.strm),r&&(r>i&&(r=i),t.strm.output.set(t.window.subarray(t.block_start,t.block_start+r),t.strm.next_out),t.strm.next_out+=r,t.strm.avail_out-=r,t.strm.total_out+=r,t.block_start+=r,i-=r),i&&(Xi(t.strm,t.strm.output,t.strm.next_out,i),t.strm.next_out+=i,t.strm.avail_out-=i,t.strm.total_out+=i)}while(a===0);return o-=t.strm.avail_in,o&&(o>=t.w_size?(t.matches=2,t.window.set(t.strm.input.subarray(t.strm.next_in-t.w_size,t.strm.next_in),0),t.strstart=t.w_size,t.insert=t.strstart):(t.window_size-t.strstart<=o&&(t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,t.insert>t.strstart&&(t.insert=t.strstart)),t.window.set(t.strm.input.subarray(t.strm.next_in-o,t.strm.next_in),t.strstart),t.strstart+=o,t.insert+=o>t.w_size-t.insert?t.w_size-t.insert:o),t.block_start=t.strstart),t.high_water<t.strstart&&(t.high_water=t.strstart),a?tn:n!==yt&&n!==Ze&&t.strm.avail_in===0&&t.strstart===t.block_start?en:(s=t.window_size-t.strstart,t.strm.avail_in>s&&t.block_start>=t.w_size&&(t.block_start-=t.w_size,t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,s+=t.w_size,t.insert>t.strstart&&(t.insert=t.strstart)),s>t.strm.avail_in&&(s=t.strm.avail_in),s&&(Xi(t.strm,t.window,t.strstart,s),t.strstart+=s,t.insert+=s>t.w_size-t.insert?t.w_size-t.insert:s),t.high_water<t.strstart&&(t.high_water=t.strstart),s=t.bi_valid+42>>3,s=t.pending_buf_size-s>65535?65535:t.pending_buf_size-s,e=s>t.w_size?t.w_size:s,r=t.strstart-t.block_start,(r>=e||(r||n===Ze)&&n!==yt&&t.strm.avail_in===0&&r<=s)&&(i=r>s?s:r,a=n===Ze&&t.strm.avail_in===0&&i===r?1:0,Bi(t,t.block_start,i,a),t.block_start+=i,Pe(t.strm)),a?Lt:Ae)},Ai=(t,n)=>{let e,i;for(;;){if(t.lookahead<nt){if(Gt(t),t.lookahead<nt&&n===yt)return Ae;if(t.lookahead===0)break}if(e=0,t.lookahead>=G&&(t.ins_h=kt(t,t.ins_h,t.window[t.strstart+G-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),e!==0&&t.strstart-e<=t.w_size-nt&&(t.match_length=Ta(t,e)),t.match_length>=G)if(i=wt(t,t.strstart-t.match_start,t.match_length-G),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=G){t.match_length--;do t.strstart++,t.ins_h=kt(t,t.ins_h,t.window[t.strstart+G-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart;while(--t.match_length!==0);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=kt(t,t.ins_h,t.window[t.strstart+1]);else i=wt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(Ue(t,!1),t.strm.avail_out===0))return Ae}return t.insert=t.strstart<G-1?t.strstart:G-1,n===Ze?(Ue(t,!0),t.strm.avail_out===0?Lt:tn):t.sym_next&&(Ue(t,!1),t.strm.avail_out===0)?Ae:en},Ht=(t,n)=>{let e,i,r;for(;;){if(t.lookahead<nt){if(Gt(t),t.lookahead<nt&&n===yt)return Ae;if(t.lookahead===0)break}if(e=0,t.lookahead>=G&&(t.ins_h=kt(t,t.ins_h,t.window[t.strstart+G-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=G-1,e!==0&&t.prev_length<t.max_lazy_match&&t.strstart-e<=t.w_size-nt&&(t.match_length=Ta(t,e),t.match_length<=5&&(t.strategy===Ul||t.match_length===G&&t.strstart-t.match_start>4096)&&(t.match_length=G-1)),t.prev_length>=G&&t.match_length<=t.prev_length){r=t.strstart+t.lookahead-G,i=wt(t,t.strstart-1-t.prev_match,t.prev_length-G),t.lookahead-=t.prev_length-1,t.prev_length-=2;do++t.strstart<=r&&(t.ins_h=kt(t,t.ins_h,t.window[t.strstart+G-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart);while(--t.prev_length!==0);if(t.match_available=0,t.match_length=G-1,t.strstart++,i&&(Ue(t,!1),t.strm.avail_out===0))return Ae}else if(t.match_available){if(i=wt(t,0,t.window[t.strstart-1]),i&&Ue(t,!1),t.strstart++,t.lookahead--,t.strm.avail_out===0)return Ae}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=wt(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<G-1?t.strstart:G-1,n===Ze?(Ue(t,!0),t.strm.avail_out===0?Lt:tn):t.sym_next&&(Ue(t,!1),t.strm.avail_out===0)?Ae:en},tc=(t,n)=>{let e,i,r,s;const a=t.window;for(;;){if(t.lookahead<=bt){if(Gt(t),t.lookahead<=bt&&n===yt)return Ae;if(t.lookahead===0)break}if(t.match_length=0,t.lookahead>=G&&t.strstart>0&&(r=t.strstart-1,i=a[r],i===a[++r]&&i===a[++r]&&i===a[++r])){s=t.strstart+bt;do;while(i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&r<s);t.match_length=bt-(s-r),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=G?(e=wt(t,1,t.match_length-G),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(e=wt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),e&&(Ue(t,!1),t.strm.avail_out===0))return Ae}return t.insert=0,n===Ze?(Ue(t,!0),t.strm.avail_out===0?Lt:tn):t.sym_next&&(Ue(t,!1),t.strm.avail_out===0)?Ae:en},nc=(t,n)=>{let e;for(;;){if(t.lookahead===0&&(Gt(t),t.lookahead===0)){if(n===yt)return Ae;break}if(t.match_length=0,e=wt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,e&&(Ue(t,!1),t.strm.avail_out===0))return Ae}return t.insert=0,n===Ze?(Ue(t,!0),t.strm.avail_out===0?Lt:tn):t.sym_next&&(Ue(t,!1),t.strm.avail_out===0)?Ae:en};function Ke(t,n,e,i,r){this.good_length=t,this.max_lazy=n,this.nice_length=e,this.max_chain=i,this.func=r}const un=[new Ke(0,0,0,0,Sa),new Ke(4,4,8,4,Ai),new Ke(4,5,16,8,Ai),new Ke(4,6,32,32,Ai),new Ke(4,4,16,16,Ht),new Ke(8,16,32,32,Ht),new Ke(8,16,128,128,Ht),new Ke(8,32,128,256,Ht),new Ke(32,128,258,1024,Ht),new Ke(32,258,258,4096,Ht)],ic=t=>{t.window_size=2*t.w_size,vt(t.head),t.max_lazy_match=un[t.level].max_lazy,t.good_match=un[t.level].good_length,t.nice_match=un[t.level].nice_length,t.max_chain_length=un[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=G-1,t.match_available=0,t.ins_h=0};function rc(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=ai,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(Gl*2),this.dyn_dtree=new Uint16Array((2*Wl+1)*2),this.bl_tree=new Uint16Array((2*jl+1)*2),vt(this.dyn_ltree),vt(this.dyn_dtree),vt(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(ql+1),this.heap=new Uint16Array(2*Fi+1),vt(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(2*Fi+1),vt(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const Dn=t=>{if(!t)return 1;const n=t.state;return!n||n.strm!==t||n.status!==jt&&n.status!==cr&&n.status!==Hi&&n.status!==Zi&&n.status!==Vi&&n.status!==Yi&&n.status!==Dt&&n.status!==hn?1:0},xa=t=>{if(Dn(t))return Mt(t,tt);t.total_in=t.total_out=0,t.data_type=Fl;const n=t.state;return n.pending=0,n.pending_out=0,n.wrap<0&&(n.wrap=-n.wrap),n.status=n.wrap===2?cr:n.wrap?jt:Dt,t.adler=n.wrap===2?0:1,n.last_flush=-2,Nl(n),ke},Aa=t=>{const n=xa(t);return n===ke&&ic(t.state),n},sc=(t,n)=>Dn(t)||t.state.wrap!==2?tt:(t.state.gzhead=n,ke),Ia=(t,n,e,i,r,s)=>{if(!t)return tt;let a=1;if(n===Ll&&(n=6),i<0?(a=0,i=-i):i>15&&(a=2,i-=16),r<1||r>Hl||e!==ai||i<8||i>15||n<0||n>9||s<0||s>$l||i===8&&a!==1)return Mt(t,tt);i===8&&(i=9);const o=new rc;return t.state=o,o.strm=t,o.status=jt,o.wrap=a,o.gzhead=null,o.w_bits=i,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=r+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+G-1)/G),o.window=new Uint8Array(o.w_size*2),o.head=new Uint16Array(o.hash_size),o.prev=new Uint16Array(o.w_size),o.lit_bufsize=1<<r+6,o.pending_buf_size=o.lit_bufsize*4,o.pending_buf=new Uint8Array(o.pending_buf_size),o.sym_buf=o.lit_bufsize,o.sym_end=(o.lit_bufsize-1)*3,o.level=n,o.strategy=s,o.method=e,Aa(t)},ac=(t,n)=>Ia(t,n,ai,Zl,Vl,Bl),oc=(t,n)=>{if(Dn(t)||n>qr||n<0)return t?Mt(t,tt):tt;const e=t.state;if(!t.output||t.avail_in!==0&&!t.input||e.status===hn&&n!==Ze)return Mt(t,t.avail_out===0?xi:tt);const i=e.last_flush;if(e.last_flush=n,e.pending!==0){if(Pe(t),t.avail_out===0)return e.last_flush=-1,ke}else if(t.avail_in===0&&Jr(n)<=Jr(i)&&n!==Ze)return Mt(t,xi);if(e.status===hn&&t.avail_in!==0)return Mt(t,xi);if(e.status===jt&&e.wrap===0&&(e.status=Dt),e.status===jt){let r=ai+(e.w_bits-8<<4)<<8,s=-1;if(e.strategy>=Vn||e.level<2?s=0:e.level<6?s=1:e.level===6?s=2:s=3,r|=s<<6,e.strstart!==0&&(r|=Kl),r+=31-r%31,cn(e,r),e.strstart!==0&&(cn(e,t.adler>>>16),cn(e,t.adler&65535)),t.adler=1,e.status=Dt,Pe(t),e.pending!==0)return e.last_flush=-1,ke}if(e.status===cr){if(t.adler=0,K(e,31),K(e,139),K(e,8),e.gzhead)K(e,(e.gzhead.text?1:0)+(e.gzhead.hcrc?2:0)+(e.gzhead.extra?4:0)+(e.gzhead.name?8:0)+(e.gzhead.comment?16:0)),K(e,e.gzhead.time&255),K(e,e.gzhead.time>>8&255),K(e,e.gzhead.time>>16&255),K(e,e.gzhead.time>>24&255),K(e,e.level===9?2:e.strategy>=Vn||e.level<2?4:0),K(e,e.gzhead.os&255),e.gzhead.extra&&e.gzhead.extra.length&&(K(e,e.gzhead.extra.length&255),K(e,e.gzhead.extra.length>>8&255)),e.gzhead.hcrc&&(t.adler=ge(t.adler,e.pending_buf,e.pending,0)),e.gzindex=0,e.status=Hi;else if(K(e,0),K(e,0),K(e,0),K(e,0),K(e,0),K(e,e.level===9?2:e.strategy>=Vn||e.level<2?4:0),K(e,Jl),e.status=Dt,Pe(t),e.pending!==0)return e.last_flush=-1,ke}if(e.status===Hi){if(e.gzhead.extra){let r=e.pending,s=(e.gzhead.extra.length&65535)-e.gzindex;for(;e.pending+s>e.pending_buf_size;){let o=e.pending_buf_size-e.pending;if(e.pending_buf.set(e.gzhead.extra.subarray(e.gzindex,e.gzindex+o),e.pending),e.pending=e.pending_buf_size,e.gzhead.hcrc&&e.pending>r&&(t.adler=ge(t.adler,e.pending_buf,e.pending-r,r)),e.gzindex+=o,Pe(t),e.pending!==0)return e.last_flush=-1,ke;r=0,s-=o}let a=new Uint8Array(e.gzhead.extra);e.pending_buf.set(a.subarray(e.gzindex,e.gzindex+s),e.pending),e.pending+=s,e.gzhead.hcrc&&e.pending>r&&(t.adler=ge(t.adler,e.pending_buf,e.pending-r,r)),e.gzindex=0}e.status=Zi}if(e.status===Zi){if(e.gzhead.name){let r=e.pending,s;do{if(e.pending===e.pending_buf_size){if(e.gzhead.hcrc&&e.pending>r&&(t.adler=ge(t.adler,e.pending_buf,e.pending-r,r)),Pe(t),e.pending!==0)return e.last_flush=-1,ke;r=0}e.gzindex<e.gzhead.name.length?s=e.gzhead.name.charCodeAt(e.gzindex++)&255:s=0,K(e,s)}while(s!==0);e.gzhead.hcrc&&e.pending>r&&(t.adler=ge(t.adler,e.pending_buf,e.pending-r,r)),e.gzindex=0}e.status=Vi}if(e.status===Vi){if(e.gzhead.comment){let r=e.pending,s;do{if(e.pending===e.pending_buf_size){if(e.gzhead.hcrc&&e.pending>r&&(t.adler=ge(t.adler,e.pending_buf,e.pending-r,r)),Pe(t),e.pending!==0)return e.last_flush=-1,ke;r=0}e.gzindex<e.gzhead.comment.length?s=e.gzhead.comment.charCodeAt(e.gzindex++)&255:s=0,K(e,s)}while(s!==0);e.gzhead.hcrc&&e.pending>r&&(t.adler=ge(t.adler,e.pending_buf,e.pending-r,r))}e.status=Yi}if(e.status===Yi){if(e.gzhead.hcrc){if(e.pending+2>e.pending_buf_size&&(Pe(t),e.pending!==0))return e.last_flush=-1,ke;K(e,t.adler&255),K(e,t.adler>>8&255),t.adler=0}if(e.status=Dt,Pe(t),e.pending!==0)return e.last_flush=-1,ke}if(t.avail_in!==0||e.lookahead!==0||n!==yt&&e.status!==hn){let r=e.level===0?Sa(e,n):e.strategy===Vn?nc(e,n):e.strategy===zl?tc(e,n):un[e.level].func(e,n);if((r===Lt||r===tn)&&(e.status=hn),r===Ae||r===Lt)return t.avail_out===0&&(e.last_flush=-1),ke;if(r===en&&(n===Rl?Ml(e):n!==qr&&(Bi(e,0,0,!1),n===Ol&&(vt(e.head),e.lookahead===0&&(e.strstart=0,e.block_start=0,e.insert=0))),Pe(t),t.avail_out===0))return e.last_flush=-1,ke}return n!==Ze?ke:e.wrap<=0?Kr:(e.wrap===2?(K(e,t.adler&255),K(e,t.adler>>8&255),K(e,t.adler>>16&255),K(e,t.adler>>24&255),K(e,t.total_in&255),K(e,t.total_in>>8&255),K(e,t.total_in>>16&255),K(e,t.total_in>>24&255)):(cn(e,t.adler>>>16),cn(e,t.adler&65535)),Pe(t),e.wrap>0&&(e.wrap=-e.wrap),e.pending!==0?ke:Kr)},lc=t=>{if(Dn(t))return tt;const n=t.state.status;return t.state=null,n===Dt?Mt(t,Pl):ke},cc=(t,n)=>{let e=n.length;if(Dn(t))return tt;const i=t.state,r=i.wrap;if(r===2||r===1&&i.status!==jt||i.lookahead)return tt;if(r===1&&(t.adler=yn(t.adler,n,e,0)),i.wrap=0,e>=i.w_size){r===0&&(vt(i.head),i.strstart=0,i.block_start=0,i.insert=0);let f=new Uint8Array(i.w_size);f.set(n.subarray(e-i.w_size,e),0),n=f,e=i.w_size}const s=t.avail_in,a=t.next_in,o=t.input;for(t.avail_in=e,t.next_in=0,t.input=n,Gt(i);i.lookahead>=G;){let f=i.strstart,l=i.lookahead-(G-1);do i.ins_h=kt(i,i.ins_h,i.window[f+G-1]),i.prev[f&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=f,f++;while(--l);i.strstart=f,i.lookahead=G-1,Gt(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=G-1,i.match_available=0,t.next_in=a,t.input=o,t.avail_in=s,i.wrap=r,ke};var fc=ac,hc=Ia,uc=Aa,dc=xa,_c=sc,mc=oc,pc=lc,gc=cc,vc="pako deflate (from Nodeca project)",mn={deflateInit:fc,deflateInit2:hc,deflateReset:uc,deflateResetKeep:dc,deflateSetHeader:_c,deflate:mc,deflateEnd:pc,deflateSetDictionary:gc,deflateInfo:vc};const bc=(t,n)=>Object.prototype.hasOwnProperty.call(t,n);var wc=function(t){const n=Array.prototype.slice.call(arguments,1);for(;n.length;){const e=n.shift();if(e){if(typeof e!="object")throw new TypeError(e+"must be non-object");for(const i in e)bc(e,i)&&(t[i]=e[i])}}return t},yc=t=>{let n=0;for(let i=0,r=t.length;i<r;i++)n+=t[i].length;const e=new Uint8Array(n);for(let i=0,r=0,s=t.length;i<s;i++){let a=t[i];e.set(a,r),r+=a.length}return e},oi={assign:wc,flattenChunks:yc};let Ca=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{Ca=!1}const kn=new Uint8Array(256);for(let t=0;t<256;t++)kn[t]=t>=252?6:t>=248?5:t>=240?4:t>=224?3:t>=192?2:1;kn[254]=kn[254]=1;var kc=t=>{if(typeof TextEncoder=="function"&&TextEncoder.prototype.encode)return new TextEncoder().encode(t);let n,e,i,r,s,a=t.length,o=0;for(r=0;r<a;r++)e=t.charCodeAt(r),(e&64512)===55296&&r+1<a&&(i=t.charCodeAt(r+1),(i&64512)===56320&&(e=65536+(e-55296<<10)+(i-56320),r++)),o+=e<128?1:e<2048?2:e<65536?3:4;for(n=new Uint8Array(o),s=0,r=0;s<o;r++)e=t.charCodeAt(r),(e&64512)===55296&&r+1<a&&(i=t.charCodeAt(r+1),(i&64512)===56320&&(e=65536+(e-55296<<10)+(i-56320),r++)),e<128?n[s++]=e:e<2048?(n[s++]=192|e>>>6,n[s++]=128|e&63):e<65536?(n[s++]=224|e>>>12,n[s++]=128|e>>>6&63,n[s++]=128|e&63):(n[s++]=240|e>>>18,n[s++]=128|e>>>12&63,n[s++]=128|e>>>6&63,n[s++]=128|e&63);return n};const Ec=(t,n)=>{if(n<65534&&t.subarray&&Ca)return String.fromCharCode.apply(null,t.length===n?t:t.subarray(0,n));let e="";for(let i=0;i<n;i++)e+=String.fromCharCode(t[i]);return e};var Tc=(t,n)=>{const e=n||t.length;if(typeof TextDecoder=="function"&&TextDecoder.prototype.decode)return new TextDecoder().decode(t.subarray(0,n));let i,r;const s=new Array(e*2);for(r=0,i=0;i<e;){let a=t[i++];if(a<128){s[r++]=a;continue}let o=kn[a];if(o>4){s[r++]=65533,i+=o-1;continue}for(a&=o===2?31:o===3?15:7;o>1&&i<e;)a=a<<6|t[i++]&63,o--;if(o>1){s[r++]=65533;continue}a<65536?s[r++]=a:(a-=65536,s[r++]=55296|a>>10&1023,s[r++]=56320|a&1023)}return Ec(s,r)},Sc=(t,n)=>{n=n||t.length,n>t.length&&(n=t.length);let e=n-1;for(;e>=0&&(t[e]&192)===128;)e--;return e<0||e===0?n:e+kn[t[e]]>n?e:n},En={string2buf:kc,buf2string:Tc,utf8border:Sc};function xc(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}var Na=xc;const Da=Object.prototype.toString,{Z_NO_FLUSH:Ac,Z_SYNC_FLUSH:Ic,Z_FULL_FLUSH:Cc,Z_FINISH:Nc,Z_OK:ti,Z_STREAM_END:Dc,Z_DEFAULT_COMPRESSION:Mc,Z_DEFAULT_STRATEGY:Rc,Z_DEFLATED:Oc}=zt;function Mn(t){this.options=oi.assign({level:Mc,method:Oc,chunkSize:16384,windowBits:15,memLevel:8,strategy:Rc},t||{});let n=this.options;n.raw&&n.windowBits>0?n.windowBits=-n.windowBits:n.gzip&&n.windowBits>0&&n.windowBits<16&&(n.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Na,this.strm.avail_out=0;let e=mn.deflateInit2(this.strm,n.level,n.method,n.windowBits,n.memLevel,n.strategy);if(e!==ti)throw new Error(Pt[e]);if(n.header&&mn.deflateSetHeader(this.strm,n.header),n.dictionary){let i;if(typeof n.dictionary=="string"?i=En.string2buf(n.dictionary):Da.call(n.dictionary)==="[object ArrayBuffer]"?i=new Uint8Array(n.dictionary):i=n.dictionary,e=mn.deflateSetDictionary(this.strm,i),e!==ti)throw new Error(Pt[e]);this._dict_set=!0}}Mn.prototype.push=function(t,n){const e=this.strm,i=this.options.chunkSize;let r,s;if(this.ended)return!1;for(n===~~n?s=n:s=n===!0?Nc:Ac,typeof t=="string"?e.input=En.string2buf(t):Da.call(t)==="[object ArrayBuffer]"?e.input=new Uint8Array(t):e.input=t,e.next_in=0,e.avail_in=e.input.length;;){if(e.avail_out===0&&(e.output=new Uint8Array(i),e.next_out=0,e.avail_out=i),(s===Ic||s===Cc)&&e.avail_out<=6){this.onData(e.output.subarray(0,e.next_out)),e.avail_out=0;continue}if(r=mn.deflate(e,s),r===Dc)return e.next_out>0&&this.onData(e.output.subarray(0,e.next_out)),r=mn.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===ti;if(e.avail_out===0){this.onData(e.output);continue}if(s>0&&e.next_out>0){this.onData(e.output.subarray(0,e.next_out)),e.avail_out=0;continue}if(e.avail_in===0)break}return!0};Mn.prototype.onData=function(t){this.chunks.push(t)};Mn.prototype.onEnd=function(t){t===ti&&(this.result=oi.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};function fr(t,n){const e=new Mn(n);if(e.push(t,!0),e.err)throw e.msg||Pt[e.err];return e.result}function Pc(t,n){return n=n||{},n.raw=!0,fr(t,n)}function Lc(t,n){return n=n||{},n.gzip=!0,fr(t,n)}var Uc=Mn,zc=fr,$c=Pc,Bc=Lc,Fc=zt,Hc={Deflate:Uc,deflate:zc,deflateRaw:$c,gzip:Bc,constants:Fc};const Yn=16209,Zc=16191;var Vc=function(n,e){let i,r,s,a,o,f,l,h,p,m,d,v,w,E,I,b,R,T,O,Y,S,N,x,k;const z=n.state;i=n.next_in,x=n.input,r=i+(n.avail_in-5),s=n.next_out,k=n.output,a=s-(e-n.avail_out),o=s+(n.avail_out-257),f=z.dmax,l=z.wsize,h=z.whave,p=z.wnext,m=z.window,d=z.hold,v=z.bits,w=z.lencode,E=z.distcode,I=(1<<z.lenbits)-1,b=(1<<z.distbits)-1;e:do{v<15&&(d+=x[i++]<<v,v+=8,d+=x[i++]<<v,v+=8),R=w[d&I];t:for(;;){if(T=R>>>24,d>>>=T,v-=T,T=R>>>16&255,T===0)k[s++]=R&65535;else if(T&16){O=R&65535,T&=15,T&&(v<T&&(d+=x[i++]<<v,v+=8),O+=d&(1<<T)-1,d>>>=T,v-=T),v<15&&(d+=x[i++]<<v,v+=8,d+=x[i++]<<v,v+=8),R=E[d&b];n:for(;;){if(T=R>>>24,d>>>=T,v-=T,T=R>>>16&255,T&16){if(Y=R&65535,T&=15,v<T&&(d+=x[i++]<<v,v+=8,v<T&&(d+=x[i++]<<v,v+=8)),Y+=d&(1<<T)-1,Y>f){n.msg="invalid distance too far back",z.mode=Yn;break e}if(d>>>=T,v-=T,T=s-a,Y>T){if(T=Y-T,T>h&&z.sane){n.msg="invalid distance too far back",z.mode=Yn;break e}if(S=0,N=m,p===0){if(S+=l-T,T<O){O-=T;do k[s++]=m[S++];while(--T);S=s-Y,N=k}}else if(p<T){if(S+=l+p-T,T-=p,T<O){O-=T;do k[s++]=m[S++];while(--T);if(S=0,p<O){T=p,O-=T;do k[s++]=m[S++];while(--T);S=s-Y,N=k}}}else if(S+=p-T,T<O){O-=T;do k[s++]=m[S++];while(--T);S=s-Y,N=k}for(;O>2;)k[s++]=N[S++],k[s++]=N[S++],k[s++]=N[S++],O-=3;O&&(k[s++]=N[S++],O>1&&(k[s++]=N[S++]))}else{S=s-Y;do k[s++]=k[S++],k[s++]=k[S++],k[s++]=k[S++],O-=3;while(O>2);O&&(k[s++]=k[S++],O>1&&(k[s++]=k[S++]))}}else if(T&64){n.msg="invalid distance code",z.mode=Yn;break e}else{R=E[(R&65535)+(d&(1<<T)-1)];continue n}break}}else if(T&64)if(T&32){z.mode=Zc;break e}else{n.msg="invalid literal/length code",z.mode=Yn;break e}else{R=w[(R&65535)+(d&(1<<T)-1)];continue t}break}}while(i<r&&s<o);O=v>>3,i-=O,v-=O<<3,d&=(1<<v)-1,n.next_in=i,n.next_out=s,n.avail_in=i<r?5+(r-i):5-(i-r),n.avail_out=s<o?257+(o-s):257-(s-o),z.hold=d,z.bits=v};const Zt=15,Qr=852,es=592,ts=0,Ii=1,ns=2,Yc=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),Xc=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),Wc=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),jc=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),Gc=(t,n,e,i,r,s,a,o)=>{const f=o.bits;let l=0,h=0,p=0,m=0,d=0,v=0,w=0,E=0,I=0,b=0,R,T,O,Y,S,N=null,x;const k=new Uint16Array(Zt+1),z=new Uint16Array(Zt+1);let B=null,ee,ae,q;for(l=0;l<=Zt;l++)k[l]=0;for(h=0;h<i;h++)k[n[e+h]]++;for(d=f,m=Zt;m>=1&&k[m]===0;m--);if(d>m&&(d=m),m===0)return r[s++]=1<<24|64<<16|0,r[s++]=1<<24|64<<16|0,o.bits=1,0;for(p=1;p<m&&k[p]===0;p++);for(d<p&&(d=p),E=1,l=1;l<=Zt;l++)if(E<<=1,E-=k[l],E<0)return-1;if(E>0&&(t===ts||m!==1))return-1;for(z[1]=0,l=1;l<Zt;l++)z[l+1]=z[l]+k[l];for(h=0;h<i;h++)n[e+h]!==0&&(a[z[n[e+h]]++]=h);if(t===ts?(N=B=a,x=20):t===Ii?(N=Yc,B=Xc,x=257):(N=Wc,B=jc,x=0),b=0,h=0,l=p,S=s,v=d,w=0,O=-1,I=1<<d,Y=I-1,t===Ii&&I>Qr||t===ns&&I>es)return 1;for(;;){ee=l-w,a[h]+1<x?(ae=0,q=a[h]):a[h]>=x?(ae=B[a[h]-x],q=N[a[h]-x]):(ae=96,q=0),R=1<<l-w,T=1<<v,p=T;do T-=R,r[S+(b>>w)+T]=ee<<24|ae<<16|q|0;while(T!==0);for(R=1<<l-1;b&R;)R>>=1;if(R!==0?(b&=R-1,b+=R):b=0,h++,--k[l]===0){if(l===m)break;l=n[e+a[h]]}if(l>d&&(b&Y)!==O){for(w===0&&(w=d),S+=p,v=l-w,E=1<<v;v+w<m&&(E-=k[v+w],!(E<=0));)v++,E<<=1;if(I+=1<<v,t===Ii&&I>Qr||t===ns&&I>es)return 1;O=b&Y,r[O]=d<<24|v<<16|S-s|0}}return b!==0&&(r[S+b]=l-w<<24|64<<16|0),o.bits=d,0};var pn=Gc;const qc=0,Ma=1,Ra=2,{Z_FINISH:is,Z_BLOCK:Kc,Z_TREES:Xn,Z_OK:Ut,Z_STREAM_END:Jc,Z_NEED_DICT:Qc,Z_STREAM_ERROR:Ye,Z_DATA_ERROR:Oa,Z_MEM_ERROR:Pa,Z_BUF_ERROR:ef,Z_DEFLATED:rs}=zt,li=16180,ss=16181,as=16182,os=16183,ls=16184,cs=16185,fs=16186,hs=16187,us=16188,ds=16189,ni=16190,ut=16191,Ci=16192,_s=16193,Ni=16194,ms=16195,ps=16196,gs=16197,vs=16198,Wn=16199,jn=16200,bs=16201,ws=16202,ys=16203,ks=16204,Es=16205,Di=16206,Ts=16207,Ss=16208,oe=16209,La=16210,Ua=16211,tf=852,nf=592,rf=15,sf=rf,xs=t=>(t>>>24&255)+(t>>>8&65280)+((t&65280)<<8)+((t&255)<<24);function af(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const $t=t=>{if(!t)return 1;const n=t.state;return!n||n.strm!==t||n.mode<li||n.mode>Ua?1:0},za=t=>{if($t(t))return Ye;const n=t.state;return t.total_in=t.total_out=n.total=0,t.msg="",n.wrap&&(t.adler=n.wrap&1),n.mode=li,n.last=0,n.havedict=0,n.flags=-1,n.dmax=32768,n.head=null,n.hold=0,n.bits=0,n.lencode=n.lendyn=new Int32Array(tf),n.distcode=n.distdyn=new Int32Array(nf),n.sane=1,n.back=-1,Ut},$a=t=>{if($t(t))return Ye;const n=t.state;return n.wsize=0,n.whave=0,n.wnext=0,za(t)},Ba=(t,n)=>{let e;if($t(t))return Ye;const i=t.state;return n<0?(e=0,n=-n):(e=(n>>4)+5,n<48&&(n&=15)),n&&(n<8||n>15)?Ye:(i.window!==null&&i.wbits!==n&&(i.window=null),i.wrap=e,i.wbits=n,$a(t))},Fa=(t,n)=>{if(!t)return Ye;const e=new af;t.state=e,e.strm=t,e.window=null,e.mode=li;const i=Ba(t,n);return i!==Ut&&(t.state=null),i},of=t=>Fa(t,sf);let As=!0,Mi,Ri;const lf=t=>{if(As){Mi=new Int32Array(512),Ri=new Int32Array(32);let n=0;for(;n<144;)t.lens[n++]=8;for(;n<256;)t.lens[n++]=9;for(;n<280;)t.lens[n++]=7;for(;n<288;)t.lens[n++]=8;for(pn(Ma,t.lens,0,288,Mi,0,t.work,{bits:9}),n=0;n<32;)t.lens[n++]=5;pn(Ra,t.lens,0,32,Ri,0,t.work,{bits:5}),As=!1}t.lencode=Mi,t.lenbits=9,t.distcode=Ri,t.distbits=5},Ha=(t,n,e,i)=>{let r;const s=t.state;return s.window===null&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new Uint8Array(s.wsize)),i>=s.wsize?(s.window.set(n.subarray(e-s.wsize,e),0),s.wnext=0,s.whave=s.wsize):(r=s.wsize-s.wnext,r>i&&(r=i),s.window.set(n.subarray(e-i,e-i+r),s.wnext),i-=r,i?(s.window.set(n.subarray(e-i,e),0),s.wnext=i,s.whave=s.wsize):(s.wnext+=r,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=r))),0},cf=(t,n)=>{let e,i,r,s,a,o,f,l,h,p,m,d,v,w,E=0,I,b,R,T,O,Y,S,N;const x=new Uint8Array(4);let k,z;const B=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if($t(t)||!t.output||!t.input&&t.avail_in!==0)return Ye;e=t.state,e.mode===ut&&(e.mode=Ci),a=t.next_out,r=t.output,f=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,l=e.hold,h=e.bits,p=o,m=f,N=Ut;e:for(;;)switch(e.mode){case li:if(e.wrap===0){e.mode=Ci;break}for(;h<16;){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}if(e.wrap&2&&l===35615){e.wbits===0&&(e.wbits=15),e.check=0,x[0]=l&255,x[1]=l>>>8&255,e.check=ge(e.check,x,2,0),l=0,h=0,e.mode=ss;break}if(e.head&&(e.head.done=!1),!(e.wrap&1)||(((l&255)<<8)+(l>>8))%31){t.msg="incorrect header check",e.mode=oe;break}if((l&15)!==rs){t.msg="unknown compression method",e.mode=oe;break}if(l>>>=4,h-=4,S=(l&15)+8,e.wbits===0&&(e.wbits=S),S>15||S>e.wbits){t.msg="invalid window size",e.mode=oe;break}e.dmax=1<<e.wbits,e.flags=0,t.adler=e.check=1,e.mode=l&512?ds:ut,l=0,h=0;break;case ss:for(;h<16;){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}if(e.flags=l,(e.flags&255)!==rs){t.msg="unknown compression method",e.mode=oe;break}if(e.flags&57344){t.msg="unknown header flags set",e.mode=oe;break}e.head&&(e.head.text=l>>8&1),e.flags&512&&e.wrap&4&&(x[0]=l&255,x[1]=l>>>8&255,e.check=ge(e.check,x,2,0)),l=0,h=0,e.mode=as;case as:for(;h<32;){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}e.head&&(e.head.time=l),e.flags&512&&e.wrap&4&&(x[0]=l&255,x[1]=l>>>8&255,x[2]=l>>>16&255,x[3]=l>>>24&255,e.check=ge(e.check,x,4,0)),l=0,h=0,e.mode=os;case os:for(;h<16;){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}e.head&&(e.head.xflags=l&255,e.head.os=l>>8),e.flags&512&&e.wrap&4&&(x[0]=l&255,x[1]=l>>>8&255,e.check=ge(e.check,x,2,0)),l=0,h=0,e.mode=ls;case ls:if(e.flags&1024){for(;h<16;){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}e.length=l,e.head&&(e.head.extra_len=l),e.flags&512&&e.wrap&4&&(x[0]=l&255,x[1]=l>>>8&255,e.check=ge(e.check,x,2,0)),l=0,h=0}else e.head&&(e.head.extra=null);e.mode=cs;case cs:if(e.flags&1024&&(d=e.length,d>o&&(d=o),d&&(e.head&&(S=e.head.extra_len-e.length,e.head.extra||(e.head.extra=new Uint8Array(e.head.extra_len)),e.head.extra.set(i.subarray(s,s+d),S)),e.flags&512&&e.wrap&4&&(e.check=ge(e.check,i,d,s)),o-=d,s+=d,e.length-=d),e.length))break e;e.length=0,e.mode=fs;case fs:if(e.flags&2048){if(o===0)break e;d=0;do S=i[s+d++],e.head&&S&&e.length<65536&&(e.head.name+=String.fromCharCode(S));while(S&&d<o);if(e.flags&512&&e.wrap&4&&(e.check=ge(e.check,i,d,s)),o-=d,s+=d,S)break e}else e.head&&(e.head.name=null);e.length=0,e.mode=hs;case hs:if(e.flags&4096){if(o===0)break e;d=0;do S=i[s+d++],e.head&&S&&e.length<65536&&(e.head.comment+=String.fromCharCode(S));while(S&&d<o);if(e.flags&512&&e.wrap&4&&(e.check=ge(e.check,i,d,s)),o-=d,s+=d,S)break e}else e.head&&(e.head.comment=null);e.mode=us;case us:if(e.flags&512){for(;h<16;){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}if(e.wrap&4&&l!==(e.check&65535)){t.msg="header crc mismatch",e.mode=oe;break}l=0,h=0}e.head&&(e.head.hcrc=e.flags>>9&1,e.head.done=!0),t.adler=e.check=0,e.mode=ut;break;case ds:for(;h<32;){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}t.adler=e.check=xs(l),l=0,h=0,e.mode=ni;case ni:if(e.havedict===0)return t.next_out=a,t.avail_out=f,t.next_in=s,t.avail_in=o,e.hold=l,e.bits=h,Qc;t.adler=e.check=1,e.mode=ut;case ut:if(n===Kc||n===Xn)break e;case Ci:if(e.last){l>>>=h&7,h-=h&7,e.mode=Di;break}for(;h<3;){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}switch(e.last=l&1,l>>>=1,h-=1,l&3){case 0:e.mode=_s;break;case 1:if(lf(e),e.mode=Wn,n===Xn){l>>>=2,h-=2;break e}break;case 2:e.mode=ps;break;case 3:t.msg="invalid block type",e.mode=oe}l>>>=2,h-=2;break;case _s:for(l>>>=h&7,h-=h&7;h<32;){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}if((l&65535)!==(l>>>16^65535)){t.msg="invalid stored block lengths",e.mode=oe;break}if(e.length=l&65535,l=0,h=0,e.mode=Ni,n===Xn)break e;case Ni:e.mode=ms;case ms:if(d=e.length,d){if(d>o&&(d=o),d>f&&(d=f),d===0)break e;r.set(i.subarray(s,s+d),a),o-=d,s+=d,f-=d,a+=d,e.length-=d;break}e.mode=ut;break;case ps:for(;h<14;){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}if(e.nlen=(l&31)+257,l>>>=5,h-=5,e.ndist=(l&31)+1,l>>>=5,h-=5,e.ncode=(l&15)+4,l>>>=4,h-=4,e.nlen>286||e.ndist>30){t.msg="too many length or distance symbols",e.mode=oe;break}e.have=0,e.mode=gs;case gs:for(;e.have<e.ncode;){for(;h<3;){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}e.lens[B[e.have++]]=l&7,l>>>=3,h-=3}for(;e.have<19;)e.lens[B[e.have++]]=0;if(e.lencode=e.lendyn,e.lenbits=7,k={bits:e.lenbits},N=pn(qc,e.lens,0,19,e.lencode,0,e.work,k),e.lenbits=k.bits,N){t.msg="invalid code lengths set",e.mode=oe;break}e.have=0,e.mode=vs;case vs:for(;e.have<e.nlen+e.ndist;){for(;E=e.lencode[l&(1<<e.lenbits)-1],I=E>>>24,b=E>>>16&255,R=E&65535,!(I<=h);){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}if(R<16)l>>>=I,h-=I,e.lens[e.have++]=R;else{if(R===16){for(z=I+2;h<z;){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}if(l>>>=I,h-=I,e.have===0){t.msg="invalid bit length repeat",e.mode=oe;break}S=e.lens[e.have-1],d=3+(l&3),l>>>=2,h-=2}else if(R===17){for(z=I+3;h<z;){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}l>>>=I,h-=I,S=0,d=3+(l&7),l>>>=3,h-=3}else{for(z=I+7;h<z;){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}l>>>=I,h-=I,S=0,d=11+(l&127),l>>>=7,h-=7}if(e.have+d>e.nlen+e.ndist){t.msg="invalid bit length repeat",e.mode=oe;break}for(;d--;)e.lens[e.have++]=S}}if(e.mode===oe)break;if(e.lens[256]===0){t.msg="invalid code -- missing end-of-block",e.mode=oe;break}if(e.lenbits=9,k={bits:e.lenbits},N=pn(Ma,e.lens,0,e.nlen,e.lencode,0,e.work,k),e.lenbits=k.bits,N){t.msg="invalid literal/lengths set",e.mode=oe;break}if(e.distbits=6,e.distcode=e.distdyn,k={bits:e.distbits},N=pn(Ra,e.lens,e.nlen,e.ndist,e.distcode,0,e.work,k),e.distbits=k.bits,N){t.msg="invalid distances set",e.mode=oe;break}if(e.mode=Wn,n===Xn)break e;case Wn:e.mode=jn;case jn:if(o>=6&&f>=258){t.next_out=a,t.avail_out=f,t.next_in=s,t.avail_in=o,e.hold=l,e.bits=h,Vc(t,m),a=t.next_out,r=t.output,f=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,l=e.hold,h=e.bits,e.mode===ut&&(e.back=-1);break}for(e.back=0;E=e.lencode[l&(1<<e.lenbits)-1],I=E>>>24,b=E>>>16&255,R=E&65535,!(I<=h);){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}if(b&&!(b&240)){for(T=I,O=b,Y=R;E=e.lencode[Y+((l&(1<<T+O)-1)>>T)],I=E>>>24,b=E>>>16&255,R=E&65535,!(T+I<=h);){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}l>>>=T,h-=T,e.back+=T}if(l>>>=I,h-=I,e.back+=I,e.length=R,b===0){e.mode=Es;break}if(b&32){e.back=-1,e.mode=ut;break}if(b&64){t.msg="invalid literal/length code",e.mode=oe;break}e.extra=b&15,e.mode=bs;case bs:if(e.extra){for(z=e.extra;h<z;){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}e.length+=l&(1<<e.extra)-1,l>>>=e.extra,h-=e.extra,e.back+=e.extra}e.was=e.length,e.mode=ws;case ws:for(;E=e.distcode[l&(1<<e.distbits)-1],I=E>>>24,b=E>>>16&255,R=E&65535,!(I<=h);){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}if(!(b&240)){for(T=I,O=b,Y=R;E=e.distcode[Y+((l&(1<<T+O)-1)>>T)],I=E>>>24,b=E>>>16&255,R=E&65535,!(T+I<=h);){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}l>>>=T,h-=T,e.back+=T}if(l>>>=I,h-=I,e.back+=I,b&64){t.msg="invalid distance code",e.mode=oe;break}e.offset=R,e.extra=b&15,e.mode=ys;case ys:if(e.extra){for(z=e.extra;h<z;){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}e.offset+=l&(1<<e.extra)-1,l>>>=e.extra,h-=e.extra,e.back+=e.extra}if(e.offset>e.dmax){t.msg="invalid distance too far back",e.mode=oe;break}e.mode=ks;case ks:if(f===0)break e;if(d=m-f,e.offset>d){if(d=e.offset-d,d>e.whave&&e.sane){t.msg="invalid distance too far back",e.mode=oe;break}d>e.wnext?(d-=e.wnext,v=e.wsize-d):v=e.wnext-d,d>e.length&&(d=e.length),w=e.window}else w=r,v=a-e.offset,d=e.length;d>f&&(d=f),f-=d,e.length-=d;do r[a++]=w[v++];while(--d);e.length===0&&(e.mode=jn);break;case Es:if(f===0)break e;r[a++]=e.length,f--,e.mode=jn;break;case Di:if(e.wrap){for(;h<32;){if(o===0)break e;o--,l|=i[s++]<<h,h+=8}if(m-=f,t.total_out+=m,e.total+=m,e.wrap&4&&m&&(t.adler=e.check=e.flags?ge(e.check,r,m,a-m):yn(e.check,r,m,a-m)),m=f,e.wrap&4&&(e.flags?l:xs(l))!==e.check){t.msg="incorrect data check",e.mode=oe;break}l=0,h=0}e.mode=Ts;case Ts:if(e.wrap&&e.flags){for(;h<32;){if(o===0)break e;o--,l+=i[s++]<<h,h+=8}if(e.wrap&4&&l!==(e.total&4294967295)){t.msg="incorrect length check",e.mode=oe;break}l=0,h=0}e.mode=Ss;case Ss:N=Jc;break e;case oe:N=Oa;break e;case La:return Pa;case Ua:default:return Ye}return t.next_out=a,t.avail_out=f,t.next_in=s,t.avail_in=o,e.hold=l,e.bits=h,(e.wsize||m!==t.avail_out&&e.mode<oe&&(e.mode<Di||n!==is))&&Ha(t,t.output,t.next_out,m-t.avail_out),p-=t.avail_in,m-=t.avail_out,t.total_in+=p,t.total_out+=m,e.total+=m,e.wrap&4&&m&&(t.adler=e.check=e.flags?ge(e.check,r,m,t.next_out-m):yn(e.check,r,m,t.next_out-m)),t.data_type=e.bits+(e.last?64:0)+(e.mode===ut?128:0)+(e.mode===Wn||e.mode===Ni?256:0),(p===0&&m===0||n===is)&&N===Ut&&(N=ef),N},ff=t=>{if($t(t))return Ye;let n=t.state;return n.window&&(n.window=null),t.state=null,Ut},hf=(t,n)=>{if($t(t))return Ye;const e=t.state;return e.wrap&2?(e.head=n,n.done=!1,Ut):Ye},uf=(t,n)=>{const e=n.length;let i,r,s;return $t(t)||(i=t.state,i.wrap!==0&&i.mode!==ni)?Ye:i.mode===ni&&(r=1,r=yn(r,n,e,0),r!==i.check)?Oa:(s=Ha(t,n,e,e),s?(i.mode=La,Pa):(i.havedict=1,Ut))};var df=$a,_f=Ba,mf=za,pf=of,gf=Fa,vf=cf,bf=ff,wf=hf,yf=uf,kf="pako inflate (from Nodeca project)",pt={inflateReset:df,inflateReset2:_f,inflateResetKeep:mf,inflateInit:pf,inflateInit2:gf,inflate:vf,inflateEnd:bf,inflateGetHeader:wf,inflateSetDictionary:yf,inflateInfo:kf};function Ef(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var Tf=Ef;const Za=Object.prototype.toString,{Z_NO_FLUSH:Sf,Z_FINISH:xf,Z_OK:Tn,Z_STREAM_END:Oi,Z_NEED_DICT:Pi,Z_STREAM_ERROR:Af,Z_DATA_ERROR:Is,Z_MEM_ERROR:If}=zt;function Rn(t){this.options=oi.assign({chunkSize:1024*64,windowBits:15,to:""},t||{});const n=this.options;n.raw&&n.windowBits>=0&&n.windowBits<16&&(n.windowBits=-n.windowBits,n.windowBits===0&&(n.windowBits=-15)),n.windowBits>=0&&n.windowBits<16&&!(t&&t.windowBits)&&(n.windowBits+=32),n.windowBits>15&&n.windowBits<48&&(n.windowBits&15||(n.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Na,this.strm.avail_out=0;let e=pt.inflateInit2(this.strm,n.windowBits);if(e!==Tn)throw new Error(Pt[e]);if(this.header=new Tf,pt.inflateGetHeader(this.strm,this.header),n.dictionary&&(typeof n.dictionary=="string"?n.dictionary=En.string2buf(n.dictionary):Za.call(n.dictionary)==="[object ArrayBuffer]"&&(n.dictionary=new Uint8Array(n.dictionary)),n.raw&&(e=pt.inflateSetDictionary(this.strm,n.dictionary),e!==Tn)))throw new Error(Pt[e])}Rn.prototype.push=function(t,n){const e=this.strm,i=this.options.chunkSize,r=this.options.dictionary;let s,a,o;if(this.ended)return!1;for(n===~~n?a=n:a=n===!0?xf:Sf,Za.call(t)==="[object ArrayBuffer]"?e.input=new Uint8Array(t):e.input=t,e.next_in=0,e.avail_in=e.input.length;;){for(e.avail_out===0&&(e.output=new Uint8Array(i),e.next_out=0,e.avail_out=i),s=pt.inflate(e,a),s===Pi&&r&&(s=pt.inflateSetDictionary(e,r),s===Tn?s=pt.inflate(e,a):s===Is&&(s=Pi));e.avail_in>0&&s===Oi&&e.state.wrap>0&&t[e.next_in]!==0;)pt.inflateReset(e),s=pt.inflate(e,a);switch(s){case Af:case Is:case Pi:case If:return this.onEnd(s),this.ended=!0,!1}if(o=e.avail_out,e.next_out&&(e.avail_out===0||s===Oi))if(this.options.to==="string"){let f=En.utf8border(e.output,e.next_out),l=e.next_out-f,h=En.buf2string(e.output,f);e.next_out=l,e.avail_out=i-l,l&&e.output.set(e.output.subarray(f,f+l),0),this.onData(h)}else this.onData(e.output.length===e.next_out?e.output:e.output.subarray(0,e.next_out));if(!(s===Tn&&o===0)){if(s===Oi)return s=pt.inflateEnd(this.strm),this.onEnd(s),this.ended=!0,!0;if(e.avail_in===0)break}}return!0};Rn.prototype.onData=function(t){this.chunks.push(t)};Rn.prototype.onEnd=function(t){t===Tn&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=oi.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};function hr(t,n){const e=new Rn(n);if(e.push(t),e.err)throw e.msg||Pt[e.err];return e.result}function Cf(t,n){return n=n||{},n.raw=!0,hr(t,n)}var Nf=Rn,Df=hr,Mf=Cf,Rf=hr,Of=zt,Pf={Inflate:Nf,inflate:Df,inflateRaw:Mf,ungzip:Rf,constants:Of};const{Deflate:Lf,deflate:Uf,deflateRaw:zf,gzip:$f}=Hc,{Inflate:Bf,inflate:Ff,inflateRaw:Hf,ungzip:Zf}=Pf;var Vf=Lf,Yf=Uf,Xf=zf,Wf=$f,jf=Bf,Gf=Ff,qf=Hf,Kf=Zf,Jf=zt,Cs={Deflate:Vf,deflate:Yf,deflateRaw:Xf,gzip:Wf,Inflate:jf,inflate:Gf,inflateRaw:qf,ungzip:Kf,constants:Jf};const Va="3.7.7",Qf=Va,nn=typeof Buffer=="function",Ns=typeof TextDecoder=="function"?new TextDecoder:void 0,Ds=typeof TextEncoder=="function"?new TextEncoder:void 0,eh="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",dn=Array.prototype.slice.call(eh),Gn=(t=>{let n={};return t.forEach((e,i)=>n[e]=i),n})(dn),th=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,Ee=String.fromCharCode.bind(String),Ms=typeof Uint8Array.from=="function"?Uint8Array.from.bind(Uint8Array):t=>new Uint8Array(Array.prototype.slice.call(t,0)),Ya=t=>t.replace(/=/g,"").replace(/[+\/]/g,n=>n=="+"?"-":"_"),Xa=t=>t.replace(/[^A-Za-z0-9\+\/]/g,""),Wa=t=>{let n,e,i,r,s="";const a=t.length%3;for(let o=0;o<t.length;){if((e=t.charCodeAt(o++))>255||(i=t.charCodeAt(o++))>255||(r=t.charCodeAt(o++))>255)throw new TypeError("invalid character found");n=e<<16|i<<8|r,s+=dn[n>>18&63]+dn[n>>12&63]+dn[n>>6&63]+dn[n&63]}return a?s.slice(0,a-3)+"===".substring(a):s},ur=typeof btoa=="function"?t=>btoa(t):nn?t=>Buffer.from(t,"binary").toString("base64"):Wa,Wi=nn?t=>Buffer.from(t).toString("base64"):t=>{let e=[];for(let i=0,r=t.length;i<r;i+=4096)e.push(Ee.apply(null,t.subarray(i,i+4096)));return ur(e.join(""))},Jn=(t,n=!1)=>n?Ya(Wi(t)):Wi(t),nh=t=>{if(t.length<2){var n=t.charCodeAt(0);return n<128?t:n<2048?Ee(192|n>>>6)+Ee(128|n&63):Ee(224|n>>>12&15)+Ee(128|n>>>6&63)+Ee(128|n&63)}else{var n=65536+(t.charCodeAt(0)-55296)*1024+(t.charCodeAt(1)-56320);return Ee(240|n>>>18&7)+Ee(128|n>>>12&63)+Ee(128|n>>>6&63)+Ee(128|n&63)}},ih=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,ja=t=>t.replace(ih,nh),Rs=nn?t=>Buffer.from(t,"utf8").toString("base64"):Ds?t=>Wi(Ds.encode(t)):t=>ur(ja(t)),Yt=(t,n=!1)=>n?Ya(Rs(t)):Rs(t),Os=t=>Yt(t,!0),rh=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,sh=t=>{switch(t.length){case 4:var n=(7&t.charCodeAt(0))<<18|(63&t.charCodeAt(1))<<12|(63&t.charCodeAt(2))<<6|63&t.charCodeAt(3),e=n-65536;return Ee((e>>>10)+55296)+Ee((e&1023)+56320);case 3:return Ee((15&t.charCodeAt(0))<<12|(63&t.charCodeAt(1))<<6|63&t.charCodeAt(2));default:return Ee((31&t.charCodeAt(0))<<6|63&t.charCodeAt(1))}},Ga=t=>t.replace(rh,sh),qa=t=>{if(t=t.replace(/\s+/g,""),!th.test(t))throw new TypeError("malformed base64.");t+="==".slice(2-(t.length&3));let n,e="",i,r;for(let s=0;s<t.length;)n=Gn[t.charAt(s++)]<<18|Gn[t.charAt(s++)]<<12|(i=Gn[t.charAt(s++)])<<6|(r=Gn[t.charAt(s++)]),e+=i===64?Ee(n>>16&255):r===64?Ee(n>>16&255,n>>8&255):Ee(n>>16&255,n>>8&255,n&255);return e},dr=typeof atob=="function"?t=>atob(Xa(t)):nn?t=>Buffer.from(t,"base64").toString("binary"):qa,Ka=nn?t=>Ms(Buffer.from(t,"base64")):t=>Ms(dr(t).split("").map(n=>n.charCodeAt(0))),Ja=t=>Ka(Qa(t)),ah=nn?t=>Buffer.from(t,"base64").toString("utf8"):Ns?t=>Ns.decode(Ka(t)):t=>Ga(dr(t)),Qa=t=>Xa(t.replace(/[-_]/g,n=>n=="-"?"+":"/")),ji=t=>ah(Qa(t)),oh=t=>{if(typeof t!="string")return!1;const n=t.replace(/\s+/g,"").replace(/={0,2}$/,"");return!/[^\s0-9a-zA-Z\+/]/.test(n)||!/[^\s0-9a-zA-Z\-_]/.test(n)},eo=t=>({value:t,enumerable:!1,writable:!0,configurable:!0}),to=function(){const t=(n,e)=>Object.defineProperty(String.prototype,n,eo(e));t("fromBase64",function(){return ji(this)}),t("toBase64",function(n){return Yt(this,n)}),t("toBase64URI",function(){return Yt(this,!0)}),t("toBase64URL",function(){return Yt(this,!0)}),t("toUint8Array",function(){return Ja(this)})},no=function(){const t=(n,e)=>Object.defineProperty(Uint8Array.prototype,n,eo(e));t("toBase64",function(n){return Jn(this,n)}),t("toBase64URI",function(){return Jn(this,!0)}),t("toBase64URL",function(){return Jn(this,!0)})},lh=()=>{to(),no()},Ps={version:Va,VERSION:Qf,atob:dr,atobPolyfill:qa,btoa:ur,btoaPolyfill:Wa,fromBase64:ji,toBase64:Yt,encode:Yt,encodeURI:Os,encodeURL:Os,utob:ja,btou:Ga,decode:ji,isValid:oh,fromUint8Array:Jn,toUint8Array:Ja,extendString:to,extendUint8Array:no,extendBuiltins:lh};function rt(t){let n=0;if(t.length==0)return n;for(let e=0;e<t.length;e++){const i=t.charCodeAt(e);n=(n<<5)-n+i,n|=0}return n>>>0}class io{constructor(n=4096){y(this,"buffer");y(this,"pointer",0);this.buffer=new ArrayBuffer(n)}update(n=512){if(this.buffer.byteLength<this.pointer+n){const e=new Uint8Array(this.buffer.byteLength+n+1024);e.set(new Uint8Array(this.buffer),0),this.buffer=e.buffer}}final(){return this.buffer.slice(0,this.pointer)}putByte(n){this.update(1),new DataView(this.buffer).setUint8(this.pointer++,n)}putBuffer(n){this.update(n.byteLength),new Uint8Array(this.buffer).set(new Uint8Array(n),this.pointer),this.pointer+=n.byteLength}}class ro{constructor(n){y(this,"buffer");y(this,"pointer",0);this.buffer=n}getByte(){return new DataView(this.buffer).getUint8(this.pointer++)}getBuffer(n){const e=this.buffer.slice(this.pointer,this.pointer+n);return this.pointer+=n,e}}class st{toBinary(n){const e=new io;return e.putBuffer(new Uint32Array([this.magic]).buffer),this.encode(e,n),e.final()}fromBinary(n){const e=new ro(n);if(new Uint32Array(e.getBuffer(4))[0]!=this.magic)throw new Error("Parser magic value does not match.");return this.decode(e)}toBase64(n){return Ps.fromUint8Array(new Uint8Array(this.toBinary(n)))}fromBase64(n){return this.fromBinary(Ps.toUint8Array(n).buffer)}}class ch extends st{constructor(e){super();y(this,"magic");y(this,"signed");this.signed=e,this.magic=rt(`BigIntParser:${this.signed?"Signed":"Unsigned"}`)}encode(e,i){const r=i<0n;if(r){if(!this.signed)throw new Error("Cannot encode negative bigint when parser is not signed.");i=-i}for(this.signed?(e.putByte(Number((i&0b00111111n)<<2n)|(r?2:0)|(i>0b00111111n?1:0)),i>>=6n):(e.putByte(Number((i&0b01111111n)<<1n)|(i>0b01111111n?1:0)),i>>=7n);i>0n;)e.putByte(Number((i&0b01111111n)<<1n)|(i>0b01111111n?1:0)),i>>=7n}decode(e){let i=e.getByte(),r=this.signed?BigInt(i&252)>>2n:BigInt(i&254)>>1n;const s=this.signed?!!(i&2):!1;let a=this.signed?6:7;for(;i&1;)i=e.getByte(),r|=BigInt((i&254)>>1)<<BigInt(a),a+=7;return s?-r:r}}function Et(t=!0){return new ch(t)}class fh extends st{constructor(){super(...arguments);y(this,"magic",rt("BinaryParser"))}encode(e,i){Et(!1).encode(e,BigInt(i.byteLength)),e.putBuffer(i)}decode(e){const i=Number(Et(!1).decode(e));return e.getBuffer(i)}}function Sn(){return new fh}class hh extends st{constructor(e){super();y(this,"magic");y(this,"type");this.type=e,this.magic=rt(`NumberParser:${this.type}`)}encode(e,i){e.update(8);const r=new DataView(e.buffer);switch(this.type){case"u8":r.setUint8(e.pointer,i),e.pointer+=1;break;case"u16":r.setUint16(e.pointer,i,!0),e.pointer+=2;break;case"u32":r.setUint32(e.pointer,i,!0),e.pointer+=4;break;case"u64":r.setBigUint64(e.pointer,i,!0),e.pointer+=8;break;case"i8":r.setInt8(e.pointer,i),e.pointer+=1;break;case"i16":r.setInt16(e.pointer,i,!0),e.pointer+=2;break;case"i32":r.setInt32(e.pointer,i,!0),e.pointer+=4;break;case"i64":r.setBigInt64(e.pointer,i,!0),e.pointer+=8;break;case"f32":r.setFloat32(e.pointer,i,!0),e.pointer+=4;break;case"f64":r.setFloat64(e.pointer,i,!0),e.pointer+=8;break;default:throw new Error("NumParser invalid type.")}}decode(e){const i=new DataView(e.buffer);let r;switch(this.type){case"u8":r=i.getUint8(e.pointer),e.pointer+=1;break;case"u16":r=i.getUint16(e.pointer,!0),e.pointer+=2;break;case"u32":r=i.getUint32(e.pointer,!0),e.pointer+=4;break;case"u64":r=i.getBigUint64(e.pointer,!0),e.pointer+=8;break;case"i8":r=i.getInt8(e.pointer),e.pointer+=1;break;case"i16":r=i.getInt16(e.pointer,!0),e.pointer+=2;break;case"i32":r=i.getInt32(e.pointer,!0),e.pointer+=4;break;case"i64":r=i.getBigInt64(e.pointer,!0),e.pointer+=8;break;case"f32":r=i.getFloat32(e.pointer,!0),e.pointer+=4;break;case"f64":r=i.getFloat64(e.pointer,!0),e.pointer+=8;break;default:throw new Error("NumParser invalid type.")}return r}}function Ot(t){return new hh(t)}class uh extends st{constructor(){super(...arguments);y(this,"magic",rt("StringParser"))}encode(e,i){Sn().encode(e,new TextEncoder().encode(i))}decode(e){return new TextDecoder("utf-8").decode(Sn().decode(e))}}function so(){return new uh}class dh extends st{constructor(e){super();y(this,"magic");y(this,"objType");y(this,"keys");this.objType=e,this.keys=Object.keys(this.objType).toSorted(),this.magic=rt(`StringParser:${this.keys.map(i=>`${String(i)}-${this.objType[i].magic}`).join(",")}`)}encode(e,i){for(const r of this.keys)this.objType[r].encode(e,i[r])}decode(e){let i={};for(const r of this.keys)i[r]=this.objType[r].decode(e);return i}}function qt(t){return new dh(t)}class _h extends st{constructor(e){super();y(this,"magic");y(this,"arrType");this.arrType=e,this.magic=rt(`ArrayParser:${this.arrType.magic}`)}encode(e,i){Et(!1).encode(e,BigInt(i.length));for(const r of i)this.arrType.encode(e,r)}decode(e){const i=Number(Et(!1).decode(e)),r=[];for(let s=0;s<i;s++)r.push(this.arrType.decode(e));return r}}function ao(t){return new _h(t)}class mh extends st{constructor(e,i){super();y(this,"magic");y(this,"keyType");y(this,"valueType");this.keyType=e,this.valueType=i,this.magic=rt(`RecordParser:${this.keyType.magic}-${this.valueType.magic}`)}encode(e,i){const r=Object.entries(i);Et(!1).encode(e,BigInt(r.length));for(const[s,a]of r)this.keyType.encode(e,s),this.valueType.encode(e,a)}decode(e){const i={},r=Number(Et(!1).decode(e));for(let s=0;s<r;s++){const a=this.keyType.decode(e),o=this.valueType.decode(e);i[a]=o}return i}}function ph(t,n){return new mh(t,n)}class gh extends st{constructor(){super(...arguments);y(this,"magic",rt("DateParser"))}encode(e,i){Et(!1).encode(e,BigInt(i.valueOf()))}decode(e){return new Date(Number(Et(!1).decode(e)))}}function _r(){return new gh}class vh extends st{constructor(e,i){super();y(this,"magic");y(this,"parser");y(this,"compressed");this.parser=e,this.compressed=i,this.magic=rt(`PackedParser:${this.parser.magic}:${this.compressed?"Compressed":"Uncompressed"}`)}encode(e,i){const r=new io;this.parser.encode(r,i);let s=r.final();this.compressed&&(s=Cs.deflate(s).buffer),Sn().encode(e,s)}decode(e){let i=Sn().decode(e);this.compressed&&(i=Cs.inflate(i).buffer);const r=new ro(i);return this.parser.decode(r)}}function bh(t,n){return new vh(t,n)}class wh extends st{constructor(e,i){super();y(this,"magic");y(this,"modifier");y(this,"parser");this.modifier=e,this.parser=i,this.magic=rt(`ModifyHashParser:${this.parser.magic}:${this.modifier}`)}encode(e,i){this.parser.encode(e,i)}decode(e){return this.parser.decode(e)}}function yh(t,n){return new wh(t,n)}class oo{constructor(n,e,i){y(this,"world");y(this,"chunkX");y(this,"chunkY");this.world=n,this.chunkX=e,this.chunkY=i}isGenerated(){return this instanceof Kt}generate(){if(this.isGenerated())throw new Error("Cannot generate an already generated chunk.");console.log(`Generating new chunk: ${this.chunkX}, ${this.chunkY}`);const n=[];for(let e=0;e<j;e++)for(let i=0;i<j;i++){const r=this.world.generateTile(this.chunkX*j+i,this.chunkY*j+e);n.push(r)}return new Kt(this.world,this.chunkX,this.chunkY,n)}}class Kt extends oo{constructor(e,i,r,s){super(e,i,r);y(this,"tiles");y(this,"deaths",[]);if(this.tiles=s,this.tiles.length!=j*j)throw new Error("GeneratedChunk incorrect tiles length.")}getTileAbsolute(e,i){return this.getTile(e-this.chunkX*j,i-this.chunkY*j)}getTile(e,i){return this.tiles[e+i*j]}resetTileAbsolute(e,i){return this.resetTile(e-this.chunkX*j,i-this.chunkY*j)}resetTile(e,i){this.tiles[e+i*j]=la(this.world,this.chunkX*j+e,this.chunkY*j+i)}encodeTiles(){const e=new Br(2048);for(const i of this.tiles)i.save(e);return e.final()}static decodeTiles(e,i,r,s){const a=new Br(s);let o=[];for(let f=0;f<j;f++)for(let l=0;l<j;l++){const h=i*j+l,p=r*j+f,d=oa(e,h,p).load(e,h,p,a);o.push(d)}return new Kt(e,i,r,o)}save(){return{deaths:this.deaths,tiles:this.encodeTiles()}}static load(e,i,r,s){const a=Kt.decodeTiles(e,i,r,s.tiles);return a.deaths=s.deaths,a}}let kh=0;function Eh(){return kh++}class lo{constructor(){y(this,"_dispatcherDestroyed",!1);y(this,"listeners",{})}get dispatcherDestroyed(){return this._dispatcherDestroyed}dispatcherCheckDestroyed(){if(this.dispatcherDestroyed)throw new Error("EventDispatcher used after destroyed.")}getListenersArr(n){return this.listeners[n]||(this.listeners[n]=[]),this.listeners[n]}*listenersIter(){for(const n in this.listeners){const e=this.listeners[n];for(const i of e)yield i}}addEventListener(n,e,i=!1,r=0){this.dispatcherCheckDestroyed();let s=this.getListenersArr(n);const a={key:n,callbackfn:e,priority:r,id:Eh(),once:i};return s.push(a),s.sort((o,f)=>o.priority-f.priority),a}dispatchEvent(n,e){this.dispatcherCheckDestroyed();const i=this.getListenersArr(n);for(const r of i){let s=!1;if(r.callbackfn({data:e,dispatcher:this,listener:r,stopPropagation:()=>s=!0}),r.once&&this.removeEventListener(r),s)break}}removeEventListener(n){this.dispatcherCheckDestroyed();let e=!1;if(typeof n!="number"){const i=this.getListenersArr(n.key);for(const r of i)r.id==n.id&&(i.splice(i.indexOf(r),1),e=!0)}else for(const i of this.listenersIter())i.id==n&&this.removeEventListener(i)&&(e=!0);return e}destroyDispatcher(){this.dispatcherCheckDestroyed(),this._dispatcherDestroyed=!0;for(const n in this.listeners)delete this.listeners[n]}}function*Th(t,n){let e=t,i=n,r=1,s=1;for(;;){for(;2*e*r<s;)yield{x:e,y:i},e+=r;for(;2*i*r<s;)yield{x:e,y:i},i+=r;r=-1*r,s+=1}}class ci extends lo{constructor(e){super();y(this,"seed");y(this,"tileSeed");y(this,"biomeSeed");y(this,"createdAt",new Date);y(this,"deaths",0);y(this,"chunks",{});y(this,"_revealCount",0);y(this,"_died",!1);this.seed=(e&4294967295)>>>0;const i=Ji(this.seed,!1);this.tileSeed=i(),this.biomeSeed=i(),this.addEventListener("die",({data:{x:r,y:s}})=>{this.deaths++;const a=this.getGeneratedChunk(Math.floor(r/j),Math.floor(s/j));a.deaths.push({x:r-a.chunkX*j,y:s-a.chunkY*j,diedAt:new Date})})}change(){this.dispatchEvent("change",null)}generateTile(e,i){return la(this,e,i)}getChunk(e,i){const r=this.chunks[`${e},${i}`];return r||new oo(this,e,i)}getGeneratedChunk(e,i){const r=this.getChunk(e,i);if(r.isGenerated())return r;const s=r.generate();return this.chunks[`${e},${i}`]=s,s}getTile(e,i){const r=Math.floor(e/j),s=Math.floor(i/j);return this.getGeneratedChunk(r,s).getTileAbsolute(e,i)}flag(e,i){const r=this.getTile(e,i);if(r.isDeathTile())return;const s=r.numFlags();r.flag();const a=r.numFlags();a==0&&a!=s&&(this.dispatchEvent("particle_unflag",{x:e,y:i}),this.dispatchEvent("sound_unflag",null))}_reveal(e,i){const r=this.getTile(e,i);if(r.reveal())if(this._revealCount++,r.numMines()>0){this._died=!0,this.dispatchEvent("particle_explosion",{x:r.x,y:r.y}),this.dispatchEvent("die",{x:r.x,y:r.y});return}else this.dispatchEvent("particle_reveal",{x:r.x,y:r.y});let s=[],a=[];if(r.type=="strawberry"){const o=r.minesNearbySecondary(!1);o!=null&&o==r.flagsNearby()&&a.push(r)}for(r.minesNearby()==r.flagsNearby()&&(a.includes(r)||a.push(r));a.length>0;){const o=a.pop();s.push(o);for(const f of o.searchPattern){const l=this.getTile(o.x+f.x,o.y+f.y);a.some(h=>h.x==l.x&&h.y==l.y)||s.some(h=>h.x==l.x&&h.y==l.y)||(l.minesNearby()==0?a.push(l):s.push(l))}}for(const o of s)o.reveal()&&(this._revealCount++,o.numMines()>0?(this._died=!0,this.dispatchEvent("particle_explosion",{x:o.x,y:o.y}),this.dispatchEvent("die",{x:o.x,y:o.y})):this.dispatchEvent("particle_reveal",{x:o.x,y:o.y}))}reveal(e,i){return this._revealCount=0,this._died=!1,this._reveal(e,i),this._revealCount>0&&this.dispatchEvent("sound_reveal",this._revealCount),this._died&&this.dispatchEvent("sound_explosion",null),this._died}reset(e,i){const r=this.getChunk(Math.floor(e/j),Math.floor(i/j));r.isGenerated()&&r.resetTileAbsolute(e,i)}closest0(e,i){for(const{x:r,y:s}of Th(e,i)){const a=this.getTile(r,s);if(a.numMines()==0&&a.minesNearby()==0)return{x:r,y:s}}throw new Error("This error should never happen, it's just here to make TypeScript happy.")}save(){const e={seed:this.seed,createdAt:this.createdAt,numDeaths:this.deaths,chunks:{}};for(const i in this.chunks){const r=i,s=this.chunks[r];e.chunks[r]=s.save()}return e}static load(e){const i=new ci(e.seed);i.createdAt=e.createdAt,i.deaths=e.numDeaths;for(const r in e.chunks){const s=r,[a,o,f]=s.match(/^(-?\d+),(-?\d+)$/),[l,h]=[parseInt(o),parseInt(f)],p=e.chunks[s];i.chunks[s]=Kt.load(i,l,h,p)}return i}}class mr extends lo{constructor(e,i){super();y(this,"world");y(this,"x",0);y(this,"y",0);y(this,"scale",64);this.world=e,i&&this.load(i)}change(){this.dispatchEvent("change",null)}load(e){this.x=e.x,this.y=e.y,this.scale=e.scale}save(){return{x:this.x,y:this.y,scale:this.scale}}translate(e,i,r){this.x-=i/this.scale,this.y-=r/this.scale}scaleFrom(e,i,r,s){const a=this.x+e.width/this.scale*(r/e.width-.5),o=this.y+e.height/this.scale*(s/e.height-.5);this.scale=i;const f=this.x+e.width/this.scale*(r/e.width-.5),l=this.y+e.height/this.scale*(s/e.height-.5);this.x-=f-a,this.y-=l-o}clampScale(e,i,r,s){return e.width/i<r&&(i=e.width/r),e.height/i<r&&(i=e.height/r),e.width/i>s&&(i=e.width/s),e.height/i>s&&(i=e.height/s),i}bounds(e,i,r=0){const s=this.x-e.width/this.scale/2-r,a=this.y-e.height/this.scale/2-r,o=this.x+e.width/this.scale/2+r,f=this.y+e.height/this.scale/2+r;return i?{minX:Math.floor(s),minY:Math.floor(a),maxX:Math.ceil(o),maxY:Math.ceil(f)}:{minX:s,minY:a,maxX:o,maxY:f}}inBounds(e,i,r,s=0){const a=this.bounds(e,!1,s);return i>=a.minX&&i<=a.maxX&&r>=a.minY&&r<=a.maxY}canvasPos(e,i,r,s){const a=(i-e.width/2)/this.scale+this.x,o=(r-e.height/2)/this.scale+this.y;return s?{x:Math.floor(a),y:Math.floor(o)}:{x:a,y:o}}transformCtx(e,i){i.translate(e.width/2,e.height/2),i.scale(this.scale,this.scale),i.translate(-this.x,-this.y)}forEachTileInViewport(e,i,r=0){const s=this.bounds(e,!0,r);for(let a=s.minX;a<s.maxX;a++)for(let o=s.minY;o<s.maxY;o++){const f=this.world.getTile(a,o);i(f)}}forEachChunkInViewport(e,i,r=0){const s=this.bounds(e,!0,r);s.minX=Math.floor(s.minX/j),s.minY=Math.floor(s.minY/j),s.maxX=Math.ceil(s.maxX/j),s.maxY=Math.ceil(s.maxY/j);for(let a=s.minX;a<s.maxX;a++)for(let o=s.minY;o<s.maxY;o++){const f=this.world.getChunk(a,o);f.isGenerated()&&i(f)}}}function Sh(t,n){console.log("Loaded new world"),n&&localStorage.setItem(t,"PLACEHOLDER");const e=new ci(Math.floor(Math.random()*4294967295)),i=e.closest0(0,0);return e.reveal(i.x,i.y),{world:e,spawnX:i.x,spawnY:i.y}}function Ls(t,n){const{world:e,spawnX:i,spawnY:r}=Sh(t,n),s=new mr(e,{x:i,y:r,scale:48});return{world:e,viewport:s,bookmarks:[{name:"Spawn",createdAt:new Date,viewport:s.save()}]}}function xh(t){const n=localStorage.getItem(t);if(n){console.log("Loaded saved world");try{const e=co.fromBase64(n),i=ci.load(e.world),r=new mr(i,e.viewport);return{world:i,viewport:r,bookmarks:e.bookmarks}}catch(e){return console.error("Failed to load world."),console.error(e),Ls(t,!1)}}else return Ls(t,!0)}function Ah(t,n){if(localStorage.getItem(t)!==null){console.log("Save world");try{localStorage.setItem(t,co.toBase64({world:n.world.save(),viewport:n.viewport.save(),bookmarks:n.bookmarks??[]})),localStorage.removeItem("save_error")}catch(e){localStorage.setItem("save_error",String(e))}}}function Ih(t){localStorage.removeItem(t)}const Ch=qt({deaths:ao(qt({x:Ot("u8"),y:Ot("u8"),diedAt:_r()})),tiles:Sn()}),Nh=qt({seed:Ot("u32"),createdAt:_r(),numDeaths:Ot("u32"),chunks:ph(so(),Ch)}),Us=qt({x:Ot("f64"),y:Ot("f64"),scale:Ot("f64")}),co=yh("v1.0.5",bh(qt({world:Nh,viewport:Us,bookmarks:ao(qt({name:so(),createdAt:_r(),viewport:Us}))}),!0)),fo=(t,n)=>{const e=new ResizeObserver(()=>{n(t.clientWidth,t.clientHeight)});return e.observe(t),{destroy(){e.unobserve(t),e.disconnect()}}};class Dh{constructor(n,e,i,r){y(this,"world");y(this,"theme");y(this,"canvas");y(this,"ctx");y(this,"viewport");this.world=n,this.theme=e,this.canvas=i;const s=this.canvas.getContext("2d");if(!s)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=s,this.viewport=r}async init(){}destroy(){}renderWorld(){this.ctx.imageSmoothingEnabled=!1,this.viewport.transformCtx(this.canvas,this.ctx),this.viewport.forEachTileInViewport(this.canvas,n=>{this.theme.drawTile(this.ctx,n)},0),this.viewport.forEachChunkInViewport(this.canvas,n=>{n.deaths.forEach(e=>{this.theme.drawDeathIcon(this.ctx,n.chunkX*j+e.x,n.chunkY*j+e.y)})},0),this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.renderWorld()}}class fi{constructor(){y(this,"_alive",!0);y(this,"_lifetime",0)}get alive(){return this._alive}set alive(n){this._alive=n}get lifetime(){return this._lifetime}rendererUpdate(n,e){this._lifetime+=e,this.update(n,e)}}class Mh extends fi{constructor(e){super();y(this,"type","explosion");y(this,"maxLifetime",500);y(this,"tile");this.tile=e}update(e,i){this.lifetime>this.maxLifetime&&(this.alive=!1)}}class Rh extends fi{constructor(e){super();y(this,"type","faketile");y(this,"tile");this.tile=e}get opacity(){return si(2-this.lifetime/250+2)}update(e,i){this.lifetime>2e3&&(this.alive=!1)}}class zs extends fi{constructor(e,i,r,s){super();y(this,"type","flag");y(this,"x");y(this,"y");y(this,"dx");y(this,"dy");y(this,"r");y(this,"dr");y(this,"isMultiFlag");y(this,"numFlags");this.x=e,this.y=i,this.dx=(Math.random()-.5)*.005,this.dy=-(Math.random()*.002+.005),this.r=0,this.dr=(Math.random()-.5)*.01,this.isMultiFlag=r,this.numFlags=s}get opacity(){return si(1-this.lifetime/250+.5)}update(e,i){this.dy+=5e-5*i,this.dx*=.99,this.dy*=this.dy<0?1:.95,this.x+=this.dx*i,this.y+=this.dy*i,this.r+=this.dr*i,this.lifetime>=500&&(this.alive=!1)}}class Oh extends fi{constructor(e){super();y(this,"type","tilereveal");y(this,"tile");y(this,"x");y(this,"y");y(this,"dx");y(this,"dy");y(this,"r");y(this,"dr");y(this,"totalLifetime");this.tile=e,this.x=this.tile.x,this.y=this.tile.y,this.dx=(Math.random()-.5)*.005,this.dy=-(Math.random()*.002+.005),this.r=0,this.dr=(Math.random()-.5)*.01,this.totalLifetime=Math.random()*750+250}get opacity(){return si(1-this.lifetime/(this.totalLifetime/2)+.5)}update(e,i){this.dy+=5e-5*i,this.dx*=.99,this.dy*=this.dy<0?1:.98,this.x+=this.dx*i,this.y+=this.dy*i,this.r+=this.dr*i,this.lifetime>=this.totalLifetime&&(this.alive=!1)}}class Ph{constructor(n,e,i,r){y(this,"world");y(this,"theme");y(this,"canvas");y(this,"ctx");y(this,"viewport");y(this,"particles",[]);y(this,"listeners",[]);y(this,"lastFrameTime",-1);this.world=n,this.theme=e,this.canvas=i;const s=this.canvas.getContext("2d");if(!s)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=s,this.viewport=r}async init(){this.listeners.push(this.world.addEventListener("particle_unflag",({data:{x:n,y:e}})=>{const i=this.world.getTile(n,e);i instanceof sa?this.particles.push(new zs(n,e,!0,i.numMaxMines)):this.particles.push(new zs(n,e,!1,1))})),this.listeners.push(this.world.addEventListener("particle_explosion",({data:{x:n,y:e}})=>{const i=this.world.getTile(n,e);this.particles.unshift(new Rh(i)),this.particles.push(new Mh(i))})),this.listeners.push(this.world.addEventListener("particle_reveal",({data:{x:n,y:e}})=>{const i=this.world.getTile(n,e);this.particles.push(new Oh(i))}))}destroy(){let n;for(;n=this.listeners.pop();)this.world.removeEventListener(n)}renderParticles(n){this.ctx.imageSmoothingEnabled=!1,this.viewport.transformCtx(this.canvas,this.ctx);for(let e=0;e<this.particles.length;e++){const i=this.particles[e];i.rendererUpdate(this,n),i.alive||(this.particles.splice(e,1),e--)}for(const e of this.particles)this.theme.drawParticle(this.ctx,e);this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.ctx.fillStyle="transparent",this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const n=performance.now();if(this.lastFrameTime==-1)this.renderParticles(0);else{const e=n-this.lastFrameTime;this.renderParticles(e)}this.lastFrameTime=n}}function Lh(t){let n,e,i,r,s;const a=t[8].default,o=De(a,t,t[7],null);return{c(){n=L("div"),o&&o.c(),this.h()},l(f){n=U(f,"DIV",{class:!0});var l=H(n);o&&o.l(l),l.forEach(A),this.h()},h(){M(n,"class",e=Lr(t[0])+" svelte-1ijt5qm"),Xt(n,"mouse-controller-dragging",t[1]=="drag")},m(f,l){V(f,n,l),o&&o.m(n,null),i=!0,r||(s=[ce(n,"mousedown",t[10]),ce(n,"mousemove",t[11]),ce(n,"mouseup",t[12]),ce(n,"mouseout",t[13]),ce(n,"wheel",t[14],{passive:!0}),ce(n,"contextmenu",Zo(t[9]))],r=!0)},p(f,[l]){o&&o.p&&(!i||l&128)&&Me(o,a,f,f[7],i?Oe(a,f[7],l,null):Re(f[7]),null),(!i||l&1&&e!==(e=Lr(f[0])+" svelte-1ijt5qm"))&&M(n,"class",e),(!i||l&3)&&Xt(n,"mouse-controller-dragging",f[1]=="drag")},i(f){i||(F(o,f),i=!0)},o(f){Z(o,f),i=!1},d(f){f&&A(n),o&&o.d(f),r=!1,Jt(s)}}}const Uh=10,zh=10;function $h(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=pr();let{class:a=""}=n,o=null;const f=b=>{switch(b.button){case 0:return"primary";case 1:return"extra";case 2:return"secondary";default:return null}};let l=0,h=0;const p=(b,R)=>qo(l,h,b.offsetX,b.offsetY)>R;function m(b){Ks.call(this,t,b)}const d=b=>{o==null&&(e(1,o=f(b)),e(2,l=b.offsetX),e(3,h=b.offsetY))},v=b=>{let R=b.movementX,T=b.movementY;if(o=="primary")if(p(b,Uh))R+=b.offsetX-l,T+=b.offsetY-h,e(1,o="drag");else return;o=="drag"&&s("move",{x:b.offsetX,y:b.offsetY,dx:R,dy:T})},w=b=>{if(o==null||o=="drag"||p(b,zh)){e(1,o=null);return}s("input",{x:b.offsetX,y:b.offsetY,type:o}),e(1,o=null)},E=()=>{e(1,o=null)},I=b=>{s("zoom",{x:b.offsetX,y:b.offsetY,amountType:"relative",amount:b.deltaY>0?.9:1.1})};return t.$$set=b=>{"class"in b&&e(0,a=b.class),"$$scope"in b&&e(7,r=b.$$scope)},[a,o,l,h,s,f,p,r,i,m,d,v,w,E,I]}class Bh extends he{constructor(n){super(),ue(this,n,$h,Lh,fe,{class:0})}}function Fh(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var ho={exports:{}};/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */(function(t){(function(n,e,i,r){var s=["","webkit","Moz","MS","ms","o"],a=e.createElement("div"),o="function",f=Math.round,l=Math.abs,h=Date.now;function p(c,u,_){return setTimeout(R(c,_),u)}function m(c,u,_){return Array.isArray(c)?(d(c,_[u],_),!0):!1}function d(c,u,_){var g;if(c)if(c.forEach)c.forEach(u,_);else if(c.length!==r)for(g=0;g<c.length;)u.call(_,c[g],g,c),g++;else for(g in c)c.hasOwnProperty(g)&&u.call(_,c[g],g,c)}function v(c,u,_){var g="DEPRECATED METHOD: "+u+`
`+_+` AT 
`;return function(){var C=new Error("get-stack-trace"),$=C&&C.stack?C.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",W=n.console&&(n.console.warn||n.console.log);return W&&W.call(n.console,g,$),c.apply(this,arguments)}}var w;typeof Object.assign!="function"?w=function(u){if(u===r||u===null)throw new TypeError("Cannot convert undefined or null to object");for(var _=Object(u),g=1;g<arguments.length;g++){var C=arguments[g];if(C!==r&&C!==null)for(var $ in C)C.hasOwnProperty($)&&(_[$]=C[$])}return _}:w=Object.assign;var E=v(function(u,_,g){for(var C=Object.keys(_),$=0;$<C.length;)(!g||g&&u[C[$]]===r)&&(u[C[$]]=_[C[$]]),$++;return u},"extend","Use `assign`."),I=v(function(u,_){return E(u,_,!0)},"merge","Use `assign`.");function b(c,u,_){var g=u.prototype,C;C=c.prototype=Object.create(g),C.constructor=c,C._super=g,_&&w(C,_)}function R(c,u){return function(){return c.apply(u,arguments)}}function T(c,u){return typeof c==o?c.apply(u&&u[0]||r,u):c}function O(c,u){return c===r?u:c}function Y(c,u,_){d(k(u),function(g){c.addEventListener(g,_,!1)})}function S(c,u,_){d(k(u),function(g){c.removeEventListener(g,_,!1)})}function N(c,u){for(;c;){if(c==u)return!0;c=c.parentNode}return!1}function x(c,u){return c.indexOf(u)>-1}function k(c){return c.trim().split(/\s+/g)}function z(c,u,_){if(c.indexOf&&!_)return c.indexOf(u);for(var g=0;g<c.length;){if(_&&c[g][_]==u||!_&&c[g]===u)return g;g++}return-1}function B(c){return Array.prototype.slice.call(c,0)}function ee(c,u,_){for(var g=[],C=[],$=0;$<c.length;){var W=u?c[$][u]:c[$];z(C,W)<0&&g.push(c[$]),C[$]=W,$++}return _&&(u?g=g.sort(function(ye,xe){return ye[u]>xe[u]}):g=g.sort()),g}function ae(c,u){for(var _,g,C=u[0].toUpperCase()+u.slice(1),$=0;$<s.length;){if(_=s[$],g=_?_+C:u,g in c)return g;$++}return r}var q=1;function de(){return q++}function Te(c){var u=c.ownerDocument||c;return u.defaultView||u.parentWindow||n}var at=/mobile|tablet|ip(ad|hone|od)|android/i,ot="ontouchstart"in n,xt=ae(n,"PointerEvent")!==r,At=ot&&at.test(navigator.userAgent),We="touch",Bt="pen",rn="mouse",On="kinect",hi=25,me=1,lt=2,le=4,D=8,X=1,Ie=2,ze=4,$e=8,_e=16,we=Ie|ze,je=$e|_e,sn=we|je,vr=["x","y"],Pn=["clientX","clientY"];function Be(c,u){var _=this;this.manager=c,this.callback=u,this.element=c.element,this.target=c.options.inputTarget,this.domHandler=function(g){T(c.options.enable,[c])&&_.handler(g)},this.init()}Be.prototype={handler:function(){},init:function(){this.evEl&&Y(this.element,this.evEl,this.domHandler),this.evTarget&&Y(this.target,this.evTarget,this.domHandler),this.evWin&&Y(Te(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&S(this.element,this.evEl,this.domHandler),this.evTarget&&S(this.target,this.evTarget,this.domHandler),this.evWin&&S(Te(this.element),this.evWin,this.domHandler)}};function _o(c){var u,_=c.options.inputClass;return _?u=_:xt?u=di:At?u=zn:ot?u=_i:u=Un,new u(c,mo)}function mo(c,u,_){var g=_.pointers.length,C=_.changedPointers.length,$=u&me&&g-C===0,W=u&(le|D)&&g-C===0;_.isFirst=!!$,_.isFinal=!!W,$&&(c.session={}),_.eventType=u,po(c,_),c.emit("hammer.input",_),c.recognize(_),c.session.prevInput=_}function po(c,u){var _=c.session,g=u.pointers,C=g.length;_.firstInput||(_.firstInput=br(u)),C>1&&!_.firstMultiple?_.firstMultiple=br(u):C===1&&(_.firstMultiple=!1);var $=_.firstInput,W=_.firstMultiple,pe=W?W.center:$.center,ye=u.center=wr(g);u.timeStamp=h(),u.deltaTime=u.timeStamp-$.timeStamp,u.angle=ui(pe,ye),u.distance=Ln(pe,ye),go(_,u),u.offsetDirection=kr(u.deltaX,u.deltaY);var xe=yr(u.deltaTime,u.deltaX,u.deltaY);u.overallVelocityX=xe.x,u.overallVelocityY=xe.y,u.overallVelocity=l(xe.x)>l(xe.y)?xe.x:xe.y,u.scale=W?wo(W.pointers,g):1,u.rotation=W?bo(W.pointers,g):0,u.maxPointers=_.prevInput?u.pointers.length>_.prevInput.maxPointers?u.pointers.length:_.prevInput.maxPointers:u.pointers.length,vo(_,u);var qe=c.element;N(u.srcEvent.target,qe)&&(qe=u.srcEvent.target),u.target=qe}function go(c,u){var _=u.center,g=c.offsetDelta||{},C=c.prevDelta||{},$=c.prevInput||{};(u.eventType===me||$.eventType===le)&&(C=c.prevDelta={x:$.deltaX||0,y:$.deltaY||0},g=c.offsetDelta={x:_.x,y:_.y}),u.deltaX=C.x+(_.x-g.x),u.deltaY=C.y+(_.y-g.y)}function vo(c,u){var _=c.lastInterval||u,g=u.timeStamp-_.timeStamp,C,$,W,pe;if(u.eventType!=D&&(g>hi||_.velocity===r)){var ye=u.deltaX-_.deltaX,xe=u.deltaY-_.deltaY,qe=yr(g,ye,xe);$=qe.x,W=qe.y,C=l(qe.x)>l(qe.y)?qe.x:qe.y,pe=kr(ye,xe),c.lastInterval=u}else C=_.velocity,$=_.velocityX,W=_.velocityY,pe=_.direction;u.velocity=C,u.velocityX=$,u.velocityY=W,u.direction=pe}function br(c){for(var u=[],_=0;_<c.pointers.length;)u[_]={clientX:f(c.pointers[_].clientX),clientY:f(c.pointers[_].clientY)},_++;return{timeStamp:h(),pointers:u,center:wr(u),deltaX:c.deltaX,deltaY:c.deltaY}}function wr(c){var u=c.length;if(u===1)return{x:f(c[0].clientX),y:f(c[0].clientY)};for(var _=0,g=0,C=0;C<u;)_+=c[C].clientX,g+=c[C].clientY,C++;return{x:f(_/u),y:f(g/u)}}function yr(c,u,_){return{x:u/c||0,y:_/c||0}}function kr(c,u){return c===u?X:l(c)>=l(u)?c<0?Ie:ze:u<0?$e:_e}function Ln(c,u,_){_||(_=vr);var g=u[_[0]]-c[_[0]],C=u[_[1]]-c[_[1]];return Math.sqrt(g*g+C*C)}function ui(c,u,_){_||(_=vr);var g=u[_[0]]-c[_[0]],C=u[_[1]]-c[_[1]];return Math.atan2(C,g)*180/Math.PI}function bo(c,u){return ui(u[1],u[0],Pn)+ui(c[1],c[0],Pn)}function wo(c,u){return Ln(u[0],u[1],Pn)/Ln(c[0],c[1],Pn)}var yo={mousedown:me,mousemove:lt,mouseup:le},ko="mousedown",Eo="mousemove mouseup";function Un(){this.evEl=ko,this.evWin=Eo,this.pressed=!1,Be.apply(this,arguments)}b(Un,Be,{handler:function(u){var _=yo[u.type];_&me&&u.button===0&&(this.pressed=!0),_&lt&&u.which!==1&&(_=le),this.pressed&&(_&le&&(this.pressed=!1),this.callback(this.manager,_,{pointers:[u],changedPointers:[u],pointerType:rn,srcEvent:u}))}});var To={pointerdown:me,pointermove:lt,pointerup:le,pointercancel:D,pointerout:D},So={2:We,3:Bt,4:rn,5:On},Er="pointerdown",Tr="pointermove pointerup pointercancel";n.MSPointerEvent&&!n.PointerEvent&&(Er="MSPointerDown",Tr="MSPointerMove MSPointerUp MSPointerCancel");function di(){this.evEl=Er,this.evWin=Tr,Be.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}b(di,Be,{handler:function(u){var _=this.store,g=!1,C=u.type.toLowerCase().replace("ms",""),$=To[C],W=So[u.pointerType]||u.pointerType,pe=W==We,ye=z(_,u.pointerId,"pointerId");$&me&&(u.button===0||pe)?ye<0&&(_.push(u),ye=_.length-1):$&(le|D)&&(g=!0),!(ye<0)&&(_[ye]=u,this.callback(this.manager,$,{pointers:_,changedPointers:[u],pointerType:W,srcEvent:u}),g&&_.splice(ye,1))}});var xo={touchstart:me,touchmove:lt,touchend:le,touchcancel:D},Ao="touchstart",Io="touchstart touchmove touchend touchcancel";function Sr(){this.evTarget=Ao,this.evWin=Io,this.started=!1,Be.apply(this,arguments)}b(Sr,Be,{handler:function(u){var _=xo[u.type];if(_===me&&(this.started=!0),!!this.started){var g=Co.call(this,u,_);_&(le|D)&&g[0].length-g[1].length===0&&(this.started=!1),this.callback(this.manager,_,{pointers:g[0],changedPointers:g[1],pointerType:We,srcEvent:u})}}});function Co(c,u){var _=B(c.touches),g=B(c.changedTouches);return u&(le|D)&&(_=ee(_.concat(g),"identifier",!0)),[_,g]}var No={touchstart:me,touchmove:lt,touchend:le,touchcancel:D},Do="touchstart touchmove touchend touchcancel";function zn(){this.evTarget=Do,this.targetIds={},Be.apply(this,arguments)}b(zn,Be,{handler:function(u){var _=No[u.type],g=Mo.call(this,u,_);g&&this.callback(this.manager,_,{pointers:g[0],changedPointers:g[1],pointerType:We,srcEvent:u})}});function Mo(c,u){var _=B(c.touches),g=this.targetIds;if(u&(me|lt)&&_.length===1)return g[_[0].identifier]=!0,[_,_];var C,$,W=B(c.changedTouches),pe=[],ye=this.target;if($=_.filter(function(xe){return N(xe.target,ye)}),u===me)for(C=0;C<$.length;)g[$[C].identifier]=!0,C++;for(C=0;C<W.length;)g[W[C].identifier]&&pe.push(W[C]),u&(le|D)&&delete g[W[C].identifier],C++;if(pe.length)return[ee($.concat(pe),"identifier",!0),pe]}var Ro=2500,xr=25;function _i(){Be.apply(this,arguments);var c=R(this.handler,this);this.touch=new zn(this.manager,c),this.mouse=new Un(this.manager,c),this.primaryTouch=null,this.lastTouches=[]}b(_i,Be,{handler:function(u,_,g){var C=g.pointerType==We,$=g.pointerType==rn;if(!($&&g.sourceCapabilities&&g.sourceCapabilities.firesTouchEvents)){if(C)Oo.call(this,_,g);else if($&&Po.call(this,g))return;this.callback(u,_,g)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});function Oo(c,u){c&me?(this.primaryTouch=u.changedPointers[0].identifier,Ar.call(this,u)):c&(le|D)&&Ar.call(this,u)}function Ar(c){var u=c.changedPointers[0];if(u.identifier===this.primaryTouch){var _={x:u.clientX,y:u.clientY};this.lastTouches.push(_);var g=this.lastTouches,C=function(){var $=g.indexOf(_);$>-1&&g.splice($,1)};setTimeout(C,Ro)}}function Po(c){for(var u=c.srcEvent.clientX,_=c.srcEvent.clientY,g=0;g<this.lastTouches.length;g++){var C=this.lastTouches[g],$=Math.abs(u-C.x),W=Math.abs(_-C.y);if($<=xr&&W<=xr)return!0}return!1}var Ir=ae(a.style,"touchAction"),Cr=Ir!==r,Nr="compute",Dr="auto",mi="manipulation",It="none",an="pan-x",on="pan-y",$n=Uo();function pi(c,u){this.manager=c,this.set(u)}pi.prototype={set:function(c){c==Nr&&(c=this.compute()),Cr&&this.manager.element.style&&$n[c]&&(this.manager.element.style[Ir]=c),this.actions=c.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var c=[];return d(this.manager.recognizers,function(u){T(u.options.enable,[u])&&(c=c.concat(u.getTouchAction()))}),Lo(c.join(" "))},preventDefaults:function(c){var u=c.srcEvent,_=c.offsetDirection;if(this.manager.session.prevented){u.preventDefault();return}var g=this.actions,C=x(g,It)&&!$n[It],$=x(g,on)&&!$n[on],W=x(g,an)&&!$n[an];if(C){var pe=c.pointers.length===1,ye=c.distance<2,xe=c.deltaTime<250;if(pe&&ye&&xe)return}if(!(W&&$)&&(C||$&&_&we||W&&_&je))return this.preventSrc(u)},preventSrc:function(c){this.manager.session.prevented=!0,c.preventDefault()}};function Lo(c){if(x(c,It))return It;var u=x(c,an),_=x(c,on);return u&&_?It:u||_?u?an:on:x(c,mi)?mi:Dr}function Uo(){if(!Cr)return!1;var c={},u=n.CSS&&n.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(_){c[_]=u?n.CSS.supports("touch-action",_):!0}),c}var Bn=1,Fe=2,Ft=4,gt=8,ct=gt,ln=16,Ge=32;function ft(c){this.options=w({},this.defaults,c||{}),this.id=de(),this.manager=null,this.options.enable=O(this.options.enable,!0),this.state=Bn,this.simultaneous={},this.requireFail=[]}ft.prototype={defaults:{},set:function(c){return w(this.options,c),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(c){if(m(c,"recognizeWith",this))return this;var u=this.simultaneous;return c=Fn(c,this),u[c.id]||(u[c.id]=c,c.recognizeWith(this)),this},dropRecognizeWith:function(c){return m(c,"dropRecognizeWith",this)?this:(c=Fn(c,this),delete this.simultaneous[c.id],this)},requireFailure:function(c){if(m(c,"requireFailure",this))return this;var u=this.requireFail;return c=Fn(c,this),z(u,c)===-1&&(u.push(c),c.requireFailure(this)),this},dropRequireFailure:function(c){if(m(c,"dropRequireFailure",this))return this;c=Fn(c,this);var u=z(this.requireFail,c);return u>-1&&this.requireFail.splice(u,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(c){return!!this.simultaneous[c.id]},emit:function(c){var u=this,_=this.state;function g(C){u.manager.emit(C,c)}_<gt&&g(u.options.event+Mr(_)),g(u.options.event),c.additionalEvent&&g(c.additionalEvent),_>=gt&&g(u.options.event+Mr(_))},tryEmit:function(c){if(this.canEmit())return this.emit(c);this.state=Ge},canEmit:function(){for(var c=0;c<this.requireFail.length;){if(!(this.requireFail[c].state&(Ge|Bn)))return!1;c++}return!0},recognize:function(c){var u=w({},c);if(!T(this.options.enable,[this,u])){this.reset(),this.state=Ge;return}this.state&(ct|ln|Ge)&&(this.state=Bn),this.state=this.process(u),this.state&(Fe|Ft|gt|ln)&&this.tryEmit(u)},process:function(c){},getTouchAction:function(){},reset:function(){}};function Mr(c){return c&ln?"cancel":c&gt?"end":c&Ft?"move":c&Fe?"start":""}function Rr(c){return c==_e?"down":c==$e?"up":c==Ie?"left":c==ze?"right":""}function Fn(c,u){var _=u.manager;return _?_.get(c):c}function Xe(){ft.apply(this,arguments)}b(Xe,ft,{defaults:{pointers:1},attrTest:function(c){var u=this.options.pointers;return u===0||c.pointers.length===u},process:function(c){var u=this.state,_=c.eventType,g=u&(Fe|Ft),C=this.attrTest(c);return g&&(_&D||!C)?u|ln:g||C?_&le?u|gt:u&Fe?u|Ft:Fe:Ge}});function Hn(){Xe.apply(this,arguments),this.pX=null,this.pY=null}b(Hn,Xe,{defaults:{event:"pan",threshold:10,pointers:1,direction:sn},getTouchAction:function(){var c=this.options.direction,u=[];return c&we&&u.push(on),c&je&&u.push(an),u},directionTest:function(c){var u=this.options,_=!0,g=c.distance,C=c.direction,$=c.deltaX,W=c.deltaY;return C&u.direction||(u.direction&we?(C=$===0?X:$<0?Ie:ze,_=$!=this.pX,g=Math.abs(c.deltaX)):(C=W===0?X:W<0?$e:_e,_=W!=this.pY,g=Math.abs(c.deltaY))),c.direction=C,_&&g>u.threshold&&C&u.direction},attrTest:function(c){return Xe.prototype.attrTest.call(this,c)&&(this.state&Fe||!(this.state&Fe)&&this.directionTest(c))},emit:function(c){this.pX=c.deltaX,this.pY=c.deltaY;var u=Rr(c.direction);u&&(c.additionalEvent=this.options.event+u),this._super.emit.call(this,c)}});function gi(){Xe.apply(this,arguments)}b(gi,Xe,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[It]},attrTest:function(c){return this._super.attrTest.call(this,c)&&(Math.abs(c.scale-1)>this.options.threshold||this.state&Fe)},emit:function(c){if(c.scale!==1){var u=c.scale<1?"in":"out";c.additionalEvent=this.options.event+u}this._super.emit.call(this,c)}});function vi(){ft.apply(this,arguments),this._timer=null,this._input=null}b(vi,ft,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[Dr]},process:function(c){var u=this.options,_=c.pointers.length===u.pointers,g=c.distance<u.threshold,C=c.deltaTime>u.time;if(this._input=c,!g||!_||c.eventType&(le|D)&&!C)this.reset();else if(c.eventType&me)this.reset(),this._timer=p(function(){this.state=ct,this.tryEmit()},u.time,this);else if(c.eventType&le)return ct;return Ge},reset:function(){clearTimeout(this._timer)},emit:function(c){this.state===ct&&(c&&c.eventType&le?this.manager.emit(this.options.event+"up",c):(this._input.timeStamp=h(),this.manager.emit(this.options.event,this._input)))}});function bi(){Xe.apply(this,arguments)}b(bi,Xe,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[It]},attrTest:function(c){return this._super.attrTest.call(this,c)&&(Math.abs(c.rotation)>this.options.threshold||this.state&Fe)}});function wi(){Xe.apply(this,arguments)}b(wi,Xe,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:we|je,pointers:1},getTouchAction:function(){return Hn.prototype.getTouchAction.call(this)},attrTest:function(c){var u=this.options.direction,_;return u&(we|je)?_=c.overallVelocity:u&we?_=c.overallVelocityX:u&je&&(_=c.overallVelocityY),this._super.attrTest.call(this,c)&&u&c.offsetDirection&&c.distance>this.options.threshold&&c.maxPointers==this.options.pointers&&l(_)>this.options.velocity&&c.eventType&le},emit:function(c){var u=Rr(c.offsetDirection);u&&this.manager.emit(this.options.event+u,c),this.manager.emit(this.options.event,c)}});function Zn(){ft.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}b(Zn,ft,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[mi]},process:function(c){var u=this.options,_=c.pointers.length===u.pointers,g=c.distance<u.threshold,C=c.deltaTime<u.time;if(this.reset(),c.eventType&me&&this.count===0)return this.failTimeout();if(g&&C&&_){if(c.eventType!=le)return this.failTimeout();var $=this.pTime?c.timeStamp-this.pTime<u.interval:!0,W=!this.pCenter||Ln(this.pCenter,c.center)<u.posThreshold;this.pTime=c.timeStamp,this.pCenter=c.center,!W||!$?this.count=1:this.count+=1,this._input=c;var pe=this.count%u.taps;if(pe===0)return this.hasRequireFailures()?(this._timer=p(function(){this.state=ct,this.tryEmit()},u.interval,this),Fe):ct}return Ge},failTimeout:function(){return this._timer=p(function(){this.state=Ge},this.options.interval,this),Ge},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==ct&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}});function ht(c,u){return u=u||{},u.recognizers=O(u.recognizers,ht.defaults.preset),new yi(c,u)}ht.VERSION="2.0.7",ht.defaults={domEvents:!1,touchAction:Nr,enable:!0,inputTarget:null,inputClass:null,preset:[[bi,{enable:!1}],[gi,{enable:!1},["rotate"]],[wi,{direction:we}],[Hn,{direction:we},["swipe"]],[Zn],[Zn,{event:"doubletap",taps:2},["tap"]],[vi]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};var zo=1,Or=2;function yi(c,u){this.options=w({},ht.defaults,u||{}),this.options.inputTarget=this.options.inputTarget||c,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=c,this.input=_o(this),this.touchAction=new pi(this,this.options.touchAction),Pr(this,!0),d(this.options.recognizers,function(_){var g=this.add(new _[0](_[1]));_[2]&&g.recognizeWith(_[2]),_[3]&&g.requireFailure(_[3])},this)}yi.prototype={set:function(c){return w(this.options,c),c.touchAction&&this.touchAction.update(),c.inputTarget&&(this.input.destroy(),this.input.target=c.inputTarget,this.input.init()),this},stop:function(c){this.session.stopped=c?Or:zo},recognize:function(c){var u=this.session;if(!u.stopped){this.touchAction.preventDefaults(c);var _,g=this.recognizers,C=u.curRecognizer;(!C||C&&C.state&ct)&&(C=u.curRecognizer=null);for(var $=0;$<g.length;)_=g[$],u.stopped!==Or&&(!C||_==C||_.canRecognizeWith(C))?_.recognize(c):_.reset(),!C&&_.state&(Fe|Ft|gt)&&(C=u.curRecognizer=_),$++}},get:function(c){if(c instanceof ft)return c;for(var u=this.recognizers,_=0;_<u.length;_++)if(u[_].options.event==c)return u[_];return null},add:function(c){if(m(c,"add",this))return this;var u=this.get(c.options.event);return u&&this.remove(u),this.recognizers.push(c),c.manager=this,this.touchAction.update(),c},remove:function(c){if(m(c,"remove",this))return this;if(c=this.get(c),c){var u=this.recognizers,_=z(u,c);_!==-1&&(u.splice(_,1),this.touchAction.update())}return this},on:function(c,u){if(c!==r&&u!==r){var _=this.handlers;return d(k(c),function(g){_[g]=_[g]||[],_[g].push(u)}),this}},off:function(c,u){if(c!==r){var _=this.handlers;return d(k(c),function(g){u?_[g]&&_[g].splice(z(_[g],u),1):delete _[g]}),this}},emit:function(c,u){this.options.domEvents&&$o(c,u);var _=this.handlers[c]&&this.handlers[c].slice();if(!(!_||!_.length)){u.type=c,u.preventDefault=function(){u.srcEvent.preventDefault()};for(var g=0;g<_.length;)_[g](u),g++}},destroy:function(){this.element&&Pr(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}};function Pr(c,u){var _=c.element;if(_.style){var g;d(c.options.cssProps,function(C,$){g=ae(_.style,$),u?(c.oldCssProps[g]=_.style[g],_.style[g]=C):_.style[g]=c.oldCssProps[g]||""}),u||(c.oldCssProps={})}}function $o(c,u){var _=e.createEvent("Event");_.initEvent(c,!0,!0),_.gesture=u,u.target.dispatchEvent(_)}w(ht,{INPUT_START:me,INPUT_MOVE:lt,INPUT_END:le,INPUT_CANCEL:D,STATE_POSSIBLE:Bn,STATE_BEGAN:Fe,STATE_CHANGED:Ft,STATE_ENDED:gt,STATE_RECOGNIZED:ct,STATE_CANCELLED:ln,STATE_FAILED:Ge,DIRECTION_NONE:X,DIRECTION_LEFT:Ie,DIRECTION_RIGHT:ze,DIRECTION_UP:$e,DIRECTION_DOWN:_e,DIRECTION_HORIZONTAL:we,DIRECTION_VERTICAL:je,DIRECTION_ALL:sn,Manager:yi,Input:Be,TouchAction:pi,TouchInput:zn,MouseInput:Un,PointerEventInput:di,TouchMouseInput:_i,SingleTouchInput:Sr,Recognizer:ft,AttrRecognizer:Xe,Tap:Zn,Pan:Hn,Swipe:wi,Pinch:gi,Rotate:bi,Press:vi,on:Y,off:S,each:d,merge:I,extend:E,assign:w,inherit:b,bindFn:R,prefixed:ae});var Bo=typeof n<"u"?n:typeof self<"u"?self:{};Bo.Hammer=ht,typeof r=="function"&&r.amd?r(function(){return ht}):t.exports?t.exports=ht:n[i]=ht})(window,document,"Hammer")})(ho);var Hh=ho.exports;const fn=Fh(Hh);function Zh(t){let n,e;const i=t[3].default,r=De(i,t,t[2],null);return{c(){n=L("div"),r&&r.c(),this.h()},l(s){n=U(s,"DIV",{class:!0});var a=H(n);r&&r.l(a),a.forEach(A),this.h()},h(){M(n,"class",t[0])},m(s,a){V(s,n,a),r&&r.m(n,null),t[4](n),e=!0},p(s,[a]){r&&r.p&&(!e||a&4)&&Me(r,i,s,s[2],e?Oe(i,s[2],a,null):Re(s[2]),null),(!e||a&1)&&M(n,"class",s[0])},i(s){e||(F(r,s),e=!0)},o(s){Z(r,s),e=!1},d(s){s&&A(n),r&&r.d(s),t[4](null)}}}function Vh(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=pr();let{class:a=""}=n,o,f,l=null;ii(()=>{f=new fn.Manager(o,{recognizers:[[fn.Pan],[fn.Pinch]]});const p=new fn.Tap({taps:1,event:"tapSingle"}),m=new fn.Tap({taps:2,event:"tapDouble"});f.add([m,p]),m.recognizeWith(p),p.requireFailure(m),f.on("pan",d=>{l&&s("move",{x:d.center.x,y:d.center.y,dx:d.center.x-l.center.x,dy:d.center.y-l.center.y}),l=d.isFinal?null:d}),f.on("pinch",d=>{}),f.on("tapSingle",d=>{s("input",{x:d.center.x,y:d.center.y,type:"secondary"})}),f.on("tapDouble",d=>{s("input",{x:d.center.x,y:d.center.y,type:"primary"})})}),ri(()=>{f.destroy()});function h(p){Ce[p?"unshift":"push"](()=>{o=p,e(1,o)})}return t.$$set=p=>{"class"in p&&e(0,a=p.class),"$$scope"in p&&e(2,r=p.$$scope)},[a,o,r,i,h]}class Yh extends he{constructor(n){super(),ue(this,n,Vh,Zh,fe,{class:0})}}function Xh(t){let n,e="Unsupported input method.";return{c(){n=L("span"),n.textContent=e},l(i){n=U(i,"SPAN",{"data-svelte-h":!0}),ve(n)!=="svelte-1d8n4pk"&&(n.textContent=e)},m(i,r){V(i,n,r)},p:Se,i:Se,o:Se,d(i){i&&A(n)}}}function Wh(t){let n,e;return n=new Yh({props:{class:t[0],$$slots:{default:[qh]},$$scope:{ctx:t}}}),n.$on("move",t[7]),n.$on("zoom",t[8]),n.$on("input",t[9]),{c(){te(n.$$.fragment)},l(i){ne(n.$$.fragment,i)},m(i,r){ie(n,i,r),e=!0},p(i,r){const s={};r&1&&(s.class=i[0]),r&1024&&(s.$$scope={dirty:r,ctx:i}),n.$set(s)},i(i){e||(F(n.$$.fragment,i),e=!0)},o(i){Z(n.$$.fragment,i),e=!1},d(i){re(n,i)}}}function jh(t){let n,e="Keyboard input method not implemented.";return{c(){n=L("span"),n.textContent=e},l(i){n=U(i,"SPAN",{"data-svelte-h":!0}),ve(n)!=="svelte-1slf3g9"&&(n.textContent=e)},m(i,r){V(i,n,r)},p:Se,i:Se,o:Se,d(i){i&&A(n)}}}function Gh(t){let n,e;return n=new Bh({props:{class:t[0],$$slots:{default:[Kh]},$$scope:{ctx:t}}}),n.$on("move",t[4]),n.$on("zoom",t[5]),n.$on("input",t[6]),{c(){te(n.$$.fragment)},l(i){ne(n.$$.fragment,i)},m(i,r){ie(n,i,r),e=!0},p(i,r){const s={};r&1&&(s.class=i[0]),r&1024&&(s.$$scope={dirty:r,ctx:i}),n.$set(s)},i(i){e||(F(n.$$.fragment,i),e=!0)},o(i){Z(n.$$.fragment,i),e=!1},d(i){re(n,i)}}}function qh(t){let n;const e=t[3].default,i=De(e,t,t[10],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&1024)&&Me(i,e,r,r[10],n?Oe(e,r[10],s,null):Re(r[10]),null)},i(r){n||(F(i,r),n=!0)},o(r){Z(i,r),n=!1},d(r){i&&i.d(r)}}}function Kh(t){let n;const e=t[3].default,i=De(e,t,t[10],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&1024)&&Me(i,e,r,r[10],n?Oe(e,r[10],s,null):Re(r[10]),null)},i(r){n||(F(i,r),n=!0)},o(r){Z(i,r),n=!1},d(r){i&&i.d(r)}}}function Jh(t){let n,e,i,r;const s=[Gh,jh,Wh,Xh],a=[];function o(f,l){return f[1]=="mouse"?0:f[1]=="keyboard"?1:f[1]=="touch"?2:3}return n=o(t),e=a[n]=s[n](t),{c(){e.c(),i=Ve()},l(f){e.l(f),i=Ve()},m(f,l){a[n].m(f,l),V(f,i,l),r=!0},p(f,[l]){let h=n;n=o(f),n===h?a[n].p(f,l):(An(),Z(a[h],1,1,()=>{a[h]=null}),In(),e=a[n],e?e.p(f,l):(e=a[n]=s[n](f),e.c()),F(e,1),e.m(i.parentNode,i))},i(f){r||(F(e),r=!0)},o(f){Z(e),r=!1},d(f){f&&A(i),a[n].d(f)}}}function pr(){return Js()}function Qh(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=pr();let{class:a=""}=n,{inputMethod:o="mouse"}=n;const f=v=>s("move",v.detail),l=v=>s("zoom",v.detail),h=v=>s("input",v.detail),p=v=>s("move",v.detail),m=v=>s("zoom",v.detail),d=v=>s("input",v.detail);return t.$$set=v=>{"class"in v&&e(0,a=v.class),"inputMethod"in v&&e(1,o=v.inputMethod),"$$scope"in v&&e(10,r=v.$$scope)},[a,o,s,i,f,l,h,p,m,d,r]}class eu extends he{constructor(n){super(),ue(this,n,Qh,Jh,fe,{class:0,inputMethod:1})}}function tu(t,n){return t!=t?n==n:t!==n||t&&typeof t=="object"||typeof t=="function"}class gr{constructor(n,e,i){y(this,"slot");y(this,"key");y(this,"value");y(this,"subscriptions",new Set);this.slot=n,this.key=e,this.load(),this.value===void 0&&(this.value=i,this.save())}getObj(){let n=localStorage.getItem(this.slot);return n===null&&(localStorage.setItem(this.slot,"{}"),n=localStorage.getItem(this.slot)),JSON.parse(n)}save(){const n=this.getObj();n[this.key]=this.value,localStorage.setItem(this.slot,JSON.stringify(n)),console.debug(`LocalStorageWritable: Saved to ${this.slot}['${this.key}'] = ${this.value}`)}load(){const n=this.getObj();this.value=this.key in n?n[this.key]:void 0,console.debug(`LocalStorageWritable: Loaded from ${this.slot}['${this.key}'] = ${this.value}`)}set(n){tu(this.value,n)&&(this.value=n,this.save(),this.subscriptions.forEach(e=>e[0](this.value)))}update(n){this.value&&this.set(n(this.value))}subscribe(n,e=()=>{}){const i=[n,e];return this.subscriptions.add(i),this.value!==void 0&&n(this.value),()=>{this.subscriptions.delete(i)}}}const Gi=new gr("settings","autoDisplayInfo",!0),qi=new gr("settings","volume",.25),xn=new gr("settings","inputMethod","mouse");function nu(t){let n,e,i;return{c(){n=L("canvas"),e=J(),i=L("canvas")},l(r){n=U(r,"CANVAS",{}),H(n).forEach(A),e=Q(r),i=U(r,"CANVAS",{}),H(i).forEach(A)},m(r,s){V(r,n,s),t[9](n),V(r,e,s),V(r,i,s),t[10](i)},p:Se,d(r){r&&(A(n),A(e),A(i)),t[9](null),t[10](null)}}}function iu(t){let n,e,i,r,s,a;return e=new eu({props:{class:"w-full h-full force-overlap",inputMethod:t[5],$$slots:{default:[nu]},$$scope:{ctx:t}}}),e.$on("move",t[11]),e.$on("zoom",t[12]),e.$on("input",t[13]),{c(){n=L("div"),te(e.$$.fragment),this.h()},l(o){n=U(o,"DIV",{class:!0});var f=H(n);ne(e.$$.fragment,f),f.forEach(A),this.h()},h(){M(n,"class","w-full h-full cursor-pointer")},m(o,f){V(o,n,f),ie(e,n,null),t[14](n),r=!0,s||(a=Qs(i=fo.call(null,n,t[15])),s=!0)},p(o,[f]){const l={};f&32&&(l.inputMethod=o[5]),f&33554456&&(l.$$scope={dirty:f,ctx:o}),e.$set(l),i&&ea(i.update)&&f&26&&i.update.call(null,o[15])},i(o){r||(F(e.$$.fragment,o),r=!0)},o(o){Z(e.$$.fragment,o),r=!1},d(o){o&&A(n),re(e),t[14](null),s=!1,a()}}}function ru(t,n,e){let i;Rt(t,xn,B=>e(5,i=B));const r=Js();let s,{world:a}=n,{theme:o}=n,{viewport:f}=n,l,h;const p=async()=>{l==null||l.destroy(),h&&(l=new Dh(a,o,h,f),await l.init(),e(3,h.width=s.clientWidth,h),e(3,h.height=s.clientHeight,h),w=!0,I())};let m,d;const v=async()=>{m==null||m.destroy(),d&&(m=new Ph(a,o,d,f),await m.init(),e(4,d.width=s.clientWidth,d),e(4,d.height=s.clientHeight,d))};let w=!1,E=-1;const I=()=>{cancelAnimationFrame(E),E=requestAnimationFrame(I),w&&(w=!1,l==null||l.render()),m==null||m.render()};let b,R,T;ii(async()=>{await p(),await v(),b=a.addEventListener("change",()=>{w=!0}),R=f.addEventListener("change",()=>{w=!0}),T=xn.subscribe(()=>{setTimeout(async()=>{await p(),await v()},100)})}),ri(()=>{l==null||l.destroy(),m==null||m.destroy(),a.removeEventListener(b),f.removeEventListener(R),T(),cancelAnimationFrame(E)});function O(B){Ce[B?"unshift":"push"](()=>{h=B,e(3,h)})}function Y(B){Ce[B?"unshift":"push"](()=>{d=B,e(4,d)})}const S=B=>{f.translate(h,B.detail.dx,B.detail.dy),f.change()},N=B=>{const ee=B.detail.amountType=="relative"?f.scale*B.detail.amount:f.scale+(B.detail.amount-1),ae=f.clampScale(h,ee,4,32);f.scaleFrom(h,ae,B.detail.x,B.detail.y),f.change()},x=B=>{const ee=f.canvasPos(h,B.detail.x,B.detail.y,!0);switch(B.detail.type){case"primary":r("action",{type:"reveal",pos:ee});break;case"secondary":r("action",{type:"flag",pos:ee});break;case"extra":r("action",{type:"reset",pos:ee});break}a.change()};function k(B){Ce[B?"unshift":"push"](()=>{s=B,e(2,s)})}const z=(B,ee)=>{e(3,h.width=B,h),e(3,h.height=ee,h),e(4,d.width=B,d),e(4,d.height=ee,d),f.change(),I()};return t.$$set=B=>{"world"in B&&e(0,a=B.world),"theme"in B&&e(8,o=B.theme),"viewport"in B&&e(1,f=B.viewport)},[a,f,s,h,d,i,r,I,o,O,Y,S,N,x,k,z]}class su extends he{constructor(n){super(),ue(this,n,ru,iu,fe,{world:0,theme:8,viewport:1})}}class uo{constructor(n,e){y(this,"textures");y(this,"img");typeof n=="string"?(this.img=document.createElement("img"),this.img.loading="eager",this.img.src=n):this.img=n,this.textures=e}awaitLoad(){return new Promise((n,e)=>{if(this.img instanceof HTMLCanvasElement||this.img.complete&&this.img.naturalWidth!==0)return n();const i=()=>{this.img.removeEventListener("load",i),this.img.removeEventListener("error",r),n()},r=()=>{this.img.removeEventListener("load",i),this.img.removeEventListener("error",r),e()};this.img.addEventListener("load",i),this.img.addEventListener("error",r)})}onLoad(n){this.awaitLoad().then(()=>n(this))}draw(n,e,i,r,s,a){const[o,f,l,h]=this.textures[e];n.drawImage(this.img,o,f,l,h,i,r,s,a)}toImageDataAtlas(){const[n,e]=ia(this.img.width,this.img.height);return e.imageSmoothingEnabled=!1,e.drawImage(this.img,0,0),new au(Object.fromEntries(Object.entries(this.textures).map(([i,[r,s,a,o]])=>[i,e.getImageData(r,s,a,o)])))}}class au{constructor(n){y(this,"textures");this.textures=n}toImageAtlas(n=!0){let e=0,i=0,r={},s=0;for(const f in this.textures){const l=this.textures[f];n&&s++,r[f]={x:s,y:n?1:0,width:l.width,height:l.height,name:f},s+=l.width+(n?1:0),e=s,i=Math.max(i,l.height+(n?2:0))}const[a,o]=ia(e,i);for(const f in r){const l=r[f];o.putImageData(this.textures[f],l.x,l.y)}return new uo(a,Object.fromEntries(Object.entries(r).map(([f,l])=>(l=l,[f,[l.x,l.y,l.width,l.height]]))))}}class ou{constructor(){y(this,"volume",1)}playSound(n,e=1){const i=this.soundEffects[n],r=si(e*this.volume);if(r<=0)return;const s=document.createElement("audio");s.src=i.src,s.volume=r,s.playbackRate=1+Math.random()*i.variation,s.preservesPitch=!1;const a=()=>{s.removeEventListener("ended",a),s.remove()};s.addEventListener("ended",a),s.play()}}class lu extends ou{constructor(){super(...arguments);y(this,"tileset",new uo("/infinite-minesweeper/retro/tileset.png",{null:[0,0,16,16],skull:[0,16,16,16],bomb:[16,0,16,16],explosion1:[16,16,16,16],explosion2:[16,32,16,16],explosion3:[16,48,16,16],explosion4:[16,64,16,16],flag:[32,16,16,16],flag_1:[32,32,16,16],flag_2:[32,48,16,16],flag_3:[32,64,16,16],number_0:[48,0,16,16],number_1:[48,16,16,16],number_2:[48,32,16,16],number_3:[48,48,16,16],number_4:[48,64,16,16],number_5:[48,80,16,16],number_6:[48,96,16,16],number_7:[48,112,16,16],number_8:[48,128,16,16],number_9:[48,144,16,16],number_10:[48,160,16,16],number_11:[48,176,16,16],number_12:[48,192,16,16],number_13:[48,208,16,16],number_14:[48,224,16,16],number_15:[48,240,16,16],number_16:[48,256,16,16],number_17:[48,272,16,16],number_18:[48,288,16,16],number_19:[48,304,16,16],number_20:[48,320,16,16],number_21:[48,336,16,16],number_22:[48,352,16,16],number_23:[48,368,16,16],number_24:[48,384,16,16],tile_vanilla_covered:[64,0,16,16],tile_vanilla_revealed:[80,0,16,16],tile_chocolate_covered:[64,16,16,16],tile_chocolate_revealed:[80,16,16,16],tile_waffle_light_covered:[64,32,16,16],tile_waffle_light_revealed:[80,32,16,16],tile_waffle_dark_covered:[96,32,16,16],tile_waffle_dark_revealed:[112,32,16,16],tile_stroopwafel_light_covered:[64,48,16,16],tile_stroopwafel_light_revealed:[80,48,16,16],tile_stroopwafel_dark_covered:[96,48,16,16],tile_stroopwafel_dark_revealed:[112,48,16,16],tile_blueberry_covered:[64,64,16,16],tile_blueberry_revealed:[80,64,16,16],tile_strawberry_covered:[64,80,16,16],tile_strawberry_revealed:[80,80,16,16]}));y(this,"soundEffects",{reveal:{src:"/infinite-minesweeper/retro/reveal.wav",variation:.25},unflag:{src:"/infinite-minesweeper/retro/unflag.wav",variation:.25},explosion:{src:"/infinite-minesweeper/retro/explosion.wav",variation:.25}})}async init(){await this.tileset.awaitLoad(),this.tileset=this.tileset.toImageDataAtlas().toImageAtlas(!0)}drawNearby(e,i){switch(i){case 0:break;case 1:this.tileset.draw(e,"number_1",0,0,1,1);break;case 2:this.tileset.draw(e,"number_2",0,0,1,1);break;case 3:this.tileset.draw(e,"number_3",0,0,1,1);break;case 4:this.tileset.draw(e,"number_4",0,0,1,1);break;case 5:this.tileset.draw(e,"number_5",0,0,1,1);break;case 6:this.tileset.draw(e,"number_6",0,0,1,1);break;case 7:this.tileset.draw(e,"number_7",0,0,1,1);break;case 8:this.tileset.draw(e,"number_8",0,0,1,1);break;case 9:this.tileset.draw(e,"number_9",0,0,1,1);break;case 10:this.tileset.draw(e,"number_10",0,0,1,1);break;case 11:this.tileset.draw(e,"number_11",0,0,1,1);break;case 12:this.tileset.draw(e,"number_12",0,0,1,1);break;case 13:this.tileset.draw(e,"number_13",0,0,1,1);break;case 14:this.tileset.draw(e,"number_14",0,0,1,1);break;case 15:this.tileset.draw(e,"number_15",0,0,1,1);break;case 16:this.tileset.draw(e,"number_16",0,0,1,1);break;case 17:this.tileset.draw(e,"number_17",0,0,1,1);break;case 18:this.tileset.draw(e,"number_18",0,0,1,1);break;case 19:this.tileset.draw(e,"number_19",0,0,1,1);break;case 20:this.tileset.draw(e,"number_20",0,0,1,1);break;case 21:this.tileset.draw(e,"number_21",0,0,1,1);break;case 22:this.tileset.draw(e,"number_22",0,0,1,1);break;case 23:this.tileset.draw(e,"number_23",0,0,1,1);break;case 24:this.tileset.draw(e,"number_24",0,0,1,1);break;default:throw new Error("ThemeRetro invalid draw nearby count.")}}drawFlags(e,i){switch(i){case 0:break;case 1:this.tileset.draw(e,"flag_1",0,0,1,1);break;case 2:this.tileset.draw(e,"flag_2",0,0,1,1);break;case 3:this.tileset.draw(e,"flag_3",0,0,1,1);break;default:throw new Error("ThemeRetro invalid draw flag count.")}}drawSingleMineTile(e,i,r,s,a){if(a){this.tileset.draw(e,r,0,0,1,1);return}switch(i.state){case Ct.Covered:this.tileset.draw(e,r,0,0,1,1);break;case Ct.Flagged:this.tileset.draw(e,r,0,0,1,1),this.tileset.draw(e,"flag",0,0,1,1);break;case Ct.Revealed:{this.tileset.draw(e,s,0,0,1,1),this.drawNearby(e,i.minesNearby());break}}}drawMultiMineTile(e,i,r,s,a){if(a){this.tileset.draw(e,r,0,0,1,1);return}i.isRevealed?(this.tileset.draw(e,s,0,0,1,1),this.drawNearby(e,i.minesNearby())):(this.tileset.draw(e,r,0,0,1,1),this.drawFlags(e,i.numFlags()))}drawStrawberryTile(e,i,r){if(r){this.tileset.draw(e,"tile_strawberry_covered",0,0,1,1);return}switch(i.state){case Ct.Covered:this.tileset.draw(e,"tile_strawberry_covered",0,0,1,1);break;case Ct.Flagged:this.tileset.draw(e,"tile_strawberry_covered",0,0,1,1),this.tileset.draw(e,"flag",0,0,1,1);break;case Ct.Revealed:{this.tileset.draw(e,"tile_strawberry_revealed",0,0,1,1);const s=i.minesNearbySecondary(!0);s!==null?(e.save(),e.scale(.55,.55),e.translate(.1,.45),this.drawNearby(e,i.secondaryNearbyCountRightSide?i.minesNearby(!0):s),e.translate(.7,0),this.drawNearby(e,i.secondaryNearbyCountRightSide?s:i.minesNearby(!0)),e.restore()):this.drawNearby(e,i.minesNearby());break}}}drawForcedTile(e,i,r){switch(i.type){case"vanilla":this.drawSingleMineTile(e,i,"tile_vanilla_covered","tile_vanilla_revealed",r);break;case"chocolate":this.drawSingleMineTile(e,i,"tile_chocolate_covered","tile_chocolate_revealed",r);break;case"waffle":{i.isDark?this.drawSingleMineTile(e,i,"tile_waffle_dark_covered","tile_waffle_dark_revealed",r):this.drawSingleMineTile(e,i,"tile_waffle_light_covered","tile_waffle_light_revealed",r);break}case"stroopwafel":{i.isDark?this.drawSingleMineTile(e,i,"tile_stroopwafel_dark_covered","tile_stroopwafel_dark_revealed",r):this.drawSingleMineTile(e,i,"tile_stroopwafel_light_covered","tile_stroopwafel_light_revealed",r);break}case"blueberry":{this.drawMultiMineTile(e,i,"tile_blueberry_covered","tile_blueberry_revealed",r);break}case"strawberry":{this.drawStrawberryTile(e,i,r);break}}}drawTile(e,i){e.save(),e.translate(i.x,i.y),this.drawForcedTile(e,i,!1),e.restore()}drawParticle(e,i){switch(e.save(),i.type){case"flag":{e.translate(i.x+.5,i.y+.5),e.rotate(i.r),e.globalAlpha=i.opacity,i.isMultiFlag?(e.translate(-.5,-.5),this.drawFlags(e,i.numFlags)):this.tileset.draw(e,"flag",-.5,-.5,1,1);break}case"explosion":{const r=["explosion1","explosion2","explosion3","explosion4"],s=Math.min(Math.floor(i.lifetime/i.maxLifetime*r.length),r.length-1);this.tileset.draw(e,r[s],i.tile.x,i.tile.y,1,1);break}case"faketile":{e.translate(i.tile.x,i.tile.y),e.globalAlpha=i.opacity,this.drawForcedTile(e,i.tile,!0);break}case"tilereveal":{e.translate(i.x+.5,i.y+.5),e.rotate(i.r),e.translate(-.5,-.5),e.globalAlpha=i.opacity,this.drawForcedTile(e,i.tile,!0);break}}e.globalAlpha=1,e.restore()}drawDeathIcon(e,i,r){this.tileset.draw(e,"skull",i,r,1,1)}}function $s(t){let n,e;return n=new su({props:{world:t[0],theme:t[4],viewport:t[1]}}),n.$on("action",t[7]),{c(){te(n.$$.fragment)},l(i){ne(n.$$.fragment,i)},m(i,r){ie(n,i,r),e=!0},p(i,r){const s={};r&1&&(s.world=i[0]),r&16&&(s.theme=i[4]),r&2&&(s.viewport=i[1]),n.$set(s)},i(i){e||(F(n.$$.fragment,i),e=!0)},o(i){Z(n.$$.fragment,i),e=!1},d(i){re(n,i)}}}function cu(t){let n,e,i,r,s=t[0]&&t[4]&&t[1]&&$s(t);return{c(){s&&s.c(),n=Ve()},l(a){s&&s.l(a),n=Ve()},m(a,o){s&&s.m(a,o),V(a,n,o),e=!0,i||(r=ce(window,"beforeunload",t[6]),i=!0)},p(a,[o]){a[0]&&a[4]&&a[1]?s?(s.p(a,o),o&19&&F(s,1)):(s=$s(a),s.c(),F(s,1),s.m(n.parentNode,n)):s&&(An(),Z(s,1,1,()=>{s=null}),In())},i(a){e||(F(s),e=!0)},o(a){Z(s),e=!1},d(a){a&&A(n),s&&s.d(a),i=!1,r()}}}function fu(t,n,e){let i;Rt(t,qi,p=>e(5,i=p));let{saveSlot:r}=n,{world:s}=n,a=new lu,{viewport:o}=n,{bookmarks:f=[]}=n;ii(async()=>{await a.init();const p=xh(r);e(0,s=p.world),e(1,o=p.viewport??new mr(s)),e(2,f=p.bookmarks??[]),s.addEventListener("sound_unflag",()=>{a.playSound("unflag")}),s.addEventListener("sound_reveal",({data:m})=>{a.playSound("reveal",m/10+.9)}),s.addEventListener("sound_explosion",()=>{a.playSound("explosion")})}),ri(()=>{s.destroyDispatcher(),o.destroyDispatcher(),location.reload()});const l=()=>{Ah(r,{world:s,viewport:o,bookmarks:f})},h=p=>{p.detail.type=="reveal"?s.reveal(p.detail.pos.x,p.detail.pos.y):p.detail.type=="flag"?s.flag(p.detail.pos.x,p.detail.pos.y):p.detail.type=="reset"&&s.reset(p.detail.pos.x,p.detail.pos.y)};return t.$$set=p=>{"saveSlot"in p&&e(3,r=p.saveSlot),"world"in p&&e(0,s=p.world),"viewport"in p&&e(1,o=p.viewport),"bookmarks"in p&&e(2,f=p.bookmarks)},t.$$.update=()=>{t.$$.dirty&32&&e(4,a.volume=i,a)},[s,o,f,r,a,i,l,h]}class hu extends he{constructor(n){super(),ue(this,n,fu,cu,fe,{saveSlot:3,world:0,viewport:1,bookmarks:2})}}/**
 * @license lucide-svelte v0.372.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const uu={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":2,"stroke-linecap":"round","stroke-linejoin":"round"},Bs=uu;function Fs(t,n,e){const i=t.slice();return i[10]=n[e][0],i[11]=n[e][1],i}function Li(t){let n,e=[t[11]],i={};for(let r=0;r<e.length;r+=1)i=se(i,e[r]);return{c(){n=ta(t[10]),this.h()},l(r){n=na(r,t[10],{}),H(n).forEach(A),this.h()},h(){Qn(n,i)},m(r,s){V(r,n,s)},p(r,s){Qn(n,i=it(e,[s&32&&r[11]]))},d(r){r&&A(n)}}}function Hs(t){let n=t[10],e,i=t[10]&&Li(t);return{c(){i&&i.c(),e=Ve()},l(r){i&&i.l(r),e=Ve()},m(r,s){i&&i.m(r,s),V(r,e,s)},p(r,s){r[10]?n?fe(n,r[10])?(i.d(1),i=Li(r),n=r[10],i.c(),i.m(e.parentNode,e)):i.p(r,s):(i=Li(r),n=r[10],i.c(),i.m(e.parentNode,e)):n&&(i.d(1),i=null,n=r[10])},d(r){r&&A(e),i&&i.d(r)}}}function du(t){let n,e,i,r,s,a=Wt(t[5]),o=[];for(let m=0;m<a.length;m+=1)o[m]=Hs(Fs(t,a,m));const f=t[9].default,l=De(f,t,t[8],null);let h=[Bs,t[6],{width:t[2]},{height:t[2]},{stroke:t[1]},{"stroke-width":i=t[4]?Number(t[3])*24/Number(t[2]):t[3]},{class:r=`lucide-icon lucide lucide-${t[0]} ${t[7].class??""}`}],p={};for(let m=0;m<h.length;m+=1)p=se(p,h[m]);return{c(){n=ta("svg");for(let m=0;m<o.length;m+=1)o[m].c();e=Ve(),l&&l.c(),this.h()},l(m){n=na(m,"svg",{width:!0,height:!0,stroke:!0,"stroke-width":!0,class:!0});var d=H(n);for(let v=0;v<o.length;v+=1)o[v].l(d);e=Ve(),l&&l.l(d),d.forEach(A),this.h()},h(){Qn(n,p)},m(m,d){V(m,n,d);for(let v=0;v<o.length;v+=1)o[v]&&o[v].m(n,null);P(n,e),l&&l.m(n,null),s=!0},p(m,[d]){if(d&32){a=Wt(m[5]);let v;for(v=0;v<a.length;v+=1){const w=Fs(m,a,v);o[v]?o[v].p(w,d):(o[v]=Hs(w),o[v].c(),o[v].m(n,e))}for(;v<o.length;v+=1)o[v].d(1);o.length=a.length}l&&l.p&&(!s||d&256)&&Me(l,f,m,m[8],s?Oe(f,m[8],d,null):Re(m[8]),null),Qn(n,p=it(h,[Bs,d&64&&m[6],(!s||d&4)&&{width:m[2]},(!s||d&4)&&{height:m[2]},(!s||d&2)&&{stroke:m[1]},(!s||d&28&&i!==(i=m[4]?Number(m[3])*24/Number(m[2]):m[3]))&&{"stroke-width":i},(!s||d&129&&r!==(r=`lucide-icon lucide lucide-${m[0]} ${m[7].class??""}`))&&{class:r}]))},i(m){s||(F(l,m),s=!0)},o(m){Z(l,m),s=!1},d(m){m&&A(n),Ki(o,m),l&&l.d(m)}}}function _u(t,n,e){const i=["name","color","size","strokeWidth","absoluteStrokeWidth","iconNode"];let r=Ur(n,i),{$$slots:s={},$$scope:a}=n,{name:o}=n,{color:f="currentColor"}=n,{size:l=24}=n,{strokeWidth:h=2}=n,{absoluteStrokeWidth:p=!1}=n,{iconNode:m}=n;return t.$$set=d=>{e(7,n=se(se({},n),be(d))),e(6,r=Ur(n,i)),"name"in d&&e(0,o=d.name),"color"in d&&e(1,f=d.color),"size"in d&&e(2,l=d.size),"strokeWidth"in d&&e(3,h=d.strokeWidth),"absoluteStrokeWidth"in d&&e(4,p=d.absoluteStrokeWidth),"iconNode"in d&&e(5,m=d.iconNode),"$$scope"in d&&e(8,a=d.$$scope)},n=be(n),[o,f,l,h,p,m,r,n,a,s]}class St extends he{constructor(n){super(),ue(this,n,_u,du,fe,{name:0,color:1,size:2,strokeWidth:3,absoluteStrokeWidth:4,iconNode:5})}}function mu(t){let n;const e=t[2].default,i=De(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Me(i,e,r,r[3],n?Oe(e,r[3],s,null):Re(r[3]),null)},i(r){n||(F(i,r),n=!0)},o(r){Z(i,r),n=!1},d(r){i&&i.d(r)}}}function pu(t){let n,e;const i=[{name:"info"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[mu]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=se(r,i[s]);return n=new St({props:r}),{c(){te(n.$$.fragment)},l(s){ne(n.$$.fragment,s)},m(s,a){ie(n,s,a),e=!0},p(s,[a]){const o=a&3?it(i,[i[0],a&2&&Tt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(F(n.$$.fragment,s),e=!0)},o(s){Z(n.$$.fragment,s),e=!1},d(s){re(n,s)}}}function gu(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["circle",{cx:"12",cy:"12",r:"10"}],["path",{d:"M12 16v-4"}],["path",{d:"M12 8h.01"}]];return t.$$set=a=>{e(1,n=se(se({},n),be(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=be(n),[s,n,i,r]}class vu extends he{constructor(n){super(),ue(this,n,gu,pu,fe,{})}}function Zs(t){let n,e,i,r,s,a,o=t[1]&&Vs(t);const f=t[4].default,l=De(f,t,t[3],null);return{c(){n=L("div"),e=L("div"),o&&o.c(),i=J(),r=L("div"),s=L("div"),l&&l.c(),this.h()},l(h){n=U(h,"DIV",{class:!0});var p=H(n);e=U(p,"DIV",{class:!0});var m=H(e);o&&o.l(m),m.forEach(A),i=Q(p),r=U(p,"DIV",{class:!0});var d=H(r);s=U(d,"DIV",{class:!0});var v=H(s);l&&l.l(v),v.forEach(A),d.forEach(A),p.forEach(A),this.h()},h(){M(e,"class","modal-background svelte-9y1m1s"),Xt(e,"modal-background-styled",t[2]),M(s,"class","pointer-events-auto"),M(r,"class","modal-content flex justify-center items-center pointer-events-none p-8 svelte-9y1m1s"),M(n,"class","modal force-overlap svelte-9y1m1s")},m(h,p){V(h,n,p),P(n,e),o&&o.m(e,null),P(n,i),P(n,r),P(r,s),l&&l.m(s,null),a=!0},p(h,p){h[1]?o?o.p(h,p):(o=Vs(h),o.c(),o.m(e,null)):o&&(o.d(1),o=null),(!a||p&4)&&Xt(e,"modal-background-styled",h[2]),l&&l.p&&(!a||p&8)&&Me(l,f,h,h[3],a?Oe(f,h[3],p,null):Re(h[3]),null)},i(h){a||(F(l,h),a=!0)},o(h){Z(l,h),a=!1},d(h){h&&A(n),o&&o.d(),l&&l.d(h)}}}function Vs(t){let n,e,i;return{c(){n=L("button"),this.h()},l(r){n=U(r,"BUTTON",{class:!0,"aria-label":!0}),H(n).forEach(A),this.h()},h(){M(n,"class","w-full h-full"),M(n,"aria-label","Close Modal")},m(r,s){V(r,n,s),e||(i=ce(n,"click",t[5]),e=!0)},p:Se,d(r){r&&A(n),e=!1,i()}}}function bu(t){let n,e,i=t[0]&&Zs(t);return{c(){i&&i.c(),n=Ve()},l(r){i&&i.l(r),n=Ve()},m(r,s){i&&i.m(r,s),V(r,n,s),e=!0},p(r,[s]){r[0]?i?(i.p(r,s),s&1&&F(i,1)):(i=Zs(r),i.c(),F(i,1),i.m(n.parentNode,n)):i&&(An(),Z(i,1,1,()=>{i=null}),In())},i(r){e||(F(i),e=!0)},o(r){Z(i),e=!1},d(r){r&&A(n),i&&i.d(r)}}}function wu(t,n,e){let{$$slots:i={},$$scope:r}=n,{visible:s=!1}=n,{closable:a=!0}=n,{backgroundStyle:o=!0}=n;const f=()=>e(0,s=!1);return t.$$set=l=>{"visible"in l&&e(0,s=l.visible),"closable"in l&&e(1,a=l.closable),"backgroundStyle"in l&&e(2,o=l.backgroundStyle),"$$scope"in l&&e(3,r=l.$$scope)},[s,a,o,r,i,f]}class Ui extends he{constructor(n){super(),ue(this,n,wu,bu,fe,{visible:0,closable:1,backgroundStyle:2})}}function yu(t){let n;const e=t[2].default,i=De(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Me(i,e,r,r[3],n?Oe(e,r[3],s,null):Re(r[3]),null)},i(r){n||(F(i,r),n=!0)},o(r){Z(i,r),n=!1},d(r){i&&i.d(r)}}}function ku(t){let n,e;const i=[{name:"chevron-left"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[yu]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=se(r,i[s]);return n=new St({props:r}),{c(){te(n.$$.fragment)},l(s){ne(n.$$.fragment,s)},m(s,a){ie(n,s,a),e=!0},p(s,[a]){const o=a&3?it(i,[i[0],a&2&&Tt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(F(n.$$.fragment,s),e=!0)},o(s){Z(n.$$.fragment,s),e=!1},d(s){re(n,s)}}}function Eu(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"m15 18-6-6 6-6"}]];return t.$$set=a=>{e(1,n=se(se({},n),be(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=be(n),[s,n,i,r]}class Tu extends he{constructor(n){super(),ue(this,n,Eu,ku,fe,{})}}function Su(t){let n;const e=t[2].default,i=De(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Me(i,e,r,r[3],n?Oe(e,r[3],s,null):Re(r[3]),null)},i(r){n||(F(i,r),n=!0)},o(r){Z(i,r),n=!1},d(r){i&&i.d(r)}}}function xu(t){let n,e;const i=[{name:"chevron-right"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Su]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=se(r,i[s]);return n=new St({props:r}),{c(){te(n.$$.fragment)},l(s){ne(n.$$.fragment,s)},m(s,a){ie(n,s,a),e=!0},p(s,[a]){const o=a&3?it(i,[i[0],a&2&&Tt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(F(n.$$.fragment,s),e=!0)},o(s){Z(n.$$.fragment,s),e=!1},d(s){re(n,s)}}}function Au(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"m9 18 6-6-6-6"}]];return t.$$set=a=>{e(1,n=se(se({},n),be(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=be(n),[s,n,i,r]}class Iu extends he{constructor(n){super(),ue(this,n,Au,xu,fe,{})}}function Cu(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_strawberry_screenshot.png" alt="Strawberry Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Strawberry</h2> <div class="biome-description svelte-1pkhcy2">Tile nearby mine count may have 2 values.
                        <br/><br/>
                        Be careful while revealing tiles; If any of the two values match, the tiles will auto reveal.</div></div>`;return{c(){n=L("div"),n.innerHTML=e,this.h()},l(i){n=U(i,"DIV",{class:!0,"data-svelte-h":!0}),ve(n)!=="svelte-1hn2487"&&(n.innerHTML=e),this.h()},h(){M(n,"class","biome svelte-1pkhcy2")},m(i,r){V(i,n,r)},d(i){i&&A(n)}}}function Nu(t){let n,e='<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_blueberry_screenshot.png" alt="Blueberry Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Blueberry</h2> <div class="biome-description svelte-1pkhcy2">Tiles may have up to 3 mines.</div></div>';return{c(){n=L("div"),n.innerHTML=e,this.h()},l(i){n=U(i,"DIV",{class:!0,"data-svelte-h":!0}),ve(n)!=="svelte-1pq8aco"&&(n.innerHTML=e),this.h()},h(){M(n,"class","biome svelte-1pkhcy2")},m(i,r){V(i,n,r)},d(i){i&&A(n)}}}function Du(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_stroopwafel_screenshot.png" alt="Stroopwafel Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Stroopwafel</h2> <div class="biome-description svelte-1pkhcy2">3x3 checkers of tiles.<br/>
                        Dark checkered sections have 8 mines.<br/>
                        Light checkered sections have 1 mine.</div></div>`;return{c(){n=L("div"),n.innerHTML=e,this.h()},l(i){n=U(i,"DIV",{class:!0,"data-svelte-h":!0}),ve(n)!=="svelte-4cbz83"&&(n.innerHTML=e),this.h()},h(){M(n,"class","biome svelte-1pkhcy2")},m(i,r){V(i,n,r)},d(i){i&&A(n)}}}function Mu(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_waffle_screenshot.png" alt="Waffle Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Waffle</h2> <div class="biome-description svelte-1pkhcy2">2x2 checkers of tiles.<br/>
                        Dark checkered sections have 3 mines.<br/>
                        Light checkered sections have 1 mine.</div></div>`;return{c(){n=L("div"),n.innerHTML=e,this.h()},l(i){n=U(i,"DIV",{class:!0,"data-svelte-h":!0}),ve(n)!=="svelte-1ji8mo3"&&(n.innerHTML=e),this.h()},h(){M(n,"class","biome svelte-1pkhcy2")},m(i,r){V(i,n,r)},d(i){i&&A(n)}}}function Ru(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_chocolate_screenshot.png" alt="Chocolate Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Chocolate</h2> <div class="biome-description svelte-1pkhcy2">The standard Minesweeper rules.<br/>
                        Much more mines than Vanilla biome.</div></div>`;return{c(){n=L("div"),n.innerHTML=e,this.h()},l(i){n=U(i,"DIV",{class:!0,"data-svelte-h":!0}),ve(n)!=="svelte-gc9i28"&&(n.innerHTML=e),this.h()},h(){M(n,"class","biome svelte-1pkhcy2")},m(i,r){V(i,n,r)},d(i){i&&A(n)}}}function Ou(t){let n,e='<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_vanilla_screenshot.png" alt="Vanilla Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Vanilla</h2> <div class="biome-description svelte-1pkhcy2">The standard Minesweeper rules.</div></div>';return{c(){n=L("div"),n.innerHTML=e,this.h()},l(i){n=U(i,"DIV",{class:!0,"data-svelte-h":!0}),ve(n)!=="svelte-ic5bha"&&(n.innerHTML=e),this.h()},h(){M(n,"class","biome svelte-1pkhcy2")},m(i,r){V(i,n,r)},d(i){i&&A(n)}}}function Pu(t){let n,e,i,r,s,a,o,f,l,h,p,m;function d(E,I){if(E[0]=="Vanilla")return Ou;if(E[0]=="Chocolate")return Ru;if(E[0]=="Waffle")return Mu;if(E[0]=="Stroopwafel")return Du;if(E[0]=="Blueberry")return Nu;if(E[0]=="Strawberry")return Cu}let v=d(t),w=v&&v(t);return a=new Tu({}),l=new Iu({}),{c(){n=L("div"),e=L("div"),w&&w.c(),i=J(),r=L("div"),s=L("button"),te(a.$$.fragment),o=J(),f=L("button"),te(l.$$.fragment),this.h()},l(E){n=U(E,"DIV",{class:!0});var I=H(n);e=U(I,"DIV",{class:!0});var b=H(e);w&&w.l(b),b.forEach(A),i=Q(I),r=U(I,"DIV",{class:!0});var R=H(r);s=U(R,"BUTTON",{class:!0});var T=H(s);ne(a.$$.fragment,T),T.forEach(A),o=Q(R),f=U(R,"BUTTON",{class:!0});var O=H(f);ne(l.$$.fragment,O),O.forEach(A),R.forEach(A),I.forEach(A),this.h()},h(){M(e,"class","pointer-events-auto px-12"),M(s,"class","pointer-events-auto pl-4 hover:-translate-x-1 transition-transform"),M(f,"class","pointer-events-auto pr-4 hover:translate-x-1 transition-transform"),M(r,"class","pointer-events-none flex justify-between z-10"),M(n,"class","w-full h-full force-overlap text-white")},m(E,I){V(E,n,I),P(n,e),w&&w.m(e,null),P(n,i),P(n,r),P(r,s),ie(a,s,null),P(r,o),P(r,f),ie(l,f,null),h=!0,p||(m=[ce(s,"click",t[2]),ce(f,"click",t[3])],p=!0)},p(E,[I]){v!==(v=d(E))&&(w&&w.d(1),w=v&&v(E),w&&(w.c(),w.m(e,null)))},i(E){h||(F(a.$$.fragment,E),F(l.$$.fragment,E),h=!0)},o(E){Z(a.$$.fragment,E),Z(l.$$.fragment,E),h=!1},d(E){E&&A(n),w&&w.d(),re(a),re(l),p=!1,Jt(m)}}}function Lu(t,n,e){const i=["Vanilla","Chocolate","Waffle","Stroopwafel","Blueberry","Strawberry"];let r="Vanilla";function s(f){let l=i.indexOf(r);l+=f=="next"?1:-1,l>=i.length&&(l=0),l<0&&(l=i.length-1),e(0,r=i[l])}return[r,s,f=>{f.preventDefault(),s("prev")},f=>{f.preventDefault(),s("next")}]}class Uu extends he{constructor(n){super(),ue(this,n,Lu,Pu,fe,{})}}function Ys(t,n,e){const i=t.slice();return i[4]=n[e],i}function Xs(t){let n,e=t[4]+"",i,r,s,a,o;function f(){return t[3](t[4])}return{c(){n=L("button"),i=Qe(e),r=J(),this.h()},l(l){n=U(l,"BUTTON",{class:!0});var h=H(n);i=et(h,e),r=Q(h),h.forEach(A),this.h()},h(){M(n,"class","tab w-full flex justify-center py-1 px-4 rounded-md svelte-1v0way8"),n.disabled=s=t[4]==t[0],Xt(n,"selected",t[4]==t[0])},m(l,h){V(l,n,h),P(n,i),P(n,r),a||(o=ce(n,"click",f),a=!0)},p(l,h){t=l,h&1&&s!==(s=t[4]==t[0])&&(n.disabled=s),h&5&&Xt(n,"selected",t[4]==t[0])},d(l){l&&A(n),a=!1,o()}}}function zu(t){let n;function e(s,a){return s[1]=="mouse"?Vu:s[1]=="keyboard"?Zu:s[1]=="touch"?Hu:Fu}let i=e(t),r=i(t);return{c(){n=L("div"),r.c(),this.h()},l(s){n=U(s,"DIV",{class:!0});var a=H(n);r.l(a),a.forEach(A),this.h()},h(){M(n,"class","px-4")},m(s,a){V(s,n,a),r.m(n,null)},p(s,a){i!==(i=e(s))&&(r.d(1),r=i(s),r&&(r.c(),r.m(n,null)))},i:Se,o:Se,d(s){s&&A(n),r.d()}}}function $u(t){let n,e,i;return e=new Uu({}),{c(){n=L("div"),te(e.$$.fragment),this.h()},l(r){n=U(r,"DIV",{class:!0});var s=H(n);ne(e.$$.fragment,s),s.forEach(A),this.h()},h(){M(n,"class","w-full h-full inline")},m(r,s){V(r,n,s),ie(e,n,null),i=!0},p:Se,i(r){i||(F(e.$$.fragment,r),i=!0)},o(r){Z(e.$$.fragment,r),i=!1},d(r){r&&A(n),re(e)}}}function Bu(t){let n,e=`<div><a class="text-2xl font-bold" href="https://vulae.github.io/infinite-minesweeper">Infinite Minesweeper</a> <br/>
                    An infinite twist on Minesweeper that adds biomes that change the rules of the game.</div> <div class="pt-4"><span class="float-right text-xs font-extrabold">*Source code available on
                        <a class="underline" href="https://github.com/Vulae/infinite-minesweeper">GitHub</a></span></div>`;return{c(){n=L("div"),n.innerHTML=e,this.h()},l(i){n=U(i,"DIV",{class:!0,"data-svelte-h":!0}),ve(n)!=="svelte-1yloiaf"&&(n.innerHTML=e),this.h()},h(){M(n,"class","px-4 w-full h-full flex flex-col justify-between")},m(i,r){V(i,n,r)},p:Se,i:Se,o:Se,d(i){i&&A(n)}}}function Fu(t){let n,e="Unknown control method.";return{c(){n=L("span"),n.textContent=e},l(i){n=U(i,"SPAN",{"data-svelte-h":!0}),ve(n)!=="svelte-1yl4tvk"&&(n.textContent=e)},m(i,r){V(i,n,r)},d(i){i&&A(n)}}}function Hu(t){let n,e=`<h1 class="font-bold text-2xl">Touch Controls</h1>
                        Double Tap: Reveal tile
                        <br/>
                        Single Tap: Flag tile
                        <br/>
                        Pan: Move view
                        <br/>
                        Pinch: Zoom view`;return{c(){n=L("span"),n.innerHTML=e},l(i){n=U(i,"SPAN",{"data-svelte-h":!0}),ve(n)!=="svelte-1ukp1tk"&&(n.innerHTML=e)},m(i,r){V(i,n,r)},d(i){i&&A(n)}}}function Zu(t){let n,e=`<h1 class="font-bold text-2xl">Keyboard Controls</h1>
                        Keyboard control method not yet supported.`;return{c(){n=L("span"),n.innerHTML=e},l(i){n=U(i,"SPAN",{"data-svelte-h":!0}),ve(n)!=="svelte-1rw6f38"&&(n.innerHTML=e)},m(i,r){V(i,n,r)},d(i){i&&A(n)}}}function Vu(t){let n,e=`<h1 class="font-bold text-2xl">Mouse Controls</h1>
                        Left Click: Reveal tile
                        <br/>
                        Right Click: Flag tile
                        <br/>
                        Left Click Drag: Move view
                        <br/>
                        Scroll Wheel: Zoom view`;return{c(){n=L("span"),n.innerHTML=e},l(i){n=U(i,"SPAN",{"data-svelte-h":!0}),ve(n)!=="svelte-k2yzda"&&(n.innerHTML=e)},m(i,r){V(i,n,r)},d(i){i&&A(n)}}}function Yu(t){let n,e,i,r,s,a,o,f,l,h=Wt(t[2]),p=[];for(let w=0;w<h.length;w+=1)p[w]=Xs(Ys(t,h,w));const m=[Bu,$u,zu],d=[];function v(w,E){return w[0]=="Information"?0:w[0]=="Biomes"?1:w[0]=="Controls"?2:-1}return~(o=v(t))&&(f=d[o]=m[o](t)),{c(){n=L("div"),e=L("div");for(let w=0;w<p.length;w+=1)p[w].c();i=J(),r=L("div"),s=J(),a=L("div"),f&&f.c(),this.h()},l(w){n=U(w,"DIV",{class:!0});var E=H(n);e=U(E,"DIV",{class:!0});var I=H(e);for(let R=0;R<p.length;R+=1)p[R].l(I);I.forEach(A),i=Q(E),r=U(E,"DIV",{class:!0}),H(r).forEach(A),s=Q(E),a=U(E,"DIV",{class:!0});var b=H(a);f&&f.l(b),b.forEach(A),E.forEach(A),this.h()},h(){M(e,"class","px-4 grid grid-flow-col gap-4 items-center font-bold"),M(r,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full"),M(a,"class","w-[32rem] h-64 py-2 font-semibold"),M(n,"class","grid px-4 py-2 rounded-2xl bg-white bg-opacity-50")},m(w,E){V(w,n,E),P(n,e);for(let I=0;I<p.length;I+=1)p[I]&&p[I].m(e,null);P(n,i),P(n,r),P(n,s),P(n,a),~o&&d[o].m(a,null),l=!0},p(w,[E]){if(E&5){h=Wt(w[2]);let b;for(b=0;b<h.length;b+=1){const R=Ys(w,h,b);p[b]?p[b].p(R,E):(p[b]=Xs(R),p[b].c(),p[b].m(e,null))}for(;b<p.length;b+=1)p[b].d(1);p.length=h.length}let I=o;o=v(w),o===I?~o&&d[o].p(w,E):(f&&(An(),Z(d[I],1,1,()=>{d[I]=null}),In()),~o?(f=d[o],f?f.p(w,E):(f=d[o]=m[o](w),f.c()),F(f,1),f.m(a,null)):f=null)},i(w){l||(F(f),l=!0)},o(w){Z(f),l=!1},d(w){w&&A(n),Ki(p,w),~o&&d[o].d()}}}function Xu(t,n,e){let i;Rt(t,xn,o=>e(1,i=o));const r=["Information","Biomes","Controls"];let s="Information";return[s,i,r,o=>e(0,s=o)]}class Wu extends he{constructor(n){super(),ue(this,n,Xu,Yu,fe,{})}}function ju(t){let n;const e=t[2].default,i=De(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Me(i,e,r,r[3],n?Oe(e,r[3],s,null):Re(r[3]),null)},i(r){n||(F(i,r),n=!0)},o(r){Z(i,r),n=!1},d(r){i&&i.d(r)}}}function Gu(t){let n,e;const i=[{name:"skull"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[ju]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=se(r,i[s]);return n=new St({props:r}),{c(){te(n.$$.fragment)},l(s){ne(n.$$.fragment,s)},m(s,a){ie(n,s,a),e=!0},p(s,[a]){const o=a&3?it(i,[i[0],a&2&&Tt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(F(n.$$.fragment,s),e=!0)},o(s){Z(n.$$.fragment,s),e=!1},d(s){re(n,s)}}}function qu(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["circle",{cx:"9",cy:"12",r:"1"}],["circle",{cx:"15",cy:"12",r:"1"}],["path",{d:"M8 20v2h8v-2"}],["path",{d:"m12.5 17-.5-1-.5 1h1z"}],["path",{d:"M16 20a2 2 0 0 0 1.56-3.25 8 8 0 1 0-11.12 0A2 2 0 0 0 8 20"}]];return t.$$set=a=>{e(1,n=se(se({},n),be(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=be(n),[s,n,i,r]}class Ku extends he{constructor(n){super(),ue(this,n,qu,Gu,fe,{})}}function Ju(t){let n,e,i,r,s,a,o;return e=new Ku({}),{c(){n=L("div"),te(e.$$.fragment),i=J(),r=L("span"),s=Qe(t[1]),this.h()},l(f){n=U(f,"DIV",{class:!0,title:!0});var l=H(n);ne(e.$$.fragment,l),i=Q(l),r=U(l,"SPAN",{class:!0});var h=H(r);s=et(h,t[1]),h.forEach(A),l.forEach(A),this.h()},h(){M(r,"class","text-sm"),M(n,"class","flex items-center"),M(n,"title",a=t[1]+" deaths"),He(n,"flex-direction",t[0]=="horizontal"?"row":"column")},m(f,l){V(f,n,l),ie(e,n,null),P(n,i),P(n,r),P(r,s),o=!0},p(f,[l]){(!o||l&2)&&qn(s,f[1]),(!o||l&2&&a!==(a=f[1]+" deaths"))&&M(n,"title",a),l&1&&He(n,"flex-direction",f[0]=="horizontal"?"row":"column")},i(f){o||(F(e.$$.fragment,f),o=!0)},o(f){Z(e.$$.fragment,f),o=!1},d(f){f&&A(n),re(e)}}}function Qu(t,n,e){let{layout:i}=n,{world:r}=n,s,a=0,o=null;return t.$$set=f=>{"layout"in f&&e(0,i=f.layout),"world"in f&&e(2,r=f.world)},t.$$.update=()=>{t.$$.dirty&28&&r&&(o==null||o.removeEventListener(s),e(1,a=r.deaths),e(3,s=r.addEventListener("die",()=>{e(1,a=r.deaths)})),e(4,o=r))},[i,a,r,s,o]}class ed extends he{constructor(n){super(),ue(this,n,Qu,Ju,fe,{layout:0,world:2})}}function td(t){let n;const e=t[2].default,i=De(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Me(i,e,r,r[3],n?Oe(e,r[3],s,null):Re(r[3]),null)},i(r){n||(F(i,r),n=!0)},o(r){Z(i,r),n=!1},d(r){i&&i.d(r)}}}function nd(t){let n,e;const i=[{name:"plus"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[td]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=se(r,i[s]);return n=new St({props:r}),{c(){te(n.$$.fragment)},l(s){ne(n.$$.fragment,s)},m(s,a){ie(n,s,a),e=!0},p(s,[a]){const o=a&3?it(i,[i[0],a&2&&Tt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(F(n.$$.fragment,s),e=!0)},o(s){Z(n.$$.fragment,s),e=!1},d(s){re(n,s)}}}function id(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"M5 12h14"}],["path",{d:"M12 5v14"}]];return t.$$set=a=>{e(1,n=se(se({},n),be(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=be(n),[s,n,i,r]}class rd extends he{constructor(n){super(),ue(this,n,id,nd,fe,{})}}function sd(t){let n;const e=t[2].default,i=De(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Me(i,e,r,r[3],n?Oe(e,r[3],s,null):Re(r[3]),null)},i(r){n||(F(i,r),n=!0)},o(r){Z(i,r),n=!1},d(r){i&&i.d(r)}}}function ad(t){let n,e;const i=[{name:"bookmark-minus"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[sd]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=se(r,i[s]);return n=new St({props:r}),{c(){te(n.$$.fragment)},l(s){ne(n.$$.fragment,s)},m(s,a){ie(n,s,a),e=!0},p(s,[a]){const o=a&3?it(i,[i[0],a&2&&Tt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(F(n.$$.fragment,s),e=!0)},o(s){Z(n.$$.fragment,s),e=!1},d(s){re(n,s)}}}function od(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"}],["line",{x1:"15",x2:"9",y1:"10",y2:"10"}]];return t.$$set=a=>{e(1,n=se(se({},n),be(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=be(n),[s,n,i,r]}class ld extends he{constructor(n){super(),ue(this,n,od,ad,fe,{})}}function Ws(t,n,e){const i=t.slice();return i[9]=n[e],i[11]=e,i}function js(t){let n;return{c(){n=L("div"),this.h()},l(e){n=U(e,"DIV",{class:!0}),H(n).forEach(A),this.h()},h(){M(n,"class","w-full h-0.5 bg-black bg-opacity-50 my-1 rounded-full svelte-1wmwp0k")},m(e,i){V(e,n,i)},d(e){e&&A(n)}}}function Gs(t){let n,e,i,r=t[9].createdAt.toLocaleDateString()+"",s,a,o=t[9].createdAt.toLocaleTimeString()+"",f,l,h,p=t[9].name+"",m,d,v,w,E,I,b,R,T;function O(){return t[5](t[9])}w=new ld({props:{size:"2rem"}});function Y(){return t[6](t[11])}let S=t[11]<t[0].length-1&&js();return{c(){n=L("li"),e=L("button"),i=L("span"),s=Qe(r),a=J(),f=Qe(o),l=J(),h=L("div"),m=Qe(p),d=J(),v=L("button"),te(w.$$.fragment),E=J(),S&&S.c(),I=Ve(),this.h()},l(N){n=U(N,"LI",{class:!0});var x=H(n);e=U(x,"BUTTON",{class:!0});var k=H(e);i=U(k,"SPAN",{class:!0});var z=H(i);s=et(z,r),a=Q(z),f=et(z,o),z.forEach(A),l=Q(k),h=U(k,"DIV",{class:!0});var B=H(h);m=et(B,p),B.forEach(A),k.forEach(A),d=Q(x),v=U(x,"BUTTON",{class:!0,title:!0});var ee=H(v);ne(w.$$.fragment,ee),ee.forEach(A),x.forEach(A),E=Q(N),S&&S.l(N),I=Ve(),this.h()},h(){M(i,"class","text-xs font-normal svelte-1wmwp0k"),M(h,"class","text-xl font-bold svelte-1wmwp0k"),M(e,"class","flex flex-col ml-4 hover:text-blue-800 transition-colors svelte-1wmwp0k"),M(v,"class","hover:text-red-900 transition-colors svelte-1wmwp0k"),M(v,"title","Remove Bookmark"),M(n,"class","flex justify-between items-center svelte-1wmwp0k")},m(N,x){V(N,n,x),P(n,e),P(e,i),P(i,s),P(i,a),P(i,f),P(e,l),P(e,h),P(h,m),P(n,d),P(n,v),ie(w,v,null),V(N,E,x),S&&S.m(N,x),V(N,I,x),b=!0,R||(T=[ce(e,"click",O),ce(v,"click",Y)],R=!0)},p(N,x){t=N,(!b||x&1)&&r!==(r=t[9].createdAt.toLocaleDateString()+"")&&qn(s,r),(!b||x&1)&&o!==(o=t[9].createdAt.toLocaleTimeString()+"")&&qn(f,o),(!b||x&1)&&p!==(p=t[9].name+"")&&qn(m,p),t[11]<t[0].length-1?S||(S=js(),S.c(),S.m(I.parentNode,I)):S&&(S.d(1),S=null)},i(N){b||(F(w.$$.fragment,N),b=!0)},o(N){Z(w.$$.fragment,N),b=!1},d(N){N&&(A(n),A(E),A(I)),re(w),S&&S.d(N),R=!1,Jt(T)}}}function qs(t){let n,e="You have no bookmarks.";return{c(){n=L("li"),n.textContent=e,this.h()},l(i){n=U(i,"LI",{class:!0,"data-svelte-h":!0}),ve(n)!=="svelte-1r3ii7r"&&(n.textContent=e),this.h()},h(){M(n,"class","text-xl font-bold svelte-1wmwp0k")},m(i,r){V(i,n,r)},d(i){i&&A(n)}}}function cd(t){let n,e,i="Bookmarks",r,s,a,o,f,l,h,p,m,d,v,w,E,I,b,R,T=Wt(t[0]),O=[];for(let N=0;N<T.length;N+=1)O[N]=Gs(Ws(t,T,N));const Y=N=>Z(O[N],1,1,()=>{O[N]=null});let S=t[0].length==0&&qs();return E=new rd({props:{size:"2rem"}}),{c(){n=L("div"),e=L("span"),e.textContent=i,r=J(),s=L("div"),a=J(),o=L("ul");for(let N=0;N<O.length;N+=1)O[N].c();f=J(),S&&S.c(),l=J(),h=L("div"),p=J(),m=L("form"),d=L("input"),v=J(),w=L("button"),te(E.$$.fragment),this.h()},l(N){n=U(N,"DIV",{class:!0});var x=H(n);e=U(x,"SPAN",{class:!0,"data-svelte-h":!0}),ve(e)!=="svelte-3bkqky"&&(e.textContent=i),r=Q(x),s=U(x,"DIV",{class:!0}),H(s).forEach(A),a=Q(x),o=U(x,"UL",{class:!0});var k=H(o);for(let ee=0;ee<O.length;ee+=1)O[ee].l(k);f=Q(k),S&&S.l(k),k.forEach(A),l=Q(x),h=U(x,"DIV",{class:!0}),H(h).forEach(A),p=Q(x),m=U(x,"FORM",{class:!0});var z=H(m);d=U(z,"INPUT",{placeholder:!0,type:!0,maxlength:!0,class:!0}),v=Q(z),w=U(z,"BUTTON",{type:!0,title:!0,class:!0});var B=H(w);ne(E.$$.fragment,B),B.forEach(A),z.forEach(A),x.forEach(A),this.h()},h(){M(e,"class","text-2xl font-bold text-center svelte-1wmwp0k"),M(s,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full svelte-1wmwp0k"),M(o,"class","p-2 max-h-96 overflow-y-auto svelte-1wmwp0k"),M(h,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full svelte-1wmwp0k"),M(d,"placeholder","New Bookmark"),M(d,"type","text"),M(d,"maxlength","16"),M(d,"class","w-48 px-2 rounded-md svelte-1wmwp0k"),M(w,"type","submit"),M(w,"title","Create Bookmark"),M(w,"class","flex hover:text-green-900 transition-colors svelte-1wmwp0k"),M(m,"class","flex justify-between gap-4 px-2 pb-2 svelte-1wmwp0k"),M(n,"class","grid px-4 py-2 rounded-2xl bg-white bg-opacity-50 svelte-1wmwp0k")},m(N,x){V(N,n,x),P(n,e),P(n,r),P(n,s),P(n,a),P(n,o);for(let k=0;k<O.length;k+=1)O[k]&&O[k].m(o,null);P(o,f),S&&S.m(o,null),P(n,l),P(n,h),P(n,p),P(n,m),P(m,d),t[7](d),P(m,v),P(m,w),ie(E,w,null),I=!0,b||(R=[ce(d,"keydown",Vo(t[4])),ce(m,"submit",t[8])],b=!0)},p(N,[x]){if(x&7){T=Wt(N[0]);let k;for(k=0;k<T.length;k+=1){const z=Ws(N,T,k);O[k]?(O[k].p(z,x),F(O[k],1)):(O[k]=Gs(z),O[k].c(),F(O[k],1),O[k].m(o,f))}for(An(),k=T.length;k<O.length;k+=1)Y(k);In()}N[0].length==0?S||(S=qs(),S.c(),S.m(o,null)):S&&(S.d(1),S=null)},i(N){if(!I){for(let x=0;x<T.length;x+=1)F(O[x]);F(E.$$.fragment,N),I=!0}},o(N){O=O.filter(Boolean);for(let x=0;x<O.length;x+=1)Z(O[x]);Z(E.$$.fragment,N),I=!1},d(N){N&&A(n),Ki(O,N),S&&S.d(),t[7](null),re(E),b=!1,Jt(R)}}}function fd(t,n,e){let{viewport:i}=n,{bookmarks:r}=n,s,{visible:a}=n;function o(m){Ks.call(this,t,m)}const f=m=>{i.load(m.viewport),i.change(),e(1,a=!1)},l=m=>{r==null||r.splice(m,1),e(0,r)};function h(m){Ce[m?"unshift":"push"](()=>{s=m,e(3,s)})}const p=()=>{s.value.length!=0&&(r==null||r.push({name:s.value,createdAt:new Date,viewport:i.save()}),e(0,r),e(3,s.value="",s))};return t.$$set=m=>{"viewport"in m&&e(2,i=m.viewport),"bookmarks"in m&&e(0,r=m.bookmarks),"visible"in m&&e(1,a=m.visible)},[r,a,i,s,o,f,l,h,p]}class hd extends he{constructor(n){super(),ue(this,n,fd,cd,fe,{viewport:2,bookmarks:0,visible:1})}}function ud(t){let n;const e=t[2].default,i=De(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Me(i,e,r,r[3],n?Oe(e,r[3],s,null):Re(r[3]),null)},i(r){n||(F(i,r),n=!0)},o(r){Z(i,r),n=!1},d(r){i&&i.d(r)}}}function dd(t){let n,e;const i=[{name:"bookmark"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[ud]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=se(r,i[s]);return n=new St({props:r}),{c(){te(n.$$.fragment)},l(s){ne(n.$$.fragment,s)},m(s,a){ie(n,s,a),e=!0},p(s,[a]){const o=a&3?it(i,[i[0],a&2&&Tt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(F(n.$$.fragment,s),e=!0)},o(s){Z(n.$$.fragment,s),e=!1},d(s){re(n,s)}}}function _d(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"}]];return t.$$set=a=>{e(1,n=se(se({},n),be(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=be(n),[s,n,i,r]}class md extends he{constructor(n){super(),ue(this,n,_d,dd,fe,{})}}function pd(t){let n;return{c(){n=Qe("ARE YOU SURE?")},l(e){n=et(e,"ARE YOU SURE?")},m(e,i){V(e,n,i)},d(e){e&&A(n)}}}function gd(t){let n;return{c(){n=Qe("CLEAR SAVE")},l(e){n=et(e,"CLEAR SAVE")},m(e,i){V(e,n,i)},d(e){e&&A(n)}}}function vd(t){let n,e,i="Settings",r,s,a,o,f,l,h,p,m="Mouse",d,v="Touch",w,E,I,b,R,T,O,Y,S,N,x,k,z;function B(q,de){return q[2]?pd:gd}let ee=B(t),ae=ee(t);return{c(){n=L("div"),e=L("span"),e.textContent=i,r=J(),s=L("div"),a=J(),o=L("div"),f=L("div"),l=Qe(`Input Method
            `),h=L("select"),p=L("option"),p.textContent=m,d=L("option"),d.textContent=v,w=J(),E=L("div"),I=Qe(`Volume
            `),b=L("input"),T=J(),O=L("div"),Y=Qe(`Display information on load
            `),S=L("input"),N=J(),x=L("button"),ae.c(),this.h()},l(q){n=U(q,"DIV",{class:!0});var de=H(n);e=U(de,"SPAN",{class:!0,"data-svelte-h":!0}),ve(e)!=="svelte-1v23jpc"&&(e.textContent=i),r=Q(de),s=U(de,"DIV",{class:!0}),H(s).forEach(A),a=Q(de),o=U(de,"DIV",{class:!0});var Te=H(o);f=U(Te,"DIV",{class:!0});var at=H(f);l=et(at,`Input Method
            `),h=U(at,"SELECT",{});var ot=H(h);p=U(ot,"OPTION",{"data-svelte-h":!0}),ve(p)!=="svelte-1o1urqg"&&(p.textContent=m),d=U(ot,"OPTION",{"data-svelte-h":!0}),ve(d)!=="svelte-4sw168"&&(d.textContent=v),ot.forEach(A),at.forEach(A),w=Q(Te),E=U(Te,"DIV",{class:!0});var xt=H(E);I=et(xt,`Volume
            `),b=U(xt,"INPUT",{type:!0,min:!0,max:!0,step:!0,title:!0}),xt.forEach(A),T=Q(Te),O=U(Te,"DIV",{class:!0});var At=H(O);Y=et(At,`Display information on load
            `),S=U(At,"INPUT",{type:!0}),At.forEach(A),N=Q(Te),x=U(Te,"BUTTON",{class:!0});var We=H(x);ae.l(We),We.forEach(A),Te.forEach(A),de.forEach(A),this.h()},h(){M(e,"class","text-2xl font-bold text-center"),M(s,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full"),p.__value="mouse",zr(p,p.__value),d.__value="touch",zr(d,d.__value),t[3]===void 0&&Yo(()=>t[6].call(h)),M(f,"class","flex justify-between items-center gap-3"),M(b,"type","range"),M(b,"min","0"),M(b,"max","1"),M(b,"step","0.05"),b.value=t[4],M(b,"title",R=Math.round(t[4]*100)+"% Volume"),M(E,"class","flex justify-between items-center gap-3"),M(S,"type","checkbox"),M(O,"class","flex justify-between items-center gap-3"),M(x,"class","bg-black font-bold text-red-500 rounded-lg py-1"),M(o,"class","p-2 max-h-96 overflow-y-auto flex flex-col gap-4 font-semibold"),M(n,"class","grid px-4 py-2 rounded-2xl bg-white bg-opacity-50")},m(q,de){V(q,n,de),P(n,e),P(n,r),P(n,s),P(n,a),P(n,o),P(o,f),P(f,l),P(f,h),P(h,p),P(h,d),$r(h,t[3],!0),P(o,w),P(o,E),P(E,I),P(E,b),P(o,T),P(o,O),P(O,Y),P(O,S),S.checked=t[5],P(o,N),P(o,x),ae.m(x,null),k||(z=[ce(h,"change",t[6]),ce(b,"change",t[7]),ce(S,"change",t[8]),ce(x,"click",t[9])],k=!0)},p(q,[de]){de&8&&$r(h,q[3]),de&16&&(b.value=q[4]),de&16&&R!==(R=Math.round(q[4]*100)+"% Volume")&&M(b,"title",R),de&32&&(S.checked=q[5]),ee!==(ee=B(q))&&(ae.d(1),ae=ee(q),ae&&(ae.c(),ae.m(x,null)))},i:Se,o:Se,d(q){q&&A(n),ae.d(),k=!1,Jt(z)}}}const bd=5e3;function wd(t,n,e){let i,r,s;Rt(t,xn,d=>e(3,i=d)),Rt(t,qi,d=>e(4,r=d)),Rt(t,Gi,d=>e(5,s=d));let{saveSlot:a}=n,o=-1,f=!1;ri(()=>{clearTimeout(o)});function l(){i=Xo(this),xn.set(i)}const h=d=>{Wo(qi,r=d.currentTarget.valueAsNumber,r)};function p(){s=this.checked,Gi.set(s)}const m=()=>{f?(e(2,f=!1),Ih(a),location.reload()):(e(2,f=!0),e(1,o=setTimeout(()=>{e(2,f=!1)},bd)))};return t.$$set=d=>{"saveSlot"in d&&e(0,a=d.saveSlot)},[a,o,f,i,r,s,l,h,p,m]}class yd extends he{constructor(n){super(),ue(this,n,wd,vd,fe,{saveSlot:0})}}function kd(t){let n;const e=t[2].default,i=De(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Me(i,e,r,r[3],n?Oe(e,r[3],s,null):Re(r[3]),null)},i(r){n||(F(i,r),n=!0)},o(r){Z(i,r),n=!1},d(r){i&&i.d(r)}}}function Ed(t){let n,e;const i=[{name:"settings"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[kd]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=se(r,i[s]);return n=new St({props:r}),{c(){te(n.$$.fragment)},l(s){ne(n.$$.fragment,s)},m(s,a){ie(n,s,a),e=!0},p(s,[a]){const o=a&3?it(i,[i[0],a&2&&Tt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(F(n.$$.fragment,s),e=!0)},o(s){Z(n.$$.fragment,s),e=!1},d(s){re(n,s)}}}function Td(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"}],["circle",{cx:"12",cy:"12",r:"3"}]];return t.$$set=a=>{e(1,n=se(se({},n),be(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=be(n),[s,n,i,r]}class Sd extends he{constructor(n){super(),ue(this,n,Td,Ed,fe,{})}}function xd(t){let n,e;return n=new Wu({}),{c(){te(n.$$.fragment)},l(i){ne(n.$$.fragment,i)},m(i,r){ie(n,i,r),e=!0},i(i){e||(F(n.$$.fragment,i),e=!0)},o(i){Z(n.$$.fragment,i),e=!1},d(i){re(n,i)}}}function Ad(t){let n,e,i;function r(a){t[17](a)}let s={};return t[0]!==void 0&&(s.saveSlot=t[0]),n=new yd({props:s}),Ce.push(()=>_t(n,"saveSlot",r)),{c(){te(n.$$.fragment)},l(a){ne(n.$$.fragment,a)},m(a,o){ie(n,a,o),i=!0},p(a,o){const f={};!e&&o&1&&(e=!0,f.saveSlot=a[0],dt(()=>e=!1)),n.$set(f)},i(a){i||(F(n.$$.fragment,a),i=!0)},o(a){Z(n.$$.fragment,a),i=!1},d(a){re(n,a)}}}function Id(t){let n,e,i,r;function s(f){t[19](f)}function a(f){t[20](f)}let o={viewport:t[7]};return t[5]!==void 0&&(o.visible=t[5]),t[8]!==void 0&&(o.bookmarks=t[8]),n=new hd({props:o}),Ce.push(()=>_t(n,"visible",s)),Ce.push(()=>_t(n,"bookmarks",a)),{c(){te(n.$$.fragment)},l(f){ne(n.$$.fragment,f)},m(f,l){ie(n,f,l),r=!0},p(f,l){const h={};l&128&&(h.viewport=f[7]),!e&&l&32&&(e=!0,h.visible=f[5],dt(()=>e=!1)),!i&&l&256&&(i=!0,h.bookmarks=f[8],dt(()=>i=!1)),n.$set(h)},i(f){r||(F(n.$$.fragment,f),r=!0)},o(f){Z(n.$$.fragment,f),r=!1},d(f){re(n,f)}}}function Cd(t){let n,e,i,r,s,a,o,f,l,h,p,m,d,v,w,E,I,b,R,T,O,Y,S,N,x,k,z,B,ee,ae,q,de,Te,at,ot;function xt(D){t[9](D)}function At(D){t[10](D)}function We(D){t[11](D)}let Bt={saveSlot:t[0]};t[6]!==void 0&&(Bt.world=t[6]),t[7]!==void 0&&(Bt.viewport=t[7]),t[8]!==void 0&&(Bt.bookmarks=t[8]),i=new hu({props:Bt}),Ce.push(()=>_t(i,"world",xt)),Ce.push(()=>_t(i,"viewport",At)),Ce.push(()=>_t(i,"bookmarks",We)),m=new vu({}),w=new Sd({}),b=new md({}),Y=new ed({props:{layout:t[1],world:t[6]}});function rn(D){t[16](D)}let On={$$slots:{default:[xd]},$$scope:{ctx:t}};t[3]!==void 0&&(On.visible=t[3]),x=new Ui({props:On}),Ce.push(()=>_t(x,"visible",rn));function hi(D){t[18](D)}let me={$$slots:{default:[Ad]},$$scope:{ctx:t}};t[4]!==void 0&&(me.visible=t[4]),B=new Ui({props:me}),Ce.push(()=>_t(B,"visible",hi));function lt(D){t[21](D)}let le={$$slots:{default:[Id]},$$scope:{ctx:t}};return t[5]!==void 0&&(le.visible=t[5]),q=new Ui({props:le}),Ce.push(()=>_t(q,"visible",lt)),{c(){n=L("div"),e=L("div"),te(i.$$.fragment),o=J(),f=L("div"),l=L("div"),h=L("div"),p=L("button"),te(m.$$.fragment),d=J(),v=L("button"),te(w.$$.fragment),E=J(),I=L("button"),te(b.$$.fragment),R=J(),T=L("div"),O=J(),te(Y.$$.fragment),N=J(),te(x.$$.fragment),z=J(),te(B.$$.fragment),ae=J(),te(q.$$.fragment),this.h()},l(D){n=U(D,"DIV",{class:!0});var X=H(n);e=U(X,"DIV",{class:!0});var Ie=H(e);ne(i.$$.fragment,Ie),Ie.forEach(A),o=Q(X),f=U(X,"DIV",{class:!0});var ze=H(f);l=U(ze,"DIV",{class:!0});var $e=H(l);h=U($e,"DIV",{class:!0});var _e=H(h);p=U(_e,"BUTTON",{class:!0,title:!0});var we=H(p);ne(m.$$.fragment,we),we.forEach(A),d=Q(_e),v=U(_e,"BUTTON",{class:!0,title:!0});var je=H(v);ne(w.$$.fragment,je),je.forEach(A),E=Q(_e),I=U(_e,"BUTTON",{class:!0,title:!0});var sn=H(I);ne(b.$$.fragment,sn),sn.forEach(A),R=Q(_e),T=U(_e,"DIV",{class:!0}),H(T).forEach(A),O=Q(_e),ne(Y.$$.fragment,_e),_e.forEach(A),$e.forEach(A),ze.forEach(A),X.forEach(A),N=Q(D),ne(x.$$.fragment,D),z=Q(D),ne(B.$$.fragment,D),ae=Q(D),ne(q.$$.fragment,D),this.h()},h(){M(e,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1"),M(p,"class","rounded-full drop-shadow-sm"),M(p,"title","Information"),M(v,"class","rounded-full drop-shadow-sm"),M(v,"title","Settings"),M(I,"class","rounded-full drop-shadow-sm"),M(I,"title","Bookmarks"),M(T,"class","w-full h-full bg-white rounded-full p-[1px]"),M(h,"class","pointer-events-auto flex items-center gap-2 rounded-full bg-white bg-opacity-30 backdrop-blur-md shadow-lg text-white font-bold stroke-[3]"),He(h,"flex-direction",t[1]=="vertical"?"column":"row"),He(h,"padding",t[1]=="vertical"?"1rem 0.5rem":"0.5rem 1rem"),M(l,"class","w-full h-full flex items-center p-4"),He(l,"flex-direction",t[1]=="vertical"?"row":"column"),He(l,"justify-content",t[2]=="start"?"start":"end"),M(f,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1 pointer-events-none"),He(f,"opacity",t[3]||t[4]||t[5]?0:1),M(n,"class","w-screen h-screen grid grid-cols-1 grid-rows-1")},m(D,X){V(D,n,X),P(n,e),ie(i,e,null),P(n,o),P(n,f),P(f,l),P(l,h),P(h,p),ie(m,p,null),P(h,d),P(h,v),ie(w,v,null),P(h,E),P(h,I),ie(b,I,null),P(h,R),P(h,T),P(h,O),ie(Y,h,null),V(D,N,X),ie(x,D,X),V(D,z,X),ie(B,D,X),V(D,ae,X),ie(q,D,X),Te=!0,at||(ot=[ce(p,"click",t[12]),ce(v,"click",t[13]),ce(I,"click",t[14]),Qs(S=fo.call(null,f,t[15]))],at=!0)},p(D,[X]){const Ie={};X&1&&(Ie.saveSlot=D[0]),!r&&X&64&&(r=!0,Ie.world=D[6],dt(()=>r=!1)),!s&&X&128&&(s=!0,Ie.viewport=D[7],dt(()=>s=!1)),!a&&X&256&&(a=!0,Ie.bookmarks=D[8],dt(()=>a=!1)),i.$set(Ie);const ze={};X&2&&(ze.layout=D[1]),X&64&&(ze.world=D[6]),Y.$set(ze),X&2&&He(h,"flex-direction",D[1]=="vertical"?"column":"row"),X&2&&He(h,"padding",D[1]=="vertical"?"1rem 0.5rem":"0.5rem 1rem"),X&2&&He(l,"flex-direction",D[1]=="vertical"?"row":"column"),X&4&&He(l,"justify-content",D[2]=="start"?"start":"end"),S&&ea(S.update)&&X&6&&S.update.call(null,D[15]),X&56&&He(f,"opacity",D[3]||D[4]||D[5]?0:1);const $e={};X&8388608&&($e.$$scope={dirty:X,ctx:D}),!k&&X&8&&(k=!0,$e.visible=D[3],dt(()=>k=!1)),x.$set($e);const _e={};X&8388609&&(_e.$$scope={dirty:X,ctx:D}),!ee&&X&16&&(ee=!0,_e.visible=D[4],dt(()=>ee=!1)),B.$set(_e);const we={};X&8389024&&(we.$$scope={dirty:X,ctx:D}),!de&&X&32&&(de=!0,we.visible=D[5],dt(()=>de=!1)),q.$set(we)},i(D){Te||(F(i.$$.fragment,D),F(m.$$.fragment,D),F(w.$$.fragment,D),F(b.$$.fragment,D),F(Y.$$.fragment,D),F(x.$$.fragment,D),F(B.$$.fragment,D),F(q.$$.fragment,D),Te=!0)},o(D){Z(i.$$.fragment,D),Z(m.$$.fragment,D),Z(w.$$.fragment,D),Z(b.$$.fragment,D),Z(Y.$$.fragment,D),Z(x.$$.fragment,D),Z(B.$$.fragment,D),Z(q.$$.fragment,D),Te=!1},d(D){D&&(A(n),A(N),A(z),A(ae)),re(i),re(m),re(w),re(b),re(Y),re(x,D),re(B,D),re(q,D),at=!1,Jt(ot)}}}function Nd(t,n,e){let i;Rt(t,Gi,k=>e(22,i=k));let r="save",s="vertical",a="end",o=!1,f=!1,l=!1,h,p,m=[];ii(()=>{i&&e(3,o=!0)});function d(k){h=k,e(6,h)}function v(k){p=k,e(7,p)}function w(k){m=k,e(8,m)}const E=()=>e(3,o=!0),I=()=>e(4,f=!0),b=()=>e(5,l=!0),R=(k,z)=>{e(1,s=k>z?"vertical":"horizontal"),e(2,a=k>z?"end":"start")};function T(k){o=k,e(3,o)}function O(k){r=k,e(0,r)}function Y(k){f=k,e(4,f)}function S(k){l=k,e(5,l)}function N(k){m=k,e(8,m)}function x(k){l=k,e(5,l)}return[r,s,a,o,f,l,h,p,m,d,v,w,E,I,b,R,T,O,Y,S,N,x]}class Od extends he{constructor(n){super(),ue(this,n,Nd,Cd,fe,{})}}export{Od as component};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
