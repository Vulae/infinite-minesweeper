var qa=Object.defineProperty;var Ja=(e,i,t)=>i in e?qa(e,i,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[i]=t;var p=(e,i,t)=>(Ja(e,typeof i!="symbol"?i+"":i,t),t);import{s as se,e as R,a as ae,c as M,b as O,f as A,g as re,p as I,i as F,h as U,S as q,T as Pn,H as Vn,n as ze,E as vi,U as Qa,o as ki,V as Xn,r as Tt,l as Ee,k as oi,W as Ri,z as Fe,X as Y,w as Yn,x as Wn,Y as Rt,B as He,C as Pe,D as Ve,Z as Gn,_ as Mi,$ as me,y as Xe,t as jn,d as Kn,a0 as Zi,q as he,a1 as er,j as tr}from"../chunks/scheduler.cZO4XJDa.js";import{S as oe,i as fe,a as Z,g as at,t as $,c as rt,b as Q,d as ee,m as te,e as ie,f as ir}from"../chunks/index.DNYDBKQr.js";import{w as qn}from"../chunks/index.3RnFC1FZ.js";function Mt(e){return(e==null?void 0:e.length)!==void 0?e:Array.from(e)}function Ye(e,i){const t={},n={},a={$$scope:1};let r=e.length;for(;r--;){const s=e[r],l=i[r];if(l){for(const c in s)c in l||(n[c]=1);for(const c in l)a[c]||(t[c]=l[c],a[c]=1);e[r]=l}else for(const c in s)a[c]=1}for(const s in n)s in t||(t[s]=void 0);return t}function Ut(e){return typeof e=="object"&&e!==null?e:{}}/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */const nr=4,Li=0,Ni=1,ar=2;function We(e){let i=e.length;for(;--i>=0;)e[i]=0}const rr=0,Jn=1,lr=2,sr=3,or=258,xi=29,mt=256,lt=mt+1+xi,Ue=30,yi=19,Qn=2*lt+1,Ae=15,Yt=16,fr=7,Ei=256,ea=16,ta=17,ia=18,fi=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),Dt=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),cr=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),na=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),hr=512,ge=new Array((lt+2)*2);We(ge);const tt=new Array(Ue*2);We(tt);const st=new Array(hr);We(st);const ot=new Array(or-sr+1);We(ot);const Ai=new Array(xi);We(Ai);const Zt=new Array(Ue);We(Zt);function Wt(e,i,t,n,a){this.static_tree=e,this.extra_bits=i,this.extra_base=t,this.elems=n,this.max_length=a,this.has_stree=e&&e.length}let aa,ra,la;function Gt(e,i){this.dyn_tree=e,this.max_code=0,this.stat_desc=i}const sa=e=>e<256?st[e]:st[256+(e>>>7)],ft=(e,i)=>{e.pending_buf[e.pending++]=i&255,e.pending_buf[e.pending++]=i>>>8&255},j=(e,i,t)=>{e.bi_valid>Yt-t?(e.bi_buf|=i<<e.bi_valid&65535,ft(e,e.bi_buf),e.bi_buf=i>>Yt-e.bi_valid,e.bi_valid+=t-Yt):(e.bi_buf|=i<<e.bi_valid&65535,e.bi_valid+=t)},de=(e,i,t)=>{j(e,t[i*2],t[i*2+1])},oa=(e,i)=>{let t=0;do t|=e&1,e>>>=1,t<<=1;while(--i>0);return t>>>1},dr=e=>{e.bi_valid===16?(ft(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=e.bi_buf&255,e.bi_buf>>=8,e.bi_valid-=8)},ur=(e,i)=>{const t=i.dyn_tree,n=i.max_code,a=i.stat_desc.static_tree,r=i.stat_desc.has_stree,s=i.stat_desc.extra_bits,l=i.stat_desc.extra_base,c=i.stat_desc.max_length;let o,f,u,d,h,_,b=0;for(d=0;d<=Ae;d++)e.bl_count[d]=0;for(t[e.heap[e.heap_max]*2+1]=0,o=e.heap_max+1;o<Qn;o++)f=e.heap[o],d=t[t[f*2+1]*2+1]+1,d>c&&(d=c,b++),t[f*2+1]=d,!(f>n)&&(e.bl_count[d]++,h=0,f>=l&&(h=s[f-l]),_=t[f*2],e.opt_len+=_*(d+h),r&&(e.static_len+=_*(a[f*2+1]+h)));if(b!==0){do{for(d=c-1;e.bl_count[d]===0;)d--;e.bl_count[d]--,e.bl_count[d+1]+=2,e.bl_count[c]--,b-=2}while(b>0);for(d=c;d!==0;d--)for(f=e.bl_count[d];f!==0;)u=e.heap[--o],!(u>n)&&(t[u*2+1]!==d&&(e.opt_len+=(d-t[u*2+1])*t[u*2],t[u*2+1]=d),f--)}},fa=(e,i,t)=>{const n=new Array(Ae+1);let a=0,r,s;for(r=1;r<=Ae;r++)a=a+t[r-1]<<1,n[r]=a;for(s=0;s<=i;s++){let l=e[s*2+1];l!==0&&(e[s*2]=oa(n[l]++,l))}},_r=()=>{let e,i,t,n,a;const r=new Array(Ae+1);for(t=0,n=0;n<xi-1;n++)for(Ai[n]=t,e=0;e<1<<fi[n];e++)ot[t++]=n;for(ot[t-1]=n,a=0,n=0;n<16;n++)for(Zt[n]=a,e=0;e<1<<Dt[n];e++)st[a++]=n;for(a>>=7;n<Ue;n++)for(Zt[n]=a<<7,e=0;e<1<<Dt[n]-7;e++)st[256+a++]=n;for(i=0;i<=Ae;i++)r[i]=0;for(e=0;e<=143;)ge[e*2+1]=8,e++,r[8]++;for(;e<=255;)ge[e*2+1]=9,e++,r[9]++;for(;e<=279;)ge[e*2+1]=7,e++,r[7]++;for(;e<=287;)ge[e*2+1]=8,e++,r[8]++;for(fa(ge,lt+1,r),e=0;e<Ue;e++)tt[e*2+1]=5,tt[e*2]=oa(e,5);aa=new Wt(ge,fi,mt+1,lt,Ae),ra=new Wt(tt,Dt,0,Ue,Ae),la=new Wt(new Array(0),cr,0,yi,fr)},ca=e=>{let i;for(i=0;i<lt;i++)e.dyn_ltree[i*2]=0;for(i=0;i<Ue;i++)e.dyn_dtree[i*2]=0;for(i=0;i<yi;i++)e.bl_tree[i*2]=0;e.dyn_ltree[Ei*2]=1,e.opt_len=e.static_len=0,e.sym_next=e.matches=0},ha=e=>{e.bi_valid>8?ft(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0},Ui=(e,i,t,n)=>{const a=i*2,r=t*2;return e[a]<e[r]||e[a]===e[r]&&n[i]<=n[t]},jt=(e,i,t)=>{const n=e.heap[t];let a=t<<1;for(;a<=e.heap_len&&(a<e.heap_len&&Ui(i,e.heap[a+1],e.heap[a],e.depth)&&a++,!Ui(i,n,e.heap[a],e.depth));)e.heap[t]=e.heap[a],t=a,a<<=1;e.heap[t]=n},Oi=(e,i,t)=>{let n,a,r=0,s,l;if(e.sym_next!==0)do n=e.pending_buf[e.sym_buf+r++]&255,n+=(e.pending_buf[e.sym_buf+r++]&255)<<8,a=e.pending_buf[e.sym_buf+r++],n===0?de(e,a,i):(s=ot[a],de(e,s+mt+1,i),l=fi[s],l!==0&&(a-=Ai[s],j(e,a,l)),n--,s=sa(n),de(e,s,t),l=Dt[s],l!==0&&(n-=Zt[s],j(e,n,l)));while(r<e.sym_next);de(e,Ei,i)},ci=(e,i)=>{const t=i.dyn_tree,n=i.stat_desc.static_tree,a=i.stat_desc.has_stree,r=i.stat_desc.elems;let s,l,c=-1,o;for(e.heap_len=0,e.heap_max=Qn,s=0;s<r;s++)t[s*2]!==0?(e.heap[++e.heap_len]=c=s,e.depth[s]=0):t[s*2+1]=0;for(;e.heap_len<2;)o=e.heap[++e.heap_len]=c<2?++c:0,t[o*2]=1,e.depth[o]=0,e.opt_len--,a&&(e.static_len-=n[o*2+1]);for(i.max_code=c,s=e.heap_len>>1;s>=1;s--)jt(e,t,s);o=r;do s=e.heap[1],e.heap[1]=e.heap[e.heap_len--],jt(e,t,1),l=e.heap[1],e.heap[--e.heap_max]=s,e.heap[--e.heap_max]=l,t[o*2]=t[s*2]+t[l*2],e.depth[o]=(e.depth[s]>=e.depth[l]?e.depth[s]:e.depth[l])+1,t[s*2+1]=t[l*2+1]=o,e.heap[1]=o++,jt(e,t,1);while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],ur(e,i),fa(t,c,e.bl_count)},$i=(e,i,t)=>{let n,a=-1,r,s=i[0*2+1],l=0,c=7,o=4;for(s===0&&(c=138,o=3),i[(t+1)*2+1]=65535,n=0;n<=t;n++)r=s,s=i[(n+1)*2+1],!(++l<c&&r===s)&&(l<o?e.bl_tree[r*2]+=l:r!==0?(r!==a&&e.bl_tree[r*2]++,e.bl_tree[ea*2]++):l<=10?e.bl_tree[ta*2]++:e.bl_tree[ia*2]++,l=0,a=r,s===0?(c=138,o=3):r===s?(c=6,o=3):(c=7,o=4))},Bi=(e,i,t)=>{let n,a=-1,r,s=i[0*2+1],l=0,c=7,o=4;for(s===0&&(c=138,o=3),n=0;n<=t;n++)if(r=s,s=i[(n+1)*2+1],!(++l<c&&r===s)){if(l<o)do de(e,r,e.bl_tree);while(--l!==0);else r!==0?(r!==a&&(de(e,r,e.bl_tree),l--),de(e,ea,e.bl_tree),j(e,l-3,2)):l<=10?(de(e,ta,e.bl_tree),j(e,l-3,3)):(de(e,ia,e.bl_tree),j(e,l-11,7));l=0,a=r,s===0?(c=138,o=3):r===s?(c=6,o=3):(c=7,o=4)}},mr=e=>{let i;for($i(e,e.dyn_ltree,e.l_desc.max_code),$i(e,e.dyn_dtree,e.d_desc.max_code),ci(e,e.bl_desc),i=yi-1;i>=3&&e.bl_tree[na[i]*2+1]===0;i--);return e.opt_len+=3*(i+1)+5+5+4,i},br=(e,i,t,n)=>{let a;for(j(e,i-257,5),j(e,t-1,5),j(e,n-4,4),a=0;a<n;a++)j(e,e.bl_tree[na[a]*2+1],3);Bi(e,e.dyn_ltree,i-1),Bi(e,e.dyn_dtree,t-1)},gr=e=>{let i=4093624447,t;for(t=0;t<=31;t++,i>>>=1)if(i&1&&e.dyn_ltree[t*2]!==0)return Li;if(e.dyn_ltree[9*2]!==0||e.dyn_ltree[10*2]!==0||e.dyn_ltree[13*2]!==0)return Ni;for(t=32;t<mt;t++)if(e.dyn_ltree[t*2]!==0)return Ni;return Li};let Fi=!1;const pr=e=>{Fi||(_r(),Fi=!0),e.l_desc=new Gt(e.dyn_ltree,aa),e.d_desc=new Gt(e.dyn_dtree,ra),e.bl_desc=new Gt(e.bl_tree,la),e.bi_buf=0,e.bi_valid=0,ca(e)},da=(e,i,t,n)=>{j(e,(rr<<1)+(n?1:0),3),ha(e),ft(e,t),ft(e,~t),t&&e.pending_buf.set(e.window.subarray(i,i+t),e.pending),e.pending+=t},wr=e=>{j(e,Jn<<1,3),de(e,Ei,ge),dr(e)},vr=(e,i,t,n)=>{let a,r,s=0;e.level>0?(e.strm.data_type===ar&&(e.strm.data_type=gr(e)),ci(e,e.l_desc),ci(e,e.d_desc),s=mr(e),a=e.opt_len+3+7>>>3,r=e.static_len+3+7>>>3,r<=a&&(a=r)):a=r=t+5,t+4<=a&&i!==-1?da(e,i,t,n):e.strategy===nr||r===a?(j(e,(Jn<<1)+(n?1:0),3),Oi(e,ge,tt)):(j(e,(lr<<1)+(n?1:0),3),br(e,e.l_desc.max_code+1,e.d_desc.max_code+1,s+1),Oi(e,e.dyn_ltree,e.dyn_dtree)),ca(e),n&&ha(e)},kr=(e,i,t)=>(e.pending_buf[e.sym_buf+e.sym_next++]=i,e.pending_buf[e.sym_buf+e.sym_next++]=i>>8,e.pending_buf[e.sym_buf+e.sym_next++]=t,i===0?e.dyn_ltree[t*2]++:(e.matches++,i--,e.dyn_ltree[(ot[t]+mt+1)*2]++,e.dyn_dtree[sa(i)*2]++),e.sym_next===e.sym_end);var xr=pr,yr=da,Er=vr,Ar=kr,Sr=wr,Tr={_tr_init:xr,_tr_stored_block:yr,_tr_flush_block:Er,_tr_tally:Ar,_tr_align:Sr};const Dr=(e,i,t,n)=>{let a=e&65535|0,r=e>>>16&65535|0,s=0;for(;t!==0;){s=t>2e3?2e3:t,t-=s;do a=a+i[n++]|0,r=r+a|0;while(--s);a%=65521,r%=65521}return a|r<<16|0};var ct=Dr;const zr=()=>{let e,i=[];for(var t=0;t<256;t++){e=t;for(var n=0;n<8;n++)e=e&1?3988292384^e>>>1:e>>>1;i[t]=e}return i},Ir=new Uint32Array(zr()),Cr=(e,i,t,n)=>{const a=Ir,r=n+t;e^=-1;for(let s=n;s<r;s++)e=e>>>8^a[(e^i[s])&255];return e^-1};var P=Cr,Ie={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},Me={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:Rr,_tr_stored_block:hi,_tr_flush_block:Mr,_tr_tally:ke,_tr_align:Zr}=Tr,{Z_NO_FLUSH:xe,Z_PARTIAL_FLUSH:Lr,Z_FULL_FLUSH:Nr,Z_FINISH:ne,Z_BLOCK:Hi,Z_OK:V,Z_STREAM_END:Pi,Z_STREAM_ERROR:ue,Z_DATA_ERROR:Ur,Z_BUF_ERROR:Kt,Z_DEFAULT_COMPRESSION:Or,Z_FILTERED:$r,Z_HUFFMAN_ONLY:kt,Z_RLE:Br,Z_FIXED:Fr,Z_DEFAULT_STRATEGY:Hr,Z_UNKNOWN:Pr,Z_DEFLATED:Ot}=Me,Vr=9,Xr=15,Yr=8,Wr=29,Gr=256,di=Gr+1+Wr,jr=30,Kr=19,qr=2*di+1,Jr=15,C=3,ve=258,_e=ve+C+1,Qr=32,$e=42,Si=57,ui=69,_i=73,mi=91,bi=103,Se=113,Je=666,G=1,Ge=2,Ce=3,je=4,el=3,Te=(e,i)=>(e.msg=Ie[i],i),Vi=e=>e*2-(e>4?9:0),we=e=>{let i=e.length;for(;--i>=0;)e[i]=0},tl=e=>{let i,t,n,a=e.w_size;i=e.hash_size,n=i;do t=e.head[--n],e.head[n]=t>=a?t-a:0;while(--i);i=a,n=i;do t=e.prev[--n],e.prev[n]=t>=a?t-a:0;while(--i)};let il=(e,i,t)=>(i<<e.hash_shift^t)&e.hash_mask,ye=il;const K=e=>{const i=e.state;let t=i.pending;t>e.avail_out&&(t=e.avail_out),t!==0&&(e.output.set(i.pending_buf.subarray(i.pending_out,i.pending_out+t),e.next_out),e.next_out+=t,i.pending_out+=t,e.total_out+=t,e.avail_out-=t,i.pending-=t,i.pending===0&&(i.pending_out=0))},J=(e,i)=>{Mr(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,i),e.block_start=e.strstart,K(e.strm)},N=(e,i)=>{e.pending_buf[e.pending++]=i},qe=(e,i)=>{e.pending_buf[e.pending++]=i>>>8&255,e.pending_buf[e.pending++]=i&255},gi=(e,i,t,n)=>{let a=e.avail_in;return a>n&&(a=n),a===0?0:(e.avail_in-=a,i.set(e.input.subarray(e.next_in,e.next_in+a),t),e.state.wrap===1?e.adler=ct(e.adler,i,a,t):e.state.wrap===2&&(e.adler=P(e.adler,i,a,t)),e.next_in+=a,e.total_in+=a,a)},ua=(e,i)=>{let t=e.max_chain_length,n=e.strstart,a,r,s=e.prev_length,l=e.nice_match;const c=e.strstart>e.w_size-_e?e.strstart-(e.w_size-_e):0,o=e.window,f=e.w_mask,u=e.prev,d=e.strstart+ve;let h=o[n+s-1],_=o[n+s];e.prev_length>=e.good_match&&(t>>=2),l>e.lookahead&&(l=e.lookahead);do if(a=i,!(o[a+s]!==_||o[a+s-1]!==h||o[a]!==o[n]||o[++a]!==o[n+1])){n+=2,a++;do;while(o[++n]===o[++a]&&o[++n]===o[++a]&&o[++n]===o[++a]&&o[++n]===o[++a]&&o[++n]===o[++a]&&o[++n]===o[++a]&&o[++n]===o[++a]&&o[++n]===o[++a]&&n<d);if(r=ve-(d-n),n=d-ve,r>s){if(e.match_start=i,s=r,r>=l)break;h=o[n+s-1],_=o[n+s]}}while((i=u[i&f])>c&&--t!==0);return s<=e.lookahead?s:e.lookahead},Be=e=>{const i=e.w_size;let t,n,a;do{if(n=e.window_size-e.lookahead-e.strstart,e.strstart>=i+(i-_e)&&(e.window.set(e.window.subarray(i,i+i-n),0),e.match_start-=i,e.strstart-=i,e.block_start-=i,e.insert>e.strstart&&(e.insert=e.strstart),tl(e),n+=i),e.strm.avail_in===0)break;if(t=gi(e.strm,e.window,e.strstart+e.lookahead,n),e.lookahead+=t,e.lookahead+e.insert>=C)for(a=e.strstart-e.insert,e.ins_h=e.window[a],e.ins_h=ye(e,e.ins_h,e.window[a+1]);e.insert&&(e.ins_h=ye(e,e.ins_h,e.window[a+C-1]),e.prev[a&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=a,a++,e.insert--,!(e.lookahead+e.insert<C)););}while(e.lookahead<_e&&e.strm.avail_in!==0)},_a=(e,i)=>{let t=e.pending_buf_size-5>e.w_size?e.w_size:e.pending_buf_size-5,n,a,r,s=0,l=e.strm.avail_in;do{if(n=65535,r=e.bi_valid+42>>3,e.strm.avail_out<r||(r=e.strm.avail_out-r,a=e.strstart-e.block_start,n>a+e.strm.avail_in&&(n=a+e.strm.avail_in),n>r&&(n=r),n<t&&(n===0&&i!==ne||i===xe||n!==a+e.strm.avail_in)))break;s=i===ne&&n===a+e.strm.avail_in?1:0,hi(e,0,0,s),e.pending_buf[e.pending-4]=n,e.pending_buf[e.pending-3]=n>>8,e.pending_buf[e.pending-2]=~n,e.pending_buf[e.pending-1]=~n>>8,K(e.strm),a&&(a>n&&(a=n),e.strm.output.set(e.window.subarray(e.block_start,e.block_start+a),e.strm.next_out),e.strm.next_out+=a,e.strm.avail_out-=a,e.strm.total_out+=a,e.block_start+=a,n-=a),n&&(gi(e.strm,e.strm.output,e.strm.next_out,n),e.strm.next_out+=n,e.strm.avail_out-=n,e.strm.total_out+=n)}while(s===0);return l-=e.strm.avail_in,l&&(l>=e.w_size?(e.matches=2,e.window.set(e.strm.input.subarray(e.strm.next_in-e.w_size,e.strm.next_in),0),e.strstart=e.w_size,e.insert=e.strstart):(e.window_size-e.strstart<=l&&(e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,e.insert>e.strstart&&(e.insert=e.strstart)),e.window.set(e.strm.input.subarray(e.strm.next_in-l,e.strm.next_in),e.strstart),e.strstart+=l,e.insert+=l>e.w_size-e.insert?e.w_size-e.insert:l),e.block_start=e.strstart),e.high_water<e.strstart&&(e.high_water=e.strstart),s?je:i!==xe&&i!==ne&&e.strm.avail_in===0&&e.strstart===e.block_start?Ge:(r=e.window_size-e.strstart,e.strm.avail_in>r&&e.block_start>=e.w_size&&(e.block_start-=e.w_size,e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,r+=e.w_size,e.insert>e.strstart&&(e.insert=e.strstart)),r>e.strm.avail_in&&(r=e.strm.avail_in),r&&(gi(e.strm,e.window,e.strstart,r),e.strstart+=r,e.insert+=r>e.w_size-e.insert?e.w_size-e.insert:r),e.high_water<e.strstart&&(e.high_water=e.strstart),r=e.bi_valid+42>>3,r=e.pending_buf_size-r>65535?65535:e.pending_buf_size-r,t=r>e.w_size?e.w_size:r,a=e.strstart-e.block_start,(a>=t||(a||i===ne)&&i!==xe&&e.strm.avail_in===0&&a<=r)&&(n=a>r?r:a,s=i===ne&&e.strm.avail_in===0&&n===a?1:0,hi(e,e.block_start,n,s),e.block_start+=n,K(e.strm)),s?Ce:G)},qt=(e,i)=>{let t,n;for(;;){if(e.lookahead<_e){if(Be(e),e.lookahead<_e&&i===xe)return G;if(e.lookahead===0)break}if(t=0,e.lookahead>=C&&(e.ins_h=ye(e,e.ins_h,e.window[e.strstart+C-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),t!==0&&e.strstart-t<=e.w_size-_e&&(e.match_length=ua(e,t)),e.match_length>=C)if(n=ke(e,e.strstart-e.match_start,e.match_length-C),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=C){e.match_length--;do e.strstart++,e.ins_h=ye(e,e.ins_h,e.window[e.strstart+C-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart;while(--e.match_length!==0);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=ye(e,e.ins_h,e.window[e.strstart+1]);else n=ke(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(J(e,!1),e.strm.avail_out===0))return G}return e.insert=e.strstart<C-1?e.strstart:C-1,i===ne?(J(e,!0),e.strm.avail_out===0?Ce:je):e.sym_next&&(J(e,!1),e.strm.avail_out===0)?G:Ge},Le=(e,i)=>{let t,n,a;for(;;){if(e.lookahead<_e){if(Be(e),e.lookahead<_e&&i===xe)return G;if(e.lookahead===0)break}if(t=0,e.lookahead>=C&&(e.ins_h=ye(e,e.ins_h,e.window[e.strstart+C-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=C-1,t!==0&&e.prev_length<e.max_lazy_match&&e.strstart-t<=e.w_size-_e&&(e.match_length=ua(e,t),e.match_length<=5&&(e.strategy===$r||e.match_length===C&&e.strstart-e.match_start>4096)&&(e.match_length=C-1)),e.prev_length>=C&&e.match_length<=e.prev_length){a=e.strstart+e.lookahead-C,n=ke(e,e.strstart-1-e.prev_match,e.prev_length-C),e.lookahead-=e.prev_length-1,e.prev_length-=2;do++e.strstart<=a&&(e.ins_h=ye(e,e.ins_h,e.window[e.strstart+C-1]),t=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart);while(--e.prev_length!==0);if(e.match_available=0,e.match_length=C-1,e.strstart++,n&&(J(e,!1),e.strm.avail_out===0))return G}else if(e.match_available){if(n=ke(e,0,e.window[e.strstart-1]),n&&J(e,!1),e.strstart++,e.lookahead--,e.strm.avail_out===0)return G}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=ke(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<C-1?e.strstart:C-1,i===ne?(J(e,!0),e.strm.avail_out===0?Ce:je):e.sym_next&&(J(e,!1),e.strm.avail_out===0)?G:Ge},nl=(e,i)=>{let t,n,a,r;const s=e.window;for(;;){if(e.lookahead<=ve){if(Be(e),e.lookahead<=ve&&i===xe)return G;if(e.lookahead===0)break}if(e.match_length=0,e.lookahead>=C&&e.strstart>0&&(a=e.strstart-1,n=s[a],n===s[++a]&&n===s[++a]&&n===s[++a])){r=e.strstart+ve;do;while(n===s[++a]&&n===s[++a]&&n===s[++a]&&n===s[++a]&&n===s[++a]&&n===s[++a]&&n===s[++a]&&n===s[++a]&&a<r);e.match_length=ve-(r-a),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=C?(t=ke(e,1,e.match_length-C),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(t=ke(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),t&&(J(e,!1),e.strm.avail_out===0))return G}return e.insert=0,i===ne?(J(e,!0),e.strm.avail_out===0?Ce:je):e.sym_next&&(J(e,!1),e.strm.avail_out===0)?G:Ge},al=(e,i)=>{let t;for(;;){if(e.lookahead===0&&(Be(e),e.lookahead===0)){if(i===xe)return G;break}if(e.match_length=0,t=ke(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,t&&(J(e,!1),e.strm.avail_out===0))return G}return e.insert=0,i===ne?(J(e,!0),e.strm.avail_out===0?Ce:je):e.sym_next&&(J(e,!1),e.strm.avail_out===0)?G:Ge};function ce(e,i,t,n,a){this.good_length=e,this.max_lazy=i,this.nice_length=t,this.max_chain=n,this.func=a}const Qe=[new ce(0,0,0,0,_a),new ce(4,4,8,4,qt),new ce(4,5,16,8,qt),new ce(4,6,32,32,qt),new ce(4,4,16,16,Le),new ce(8,16,32,32,Le),new ce(8,16,128,128,Le),new ce(8,32,128,256,Le),new ce(32,128,258,1024,Le),new ce(32,258,258,4096,Le)],rl=e=>{e.window_size=2*e.w_size,we(e.head),e.max_lazy_match=Qe[e.level].max_lazy,e.good_match=Qe[e.level].good_length,e.nice_match=Qe[e.level].nice_length,e.max_chain_length=Qe[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=C-1,e.match_available=0,e.ins_h=0};function ll(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=Ot,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(qr*2),this.dyn_dtree=new Uint16Array((2*jr+1)*2),this.bl_tree=new Uint16Array((2*Kr+1)*2),we(this.dyn_ltree),we(this.dyn_dtree),we(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(Jr+1),this.heap=new Uint16Array(2*di+1),we(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(2*di+1),we(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const bt=e=>{if(!e)return 1;const i=e.state;return!i||i.strm!==e||i.status!==$e&&i.status!==Si&&i.status!==ui&&i.status!==_i&&i.status!==mi&&i.status!==bi&&i.status!==Se&&i.status!==Je?1:0},ma=e=>{if(bt(e))return Te(e,ue);e.total_in=e.total_out=0,e.data_type=Pr;const i=e.state;return i.pending=0,i.pending_out=0,i.wrap<0&&(i.wrap=-i.wrap),i.status=i.wrap===2?Si:i.wrap?$e:Se,e.adler=i.wrap===2?0:1,i.last_flush=-2,Rr(i),V},ba=e=>{const i=ma(e);return i===V&&rl(e.state),i},sl=(e,i)=>bt(e)||e.state.wrap!==2?ue:(e.state.gzhead=i,V),ga=(e,i,t,n,a,r)=>{if(!e)return ue;let s=1;if(i===Or&&(i=6),n<0?(s=0,n=-n):n>15&&(s=2,n-=16),a<1||a>Vr||t!==Ot||n<8||n>15||i<0||i>9||r<0||r>Fr||n===8&&s!==1)return Te(e,ue);n===8&&(n=9);const l=new ll;return e.state=l,l.strm=e,l.status=$e,l.wrap=s,l.gzhead=null,l.w_bits=n,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=a+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+C-1)/C),l.window=new Uint8Array(l.w_size*2),l.head=new Uint16Array(l.hash_size),l.prev=new Uint16Array(l.w_size),l.lit_bufsize=1<<a+6,l.pending_buf_size=l.lit_bufsize*4,l.pending_buf=new Uint8Array(l.pending_buf_size),l.sym_buf=l.lit_bufsize,l.sym_end=(l.lit_bufsize-1)*3,l.level=i,l.strategy=r,l.method=t,ba(e)},ol=(e,i)=>ga(e,i,Ot,Xr,Yr,Hr),fl=(e,i)=>{if(bt(e)||i>Hi||i<0)return e?Te(e,ue):ue;const t=e.state;if(!e.output||e.avail_in!==0&&!e.input||t.status===Je&&i!==ne)return Te(e,e.avail_out===0?Kt:ue);const n=t.last_flush;if(t.last_flush=i,t.pending!==0){if(K(e),e.avail_out===0)return t.last_flush=-1,V}else if(e.avail_in===0&&Vi(i)<=Vi(n)&&i!==ne)return Te(e,Kt);if(t.status===Je&&e.avail_in!==0)return Te(e,Kt);if(t.status===$e&&t.wrap===0&&(t.status=Se),t.status===$e){let a=Ot+(t.w_bits-8<<4)<<8,r=-1;if(t.strategy>=kt||t.level<2?r=0:t.level<6?r=1:t.level===6?r=2:r=3,a|=r<<6,t.strstart!==0&&(a|=Qr),a+=31-a%31,qe(t,a),t.strstart!==0&&(qe(t,e.adler>>>16),qe(t,e.adler&65535)),e.adler=1,t.status=Se,K(e),t.pending!==0)return t.last_flush=-1,V}if(t.status===Si){if(e.adler=0,N(t,31),N(t,139),N(t,8),t.gzhead)N(t,(t.gzhead.text?1:0)+(t.gzhead.hcrc?2:0)+(t.gzhead.extra?4:0)+(t.gzhead.name?8:0)+(t.gzhead.comment?16:0)),N(t,t.gzhead.time&255),N(t,t.gzhead.time>>8&255),N(t,t.gzhead.time>>16&255),N(t,t.gzhead.time>>24&255),N(t,t.level===9?2:t.strategy>=kt||t.level<2?4:0),N(t,t.gzhead.os&255),t.gzhead.extra&&t.gzhead.extra.length&&(N(t,t.gzhead.extra.length&255),N(t,t.gzhead.extra.length>>8&255)),t.gzhead.hcrc&&(e.adler=P(e.adler,t.pending_buf,t.pending,0)),t.gzindex=0,t.status=ui;else if(N(t,0),N(t,0),N(t,0),N(t,0),N(t,0),N(t,t.level===9?2:t.strategy>=kt||t.level<2?4:0),N(t,el),t.status=Se,K(e),t.pending!==0)return t.last_flush=-1,V}if(t.status===ui){if(t.gzhead.extra){let a=t.pending,r=(t.gzhead.extra.length&65535)-t.gzindex;for(;t.pending+r>t.pending_buf_size;){let l=t.pending_buf_size-t.pending;if(t.pending_buf.set(t.gzhead.extra.subarray(t.gzindex,t.gzindex+l),t.pending),t.pending=t.pending_buf_size,t.gzhead.hcrc&&t.pending>a&&(e.adler=P(e.adler,t.pending_buf,t.pending-a,a)),t.gzindex+=l,K(e),t.pending!==0)return t.last_flush=-1,V;a=0,r-=l}let s=new Uint8Array(t.gzhead.extra);t.pending_buf.set(s.subarray(t.gzindex,t.gzindex+r),t.pending),t.pending+=r,t.gzhead.hcrc&&t.pending>a&&(e.adler=P(e.adler,t.pending_buf,t.pending-a,a)),t.gzindex=0}t.status=_i}if(t.status===_i){if(t.gzhead.name){let a=t.pending,r;do{if(t.pending===t.pending_buf_size){if(t.gzhead.hcrc&&t.pending>a&&(e.adler=P(e.adler,t.pending_buf,t.pending-a,a)),K(e),t.pending!==0)return t.last_flush=-1,V;a=0}t.gzindex<t.gzhead.name.length?r=t.gzhead.name.charCodeAt(t.gzindex++)&255:r=0,N(t,r)}while(r!==0);t.gzhead.hcrc&&t.pending>a&&(e.adler=P(e.adler,t.pending_buf,t.pending-a,a)),t.gzindex=0}t.status=mi}if(t.status===mi){if(t.gzhead.comment){let a=t.pending,r;do{if(t.pending===t.pending_buf_size){if(t.gzhead.hcrc&&t.pending>a&&(e.adler=P(e.adler,t.pending_buf,t.pending-a,a)),K(e),t.pending!==0)return t.last_flush=-1,V;a=0}t.gzindex<t.gzhead.comment.length?r=t.gzhead.comment.charCodeAt(t.gzindex++)&255:r=0,N(t,r)}while(r!==0);t.gzhead.hcrc&&t.pending>a&&(e.adler=P(e.adler,t.pending_buf,t.pending-a,a))}t.status=bi}if(t.status===bi){if(t.gzhead.hcrc){if(t.pending+2>t.pending_buf_size&&(K(e),t.pending!==0))return t.last_flush=-1,V;N(t,e.adler&255),N(t,e.adler>>8&255),e.adler=0}if(t.status=Se,K(e),t.pending!==0)return t.last_flush=-1,V}if(e.avail_in!==0||t.lookahead!==0||i!==xe&&t.status!==Je){let a=t.level===0?_a(t,i):t.strategy===kt?al(t,i):t.strategy===Br?nl(t,i):Qe[t.level].func(t,i);if((a===Ce||a===je)&&(t.status=Je),a===G||a===Ce)return e.avail_out===0&&(t.last_flush=-1),V;if(a===Ge&&(i===Lr?Zr(t):i!==Hi&&(hi(t,0,0,!1),i===Nr&&(we(t.head),t.lookahead===0&&(t.strstart=0,t.block_start=0,t.insert=0))),K(e),e.avail_out===0))return t.last_flush=-1,V}return i!==ne?V:t.wrap<=0?Pi:(t.wrap===2?(N(t,e.adler&255),N(t,e.adler>>8&255),N(t,e.adler>>16&255),N(t,e.adler>>24&255),N(t,e.total_in&255),N(t,e.total_in>>8&255),N(t,e.total_in>>16&255),N(t,e.total_in>>24&255)):(qe(t,e.adler>>>16),qe(t,e.adler&65535)),K(e),t.wrap>0&&(t.wrap=-t.wrap),t.pending!==0?V:Pi)},cl=e=>{if(bt(e))return ue;const i=e.state.status;return e.state=null,i===Se?Te(e,Ur):V},hl=(e,i)=>{let t=i.length;if(bt(e))return ue;const n=e.state,a=n.wrap;if(a===2||a===1&&n.status!==$e||n.lookahead)return ue;if(a===1&&(e.adler=ct(e.adler,i,t,0)),n.wrap=0,t>=n.w_size){a===0&&(we(n.head),n.strstart=0,n.block_start=0,n.insert=0);let c=new Uint8Array(n.w_size);c.set(i.subarray(t-n.w_size,t),0),i=c,t=n.w_size}const r=e.avail_in,s=e.next_in,l=e.input;for(e.avail_in=t,e.next_in=0,e.input=i,Be(n);n.lookahead>=C;){let c=n.strstart,o=n.lookahead-(C-1);do n.ins_h=ye(n,n.ins_h,n.window[c+C-1]),n.prev[c&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=c,c++;while(--o);n.strstart=c,n.lookahead=C-1,Be(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=C-1,n.match_available=0,e.next_in=s,e.input=l,e.avail_in=r,n.wrap=a,V};var dl=ol,ul=ga,_l=ba,ml=ma,bl=sl,gl=fl,pl=cl,wl=hl,vl="pako deflate (from Nodeca project)",it={deflateInit:dl,deflateInit2:ul,deflateReset:_l,deflateResetKeep:ml,deflateSetHeader:bl,deflate:gl,deflateEnd:pl,deflateSetDictionary:wl,deflateInfo:vl};const kl=(e,i)=>Object.prototype.hasOwnProperty.call(e,i);var xl=function(e){const i=Array.prototype.slice.call(arguments,1);for(;i.length;){const t=i.shift();if(t){if(typeof t!="object")throw new TypeError(t+"must be non-object");for(const n in t)kl(t,n)&&(e[n]=t[n])}}return e},yl=e=>{let i=0;for(let n=0,a=e.length;n<a;n++)i+=e[n].length;const t=new Uint8Array(i);for(let n=0,a=0,r=e.length;n<r;n++){let s=e[n];t.set(s,a),a+=s.length}return t},$t={assign:xl,flattenChunks:yl};let pa=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{pa=!1}const ht=new Uint8Array(256);for(let e=0;e<256;e++)ht[e]=e>=252?6:e>=248?5:e>=240?4:e>=224?3:e>=192?2:1;ht[254]=ht[254]=1;var El=e=>{if(typeof TextEncoder=="function"&&TextEncoder.prototype.encode)return new TextEncoder().encode(e);let i,t,n,a,r,s=e.length,l=0;for(a=0;a<s;a++)t=e.charCodeAt(a),(t&64512)===55296&&a+1<s&&(n=e.charCodeAt(a+1),(n&64512)===56320&&(t=65536+(t-55296<<10)+(n-56320),a++)),l+=t<128?1:t<2048?2:t<65536?3:4;for(i=new Uint8Array(l),r=0,a=0;r<l;a++)t=e.charCodeAt(a),(t&64512)===55296&&a+1<s&&(n=e.charCodeAt(a+1),(n&64512)===56320&&(t=65536+(t-55296<<10)+(n-56320),a++)),t<128?i[r++]=t:t<2048?(i[r++]=192|t>>>6,i[r++]=128|t&63):t<65536?(i[r++]=224|t>>>12,i[r++]=128|t>>>6&63,i[r++]=128|t&63):(i[r++]=240|t>>>18,i[r++]=128|t>>>12&63,i[r++]=128|t>>>6&63,i[r++]=128|t&63);return i};const Al=(e,i)=>{if(i<65534&&e.subarray&&pa)return String.fromCharCode.apply(null,e.length===i?e:e.subarray(0,i));let t="";for(let n=0;n<i;n++)t+=String.fromCharCode(e[n]);return t};var Sl=(e,i)=>{const t=i||e.length;if(typeof TextDecoder=="function"&&TextDecoder.prototype.decode)return new TextDecoder().decode(e.subarray(0,i));let n,a;const r=new Array(t*2);for(a=0,n=0;n<t;){let s=e[n++];if(s<128){r[a++]=s;continue}let l=ht[s];if(l>4){r[a++]=65533,n+=l-1;continue}for(s&=l===2?31:l===3?15:7;l>1&&n<t;)s=s<<6|e[n++]&63,l--;if(l>1){r[a++]=65533;continue}s<65536?r[a++]=s:(s-=65536,r[a++]=55296|s>>10&1023,r[a++]=56320|s&1023)}return Al(r,a)},Tl=(e,i)=>{i=i||e.length,i>e.length&&(i=e.length);let t=i-1;for(;t>=0&&(e[t]&192)===128;)t--;return t<0||t===0?i:t+ht[e[t]]>i?t:i},dt={string2buf:El,buf2string:Sl,utf8border:Tl};function Dl(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}var wa=Dl;const va=Object.prototype.toString,{Z_NO_FLUSH:zl,Z_SYNC_FLUSH:Il,Z_FULL_FLUSH:Cl,Z_FINISH:Rl,Z_OK:Lt,Z_STREAM_END:Ml,Z_DEFAULT_COMPRESSION:Zl,Z_DEFAULT_STRATEGY:Ll,Z_DEFLATED:Nl}=Me;function gt(e){this.options=$t.assign({level:Zl,method:Nl,chunkSize:16384,windowBits:15,memLevel:8,strategy:Ll},e||{});let i=this.options;i.raw&&i.windowBits>0?i.windowBits=-i.windowBits:i.gzip&&i.windowBits>0&&i.windowBits<16&&(i.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new wa,this.strm.avail_out=0;let t=it.deflateInit2(this.strm,i.level,i.method,i.windowBits,i.memLevel,i.strategy);if(t!==Lt)throw new Error(Ie[t]);if(i.header&&it.deflateSetHeader(this.strm,i.header),i.dictionary){let n;if(typeof i.dictionary=="string"?n=dt.string2buf(i.dictionary):va.call(i.dictionary)==="[object ArrayBuffer]"?n=new Uint8Array(i.dictionary):n=i.dictionary,t=it.deflateSetDictionary(this.strm,n),t!==Lt)throw new Error(Ie[t]);this._dict_set=!0}}gt.prototype.push=function(e,i){const t=this.strm,n=this.options.chunkSize;let a,r;if(this.ended)return!1;for(i===~~i?r=i:r=i===!0?Rl:zl,typeof e=="string"?t.input=dt.string2buf(e):va.call(e)==="[object ArrayBuffer]"?t.input=new Uint8Array(e):t.input=e,t.next_in=0,t.avail_in=t.input.length;;){if(t.avail_out===0&&(t.output=new Uint8Array(n),t.next_out=0,t.avail_out=n),(r===Il||r===Cl)&&t.avail_out<=6){this.onData(t.output.subarray(0,t.next_out)),t.avail_out=0;continue}if(a=it.deflate(t,r),a===Ml)return t.next_out>0&&this.onData(t.output.subarray(0,t.next_out)),a=it.deflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===Lt;if(t.avail_out===0){this.onData(t.output);continue}if(r>0&&t.next_out>0){this.onData(t.output.subarray(0,t.next_out)),t.avail_out=0;continue}if(t.avail_in===0)break}return!0};gt.prototype.onData=function(e){this.chunks.push(e)};gt.prototype.onEnd=function(e){e===Lt&&(this.result=$t.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};function Ti(e,i){const t=new gt(i);if(t.push(e,!0),t.err)throw t.msg||Ie[t.err];return t.result}function Ul(e,i){return i=i||{},i.raw=!0,Ti(e,i)}function Ol(e,i){return i=i||{},i.gzip=!0,Ti(e,i)}var $l=gt,Bl=Ti,Fl=Ul,Hl=Ol,Pl=Me,Vl={Deflate:$l,deflate:Bl,deflateRaw:Fl,gzip:Hl,constants:Pl};const xt=16209,Xl=16191;var Yl=function(i,t){let n,a,r,s,l,c,o,f,u,d,h,_,b,g,m,v,E,w,k,T,y,L,z,S;const D=i.state;n=i.next_in,z=i.input,a=n+(i.avail_in-5),r=i.next_out,S=i.output,s=r-(t-i.avail_out),l=r+(i.avail_out-257),c=D.dmax,o=D.wsize,f=D.whave,u=D.wnext,d=D.window,h=D.hold,_=D.bits,b=D.lencode,g=D.distcode,m=(1<<D.lenbits)-1,v=(1<<D.distbits)-1;e:do{_<15&&(h+=z[n++]<<_,_+=8,h+=z[n++]<<_,_+=8),E=b[h&m];t:for(;;){if(w=E>>>24,h>>>=w,_-=w,w=E>>>16&255,w===0)S[r++]=E&65535;else if(w&16){k=E&65535,w&=15,w&&(_<w&&(h+=z[n++]<<_,_+=8),k+=h&(1<<w)-1,h>>>=w,_-=w),_<15&&(h+=z[n++]<<_,_+=8,h+=z[n++]<<_,_+=8),E=g[h&v];i:for(;;){if(w=E>>>24,h>>>=w,_-=w,w=E>>>16&255,w&16){if(T=E&65535,w&=15,_<w&&(h+=z[n++]<<_,_+=8,_<w&&(h+=z[n++]<<_,_+=8)),T+=h&(1<<w)-1,T>c){i.msg="invalid distance too far back",D.mode=xt;break e}if(h>>>=w,_-=w,w=r-s,T>w){if(w=T-w,w>f&&D.sane){i.msg="invalid distance too far back",D.mode=xt;break e}if(y=0,L=d,u===0){if(y+=o-w,w<k){k-=w;do S[r++]=d[y++];while(--w);y=r-T,L=S}}else if(u<w){if(y+=o+u-w,w-=u,w<k){k-=w;do S[r++]=d[y++];while(--w);if(y=0,u<k){w=u,k-=w;do S[r++]=d[y++];while(--w);y=r-T,L=S}}}else if(y+=u-w,w<k){k-=w;do S[r++]=d[y++];while(--w);y=r-T,L=S}for(;k>2;)S[r++]=L[y++],S[r++]=L[y++],S[r++]=L[y++],k-=3;k&&(S[r++]=L[y++],k>1&&(S[r++]=L[y++]))}else{y=r-T;do S[r++]=S[y++],S[r++]=S[y++],S[r++]=S[y++],k-=3;while(k>2);k&&(S[r++]=S[y++],k>1&&(S[r++]=S[y++]))}}else if(w&64){i.msg="invalid distance code",D.mode=xt;break e}else{E=g[(E&65535)+(h&(1<<w)-1)];continue i}break}}else if(w&64)if(w&32){D.mode=Xl;break e}else{i.msg="invalid literal/length code",D.mode=xt;break e}else{E=b[(E&65535)+(h&(1<<w)-1)];continue t}break}}while(n<a&&r<l);k=_>>3,n-=k,_-=k<<3,h&=(1<<_)-1,i.next_in=n,i.next_out=r,i.avail_in=n<a?5+(a-n):5-(n-a),i.avail_out=r<l?257+(l-r):257-(r-l),D.hold=h,D.bits=_};const Ne=15,Xi=852,Yi=592,Wi=0,Jt=1,Gi=2,Wl=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),Gl=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),jl=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),Kl=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),ql=(e,i,t,n,a,r,s,l)=>{const c=l.bits;let o=0,f=0,u=0,d=0,h=0,_=0,b=0,g=0,m=0,v=0,E,w,k,T,y,L=null,z;const S=new Uint16Array(Ne+1),D=new Uint16Array(Ne+1);let x=null,W,wt,vt;for(o=0;o<=Ne;o++)S[o]=0;for(f=0;f<n;f++)S[i[t+f]]++;for(h=c,d=Ne;d>=1&&S[d]===0;d--);if(h>d&&(h=d),d===0)return a[r++]=1<<24|64<<16|0,a[r++]=1<<24|64<<16|0,l.bits=1,0;for(u=1;u<d&&S[u]===0;u++);for(h<u&&(h=u),g=1,o=1;o<=Ne;o++)if(g<<=1,g-=S[o],g<0)return-1;if(g>0&&(e===Wi||d!==1))return-1;for(D[1]=0,o=1;o<Ne;o++)D[o+1]=D[o]+S[o];for(f=0;f<n;f++)i[t+f]!==0&&(s[D[i[t+f]]++]=f);if(e===Wi?(L=x=s,z=20):e===Jt?(L=Wl,x=Gl,z=257):(L=jl,x=Kl,z=0),v=0,f=0,o=u,y=r,_=h,b=0,k=-1,m=1<<h,T=m-1,e===Jt&&m>Xi||e===Gi&&m>Yi)return 1;for(;;){W=o-b,s[f]+1<z?(wt=0,vt=s[f]):s[f]>=z?(wt=x[s[f]-z],vt=L[s[f]-z]):(wt=96,vt=0),E=1<<o-b,w=1<<_,u=w;do w-=E,a[y+(v>>b)+w]=W<<24|wt<<16|vt|0;while(w!==0);for(E=1<<o-1;v&E;)E>>=1;if(E!==0?(v&=E-1,v+=E):v=0,f++,--S[o]===0){if(o===d)break;o=i[t+s[f]]}if(o>h&&(v&T)!==k){for(b===0&&(b=h),y+=u,_=o-b,g=1<<_;_+b<d&&(g-=S[_+b],!(g<=0));)_++,g<<=1;if(m+=1<<_,e===Jt&&m>Xi||e===Gi&&m>Yi)return 1;k=v&T,a[k]=h<<24|_<<16|y-r|0}}return v!==0&&(a[y+v]=o-b<<24|64<<16|0),l.bits=h,0};var nt=ql;const Jl=0,ka=1,xa=2,{Z_FINISH:ji,Z_BLOCK:Ql,Z_TREES:yt,Z_OK:Re,Z_STREAM_END:es,Z_NEED_DICT:ts,Z_STREAM_ERROR:le,Z_DATA_ERROR:ya,Z_MEM_ERROR:Ea,Z_BUF_ERROR:is,Z_DEFLATED:Ki}=Me,Bt=16180,qi=16181,Ji=16182,Qi=16183,en=16184,tn=16185,nn=16186,an=16187,rn=16188,ln=16189,Nt=16190,be=16191,Qt=16192,sn=16193,ei=16194,on=16195,fn=16196,cn=16197,hn=16198,Et=16199,At=16200,dn=16201,un=16202,_n=16203,mn=16204,bn=16205,ti=16206,gn=16207,pn=16208,B=16209,Aa=16210,Sa=16211,ns=852,as=592,rs=15,ls=rs,wn=e=>(e>>>24&255)+(e>>>8&65280)+((e&65280)<<8)+((e&255)<<24);function ss(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Ze=e=>{if(!e)return 1;const i=e.state;return!i||i.strm!==e||i.mode<Bt||i.mode>Sa?1:0},Ta=e=>{if(Ze(e))return le;const i=e.state;return e.total_in=e.total_out=i.total=0,e.msg="",i.wrap&&(e.adler=i.wrap&1),i.mode=Bt,i.last=0,i.havedict=0,i.flags=-1,i.dmax=32768,i.head=null,i.hold=0,i.bits=0,i.lencode=i.lendyn=new Int32Array(ns),i.distcode=i.distdyn=new Int32Array(as),i.sane=1,i.back=-1,Re},Da=e=>{if(Ze(e))return le;const i=e.state;return i.wsize=0,i.whave=0,i.wnext=0,Ta(e)},za=(e,i)=>{let t;if(Ze(e))return le;const n=e.state;return i<0?(t=0,i=-i):(t=(i>>4)+5,i<48&&(i&=15)),i&&(i<8||i>15)?le:(n.window!==null&&n.wbits!==i&&(n.window=null),n.wrap=t,n.wbits=i,Da(e))},Ia=(e,i)=>{if(!e)return le;const t=new ss;e.state=t,t.strm=e,t.window=null,t.mode=Bt;const n=za(e,i);return n!==Re&&(e.state=null),n},os=e=>Ia(e,ls);let vn=!0,ii,ni;const fs=e=>{if(vn){ii=new Int32Array(512),ni=new Int32Array(32);let i=0;for(;i<144;)e.lens[i++]=8;for(;i<256;)e.lens[i++]=9;for(;i<280;)e.lens[i++]=7;for(;i<288;)e.lens[i++]=8;for(nt(ka,e.lens,0,288,ii,0,e.work,{bits:9}),i=0;i<32;)e.lens[i++]=5;nt(xa,e.lens,0,32,ni,0,e.work,{bits:5}),vn=!1}e.lencode=ii,e.lenbits=9,e.distcode=ni,e.distbits=5},Ca=(e,i,t,n)=>{let a;const r=e.state;return r.window===null&&(r.wsize=1<<r.wbits,r.wnext=0,r.whave=0,r.window=new Uint8Array(r.wsize)),n>=r.wsize?(r.window.set(i.subarray(t-r.wsize,t),0),r.wnext=0,r.whave=r.wsize):(a=r.wsize-r.wnext,a>n&&(a=n),r.window.set(i.subarray(t-n,t-n+a),r.wnext),n-=a,n?(r.window.set(i.subarray(t-n,t),0),r.wnext=n,r.whave=r.wsize):(r.wnext+=a,r.wnext===r.wsize&&(r.wnext=0),r.whave<r.wsize&&(r.whave+=a))),0},cs=(e,i)=>{let t,n,a,r,s,l,c,o,f,u,d,h,_,b,g=0,m,v,E,w,k,T,y,L;const z=new Uint8Array(4);let S,D;const x=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(Ze(e)||!e.output||!e.input&&e.avail_in!==0)return le;t=e.state,t.mode===be&&(t.mode=Qt),s=e.next_out,a=e.output,c=e.avail_out,r=e.next_in,n=e.input,l=e.avail_in,o=t.hold,f=t.bits,u=l,d=c,L=Re;e:for(;;)switch(t.mode){case Bt:if(t.wrap===0){t.mode=Qt;break}for(;f<16;){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}if(t.wrap&2&&o===35615){t.wbits===0&&(t.wbits=15),t.check=0,z[0]=o&255,z[1]=o>>>8&255,t.check=P(t.check,z,2,0),o=0,f=0,t.mode=qi;break}if(t.head&&(t.head.done=!1),!(t.wrap&1)||(((o&255)<<8)+(o>>8))%31){e.msg="incorrect header check",t.mode=B;break}if((o&15)!==Ki){e.msg="unknown compression method",t.mode=B;break}if(o>>>=4,f-=4,y=(o&15)+8,t.wbits===0&&(t.wbits=y),y>15||y>t.wbits){e.msg="invalid window size",t.mode=B;break}t.dmax=1<<t.wbits,t.flags=0,e.adler=t.check=1,t.mode=o&512?ln:be,o=0,f=0;break;case qi:for(;f<16;){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}if(t.flags=o,(t.flags&255)!==Ki){e.msg="unknown compression method",t.mode=B;break}if(t.flags&57344){e.msg="unknown header flags set",t.mode=B;break}t.head&&(t.head.text=o>>8&1),t.flags&512&&t.wrap&4&&(z[0]=o&255,z[1]=o>>>8&255,t.check=P(t.check,z,2,0)),o=0,f=0,t.mode=Ji;case Ji:for(;f<32;){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}t.head&&(t.head.time=o),t.flags&512&&t.wrap&4&&(z[0]=o&255,z[1]=o>>>8&255,z[2]=o>>>16&255,z[3]=o>>>24&255,t.check=P(t.check,z,4,0)),o=0,f=0,t.mode=Qi;case Qi:for(;f<16;){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}t.head&&(t.head.xflags=o&255,t.head.os=o>>8),t.flags&512&&t.wrap&4&&(z[0]=o&255,z[1]=o>>>8&255,t.check=P(t.check,z,2,0)),o=0,f=0,t.mode=en;case en:if(t.flags&1024){for(;f<16;){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}t.length=o,t.head&&(t.head.extra_len=o),t.flags&512&&t.wrap&4&&(z[0]=o&255,z[1]=o>>>8&255,t.check=P(t.check,z,2,0)),o=0,f=0}else t.head&&(t.head.extra=null);t.mode=tn;case tn:if(t.flags&1024&&(h=t.length,h>l&&(h=l),h&&(t.head&&(y=t.head.extra_len-t.length,t.head.extra||(t.head.extra=new Uint8Array(t.head.extra_len)),t.head.extra.set(n.subarray(r,r+h),y)),t.flags&512&&t.wrap&4&&(t.check=P(t.check,n,h,r)),l-=h,r+=h,t.length-=h),t.length))break e;t.length=0,t.mode=nn;case nn:if(t.flags&2048){if(l===0)break e;h=0;do y=n[r+h++],t.head&&y&&t.length<65536&&(t.head.name+=String.fromCharCode(y));while(y&&h<l);if(t.flags&512&&t.wrap&4&&(t.check=P(t.check,n,h,r)),l-=h,r+=h,y)break e}else t.head&&(t.head.name=null);t.length=0,t.mode=an;case an:if(t.flags&4096){if(l===0)break e;h=0;do y=n[r+h++],t.head&&y&&t.length<65536&&(t.head.comment+=String.fromCharCode(y));while(y&&h<l);if(t.flags&512&&t.wrap&4&&(t.check=P(t.check,n,h,r)),l-=h,r+=h,y)break e}else t.head&&(t.head.comment=null);t.mode=rn;case rn:if(t.flags&512){for(;f<16;){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}if(t.wrap&4&&o!==(t.check&65535)){e.msg="header crc mismatch",t.mode=B;break}o=0,f=0}t.head&&(t.head.hcrc=t.flags>>9&1,t.head.done=!0),e.adler=t.check=0,t.mode=be;break;case ln:for(;f<32;){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}e.adler=t.check=wn(o),o=0,f=0,t.mode=Nt;case Nt:if(t.havedict===0)return e.next_out=s,e.avail_out=c,e.next_in=r,e.avail_in=l,t.hold=o,t.bits=f,ts;e.adler=t.check=1,t.mode=be;case be:if(i===Ql||i===yt)break e;case Qt:if(t.last){o>>>=f&7,f-=f&7,t.mode=ti;break}for(;f<3;){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}switch(t.last=o&1,o>>>=1,f-=1,o&3){case 0:t.mode=sn;break;case 1:if(fs(t),t.mode=Et,i===yt){o>>>=2,f-=2;break e}break;case 2:t.mode=fn;break;case 3:e.msg="invalid block type",t.mode=B}o>>>=2,f-=2;break;case sn:for(o>>>=f&7,f-=f&7;f<32;){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}if((o&65535)!==(o>>>16^65535)){e.msg="invalid stored block lengths",t.mode=B;break}if(t.length=o&65535,o=0,f=0,t.mode=ei,i===yt)break e;case ei:t.mode=on;case on:if(h=t.length,h){if(h>l&&(h=l),h>c&&(h=c),h===0)break e;a.set(n.subarray(r,r+h),s),l-=h,r+=h,c-=h,s+=h,t.length-=h;break}t.mode=be;break;case fn:for(;f<14;){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}if(t.nlen=(o&31)+257,o>>>=5,f-=5,t.ndist=(o&31)+1,o>>>=5,f-=5,t.ncode=(o&15)+4,o>>>=4,f-=4,t.nlen>286||t.ndist>30){e.msg="too many length or distance symbols",t.mode=B;break}t.have=0,t.mode=cn;case cn:for(;t.have<t.ncode;){for(;f<3;){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}t.lens[x[t.have++]]=o&7,o>>>=3,f-=3}for(;t.have<19;)t.lens[x[t.have++]]=0;if(t.lencode=t.lendyn,t.lenbits=7,S={bits:t.lenbits},L=nt(Jl,t.lens,0,19,t.lencode,0,t.work,S),t.lenbits=S.bits,L){e.msg="invalid code lengths set",t.mode=B;break}t.have=0,t.mode=hn;case hn:for(;t.have<t.nlen+t.ndist;){for(;g=t.lencode[o&(1<<t.lenbits)-1],m=g>>>24,v=g>>>16&255,E=g&65535,!(m<=f);){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}if(E<16)o>>>=m,f-=m,t.lens[t.have++]=E;else{if(E===16){for(D=m+2;f<D;){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}if(o>>>=m,f-=m,t.have===0){e.msg="invalid bit length repeat",t.mode=B;break}y=t.lens[t.have-1],h=3+(o&3),o>>>=2,f-=2}else if(E===17){for(D=m+3;f<D;){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}o>>>=m,f-=m,y=0,h=3+(o&7),o>>>=3,f-=3}else{for(D=m+7;f<D;){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}o>>>=m,f-=m,y=0,h=11+(o&127),o>>>=7,f-=7}if(t.have+h>t.nlen+t.ndist){e.msg="invalid bit length repeat",t.mode=B;break}for(;h--;)t.lens[t.have++]=y}}if(t.mode===B)break;if(t.lens[256]===0){e.msg="invalid code -- missing end-of-block",t.mode=B;break}if(t.lenbits=9,S={bits:t.lenbits},L=nt(ka,t.lens,0,t.nlen,t.lencode,0,t.work,S),t.lenbits=S.bits,L){e.msg="invalid literal/lengths set",t.mode=B;break}if(t.distbits=6,t.distcode=t.distdyn,S={bits:t.distbits},L=nt(xa,t.lens,t.nlen,t.ndist,t.distcode,0,t.work,S),t.distbits=S.bits,L){e.msg="invalid distances set",t.mode=B;break}if(t.mode=Et,i===yt)break e;case Et:t.mode=At;case At:if(l>=6&&c>=258){e.next_out=s,e.avail_out=c,e.next_in=r,e.avail_in=l,t.hold=o,t.bits=f,Yl(e,d),s=e.next_out,a=e.output,c=e.avail_out,r=e.next_in,n=e.input,l=e.avail_in,o=t.hold,f=t.bits,t.mode===be&&(t.back=-1);break}for(t.back=0;g=t.lencode[o&(1<<t.lenbits)-1],m=g>>>24,v=g>>>16&255,E=g&65535,!(m<=f);){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}if(v&&!(v&240)){for(w=m,k=v,T=E;g=t.lencode[T+((o&(1<<w+k)-1)>>w)],m=g>>>24,v=g>>>16&255,E=g&65535,!(w+m<=f);){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}o>>>=w,f-=w,t.back+=w}if(o>>>=m,f-=m,t.back+=m,t.length=E,v===0){t.mode=bn;break}if(v&32){t.back=-1,t.mode=be;break}if(v&64){e.msg="invalid literal/length code",t.mode=B;break}t.extra=v&15,t.mode=dn;case dn:if(t.extra){for(D=t.extra;f<D;){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}t.length+=o&(1<<t.extra)-1,o>>>=t.extra,f-=t.extra,t.back+=t.extra}t.was=t.length,t.mode=un;case un:for(;g=t.distcode[o&(1<<t.distbits)-1],m=g>>>24,v=g>>>16&255,E=g&65535,!(m<=f);){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}if(!(v&240)){for(w=m,k=v,T=E;g=t.distcode[T+((o&(1<<w+k)-1)>>w)],m=g>>>24,v=g>>>16&255,E=g&65535,!(w+m<=f);){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}o>>>=w,f-=w,t.back+=w}if(o>>>=m,f-=m,t.back+=m,v&64){e.msg="invalid distance code",t.mode=B;break}t.offset=E,t.extra=v&15,t.mode=_n;case _n:if(t.extra){for(D=t.extra;f<D;){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}t.offset+=o&(1<<t.extra)-1,o>>>=t.extra,f-=t.extra,t.back+=t.extra}if(t.offset>t.dmax){e.msg="invalid distance too far back",t.mode=B;break}t.mode=mn;case mn:if(c===0)break e;if(h=d-c,t.offset>h){if(h=t.offset-h,h>t.whave&&t.sane){e.msg="invalid distance too far back",t.mode=B;break}h>t.wnext?(h-=t.wnext,_=t.wsize-h):_=t.wnext-h,h>t.length&&(h=t.length),b=t.window}else b=a,_=s-t.offset,h=t.length;h>c&&(h=c),c-=h,t.length-=h;do a[s++]=b[_++];while(--h);t.length===0&&(t.mode=At);break;case bn:if(c===0)break e;a[s++]=t.length,c--,t.mode=At;break;case ti:if(t.wrap){for(;f<32;){if(l===0)break e;l--,o|=n[r++]<<f,f+=8}if(d-=c,e.total_out+=d,t.total+=d,t.wrap&4&&d&&(e.adler=t.check=t.flags?P(t.check,a,d,s-d):ct(t.check,a,d,s-d)),d=c,t.wrap&4&&(t.flags?o:wn(o))!==t.check){e.msg="incorrect data check",t.mode=B;break}o=0,f=0}t.mode=gn;case gn:if(t.wrap&&t.flags){for(;f<32;){if(l===0)break e;l--,o+=n[r++]<<f,f+=8}if(t.wrap&4&&o!==(t.total&4294967295)){e.msg="incorrect length check",t.mode=B;break}o=0,f=0}t.mode=pn;case pn:L=es;break e;case B:L=ya;break e;case Aa:return Ea;case Sa:default:return le}return e.next_out=s,e.avail_out=c,e.next_in=r,e.avail_in=l,t.hold=o,t.bits=f,(t.wsize||d!==e.avail_out&&t.mode<B&&(t.mode<ti||i!==ji))&&Ca(e,e.output,e.next_out,d-e.avail_out),u-=e.avail_in,d-=e.avail_out,e.total_in+=u,e.total_out+=d,t.total+=d,t.wrap&4&&d&&(e.adler=t.check=t.flags?P(t.check,a,d,e.next_out-d):ct(t.check,a,d,e.next_out-d)),e.data_type=t.bits+(t.last?64:0)+(t.mode===be?128:0)+(t.mode===Et||t.mode===ei?256:0),(u===0&&d===0||i===ji)&&L===Re&&(L=is),L},hs=e=>{if(Ze(e))return le;let i=e.state;return i.window&&(i.window=null),e.state=null,Re},ds=(e,i)=>{if(Ze(e))return le;const t=e.state;return t.wrap&2?(t.head=i,i.done=!1,Re):le},us=(e,i)=>{const t=i.length;let n,a,r;return Ze(e)||(n=e.state,n.wrap!==0&&n.mode!==Nt)?le:n.mode===Nt&&(a=1,a=ct(a,i,t,0),a!==n.check)?ya:(r=Ca(e,i,t,t),r?(n.mode=Aa,Ea):(n.havedict=1,Re))};var _s=Da,ms=za,bs=Ta,gs=os,ps=Ia,ws=cs,vs=hs,ks=ds,xs=us,ys="pako inflate (from Nodeca project)",pe={inflateReset:_s,inflateReset2:ms,inflateResetKeep:bs,inflateInit:gs,inflateInit2:ps,inflate:ws,inflateEnd:vs,inflateGetHeader:ks,inflateSetDictionary:xs,inflateInfo:ys};function Es(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var As=Es;const Ra=Object.prototype.toString,{Z_NO_FLUSH:Ss,Z_FINISH:Ts,Z_OK:ut,Z_STREAM_END:ai,Z_NEED_DICT:ri,Z_STREAM_ERROR:Ds,Z_DATA_ERROR:kn,Z_MEM_ERROR:zs}=Me;function pt(e){this.options=$t.assign({chunkSize:1024*64,windowBits:15,to:""},e||{});const i=this.options;i.raw&&i.windowBits>=0&&i.windowBits<16&&(i.windowBits=-i.windowBits,i.windowBits===0&&(i.windowBits=-15)),i.windowBits>=0&&i.windowBits<16&&!(e&&e.windowBits)&&(i.windowBits+=32),i.windowBits>15&&i.windowBits<48&&(i.windowBits&15||(i.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new wa,this.strm.avail_out=0;let t=pe.inflateInit2(this.strm,i.windowBits);if(t!==ut)throw new Error(Ie[t]);if(this.header=new As,pe.inflateGetHeader(this.strm,this.header),i.dictionary&&(typeof i.dictionary=="string"?i.dictionary=dt.string2buf(i.dictionary):Ra.call(i.dictionary)==="[object ArrayBuffer]"&&(i.dictionary=new Uint8Array(i.dictionary)),i.raw&&(t=pe.inflateSetDictionary(this.strm,i.dictionary),t!==ut)))throw new Error(Ie[t])}pt.prototype.push=function(e,i){const t=this.strm,n=this.options.chunkSize,a=this.options.dictionary;let r,s,l;if(this.ended)return!1;for(i===~~i?s=i:s=i===!0?Ts:Ss,Ra.call(e)==="[object ArrayBuffer]"?t.input=new Uint8Array(e):t.input=e,t.next_in=0,t.avail_in=t.input.length;;){for(t.avail_out===0&&(t.output=new Uint8Array(n),t.next_out=0,t.avail_out=n),r=pe.inflate(t,s),r===ri&&a&&(r=pe.inflateSetDictionary(t,a),r===ut?r=pe.inflate(t,s):r===kn&&(r=ri));t.avail_in>0&&r===ai&&t.state.wrap>0&&e[t.next_in]!==0;)pe.inflateReset(t),r=pe.inflate(t,s);switch(r){case Ds:case kn:case ri:case zs:return this.onEnd(r),this.ended=!0,!1}if(l=t.avail_out,t.next_out&&(t.avail_out===0||r===ai))if(this.options.to==="string"){let c=dt.utf8border(t.output,t.next_out),o=t.next_out-c,f=dt.buf2string(t.output,c);t.next_out=o,t.avail_out=n-o,o&&t.output.set(t.output.subarray(c,c+o),0),this.onData(f)}else this.onData(t.output.length===t.next_out?t.output:t.output.subarray(0,t.next_out));if(!(r===ut&&l===0)){if(r===ai)return r=pe.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,!0;if(t.avail_in===0)break}}return!0};pt.prototype.onData=function(e){this.chunks.push(e)};pt.prototype.onEnd=function(e){e===ut&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=$t.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};function Di(e,i){const t=new pt(i);if(t.push(e),t.err)throw t.msg||Ie[t.err];return t.result}function Is(e,i){return i=i||{},i.raw=!0,Di(e,i)}var Cs=pt,Rs=Di,Ms=Is,Zs=Di,Ls=Me,Ns={Inflate:Cs,inflate:Rs,inflateRaw:Ms,ungzip:Zs,constants:Ls};const{Deflate:Us,deflate:Os,deflateRaw:$s,gzip:Bs}=Vl,{Inflate:Fs,inflate:Hs,inflateRaw:Ps,ungzip:Vs}=Ns;var Xs=Us,Ys=Os,Ws=$s,Gs=Bs,js=Fs,Ks=Hs,qs=Ps,Js=Vs,Qs=Me,xn={Deflate:Xs,deflate:Ys,deflateRaw:Ws,gzip:Gs,Inflate:js,inflate:Ks,inflateRaw:qs,ungzip:Js,constants:Qs};class yn{constructor(i){p(this,"buffer");p(this,"bytePointer",0);p(this,"bitPointer",0);this.buffer=typeof i=="number"?new ArrayBuffer(i):"buffer"in i?i.buffer:i}get view(){return new DataView(this.buffer)}skipBits(i){this.bitPointer+=i,this.bytePointer+=Math.floor(this.bitPointer/8),this.bitPointer%=8}final(){return this.buffer.slice(0,this.bitPointer==0?this.bytePointer:this.bytePointer+1)}readBit(){const t=(this.view.getUint8(this.bytePointer)>>this.bitPointer&1)!=0;return this.skipBits(1),t}readBits(i){let t=0;for(let n=0;n<i;n++)t|=(this.readBit()?1:0)<<n;return t}writeBit(i){let t=this.view.getUint8(this.bytePointer);i?t|=1<<this.bitPointer:t&=1<<this.bitPointer^255,this.view.setUint8(this.bytePointer,t),this.skipBits(1)}writeBits(i,t){for(let n=0;n<i;n++)this.writeBit((t&1)!=0),t>>=1}}const H=64;function zi(e,i){return()=>{e|=0,e=e+2654435769|0;let t=e^e>>>16;t=Math.imul(t,569420461),t=t^t>>>15,t=Math.imul(t,1935289751);const n=(t=t^t>>>15)>>>0;return i?n/4294967296:n}}function De(e,i,t,n){return e^=e<<13|e>>>17,e=e*2158630691+3333583613&4294967295,e^=i,e^=e<<13|e>>>17,e=e*2158630691+3333583613&4294967295,e^=t,e^=e<<13|e>>>17,e=e*2158630691+3333583613&4294967295,e^=n,e^=e<<16|e>>>15,e=e*2158630691+3333583613&4294967295,(e>>>0)/4294967295}function eo(e,i){i*=e.reduce((t,n)=>t+n,0);for(let t=0;t<e.length;t++)if(i-=e[t],i<=0)return t;throw new Error("Invalid weights")}function to(e,i,t,n){let a=1/0,r=-1;for(let s=Math.floor(i)-1;s<Math.ceil(i)+1;s++)for(let l=Math.floor(t)-1;l<Math.ceil(t)+1;l++){const c=s+De(e,s,l,0)-.5,o=l+De(e,s,l,1)-.5,f=(c-i)**2+(o-t)**2;f<a&&(a=f,r=eo(n,De(e,s,l,2)))}if(r==-1)throw new Error("Voronoi noise error.");return r}function En(e,i,t){function n(h,_,b){return(_-h)*((b*(b*6-15)+10)*b*b*b)+h}const a=(h,_)=>{const b=De(e,h,_,0);return{x:Math.cos(b),y:Math.sin(b)}},r=(h,_,b,g)=>{const m=a(h,_),v=b-h,E=g-_;return v*m.x+E*m.y},s=Math.floor(i),l=s+1,c=Math.floor(t),o=c+1,f=i-s,u=t-c;return n(n(r(s,c,i,t),r(l,c,i,t),f),n(r(s,o,i,t),r(l,o,i,t),f),u)}class io{constructor(i,t,n){p(this,"world");p(this,"x");p(this,"y");p(this,"minesNearbyCache",null);this.world=i,this.x=t,this.y=n}minesNearby(i=!1){if(this.minesNearbyCache!==null&&i)return this.minesNearbyCache;this.minesNearbyCache=0;for(const t of this.searchPattern)this.minesNearbyCache+=this.world.getTile(this.x+t.x,this.y+t.y).numMines();return this.minesNearbyCache}flagsNearby(){let i=0;for(const t of this.searchPattern)i+=this.world.getTile(this.x+t.x,this.y+t.y).numFlags();return i}static load(i,t,n,a){throw new Error("Tile.load needs to be implemented on derived class.")}}var zt=(e=>(e[e.Covered=0]="Covered",e[e.Flagged=1]="Flagged",e[e.Revealed=2]="Revealed",e))(zt||{});class Ft extends io{constructor(t,n,a,r){super(t,n,a);p(this,"isMine");p(this,"state",0);p(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this.isMine=r}numMines(){return this.isMine?1:0}numFlags(){return this.state==1?1:0}flag(){this.state!=2&&(this.state==0?this.state=1:this.state=0)}reveal(){return this.state!=0?!1:(this.isMine?this.flag():this.state=2,!0)}save(t){this.isMine?t.writeBit(this.state==1):t.writeBits(2,this.state)}static loadInternal(t,n,a,r,s){const l=new t(n,a,r);if(l.isMine)s.readBit()&&l.flag();else switch(s.readBits(2)){case 0:break;case 1:l.flag();break;case 2:l.reveal();break}return l}static load(t,n,a,r){throw new Error("SingleMineTile.load needs to be implemented on derived class.")}}class no extends Ft{constructor(t,n,a){const r=De(t.tileSeed,n,a,0)>.625;super(t,n,a,r);p(this,"type","chocolate")}static load(t,n,a,r){return this.loadInternal(this,t,n,a,r)}}function An(e,i,t){const n=Math.floor(i/e),a=Math.floor(t/e);return(n+a%2)%2==0}function Ma(e,i,t,n){const a=Math.floor(t/i),r=Math.floor(n/i),s=(a+r%2)%2==0,l=Math.abs(t%i)+Math.abs(n%i)*i,c=Math.floor(De(e.tileSeed,a,r,0)*i**2),o=s?l!=c:l==c;return{isDark:s,isMine:o}}class ao extends Ft{constructor(t,n,a){const{isDark:r,isMine:s}=Ma(t,2,n,a);super(t,n,a,s);p(this,"type","waffle");p(this,"isDark");this.isDark=r}static load(t,n,a,r){return this.loadInternal(this,t,n,a,r)}}class ro extends Ft{constructor(t,n,a){const{isDark:r,isMine:s}=Ma(t,3,n,a);super(t,n,a,s);p(this,"type","stroopwafel");p(this,"isDark");this.isDark=r}static load(t,n,a,r){return this.loadInternal(this,t,n,a,r)}}class lo extends Ft{constructor(t,n,a){const r=De(t.tileSeed,n,a,0)>.875;super(t,n,a,r);p(this,"type","vanilla")}static load(t,n,a,r){return this.loadInternal(this,t,n,a,r)}}const so={type:"collection",weight:1,scale:24,smoothness:.8,biomes:[{type:"collection",weight:5,scale:24,smoothness:.8,biomes:[{type:"biome",weight:3,tile:lo},{type:"biome",weight:1,tile:no}]},{type:"collection",weight:2,scale:64,smoothness:0,biomes:[{type:"biome",weight:1,tile:ao},{type:"biome",weight:2,tile:ro}]}]};function oo(e,i,t,n,a){const r=zi(e,!1),s=En(r(),i,t)*n,l=En(r(),i,t)*n;return to(r(),i+s,t+l,a)}function Za(e,i,t){const n=zi(e.biomeSeed,!1);let a=so;for(;a.type=="collection";){const r=oo(n(),i/a.scale,t/a.scale,a.smoothness,a.biomes.map(s=>s.weight));a=a.biomes[r]}return a.tile}function La(e,i,t){const n=Za(e,i,t);return new n(e,i,t)}class Na{constructor(i,t,n){p(this,"world");p(this,"chunkX");p(this,"chunkY");this.world=i,this.chunkX=t,this.chunkY=n}isGenerated(){return this instanceof _t}generate(){if(this.isGenerated())throw new Error("Cannot generate an already generated chunk.");console.log(`Generating new chunk: ${this.chunkX}, ${this.chunkY}`);const i=[];for(let t=0;t<H;t++)for(let n=0;n<H;n++){const a=this.world.generateTile(this.chunkX*H+n,this.chunkY*H+t);i.push(a)}return new _t(this.world,this.chunkX,this.chunkY,i)}}class _t extends Na{constructor(t,n,a,r){super(t,n,a);p(this,"tiles");if(this.tiles=r,this.tiles.length!=H*H)throw new Error("GeneratedChunk incorrect tiles length.")}getTileAbsolute(t,n){return this.getTile(t-this.chunkX*H,n-this.chunkY*H)}getTile(t,n){return this.tiles[t+n*H]}resetTileAbsolute(t,n){return this.resetTile(t-this.chunkX*H,n-this.chunkY*H)}resetTile(t,n){this.tiles[t+n*H]=La(this.world,this.chunkX*H+t,this.chunkY*H+n)}save(){const t=new yn(2048);for(const n of this.tiles)n.save(t);return xn.deflate(t.final()).buffer}static load(t,n,a,r){const s=new yn(xn.inflate(r));let l=[];for(let c=0;c<H;c++)for(let o=0;o<H;o++){const f=n*H+o,u=a*H+c,h=Za(t,f,u).load(t,f,u,s);l.push(h)}return new _t(t,n,a,l)}}const Ua="3.7.7",fo=Ua,Ke=typeof Buffer=="function",Sn=typeof TextDecoder=="function"?new TextDecoder:void 0,Tn=typeof TextEncoder=="function"?new TextEncoder:void 0,co="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",et=Array.prototype.slice.call(co),St=(e=>{let i={};return e.forEach((t,n)=>i[t]=n),i})(et),ho=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,X=String.fromCharCode.bind(String),Dn=typeof Uint8Array.from=="function"?Uint8Array.from.bind(Uint8Array):e=>new Uint8Array(Array.prototype.slice.call(e,0)),Oa=e=>e.replace(/=/g,"").replace(/[+\/]/g,i=>i=="+"?"-":"_"),$a=e=>e.replace(/[^A-Za-z0-9\+\/]/g,""),Ba=e=>{let i,t,n,a,r="";const s=e.length%3;for(let l=0;l<e.length;){if((t=e.charCodeAt(l++))>255||(n=e.charCodeAt(l++))>255||(a=e.charCodeAt(l++))>255)throw new TypeError("invalid character found");i=t<<16|n<<8|a,r+=et[i>>18&63]+et[i>>12&63]+et[i>>6&63]+et[i&63]}return s?r.slice(0,s-3)+"===".substring(s):r},Ii=typeof btoa=="function"?e=>btoa(e):Ke?e=>Buffer.from(e,"binary").toString("base64"):Ba,pi=Ke?e=>Buffer.from(e).toString("base64"):e=>{let t=[];for(let n=0,a=e.length;n<a;n+=4096)t.push(X.apply(null,e.subarray(n,n+4096)));return Ii(t.join(""))},It=(e,i=!1)=>i?Oa(pi(e)):pi(e),uo=e=>{if(e.length<2){var i=e.charCodeAt(0);return i<128?e:i<2048?X(192|i>>>6)+X(128|i&63):X(224|i>>>12&15)+X(128|i>>>6&63)+X(128|i&63)}else{var i=65536+(e.charCodeAt(0)-55296)*1024+(e.charCodeAt(1)-56320);return X(240|i>>>18&7)+X(128|i>>>12&63)+X(128|i>>>6&63)+X(128|i&63)}},_o=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,Fa=e=>e.replace(_o,uo),zn=Ke?e=>Buffer.from(e,"utf8").toString("base64"):Tn?e=>pi(Tn.encode(e)):e=>Ii(Fa(e)),Oe=(e,i=!1)=>i?Oa(zn(e)):zn(e),In=e=>Oe(e,!0),mo=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,bo=e=>{switch(e.length){case 4:var i=(7&e.charCodeAt(0))<<18|(63&e.charCodeAt(1))<<12|(63&e.charCodeAt(2))<<6|63&e.charCodeAt(3),t=i-65536;return X((t>>>10)+55296)+X((t&1023)+56320);case 3:return X((15&e.charCodeAt(0))<<12|(63&e.charCodeAt(1))<<6|63&e.charCodeAt(2));default:return X((31&e.charCodeAt(0))<<6|63&e.charCodeAt(1))}},Ha=e=>e.replace(mo,bo),Pa=e=>{if(e=e.replace(/\s+/g,""),!ho.test(e))throw new TypeError("malformed base64.");e+="==".slice(2-(e.length&3));let i,t="",n,a;for(let r=0;r<e.length;)i=St[e.charAt(r++)]<<18|St[e.charAt(r++)]<<12|(n=St[e.charAt(r++)])<<6|(a=St[e.charAt(r++)]),t+=n===64?X(i>>16&255):a===64?X(i>>16&255,i>>8&255):X(i>>16&255,i>>8&255,i&255);return t},Ci=typeof atob=="function"?e=>atob($a(e)):Ke?e=>Buffer.from(e,"base64").toString("binary"):Pa,Va=Ke?e=>Dn(Buffer.from(e,"base64")):e=>Dn(Ci(e).split("").map(i=>i.charCodeAt(0))),Xa=e=>Va(Ya(e)),go=Ke?e=>Buffer.from(e,"base64").toString("utf8"):Sn?e=>Sn.decode(Va(e)):e=>Ha(Ci(e)),Ya=e=>$a(e.replace(/[-_]/g,i=>i=="-"?"+":"/")),wi=e=>go(Ya(e)),po=e=>{if(typeof e!="string")return!1;const i=e.replace(/\s+/g,"").replace(/={0,2}$/,"");return!/[^\s0-9a-zA-Z\+/]/.test(i)||!/[^\s0-9a-zA-Z\-_]/.test(i)},Wa=e=>({value:e,enumerable:!1,writable:!0,configurable:!0}),Ga=function(){const e=(i,t)=>Object.defineProperty(String.prototype,i,Wa(t));e("fromBase64",function(){return wi(this)}),e("toBase64",function(i){return Oe(this,i)}),e("toBase64URI",function(){return Oe(this,!0)}),e("toBase64URL",function(){return Oe(this,!0)}),e("toUint8Array",function(){return Xa(this)})},ja=function(){const e=(i,t)=>Object.defineProperty(Uint8Array.prototype,i,Wa(t));e("toBase64",function(i){return It(this,i)}),e("toBase64URI",function(){return It(this,!0)}),e("toBase64URL",function(){return It(this,!0)})},wo=()=>{Ga(),ja()},Cn={version:Ua,VERSION:fo,atob:Ci,atobPolyfill:Pa,btoa:Ii,btoaPolyfill:Ba,fromBase64:wi,toBase64:Oe,encode:Oe,encodeURI:In,encodeURL:In,utob:Fa,btou:Ha,decode:wi,isValid:po,fromUint8Array:It,toUint8Array:Xa,extendString:Ga,extendUint8Array:ja,extendBuiltins:wo};let vo=0;function ko(){return vo++}class xo{constructor(){p(this,"_dispatcherDestroyed",!1);p(this,"listeners",{})}get dispatcherDestroyed(){return this._dispatcherDestroyed}dispatcherCheckDestroyed(){if(this.dispatcherDestroyed)throw new Error("EventDispatcher used after destroyed.")}getListenersArr(i){return this.listeners[i]||(this.listeners[i]=[]),this.listeners[i]}*listenersIter(){for(const i in this.listeners){const t=this.listeners[i];for(const n of t)yield n}}addEventListener(i,t,n=!1,a=0){this.dispatcherCheckDestroyed();let r=this.getListenersArr(i);const s={key:i,callbackfn:t,priority:a,id:ko(),once:n};return r.push(s),r.sort((l,c)=>l.priority-c.priority),s}dispatchEvent(i,t){this.dispatcherCheckDestroyed();const n=this.getListenersArr(i);for(const a of n){let r=!1;if(a.callbackfn({data:t,dispatcher:this,listener:a,stopPropagation:()=>r=!0}),a.once&&this.removeEventListener(a),r)break}}removeEventListener(i){this.dispatcherCheckDestroyed();let t=!1;if(typeof i!="number"){const n=this.getListenersArr(i.key);for(const a of n)a.id==i.id&&(n.splice(n.indexOf(a),1),t=!0)}else for(const n of this.listenersIter())n.id==i&&this.removeEventListener(n)&&(t=!0);return t}destroyDispatcher(){this.dispatcherCheckDestroyed(),this._dispatcherDestroyed=!0;for(const i in this.listeners)delete this.listeners[i]}}function*yo(e,i){let t=e,n=i,a=1,r=1;for(;;){for(;2*t*a<r;)yield{x:t,y:n},t+=a;for(;2*n*a<r;)yield{x:t,y:n},n+=a;a=-1*a,r+=1}}class Ht extends xo{constructor(t){super();p(this,"seed");p(this,"tileSeed");p(this,"biomeSeed");p(this,"_deaths",0);p(this,"chunks",{});p(this,"_revealCount",0);p(this,"_died",!1);this.seed=t;const n=zi(this.seed,!1);this.tileSeed=n(),this.biomeSeed=n(),this.addEventListener("die",()=>this._deaths++)}get deaths(){return this._deaths}generateTile(t,n){return La(this,t,n)}getChunk(t,n){const a=this.chunks[`${t},${n}`];return a||new Na(this,t,n)}getGeneratedChunk(t,n){const a=this.getChunk(t,n);if(a.isGenerated())return a;const r=a.generate();return this.chunks[`${t},${n}`]=r,r}getTile(t,n){const a=Math.floor(t/H),r=Math.floor(n/H);return this.getGeneratedChunk(a,r).getTileAbsolute(t,n)}flag(t,n){const a=this.getTile(t,n),r=a.numFlags();a.flag();const s=a.numFlags();s==0&&s!=r&&(this.dispatchEvent("particle_unflag",{x:t,y:n}),this.dispatchEvent("sound_unflag",null))}_reveal(t,n){const a=this.getTile(t,n);if(a.reveal())if(this._revealCount++,a.numMines()>0){this._died=!0,this.dispatchEvent("particle_explosion",{x:a.x,y:a.y}),this.dispatchEvent("die",{x:a.x,y:a.y});return}else this.dispatchEvent("particle_reveal",{x:a.x,y:a.y});let r=[],s=[];for(a.minesNearby()==a.flagsNearby()&&s.push(a);s.length>0;){const l=s.pop();r.push(l);for(const c of l.searchPattern){const o=this.getTile(l.x+c.x,l.y+c.y);s.some(f=>f.x==o.x&&f.y==o.y)||r.some(f=>f.x==o.x&&f.y==o.y)||(o.minesNearby()==0?s.push(o):r.push(o))}}for(const l of r)l.reveal()&&(this._revealCount++,l.numMines()>0?(this._died=!0,this.dispatchEvent("particle_explosion",{x:l.x,y:l.y}),this.dispatchEvent("die",{x:a.x,y:a.y})):this.dispatchEvent("particle_reveal",{x:l.x,y:l.y}))}reveal(t,n){return this._revealCount=0,this._died=!1,this._reveal(t,n),this._revealCount>0&&this.dispatchEvent("sound_reveal",this._revealCount),this._died&&this.dispatchEvent("sound_explosion",null),this._died}reset(t,n){const a=this.getChunk(Math.floor(t/H),Math.floor(n/H));a.isGenerated()&&a.resetTileAbsolute(t,n)}closest0(t,n){for(const{x:a,y:r}of yo(t,n)){const s=this.getTile(a,r);if(s.numMines()==0&&s.minesNearby()==0)return{x:a,y:r}}throw new Error("This error should never happen, it's just here to make TypeScript happy.")}save(){const t={version:li,seed:this.seed,deaths:this.deaths,chunks:{}};for(const n in this.chunks){const a=n,s=this.chunks[a].save();t.chunks[a]=Cn.fromUint8Array(new Uint8Array(s))}return t}static load(t){if(t.version!=li)throw new Error(`World.load: Failed to load, Version does not match. EXPECTED: ${li} GOT: ${t.version}`);const n=new Ht(t.seed);n._deaths=t.deaths;for(const a in t.chunks){const r=a,s=t.chunks[r],l=Cn.toUint8Array(s).buffer,[c,o,f]=r.match(/^(-?\d+),(-?\d+)$/),[u,d]=[parseInt(o),parseInt(f)];n.chunks[r]=_t.load(n,u,d,l)}return n}}const li=1;function Rn(e,i){console.log("Loaded new world"),i&&localStorage.setItem(e,"PLACEHOLDER");const t=new Ht(Math.floor(Math.random()*4294967295)),n=t.closest0(0,0);return t.reveal(n.x,n.y),t}function Eo(e){const i=localStorage.getItem(e);if(i){console.log("Loaded saved world");try{const t=JSON.parse(i);return Ht.load(t)}catch(t){return console.error("Failed to load world."),console.error(t),Rn(e,!1)}}else return Rn(e,!0)}function Ao(e,i){localStorage.getItem(e)!==null&&(console.log("Save world"),localStorage.setItem(e,JSON.stringify(i.save())))}const Ka=(e,i)=>{const t=new ResizeObserver(()=>{i(e.clientWidth,e.clientHeight)});return t.observe(e),{destroy(){t.unobserve(e),t.disconnect()}}};class So{constructor(i,t,n,a){p(this,"world");p(this,"theme");p(this,"canvas");p(this,"ctx");p(this,"viewport");this.world=i,this.theme=t,this.canvas=n;const r=this.canvas.getContext("2d");if(!r)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=r,this.viewport=a}async init(){}destroy(){}renderWorld(){this.ctx.imageSmoothingEnabled=!1,this.viewport.transformCtx(this.ctx);const i=this.viewport.cameraBounds(1);for(let t=i.minX;t<i.maxX;t++)for(let n=i.minY;n<i.maxY;n++){this.ctx.save(),this.ctx.translate(t,n);const a=this.world.getTile(t,n);this.theme.drawTile(this.ctx,a),this.ctx.restore()}this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.renderWorld()}}class To{constructor(i){p(this,"world");p(this,"width",0);p(this,"height",0);p(this,"cameraX",0);p(this,"cameraY",0);p(this,"cameraZoom",32);p(this,"cameraMinZoom",4);p(this,"cameraMaxZoom",64);this.world=i}setSize(i,t){this.width=i,this.height=t}cameraWidth(){return this.width/this.cameraZoom}cameraHeight(){return this.height/this.cameraZoom}cameraTranslate(i,t){this.cameraX-=i/this.cameraZoom,this.cameraY-=t/this.cameraZoom}forceCameraZoom(){return this.width/this.cameraZoom<this.cameraMinZoom&&(this.cameraZoom=this.width/this.cameraMinZoom),this.height/this.cameraZoom<this.cameraMinZoom&&(this.cameraZoom=this.height/this.cameraMinZoom),this.width/this.cameraZoom>this.cameraMaxZoom&&(this.cameraZoom=this.width/this.cameraMaxZoom),this.height/this.cameraZoom>this.cameraMaxZoom&&(this.cameraZoom=this.height/this.cameraMaxZoom),this.cameraZoom}cameraScale(i){const t=this.cameraX+this.cameraWidth()*.5,n=this.cameraY+this.cameraHeight()*.5;this.cameraZoom*=i,this.forceCameraZoom();const a=this.cameraX+this.cameraWidth()*.5,r=this.cameraY+this.cameraHeight()*.5;return this.cameraX-=a-t,this.cameraY-=r-n,this.cameraZoom}cameraBounds(i=0){return{minX:Math.floor(this.cameraX-i),minY:Math.floor(this.cameraY-i),maxX:Math.ceil(this.cameraX+this.cameraWidth()+i),maxY:Math.ceil(this.cameraY+this.cameraHeight()+i)}}isInCameraBounds(i,t,n=0){const a=this.cameraBounds(n);return i>=a.minX&&i<=a.maxX&&t>=a.minY&&t<=a.maxY}cameraPos(i,t){return{x:Math.floor(i/this.cameraZoom+this.cameraX),y:Math.floor(t/this.cameraZoom+this.cameraY)}}transformCtx(i){i.scale(this.cameraZoom,this.cameraZoom),i.translate(-this.cameraX,-this.cameraY)}}class Pt{constructor(){p(this,"_alive",!0);p(this,"_lifetime",0)}get alive(){return this._alive}set alive(i){this._alive=i}get lifetime(){return this._lifetime}rendererUpdate(i,t){this._lifetime+=t,this.update(i,t)}}class Do extends Pt{constructor(t){super();p(this,"type","explosion");p(this,"maxLifetime",500);p(this,"tile");this.tile=t}update(t,n){this.lifetime>this.maxLifetime&&(this.alive=!1)}}function Vt(e){return e<0?0:e>1?1:e}class zo extends Pt{constructor(t){super();p(this,"type","faketile");p(this,"tile");this.tile=t}get opacity(){return Vt(2-this.lifetime/250+2)}update(t,n){this.lifetime>2e3&&(this.alive=!1)}}class Io extends Pt{constructor(t,n){super();p(this,"type","flag");p(this,"x");p(this,"y");p(this,"dx");p(this,"dy");p(this,"r");p(this,"dr");this.x=t,this.y=n,this.dx=(Math.random()-.5)*.005,this.dy=-(Math.random()*.002+.005),this.r=0,this.dr=(Math.random()-.5)*.01}get opacity(){return Vt(1-this.lifetime/250+.5)}update(t,n){this.dy+=5e-5*n,this.dx*=.99,this.dy*=this.dy<0?1:.95,this.x+=this.dx*n,this.y+=this.dy*n,this.r+=this.dr*n,this.lifetime>=500&&(this.alive=!1)}}class Co extends Pt{constructor(t){super();p(this,"type","tilereveal");p(this,"tile");p(this,"x");p(this,"y");p(this,"dx");p(this,"dy");p(this,"r");p(this,"dr");p(this,"totalLifetime");this.tile=t,this.x=this.tile.x,this.y=this.tile.y,this.dx=(Math.random()-.5)*.005,this.dy=-(Math.random()*.002+.005),this.r=0,this.dr=(Math.random()-.5)*.01,this.totalLifetime=Math.random()*750+250}get opacity(){return Vt(1-this.lifetime/(this.totalLifetime/2)+.5)}update(t,n){this.dy+=5e-5*n,this.dx*=.99,this.dy*=this.dy<0?1:.98,this.x+=this.dx*n,this.y+=this.dy*n,this.r+=this.dr*n,this.lifetime>=this.totalLifetime&&(this.alive=!1)}}class Ro{constructor(i,t,n,a){p(this,"world");p(this,"theme");p(this,"canvas");p(this,"ctx");p(this,"viewport");p(this,"particles",[]);p(this,"listeners",[]);p(this,"lastFrameTime",-1);this.world=i,this.theme=t,this.canvas=n;const r=this.canvas.getContext("2d");if(!r)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=r,this.viewport=a}async init(){this.listeners.push(this.world.addEventListener("particle_unflag",({data:{x:i,y:t}})=>{this.particles.push(new Io(i,t))})),this.listeners.push(this.world.addEventListener("particle_explosion",({data:{x:i,y:t}})=>{const n=this.world.getTile(i,t);this.particles.unshift(new zo(n)),this.particles.push(new Do(n))})),this.listeners.push(this.world.addEventListener("particle_reveal",({data:{x:i,y:t}})=>{const n=this.world.getTile(i,t);this.particles.push(new Co(n))}))}destroy(){let i;for(;i=this.listeners.pop();)this.world.removeEventListener(i)}renderParticles(i){this.ctx.imageSmoothingEnabled=!1,this.viewport.transformCtx(this.ctx);for(let t=0;t<this.particles.length;t++){const n=this.particles[t];n.rendererUpdate(this,i),n.alive||(this.particles.splice(t,1),t--)}for(const t of this.particles)this.theme.drawParticle(this.ctx,t);this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.ctx.fillStyle="transparent",this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const i=performance.now();if(this.lastFrameTime==-1)this.renderParticles(0);else{const t=i-this.lastFrameTime;this.renderParticles(t)}this.lastFrameTime=i}}function Mo(e){let i,t,n,a,r,s,l;return{c(){i=R("div"),t=R("canvas"),n=ae(),a=R("canvas"),this.h()},l(c){i=M(c,"DIV",{class:!0});var o=O(i);t=M(o,"CANVAS",{}),O(t).forEach(A),n=re(o),a=M(o,"CANVAS",{}),O(a).forEach(A),o.forEach(A),this.h()},h(){I(i,"class","w-full h-full force-overlap cursor-pointer")},m(c,o){F(c,i,o),U(i,t),e[12](t),U(i,n),U(i,a),e[13](a),e[14](i),s||(l=[q(window,"keydown",e[10]),q(window,"keyup",e[11]),Pn(r=Ka.call(null,i,e[15])),q(i,"mousedown",e[16]),q(i,"mouseup",e[17]),q(i,"mousemove",e[18]),q(i,"wheel",e[19],{passive:!0}),q(i,"contextmenu",Zo)],s=!0)},p(c,[o]){r&&Vn(r.update)&&o&62&&r.update.call(null,c[15])},i:ze,o:ze,d(c){c&&A(i),e[12](null),e[13](null),e[14](null),s=!1,vi(l)}}}const Zo=e=>{e.preventDefault()};function Lo(e,i,t){const n=Qa();let a,{world:r}=i,{theme:s}=i;const l=new To(r);let c,o,f,u,d=!0,h=!1,_=-1;const b=()=>{cancelAnimationFrame(_),_=requestAnimationFrame(b),h&&(t(5,h=!1),c.render()),f.render()};let g=new Set,m=-1;ki(async()=>{c=new So(r,s,o,l),f=new Ro(r,s,u,l),clearInterval(m),m=setInterval(()=>{let x=!1;g.has("[")&&l.cameraZoom!=l.cameraScale(1.04)&&(x=!0),g.has("]")&&l.cameraZoom!=l.cameraScale(.96)&&(x=!0),g.has("ArrowUp")&&(l.cameraTranslate(0,10),x=!0),g.has("ArrowDown")&&(l.cameraTranslate(0,-10),x=!0),g.has("ArrowLeft")&&(l.cameraTranslate(10,0),x=!0),g.has("ArrowRight")&&(l.cameraTranslate(-10,0),x=!0),g.has("s")&&(t(1,l.cameraZoom=Math.pow(2,Math.ceil(Math.log(l.cameraZoom)/Math.log(2))),l),l.cameraScale(1),x=!0),x&&t(5,h=!0)},1e3/60),await c.init(),await f.init(),setTimeout(()=>{l.setSize(o.width,o.height),t(5,h=!0),b()},100)}),Xn(()=>{c.destroy(),f.destroy(),cancelAnimationFrame(_),clearInterval(m)});const v=x=>{g.add(x.key)},E=x=>{g.delete(x.key)};function w(x){Tt[x?"unshift":"push"](()=>{o=x,t(2,o)})}function k(x){Tt[x?"unshift":"push"](()=>{u=x,t(3,u)})}function T(x){Tt[x?"unshift":"push"](()=>{a=x,t(0,a)})}const y=(x,W)=>{t(2,o.width=x,o),t(2,o.height=W,o),t(3,u.width=x,u),t(3,u.height=W,u),l.setSize(x,W),l.cameraScale(1),d&&(l.cameraTranslate(x/2,W/2),t(4,d=!1)),t(5,h=!0)},L=x=>{if(document.pointerLockElement!=a){if(x.button==1)a.requestPointerLock(),x.preventDefault();else if(x.button==0){x.preventDefault();const W=l.cameraPos(x.offsetX,x.offsetY);n("action",{type:"reveal",pos:W}),t(5,h=!0)}else if(x.button==2){x.preventDefault();const W=l.cameraPos(x.offsetX,x.offsetY);n("action",{type:"flag",pos:W}),t(5,h=!0)}else if(x.button==3){x.preventDefault();const W=l.cameraPos(x.offsetX,x.offsetY);n("action",{type:"reset",pos:W}),t(5,h=!0)}}},z=x=>{document.pointerLockElement==a&&x.button==1&&document.exitPointerLock()},S=x=>{document.pointerLockElement==a&&(l.cameraTranslate(x.movementX,x.movementY),t(5,h=!0))},D=x=>{const W=x.deltaY>0?.9:1.1;l.cameraZoom!=l.cameraScale(W)&&t(5,h=!0)};return e.$$set=x=>{"world"in x&&t(8,r=x.world),"theme"in x&&t(9,s=x.theme)},[a,l,o,u,d,h,n,g,r,s,v,E,w,k,T,y,L,z,S,D]}class No extends oe{constructor(i){super(),fe(this,i,Lo,Mo,se,{world:8,theme:9})}}class Uo{constructor(i,t){p(this,"textures");p(this,"src");p(this,"img");this.src=i,this.img=document.createElement("img"),this.img.src=this.src,this.textures=t}awaitLoad(){return new Promise((i,t)=>{if(this.img.naturalWidth!==0)return i();const n=()=>{this.img.removeEventListener("load",n),this.img.removeEventListener("error",a),i()},a=()=>{this.img.removeEventListener("load",n),this.img.removeEventListener("error",a),t()};this.img.addEventListener("load",n),this.img.addEventListener("error",a)})}onLoad(i){this.awaitLoad().then(()=>i(this))}draw(i,t,n,a,r,s){const[l,c,o,f]=this.textures[t];i.drawImage(this.img,l,c,o,f,n,a,r,s)}}class Oo{constructor(){p(this,"volume",1)}playSound(i,t=1){const n=this.soundEffects[i],a=Vt(t*this.volume);if(a<=0)return;const r=document.createElement("audio");r.src=n.src,r.volume=a,r.playbackRate=1+Math.random()*n.variation,r.preservesPitch=!1;const s=()=>{r.removeEventListener("ended",s),r.remove()};r.addEventListener("ended",s),r.play()}}class $o extends Oo{constructor(){super(...arguments);p(this,"tileset",new Uo("/infinite-minesweeper/retro/tileset.png",{null:[0,0,16,16],bomb:[16,0,16,16],explosion1:[16,16,16,16],explosion2:[16,32,16,16],explosion3:[16,48,16,16],explosion4:[16,64,16,16],flag:[32,16,16,16],number_0:[48,0,16,16],number_1:[48,16,16,16],number_2:[48,32,16,16],number_3:[48,48,16,16],number_4:[48,64,16,16],number_5:[48,80,16,16],number_6:[48,96,16,16],number_7:[48,112,16,16],number_8:[48,128,16,16],tile_vanilla_covered:[64,0,16,16],tile_vanilla_revealed:[80,0,16,16],tile_chocolate_covered:[64,16,16,16],tile_chocolate_revealed:[80,16,16,16],tile_waffle_light_covered:[64,32,16,16],tile_waffle_light_revealed:[80,32,16,16],tile_waffle_dark_covered:[96,32,16,16],tile_waffle_dark_revealed:[112,32,16,16],tile_stroopwafel_light_covered:[64,48,16,16],tile_stroopwafel_light_revealed:[80,48,16,16],tile_stroopwafel_dark_covered:[96,48,16,16],tile_stroopwafel_dark_revealed:[112,48,16,16]}));p(this,"soundEffects",{reveal:{src:"/infinite-minesweeper/retro/reveal.wav",variation:.25},unflag:{src:"/infinite-minesweeper/retro/unflag.wav",variation:.25},explosion:{src:"/infinite-minesweeper/retro/explosion.wav",variation:.25}})}async init(){await this.tileset.awaitLoad()}drawNearby(t,n){switch(n.minesNearby(!0)){case 0:break;case 1:this.tileset.draw(t,"number_1",0,0,1,1);break;case 2:this.tileset.draw(t,"number_2",0,0,1,1);break;case 3:this.tileset.draw(t,"number_3",0,0,1,1);break;case 4:this.tileset.draw(t,"number_4",0,0,1,1);break;case 5:this.tileset.draw(t,"number_5",0,0,1,1);break;case 6:this.tileset.draw(t,"number_6",0,0,1,1);break;case 7:this.tileset.draw(t,"number_7",0,0,1,1);break;case 8:this.tileset.draw(t,"number_8",0,0,1,1);break;default:throw new Error("ThemeRetro invalid draw nearby count.")}}drawSingleMineTile(t,n,a,r,s){if(s){this.tileset.draw(t,a,0,0,1,1);return}switch(n.state){case zt.Covered:this.tileset.draw(t,a,0,0,1,1);break;case zt.Flagged:this.tileset.draw(t,a,0,0,1,1),this.tileset.draw(t,"flag",0,0,1,1);break;case zt.Revealed:{this.tileset.draw(t,r,0,0,1,1),n.isMine?this.tileset.draw(t,"bomb",0,0,1,1):this.drawNearby(t,n);break}}}drawForcedTile(t,n,a){switch(n.type){case"vanilla":this.drawSingleMineTile(t,n,"tile_vanilla_covered","tile_vanilla_revealed",a);break;case"chocolate":this.drawSingleMineTile(t,n,"tile_chocolate_covered","tile_chocolate_revealed",a);break;case"waffle":{An(2,n.x,n.y)?this.drawSingleMineTile(t,n,"tile_waffle_dark_covered","tile_waffle_dark_revealed",a):this.drawSingleMineTile(t,n,"tile_waffle_light_covered","tile_waffle_light_revealed",a);break}case"stroopwafel":{An(3,n.x,n.y)?this.drawSingleMineTile(t,n,"tile_stroopwafel_dark_covered","tile_stroopwafel_dark_revealed",a):this.drawSingleMineTile(t,n,"tile_stroopwafel_light_covered","tile_stroopwafel_light_revealed",a);break}}}drawTile(t,n){this.drawForcedTile(t,n,!1)}drawParticle(t,n){switch(t.save(),n.type){case"flag":{t.translate(n.x+.5,n.y+.5),t.rotate(n.r),t.globalAlpha=n.opacity,this.tileset.draw(t,"flag",-.5,-.5,1,1);break}case"explosion":{const a=["explosion1","explosion2","explosion3","explosion4"],r=Math.min(Math.floor(n.lifetime/n.maxLifetime*a.length),a.length-1);this.tileset.draw(t,a[r],n.tile.x,n.tile.y,1,1);break}case"faketile":{t.translate(n.tile.x,n.tile.y),t.globalAlpha=n.opacity,this.drawForcedTile(t,n.tile,!0);break}case"tilereveal":{t.translate(n.x+.5,n.y+.5),t.rotate(n.r),t.translate(-.5,-.5),t.globalAlpha=n.opacity,this.drawForcedTile(t,n.tile,!0);break}}t.globalAlpha=1,t.restore()}}const Bo=qn(.25),Ct=qn(null);function Mn(e){let i,t;return i=new No({props:{world:e[1],theme:e[2]}}),i.$on("action",e[6]),{c(){Q(i.$$.fragment)},l(n){ee(i.$$.fragment,n)},m(n,a){te(i,n,a),t=!0},p(n,a){const r={};a&2&&(r.world=n[1]),a&4&&(r.theme=n[2]),i.$set(r)},i(n){t||(Z(i.$$.fragment,n),t=!0)},o(n){$(i.$$.fragment,n),t=!1},d(n){ie(i,n)}}}function Fo(e){let i,t,n,a,r=e[1]&&e[2]&&Mn(e);return{c(){r&&r.c(),i=Ee()},l(s){r&&r.l(s),i=Ee()},m(s,l){r&&r.m(s,l),F(s,i,l),t=!0,n||(a=q(window,"beforeunload",e[5]),n=!0)},p(s,[l]){s[1]&&s[2]?r?(r.p(s,l),l&6&&Z(r,1)):(r=Mn(s),r.c(),Z(r,1),r.m(i.parentNode,i)):r&&(at(),$(r,1,1,()=>{r=null}),rt())},i(s){t||(Z(r),t=!0)},o(s){$(r),t=!1},d(s){s&&A(i),r&&r.d(s),n=!1,a()}}}function Ho(e,i,t){let n,a;oi(e,Ct,f=>t(3,n=f)),oi(e,Bo,f=>t(4,a=f));let{saveSlot:r}=i,s,l=new $o;ki(async()=>{await l.init(),t(1,s=Eo(r)),Ri(Ct,n=s,n),s.addEventListener("sound_unflag",()=>{l.playSound("unflag")}),s.addEventListener("sound_reveal",({data:f})=>{l.playSound("reveal",f/10+.9)}),s.addEventListener("sound_explosion",()=>{l.playSound("explosion")})}),Xn(()=>{location.reload()});const c=()=>{Ri(Ct,n=null,n),Ao(r,s)},o=f=>{f.detail.type=="reveal"?s.reveal(f.detail.pos.x,f.detail.pos.y):f.detail.type=="flag"?s.flag(f.detail.pos.x,f.detail.pos.y):f.detail.type=="reset"&&s.reset(f.detail.pos.x,f.detail.pos.y)};return e.$$set=f=>{"saveSlot"in f&&t(0,r=f.saveSlot)},e.$$.update=()=>{e.$$.dirty&16&&t(2,l.volume=a,l)},[r,s,l,n,a,c,o]}class Po extends oe{constructor(i){super(),fe(this,i,Ho,Fo,se,{saveSlot:0})}}/**
 * @license lucide-svelte v0.372.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Vo={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":2,"stroke-linecap":"round","stroke-linejoin":"round"},Zn=Vo;function Ln(e,i,t){const n=e.slice();return n[10]=i[t][0],n[11]=i[t][1],n}function si(e){let i,t=[e[11]],n={};for(let a=0;a<t.length;a+=1)n=Y(n,t[a]);return{c(){i=Yn(e[10]),this.h()},l(a){i=Wn(a,e[10],{}),O(i).forEach(A),this.h()},h(){Rt(i,n)},m(a,r){F(a,i,r)},p(a,r){Rt(i,n=Ye(t,[r&32&&a[11]]))},d(a){a&&A(i)}}}function Nn(e){let i=e[10],t,n=e[10]&&si(e);return{c(){n&&n.c(),t=Ee()},l(a){n&&n.l(a),t=Ee()},m(a,r){n&&n.m(a,r),F(a,t,r)},p(a,r){a[10]?i?se(i,a[10])?(n.d(1),n=si(a),i=a[10],n.c(),n.m(t.parentNode,t)):n.p(a,r):(n=si(a),i=a[10],n.c(),n.m(t.parentNode,t)):i&&(n.d(1),n=null,i=a[10])},d(a){a&&A(t),n&&n.d(a)}}}function Xo(e){let i,t,n,a,r,s=Mt(e[5]),l=[];for(let d=0;d<s.length;d+=1)l[d]=Nn(Ln(e,s,d));const c=e[9].default,o=Fe(c,e,e[8],null);let f=[Zn,e[6],{width:e[2]},{height:e[2]},{stroke:e[1]},{"stroke-width":n=e[4]?Number(e[3])*24/Number(e[2]):e[3]},{class:a=`lucide-icon lucide lucide-${e[0]} ${e[7].class??""}`}],u={};for(let d=0;d<f.length;d+=1)u=Y(u,f[d]);return{c(){i=Yn("svg");for(let d=0;d<l.length;d+=1)l[d].c();t=Ee(),o&&o.c(),this.h()},l(d){i=Wn(d,"svg",{width:!0,height:!0,stroke:!0,"stroke-width":!0,class:!0});var h=O(i);for(let _=0;_<l.length;_+=1)l[_].l(h);t=Ee(),o&&o.l(h),h.forEach(A),this.h()},h(){Rt(i,u)},m(d,h){F(d,i,h);for(let _=0;_<l.length;_+=1)l[_]&&l[_].m(i,null);U(i,t),o&&o.m(i,null),r=!0},p(d,[h]){if(h&32){s=Mt(d[5]);let _;for(_=0;_<s.length;_+=1){const b=Ln(d,s,_);l[_]?l[_].p(b,h):(l[_]=Nn(b),l[_].c(),l[_].m(i,t))}for(;_<l.length;_+=1)l[_].d(1);l.length=s.length}o&&o.p&&(!r||h&256)&&He(o,c,d,d[8],r?Ve(c,d[8],h,null):Pe(d[8]),null),Rt(i,u=Ye(f,[Zn,h&64&&d[6],(!r||h&4)&&{width:d[2]},(!r||h&4)&&{height:d[2]},(!r||h&2)&&{stroke:d[1]},(!r||h&28&&n!==(n=d[4]?Number(d[3])*24/Number(d[2]):d[3]))&&{"stroke-width":n},(!r||h&129&&a!==(a=`lucide-icon lucide lucide-${d[0]} ${d[7].class??""}`))&&{class:a}]))},i(d){r||(Z(o,d),r=!0)},o(d){$(o,d),r=!1},d(d){d&&A(i),Gn(l,d),o&&o.d(d)}}}function Yo(e,i,t){const n=["name","color","size","strokeWidth","absoluteStrokeWidth","iconNode"];let a=Mi(i,n),{$$slots:r={},$$scope:s}=i,{name:l}=i,{color:c="currentColor"}=i,{size:o=24}=i,{strokeWidth:f=2}=i,{absoluteStrokeWidth:u=!1}=i,{iconNode:d}=i;return e.$$set=h=>{t(7,i=Y(Y({},i),me(h))),t(6,a=Mi(i,n)),"name"in h&&t(0,l=h.name),"color"in h&&t(1,c=h.color),"size"in h&&t(2,o=h.size),"strokeWidth"in h&&t(3,f=h.strokeWidth),"absoluteStrokeWidth"in h&&t(4,u=h.absoluteStrokeWidth),"iconNode"in h&&t(5,d=h.iconNode),"$$scope"in h&&t(8,s=h.$$scope)},i=me(i),[l,c,o,f,u,d,a,i,s,r]}class Xt extends oe{constructor(i){super(),fe(this,i,Yo,Xo,se,{name:0,color:1,size:2,strokeWidth:3,absoluteStrokeWidth:4,iconNode:5})}}function Wo(e){let i;const t=e[2].default,n=Fe(t,e,e[3],null);return{c(){n&&n.c()},l(a){n&&n.l(a)},m(a,r){n&&n.m(a,r),i=!0},p(a,r){n&&n.p&&(!i||r&8)&&He(n,t,a,a[3],i?Ve(t,a[3],r,null):Pe(a[3]),null)},i(a){i||(Z(n,a),i=!0)},o(a){$(n,a),i=!1},d(a){n&&n.d(a)}}}function Go(e){let i,t;const n=[{name:"info"},e[1],{iconNode:e[0]}];let a={$$slots:{default:[Wo]},$$scope:{ctx:e}};for(let r=0;r<n.length;r+=1)a=Y(a,n[r]);return i=new Xt({props:a}),{c(){Q(i.$$.fragment)},l(r){ee(i.$$.fragment,r)},m(r,s){te(i,r,s),t=!0},p(r,[s]){const l=s&3?Ye(n,[n[0],s&2&&Ut(r[1]),s&1&&{iconNode:r[0]}]):{};s&8&&(l.$$scope={dirty:s,ctx:r}),i.$set(l)},i(r){t||(Z(i.$$.fragment,r),t=!0)},o(r){$(i.$$.fragment,r),t=!1},d(r){ie(i,r)}}}function jo(e,i,t){let{$$slots:n={},$$scope:a}=i;const r=[["circle",{cx:"12",cy:"12",r:"10"}],["path",{d:"M12 16v-4"}],["path",{d:"M12 8h.01"}]];return e.$$set=s=>{t(1,i=Y(Y({},i),me(s))),"$$scope"in s&&t(3,a=s.$$scope)},i=me(i),[r,i,n,a]}class Ko extends oe{constructor(i){super(),fe(this,i,jo,Go,se,{})}}function Un(e){let i,t,n,a,r,s,l=e[1]&&On(e);const c=e[3].default,o=Fe(c,e,e[2],null);return{c(){i=R("div"),t=R("div"),l&&l.c(),n=ae(),a=R("div"),r=R("div"),o&&o.c(),this.h()},l(f){i=M(f,"DIV",{class:!0});var u=O(i);t=M(u,"DIV",{class:!0});var d=O(t);l&&l.l(d),d.forEach(A),n=re(u),a=M(u,"DIV",{class:!0});var h=O(a);r=M(h,"DIV",{class:!0});var _=O(r);o&&o.l(_),_.forEach(A),h.forEach(A),u.forEach(A),this.h()},h(){I(t,"class","modal-background -z-10 bg-black bg-opacity-30 shadow-vignette-heavy svelte-pwpa02"),I(r,"class","pointer-events-auto"),I(a,"class","modal-content flex justify-center items-center pointer-events-none p-8 svelte-pwpa02"),I(i,"class","modal fixed top-0 left-0 bottom-0 right-0 grid grid-cols-1 grid-rows-1 svelte-pwpa02")},m(f,u){F(f,i,u),U(i,t),l&&l.m(t,null),U(i,n),U(i,a),U(a,r),o&&o.m(r,null),s=!0},p(f,u){f[1]?l?l.p(f,u):(l=On(f),l.c(),l.m(t,null)):l&&(l.d(1),l=null),o&&o.p&&(!s||u&4)&&He(o,c,f,f[2],s?Ve(c,f[2],u,null):Pe(f[2]),null)},i(f){s||(Z(o,f),s=!0)},o(f){$(o,f),s=!1},d(f){f&&A(i),l&&l.d(),o&&o.d(f)}}}function On(e){let i,t,n;return{c(){i=R("button"),this.h()},l(a){i=M(a,"BUTTON",{class:!0,"aria-label":!0}),O(i).forEach(A),this.h()},h(){I(i,"class","w-full h-full"),I(i,"aria-label","Close Modal")},m(a,r){F(a,i,r),t||(n=q(i,"click",e[4]),t=!0)},p:ze,d(a){a&&A(i),t=!1,n()}}}function qo(e){let i,t,n=e[0]&&Un(e);return{c(){n&&n.c(),i=Ee()},l(a){n&&n.l(a),i=Ee()},m(a,r){n&&n.m(a,r),F(a,i,r),t=!0},p(a,[r]){a[0]?n?(n.p(a,r),r&1&&Z(n,1)):(n=Un(a),n.c(),Z(n,1),n.m(i.parentNode,i)):n&&(at(),$(n,1,1,()=>{n=null}),rt())},i(a){t||(Z(n),t=!0)},o(a){$(n),t=!1},d(a){a&&A(i),n&&n.d(a)}}}function Jo(e,i,t){let{$$slots:n={},$$scope:a}=i,{visible:r=!1}=i,{closable:s=!0}=i;const l=()=>t(0,r=!1);return e.$$set=c=>{"visible"in c&&t(0,r=c.visible),"closable"in c&&t(1,s=c.closable),"$$scope"in c&&t(2,a=c.$$scope)},[r,s,a,n,l]}class Qo extends oe{constructor(i){super(),fe(this,i,Jo,qo,se,{visible:0,closable:1})}}function ef(e){let i;const t=e[2].default,n=Fe(t,e,e[3],null);return{c(){n&&n.c()},l(a){n&&n.l(a)},m(a,r){n&&n.m(a,r),i=!0},p(a,r){n&&n.p&&(!i||r&8)&&He(n,t,a,a[3],i?Ve(t,a[3],r,null):Pe(a[3]),null)},i(a){i||(Z(n,a),i=!0)},o(a){$(n,a),i=!1},d(a){n&&n.d(a)}}}function tf(e){let i,t;const n=[{name:"chevron-left"},e[1],{iconNode:e[0]}];let a={$$slots:{default:[ef]},$$scope:{ctx:e}};for(let r=0;r<n.length;r+=1)a=Y(a,n[r]);return i=new Xt({props:a}),{c(){Q(i.$$.fragment)},l(r){ee(i.$$.fragment,r)},m(r,s){te(i,r,s),t=!0},p(r,[s]){const l=s&3?Ye(n,[n[0],s&2&&Ut(r[1]),s&1&&{iconNode:r[0]}]):{};s&8&&(l.$$scope={dirty:s,ctx:r}),i.$set(l)},i(r){t||(Z(i.$$.fragment,r),t=!0)},o(r){$(i.$$.fragment,r),t=!1},d(r){ie(i,r)}}}function nf(e,i,t){let{$$slots:n={},$$scope:a}=i;const r=[["path",{d:"m15 18-6-6 6-6"}]];return e.$$set=s=>{t(1,i=Y(Y({},i),me(s))),"$$scope"in s&&t(3,a=s.$$scope)},i=me(i),[r,i,n,a]}class af extends oe{constructor(i){super(),fe(this,i,nf,tf,se,{})}}function rf(e){let i;const t=e[2].default,n=Fe(t,e,e[3],null);return{c(){n&&n.c()},l(a){n&&n.l(a)},m(a,r){n&&n.m(a,r),i=!0},p(a,r){n&&n.p&&(!i||r&8)&&He(n,t,a,a[3],i?Ve(t,a[3],r,null):Pe(a[3]),null)},i(a){i||(Z(n,a),i=!0)},o(a){$(n,a),i=!1},d(a){n&&n.d(a)}}}function lf(e){let i,t;const n=[{name:"chevron-right"},e[1],{iconNode:e[0]}];let a={$$slots:{default:[rf]},$$scope:{ctx:e}};for(let r=0;r<n.length;r+=1)a=Y(a,n[r]);return i=new Xt({props:a}),{c(){Q(i.$$.fragment)},l(r){ee(i.$$.fragment,r)},m(r,s){te(i,r,s),t=!0},p(r,[s]){const l=s&3?Ye(n,[n[0],s&2&&Ut(r[1]),s&1&&{iconNode:r[0]}]):{};s&8&&(l.$$scope={dirty:s,ctx:r}),i.$set(l)},i(r){t||(Z(i.$$.fragment,r),t=!0)},o(r){$(i.$$.fragment,r),t=!1},d(r){ie(i,r)}}}function sf(e,i,t){let{$$slots:n={},$$scope:a}=i;const r=[["path",{d:"m9 18 6-6-6-6"}]];return e.$$set=s=>{t(1,i=Y(Y({},i),me(s))),"$$scope"in s&&t(3,a=s.$$scope)},i=me(i),[r,i,n,a]}class of extends oe{constructor(i){super(),fe(this,i,sf,lf,se,{})}}function ff(e){let i,t=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_stroopwafel_screenshot.png" alt="Stroopwafel Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Stroopwafel</h2> <div class="biome-description svelte-1pkhcy2">3x3 checkers of tiles.<br/>
                        Dark checkered sections have 8 mines.<br/>
                        Light checkered sections have 1 mine.</div></div>`;return{c(){i=R("div"),i.innerHTML=t,this.h()},l(n){i=M(n,"DIV",{class:!0,"data-svelte-h":!0}),Xe(i)!=="svelte-4cbz83"&&(i.innerHTML=t),this.h()},h(){I(i,"class","biome svelte-1pkhcy2")},m(n,a){F(n,i,a)},d(n){n&&A(i)}}}function cf(e){let i,t=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_waffle_screenshot.png" alt="Waffle Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Waffle</h2> <div class="biome-description svelte-1pkhcy2">2x2 checkers of tiles.<br/>
                        Dark checkered sections have 3 mines.<br/>
                        Light checkered sections have 1 mine.</div></div>`;return{c(){i=R("div"),i.innerHTML=t,this.h()},l(n){i=M(n,"DIV",{class:!0,"data-svelte-h":!0}),Xe(i)!=="svelte-1ji8mo3"&&(i.innerHTML=t),this.h()},h(){I(i,"class","biome svelte-1pkhcy2")},m(n,a){F(n,i,a)},d(n){n&&A(i)}}}function hf(e){let i,t=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_chocolate_screenshot.png" alt="Chocolate Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Chocolate</h2> <div class="biome-description svelte-1pkhcy2">The standard Minesweeper rules.
                        <br/>
                        Much more mines than Vanilla biome.</div></div>`;return{c(){i=R("div"),i.innerHTML=t,this.h()},l(n){i=M(n,"DIV",{class:!0,"data-svelte-h":!0}),Xe(i)!=="svelte-xvgk1u"&&(i.innerHTML=t),this.h()},h(){I(i,"class","biome svelte-1pkhcy2")},m(n,a){F(n,i,a)},d(n){n&&A(i)}}}function df(e){let i,t='<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_vanilla_screenshot.png" alt="Vanilla Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Vanilla</h2> <div class="biome-description svelte-1pkhcy2">The standard Minesweeper rules.</div></div>';return{c(){i=R("div"),i.innerHTML=t,this.h()},l(n){i=M(n,"DIV",{class:!0,"data-svelte-h":!0}),Xe(i)!=="svelte-ic5bha"&&(i.innerHTML=t),this.h()},h(){I(i,"class","biome svelte-1pkhcy2")},m(n,a){F(n,i,a)},d(n){n&&A(i)}}}function uf(e){let i,t,n,a,r,s,l,c,o,f,u,d;function h(g,m){if(g[0]=="Vanilla")return df;if(g[0]=="Chocolate")return hf;if(g[0]=="Waffle")return cf;if(g[0]=="Stroopwafel")return ff}let _=h(e),b=_&&_(e);return s=new af({}),o=new of({}),{c(){i=R("div"),t=R("div"),b&&b.c(),n=ae(),a=R("div"),r=R("button"),Q(s.$$.fragment),l=ae(),c=R("button"),Q(o.$$.fragment),this.h()},l(g){i=M(g,"DIV",{class:!0});var m=O(i);t=M(m,"DIV",{class:!0});var v=O(t);b&&b.l(v),v.forEach(A),n=re(m),a=M(m,"DIV",{class:!0});var E=O(a);r=M(E,"BUTTON",{class:!0});var w=O(r);ee(s.$$.fragment,w),w.forEach(A),l=re(E),c=M(E,"BUTTON",{class:!0});var k=O(c);ee(o.$$.fragment,k),k.forEach(A),E.forEach(A),m.forEach(A),this.h()},h(){I(t,"class","pointer-events-auto px-12"),I(r,"class","pointer-events-auto pl-4 hover:-translate-x-1 transition-transform"),I(c,"class","pointer-events-auto pr-4 hover:translate-x-1 transition-transform"),I(a,"class","pointer-events-none flex justify-between z-10"),I(i,"class","w-full h-full force-overlap text-white")},m(g,m){F(g,i,m),U(i,t),b&&b.m(t,null),U(i,n),U(i,a),U(a,r),te(s,r,null),U(a,l),U(a,c),te(o,c,null),f=!0,u||(d=[q(r,"click",e[2]),q(c,"click",e[3])],u=!0)},p(g,[m]){_!==(_=h(g))&&(b&&b.d(1),b=_&&_(g),b&&(b.c(),b.m(t,null)))},i(g){f||(Z(s.$$.fragment,g),Z(o.$$.fragment,g),f=!0)},o(g){$(s.$$.fragment,g),$(o.$$.fragment,g),f=!1},d(g){g&&A(i),b&&b.d(),ie(s),ie(o),u=!1,vi(d)}}}function _f(e,i,t){const n=["Vanilla","Chocolate","Waffle","Stroopwafel"];let a="Vanilla";function r(c){let o=n.indexOf(a);o+=c=="next"?1:-1,o>=n.length&&(o=0),o<0&&(o=n.length-1),t(0,a=n[o])}return[a,r,c=>{c.preventDefault(),r("prev")},c=>{c.preventDefault(),r("next")}]}class mf extends oe{constructor(i){super(),fe(this,i,_f,uf,se,{})}}function $n(e,i,t){const n=e.slice();return n[3]=i[t],n}function Bn(e){let i,t=e[3]+"",n,a,r,s,l;function c(){return e[2](e[3])}return{c(){i=R("button"),n=jn(t),a=ae(),this.h()},l(o){i=M(o,"BUTTON",{class:!0});var f=O(i);n=Kn(f,t),a=re(f),f.forEach(A),this.h()},h(){I(i,"class","tab w-full flex justify-center py-1 px-4 rounded-md svelte-1v0way8"),i.disabled=r=e[3]==e[0],Zi(i,"selected",e[3]==e[0])},m(o,f){F(o,i,f),U(i,n),U(i,a),s||(l=q(i,"click",c),s=!0)},p(o,f){e=o,f&1&&r!==(r=e[3]==e[0])&&(i.disabled=r),f&3&&Zi(i,"selected",e[3]==e[0])},d(o){o&&A(i),s=!1,l()}}}function bf(e){let i,t=`<span>Left Click: Reveal tile
                    <br/>
                    Right Click: Flag tile
                    <br/>
                    Middle Click: Move view
                    <br/>
                    Scroll Wheel: Zoom view
                    <br/> <br/>
                    Arrow Keys: Move view
                    <br/>
                    Open Square Bracket &#39;[&#39;: View zoom In
                    <br/>
                    Close Square Bracket &#39;]&#39;: View zoom Out
                    <br/></span>`;return{c(){i=R("div"),i.innerHTML=t,this.h()},l(n){i=M(n,"DIV",{class:!0,"data-svelte-h":!0}),Xe(i)!=="svelte-docn7k"&&(i.innerHTML=t),this.h()},h(){I(i,"class","px-4")},m(n,a){F(n,i,a)},i:ze,o:ze,d(n){n&&A(i)}}}function gf(e){let i,t,n;return t=new mf({}),{c(){i=R("div"),Q(t.$$.fragment),this.h()},l(a){i=M(a,"DIV",{class:!0});var r=O(i);ee(t.$$.fragment,r),r.forEach(A),this.h()},h(){I(i,"class","w-full h-full inline")},m(a,r){F(a,i,r),te(t,i,null),n=!0},i(a){n||(Z(t.$$.fragment,a),n=!0)},o(a){$(t.$$.fragment,a),n=!1},d(a){a&&A(i),ie(t)}}}function pf(e){let i,t=`<div><a class="text-2xl font-bold" href="https://vulae.github.io/infinite-minesweeper">Infinite Minesweeper</a> <br/>
                    An infinite twist on Minesweeper that adds biomes that change the rules of the game.</div> <div class="pt-4"><span class="float-right text-xs font-extrabold">*Source code available on
                        <a class="underline" href="https://github.com/Vulae/infinite-minesweeper">GitHub</a></span></div>`;return{c(){i=R("div"),i.innerHTML=t,this.h()},l(n){i=M(n,"DIV",{class:!0,"data-svelte-h":!0}),Xe(i)!=="svelte-1yloiaf"&&(i.innerHTML=t),this.h()},h(){I(i,"class","px-4 w-full h-full flex flex-col justify-between")},m(n,a){F(n,i,a)},i:ze,o:ze,d(n){n&&A(i)}}}function wf(e){let i,t,n,a,r,s,l,c,o,f=Mt(e[1]),u=[];for(let b=0;b<f.length;b+=1)u[b]=Bn($n(e,f,b));const d=[pf,gf,bf],h=[];function _(b,g){return b[0]=="Information"?0:b[0]=="Biomes"?1:b[0]=="Controls"?2:-1}return~(l=_(e))&&(c=h[l]=d[l](e)),{c(){i=R("div"),t=R("div");for(let b=0;b<u.length;b+=1)u[b].c();n=ae(),a=R("div"),r=ae(),s=R("div"),c&&c.c(),this.h()},l(b){i=M(b,"DIV",{class:!0});var g=O(i);t=M(g,"DIV",{class:!0});var m=O(t);for(let E=0;E<u.length;E+=1)u[E].l(m);m.forEach(A),n=re(g),a=M(g,"DIV",{class:!0}),O(a).forEach(A),r=re(g),s=M(g,"DIV",{class:!0});var v=O(s);c&&c.l(v),v.forEach(A),g.forEach(A),this.h()},h(){I(t,"class","px-4 grid grid-flow-col gap-4 items-center font-bold"),I(a,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full"),I(s,"class","w-[32rem] h-64 py-2 font-semibold"),I(i,"class","grid px-4 py-2 rounded-2xl bg-white bg-opacity-50")},m(b,g){F(b,i,g),U(i,t);for(let m=0;m<u.length;m+=1)u[m]&&u[m].m(t,null);U(i,n),U(i,a),U(i,r),U(i,s),~l&&h[l].m(s,null),o=!0},p(b,[g]){if(g&3){f=Mt(b[1]);let v;for(v=0;v<f.length;v+=1){const E=$n(b,f,v);u[v]?u[v].p(E,g):(u[v]=Bn(E),u[v].c(),u[v].m(t,null))}for(;v<u.length;v+=1)u[v].d(1);u.length=f.length}let m=l;l=_(b),l!==m&&(c&&(at(),$(h[m],1,1,()=>{h[m]=null}),rt()),~l?(c=h[l],c||(c=h[l]=d[l](b),c.c()),Z(c,1),c.m(s,null)):c=null)},i(b){o||(Z(c),o=!0)},o(b){$(c),o=!1},d(b){b&&A(i),Gn(u,b),~l&&h[l].d()}}}function vf(e,i,t){const n=["Information","Biomes","Controls"];let a="Information";return[a,n,s=>t(0,a=s)]}class kf extends oe{constructor(i){super(),fe(this,i,vf,wf,se,{})}}function xf(e){let i;const t=e[2].default,n=Fe(t,e,e[3],null);return{c(){n&&n.c()},l(a){n&&n.l(a)},m(a,r){n&&n.m(a,r),i=!0},p(a,r){n&&n.p&&(!i||r&8)&&He(n,t,a,a[3],i?Ve(t,a[3],r,null):Pe(a[3]),null)},i(a){i||(Z(n,a),i=!0)},o(a){$(n,a),i=!1},d(a){n&&n.d(a)}}}function yf(e){let i,t;const n=[{name:"skull"},e[1],{iconNode:e[0]}];let a={$$slots:{default:[xf]},$$scope:{ctx:e}};for(let r=0;r<n.length;r+=1)a=Y(a,n[r]);return i=new Xt({props:a}),{c(){Q(i.$$.fragment)},l(r){ee(i.$$.fragment,r)},m(r,s){te(i,r,s),t=!0},p(r,[s]){const l=s&3?Ye(n,[n[0],s&2&&Ut(r[1]),s&1&&{iconNode:r[0]}]):{};s&8&&(l.$$scope={dirty:s,ctx:r}),i.$set(l)},i(r){t||(Z(i.$$.fragment,r),t=!0)},o(r){$(i.$$.fragment,r),t=!1},d(r){ie(i,r)}}}function Ef(e,i,t){let{$$slots:n={},$$scope:a}=i;const r=[["circle",{cx:"9",cy:"12",r:"1"}],["circle",{cx:"15",cy:"12",r:"1"}],["path",{d:"M8 20v2h8v-2"}],["path",{d:"m12.5 17-.5-1-.5 1h1z"}],["path",{d:"M16 20a2 2 0 0 0 1.56-3.25 8 8 0 1 0-11.12 0A2 2 0 0 0 8 20"}]];return e.$$set=s=>{t(1,i=Y(Y({},i),me(s))),"$$scope"in s&&t(3,a=s.$$scope)},i=me(i),[r,i,n,a]}class Af extends oe{constructor(i){super(),fe(this,i,Ef,yf,se,{})}}function Fn(e){let i,t;return i=new Po({props:{saveSlot:e[0]}}),{c(){Q(i.$$.fragment)},l(n){ee(i.$$.fragment,n)},m(n,a){te(i,n,a),t=!0},p(n,a){const r={};a&1&&(r.saveSlot=n[0]),i.$set(r)},i(n){t||(Z(i.$$.fragment,n),t=!0)},o(n){$(i.$$.fragment,n),t=!1},d(n){ie(i,n)}}}function Hn(e){let i,t,n,a,r,s,l,c,o;return a=new Af({}),{c(){i=R("div"),t=ae(),n=R("div"),Q(a.$$.fragment),r=ae(),s=R("span"),l=jn(e[4]),this.h()},l(f){i=M(f,"DIV",{class:!0}),O(i).forEach(A),t=re(f),n=M(f,"DIV",{class:!0,title:!0});var u=O(n);ee(a.$$.fragment,u),r=re(u),s=M(u,"SPAN",{class:!0});var d=O(s);l=Kn(d,e[4]),d.forEach(A),u.forEach(A),this.h()},h(){I(i,"class","w-full h-full bg-white rounded-full p-[1px]"),I(s,"class","text-sm"),I(n,"class","flex items-center"),I(n,"title",c=e[4]+" deaths"),he(n,"flex-direction",e[1]=="horizontal"?"row":"column")},m(f,u){F(f,i,u),F(f,t,u),F(f,n,u),te(a,n,null),U(n,r),U(n,s),U(s,l),o=!0},p(f,u){(!o||u&16)&&tr(l,f[4]),(!o||u&16&&c!==(c=f[4]+" deaths"))&&I(n,"title",c),u&2&&he(n,"flex-direction",f[1]=="horizontal"?"row":"column")},i(f){o||(Z(a.$$.fragment,f),o=!0)},o(f){$(a.$$.fragment,f),o=!1},d(f){f&&(A(i),A(t),A(n)),ie(a)}}}function Sf(e){let i,t;return i=new kf({}),{c(){Q(i.$$.fragment)},l(n){ee(i.$$.fragment,n)},m(n,a){te(i,n,a),t=!0},i(n){t||(Z(i.$$.fragment,n),t=!0)},o(n){$(i.$$.fragment,n),t=!1},d(n){ie(i,n)}}}function Tf(e){let i,t,n,a,r,s,l,c,o,f,u,d,h,_,b,g,m=e[0]&&Fn(e);c=new Ko({});let v=e[4]!==null&&Hn(e);function E(k){e[8](k)}let w={$$slots:{default:[Sf]},$$scope:{ctx:e}};return e[3]!==void 0&&(w.visible=e[3]),d=new Qo({props:w}),Tt.push(()=>ir(d,"visible",E)),{c(){i=R("div"),t=R("div"),m&&m.c(),n=ae(),a=R("div"),r=R("div"),s=R("div"),l=R("button"),Q(c.$$.fragment),o=ae(),v&&v.c(),u=ae(),Q(d.$$.fragment),this.h()},l(k){i=M(k,"DIV",{class:!0});var T=O(i);t=M(T,"DIV",{class:!0});var y=O(t);m&&m.l(y),y.forEach(A),n=re(T),a=M(T,"DIV",{class:!0});var L=O(a);r=M(L,"DIV",{class:!0});var z=O(r);s=M(z,"DIV",{class:!0});var S=O(s);l=M(S,"BUTTON",{class:!0,title:!0});var D=O(l);ee(c.$$.fragment,D),D.forEach(A),o=re(S),v&&v.l(S),S.forEach(A),z.forEach(A),L.forEach(A),T.forEach(A),u=re(k),ee(d.$$.fragment,k),this.h()},h(){I(t,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1"),I(l,"class","rounded-full drop-shadow-sm"),I(l,"title","Information"),I(s,"class","pointer-events-auto flex items-center gap-2 rounded-full bg-white bg-opacity-30 backdrop-blur-md shadow-lg text-white font-bold stroke-[3]"),he(s,"flex-direction",e[1]=="vertical"?"column":"row"),he(s,"padding",e[1]=="vertical"?"1rem 0.5rem":"0.5rem 1rem"),I(r,"class","w-full h-full flex items-center p-4"),he(r,"flex-direction",e[1]=="vertical"?"row":"column"),he(r,"justify-content",e[2]=="start"?"start":"end"),I(a,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1 pointer-events-none"),I(i,"class","w-screen h-screen grid grid-cols-1 grid-rows-1")},m(k,T){F(k,i,T),U(i,t),m&&m.m(t,null),U(i,n),U(i,a),U(a,r),U(r,s),U(s,l),te(c,l,null),U(s,o),v&&v.m(s,null),F(k,u,T),te(d,k,T),_=!0,b||(g=[q(l,"click",e[6]),Pn(f=Ka.call(null,a,e[7]))],b=!0)},p(k,[T]){k[0]?m?(m.p(k,T),T&1&&Z(m,1)):(m=Fn(k),m.c(),Z(m,1),m.m(t,null)):m&&(at(),$(m,1,1,()=>{m=null}),rt()),k[4]!==null?v?(v.p(k,T),T&16&&Z(v,1)):(v=Hn(k),v.c(),Z(v,1),v.m(s,null)):v&&(at(),$(v,1,1,()=>{v=null}),rt()),T&2&&he(s,"flex-direction",k[1]=="vertical"?"column":"row"),T&2&&he(s,"padding",k[1]=="vertical"?"1rem 0.5rem":"0.5rem 1rem"),T&2&&he(r,"flex-direction",k[1]=="vertical"?"row":"column"),T&4&&he(r,"justify-content",k[2]=="start"?"start":"end"),f&&Vn(f.update)&&T&6&&f.update.call(null,k[7]);const y={};T&512&&(y.$$scope={dirty:T,ctx:k}),!h&&T&8&&(h=!0,y.visible=k[3],er(()=>h=!1)),d.$set(y)},i(k){_||(Z(m),Z(c.$$.fragment,k),Z(v),Z(d.$$.fragment,k),_=!0)},o(k){$(m),$(c.$$.fragment,k),$(v),$(d.$$.fragment,k),_=!1},d(k){k&&(A(i),A(u)),m&&m.d(),ie(c),v&&v.d(),ie(d,k),b=!1,vi(g)}}}function Df(e,i,t){let n;oi(e,Ct,d=>t(5,n=d));let a=null;ki(()=>{const d=new URL(location.href);t(0,a=d.searchParams.get("saveSlot")??"save")});let r="vertical",s="end",l=!0,c;const o=()=>t(3,l=!0),f=(d,h)=>{t(1,r=d>h?"vertical":"horizontal"),t(2,s=d>h?"end":"start")};function u(d){l=d,t(3,l)}return e.$$.update=()=>{e.$$.dirty&32&&(n!==null?(t(4,c=n.deaths),n.addEventListener("die",()=>{t(4,c=n.deaths)})):t(4,c=null))},[a,r,s,l,c,n,o,f,u]}class Mf extends oe{constructor(i){super(),fe(this,i,Df,Tf,se,{})}}export{Mf as component};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
