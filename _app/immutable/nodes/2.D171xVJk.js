var al=Object.defineProperty;var ol=(t,n,e)=>n in t?al(t,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[n]=e;var A=(t,n,e)=>(ol(t,typeof n!="symbol"?n+"":n,e),e);import{s as ve,N as Le,e as R,c as L,b as Z,f as x,p as B,S as rs,T as Jt,i as X,U as ge,V as ll,P as Ue,Q as ze,R as Fe,w as sn,W as ba,o as hi,X as di,r as $e,l as Qe,Y as ga,M as Se,n as Me,Z as va,z as wa,k as Ft,a as se,g as ae,_ as fe,K as ya,L as ka,$ as li,h as $,a0 as yr,a1 as ss,a2 as Pe,t as ut,d as ft,q as qe,j as si,a3 as cl,a4 as as,B as ul,a5 as os,a6 as fl,a7 as hl,a8 as yt}from"../chunks/scheduler.Cm_C_nGF.js";import{S as ye,i as ke,a as j,t as V,g as Nn,c as Cn,b as oe,d as le,m as ce,e as ue,f as kt}from"../chunks/index.De5vRBfx.js";function Qt(t){return(t==null?void 0:t.length)!==void 0?t:Array.from(t)}function _t(t,n){const e={},i={},r={$$scope:1};let s=t.length;for(;s--;){const a=t[s],o=n[s];if(o){for(const u in a)u in o||(i[u]=1);for(const u in o)r[u]||(e[u]=o[u],r[u]=1);t[s]=o}else for(const u in a)r[u]=1}for(const a in i)a in e||(e[a]=void 0);return e}function Dt(t){return typeof t=="object"&&t!==null?t:{}}const Q=64;function kr(t,n){return()=>{t|=0,t=t+2654435769|0;let e=t^t>>>16;e=Math.imul(e,569420461),e=e^e>>>15,e=Math.imul(e,1935289751);const i=(e=e^e>>>15)>>>0;return n?i/4294967296:i}}function Ve(t,n,e,i){n=n*2654435761&2147483647,e=e*2246822519&2147483647,i=i*3266489917&2147483647,t=t*668265263&2147483647;let r=n^e^i^t;return r=r*374761393+2654435769,r^=r<<13,r^=r>>17,r^=r<<5,(r>>>0)/4294967296}function dl(t,n){n*=t.reduce((e,i)=>e+i,0);for(let e=0;e<t.length;e++)if(n-=t[e],n<=0)return e;throw new Error("Invalid weights")}function _l(t,n,e,i){let r=1/0,s=-1;for(let a=Math.floor(n)-1;a<Math.ceil(n)+1;a++)for(let o=Math.floor(e)-1;o<Math.ceil(e)+1;o++){const u=a+Ve(t,a,o,0)-.5,l=o+Ve(t,a,o,1)-.5,f=(u-n)**2+(l-e)**2;f<r&&(r=f,s=dl(i,Ve(t,a,o,2)))}if(s==-1)throw new Error("Voronoi noise error.");return s}function ls(t,n,e){function i(d,b,w){return(b-d)*((w*(w*6-15)+10)*w*w*w)+d}const r=(d,b)=>{const w=Ve(t,d,b,0);return{x:Math.cos(w),y:Math.sin(w)}},s=(d,b,w,y)=>{const S=r(d,b),v=w-d,D=y-b;return v*S.x+D*S.y},a=Math.floor(n),o=a+1,u=Math.floor(e),l=u+1,f=n-a,p=e-u;return i(i(s(a,u,n,e),s(o,u,n,e),f),i(s(a,l,n,e),s(o,l,n,e),f),p)}var Hi=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function ml(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var he={},pe={},mt={},an={},pt={},on={};const pl=4,cs=0,us=1,bl=2;function ln(t){let n=t.length;for(;--n>=0;)t[n]=0}const gl=0,Ea=1,vl=2,wl=3,yl=258,Er=29,Mn=256,En=Mn+1+Er,Kt=30,Tr=19,Ta=2*En+1,Lt=15,ji=16,kl=7,Ir=256,Ia=16,Sa=17,Pa=18,ar=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),ai=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),El=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),Aa=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),Tl=512,Et=new Array((En+2)*2);ln(Et);const wn=new Array(Kt*2);ln(wn);const Tn=new Array(Tl);ln(Tn);const In=new Array(yl-wl+1);ln(In);const Sr=new Array(Er);ln(Sr);const ci=new Array(Kt);ln(ci);function Zi(t,n,e,i,r){this.static_tree=t,this.extra_bits=n,this.extra_base=e,this.elems=i,this.max_length=r,this.has_stree=t&&t.length}let xa,Na,Ca;function Vi(t,n){this.dyn_tree=t,this.max_code=0,this.stat_desc=n}const Ma=t=>t<256?Tn[t]:Tn[256+(t>>>7)],Sn=(t,n)=>{t.pending_buf[t.pending++]=n&255,t.pending_buf[t.pending++]=n>>>8&255},Re=(t,n,e)=>{t.bi_valid>ji-e?(t.bi_buf|=n<<t.bi_valid&65535,Sn(t,t.bi_buf),t.bi_buf=n>>ji-t.bi_valid,t.bi_valid+=e-ji):(t.bi_buf|=n<<t.bi_valid&65535,t.bi_valid+=e)},ct=(t,n,e)=>{Re(t,e[n*2],e[n*2+1])},Da=(t,n)=>{let e=0;do e|=t&1,t>>>=1,e<<=1;while(--n>0);return e>>>1},Il=t=>{t.bi_valid===16?(Sn(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=t.bi_buf&255,t.bi_buf>>=8,t.bi_valid-=8)},Sl=(t,n)=>{const e=n.dyn_tree,i=n.max_code,r=n.stat_desc.static_tree,s=n.stat_desc.has_stree,a=n.stat_desc.extra_bits,o=n.stat_desc.extra_base,u=n.stat_desc.max_length;let l,f,p,m,d,b,w=0;for(m=0;m<=Lt;m++)t.bl_count[m]=0;for(e[t.heap[t.heap_max]*2+1]=0,l=t.heap_max+1;l<Ta;l++)f=t.heap[l],m=e[e[f*2+1]*2+1]+1,m>u&&(m=u,w++),e[f*2+1]=m,!(f>i)&&(t.bl_count[m]++,d=0,f>=o&&(d=a[f-o]),b=e[f*2],t.opt_len+=b*(m+d),s&&(t.static_len+=b*(r[f*2+1]+d)));if(w!==0){do{for(m=u-1;t.bl_count[m]===0;)m--;t.bl_count[m]--,t.bl_count[m+1]+=2,t.bl_count[u]--,w-=2}while(w>0);for(m=u;m!==0;m--)for(f=t.bl_count[m];f!==0;)p=t.heap[--l],!(p>i)&&(e[p*2+1]!==m&&(t.opt_len+=(m-e[p*2+1])*e[p*2],e[p*2+1]=m),f--)}},Oa=(t,n,e)=>{const i=new Array(Lt+1);let r=0,s,a;for(s=1;s<=Lt;s++)r=r+e[s-1]<<1,i[s]=r;for(a=0;a<=n;a++){let o=t[a*2+1];o!==0&&(t[a*2]=Da(i[o]++,o))}},Pl=()=>{let t,n,e,i,r;const s=new Array(Lt+1);for(e=0,i=0;i<Er-1;i++)for(Sr[i]=e,t=0;t<1<<ar[i];t++)In[e++]=i;for(In[e-1]=i,r=0,i=0;i<16;i++)for(ci[i]=r,t=0;t<1<<ai[i];t++)Tn[r++]=i;for(r>>=7;i<Kt;i++)for(ci[i]=r<<7,t=0;t<1<<ai[i]-7;t++)Tn[256+r++]=i;for(n=0;n<=Lt;n++)s[n]=0;for(t=0;t<=143;)Et[t*2+1]=8,t++,s[8]++;for(;t<=255;)Et[t*2+1]=9,t++,s[9]++;for(;t<=279;)Et[t*2+1]=7,t++,s[7]++;for(;t<=287;)Et[t*2+1]=8,t++,s[8]++;for(Oa(Et,En+1,s),t=0;t<Kt;t++)wn[t*2+1]=5,wn[t*2]=Da(t,5);xa=new Zi(Et,ar,Mn+1,En,Lt),Na=new Zi(wn,ai,0,Kt,Lt),Ca=new Zi(new Array(0),El,0,Tr,kl)},Ba=t=>{let n;for(n=0;n<En;n++)t.dyn_ltree[n*2]=0;for(n=0;n<Kt;n++)t.dyn_dtree[n*2]=0;for(n=0;n<Tr;n++)t.bl_tree[n*2]=0;t.dyn_ltree[Ir*2]=1,t.opt_len=t.static_len=0,t.sym_next=t.matches=0},$a=t=>{t.bi_valid>8?Sn(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0},fs=(t,n,e,i)=>{const r=n*2,s=e*2;return t[r]<t[s]||t[r]===t[s]&&i[n]<=i[e]},Yi=(t,n,e)=>{const i=t.heap[e];let r=e<<1;for(;r<=t.heap_len&&(r<t.heap_len&&fs(n,t.heap[r+1],t.heap[r],t.depth)&&r++,!fs(n,i,t.heap[r],t.depth));)t.heap[e]=t.heap[r],e=r,r<<=1;t.heap[e]=i},hs=(t,n,e)=>{let i,r,s=0,a,o;if(t.sym_next!==0)do i=t.pending_buf[t.sym_buf+s++]&255,i+=(t.pending_buf[t.sym_buf+s++]&255)<<8,r=t.pending_buf[t.sym_buf+s++],i===0?ct(t,r,n):(a=In[r],ct(t,a+Mn+1,n),o=ar[a],o!==0&&(r-=Sr[a],Re(t,r,o)),i--,a=Ma(i),ct(t,a,e),o=ai[a],o!==0&&(i-=ci[a],Re(t,i,o)));while(s<t.sym_next);ct(t,Ir,n)},or=(t,n)=>{const e=n.dyn_tree,i=n.stat_desc.static_tree,r=n.stat_desc.has_stree,s=n.stat_desc.elems;let a,o,u=-1,l;for(t.heap_len=0,t.heap_max=Ta,a=0;a<s;a++)e[a*2]!==0?(t.heap[++t.heap_len]=u=a,t.depth[a]=0):e[a*2+1]=0;for(;t.heap_len<2;)l=t.heap[++t.heap_len]=u<2?++u:0,e[l*2]=1,t.depth[l]=0,t.opt_len--,r&&(t.static_len-=i[l*2+1]);for(n.max_code=u,a=t.heap_len>>1;a>=1;a--)Yi(t,e,a);l=s;do a=t.heap[1],t.heap[1]=t.heap[t.heap_len--],Yi(t,e,1),o=t.heap[1],t.heap[--t.heap_max]=a,t.heap[--t.heap_max]=o,e[l*2]=e[a*2]+e[o*2],t.depth[l]=(t.depth[a]>=t.depth[o]?t.depth[a]:t.depth[o])+1,e[a*2+1]=e[o*2+1]=l,t.heap[1]=l++,Yi(t,e,1);while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],Sl(t,n),Oa(e,u,t.bl_count)},ds=(t,n,e)=>{let i,r=-1,s,a=n[0*2+1],o=0,u=7,l=4;for(a===0&&(u=138,l=3),n[(e+1)*2+1]=65535,i=0;i<=e;i++)s=a,a=n[(i+1)*2+1],!(++o<u&&s===a)&&(o<l?t.bl_tree[s*2]+=o:s!==0?(s!==r&&t.bl_tree[s*2]++,t.bl_tree[Ia*2]++):o<=10?t.bl_tree[Sa*2]++:t.bl_tree[Pa*2]++,o=0,r=s,a===0?(u=138,l=3):s===a?(u=6,l=3):(u=7,l=4))},_s=(t,n,e)=>{let i,r=-1,s,a=n[0*2+1],o=0,u=7,l=4;for(a===0&&(u=138,l=3),i=0;i<=e;i++)if(s=a,a=n[(i+1)*2+1],!(++o<u&&s===a)){if(o<l)do ct(t,s,t.bl_tree);while(--o!==0);else s!==0?(s!==r&&(ct(t,s,t.bl_tree),o--),ct(t,Ia,t.bl_tree),Re(t,o-3,2)):o<=10?(ct(t,Sa,t.bl_tree),Re(t,o-3,3)):(ct(t,Pa,t.bl_tree),Re(t,o-11,7));o=0,r=s,a===0?(u=138,l=3):s===a?(u=6,l=3):(u=7,l=4)}},Al=t=>{let n;for(ds(t,t.dyn_ltree,t.l_desc.max_code),ds(t,t.dyn_dtree,t.d_desc.max_code),or(t,t.bl_desc),n=Tr-1;n>=3&&t.bl_tree[Aa[n]*2+1]===0;n--);return t.opt_len+=3*(n+1)+5+5+4,n},xl=(t,n,e,i)=>{let r;for(Re(t,n-257,5),Re(t,e-1,5),Re(t,i-4,4),r=0;r<i;r++)Re(t,t.bl_tree[Aa[r]*2+1],3);_s(t,t.dyn_ltree,n-1),_s(t,t.dyn_dtree,e-1)},Nl=t=>{let n=4093624447,e;for(e=0;e<=31;e++,n>>>=1)if(n&1&&t.dyn_ltree[e*2]!==0)return cs;if(t.dyn_ltree[9*2]!==0||t.dyn_ltree[10*2]!==0||t.dyn_ltree[13*2]!==0)return us;for(e=32;e<Mn;e++)if(t.dyn_ltree[e*2]!==0)return us;return cs};let ms=!1;const Cl=t=>{ms||(Pl(),ms=!0),t.l_desc=new Vi(t.dyn_ltree,xa),t.d_desc=new Vi(t.dyn_dtree,Na),t.bl_desc=new Vi(t.bl_tree,Ca),t.bi_buf=0,t.bi_valid=0,Ba(t)},Ra=(t,n,e,i)=>{Re(t,(gl<<1)+(i?1:0),3),$a(t),Sn(t,e),Sn(t,~e),e&&t.pending_buf.set(t.window.subarray(n,n+e),t.pending),t.pending+=e},Ml=t=>{Re(t,Ea<<1,3),ct(t,Ir,Et),Il(t)},Dl=(t,n,e,i)=>{let r,s,a=0;t.level>0?(t.strm.data_type===bl&&(t.strm.data_type=Nl(t)),or(t,t.l_desc),or(t,t.d_desc),a=Al(t),r=t.opt_len+3+7>>>3,s=t.static_len+3+7>>>3,s<=r&&(r=s)):r=s=e+5,e+4<=r&&n!==-1?Ra(t,n,e,i):t.strategy===pl||s===r?(Re(t,(Ea<<1)+(i?1:0),3),hs(t,Et,wn)):(Re(t,(vl<<1)+(i?1:0),3),xl(t,t.l_desc.max_code+1,t.d_desc.max_code+1,a+1),hs(t,t.dyn_ltree,t.dyn_dtree)),Ba(t),i&&$a(t)},Ol=(t,n,e)=>(t.pending_buf[t.sym_buf+t.sym_next++]=n,t.pending_buf[t.sym_buf+t.sym_next++]=n>>8,t.pending_buf[t.sym_buf+t.sym_next++]=e,n===0?t.dyn_ltree[e*2]++:(t.matches++,n--,t.dyn_ltree[(In[e]+Mn+1)*2]++,t.dyn_dtree[Ma(n)*2]++),t.sym_next===t.sym_end);on._tr_init=Cl;on._tr_stored_block=Ra;on._tr_flush_block=Dl;on._tr_tally=Ol;on._tr_align=Ml;const Bl=(t,n,e,i)=>{let r=t&65535|0,s=t>>>16&65535|0,a=0;for(;e!==0;){a=e>2e3?2e3:e,e-=a;do r=r+n[i++]|0,s=s+r|0;while(--a);r%=65521,s%=65521}return r|s<<16|0};var La=Bl;const $l=()=>{let t,n=[];for(var e=0;e<256;e++){t=e;for(var i=0;i<8;i++)t=t&1?3988292384^t>>>1:t>>>1;n[e]=t}return n},Rl=new Uint32Array($l()),Ll=(t,n,e,i)=>{const r=Rl,s=i+e;t^=-1;for(let a=i;a<s;a++)t=t>>>8^r[(t^n[a])&255];return t^-1};var Ua=Ll,Pr={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},Vt={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:Ul,_tr_stored_block:lr,_tr_flush_block:zl,_tr_tally:Nt,_tr_align:Fl}=on,za=La,Pt=Ua,Hl=Pr,{Z_NO_FLUSH:Ct,Z_PARTIAL_FLUSH:jl,Z_FULL_FLUSH:Zl,Z_FINISH:Je,Z_BLOCK:ps,Z_OK:Ne,Z_STREAM_END:bs,Z_STREAM_ERROR:ht,Z_DATA_ERROR:Vl,Z_BUF_ERROR:Xi,Z_DEFAULT_COMPRESSION:Yl,Z_FILTERED:Xl,Z_HUFFMAN_ONLY:Kn,Z_RLE:Wl,Z_FIXED:Gl,Z_DEFAULT_STRATEGY:Kl,Z_UNKNOWN:ql,Z_DEFLATED:_i}=Vt,Jl=9,Ql=15,ec=8,tc=29,nc=256,cr=nc+1+tc,ic=30,rc=19,sc=2*cr+1,ac=15,ee=3,xt=258,dt=xt+ee+1,oc=32,en=42,Ar=57,ur=69,fr=73,hr=91,dr=103,Ut=113,gn=666,Be=1,cn=2,Ht=3,un=4,lc=3,zt=(t,n)=>(t.msg=Hl[n],n),gs=t=>t*2-(t>4?9:0),At=t=>{let n=t.length;for(;--n>=0;)t[n]=0},cc=t=>{let n,e,i,r=t.w_size;n=t.hash_size,i=n;do e=t.head[--i],t.head[i]=e>=r?e-r:0;while(--n);n=r,i=n;do e=t.prev[--i],t.prev[i]=e>=r?e-r:0;while(--n)};let uc=(t,n,e)=>(n<<t.hash_shift^e)&t.hash_mask,Mt=uc;const Ze=t=>{const n=t.state;let e=n.pending;e>t.avail_out&&(e=t.avail_out),e!==0&&(t.output.set(n.pending_buf.subarray(n.pending_out,n.pending_out+e),t.next_out),t.next_out+=e,n.pending_out+=e,t.total_out+=e,t.avail_out-=e,n.pending-=e,n.pending===0&&(n.pending_out=0))},Ye=(t,n)=>{zl(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,n),t.block_start=t.strstart,Ze(t.strm)},re=(t,n)=>{t.pending_buf[t.pending++]=n},pn=(t,n)=>{t.pending_buf[t.pending++]=n>>>8&255,t.pending_buf[t.pending++]=n&255},_r=(t,n,e,i)=>{let r=t.avail_in;return r>i&&(r=i),r===0?0:(t.avail_in-=r,n.set(t.input.subarray(t.next_in,t.next_in+r),e),t.state.wrap===1?t.adler=za(t.adler,n,r,e):t.state.wrap===2&&(t.adler=Pt(t.adler,n,r,e)),t.next_in+=r,t.total_in+=r,r)},Fa=(t,n)=>{let e=t.max_chain_length,i=t.strstart,r,s,a=t.prev_length,o=t.nice_match;const u=t.strstart>t.w_size-dt?t.strstart-(t.w_size-dt):0,l=t.window,f=t.w_mask,p=t.prev,m=t.strstart+xt;let d=l[i+a-1],b=l[i+a];t.prev_length>=t.good_match&&(e>>=2),o>t.lookahead&&(o=t.lookahead);do if(r=n,!(l[r+a]!==b||l[r+a-1]!==d||l[r]!==l[i]||l[++r]!==l[i+1])){i+=2,r++;do;while(l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&i<m);if(s=xt-(m-i),i=m-xt,s>a){if(t.match_start=n,a=s,s>=o)break;d=l[i+a-1],b=l[i+a]}}while((n=p[n&f])>u&&--e!==0);return a<=t.lookahead?a:t.lookahead},tn=t=>{const n=t.w_size;let e,i,r;do{if(i=t.window_size-t.lookahead-t.strstart,t.strstart>=n+(n-dt)&&(t.window.set(t.window.subarray(n,n+n-i),0),t.match_start-=n,t.strstart-=n,t.block_start-=n,t.insert>t.strstart&&(t.insert=t.strstart),cc(t),i+=n),t.strm.avail_in===0)break;if(e=_r(t.strm,t.window,t.strstart+t.lookahead,i),t.lookahead+=e,t.lookahead+t.insert>=ee)for(r=t.strstart-t.insert,t.ins_h=t.window[r],t.ins_h=Mt(t,t.ins_h,t.window[r+1]);t.insert&&(t.ins_h=Mt(t,t.ins_h,t.window[r+ee-1]),t.prev[r&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=r,r++,t.insert--,!(t.lookahead+t.insert<ee)););}while(t.lookahead<dt&&t.strm.avail_in!==0)},Ha=(t,n)=>{let e=t.pending_buf_size-5>t.w_size?t.w_size:t.pending_buf_size-5,i,r,s,a=0,o=t.strm.avail_in;do{if(i=65535,s=t.bi_valid+42>>3,t.strm.avail_out<s||(s=t.strm.avail_out-s,r=t.strstart-t.block_start,i>r+t.strm.avail_in&&(i=r+t.strm.avail_in),i>s&&(i=s),i<e&&(i===0&&n!==Je||n===Ct||i!==r+t.strm.avail_in)))break;a=n===Je&&i===r+t.strm.avail_in?1:0,lr(t,0,0,a),t.pending_buf[t.pending-4]=i,t.pending_buf[t.pending-3]=i>>8,t.pending_buf[t.pending-2]=~i,t.pending_buf[t.pending-1]=~i>>8,Ze(t.strm),r&&(r>i&&(r=i),t.strm.output.set(t.window.subarray(t.block_start,t.block_start+r),t.strm.next_out),t.strm.next_out+=r,t.strm.avail_out-=r,t.strm.total_out+=r,t.block_start+=r,i-=r),i&&(_r(t.strm,t.strm.output,t.strm.next_out,i),t.strm.next_out+=i,t.strm.avail_out-=i,t.strm.total_out+=i)}while(a===0);return o-=t.strm.avail_in,o&&(o>=t.w_size?(t.matches=2,t.window.set(t.strm.input.subarray(t.strm.next_in-t.w_size,t.strm.next_in),0),t.strstart=t.w_size,t.insert=t.strstart):(t.window_size-t.strstart<=o&&(t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,t.insert>t.strstart&&(t.insert=t.strstart)),t.window.set(t.strm.input.subarray(t.strm.next_in-o,t.strm.next_in),t.strstart),t.strstart+=o,t.insert+=o>t.w_size-t.insert?t.w_size-t.insert:o),t.block_start=t.strstart),t.high_water<t.strstart&&(t.high_water=t.strstart),a?un:n!==Ct&&n!==Je&&t.strm.avail_in===0&&t.strstart===t.block_start?cn:(s=t.window_size-t.strstart,t.strm.avail_in>s&&t.block_start>=t.w_size&&(t.block_start-=t.w_size,t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,s+=t.w_size,t.insert>t.strstart&&(t.insert=t.strstart)),s>t.strm.avail_in&&(s=t.strm.avail_in),s&&(_r(t.strm,t.window,t.strstart,s),t.strstart+=s,t.insert+=s>t.w_size-t.insert?t.w_size-t.insert:s),t.high_water<t.strstart&&(t.high_water=t.strstart),s=t.bi_valid+42>>3,s=t.pending_buf_size-s>65535?65535:t.pending_buf_size-s,e=s>t.w_size?t.w_size:s,r=t.strstart-t.block_start,(r>=e||(r||n===Je)&&n!==Ct&&t.strm.avail_in===0&&r<=s)&&(i=r>s?s:r,a=n===Je&&t.strm.avail_in===0&&i===r?1:0,lr(t,t.block_start,i,a),t.block_start+=i,Ze(t.strm)),a?Ht:Be)},Wi=(t,n)=>{let e,i;for(;;){if(t.lookahead<dt){if(tn(t),t.lookahead<dt&&n===Ct)return Be;if(t.lookahead===0)break}if(e=0,t.lookahead>=ee&&(t.ins_h=Mt(t,t.ins_h,t.window[t.strstart+ee-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),e!==0&&t.strstart-e<=t.w_size-dt&&(t.match_length=Fa(t,e)),t.match_length>=ee)if(i=Nt(t,t.strstart-t.match_start,t.match_length-ee),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=ee){t.match_length--;do t.strstart++,t.ins_h=Mt(t,t.ins_h,t.window[t.strstart+ee-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart;while(--t.match_length!==0);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=Mt(t,t.ins_h,t.window[t.strstart+1]);else i=Nt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(Ye(t,!1),t.strm.avail_out===0))return Be}return t.insert=t.strstart<ee-1?t.strstart:ee-1,n===Je?(Ye(t,!0),t.strm.avail_out===0?Ht:un):t.sym_next&&(Ye(t,!1),t.strm.avail_out===0)?Be:cn},Wt=(t,n)=>{let e,i,r;for(;;){if(t.lookahead<dt){if(tn(t),t.lookahead<dt&&n===Ct)return Be;if(t.lookahead===0)break}if(e=0,t.lookahead>=ee&&(t.ins_h=Mt(t,t.ins_h,t.window[t.strstart+ee-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=ee-1,e!==0&&t.prev_length<t.max_lazy_match&&t.strstart-e<=t.w_size-dt&&(t.match_length=Fa(t,e),t.match_length<=5&&(t.strategy===Xl||t.match_length===ee&&t.strstart-t.match_start>4096)&&(t.match_length=ee-1)),t.prev_length>=ee&&t.match_length<=t.prev_length){r=t.strstart+t.lookahead-ee,i=Nt(t,t.strstart-1-t.prev_match,t.prev_length-ee),t.lookahead-=t.prev_length-1,t.prev_length-=2;do++t.strstart<=r&&(t.ins_h=Mt(t,t.ins_h,t.window[t.strstart+ee-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart);while(--t.prev_length!==0);if(t.match_available=0,t.match_length=ee-1,t.strstart++,i&&(Ye(t,!1),t.strm.avail_out===0))return Be}else if(t.match_available){if(i=Nt(t,0,t.window[t.strstart-1]),i&&Ye(t,!1),t.strstart++,t.lookahead--,t.strm.avail_out===0)return Be}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=Nt(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<ee-1?t.strstart:ee-1,n===Je?(Ye(t,!0),t.strm.avail_out===0?Ht:un):t.sym_next&&(Ye(t,!1),t.strm.avail_out===0)?Be:cn},fc=(t,n)=>{let e,i,r,s;const a=t.window;for(;;){if(t.lookahead<=xt){if(tn(t),t.lookahead<=xt&&n===Ct)return Be;if(t.lookahead===0)break}if(t.match_length=0,t.lookahead>=ee&&t.strstart>0&&(r=t.strstart-1,i=a[r],i===a[++r]&&i===a[++r]&&i===a[++r])){s=t.strstart+xt;do;while(i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&r<s);t.match_length=xt-(s-r),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=ee?(e=Nt(t,1,t.match_length-ee),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(e=Nt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),e&&(Ye(t,!1),t.strm.avail_out===0))return Be}return t.insert=0,n===Je?(Ye(t,!0),t.strm.avail_out===0?Ht:un):t.sym_next&&(Ye(t,!1),t.strm.avail_out===0)?Be:cn},hc=(t,n)=>{let e;for(;;){if(t.lookahead===0&&(tn(t),t.lookahead===0)){if(n===Ct)return Be;break}if(t.match_length=0,e=Nt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,e&&(Ye(t,!1),t.strm.avail_out===0))return Be}return t.insert=0,n===Je?(Ye(t,!0),t.strm.avail_out===0?Ht:un):t.sym_next&&(Ye(t,!1),t.strm.avail_out===0)?Be:cn};function ot(t,n,e,i,r){this.good_length=t,this.max_lazy=n,this.nice_length=e,this.max_chain=i,this.func=r}const vn=[new ot(0,0,0,0,Ha),new ot(4,4,8,4,Wi),new ot(4,5,16,8,Wi),new ot(4,6,32,32,Wi),new ot(4,4,16,16,Wt),new ot(8,16,32,32,Wt),new ot(8,16,128,128,Wt),new ot(8,32,128,256,Wt),new ot(32,128,258,1024,Wt),new ot(32,258,258,4096,Wt)],dc=t=>{t.window_size=2*t.w_size,At(t.head),t.max_lazy_match=vn[t.level].max_lazy,t.good_match=vn[t.level].good_length,t.nice_match=vn[t.level].nice_length,t.max_chain_length=vn[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=ee-1,t.match_available=0,t.ins_h=0};function _c(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=_i,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(sc*2),this.dyn_dtree=new Uint16Array((2*ic+1)*2),this.bl_tree=new Uint16Array((2*rc+1)*2),At(this.dyn_ltree),At(this.dyn_dtree),At(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(ac+1),this.heap=new Uint16Array(2*cr+1),At(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(2*cr+1),At(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const Dn=t=>{if(!t)return 1;const n=t.state;return!n||n.strm!==t||n.status!==en&&n.status!==Ar&&n.status!==ur&&n.status!==fr&&n.status!==hr&&n.status!==dr&&n.status!==Ut&&n.status!==gn?1:0},ja=t=>{if(Dn(t))return zt(t,ht);t.total_in=t.total_out=0,t.data_type=ql;const n=t.state;return n.pending=0,n.pending_out=0,n.wrap<0&&(n.wrap=-n.wrap),n.status=n.wrap===2?Ar:n.wrap?en:Ut,t.adler=n.wrap===2?0:1,n.last_flush=-2,Ul(n),Ne},Za=t=>{const n=ja(t);return n===Ne&&dc(t.state),n},mc=(t,n)=>Dn(t)||t.state.wrap!==2?ht:(t.state.gzhead=n,Ne),Va=(t,n,e,i,r,s)=>{if(!t)return ht;let a=1;if(n===Yl&&(n=6),i<0?(a=0,i=-i):i>15&&(a=2,i-=16),r<1||r>Jl||e!==_i||i<8||i>15||n<0||n>9||s<0||s>Gl||i===8&&a!==1)return zt(t,ht);i===8&&(i=9);const o=new _c;return t.state=o,o.strm=t,o.status=en,o.wrap=a,o.gzhead=null,o.w_bits=i,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=r+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+ee-1)/ee),o.window=new Uint8Array(o.w_size*2),o.head=new Uint16Array(o.hash_size),o.prev=new Uint16Array(o.w_size),o.lit_bufsize=1<<r+6,o.pending_buf_size=o.lit_bufsize*4,o.pending_buf=new Uint8Array(o.pending_buf_size),o.sym_buf=o.lit_bufsize,o.sym_end=(o.lit_bufsize-1)*3,o.level=n,o.strategy=s,o.method=e,Za(t)},pc=(t,n)=>Va(t,n,_i,Ql,ec,Kl),bc=(t,n)=>{if(Dn(t)||n>ps||n<0)return t?zt(t,ht):ht;const e=t.state;if(!t.output||t.avail_in!==0&&!t.input||e.status===gn&&n!==Je)return zt(t,t.avail_out===0?Xi:ht);const i=e.last_flush;if(e.last_flush=n,e.pending!==0){if(Ze(t),t.avail_out===0)return e.last_flush=-1,Ne}else if(t.avail_in===0&&gs(n)<=gs(i)&&n!==Je)return zt(t,Xi);if(e.status===gn&&t.avail_in!==0)return zt(t,Xi);if(e.status===en&&e.wrap===0&&(e.status=Ut),e.status===en){let r=_i+(e.w_bits-8<<4)<<8,s=-1;if(e.strategy>=Kn||e.level<2?s=0:e.level<6?s=1:e.level===6?s=2:s=3,r|=s<<6,e.strstart!==0&&(r|=oc),r+=31-r%31,pn(e,r),e.strstart!==0&&(pn(e,t.adler>>>16),pn(e,t.adler&65535)),t.adler=1,e.status=Ut,Ze(t),e.pending!==0)return e.last_flush=-1,Ne}if(e.status===Ar){if(t.adler=0,re(e,31),re(e,139),re(e,8),e.gzhead)re(e,(e.gzhead.text?1:0)+(e.gzhead.hcrc?2:0)+(e.gzhead.extra?4:0)+(e.gzhead.name?8:0)+(e.gzhead.comment?16:0)),re(e,e.gzhead.time&255),re(e,e.gzhead.time>>8&255),re(e,e.gzhead.time>>16&255),re(e,e.gzhead.time>>24&255),re(e,e.level===9?2:e.strategy>=Kn||e.level<2?4:0),re(e,e.gzhead.os&255),e.gzhead.extra&&e.gzhead.extra.length&&(re(e,e.gzhead.extra.length&255),re(e,e.gzhead.extra.length>>8&255)),e.gzhead.hcrc&&(t.adler=Pt(t.adler,e.pending_buf,e.pending,0)),e.gzindex=0,e.status=ur;else if(re(e,0),re(e,0),re(e,0),re(e,0),re(e,0),re(e,e.level===9?2:e.strategy>=Kn||e.level<2?4:0),re(e,lc),e.status=Ut,Ze(t),e.pending!==0)return e.last_flush=-1,Ne}if(e.status===ur){if(e.gzhead.extra){let r=e.pending,s=(e.gzhead.extra.length&65535)-e.gzindex;for(;e.pending+s>e.pending_buf_size;){let o=e.pending_buf_size-e.pending;if(e.pending_buf.set(e.gzhead.extra.subarray(e.gzindex,e.gzindex+o),e.pending),e.pending=e.pending_buf_size,e.gzhead.hcrc&&e.pending>r&&(t.adler=Pt(t.adler,e.pending_buf,e.pending-r,r)),e.gzindex+=o,Ze(t),e.pending!==0)return e.last_flush=-1,Ne;r=0,s-=o}let a=new Uint8Array(e.gzhead.extra);e.pending_buf.set(a.subarray(e.gzindex,e.gzindex+s),e.pending),e.pending+=s,e.gzhead.hcrc&&e.pending>r&&(t.adler=Pt(t.adler,e.pending_buf,e.pending-r,r)),e.gzindex=0}e.status=fr}if(e.status===fr){if(e.gzhead.name){let r=e.pending,s;do{if(e.pending===e.pending_buf_size){if(e.gzhead.hcrc&&e.pending>r&&(t.adler=Pt(t.adler,e.pending_buf,e.pending-r,r)),Ze(t),e.pending!==0)return e.last_flush=-1,Ne;r=0}e.gzindex<e.gzhead.name.length?s=e.gzhead.name.charCodeAt(e.gzindex++)&255:s=0,re(e,s)}while(s!==0);e.gzhead.hcrc&&e.pending>r&&(t.adler=Pt(t.adler,e.pending_buf,e.pending-r,r)),e.gzindex=0}e.status=hr}if(e.status===hr){if(e.gzhead.comment){let r=e.pending,s;do{if(e.pending===e.pending_buf_size){if(e.gzhead.hcrc&&e.pending>r&&(t.adler=Pt(t.adler,e.pending_buf,e.pending-r,r)),Ze(t),e.pending!==0)return e.last_flush=-1,Ne;r=0}e.gzindex<e.gzhead.comment.length?s=e.gzhead.comment.charCodeAt(e.gzindex++)&255:s=0,re(e,s)}while(s!==0);e.gzhead.hcrc&&e.pending>r&&(t.adler=Pt(t.adler,e.pending_buf,e.pending-r,r))}e.status=dr}if(e.status===dr){if(e.gzhead.hcrc){if(e.pending+2>e.pending_buf_size&&(Ze(t),e.pending!==0))return e.last_flush=-1,Ne;re(e,t.adler&255),re(e,t.adler>>8&255),t.adler=0}if(e.status=Ut,Ze(t),e.pending!==0)return e.last_flush=-1,Ne}if(t.avail_in!==0||e.lookahead!==0||n!==Ct&&e.status!==gn){let r=e.level===0?Ha(e,n):e.strategy===Kn?hc(e,n):e.strategy===Wl?fc(e,n):vn[e.level].func(e,n);if((r===Ht||r===un)&&(e.status=gn),r===Be||r===Ht)return t.avail_out===0&&(e.last_flush=-1),Ne;if(r===cn&&(n===jl?Fl(e):n!==ps&&(lr(e,0,0,!1),n===Zl&&(At(e.head),e.lookahead===0&&(e.strstart=0,e.block_start=0,e.insert=0))),Ze(t),t.avail_out===0))return e.last_flush=-1,Ne}return n!==Je?Ne:e.wrap<=0?bs:(e.wrap===2?(re(e,t.adler&255),re(e,t.adler>>8&255),re(e,t.adler>>16&255),re(e,t.adler>>24&255),re(e,t.total_in&255),re(e,t.total_in>>8&255),re(e,t.total_in>>16&255),re(e,t.total_in>>24&255)):(pn(e,t.adler>>>16),pn(e,t.adler&65535)),Ze(t),e.wrap>0&&(e.wrap=-e.wrap),e.pending!==0?Ne:bs)},gc=t=>{if(Dn(t))return ht;const n=t.state.status;return t.state=null,n===Ut?zt(t,Vl):Ne},vc=(t,n)=>{let e=n.length;if(Dn(t))return ht;const i=t.state,r=i.wrap;if(r===2||r===1&&i.status!==en||i.lookahead)return ht;if(r===1&&(t.adler=za(t.adler,n,e,0)),i.wrap=0,e>=i.w_size){r===0&&(At(i.head),i.strstart=0,i.block_start=0,i.insert=0);let u=new Uint8Array(i.w_size);u.set(n.subarray(e-i.w_size,e),0),n=u,e=i.w_size}const s=t.avail_in,a=t.next_in,o=t.input;for(t.avail_in=e,t.next_in=0,t.input=n,tn(i);i.lookahead>=ee;){let u=i.strstart,l=i.lookahead-(ee-1);do i.ins_h=Mt(i,i.ins_h,i.window[u+ee-1]),i.prev[u&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=u,u++;while(--l);i.strstart=u,i.lookahead=ee-1,tn(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=ee-1,i.match_available=0,t.next_in=a,t.input=o,t.avail_in=s,i.wrap=r,Ne};pt.deflateInit=pc;pt.deflateInit2=Va;pt.deflateReset=Za;pt.deflateResetKeep=ja;pt.deflateSetHeader=mc;pt.deflate=bc;pt.deflateEnd=gc;pt.deflateSetDictionary=vc;pt.deflateInfo="pako deflate (from Nodeca project)";var mi={};const wc=(t,n)=>Object.prototype.hasOwnProperty.call(t,n);mi.assign=function(t){const n=Array.prototype.slice.call(arguments,1);for(;n.length;){const e=n.shift();if(e){if(typeof e!="object")throw new TypeError(e+"must be non-object");for(const i in e)wc(e,i)&&(t[i]=e[i])}}return t};mi.flattenChunks=t=>{let n=0;for(let i=0,r=t.length;i<r;i++)n+=t[i].length;const e=new Uint8Array(n);for(let i=0,r=0,s=t.length;i<s;i++){let a=t[i];e.set(a,r),r+=a.length}return e};var On={};let Ya=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{Ya=!1}const Pn=new Uint8Array(256);for(let t=0;t<256;t++)Pn[t]=t>=252?6:t>=248?5:t>=240?4:t>=224?3:t>=192?2:1;Pn[254]=Pn[254]=1;On.string2buf=t=>{if(typeof TextEncoder=="function"&&TextEncoder.prototype.encode)return new TextEncoder().encode(t);let n,e,i,r,s,a=t.length,o=0;for(r=0;r<a;r++)e=t.charCodeAt(r),(e&64512)===55296&&r+1<a&&(i=t.charCodeAt(r+1),(i&64512)===56320&&(e=65536+(e-55296<<10)+(i-56320),r++)),o+=e<128?1:e<2048?2:e<65536?3:4;for(n=new Uint8Array(o),s=0,r=0;s<o;r++)e=t.charCodeAt(r),(e&64512)===55296&&r+1<a&&(i=t.charCodeAt(r+1),(i&64512)===56320&&(e=65536+(e-55296<<10)+(i-56320),r++)),e<128?n[s++]=e:e<2048?(n[s++]=192|e>>>6,n[s++]=128|e&63):e<65536?(n[s++]=224|e>>>12,n[s++]=128|e>>>6&63,n[s++]=128|e&63):(n[s++]=240|e>>>18,n[s++]=128|e>>>12&63,n[s++]=128|e>>>6&63,n[s++]=128|e&63);return n};const yc=(t,n)=>{if(n<65534&&t.subarray&&Ya)return String.fromCharCode.apply(null,t.length===n?t:t.subarray(0,n));let e="";for(let i=0;i<n;i++)e+=String.fromCharCode(t[i]);return e};On.buf2string=(t,n)=>{const e=n||t.length;if(typeof TextDecoder=="function"&&TextDecoder.prototype.decode)return new TextDecoder().decode(t.subarray(0,n));let i,r;const s=new Array(e*2);for(r=0,i=0;i<e;){let a=t[i++];if(a<128){s[r++]=a;continue}let o=Pn[a];if(o>4){s[r++]=65533,i+=o-1;continue}for(a&=o===2?31:o===3?15:7;o>1&&i<e;)a=a<<6|t[i++]&63,o--;if(o>1){s[r++]=65533;continue}a<65536?s[r++]=a:(a-=65536,s[r++]=55296|a>>10&1023,s[r++]=56320|a&1023)}return yc(s,r)};On.utf8border=(t,n)=>{n=n||t.length,n>t.length&&(n=t.length);let e=n-1;for(;e>=0&&(t[e]&192)===128;)e--;return e<0||e===0?n:e+Pn[t[e]]>n?e:n};function kc(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}var Xa=kc;const yn=pt,Wa=mi,Ga=On,mr=Pr,Ec=Xa,Ka=Object.prototype.toString,{Z_NO_FLUSH:Tc,Z_SYNC_FLUSH:Ic,Z_FULL_FLUSH:Sc,Z_FINISH:Pc,Z_OK:ui,Z_STREAM_END:Ac,Z_DEFAULT_COMPRESSION:xc,Z_DEFAULT_STRATEGY:Nc,Z_DEFLATED:Cc}=Vt;function Bn(t){this.options=Wa.assign({level:xc,method:Cc,chunkSize:16384,windowBits:15,memLevel:8,strategy:Nc},t||{});let n=this.options;n.raw&&n.windowBits>0?n.windowBits=-n.windowBits:n.gzip&&n.windowBits>0&&n.windowBits<16&&(n.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Ec,this.strm.avail_out=0;let e=yn.deflateInit2(this.strm,n.level,n.method,n.windowBits,n.memLevel,n.strategy);if(e!==ui)throw new Error(mr[e]);if(n.header&&yn.deflateSetHeader(this.strm,n.header),n.dictionary){let i;if(typeof n.dictionary=="string"?i=Ga.string2buf(n.dictionary):Ka.call(n.dictionary)==="[object ArrayBuffer]"?i=new Uint8Array(n.dictionary):i=n.dictionary,e=yn.deflateSetDictionary(this.strm,i),e!==ui)throw new Error(mr[e]);this._dict_set=!0}}Bn.prototype.push=function(t,n){const e=this.strm,i=this.options.chunkSize;let r,s;if(this.ended)return!1;for(n===~~n?s=n:s=n===!0?Pc:Tc,typeof t=="string"?e.input=Ga.string2buf(t):Ka.call(t)==="[object ArrayBuffer]"?e.input=new Uint8Array(t):e.input=t,e.next_in=0,e.avail_in=e.input.length;;){if(e.avail_out===0&&(e.output=new Uint8Array(i),e.next_out=0,e.avail_out=i),(s===Ic||s===Sc)&&e.avail_out<=6){this.onData(e.output.subarray(0,e.next_out)),e.avail_out=0;continue}if(r=yn.deflate(e,s),r===Ac)return e.next_out>0&&this.onData(e.output.subarray(0,e.next_out)),r=yn.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===ui;if(e.avail_out===0){this.onData(e.output);continue}if(s>0&&e.next_out>0){this.onData(e.output.subarray(0,e.next_out)),e.avail_out=0;continue}if(e.avail_in===0)break}return!0};Bn.prototype.onData=function(t){this.chunks.push(t)};Bn.prototype.onEnd=function(t){t===ui&&(this.result=Wa.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};function xr(t,n){const e=new Bn(n);if(e.push(t,!0),e.err)throw e.msg||mr[e.err];return e.result}function Mc(t,n){return n=n||{},n.raw=!0,xr(t,n)}function Dc(t,n){return n=n||{},n.gzip=!0,xr(t,n)}an.Deflate=Bn;an.deflate=xr;an.deflateRaw=Mc;an.gzip=Dc;an.constants=Vt;var fn={},it={};const qn=16209,Oc=16191;var Bc=function(n,e){let i,r,s,a,o,u,l,f,p,m,d,b,w,y,S,v,D,T,O,Y,E,M,P,k;const U=n.state;i=n.next_in,P=n.input,r=i+(n.avail_in-5),s=n.next_out,k=n.output,a=s-(e-n.avail_out),o=s+(n.avail_out-257),u=U.dmax,l=U.wsize,f=U.whave,p=U.wnext,m=U.window,d=U.hold,b=U.bits,w=U.lencode,y=U.distcode,S=(1<<U.lenbits)-1,v=(1<<U.distbits)-1;e:do{b<15&&(d+=P[i++]<<b,b+=8,d+=P[i++]<<b,b+=8),D=w[d&S];t:for(;;){if(T=D>>>24,d>>>=T,b-=T,T=D>>>16&255,T===0)k[s++]=D&65535;else if(T&16){O=D&65535,T&=15,T&&(b<T&&(d+=P[i++]<<b,b+=8),O+=d&(1<<T)-1,d>>>=T,b-=T),b<15&&(d+=P[i++]<<b,b+=8,d+=P[i++]<<b,b+=8),D=y[d&v];n:for(;;){if(T=D>>>24,d>>>=T,b-=T,T=D>>>16&255,T&16){if(Y=D&65535,T&=15,b<T&&(d+=P[i++]<<b,b+=8,b<T&&(d+=P[i++]<<b,b+=8)),Y+=d&(1<<T)-1,Y>u){n.msg="invalid distance too far back",U.mode=qn;break e}if(d>>>=T,b-=T,T=s-a,Y>T){if(T=Y-T,T>f&&U.sane){n.msg="invalid distance too far back",U.mode=qn;break e}if(E=0,M=m,p===0){if(E+=l-T,T<O){O-=T;do k[s++]=m[E++];while(--T);E=s-Y,M=k}}else if(p<T){if(E+=l+p-T,T-=p,T<O){O-=T;do k[s++]=m[E++];while(--T);if(E=0,p<O){T=p,O-=T;do k[s++]=m[E++];while(--T);E=s-Y,M=k}}}else if(E+=p-T,T<O){O-=T;do k[s++]=m[E++];while(--T);E=s-Y,M=k}for(;O>2;)k[s++]=M[E++],k[s++]=M[E++],k[s++]=M[E++],O-=3;O&&(k[s++]=M[E++],O>1&&(k[s++]=M[E++]))}else{E=s-Y;do k[s++]=k[E++],k[s++]=k[E++],k[s++]=k[E++],O-=3;while(O>2);O&&(k[s++]=k[E++],O>1&&(k[s++]=k[E++]))}}else if(T&64){n.msg="invalid distance code",U.mode=qn;break e}else{D=y[(D&65535)+(d&(1<<T)-1)];continue n}break}}else if(T&64)if(T&32){U.mode=Oc;break e}else{n.msg="invalid literal/length code",U.mode=qn;break e}else{D=w[(D&65535)+(d&(1<<T)-1)];continue t}break}}while(i<r&&s<o);O=b>>3,i-=O,b-=O<<3,d&=(1<<b)-1,n.next_in=i,n.next_out=s,n.avail_in=i<r?5+(r-i):5-(i-r),n.avail_out=s<o?257+(o-s):257-(s-o),U.hold=d,U.bits=b};const Gt=15,vs=852,ws=592,ys=0,Gi=1,ks=2,$c=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),Rc=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),Lc=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),Uc=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),zc=(t,n,e,i,r,s,a,o)=>{const u=o.bits;let l=0,f=0,p=0,m=0,d=0,b=0,w=0,y=0,S=0,v=0,D,T,O,Y,E,M=null,P;const k=new Uint16Array(Gt+1),U=new Uint16Array(Gt+1);let z=null,K,ne,q;for(l=0;l<=Gt;l++)k[l]=0;for(f=0;f<i;f++)k[n[e+f]]++;for(d=u,m=Gt;m>=1&&k[m]===0;m--);if(d>m&&(d=m),m===0)return r[s++]=1<<24|64<<16|0,r[s++]=1<<24|64<<16|0,o.bits=1,0;for(p=1;p<m&&k[p]===0;p++);for(d<p&&(d=p),y=1,l=1;l<=Gt;l++)if(y<<=1,y-=k[l],y<0)return-1;if(y>0&&(t===ys||m!==1))return-1;for(U[1]=0,l=1;l<Gt;l++)U[l+1]=U[l]+k[l];for(f=0;f<i;f++)n[e+f]!==0&&(a[U[n[e+f]]++]=f);if(t===ys?(M=z=a,P=20):t===Gi?(M=$c,z=Rc,P=257):(M=Lc,z=Uc,P=0),v=0,f=0,l=p,E=s,b=d,w=0,O=-1,S=1<<d,Y=S-1,t===Gi&&S>vs||t===ks&&S>ws)return 1;for(;;){K=l-w,a[f]+1<P?(ne=0,q=a[f]):a[f]>=P?(ne=z[a[f]-P],q=M[a[f]-P]):(ne=96,q=0),D=1<<l-w,T=1<<b,p=T;do T-=D,r[E+(v>>w)+T]=K<<24|ne<<16|q|0;while(T!==0);for(D=1<<l-1;v&D;)D>>=1;if(D!==0?(v&=D-1,v+=D):v=0,f++,--k[l]===0){if(l===m)break;l=n[e+a[f]]}if(l>d&&(v&Y)!==O){for(w===0&&(w=d),E+=p,b=l-w,y=1<<b;b+w<m&&(y-=k[b+w],!(y<=0));)b++,y<<=1;if(S+=1<<b,t===Gi&&S>vs||t===ks&&S>ws)return 1;O=v&Y,r[O]=d<<24|b<<16|E-s|0}}return v!==0&&(r[E+v]=l-w<<24|64<<16|0),o.bits=d,0};var Fc=zc;const pr=La,lt=Ua,Hc=Bc,kn=Fc,jc=0,qa=1,Ja=2,{Z_FINISH:Es,Z_BLOCK:Zc,Z_TREES:Jn,Z_OK:jt,Z_STREAM_END:Vc,Z_NEED_DICT:Yc,Z_STREAM_ERROR:et,Z_DATA_ERROR:Qa,Z_MEM_ERROR:eo,Z_BUF_ERROR:Xc,Z_DEFLATED:Ts}=Vt,pi=16180,Is=16181,Ss=16182,Ps=16183,As=16184,xs=16185,Ns=16186,Cs=16187,Ms=16188,Ds=16189,fi=16190,wt=16191,Ki=16192,Os=16193,qi=16194,Bs=16195,$s=16196,Rs=16197,Ls=16198,Qn=16199,ei=16200,Us=16201,zs=16202,Fs=16203,Hs=16204,js=16205,Ji=16206,Zs=16207,Vs=16208,me=16209,to=16210,no=16211,Wc=852,Gc=592,Kc=15,qc=Kc,Ys=t=>(t>>>24&255)+(t>>>8&65280)+((t&65280)<<8)+((t&255)<<24);function Jc(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Yt=t=>{if(!t)return 1;const n=t.state;return!n||n.strm!==t||n.mode<pi||n.mode>no?1:0},io=t=>{if(Yt(t))return et;const n=t.state;return t.total_in=t.total_out=n.total=0,t.msg="",n.wrap&&(t.adler=n.wrap&1),n.mode=pi,n.last=0,n.havedict=0,n.flags=-1,n.dmax=32768,n.head=null,n.hold=0,n.bits=0,n.lencode=n.lendyn=new Int32Array(Wc),n.distcode=n.distdyn=new Int32Array(Gc),n.sane=1,n.back=-1,jt},ro=t=>{if(Yt(t))return et;const n=t.state;return n.wsize=0,n.whave=0,n.wnext=0,io(t)},so=(t,n)=>{let e;if(Yt(t))return et;const i=t.state;return n<0?(e=0,n=-n):(e=(n>>4)+5,n<48&&(n&=15)),n&&(n<8||n>15)?et:(i.window!==null&&i.wbits!==n&&(i.window=null),i.wrap=e,i.wbits=n,ro(t))},ao=(t,n)=>{if(!t)return et;const e=new Jc;t.state=e,e.strm=t,e.window=null,e.mode=pi;const i=so(t,n);return i!==jt&&(t.state=null),i},Qc=t=>ao(t,qc);let Xs=!0,Qi,er;const eu=t=>{if(Xs){Qi=new Int32Array(512),er=new Int32Array(32);let n=0;for(;n<144;)t.lens[n++]=8;for(;n<256;)t.lens[n++]=9;for(;n<280;)t.lens[n++]=7;for(;n<288;)t.lens[n++]=8;for(kn(qa,t.lens,0,288,Qi,0,t.work,{bits:9}),n=0;n<32;)t.lens[n++]=5;kn(Ja,t.lens,0,32,er,0,t.work,{bits:5}),Xs=!1}t.lencode=Qi,t.lenbits=9,t.distcode=er,t.distbits=5},oo=(t,n,e,i)=>{let r;const s=t.state;return s.window===null&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new Uint8Array(s.wsize)),i>=s.wsize?(s.window.set(n.subarray(e-s.wsize,e),0),s.wnext=0,s.whave=s.wsize):(r=s.wsize-s.wnext,r>i&&(r=i),s.window.set(n.subarray(e-i,e-i+r),s.wnext),i-=r,i?(s.window.set(n.subarray(e-i,e),0),s.wnext=i,s.whave=s.wsize):(s.wnext+=r,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=r))),0},tu=(t,n)=>{let e,i,r,s,a,o,u,l,f,p,m,d,b,w,y=0,S,v,D,T,O,Y,E,M;const P=new Uint8Array(4);let k,U;const z=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(Yt(t)||!t.output||!t.input&&t.avail_in!==0)return et;e=t.state,e.mode===wt&&(e.mode=Ki),a=t.next_out,r=t.output,u=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,l=e.hold,f=e.bits,p=o,m=u,M=jt;e:for(;;)switch(e.mode){case pi:if(e.wrap===0){e.mode=Ki;break}for(;f<16;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(e.wrap&2&&l===35615){e.wbits===0&&(e.wbits=15),e.check=0,P[0]=l&255,P[1]=l>>>8&255,e.check=lt(e.check,P,2,0),l=0,f=0,e.mode=Is;break}if(e.head&&(e.head.done=!1),!(e.wrap&1)||(((l&255)<<8)+(l>>8))%31){t.msg="incorrect header check",e.mode=me;break}if((l&15)!==Ts){t.msg="unknown compression method",e.mode=me;break}if(l>>>=4,f-=4,E=(l&15)+8,e.wbits===0&&(e.wbits=E),E>15||E>e.wbits){t.msg="invalid window size",e.mode=me;break}e.dmax=1<<e.wbits,e.flags=0,t.adler=e.check=1,e.mode=l&512?Ds:wt,l=0,f=0;break;case Is:for(;f<16;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(e.flags=l,(e.flags&255)!==Ts){t.msg="unknown compression method",e.mode=me;break}if(e.flags&57344){t.msg="unknown header flags set",e.mode=me;break}e.head&&(e.head.text=l>>8&1),e.flags&512&&e.wrap&4&&(P[0]=l&255,P[1]=l>>>8&255,e.check=lt(e.check,P,2,0)),l=0,f=0,e.mode=Ss;case Ss:for(;f<32;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}e.head&&(e.head.time=l),e.flags&512&&e.wrap&4&&(P[0]=l&255,P[1]=l>>>8&255,P[2]=l>>>16&255,P[3]=l>>>24&255,e.check=lt(e.check,P,4,0)),l=0,f=0,e.mode=Ps;case Ps:for(;f<16;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}e.head&&(e.head.xflags=l&255,e.head.os=l>>8),e.flags&512&&e.wrap&4&&(P[0]=l&255,P[1]=l>>>8&255,e.check=lt(e.check,P,2,0)),l=0,f=0,e.mode=As;case As:if(e.flags&1024){for(;f<16;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}e.length=l,e.head&&(e.head.extra_len=l),e.flags&512&&e.wrap&4&&(P[0]=l&255,P[1]=l>>>8&255,e.check=lt(e.check,P,2,0)),l=0,f=0}else e.head&&(e.head.extra=null);e.mode=xs;case xs:if(e.flags&1024&&(d=e.length,d>o&&(d=o),d&&(e.head&&(E=e.head.extra_len-e.length,e.head.extra||(e.head.extra=new Uint8Array(e.head.extra_len)),e.head.extra.set(i.subarray(s,s+d),E)),e.flags&512&&e.wrap&4&&(e.check=lt(e.check,i,d,s)),o-=d,s+=d,e.length-=d),e.length))break e;e.length=0,e.mode=Ns;case Ns:if(e.flags&2048){if(o===0)break e;d=0;do E=i[s+d++],e.head&&E&&e.length<65536&&(e.head.name+=String.fromCharCode(E));while(E&&d<o);if(e.flags&512&&e.wrap&4&&(e.check=lt(e.check,i,d,s)),o-=d,s+=d,E)break e}else e.head&&(e.head.name=null);e.length=0,e.mode=Cs;case Cs:if(e.flags&4096){if(o===0)break e;d=0;do E=i[s+d++],e.head&&E&&e.length<65536&&(e.head.comment+=String.fromCharCode(E));while(E&&d<o);if(e.flags&512&&e.wrap&4&&(e.check=lt(e.check,i,d,s)),o-=d,s+=d,E)break e}else e.head&&(e.head.comment=null);e.mode=Ms;case Ms:if(e.flags&512){for(;f<16;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(e.wrap&4&&l!==(e.check&65535)){t.msg="header crc mismatch",e.mode=me;break}l=0,f=0}e.head&&(e.head.hcrc=e.flags>>9&1,e.head.done=!0),t.adler=e.check=0,e.mode=wt;break;case Ds:for(;f<32;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}t.adler=e.check=Ys(l),l=0,f=0,e.mode=fi;case fi:if(e.havedict===0)return t.next_out=a,t.avail_out=u,t.next_in=s,t.avail_in=o,e.hold=l,e.bits=f,Yc;t.adler=e.check=1,e.mode=wt;case wt:if(n===Zc||n===Jn)break e;case Ki:if(e.last){l>>>=f&7,f-=f&7,e.mode=Ji;break}for(;f<3;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}switch(e.last=l&1,l>>>=1,f-=1,l&3){case 0:e.mode=Os;break;case 1:if(eu(e),e.mode=Qn,n===Jn){l>>>=2,f-=2;break e}break;case 2:e.mode=$s;break;case 3:t.msg="invalid block type",e.mode=me}l>>>=2,f-=2;break;case Os:for(l>>>=f&7,f-=f&7;f<32;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if((l&65535)!==(l>>>16^65535)){t.msg="invalid stored block lengths",e.mode=me;break}if(e.length=l&65535,l=0,f=0,e.mode=qi,n===Jn)break e;case qi:e.mode=Bs;case Bs:if(d=e.length,d){if(d>o&&(d=o),d>u&&(d=u),d===0)break e;r.set(i.subarray(s,s+d),a),o-=d,s+=d,u-=d,a+=d,e.length-=d;break}e.mode=wt;break;case $s:for(;f<14;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(e.nlen=(l&31)+257,l>>>=5,f-=5,e.ndist=(l&31)+1,l>>>=5,f-=5,e.ncode=(l&15)+4,l>>>=4,f-=4,e.nlen>286||e.ndist>30){t.msg="too many length or distance symbols",e.mode=me;break}e.have=0,e.mode=Rs;case Rs:for(;e.have<e.ncode;){for(;f<3;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}e.lens[z[e.have++]]=l&7,l>>>=3,f-=3}for(;e.have<19;)e.lens[z[e.have++]]=0;if(e.lencode=e.lendyn,e.lenbits=7,k={bits:e.lenbits},M=kn(jc,e.lens,0,19,e.lencode,0,e.work,k),e.lenbits=k.bits,M){t.msg="invalid code lengths set",e.mode=me;break}e.have=0,e.mode=Ls;case Ls:for(;e.have<e.nlen+e.ndist;){for(;y=e.lencode[l&(1<<e.lenbits)-1],S=y>>>24,v=y>>>16&255,D=y&65535,!(S<=f);){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(D<16)l>>>=S,f-=S,e.lens[e.have++]=D;else{if(D===16){for(U=S+2;f<U;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(l>>>=S,f-=S,e.have===0){t.msg="invalid bit length repeat",e.mode=me;break}E=e.lens[e.have-1],d=3+(l&3),l>>>=2,f-=2}else if(D===17){for(U=S+3;f<U;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}l>>>=S,f-=S,E=0,d=3+(l&7),l>>>=3,f-=3}else{for(U=S+7;f<U;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}l>>>=S,f-=S,E=0,d=11+(l&127),l>>>=7,f-=7}if(e.have+d>e.nlen+e.ndist){t.msg="invalid bit length repeat",e.mode=me;break}for(;d--;)e.lens[e.have++]=E}}if(e.mode===me)break;if(e.lens[256]===0){t.msg="invalid code -- missing end-of-block",e.mode=me;break}if(e.lenbits=9,k={bits:e.lenbits},M=kn(qa,e.lens,0,e.nlen,e.lencode,0,e.work,k),e.lenbits=k.bits,M){t.msg="invalid literal/lengths set",e.mode=me;break}if(e.distbits=6,e.distcode=e.distdyn,k={bits:e.distbits},M=kn(Ja,e.lens,e.nlen,e.ndist,e.distcode,0,e.work,k),e.distbits=k.bits,M){t.msg="invalid distances set",e.mode=me;break}if(e.mode=Qn,n===Jn)break e;case Qn:e.mode=ei;case ei:if(o>=6&&u>=258){t.next_out=a,t.avail_out=u,t.next_in=s,t.avail_in=o,e.hold=l,e.bits=f,Hc(t,m),a=t.next_out,r=t.output,u=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,l=e.hold,f=e.bits,e.mode===wt&&(e.back=-1);break}for(e.back=0;y=e.lencode[l&(1<<e.lenbits)-1],S=y>>>24,v=y>>>16&255,D=y&65535,!(S<=f);){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(v&&!(v&240)){for(T=S,O=v,Y=D;y=e.lencode[Y+((l&(1<<T+O)-1)>>T)],S=y>>>24,v=y>>>16&255,D=y&65535,!(T+S<=f);){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}l>>>=T,f-=T,e.back+=T}if(l>>>=S,f-=S,e.back+=S,e.length=D,v===0){e.mode=js;break}if(v&32){e.back=-1,e.mode=wt;break}if(v&64){t.msg="invalid literal/length code",e.mode=me;break}e.extra=v&15,e.mode=Us;case Us:if(e.extra){for(U=e.extra;f<U;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}e.length+=l&(1<<e.extra)-1,l>>>=e.extra,f-=e.extra,e.back+=e.extra}e.was=e.length,e.mode=zs;case zs:for(;y=e.distcode[l&(1<<e.distbits)-1],S=y>>>24,v=y>>>16&255,D=y&65535,!(S<=f);){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(!(v&240)){for(T=S,O=v,Y=D;y=e.distcode[Y+((l&(1<<T+O)-1)>>T)],S=y>>>24,v=y>>>16&255,D=y&65535,!(T+S<=f);){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}l>>>=T,f-=T,e.back+=T}if(l>>>=S,f-=S,e.back+=S,v&64){t.msg="invalid distance code",e.mode=me;break}e.offset=D,e.extra=v&15,e.mode=Fs;case Fs:if(e.extra){for(U=e.extra;f<U;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}e.offset+=l&(1<<e.extra)-1,l>>>=e.extra,f-=e.extra,e.back+=e.extra}if(e.offset>e.dmax){t.msg="invalid distance too far back",e.mode=me;break}e.mode=Hs;case Hs:if(u===0)break e;if(d=m-u,e.offset>d){if(d=e.offset-d,d>e.whave&&e.sane){t.msg="invalid distance too far back",e.mode=me;break}d>e.wnext?(d-=e.wnext,b=e.wsize-d):b=e.wnext-d,d>e.length&&(d=e.length),w=e.window}else w=r,b=a-e.offset,d=e.length;d>u&&(d=u),u-=d,e.length-=d;do r[a++]=w[b++];while(--d);e.length===0&&(e.mode=ei);break;case js:if(u===0)break e;r[a++]=e.length,u--,e.mode=ei;break;case Ji:if(e.wrap){for(;f<32;){if(o===0)break e;o--,l|=i[s++]<<f,f+=8}if(m-=u,t.total_out+=m,e.total+=m,e.wrap&4&&m&&(t.adler=e.check=e.flags?lt(e.check,r,m,a-m):pr(e.check,r,m,a-m)),m=u,e.wrap&4&&(e.flags?l:Ys(l))!==e.check){t.msg="incorrect data check",e.mode=me;break}l=0,f=0}e.mode=Zs;case Zs:if(e.wrap&&e.flags){for(;f<32;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(e.wrap&4&&l!==(e.total&4294967295)){t.msg="incorrect length check",e.mode=me;break}l=0,f=0}e.mode=Vs;case Vs:M=Vc;break e;case me:M=Qa;break e;case to:return eo;case no:default:return et}return t.next_out=a,t.avail_out=u,t.next_in=s,t.avail_in=o,e.hold=l,e.bits=f,(e.wsize||m!==t.avail_out&&e.mode<me&&(e.mode<Ji||n!==Es))&&oo(t,t.output,t.next_out,m-t.avail_out),p-=t.avail_in,m-=t.avail_out,t.total_in+=p,t.total_out+=m,e.total+=m,e.wrap&4&&m&&(t.adler=e.check=e.flags?lt(e.check,r,m,t.next_out-m):pr(e.check,r,m,t.next_out-m)),t.data_type=e.bits+(e.last?64:0)+(e.mode===wt?128:0)+(e.mode===Qn||e.mode===qi?256:0),(p===0&&m===0||n===Es)&&M===jt&&(M=Xc),M},nu=t=>{if(Yt(t))return et;let n=t.state;return n.window&&(n.window=null),t.state=null,jt},iu=(t,n)=>{if(Yt(t))return et;const e=t.state;return e.wrap&2?(e.head=n,n.done=!1,jt):et},ru=(t,n)=>{const e=n.length;let i,r,s;return Yt(t)||(i=t.state,i.wrap!==0&&i.mode!==fi)?et:i.mode===fi&&(r=1,r=pr(r,n,e,0),r!==i.check)?Qa:(s=oo(t,n,e,e),s?(i.mode=to,eo):(i.havedict=1,jt))};it.inflateReset=ro;it.inflateReset2=so;it.inflateResetKeep=io;it.inflateInit=Qc;it.inflateInit2=ao;it.inflate=tu;it.inflateEnd=nu;it.inflateGetHeader=iu;it.inflateSetDictionary=ru;it.inflateInfo="pako inflate (from Nodeca project)";function su(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var au=su;const Tt=it,lo=mi,br=On,gr=Pr,ou=Xa,lu=au,co=Object.prototype.toString,{Z_NO_FLUSH:cu,Z_FINISH:uu,Z_OK:An,Z_STREAM_END:tr,Z_NEED_DICT:nr,Z_STREAM_ERROR:fu,Z_DATA_ERROR:Ws,Z_MEM_ERROR:hu}=Vt;function $n(t){this.options=lo.assign({chunkSize:1024*64,windowBits:15,to:""},t||{});const n=this.options;n.raw&&n.windowBits>=0&&n.windowBits<16&&(n.windowBits=-n.windowBits,n.windowBits===0&&(n.windowBits=-15)),n.windowBits>=0&&n.windowBits<16&&!(t&&t.windowBits)&&(n.windowBits+=32),n.windowBits>15&&n.windowBits<48&&(n.windowBits&15||(n.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new ou,this.strm.avail_out=0;let e=Tt.inflateInit2(this.strm,n.windowBits);if(e!==An)throw new Error(gr[e]);if(this.header=new lu,Tt.inflateGetHeader(this.strm,this.header),n.dictionary&&(typeof n.dictionary=="string"?n.dictionary=br.string2buf(n.dictionary):co.call(n.dictionary)==="[object ArrayBuffer]"&&(n.dictionary=new Uint8Array(n.dictionary)),n.raw&&(e=Tt.inflateSetDictionary(this.strm,n.dictionary),e!==An)))throw new Error(gr[e])}$n.prototype.push=function(t,n){const e=this.strm,i=this.options.chunkSize,r=this.options.dictionary;let s,a,o;if(this.ended)return!1;for(n===~~n?a=n:a=n===!0?uu:cu,co.call(t)==="[object ArrayBuffer]"?e.input=new Uint8Array(t):e.input=t,e.next_in=0,e.avail_in=e.input.length;;){for(e.avail_out===0&&(e.output=new Uint8Array(i),e.next_out=0,e.avail_out=i),s=Tt.inflate(e,a),s===nr&&r&&(s=Tt.inflateSetDictionary(e,r),s===An?s=Tt.inflate(e,a):s===Ws&&(s=nr));e.avail_in>0&&s===tr&&e.state.wrap>0&&t[e.next_in]!==0;)Tt.inflateReset(e),s=Tt.inflate(e,a);switch(s){case fu:case Ws:case nr:case hu:return this.onEnd(s),this.ended=!0,!1}if(o=e.avail_out,e.next_out&&(e.avail_out===0||s===tr))if(this.options.to==="string"){let u=br.utf8border(e.output,e.next_out),l=e.next_out-u,f=br.buf2string(e.output,u);e.next_out=l,e.avail_out=i-l,l&&e.output.set(e.output.subarray(u,u+l),0),this.onData(f)}else this.onData(e.output.length===e.next_out?e.output:e.output.subarray(0,e.next_out));if(!(s===An&&o===0)){if(s===tr)return s=Tt.inflateEnd(this.strm),this.onEnd(s),this.ended=!0,!0;if(e.avail_in===0)break}}return!0};$n.prototype.onData=function(t){this.chunks.push(t)};$n.prototype.onEnd=function(t){t===An&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=lo.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};function Nr(t,n){const e=new $n(n);if(e.push(t),e.err)throw e.msg||gr[e.err];return e.result}function du(t,n){return n=n||{},n.raw=!0,Nr(t,n)}fn.Inflate=$n;fn.inflate=Nr;fn.inflateRaw=du;fn.ungzip=Nr;fn.constants=Vt;const{Deflate:_u,deflate:mu,deflateRaw:pu,gzip:bu}=an,{Inflate:gu,inflate:vu,inflateRaw:wu,ungzip:yu}=fn,ku=Vt;mt.Deflate=_u;mt.deflate=mu;mt.deflateRaw=pu;mt.gzip=bu;mt.Inflate=gu;mt.inflate=vu;mt.inflateRaw=wu;mt.ungzip=yu;mt.constants=ku;var Zt={};Object.defineProperty(Zt,"__esModule",{value:!0});Zt.IO=Zt.BitIO=void 0;const Eu=1024,Tu=1024;class uo{constructor(n=Eu){A(this,"length",0);A(this,"_pointer",0);typeof n=="number"?(this.length=0,this.buffer=new ArrayBuffer(n)):(this.length=n.byteLength,this.buffer=n)}set pointer(n){n>this.length&&(this.length=n),this._pointer=n}get pointer(){return this._pointer}get view(){return new DataView(this.buffer)}final(){return this.buffer.slice(0,this.length)}expect(n){if(this.buffer.byteLength<this.pointer+n){const e=new Uint8Array(this.buffer.byteLength+n+Tu);e.set(new Uint8Array(this.buffer),0),this.buffer=e.buffer}}}class Iu extends uo{getByte(){return this.view.getUint8(this.pointer++)}getBuffer(n){const e=this.buffer.slice(this.pointer,this.pointer+n);return this.pointer+=n,e}putByte(n){this.expect(1),this.view.setUint8(this.pointer++,n)}putBuffer(n){this.expect(n.byteLength),new Uint8Array(this.buffer).set(new Uint8Array(n),this.pointer),this.pointer+=n.byteLength}withholdByte(){const n=this.pointer++;return e=>this.view.setUint8(n,e)}}Zt.IO=Iu;class Su extends uo{constructor(){super(...arguments);A(this,"_bitPointer",0)}set pointer(e){this._bitPointer=0,super.pointer=e}get pointer(){return super.pointer}set bitPointer(e){e<8?this._bitPointer=e:(this.pointer+=e>>3,this._bitPointer=e&7)}get bitPointer(){return this._bitPointer}flush(){this.bitPointer!=0&&(this.bitPointer=0,this.pointer++)}final(){return this.flush(),super.final()}putBit(e){this.expect(1),this.view.setUint8(this.pointer,this.view.getUint8(this.pointer)|(e?1:0)<<this.bitPointer++)}getBit(){return!!(this.view.getUint8(this.pointer)&1<<this.bitPointer++)}putBits(e,i){for(let r=0;r<i;r++)this.putBit(!!(e>>r&1))}getBits(e){let i=0;for(let r=0;r<e;r++)i|=(this.getBit()?1:0)<<r;return i}}Zt.BitIO=Su;var de={};Object.defineProperty(de,"__esModule",{value:!0});de.decodeBigInt=ho;de.decodeIndex=Cu;de.encodeBigInt=fo;de.encodeIndex=Nu;de.hashStr=Pu;de.hex=Au;de.stringSort=xu;function Pu(t){let n=5381;for(let e=0;e<t.length;e++)n=(n<<5)+n^t.charCodeAt(e);return n>>>0}function Au(t,n,e="0x"){return e+t.toString(16).padStart(n*2,"0")}function xu(t,n){return(t>n?1:0)-(t<n?1:0)}function fo(t,n,e){const i=t<0n;if(i){if(!n)throw new Error("Cannot encode negative bigint when parser is not signed.");t=-t}for(n?(e.putByte(Number((t&0b00111111n)<<2n)|(i?2:0)|(t>0b00111111n?1:0)),t>>=6n):(e.putByte(Number((t&0b01111111n)<<1n)|(t>0b01111111n?1:0)),t>>=7n);t>0n;)e.putByte(Number((t&0b01111111n)<<1n)|(t>0b01111111n?1:0)),t>>=7n}function ho(t,n){let e=n.getByte(),i=t?BigInt(e&252)>>2n:BigInt(e&254)>>1n;const r=t?!!(e&2):!1;let s=t?6:7;for(;e&1;)e=n.getByte(),i|=BigInt((e&254)>>1)<<BigInt(s),s+=7;return r?-i:i}function Nu(t,n,e){if(e<0)throw new Error("EncodeIndex invalid length.");if(n<0||n>=e)throw new Error("EncodeIndex out of bounds.");if(!(e<=1)){if(e==2){t.bitField.putBit(n===1);return}fo(BigInt(n),!1,t.body)}}function Cu(t,n){if(n<0)throw new Error("DecodeIndex invalid length.");let e;if(n<=1?e=0:n==2?e=t.bitField.getBit()?1:0:e=Number(ho(!1,t.body)),e<0||e>=n)throw new Error("DecodeIndex out of bounds.");return e}var _o={exports:{}};(function(t,n){(function(e,i){t.exports=i()})(typeof self<"u"?self:typeof window<"u"?window:Hi,function(){var e="3.7.7",i=e,r=typeof Buffer=="function",s=typeof TextDecoder=="function"?new TextDecoder:void 0,a=typeof TextEncoder=="function"?new TextEncoder:void 0,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",u=Array.prototype.slice.call(o),l=function(I){var H={};return I.forEach(function(J,be){return H[J]=be}),H}(u),f=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,p=String.fromCharCode.bind(String),m=typeof Uint8Array.from=="function"?Uint8Array.from.bind(Uint8Array):function(I){return new Uint8Array(Array.prototype.slice.call(I,0))},d=function(I){return I.replace(/=/g,"").replace(/[+\/]/g,function(H){return H=="+"?"-":"_"})},b=function(I){return I.replace(/[^A-Za-z0-9\+\/]/g,"")},w=function(I){for(var H,J,be,ie,C="",W=I.length%3,Te=0;Te<I.length;){if((J=I.charCodeAt(Te++))>255||(be=I.charCodeAt(Te++))>255||(ie=I.charCodeAt(Te++))>255)throw new TypeError("invalid character found");H=J<<16|be<<8|ie,C+=u[H>>18&63]+u[H>>12&63]+u[H>>6&63]+u[H&63]}return W?C.slice(0,W-3)+"===".substring(W):C},y=typeof btoa=="function"?function(I){return btoa(I)}:r?function(I){return Buffer.from(I,"binary").toString("base64")}:w,S=r?function(I){return Buffer.from(I).toString("base64")}:function(I){for(var H=4096,J=[],be=0,ie=I.length;be<ie;be+=H)J.push(p.apply(null,I.subarray(be,be+H)));return y(J.join(""))},v=function(I,H){return H===void 0&&(H=!1),H?d(S(I)):S(I)},D=function(I){if(I.length<2){var H=I.charCodeAt(0);return H<128?I:H<2048?p(192|H>>>6)+p(128|H&63):p(224|H>>>12&15)+p(128|H>>>6&63)+p(128|H&63)}else{var H=65536+(I.charCodeAt(0)-55296)*1024+(I.charCodeAt(1)-56320);return p(240|H>>>18&7)+p(128|H>>>12&63)+p(128|H>>>6&63)+p(128|H&63)}},T=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,O=function(I){return I.replace(T,D)},Y=r?function(I){return Buffer.from(I,"utf8").toString("base64")}:a?function(I){return S(a.encode(I))}:function(I){return y(O(I))},E=function(I,H){return H===void 0&&(H=!1),H?d(Y(I)):Y(I)},M=function(I){return E(I,!0)},P=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,k=function(I){switch(I.length){case 4:var H=(7&I.charCodeAt(0))<<18|(63&I.charCodeAt(1))<<12|(63&I.charCodeAt(2))<<6|63&I.charCodeAt(3),J=H-65536;return p((J>>>10)+55296)+p((J&1023)+56320);case 3:return p((15&I.charCodeAt(0))<<12|(63&I.charCodeAt(1))<<6|63&I.charCodeAt(2));default:return p((31&I.charCodeAt(0))<<6|63&I.charCodeAt(1))}},U=function(I){return I.replace(P,k)},z=function(I){if(I=I.replace(/\s+/g,""),!f.test(I))throw new TypeError("malformed base64.");I+="==".slice(2-(I.length&3));for(var H,J="",be,ie,C=0;C<I.length;)H=l[I.charAt(C++)]<<18|l[I.charAt(C++)]<<12|(be=l[I.charAt(C++)])<<6|(ie=l[I.charAt(C++)]),J+=be===64?p(H>>16&255):ie===64?p(H>>16&255,H>>8&255):p(H>>16&255,H>>8&255,H&255);return J},K=typeof atob=="function"?function(I){return atob(b(I))}:r?function(I){return Buffer.from(I,"base64").toString("binary")}:z,ne=r?function(I){return m(Buffer.from(I,"base64"))}:function(I){return m(K(I).split("").map(function(H){return H.charCodeAt(0)}))},q=function(I){return ne(we(I))},_e=r?function(I){return Buffer.from(I,"base64").toString("utf8")}:s?function(I){return s.decode(ne(I))}:function(I){return U(K(I))},we=function(I){return b(I.replace(/[-_]/g,function(H){return H=="-"?"+":"/"}))},De=function(I){return _e(we(I))},He=function(I){if(typeof I!="string")return!1;var H=I.replace(/\s+/g,"").replace(/={0,2}$/,"");return!/[^\s0-9a-zA-Z\+/]/.test(H)||!/[^\s0-9a-zA-Z\-_]/.test(H)},te=function(I){return{value:I,enumerable:!1,writable:!0,configurable:!0}},Ce=function(){var I=function(H,J){return Object.defineProperty(String.prototype,H,te(J))};I("fromBase64",function(){return De(this)}),I("toBase64",function(H){return E(this,H)}),I("toBase64URI",function(){return E(this,!0)}),I("toBase64URL",function(){return E(this,!0)}),I("toUint8Array",function(){return q(this)})},je=function(){var I=function(H,J){return Object.defineProperty(Uint8Array.prototype,H,te(J))};I("toBase64",function(H){return v(this,H)}),I("toBase64URI",function(){return v(this,!0)}),I("toBase64URL",function(){return v(this,!0)})},It=function(){Ce(),je()},tt={version:e,VERSION:i,atob:K,atobPolyfill:z,btoa:y,btoaPolyfill:w,fromBase64:De,toBase64:E,encode:E,encodeURI:M,encodeURL:M,utob:O,btou:U,decode:De,isValid:He,fromUint8Array:v,toUint8Array:q,extendString:Ce,extendUint8Array:je,extendBuiltins:It};return tt.Base64={},Object.keys(tt).forEach(function(I){return tt.Base64[I]=tt[I]}),tt})})(_o);var Mu=_o.exports;Object.defineProperty(pe,"__esModule",{value:!0});pe.Parser=pe.EncodeContext=pe.DecodeContext=void 0;var mo=Du(mt),qt=Zt,oi=de,po=Mu;function Du(t){return t&&t.__esModule?t:{default:t}}function Ou(t){return mo.default.deflateRaw(t).buffer}function Bu(t){return mo.default.inflateRaw(t).buffer}function $u(t,n=!1){return po.Base64.fromUint8Array(new Uint8Array(t),n)}function Ru(t){return po.Base64.toUint8Array(t).buffer}class Lu{encode(n,e={}){const i=new vo(this,e);i.encode(this,n);const r=i.final();return e.base64??!1?$u(r,e.base64UrlSafe??!1):r}decode(n){return typeof n=="string"&&(n=Ru(n)),new wo(this,n).decode(this)}}pe.Parser=Lu;const bo=1,go=2;class vo{constructor(n,e={}){A(this,"stack",[]);A(this,"bitField",new qt.BitIO);A(this,"body",new qt.IO);this.baseType=n,this.compressed=e.compressed??!0,this.forceCompressed=e.forceCompressed??!1}compress(n){if(!this.compressed)return{compressed:!1,data:n};const e=Ou(n);return e.byteLength<n.byteLength||this.forceCompressed?{compressed:!0,data:e}:{compressed:!1,data:n}}final(){const n=new qt.IO;n.putBuffer(new Uint32Array([this.baseType.magic]).buffer);const e=n.withholdByte(),{compressed:i,data:r}=this.compress(this.bitField.final());(0,oi.encodeBigInt)(BigInt(r.byteLength),!1,n),n.putBuffer(r);const{compressed:s,data:a}=this.compress(this.body.final());return n.putBuffer(a),e((s?bo:0)|(i?go:0)),n.final()}encode(n,e){this.stack.push(n),n.encodeInternal(this,e),this.stack.pop()}}pe.EncodeContext=vo;class wo{constructor(n,e){A(this,"stack",[]);this.baseType=n;const i=new qt.IO(e),r=new Uint32Array(i.getBuffer(4))[0];if(r!=this.baseType.magic)throw new Error(`ParserContext magic check failed. Expected ${(0,oi.hex)(this.baseType.magic,4)} Got ${(0,oi.hex)(r,4)}`);const s=i.getByte(),a=Number((0,oi.decodeBigInt)(!1,i)),o=this.decompress(i.getBuffer(a),s&go);this.bitField=new qt.BitIO(o);const u=this.decompress(i.getBuffer(i.length-i.pointer),s&bo);this.body=new qt.IO(u)}decompress(n,e){return e?Bu(n):n}decode(n){this.stack.push(n);const e=n.decodeInternal(this);return this.stack.pop(),e}}pe.DecodeContext=wo;var bi={};Object.defineProperty(bi,"__esModule",{value:!0});bi.ModifyHashParser=void 0;var Uu=pe,zu=de;class Fu extends Uu.Parser{constructor(n,e){super(),this.modifier=n,this.parser=e,this.magic=(0,zu.hashStr)(`ModifyHashParser:${this.parser.magic}:${this.modifier}`)}encodeInternal(n,e){n.encode(this.parser,e)}decodeInternal(n){return n.decode(this.parser)}}bi.ModifyHashParser=Fu;var Ot={};Object.defineProperty(Ot,"__esModule",{value:!0});Ot.BigIntParser=void 0;var Hu=pe,ir=de;class ju extends Hu.Parser{constructor(n){super(),this.signed=n,this.magic=(0,ir.hashStr)(`BigIntParser:${this.signed?"Signed":"Unsigned"}`)}encodeInternal(n,e){(0,ir.encodeBigInt)(e,this.signed,n.body)}decodeInternal(n){return(0,ir.decodeBigInt)(this.signed,n.body)}}Ot.BigIntParser=ju;var Rn={};Object.defineProperty(Rn,"__esModule",{value:!0});Rn.BinaryParser=void 0;var Zu=pe,Vu=de,Gs=Ot;class Yu extends Zu.Parser{constructor(){super(...arguments);A(this,"magic",(0,Vu.hashStr)("BinaryParser"))}encodeInternal(e,i){e.encode(new Gs.BigIntParser(!1),BigInt(i.byteLength)),e.body.putBuffer(i)}decodeInternal(e){const i=Number(e.decode(new Gs.BigIntParser(!1)));return e.body.getBuffer(i)}}Rn.BinaryParser=Yu;var gi={};Object.defineProperty(gi,"__esModule",{value:!0});gi.NumberParser=void 0;var Xu=pe,Wu=de;class Gu extends Xu.Parser{constructor(n){super(),this.type=n,this.magic=(0,Wu.hashStr)(`NumberParser:${this.type}`)}encodeInternal(n,e){switch(n.body.expect(8),this.type){case"u8":n.body.view.setUint8(n.body.pointer,e),n.body.pointer+=1;break;case"u16":n.body.view.setUint16(n.body.pointer,e,!0),n.body.pointer+=2;break;case"u32":n.body.view.setUint32(n.body.pointer,e,!0),n.body.pointer+=4;break;case"u64":n.body.view.setBigUint64(n.body.pointer,e,!0),n.body.pointer+=8;break;case"i8":n.body.view.setInt8(n.body.pointer,e),n.body.pointer+=1;break;case"i16":n.body.view.setInt16(n.body.pointer,e,!0),n.body.pointer+=2;break;case"i32":n.body.view.setInt32(n.body.pointer,e,!0),n.body.pointer+=4;break;case"i64":n.body.view.setBigInt64(n.body.pointer,e,!0),n.body.pointer+=8;break;case"f32":n.body.view.setFloat32(n.body.pointer,e,!0),n.body.pointer+=4;break;case"f64":n.body.view.setFloat64(n.body.pointer,e,!0),n.body.pointer+=8;break;default:throw new Error("NumParser invalid type.")}}decodeInternal(n){let e;switch(this.type){case"u8":e=n.body.view.getUint8(n.body.pointer),n.body.pointer+=1;break;case"u16":e=n.body.view.getUint16(n.body.pointer,!0),n.body.pointer+=2;break;case"u32":e=n.body.view.getUint32(n.body.pointer,!0),n.body.pointer+=4;break;case"u64":e=n.body.view.getBigUint64(n.body.pointer,!0),n.body.pointer+=8;break;case"i8":e=n.body.view.getInt8(n.body.pointer),n.body.pointer+=1;break;case"i16":e=n.body.view.getInt16(n.body.pointer,!0),n.body.pointer+=2;break;case"i32":e=n.body.view.getInt32(n.body.pointer,!0),n.body.pointer+=4;break;case"i64":e=n.body.view.getBigInt64(n.body.pointer,!0),n.body.pointer+=8;break;case"f32":e=n.body.view.getFloat32(n.body.pointer,!0),n.body.pointer+=4;break;case"f64":e=n.body.view.getFloat64(n.body.pointer,!0),n.body.pointer+=8;break;default:throw new Error("NumParser invalid type.")}return e}}gi.NumberParser=Gu;var Ln={};Object.defineProperty(Ln,"__esModule",{value:!0});Ln.StringParser=void 0;var Ku=pe,qu=de,Ks=Rn;class Ju extends Ku.Parser{constructor(){super(...arguments);A(this,"magic",(0,qu.hashStr)("StringParser"))}encodeInternal(e,i){e.encode(new Ks.BinaryParser,new TextEncoder().encode(i))}decodeInternal(e){return new TextDecoder("utf-8").decode(e.decode(new Ks.BinaryParser))}}Ln.StringParser=Ju;var vi={};Object.defineProperty(vi,"__esModule",{value:!0});vi.BooleanParser=void 0;var Qu=pe,ef=de;class tf extends Qu.Parser{constructor(){super(...arguments);A(this,"magic",(0,ef.hashStr)("BooleanParser"))}encodeInternal(e,i){e.bitField.putBit(i)}decodeInternal(e){return e.bitField.getBit()}}vi.BooleanParser=tf;var wi={};Object.defineProperty(wi,"__esModule",{value:!0});wi.NullableParser=void 0;var nf=pe,rf=de;class sf extends nf.Parser{constructor(n){super(),this.type=n,this.magic=(0,rf.hashStr)(`NullableParser:${this.type.magic}`)}encodeInternal(n,e){e!==null?(n.bitField.putBit(!0),n.encode(this.type,e)):n.bitField.putBit(!1)}decodeInternal(n){return n.bitField.getBit()?n.decode(this.type):null}}wi.NullableParser=sf;var Un={};Object.defineProperty(Un,"__esModule",{value:!0});Un.ObjectParser=void 0;var af=pe,of=de;class lf extends af.Parser{constructor(n){super(),this.objType=n,this.keys=Object.keys(this.objType).toSorted(),this.magic=(0,of.hashStr)(`StringParser:${this.keys.map(e=>`${String(e)}-${this.objType[e].magic}`).join(",")}`)}encodeInternal(n,e){for(const i of this.keys)n.encode(this.objType[i],e[i])}decodeInternal(n){let e={};for(const i of this.keys)e[i]=n.decode(this.objType[i]);return e}}Un.ObjectParser=lf;var yi={};Object.defineProperty(yi,"__esModule",{value:!0});yi.ArrayParser=void 0;var cf=pe,uf=de,qs=Ot;class ff extends cf.Parser{constructor(n){super(),this.arrType=n,this.magic=(0,uf.hashStr)(`ArrayParser:${this.arrType.magic}`)}encodeInternal(n,e){n.encode(new qs.BigIntParser(!1),BigInt(e.length));for(const i of e)n.encode(this.arrType,i)}decodeInternal(n){const e=Number(n.decode(new qs.BigIntParser(!1))),i=[];for(let r=0;r<e;r++)i.push(n.decode(this.arrType));return i}}yi.ArrayParser=ff;var ki={};Object.defineProperty(ki,"__esModule",{value:!0});ki.MapParser=void 0;var hf=pe,df=de,Js=Ot;class _f extends hf.Parser{constructor(n,e){super(),this.keyType=n,this.valueType=e,this.magic=(0,df.hashStr)(`MapParser:${this.keyType.magic}-${this.valueType.magic}`)}encodeInternal(n,e){n.encode(new Js.BigIntParser(!1),BigInt(e.size));for(const[i,r]of e.entries())n.encode(this.keyType,i),n.encode(this.valueType,r)}decodeInternal(n){const e=new Map,i=Number(n.decode(new Js.BigIntParser(!1)));for(let r=0;r<i;r++){const s=n.decode(this.keyType),a=n.decode(this.valueType);e.set(s,a)}return e}}ki.MapParser=_f;var Ei={};Object.defineProperty(Ei,"__esModule",{value:!0});Ei.DateParser=void 0;var mf=pe,pf=de,Qs=Ot;class bf extends mf.Parser{constructor(){super(...arguments);A(this,"magic",(0,pf.hashStr)("DateParser"))}encodeInternal(e,i){e.encode(new Qs.BigIntParser(!1),BigInt(i.valueOf()))}decodeInternal(e){return new Date(Number(e.decode(new Qs.BigIntParser(!1))))}}Ei.DateParser=bf;var Ti={};Object.defineProperty(Ti,"__esModule",{value:!0});Ti.TupleParser=void 0;var gf=pe,vf=de;class wf extends gf.Parser{constructor(n){super(),this.elementTypes=n,this.magic=(0,vf.hashStr)(`TupleParser:${this.elementTypes.map(e=>e.magic).join(",")}`)}encodeInternal(n,e){for(let i=0;i<e.length;i++)n.encode(this.elementTypes[i],e[i])}decodeInternal(n){let e=[];for(let i=0;i<this.elementTypes.length;i++)e.push(n.decode(this.elementTypes[i]));return e}}Ti.TupleParser=wf;var Ii={};Object.defineProperty(Ii,"__esModule",{value:!0});Ii.BranchParser=void 0;var yf=pe,ti=de;class kf extends yf.Parser{constructor(n){super(),this.branchTypes=Object.entries(n).toSorted(([e],[i])=>(0,ti.stringSort)(e,i)),this.magic=(0,ti.hashStr)(`BranchParser:${this.branchTypes.map(([e,i])=>`${e}-${i.magic}`).join(",")}`)}encodeInternal(n,e){const i=this.branchTypes.findIndex(([r])=>r==e[0]);if(i===-1)throw new Error("BranchParser: Failed to find key index.");(0,ti.encodeIndex)(n,i,this.branchTypes.length),n.encode(this.branchTypes[i][1],e[1])}decodeInternal(n){const e=(0,ti.decodeIndex)(n,this.branchTypes.length);return[this.branchTypes[e][0],n.decode(this.branchTypes[e][1])]}}Ii.BranchParser=kf;var Si={};Object.defineProperty(Si,"__esModule",{value:!0});Si.BranchByKeyParser=void 0;var Ef=pe,ni=de,Tf=Un;class If extends Ef.Parser{constructor(n,e){super(),this.key=n,this.branchTypes=Object.entries(e).toSorted(([i],[r])=>(0,ni.stringSort)(i,r)).map(([i,r])=>{if(this.key in r)throw new Error(`BranchByKeyParser: Key is included in parser map, remove key ${i}.${this.key}`);return[i,new Tf.ObjectParser(r)]}),this.magic=(0,ni.hashStr)(`BranchByKeyParser:${this.key}:${this.branchTypes.map(([i,r])=>`${i}-${r.magic}`).join(",")}`)}encodeInternal(n,e){const i=this.branchTypes.findIndex(([r])=>r==e[this.key]);if(i===-1)throw new Error("BranchByKeyParser: Failed to find key index.");(0,ni.encodeIndex)(n,i,this.branchTypes.length),n.encode(this.branchTypes[i][1],e)}decodeInternal(n){const e=(0,ni.decodeIndex)(n,this.branchTypes.length);return{...n.decode(this.branchTypes[e][1]),[this.key]:this.branchTypes[e][0]}}}Si.BranchByKeyParser=If;var Pi={};Object.defineProperty(Pi,"__esModule",{value:!0});Pi.EnumParser=void 0;var Sf=pe,ii=de;class Pf extends Sf.Parser{constructor(n){super(),this.values=n.toSorted((e,i)=>(0,ii.stringSort)(String(e),String(i))),this.magic=(0,ii.hashStr)(`EnumParser:${this.values.join(",")}`)}encodeInternal(n,e){const i=this.values.findIndex(r=>r==e);if(i===-1)throw new Error("EnumParser: Failed to find key index.");(0,ii.encodeIndex)(n,i,this.values.length)}decodeInternal(n){const e=(0,ii.decodeIndex)(n,this.values.length);return this.values[e]}}Pi.EnumParser=Pf;var Ai={};Object.defineProperty(Ai,"__esModule",{value:!0});Ai.EnumFallbackParser=void 0;var Af=pe,ri=de,ea=Ln;class xf extends Af.Parser{constructor(n){super(),this.values=n.toSorted((e,i)=>(0,ri.stringSort)(e,i)),this.magic=(0,ri.hashStr)(`EnumFallbackParser:${this.values.join(",")}`)}encodeInternal(n,e){const i=this.values.findIndex(r=>r==e);i===-1?(n.bitField.putBit(!1),n.encode(new ea.StringParser,e)):(n.bitField.putBit(!0),(0,ri.encodeIndex)(n,i,this.values.length))}decodeInternal(n){if(n.bitField.getBit()){const e=(0,ri.decodeIndex)(n,this.values.length);return this.values[e]}else return n.decode(new ea.StringParser)}}Ai.EnumFallbackParser=xf;(function(t){Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ArrayParser",{enumerable:!0,get:function(){return m.ArrayParser}}),Object.defineProperty(t,"BigIntParser",{enumerable:!0,get:function(){return s.BigIntParser}}),Object.defineProperty(t,"BinaryParser",{enumerable:!0,get:function(){return a.BinaryParser}}),Object.defineProperty(t,"BitIO",{enumerable:!0,get:function(){return e.BitIO}}),Object.defineProperty(t,"BooleanParser",{enumerable:!0,get:function(){return l.BooleanParser}}),Object.defineProperty(t,"BranchByKeyParser",{enumerable:!0,get:function(){return S.BranchByKeyParser}}),Object.defineProperty(t,"BranchParser",{enumerable:!0,get:function(){return y.BranchParser}}),Object.defineProperty(t,"DateParser",{enumerable:!0,get:function(){return b.DateParser}}),Object.defineProperty(t,"DecodeContext",{enumerable:!0,get:function(){return n.DecodeContext}}),Object.defineProperty(t,"EncodeContext",{enumerable:!0,get:function(){return n.EncodeContext}}),Object.defineProperty(t,"EnumFallbackParser",{enumerable:!0,get:function(){return D.EnumFallbackParser}}),Object.defineProperty(t,"EnumParser",{enumerable:!0,get:function(){return v.EnumParser}}),Object.defineProperty(t,"IO",{enumerable:!0,get:function(){return e.IO}}),Object.defineProperty(t,"MapParser",{enumerable:!0,get:function(){return d.MapParser}}),Object.defineProperty(t,"ModifyHashParser",{enumerable:!0,get:function(){return r.ModifyHashParser}}),Object.defineProperty(t,"NullableParser",{enumerable:!0,get:function(){return f.NullableParser}}),Object.defineProperty(t,"NumberParser",{enumerable:!0,get:function(){return o.NumberParser}}),Object.defineProperty(t,"ObjectParser",{enumerable:!0,get:function(){return p.ObjectParser}}),Object.defineProperty(t,"Parser",{enumerable:!0,get:function(){return n.Parser}}),Object.defineProperty(t,"ParserType",{enumerable:!0,get:function(){return n.ParserType}}),Object.defineProperty(t,"StringParser",{enumerable:!0,get:function(){return u.StringParser}}),Object.defineProperty(t,"TupleParser",{enumerable:!0,get:function(){return w.TupleParser}}),t.array=z,t.bigint=O,t.binary=Y,t.boolean=P,t.branch=_e,t.branchByKey=we,t.date=ne,Object.defineProperty(t,"decodeBigInt",{enumerable:!0,get:function(){return i.decodeBigInt}}),Object.defineProperty(t,"decodeIndex",{enumerable:!0,get:function(){return i.decodeIndex}}),Object.defineProperty(t,"encodeBigInt",{enumerable:!0,get:function(){return i.encodeBigInt}}),Object.defineProperty(t,"encodeIndex",{enumerable:!0,get:function(){return i.encodeIndex}}),t.enum=De,t.enumFallback=He,Object.defineProperty(t,"hashStr",{enumerable:!0,get:function(){return i.hashStr}}),t.map=K,t.modifyhash=T,t.nullable=k,t.number=E,t.object=U,t.string=M,Object.defineProperty(t,"stringSort",{enumerable:!0,get:function(){return i.stringSort}}),t.tuple=q;var n=pe,e=Zt,i=de,r=bi,s=Ot,a=Rn,o=gi,u=Ln,l=vi,f=wi,p=Un,m=yi,d=ki,b=Ei,w=Ti,y=Ii,S=Si,v=Pi,D=Ai;function T(te,Ce){return new r.ModifyHashParser(te,Ce)}function O(te){return new s.BigIntParser(te)}function Y(){return new a.BinaryParser}function E(te){return new o.NumberParser(te)}function M(){return new u.StringParser}function P(){return new l.BooleanParser}function k(te){return new f.NullableParser(te)}function U(te){return new p.ObjectParser(te)}function z(te){return new m.ArrayParser(te)}function K(te,Ce){return new d.MapParser(te,Ce)}function ne(){return new b.DateParser}function q(te){return new w.TupleParser(te)}function _e(te){return new y.BranchParser(te)}function we(te,Ce){return new S.BranchByKeyParser(te,Ce)}function De(te){return new v.EnumParser(te)}function He(te){return new D.EnumFallbackParser(te)}})(he);function xi(t){return t<0?0:t>1?1:t}function Nf(t,n,e,i){return Math.sqrt((e-t)**2+(i-n)**2)}function Cf(t,n,e,i,r){return(t<n||t>e)&&console.warn(`Mapped value outside of mapping range. mapRange(${t}, ${n}, ${e}, ${i}, ${r})`),i+(t-n)/(e-n)*(r-i)}function Mf(t,n,e,i,r){return Math.floor(Cf(t,n,e,i,r+1))}function ta(t){let n=0;for(;t;)t&=t-1,n++;return n}function yo(t,n){if(t instanceof HTMLCanvasElement){const e=t.getContext("2d");if(!e)throw new Error("2d canvas context is not supported on this machine or browser.");return[t,e]}else if(t instanceof HTMLImageElement){const e=document.createElement("canvas");e.width=t.width,e.height=t.height;const i=e.getContext("2d");if(!i)throw new Error("2d canvas context is not supported on this machine or browser.");return[e,i]}else if(typeof t=="number"){const e=document.createElement("canvas");e.width=t,e.height=n;const i=e.getContext("2d");if(!i)throw new Error("2d canvas context is not supported on this machine or browser.");return[e,i]}else{const e=document.createElement("canvas"),i=e.getContext("2d");if(!i)throw new Error("2d canvas context is not supported on this machine or browser.");return[e,i]}}const nn=Symbol("TILE_NO_NEARBY");class ko{constructor(n,e,i){A(this,"world");A(this,"x");A(this,"y");A(this,"minesNearbyCache",null);this.world=n,this.x=e,this.y=i}minesNearby(n=!1){if(this.minesNearbyCache!==null&&n)return this.minesNearbyCache;let e=!0,i=0;for(const r of this.searchPattern)i+=this.world.getTile(this.x+r.x,this.y+r.y).numMines(),i!=0&&(e=!1);return this.minesNearbyCache=i==0&&e?nn:i,this.minesNearbyCache}flagsNearby(){let n=!0,e=0;for(const i of this.searchPattern)e+=this.world.getTile(this.x+i.x,this.y+i.y).numFlags(),e!=0&&(n=!1);return e==0&&n?nn:e}isDeathTile(){const n=this.world.getGeneratedChunk(Math.floor(this.x/Q),Math.floor(this.y/Q)),e=this.x-n.chunkX*Q,i=this.y-n.chunkY*Q;return n.deaths.some(r=>r.x==e&&r.y==i)}static load(n,e,i,r){throw new Error("Tile.load needs to be implemented on derived class.")}}class Eo extends ko{constructor(e,i,r,s){super(e,i,r);A(this,"_numMines");A(this,"_numFlags",0);A(this,"isRevealed",!1);A(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this._numMines=s}numMines(){return this._numMines}numFlags(){return this._numFlags}flag(){this.isRevealed||(this._numFlags++,this._numFlags%=this.numMaxMines+1)}reveal(){return this.isRevealed||this._numFlags>0?!1:(this._numMines==0?this.isRevealed=!0:this._numFlags=this._numMines,!0)}save(e){e.putBit(this.isRevealed),this.isRevealed||e.putBits(this._numFlags,ta(this.numMaxMines))}static loadInternal(e,i){return e.isRevealed=i.getBit(),e.isRevealed||(e._numFlags=i.getBits(ta(e.numMaxMines))),e}static load(e,i,r,s){throw new Error("MultiMineTile.load needs to be implemented on derived class.")}}class Cr extends Eo{constructor(e,i,r){const s=Ve(e.tileSeed,i,r,0)>.8?Mf(Ve(e.tileSeed,i,r,1),0,1,1,3):0;super(e,i,r,s);A(this,"type","blueberry");A(this,"numMaxMines",3)}static load(e,i,r,s){return this.loadInternal(new Cr(e,i,r),s)}}var Rt=(t=>(t[t.Covered=0]="Covered",t[t.Flagged=1]="Flagged",t[t.Revealed=2]="Revealed",t))(Rt||{});class zn extends ko{constructor(e,i,r,s){super(e,i,r);A(this,"isMine");A(this,"state",0);A(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this.isMine=s}numMines(){return this.isMine?1:0}numFlags(){return this.state==1?1:0}flag(){this.state!=2&&(this.state==0?this.state=1:this.state=0)}reveal(){return this.state!=0?!1:(this.isMine?this.state=1:this.state=2,!0)}save(e){this.isMine?e.putBit(this.state==1):e.putBits(this.state,2)}static loadInternal(e,i){return e.isMine?e.state=i.getBit()?1:0:e.state=i.getBits(2),e}static load(e,i,r,s){throw new Error("SingleMineTile.load needs to be implemented on derived class.")}}class Mr extends zn{constructor(e,i,r){const s=Ve(e.tileSeed,i,r,0)>.625;super(e,i,r,s);A(this,"type","chocolate")}static load(e,i,r,s){return this.loadInternal(new Mr(e,i,r),s)}}class Dr extends zn{constructor(e,i,r){const s=Ve(e.tileSeed,i,r,0)>.825;super(e,i,r,s);A(this,"type","strawberry");A(this,"secondaryNearbyCountModifier",null);A(this,"secondaryNearbyCountRightSide",!1);Ve(e.tileSeed,i,r,1)>.3&&(this.secondaryNearbyCountModifier=Ve(e.tileSeed,i,r,2)>.3?1:-1,this.secondaryNearbyCountRightSide=Ve(e.tileSeed,i,r,3)>.5)}secondaryMinesNearby(e){if(this.secondaryNearbyCountModifier==null)return null;const i=this.minesNearby(e);if(i==nn||i<1)return null;const r=i+this.secondaryNearbyCountModifier;return r<=0?null:r}static load(e,i,r,s){return this.loadInternal(new Dr(e,i,r),s)}}function To(t,n,e,i){const r=Math.floor(e/n),s=Math.floor(i/n),a=(r+s%2)%2==0,o=Math.abs(e%n)+Math.abs(i%n)*n,u=Math.floor(Ve(t.tileSeed,r,s,0)*n**2),l=a?o!=u:o==u;return{isDark:a,isMine:l}}class Or extends zn{constructor(e,i,r){const{isDark:s,isMine:a}=To(e,2,i,r);super(e,i,r,a);A(this,"type","waffle");A(this,"isDark");this.isDark=s}static load(e,i,r,s){return this.loadInternal(new Or(e,i,r),s)}}class Br extends zn{constructor(e,i,r){const{isDark:s,isMine:a}=To(e,3,i,r);super(e,i,r,a);A(this,"type","stroopwafel");A(this,"isDark");this.isDark=s}static load(e,i,r,s){return this.loadInternal(new Br(e,i,r),s)}}class $r extends zn{constructor(e,i,r){const s=Ve(e.tileSeed,i,r,0)>.85;super(e,i,r,s);A(this,"type","vanilla")}static load(e,i,r,s){return this.loadInternal(new $r(e,i,r),s)}}const Df={type:"collection",weight:1,scale:24,smoothness:.8,biomes:[{type:"collection",weight:5,scale:24,smoothness:.8,biomes:[{type:"biome",weight:3,tile:$r},{type:"biome",weight:1,tile:Mr}]},{type:"collection",weight:2,scale:64,smoothness:0,biomes:[{type:"biome",weight:1,tile:Or},{type:"biome",weight:2,tile:Br}]},{type:"collection",weight:2,scale:32,smoothness:.5,biomes:[{type:"biome",weight:1,tile:Cr},{type:"biome",weight:1,tile:Dr}]}]};function Of(t,n,e,i,r){const s=kr(t,!1),a=ls(s(),n,e)*i,o=ls(s(),n,e)*i;return _l(s(),n+a,e+o,r)}function Io(t,n,e){const i=kr(t.biomeSeed,!1);let r=Df;for(;r.type=="collection";){const s=Of(i(),n/r.scale,e/r.scale,r.smoothness,r.biomes.map(a=>a.weight));r=r.biomes[s]}return r.tile}function So(t,n,e){const i=Io(t,n,e);return new i(t,n,e)}class Po{constructor(n,e,i){A(this,"world");A(this,"chunkX");A(this,"chunkY");this.world=n,this.chunkX=e,this.chunkY=i}isGenerated(){return this instanceof rn}generate(){if(this.isGenerated())throw new Error("Cannot generate an already generated chunk.");console.log(`Generating new chunk: ${this.chunkX}, ${this.chunkY}`);const n=[];for(let e=0;e<Q;e++)for(let i=0;i<Q;i++){const r=this.world.generateTile(this.chunkX*Q+i,this.chunkY*Q+e);n.push(r)}return new rn(this.world,this.chunkX,this.chunkY,n)}}class rn extends Po{constructor(e,i,r,s){super(e,i,r);A(this,"tiles");A(this,"deaths",[]);if(this.tiles=s,this.tiles.length!=Q*Q)throw new Error("GeneratedChunk incorrect tiles length.")}getTileAbsolute(e,i){return this.getTile(e-this.chunkX*Q,i-this.chunkY*Q)}getTile(e,i){return this.tiles[e+i*Q]}resetTileAbsolute(e,i){return this.resetTile(e-this.chunkX*Q,i-this.chunkY*Q)}resetTile(e,i){this.tiles[e+i*Q]=So(this.world,this.chunkX*Q+e,this.chunkY*Q+i)}encodeTiles(){const e=new he.BitIO(2048);for(const i of this.tiles)i.save(e);return e.final()}static decodeTiles(e,i,r,s){const a=new he.BitIO(s);let o=[];for(let u=0;u<Q;u++)for(let l=0;l<Q;l++){const f=i*Q+l,p=r*Q+u,d=Io(e,f,p).load(e,f,p,a);o.push(d)}return new rn(e,i,r,o)}save(){return{deaths:this.deaths,tiles:this.encodeTiles()}}static load(e,i,r,s){const a=rn.decodeTiles(e,i,r,s.tiles);return a.deaths=s.deaths,a}}let Bf=0;function $f(){return Bf++}class Ao{constructor(){A(this,"_dispatcherDestroyed",!1);A(this,"listeners",{})}get dispatcherDestroyed(){return this._dispatcherDestroyed}dispatcherCheckDestroyed(){if(this.dispatcherDestroyed)throw new Error("EventDispatcher used after destroyed.")}getListenersArr(n){return this.listeners[n]||(this.listeners[n]=[]),this.listeners[n]}*listenersIter(){for(const n in this.listeners){const e=this.listeners[n];for(const i of e)yield i}}addEventListener(n,e,i=!1,r=0){this.dispatcherCheckDestroyed();let s=this.getListenersArr(n);const a={key:n,callbackfn:e,priority:r,id:$f(),once:i};return s.push(a),s.sort((o,u)=>o.priority-u.priority),a}dispatchEvent(n,e){this.dispatcherCheckDestroyed();const i=this.getListenersArr(n);for(const r of i){let s=!1;if(r.callbackfn({data:e,dispatcher:this,listener:r,stopPropagation:()=>s=!0}),r.once&&this.removeEventListener(r),s)break}}removeEventListener(n){this.dispatcherCheckDestroyed();let e=!1;if(typeof n!="number"){const i=this.getListenersArr(n.key);for(const r of i)r.id==n.id&&(i.splice(i.indexOf(r),1),e=!0)}else for(const i of this.listenersIter())i.id==n&&this.removeEventListener(i)&&(e=!0);return e}destroyDispatcher(){this.dispatcherCheckDestroyed(),this._dispatcherDestroyed=!0;for(const n in this.listeners)delete this.listeners[n]}}function*Rf(t,n){let e=t,i=n,r=1,s=1;for(;;){for(;2*e*r<s;)yield{x:e,y:i},e+=r;for(;2*i*r<s;)yield{x:e,y:i},i+=r;r=-1*r,s+=1}}class Ni extends Ao{constructor(e){super();A(this,"seed");A(this,"tileSeed");A(this,"biomeSeed");A(this,"createdAt",new Date);A(this,"deaths",0);A(this,"chunks",{});A(this,"_revealCount",0);A(this,"_died",!1);this.seed=(e&4294967295)>>>0;const i=kr(this.seed,!1);this.tileSeed=i(),this.biomeSeed=i(),this.addEventListener("die",({data:{x:r,y:s}})=>{this.deaths++;const a=this.getGeneratedChunk(Math.floor(r/Q),Math.floor(s/Q));a.deaths.push({x:r-a.chunkX*Q,y:s-a.chunkY*Q,diedAt:new Date})})}change(){this.dispatchEvent("change",null)}generateTile(e,i){return So(this,e,i)}getChunk(e,i){const r=this.chunks[`${e},${i}`];return r||new Po(this,e,i)}getGeneratedChunk(e,i){const r=this.getChunk(e,i);if(r.isGenerated())return r;const s=r.generate();return this.chunks[`${e},${i}`]=s,s}getTile(e,i){const r=Math.floor(e/Q),s=Math.floor(i/Q);return this.getGeneratedChunk(r,s).getTileAbsolute(e,i)}flag(e,i){const r=this.getTile(e,i);if(r.isDeathTile())return;const s=r.numFlags();r.flag();const a=r.numFlags();a==0&&a!=s&&(this.dispatchEvent("particle_unflag",{x:e,y:i}),this.dispatchEvent("sound_unflag",null))}_reveal(e,i){const r=this.getTile(e,i);if(r.reveal())if(this._revealCount++,r.numMines()>0){this._died=!0,this.dispatchEvent("particle_explosion",{x:r.x,y:r.y}),this.dispatchEvent("die",{x:r.x,y:r.y});return}else this.dispatchEvent("particle_reveal",{x:r.x,y:r.y});let s=[],a=[];if(r.type=="strawberry"){const o=r.secondaryMinesNearby(!1);o!=null&&o==r.flagsNearby()&&a.push(r)}for(r.minesNearby()==r.flagsNearby()&&(a.includes(r)||a.push(r));a.length>0;){const o=a.pop();s.push(o);for(const u of o.searchPattern){const l=this.getTile(o.x+u.x,o.y+u.y);a.some(f=>f.x==l.x&&f.y==l.y)||s.some(f=>f.x==l.x&&f.y==l.y)||(l.minesNearby()==nn?a.push(l):s.push(l))}}for(const o of s)o.reveal()&&(this._revealCount++,o.numMines()!=0?(this._died=!0,this.dispatchEvent("particle_explosion",{x:o.x,y:o.y}),this.dispatchEvent("die",{x:o.x,y:o.y})):this.dispatchEvent("particle_reveal",{x:o.x,y:o.y}))}reveal(e,i){return this._revealCount=0,this._died=!1,this._reveal(e,i),this._revealCount>0&&this.dispatchEvent("sound_reveal",this._revealCount),this._died&&this.dispatchEvent("sound_explosion",null),this._died}reset(e,i){const r=this.getChunk(Math.floor(e/Q),Math.floor(i/Q));r.isGenerated()&&r.resetTileAbsolute(e,i)}closest0(e,i){for(const{x:r,y:s}of Rf(e,i)){const a=this.getTile(r,s);if(a.numMines()==0&&a.minesNearby()==nn)return{x:r,y:s}}throw new Error("This error should never happen, it's just here to make TypeScript happy.")}save(){const e={seed:this.seed,createdAt:this.createdAt,numDeaths:this.deaths,chunks:new Map};for(const i in this.chunks){const r=i,s=this.chunks[r];e.chunks.set(r,s.save())}return e}static load(e){const i=new Ni(e.seed);return i.createdAt=e.createdAt,i.deaths=e.numDeaths,e.chunks.forEach((r,s)=>{const a=s,[o,u,l]=a.match(/^(-?\d+),(-?\d+)$/),[f,p]=[parseInt(u),parseInt(l)];i.chunks[a]=rn.load(i,f,p,r)}),i}}class Rr extends Ao{constructor(e,i){super();A(this,"world");A(this,"x",0);A(this,"y",0);A(this,"scale",64);this.world=e,i&&this.load(i)}change(){this.dispatchEvent("change",null)}load(e){this.x=e.x,this.y=e.y,this.scale=e.scale}save(){return{x:this.x,y:this.y,scale:this.scale}}translate(e,i,r){this.x-=i/this.scale,this.y-=r/this.scale}scaleFrom(e,i,r,s){const a=this.x+e.width/this.scale*(r/e.width-.5),o=this.y+e.height/this.scale*(s/e.height-.5);this.scale=i;const u=this.x+e.width/this.scale*(r/e.width-.5),l=this.y+e.height/this.scale*(s/e.height-.5);this.x-=u-a,this.y-=l-o}clampScale(e,i,r,s){return e.width/i<r&&(i=e.width/r),e.height/i<r&&(i=e.height/r),e.width/i>s&&(i=e.width/s),e.height/i>s&&(i=e.height/s),i}bounds(e,i,r=0){const s=this.x-e.width/this.scale/2-r,a=this.y-e.height/this.scale/2-r,o=this.x+e.width/this.scale/2+r,u=this.y+e.height/this.scale/2+r;return i?{minX:Math.floor(s),minY:Math.floor(a),maxX:Math.ceil(o),maxY:Math.ceil(u)}:{minX:s,minY:a,maxX:o,maxY:u}}inBounds(e,i,r,s=0){const a=this.bounds(e,!1,s);return i>=a.minX&&i<=a.maxX&&r>=a.minY&&r<=a.maxY}canvasPos(e,i,r,s){const a=(i-e.width/2)/this.scale+this.x,o=(r-e.height/2)/this.scale+this.y;return s?{x:Math.floor(a),y:Math.floor(o)}:{x:a,y:o}}transformCtx(e,i){i.translate(e.width/2,e.height/2),i.scale(this.scale,this.scale),i.translate(-this.x,-this.y)}forEachTileInViewport(e,i,r=0){const s=this.bounds(e,!0,r);for(let a=s.minX;a<s.maxX;a++)for(let o=s.minY;o<s.maxY;o++){const u=this.world.getTile(a,o);i(u)}}forEachChunkInViewport(e,i,r=0){const s=this.bounds(e,!0,r);s.minX=Math.floor(s.minX/Q),s.minY=Math.floor(s.minY/Q),s.maxX=Math.ceil(s.maxX/Q),s.maxY=Math.ceil(s.maxY/Q);for(let a=s.minX;a<s.maxX;a++)for(let o=s.minY;o<s.maxY;o++){const u=this.world.getChunk(a,o);u.isGenerated()&&i(u)}}}function Lf(t,n){console.log("Loaded new world"),n&&localStorage.setItem(t,"PLACEHOLDER");const e=new Ni(Math.floor(Math.random()*4294967295)),i=e.closest0(0,0);return e.reveal(i.x,i.y),{world:e,spawnX:i.x,spawnY:i.y}}function na(t,n){const{world:e,spawnX:i,spawnY:r}=Lf(t,n),s=new Rr(e,{x:i,y:r,scale:48});return console.log(s),{world:e,viewport:s,bookmarks:[{name:"Spawn",createdAt:new Date,viewport:s.save()}]}}function Uf(t){const n=localStorage.getItem(t);if(n){console.log("Loaded saved world");try{const e=xo.decode(n),i=Ni.load(e.world),r=new Rr(i,e.viewport);return{world:i,viewport:r,bookmarks:e.bookmarks}}catch(e){return console.error("Failed to load world."),console.error(e),na(t,!1)}}else return na(t,!0)}function zf(t,n){if(localStorage.getItem(t)!==null){console.log("Save world");try{localStorage.setItem(t,xo.encode({world:n.world.save(),viewport:n.viewport.save(),bookmarks:n.bookmarks??[]},{base64:!0})),localStorage.removeItem("save_error")}catch(e){localStorage.setItem("save_error",String(e))}}}function Ff(t){localStorage.removeItem(t)}const Hf=he.object({deaths:he.array(he.object({x:he.number("u8"),y:he.number("u8"),diedAt:he.date()})),tiles:he.binary()}),jf=he.object({seed:he.number("u32"),createdAt:he.date(),numDeaths:he.number("u32"),chunks:he.map(he.string(),Hf)}),ia=he.object({x:he.number("f64"),y:he.number("f64"),scale:he.number("f64")}),xo=he.modifyhash("v1.0.5",he.object({world:jf,viewport:ia,bookmarks:he.array(he.object({name:he.string(),createdAt:he.date(),viewport:ia}))})),No=(t,n)=>{const e=new ResizeObserver(()=>{n(t.clientWidth,t.clientHeight)});return e.observe(t),{destroy(){e.unobserve(t),e.disconnect()}}};class Zf{constructor(n,e,i,r){A(this,"world");A(this,"theme");A(this,"canvas");A(this,"ctx");A(this,"viewport");this.world=n,this.theme=e,this.canvas=i;const s=this.canvas.getContext("2d");if(!s)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=s,this.viewport=r}async init(){}destroy(){}renderWorld(){this.ctx.imageSmoothingEnabled=!1,this.viewport.transformCtx(this.canvas,this.ctx),this.viewport.forEachTileInViewport(this.canvas,n=>{this.theme.drawTile(this.ctx,n)},0),this.viewport.forEachChunkInViewport(this.canvas,n=>{n.deaths.forEach(e=>{this.theme.drawDeathIcon(this.ctx,n.chunkX*Q+e.x,n.chunkY*Q+e.y)})},0),this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.renderWorld()}}class Ci{constructor(){A(this,"_alive",!0);A(this,"_lifetime",0)}get alive(){return this._alive}set alive(n){this._alive=n}get lifetime(){return this._lifetime}rendererUpdate(n,e){this._lifetime+=e,this.update(n,e)}}class Vf extends Ci{constructor(e){super();A(this,"type","explosion");A(this,"maxLifetime",500);A(this,"tile");this.tile=e}update(e,i){this.lifetime>this.maxLifetime&&(this.alive=!1)}}class Yf extends Ci{constructor(e){super();A(this,"type","faketile");A(this,"tile");this.tile=e}get opacity(){return xi(2-this.lifetime/250+2)}update(e,i){this.lifetime>2e3&&(this.alive=!1)}}class ra extends Ci{constructor(e,i,r,s){super();A(this,"type","flag");A(this,"x");A(this,"y");A(this,"dx");A(this,"dy");A(this,"r");A(this,"dr");A(this,"isMultiFlag");A(this,"numFlags");this.x=e,this.y=i,this.dx=(Math.random()-.5)*.005,this.dy=-(Math.random()*.002+.005),this.r=0,this.dr=(Math.random()-.5)*.01,this.isMultiFlag=r,this.numFlags=s}get opacity(){return xi(1-this.lifetime/250+.5)}update(e,i){this.dy+=5e-5*i,this.dx*=.99,this.dy*=this.dy<0?1:.95,this.x+=this.dx*i,this.y+=this.dy*i,this.r+=this.dr*i,this.lifetime>=500&&(this.alive=!1)}}class Xf extends Ci{constructor(e){super();A(this,"type","tilereveal");A(this,"tile");A(this,"x");A(this,"y");A(this,"dx");A(this,"dy");A(this,"r");A(this,"dr");A(this,"totalLifetime");this.tile=e,this.x=this.tile.x,this.y=this.tile.y,this.dx=(Math.random()-.5)*.005,this.dy=-(Math.random()*.002+.005),this.r=0,this.dr=(Math.random()-.5)*.01,this.totalLifetime=Math.random()*750+250}get opacity(){return xi(1-this.lifetime/(this.totalLifetime/2)+.5)}update(e,i){this.dy+=5e-5*i,this.dx*=.99,this.dy*=this.dy<0?1:.98,this.x+=this.dx*i,this.y+=this.dy*i,this.r+=this.dr*i,this.lifetime>=this.totalLifetime&&(this.alive=!1)}}class Wf{constructor(n,e,i,r){A(this,"world");A(this,"theme");A(this,"canvas");A(this,"ctx");A(this,"viewport");A(this,"particles",[]);A(this,"listeners",[]);A(this,"lastFrameTime",-1);this.world=n,this.theme=e,this.canvas=i;const s=this.canvas.getContext("2d");if(!s)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=s,this.viewport=r}async init(){this.listeners.push(this.world.addEventListener("particle_unflag",({data:{x:n,y:e}})=>{const i=this.world.getTile(n,e);i instanceof Eo?this.particles.push(new ra(n,e,!0,i.numMaxMines)):this.particles.push(new ra(n,e,!1,1))})),this.listeners.push(this.world.addEventListener("particle_explosion",({data:{x:n,y:e}})=>{const i=this.world.getTile(n,e);this.particles.unshift(new Yf(i)),this.particles.push(new Vf(i))})),this.listeners.push(this.world.addEventListener("particle_reveal",({data:{x:n,y:e}})=>{const i=this.world.getTile(n,e);this.particles.push(new Xf(i))}))}destroy(){let n;for(;n=this.listeners.pop();)this.world.removeEventListener(n)}renderParticles(n){this.ctx.imageSmoothingEnabled=!1,this.viewport.transformCtx(this.canvas,this.ctx);for(let e=0;e<this.particles.length;e++){const i=this.particles[e];i.rendererUpdate(this,n),i.alive||(this.particles.splice(e,1),e--)}for(const e of this.particles)this.theme.drawParticle(this.ctx,e);this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.ctx.fillStyle="transparent",this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const n=performance.now();if(this.lastFrameTime==-1)this.renderParticles(0);else{const e=n-this.lastFrameTime;this.renderParticles(e)}this.lastFrameTime=n}}function Gf(t){let n,e,i,r,s;const a=t[8].default,o=Le(a,t,t[7],null);return{c(){n=R("div"),o&&o.c(),this.h()},l(u){n=L(u,"DIV",{class:!0});var l=Z(n);o&&o.l(l),l.forEach(x),this.h()},h(){B(n,"class",e=rs(t[0])+" svelte-1ijt5qm"),Jt(n,"mouse-controller-dragging",t[1]=="drag")},m(u,l){X(u,n,l),o&&o.m(n,null),i=!0,r||(s=[ge(n,"mousedown",t[10]),ge(n,"mousemove",t[11]),ge(n,"mouseup",t[12]),ge(n,"mouseout",t[13]),ge(n,"wheel",t[14],{passive:!0}),ge(n,"contextmenu",ll(t[9]))],r=!0)},p(u,[l]){o&&o.p&&(!i||l&128)&&Ue(o,a,u,u[7],i?Fe(a,u[7],l,null):ze(u[7]),null),(!i||l&1&&e!==(e=rs(u[0])+" svelte-1ijt5qm"))&&B(n,"class",e),(!i||l&3)&&Jt(n,"mouse-controller-dragging",u[1]=="drag")},i(u){i||(j(o,u),i=!0)},o(u){V(o,u),i=!1},d(u){u&&x(n),o&&o.d(u),r=!1,sn(s)}}}const Kf=10,qf=10;function Jf(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=Lr();let{class:a=""}=n,o=null;const u=v=>{switch(v.button){case 0:return"primary";case 1:return"extra";case 2:return"secondary";default:return null}};let l=0,f=0;const p=(v,D)=>Nf(l,f,v.offsetX,v.offsetY)>D;function m(v){ba.call(this,t,v)}const d=v=>{o==null&&(e(1,o=u(v)),e(2,l=v.offsetX),e(3,f=v.offsetY))},b=v=>{let D=v.movementX,T=v.movementY;if(o=="primary")if(p(v,Kf))D+=v.offsetX-l,T+=v.offsetY-f,e(1,o="drag");else return;o=="drag"&&s("move",{x:v.offsetX,y:v.offsetY,dx:D,dy:T})},w=v=>{if(o==null||o=="drag"||p(v,qf)){e(1,o=null);return}s("input",{x:v.offsetX,y:v.offsetY,type:o}),e(1,o=null)},y=()=>{e(1,o=null)},S=v=>{s("zoom",{x:v.offsetX,y:v.offsetY,amountType:"relative",amount:v.deltaY>0?.9:1.1})};return t.$$set=v=>{"class"in v&&e(0,a=v.class),"$$scope"in v&&e(7,r=v.$$scope)},[a,o,l,f,s,u,p,r,i,m,d,b,w,y,S]}class Qf extends ye{constructor(n){super(),ke(this,n,Jf,Gf,ve,{class:0})}}var Co={exports:{}};/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */(function(t){(function(n,e,i,r){var s=["","webkit","Moz","MS","ms","o"],a=e.createElement("div"),o="function",u=Math.round,l=Math.abs,f=Date.now;function p(c,h,_){return setTimeout(D(c,_),h)}function m(c,h,_){return Array.isArray(c)?(d(c,_[h],_),!0):!1}function d(c,h,_){var g;if(c)if(c.forEach)c.forEach(h,_);else if(c.length!==r)for(g=0;g<c.length;)h.call(_,c[g],g,c),g++;else for(g in c)c.hasOwnProperty(g)&&h.call(_,c[g],g,c)}function b(c,h,_){var g="DEPRECATED METHOD: "+h+`
`+_+` AT 
`;return function(){var N=new Error("get-stack-trace"),F=N&&N.stack?N.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",G=n.console&&(n.console.warn||n.console.log);return G&&G.call(n.console,g,F),c.apply(this,arguments)}}var w;typeof Object.assign!="function"?w=function(h){if(h===r||h===null)throw new TypeError("Cannot convert undefined or null to object");for(var _=Object(h),g=1;g<arguments.length;g++){var N=arguments[g];if(N!==r&&N!==null)for(var F in N)N.hasOwnProperty(F)&&(_[F]=N[F])}return _}:w=Object.assign;var y=b(function(h,_,g){for(var N=Object.keys(_),F=0;F<N.length;)(!g||g&&h[N[F]]===r)&&(h[N[F]]=_[N[F]]),F++;return h},"extend","Use `assign`."),S=b(function(h,_){return y(h,_,!0)},"merge","Use `assign`.");function v(c,h,_){var g=h.prototype,N;N=c.prototype=Object.create(g),N.constructor=c,N._super=g,_&&w(N,_)}function D(c,h){return function(){return c.apply(h,arguments)}}function T(c,h){return typeof c==o?c.apply(h&&h[0]||r,h):c}function O(c,h){return c===r?h:c}function Y(c,h,_){d(k(h),function(g){c.addEventListener(g,_,!1)})}function E(c,h,_){d(k(h),function(g){c.removeEventListener(g,_,!1)})}function M(c,h){for(;c;){if(c==h)return!0;c=c.parentNode}return!1}function P(c,h){return c.indexOf(h)>-1}function k(c){return c.trim().split(/\s+/g)}function U(c,h,_){if(c.indexOf&&!_)return c.indexOf(h);for(var g=0;g<c.length;){if(_&&c[g][_]==h||!_&&c[g]===h)return g;g++}return-1}function z(c){return Array.prototype.slice.call(c,0)}function K(c,h,_){for(var g=[],N=[],F=0;F<c.length;){var G=h?c[F][h]:c[F];U(N,G)<0&&g.push(c[F]),N[F]=G,F++}return _&&(h?g=g.sort(function(xe,Oe){return xe[h]>Oe[h]}):g=g.sort()),g}function ne(c,h){for(var _,g,N=h[0].toUpperCase()+h.slice(1),F=0;F<s.length;){if(_=s[F],g=_?_+N:h,g in c)return g;F++}return r}var q=1;function _e(){return q++}function we(c){var h=c.ownerDocument||c;return h.defaultView||h.parentWindow||n}var De=/mobile|tablet|ip(ad|hone|od)|android/i,He="ontouchstart"in n,te=ne(n,"PointerEvent")!==r,Ce=He&&De.test(navigator.userAgent),je="touch",It="pen",tt="mouse",I="kinect",H=25,J=1,be=2,ie=4,C=8,W=1,Te=2,Xe=4,We=8,Ee=16,Ae=Te|Xe,rt=We|Ee,hn=Ae|rt,zr=["x","y"],Fn=["clientX","clientY"];function Ge(c,h){var _=this;this.manager=c,this.callback=h,this.element=c.element,this.target=c.options.inputTarget,this.domHandler=function(g){T(c.options.enable,[c])&&_.handler(g)},this.init()}Ge.prototype={handler:function(){},init:function(){this.evEl&&Y(this.element,this.evEl,this.domHandler),this.evTarget&&Y(this.target,this.evTarget,this.domHandler),this.evWin&&Y(we(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&E(this.element,this.evEl,this.domHandler),this.evTarget&&E(this.target,this.evTarget,this.domHandler),this.evWin&&E(we(this.element),this.evWin,this.domHandler)}};function Do(c){var h,_=c.options.inputClass;return _?h=_:te?h=Di:Ce?h=Zn:He?h=Oi:h=jn,new h(c,Oo)}function Oo(c,h,_){var g=_.pointers.length,N=_.changedPointers.length,F=h&J&&g-N===0,G=h&(ie|C)&&g-N===0;_.isFirst=!!F,_.isFinal=!!G,F&&(c.session={}),_.eventType=h,Bo(c,_),c.emit("hammer.input",_),c.recognize(_),c.session.prevInput=_}function Bo(c,h){var _=c.session,g=h.pointers,N=g.length;_.firstInput||(_.firstInput=Fr(h)),N>1&&!_.firstMultiple?_.firstMultiple=Fr(h):N===1&&(_.firstMultiple=!1);var F=_.firstInput,G=_.firstMultiple,Ie=G?G.center:F.center,xe=h.center=Hr(g);h.timeStamp=f(),h.deltaTime=h.timeStamp-F.timeStamp,h.angle=Mi(Ie,xe),h.distance=Hn(Ie,xe),$o(_,h),h.offsetDirection=Zr(h.deltaX,h.deltaY);var Oe=jr(h.deltaTime,h.deltaX,h.deltaY);h.overallVelocityX=Oe.x,h.overallVelocityY=Oe.y,h.overallVelocity=l(Oe.x)>l(Oe.y)?Oe.x:Oe.y,h.scale=G?Uo(G.pointers,g):1,h.rotation=G?Lo(G.pointers,g):0,h.maxPointers=_.prevInput?h.pointers.length>_.prevInput.maxPointers?h.pointers.length:_.prevInput.maxPointers:h.pointers.length,Ro(_,h);var at=c.element;M(h.srcEvent.target,at)&&(at=h.srcEvent.target),h.target=at}function $o(c,h){var _=h.center,g=c.offsetDelta||{},N=c.prevDelta||{},F=c.prevInput||{};(h.eventType===J||F.eventType===ie)&&(N=c.prevDelta={x:F.deltaX||0,y:F.deltaY||0},g=c.offsetDelta={x:_.x,y:_.y}),h.deltaX=N.x+(_.x-g.x),h.deltaY=N.y+(_.y-g.y)}function Ro(c,h){var _=c.lastInterval||h,g=h.timeStamp-_.timeStamp,N,F,G,Ie;if(h.eventType!=C&&(g>H||_.velocity===r)){var xe=h.deltaX-_.deltaX,Oe=h.deltaY-_.deltaY,at=jr(g,xe,Oe);F=at.x,G=at.y,N=l(at.x)>l(at.y)?at.x:at.y,Ie=Zr(xe,Oe),c.lastInterval=h}else N=_.velocity,F=_.velocityX,G=_.velocityY,Ie=_.direction;h.velocity=N,h.velocityX=F,h.velocityY=G,h.direction=Ie}function Fr(c){for(var h=[],_=0;_<c.pointers.length;)h[_]={clientX:u(c.pointers[_].clientX),clientY:u(c.pointers[_].clientY)},_++;return{timeStamp:f(),pointers:h,center:Hr(h),deltaX:c.deltaX,deltaY:c.deltaY}}function Hr(c){var h=c.length;if(h===1)return{x:u(c[0].clientX),y:u(c[0].clientY)};for(var _=0,g=0,N=0;N<h;)_+=c[N].clientX,g+=c[N].clientY,N++;return{x:u(_/h),y:u(g/h)}}function jr(c,h,_){return{x:h/c||0,y:_/c||0}}function Zr(c,h){return c===h?W:l(c)>=l(h)?c<0?Te:Xe:h<0?We:Ee}function Hn(c,h,_){_||(_=zr);var g=h[_[0]]-c[_[0]],N=h[_[1]]-c[_[1]];return Math.sqrt(g*g+N*N)}function Mi(c,h,_){_||(_=zr);var g=h[_[0]]-c[_[0]],N=h[_[1]]-c[_[1]];return Math.atan2(N,g)*180/Math.PI}function Lo(c,h){return Mi(h[1],h[0],Fn)+Mi(c[1],c[0],Fn)}function Uo(c,h){return Hn(h[0],h[1],Fn)/Hn(c[0],c[1],Fn)}var zo={mousedown:J,mousemove:be,mouseup:ie},Fo="mousedown",Ho="mousemove mouseup";function jn(){this.evEl=Fo,this.evWin=Ho,this.pressed=!1,Ge.apply(this,arguments)}v(jn,Ge,{handler:function(h){var _=zo[h.type];_&J&&h.button===0&&(this.pressed=!0),_&be&&h.which!==1&&(_=ie),this.pressed&&(_&ie&&(this.pressed=!1),this.callback(this.manager,_,{pointers:[h],changedPointers:[h],pointerType:tt,srcEvent:h}))}});var jo={pointerdown:J,pointermove:be,pointerup:ie,pointercancel:C,pointerout:C},Zo={2:je,3:It,4:tt,5:I},Vr="pointerdown",Yr="pointermove pointerup pointercancel";n.MSPointerEvent&&!n.PointerEvent&&(Vr="MSPointerDown",Yr="MSPointerMove MSPointerUp MSPointerCancel");function Di(){this.evEl=Vr,this.evWin=Yr,Ge.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}v(Di,Ge,{handler:function(h){var _=this.store,g=!1,N=h.type.toLowerCase().replace("ms",""),F=jo[N],G=Zo[h.pointerType]||h.pointerType,Ie=G==je,xe=U(_,h.pointerId,"pointerId");F&J&&(h.button===0||Ie)?xe<0&&(_.push(h),xe=_.length-1):F&(ie|C)&&(g=!0),!(xe<0)&&(_[xe]=h,this.callback(this.manager,F,{pointers:_,changedPointers:[h],pointerType:G,srcEvent:h}),g&&_.splice(xe,1))}});var Vo={touchstart:J,touchmove:be,touchend:ie,touchcancel:C},Yo="touchstart",Xo="touchstart touchmove touchend touchcancel";function Xr(){this.evTarget=Yo,this.evWin=Xo,this.started=!1,Ge.apply(this,arguments)}v(Xr,Ge,{handler:function(h){var _=Vo[h.type];if(_===J&&(this.started=!0),!!this.started){var g=Wo.call(this,h,_);_&(ie|C)&&g[0].length-g[1].length===0&&(this.started=!1),this.callback(this.manager,_,{pointers:g[0],changedPointers:g[1],pointerType:je,srcEvent:h})}}});function Wo(c,h){var _=z(c.touches),g=z(c.changedTouches);return h&(ie|C)&&(_=K(_.concat(g),"identifier",!0)),[_,g]}var Go={touchstart:J,touchmove:be,touchend:ie,touchcancel:C},Ko="touchstart touchmove touchend touchcancel";function Zn(){this.evTarget=Ko,this.targetIds={},Ge.apply(this,arguments)}v(Zn,Ge,{handler:function(h){var _=Go[h.type],g=qo.call(this,h,_);g&&this.callback(this.manager,_,{pointers:g[0],changedPointers:g[1],pointerType:je,srcEvent:h})}});function qo(c,h){var _=z(c.touches),g=this.targetIds;if(h&(J|be)&&_.length===1)return g[_[0].identifier]=!0,[_,_];var N,F,G=z(c.changedTouches),Ie=[],xe=this.target;if(F=_.filter(function(Oe){return M(Oe.target,xe)}),h===J)for(N=0;N<F.length;)g[F[N].identifier]=!0,N++;for(N=0;N<G.length;)g[G[N].identifier]&&Ie.push(G[N]),h&(ie|C)&&delete g[G[N].identifier],N++;if(Ie.length)return[K(F.concat(Ie),"identifier",!0),Ie]}var Jo=2500,Wr=25;function Oi(){Ge.apply(this,arguments);var c=D(this.handler,this);this.touch=new Zn(this.manager,c),this.mouse=new jn(this.manager,c),this.primaryTouch=null,this.lastTouches=[]}v(Oi,Ge,{handler:function(h,_,g){var N=g.pointerType==je,F=g.pointerType==tt;if(!(F&&g.sourceCapabilities&&g.sourceCapabilities.firesTouchEvents)){if(N)Qo.call(this,_,g);else if(F&&el.call(this,g))return;this.callback(h,_,g)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});function Qo(c,h){c&J?(this.primaryTouch=h.changedPointers[0].identifier,Gr.call(this,h)):c&(ie|C)&&Gr.call(this,h)}function Gr(c){var h=c.changedPointers[0];if(h.identifier===this.primaryTouch){var _={x:h.clientX,y:h.clientY};this.lastTouches.push(_);var g=this.lastTouches,N=function(){var F=g.indexOf(_);F>-1&&g.splice(F,1)};setTimeout(N,Jo)}}function el(c){for(var h=c.srcEvent.clientX,_=c.srcEvent.clientY,g=0;g<this.lastTouches.length;g++){var N=this.lastTouches[g],F=Math.abs(h-N.x),G=Math.abs(_-N.y);if(F<=Wr&&G<=Wr)return!0}return!1}var Kr=ne(a.style,"touchAction"),qr=Kr!==r,Jr="compute",Qr="auto",Bi="manipulation",$t="none",dn="pan-x",_n="pan-y",Vn=nl();function $i(c,h){this.manager=c,this.set(h)}$i.prototype={set:function(c){c==Jr&&(c=this.compute()),qr&&this.manager.element.style&&Vn[c]&&(this.manager.element.style[Kr]=c),this.actions=c.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var c=[];return d(this.manager.recognizers,function(h){T(h.options.enable,[h])&&(c=c.concat(h.getTouchAction()))}),tl(c.join(" "))},preventDefaults:function(c){var h=c.srcEvent,_=c.offsetDirection;if(this.manager.session.prevented){h.preventDefault();return}var g=this.actions,N=P(g,$t)&&!Vn[$t],F=P(g,_n)&&!Vn[_n],G=P(g,dn)&&!Vn[dn];if(N){var Ie=c.pointers.length===1,xe=c.distance<2,Oe=c.deltaTime<250;if(Ie&&xe&&Oe)return}if(!(G&&F)&&(N||F&&_&Ae||G&&_&rt))return this.preventSrc(h)},preventSrc:function(c){this.manager.session.prevented=!0,c.preventDefault()}};function tl(c){if(P(c,$t))return $t;var h=P(c,dn),_=P(c,_n);return h&&_?$t:h||_?h?dn:_n:P(c,Bi)?Bi:Qr}function nl(){if(!qr)return!1;var c={},h=n.CSS&&n.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(_){c[_]=h?n.CSS.supports("touch-action",_):!0}),c}var Yn=1,Ke=2,Xt=4,St=8,bt=St,mn=16,st=32;function gt(c){this.options=w({},this.defaults,c||{}),this.id=_e(),this.manager=null,this.options.enable=O(this.options.enable,!0),this.state=Yn,this.simultaneous={},this.requireFail=[]}gt.prototype={defaults:{},set:function(c){return w(this.options,c),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(c){if(m(c,"recognizeWith",this))return this;var h=this.simultaneous;return c=Xn(c,this),h[c.id]||(h[c.id]=c,c.recognizeWith(this)),this},dropRecognizeWith:function(c){return m(c,"dropRecognizeWith",this)?this:(c=Xn(c,this),delete this.simultaneous[c.id],this)},requireFailure:function(c){if(m(c,"requireFailure",this))return this;var h=this.requireFail;return c=Xn(c,this),U(h,c)===-1&&(h.push(c),c.requireFailure(this)),this},dropRequireFailure:function(c){if(m(c,"dropRequireFailure",this))return this;c=Xn(c,this);var h=U(this.requireFail,c);return h>-1&&this.requireFail.splice(h,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(c){return!!this.simultaneous[c.id]},emit:function(c){var h=this,_=this.state;function g(N){h.manager.emit(N,c)}_<St&&g(h.options.event+es(_)),g(h.options.event),c.additionalEvent&&g(c.additionalEvent),_>=St&&g(h.options.event+es(_))},tryEmit:function(c){if(this.canEmit())return this.emit(c);this.state=st},canEmit:function(){for(var c=0;c<this.requireFail.length;){if(!(this.requireFail[c].state&(st|Yn)))return!1;c++}return!0},recognize:function(c){var h=w({},c);if(!T(this.options.enable,[this,h])){this.reset(),this.state=st;return}this.state&(bt|mn|st)&&(this.state=Yn),this.state=this.process(h),this.state&(Ke|Xt|St|mn)&&this.tryEmit(h)},process:function(c){},getTouchAction:function(){},reset:function(){}};function es(c){return c&mn?"cancel":c&St?"end":c&Xt?"move":c&Ke?"start":""}function ts(c){return c==Ee?"down":c==We?"up":c==Te?"left":c==Xe?"right":""}function Xn(c,h){var _=h.manager;return _?_.get(c):c}function nt(){gt.apply(this,arguments)}v(nt,gt,{defaults:{pointers:1},attrTest:function(c){var h=this.options.pointers;return h===0||c.pointers.length===h},process:function(c){var h=this.state,_=c.eventType,g=h&(Ke|Xt),N=this.attrTest(c);return g&&(_&C||!N)?h|mn:g||N?_&ie?h|St:h&Ke?h|Xt:Ke:st}});function Wn(){nt.apply(this,arguments),this.pX=null,this.pY=null}v(Wn,nt,{defaults:{event:"pan",threshold:10,pointers:1,direction:hn},getTouchAction:function(){var c=this.options.direction,h=[];return c&Ae&&h.push(_n),c&rt&&h.push(dn),h},directionTest:function(c){var h=this.options,_=!0,g=c.distance,N=c.direction,F=c.deltaX,G=c.deltaY;return N&h.direction||(h.direction&Ae?(N=F===0?W:F<0?Te:Xe,_=F!=this.pX,g=Math.abs(c.deltaX)):(N=G===0?W:G<0?We:Ee,_=G!=this.pY,g=Math.abs(c.deltaY))),c.direction=N,_&&g>h.threshold&&N&h.direction},attrTest:function(c){return nt.prototype.attrTest.call(this,c)&&(this.state&Ke||!(this.state&Ke)&&this.directionTest(c))},emit:function(c){this.pX=c.deltaX,this.pY=c.deltaY;var h=ts(c.direction);h&&(c.additionalEvent=this.options.event+h),this._super.emit.call(this,c)}});function Ri(){nt.apply(this,arguments)}v(Ri,nt,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[$t]},attrTest:function(c){return this._super.attrTest.call(this,c)&&(Math.abs(c.scale-1)>this.options.threshold||this.state&Ke)},emit:function(c){if(c.scale!==1){var h=c.scale<1?"in":"out";c.additionalEvent=this.options.event+h}this._super.emit.call(this,c)}});function Li(){gt.apply(this,arguments),this._timer=null,this._input=null}v(Li,gt,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[Qr]},process:function(c){var h=this.options,_=c.pointers.length===h.pointers,g=c.distance<h.threshold,N=c.deltaTime>h.time;if(this._input=c,!g||!_||c.eventType&(ie|C)&&!N)this.reset();else if(c.eventType&J)this.reset(),this._timer=p(function(){this.state=bt,this.tryEmit()},h.time,this);else if(c.eventType&ie)return bt;return st},reset:function(){clearTimeout(this._timer)},emit:function(c){this.state===bt&&(c&&c.eventType&ie?this.manager.emit(this.options.event+"up",c):(this._input.timeStamp=f(),this.manager.emit(this.options.event,this._input)))}});function Ui(){nt.apply(this,arguments)}v(Ui,nt,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[$t]},attrTest:function(c){return this._super.attrTest.call(this,c)&&(Math.abs(c.rotation)>this.options.threshold||this.state&Ke)}});function zi(){nt.apply(this,arguments)}v(zi,nt,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:Ae|rt,pointers:1},getTouchAction:function(){return Wn.prototype.getTouchAction.call(this)},attrTest:function(c){var h=this.options.direction,_;return h&(Ae|rt)?_=c.overallVelocity:h&Ae?_=c.overallVelocityX:h&rt&&(_=c.overallVelocityY),this._super.attrTest.call(this,c)&&h&c.offsetDirection&&c.distance>this.options.threshold&&c.maxPointers==this.options.pointers&&l(_)>this.options.velocity&&c.eventType&ie},emit:function(c){var h=ts(c.offsetDirection);h&&this.manager.emit(this.options.event+h,c),this.manager.emit(this.options.event,c)}});function Gn(){gt.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}v(Gn,gt,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[Bi]},process:function(c){var h=this.options,_=c.pointers.length===h.pointers,g=c.distance<h.threshold,N=c.deltaTime<h.time;if(this.reset(),c.eventType&J&&this.count===0)return this.failTimeout();if(g&&N&&_){if(c.eventType!=ie)return this.failTimeout();var F=this.pTime?c.timeStamp-this.pTime<h.interval:!0,G=!this.pCenter||Hn(this.pCenter,c.center)<h.posThreshold;this.pTime=c.timeStamp,this.pCenter=c.center,!G||!F?this.count=1:this.count+=1,this._input=c;var Ie=this.count%h.taps;if(Ie===0)return this.hasRequireFailures()?(this._timer=p(function(){this.state=bt,this.tryEmit()},h.interval,this),Ke):bt}return st},failTimeout:function(){return this._timer=p(function(){this.state=st},this.options.interval,this),st},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==bt&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}});function vt(c,h){return h=h||{},h.recognizers=O(h.recognizers,vt.defaults.preset),new Fi(c,h)}vt.VERSION="2.0.7",vt.defaults={domEvents:!1,touchAction:Jr,enable:!0,inputTarget:null,inputClass:null,preset:[[Ui,{enable:!1}],[Ri,{enable:!1},["rotate"]],[zi,{direction:Ae}],[Wn,{direction:Ae},["swipe"]],[Gn],[Gn,{event:"doubletap",taps:2},["tap"]],[Li]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};var il=1,ns=2;function Fi(c,h){this.options=w({},vt.defaults,h||{}),this.options.inputTarget=this.options.inputTarget||c,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=c,this.input=Do(this),this.touchAction=new $i(this,this.options.touchAction),is(this,!0),d(this.options.recognizers,function(_){var g=this.add(new _[0](_[1]));_[2]&&g.recognizeWith(_[2]),_[3]&&g.requireFailure(_[3])},this)}Fi.prototype={set:function(c){return w(this.options,c),c.touchAction&&this.touchAction.update(),c.inputTarget&&(this.input.destroy(),this.input.target=c.inputTarget,this.input.init()),this},stop:function(c){this.session.stopped=c?ns:il},recognize:function(c){var h=this.session;if(!h.stopped){this.touchAction.preventDefaults(c);var _,g=this.recognizers,N=h.curRecognizer;(!N||N&&N.state&bt)&&(N=h.curRecognizer=null);for(var F=0;F<g.length;)_=g[F],h.stopped!==ns&&(!N||_==N||_.canRecognizeWith(N))?_.recognize(c):_.reset(),!N&&_.state&(Ke|Xt|St)&&(N=h.curRecognizer=_),F++}},get:function(c){if(c instanceof gt)return c;for(var h=this.recognizers,_=0;_<h.length;_++)if(h[_].options.event==c)return h[_];return null},add:function(c){if(m(c,"add",this))return this;var h=this.get(c.options.event);return h&&this.remove(h),this.recognizers.push(c),c.manager=this,this.touchAction.update(),c},remove:function(c){if(m(c,"remove",this))return this;if(c=this.get(c),c){var h=this.recognizers,_=U(h,c);_!==-1&&(h.splice(_,1),this.touchAction.update())}return this},on:function(c,h){if(c!==r&&h!==r){var _=this.handlers;return d(k(c),function(g){_[g]=_[g]||[],_[g].push(h)}),this}},off:function(c,h){if(c!==r){var _=this.handlers;return d(k(c),function(g){h?_[g]&&_[g].splice(U(_[g],h),1):delete _[g]}),this}},emit:function(c,h){this.options.domEvents&&rl(c,h);var _=this.handlers[c]&&this.handlers[c].slice();if(!(!_||!_.length)){h.type=c,h.preventDefault=function(){h.srcEvent.preventDefault()};for(var g=0;g<_.length;)_[g](h),g++}},destroy:function(){this.element&&is(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}};function is(c,h){var _=c.element;if(_.style){var g;d(c.options.cssProps,function(N,F){g=ne(_.style,F),h?(c.oldCssProps[g]=_.style[g],_.style[g]=N):_.style[g]=c.oldCssProps[g]||""}),h||(c.oldCssProps={})}}function rl(c,h){var _=e.createEvent("Event");_.initEvent(c,!0,!0),_.gesture=h,h.target.dispatchEvent(_)}w(vt,{INPUT_START:J,INPUT_MOVE:be,INPUT_END:ie,INPUT_CANCEL:C,STATE_POSSIBLE:Yn,STATE_BEGAN:Ke,STATE_CHANGED:Xt,STATE_ENDED:St,STATE_RECOGNIZED:bt,STATE_CANCELLED:mn,STATE_FAILED:st,DIRECTION_NONE:W,DIRECTION_LEFT:Te,DIRECTION_RIGHT:Xe,DIRECTION_UP:We,DIRECTION_DOWN:Ee,DIRECTION_HORIZONTAL:Ae,DIRECTION_VERTICAL:rt,DIRECTION_ALL:hn,Manager:Fi,Input:Ge,TouchAction:$i,TouchInput:Zn,MouseInput:jn,PointerEventInput:Di,TouchMouseInput:Oi,SingleTouchInput:Xr,Recognizer:gt,AttrRecognizer:nt,Tap:Gn,Pan:Wn,Swipe:zi,Pinch:Ri,Rotate:Ui,Press:Li,on:Y,off:E,each:d,merge:S,extend:y,assign:w,inherit:v,bindFn:D,prefixed:ne});var sl=typeof n<"u"?n:typeof self<"u"?self:{};sl.Hammer=vt,typeof r=="function"&&r.amd?r(function(){return vt}):t.exports?t.exports=vt:n[i]=vt})(window,document,"Hammer")})(Co);var eh=Co.exports;const bn=ml(eh);function th(t){let n,e;const i=t[3].default,r=Le(i,t,t[2],null);return{c(){n=R("div"),r&&r.c(),this.h()},l(s){n=L(s,"DIV",{class:!0});var a=Z(n);r&&r.l(a),a.forEach(x),this.h()},h(){B(n,"class",t[0])},m(s,a){X(s,n,a),r&&r.m(n,null),t[4](n),e=!0},p(s,[a]){r&&r.p&&(!e||a&4)&&Ue(r,i,s,s[2],e?Fe(i,s[2],a,null):ze(s[2]),null),(!e||a&1)&&B(n,"class",s[0])},i(s){e||(j(r,s),e=!0)},o(s){V(r,s),e=!1},d(s){s&&x(n),r&&r.d(s),t[4](null)}}}function nh(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=Lr();let{class:a=""}=n,o,u,l=null;hi(()=>{u=new bn.Manager(o,{recognizers:[[bn.Pan],[bn.Pinch]]});const p=new bn.Tap({taps:1,event:"tapSingle"}),m=new bn.Tap({taps:2,event:"tapDouble"});u.add([m,p]),m.recognizeWith(p),p.requireFailure(m),u.on("pan",d=>{l&&s("move",{x:d.center.x,y:d.center.y,dx:d.center.x-l.center.x,dy:d.center.y-l.center.y}),l=d.isFinal?null:d}),u.on("pinch",d=>{}),u.on("tapSingle",d=>{s("input",{x:d.center.x,y:d.center.y,type:"secondary"})}),u.on("tapDouble",d=>{s("input",{x:d.center.x,y:d.center.y,type:"primary"})})}),di(()=>{u.destroy()});function f(p){$e[p?"unshift":"push"](()=>{o=p,e(1,o)})}return t.$$set=p=>{"class"in p&&e(0,a=p.class),"$$scope"in p&&e(2,r=p.$$scope)},[a,o,r,i,f]}class ih extends ye{constructor(n){super(),ke(this,n,nh,th,ve,{class:0})}}function rh(t){let n,e="Unsupported input method.";return{c(){n=R("span"),n.textContent=e},l(i){n=L(i,"SPAN",{"data-svelte-h":!0}),Se(n)!=="svelte-1d8n4pk"&&(n.textContent=e)},m(i,r){X(i,n,r)},p:Me,i:Me,o:Me,d(i){i&&x(n)}}}function sh(t){let n,e;return n=new ih({props:{class:t[0],$$slots:{default:[lh]},$$scope:{ctx:t}}}),n.$on("move",t[7]),n.$on("zoom",t[8]),n.$on("input",t[9]),{c(){oe(n.$$.fragment)},l(i){le(n.$$.fragment,i)},m(i,r){ce(n,i,r),e=!0},p(i,r){const s={};r&1&&(s.class=i[0]),r&1024&&(s.$$scope={dirty:r,ctx:i}),n.$set(s)},i(i){e||(j(n.$$.fragment,i),e=!0)},o(i){V(n.$$.fragment,i),e=!1},d(i){ue(n,i)}}}function ah(t){let n,e="Keyboard input method not implemented.";return{c(){n=R("span"),n.textContent=e},l(i){n=L(i,"SPAN",{"data-svelte-h":!0}),Se(n)!=="svelte-1slf3g9"&&(n.textContent=e)},m(i,r){X(i,n,r)},p:Me,i:Me,o:Me,d(i){i&&x(n)}}}function oh(t){let n,e;return n=new Qf({props:{class:t[0],$$slots:{default:[ch]},$$scope:{ctx:t}}}),n.$on("move",t[4]),n.$on("zoom",t[5]),n.$on("input",t[6]),{c(){oe(n.$$.fragment)},l(i){le(n.$$.fragment,i)},m(i,r){ce(n,i,r),e=!0},p(i,r){const s={};r&1&&(s.class=i[0]),r&1024&&(s.$$scope={dirty:r,ctx:i}),n.$set(s)},i(i){e||(j(n.$$.fragment,i),e=!0)},o(i){V(n.$$.fragment,i),e=!1},d(i){ue(n,i)}}}function lh(t){let n;const e=t[3].default,i=Le(e,t,t[10],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&1024)&&Ue(i,e,r,r[10],n?Fe(e,r[10],s,null):ze(r[10]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function ch(t){let n;const e=t[3].default,i=Le(e,t,t[10],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&1024)&&Ue(i,e,r,r[10],n?Fe(e,r[10],s,null):ze(r[10]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function uh(t){let n,e,i,r;const s=[oh,ah,sh,rh],a=[];function o(u,l){return u[1]=="mouse"?0:u[1]=="keyboard"?1:u[1]=="touch"?2:3}return n=o(t),e=a[n]=s[n](t),{c(){e.c(),i=Qe()},l(u){e.l(u),i=Qe()},m(u,l){a[n].m(u,l),X(u,i,l),r=!0},p(u,[l]){let f=n;n=o(u),n===f?a[n].p(u,l):(Nn(),V(a[f],1,1,()=>{a[f]=null}),Cn(),e=a[n],e?e.p(u,l):(e=a[n]=s[n](u),e.c()),j(e,1),e.m(i.parentNode,i))},i(u){r||(j(e),r=!0)},o(u){V(e),r=!1},d(u){u&&x(i),a[n].d(u)}}}function Lr(){return ga()}function fh(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=Lr();let{class:a=""}=n,{inputMethod:o="mouse"}=n;const u=b=>s("move",b.detail),l=b=>s("zoom",b.detail),f=b=>s("input",b.detail),p=b=>s("move",b.detail),m=b=>s("zoom",b.detail),d=b=>s("input",b.detail);return t.$$set=b=>{"class"in b&&e(0,a=b.class),"inputMethod"in b&&e(1,o=b.inputMethod),"$$scope"in b&&e(10,r=b.$$scope)},[a,o,s,i,u,l,f,p,m,d,r]}class hh extends ye{constructor(n){super(),ke(this,n,fh,uh,ve,{class:0,inputMethod:1})}}function dh(t,n){return t!=t?n==n:t!==n||t&&typeof t=="object"||typeof t=="function"}class Ur{constructor(n,e,i){A(this,"slot");A(this,"key");A(this,"value");A(this,"subscriptions",new Set);this.slot=n,this.key=e,this.load(),this.value===void 0&&(this.value=i,this.save())}getObj(){let n=localStorage.getItem(this.slot);return n===null&&(localStorage.setItem(this.slot,"{}"),n=localStorage.getItem(this.slot)),JSON.parse(n)}save(){const n=this.getObj();n[this.key]=this.value,localStorage.setItem(this.slot,JSON.stringify(n)),console.debug(`LocalStorageWritable: Saved to ${this.slot}['${this.key}'] = ${this.value}`)}load(){const n=this.getObj();this.value=this.key in n?n[this.key]:void 0,console.debug(`LocalStorageWritable: Loaded from ${this.slot}['${this.key}'] = ${this.value}`)}set(n){dh(this.value,n)&&(this.value=n,this.save(),this.subscriptions.forEach(e=>e[0](this.value)))}update(n){this.value&&this.set(n(this.value))}subscribe(n,e=()=>{}){const i=[n,e];return this.subscriptions.add(i),this.value!==void 0&&n(this.value),()=>{this.subscriptions.delete(i)}}}const vr=new Ur("settings","autoDisplayInfo",!0),wr=new Ur("settings","volume",.25),xn=new Ur("settings","inputMethod","mouse");function _h(t){let n,e,i;return{c(){n=R("canvas"),e=se(),i=R("canvas")},l(r){n=L(r,"CANVAS",{}),Z(n).forEach(x),e=ae(r),i=L(r,"CANVAS",{}),Z(i).forEach(x)},m(r,s){X(r,n,s),t[9](n),X(r,e,s),X(r,i,s),t[10](i)},p:Me,d(r){r&&(x(n),x(e),x(i)),t[9](null),t[10](null)}}}function mh(t){let n,e,i,r,s,a;return e=new hh({props:{class:"w-full h-full force-overlap",inputMethod:t[5],$$slots:{default:[_h]},$$scope:{ctx:t}}}),e.$on("move",t[11]),e.$on("zoom",t[12]),e.$on("input",t[13]),{c(){n=R("div"),oe(e.$$.fragment),this.h()},l(o){n=L(o,"DIV",{class:!0});var u=Z(n);le(e.$$.fragment,u),u.forEach(x),this.h()},h(){B(n,"class","w-full h-full cursor-pointer")},m(o,u){X(o,n,u),ce(e,n,null),t[14](n),r=!0,s||(a=va(i=No.call(null,n,t[15])),s=!0)},p(o,[u]){const l={};u&32&&(l.inputMethod=o[5]),u&33554456&&(l.$$scope={dirty:u,ctx:o}),e.$set(l),i&&wa(i.update)&&u&26&&i.update.call(null,o[15])},i(o){r||(j(e.$$.fragment,o),r=!0)},o(o){V(e.$$.fragment,o),r=!1},d(o){o&&x(n),ue(e),t[14](null),s=!1,a()}}}function ph(t,n,e){let i;Ft(t,xn,z=>e(5,i=z));const r=ga();let s,{world:a}=n,{theme:o}=n,{viewport:u}=n,l,f;const p=async()=>{l==null||l.destroy(),f&&(l=new Zf(a,o,f,u),await l.init(),e(3,f.width=s.clientWidth,f),e(3,f.height=s.clientHeight,f),w=!0,S())};let m,d;const b=async()=>{m==null||m.destroy(),d&&(m=new Wf(a,o,d,u),await m.init(),e(4,d.width=s.clientWidth,d),e(4,d.height=s.clientHeight,d))};let w=!1,y=-1;const S=()=>{cancelAnimationFrame(y),y=requestAnimationFrame(S),w&&(w=!1,l==null||l.render()),m==null||m.render()};let v,D,T;hi(async()=>{await p(),await b(),v=a.addEventListener("change",()=>{w=!0}),D=u.addEventListener("change",()=>{w=!0}),T=xn.subscribe(()=>{setTimeout(async()=>{await p(),await b()},100)})}),di(()=>{l==null||l.destroy(),m==null||m.destroy(),a.removeEventListener(v),u.removeEventListener(D),T(),cancelAnimationFrame(y)});function O(z){$e[z?"unshift":"push"](()=>{f=z,e(3,f)})}function Y(z){$e[z?"unshift":"push"](()=>{d=z,e(4,d)})}const E=z=>{u.translate(f,z.detail.dx,z.detail.dy),u.change()},M=z=>{const K=z.detail.amountType=="relative"?u.scale*z.detail.amount:u.scale+(z.detail.amount-1),ne=u.clampScale(f,K,4,32);u.scaleFrom(f,ne,z.detail.x,z.detail.y),u.change()},P=z=>{const K=u.canvasPos(f,z.detail.x,z.detail.y,!0);switch(z.detail.type){case"primary":r("action",{type:"reveal",pos:K});break;case"secondary":r("action",{type:"flag",pos:K});break;case"extra":r("action",{type:"reset",pos:K});break}a.change()};function k(z){$e[z?"unshift":"push"](()=>{s=z,e(2,s)})}const U=(z,K)=>{e(3,f.width=z,f),e(3,f.height=K,f),e(4,d.width=z,d),e(4,d.height=K,d),u.change(),S()};return t.$$set=z=>{"world"in z&&e(0,a=z.world),"theme"in z&&e(8,o=z.theme),"viewport"in z&&e(1,u=z.viewport)},[a,u,s,f,d,i,r,S,o,O,Y,E,M,P,k,U]}class bh extends ye{constructor(n){super(),ke(this,n,ph,mh,ve,{world:0,theme:8,viewport:1})}}class Mo{constructor(n,e){A(this,"textures");A(this,"img");typeof n=="string"?(this.img=document.createElement("img"),this.img.loading="eager",this.img.src=n):this.img=n,this.textures=e}awaitLoad(){return new Promise((n,e)=>{if(this.img instanceof HTMLCanvasElement||this.img.complete&&this.img.naturalWidth!==0)return n();const i=()=>{this.img.removeEventListener("load",i),this.img.removeEventListener("error",r),n()},r=()=>{this.img.removeEventListener("load",i),this.img.removeEventListener("error",r),e()};this.img.addEventListener("load",i),this.img.addEventListener("error",r)})}onLoad(n){this.awaitLoad().then(()=>n(this))}draw(n,e,i,r,s,a){const[o,u,l,f]=this.textures[e];n.drawImage(this.img,o,u,l,f,i,r,s,a)}toImageDataAtlas(){const[n,e]=yo(this.img.width,this.img.height);return e.imageSmoothingEnabled=!1,e.drawImage(this.img,0,0),new gh(Object.fromEntries(Object.entries(this.textures).map(([i,[r,s,a,o]])=>[i,e.getImageData(r,s,a,o)])))}}class gh{constructor(n){A(this,"textures");this.textures=n}toImageAtlas(n=!0){let e=0,i=0,r={},s=0;for(const u in this.textures){const l=this.textures[u];n&&s++,r[u]={x:s,y:n?1:0,width:l.width,height:l.height,name:u},s+=l.width+(n?1:0),e=s,i=Math.max(i,l.height+(n?2:0))}const[a,o]=yo(e,i);for(const u in r){const l=r[u];o.putImageData(this.textures[u],l.x,l.y)}return new Mo(a,Object.fromEntries(Object.entries(r).map(([u,l])=>(l=l,[u,[l.x,l.y,l.width,l.height]]))))}}class vh{constructor(){A(this,"volume",1)}playSound(n,e=1){const i=this.soundEffects[n],r=xi(e*this.volume);if(r<=0)return;const s=document.createElement("audio");s.src=i.src,s.volume=r,s.playbackRate=1+Math.random()*i.variation,s.preservesPitch=!1;const a=()=>{s.removeEventListener("ended",a),s.remove()};s.addEventListener("ended",a),s.play()}}class wh extends vh{constructor(){super(...arguments);A(this,"tileset",new Mo("/infinite-minesweeper/retro/tileset.png",{null:[0,0,16,16],skull:[0,16,16,16],bomb:[16,0,16,16],explosion1:[16,16,16,16],explosion2:[16,32,16,16],explosion3:[16,48,16,16],explosion4:[16,64,16,16],flag:[32,16,16,16],flag_1:[32,32,16,16],flag_2:[32,48,16,16],flag_3:[32,64,16,16],number_0:[48,0,16,16],number_1:[48,16,16,16],number_2:[48,32,16,16],number_3:[48,48,16,16],number_4:[48,64,16,16],number_5:[48,80,16,16],number_6:[48,96,16,16],number_7:[48,112,16,16],number_8:[48,128,16,16],number_9:[48,144,16,16],number_10:[48,160,16,16],number_11:[48,176,16,16],number_12:[48,192,16,16],number_13:[48,208,16,16],number_14:[48,224,16,16],number_15:[48,240,16,16],number_16:[48,256,16,16],number_17:[48,272,16,16],number_18:[48,288,16,16],number_19:[48,304,16,16],number_20:[48,320,16,16],number_21:[48,336,16,16],number_22:[48,352,16,16],number_23:[48,368,16,16],number_24:[48,384,16,16],tile_vanilla_covered:[64,0,16,16],tile_vanilla_revealed:[80,0,16,16],tile_chocolate_covered:[64,16,16,16],tile_chocolate_revealed:[80,16,16,16],tile_waffle_light_covered:[64,32,16,16],tile_waffle_light_revealed:[80,32,16,16],tile_waffle_dark_covered:[96,32,16,16],tile_waffle_dark_revealed:[112,32,16,16],tile_stroopwafel_light_covered:[64,48,16,16],tile_stroopwafel_light_revealed:[80,48,16,16],tile_stroopwafel_dark_covered:[96,48,16,16],tile_stroopwafel_dark_revealed:[112,48,16,16],tile_blueberry_covered:[64,64,16,16],tile_blueberry_revealed:[80,64,16,16],tile_strawberry_covered:[64,80,16,16],tile_strawberry_revealed:[80,80,16,16]}));A(this,"soundEffects",{reveal:{src:"/infinite-minesweeper/retro/reveal.wav",variation:.25},unflag:{src:"/infinite-minesweeper/retro/unflag.wav",variation:.25},explosion:{src:"/infinite-minesweeper/retro/explosion.wav",variation:.25}})}async init(){await this.tileset.awaitLoad(),this.tileset=this.tileset.toImageDataAtlas().toImageAtlas(!0)}drawNearby(e,i){if(i!=nn&&!(i<0))switch(i){case 0:this.tileset.draw(e,"number_0",0,0,1,1);break;case 1:this.tileset.draw(e,"number_1",0,0,1,1);break;case 2:this.tileset.draw(e,"number_2",0,0,1,1);break;case 3:this.tileset.draw(e,"number_3",0,0,1,1);break;case 4:this.tileset.draw(e,"number_4",0,0,1,1);break;case 5:this.tileset.draw(e,"number_5",0,0,1,1);break;case 6:this.tileset.draw(e,"number_6",0,0,1,1);break;case 7:this.tileset.draw(e,"number_7",0,0,1,1);break;case 8:this.tileset.draw(e,"number_8",0,0,1,1);break;case 9:this.tileset.draw(e,"number_9",0,0,1,1);break;case 10:this.tileset.draw(e,"number_10",0,0,1,1);break;case 11:this.tileset.draw(e,"number_11",0,0,1,1);break;case 12:this.tileset.draw(e,"number_12",0,0,1,1);break;case 13:this.tileset.draw(e,"number_13",0,0,1,1);break;case 14:this.tileset.draw(e,"number_14",0,0,1,1);break;case 15:this.tileset.draw(e,"number_15",0,0,1,1);break;case 16:this.tileset.draw(e,"number_16",0,0,1,1);break;case 17:this.tileset.draw(e,"number_17",0,0,1,1);break;case 18:this.tileset.draw(e,"number_18",0,0,1,1);break;case 19:this.tileset.draw(e,"number_19",0,0,1,1);break;case 20:this.tileset.draw(e,"number_20",0,0,1,1);break;case 21:this.tileset.draw(e,"number_21",0,0,1,1);break;case 22:this.tileset.draw(e,"number_22",0,0,1,1);break;case 23:this.tileset.draw(e,"number_23",0,0,1,1);break;case 24:this.tileset.draw(e,"number_24",0,0,1,1);break;default:throw new Error(`ThemeRetro invalid draw nearby count. ${i}`)}}drawFlags(e,i){switch(i){case 0:break;case 1:this.tileset.draw(e,"flag_1",0,0,1,1);break;case 2:this.tileset.draw(e,"flag_2",0,0,1,1);break;case 3:this.tileset.draw(e,"flag_3",0,0,1,1);break;default:throw new Error("ThemeRetro invalid draw flag count.")}}drawSingleMineTile(e,i,r,s,a){if(a){this.tileset.draw(e,r,0,0,1,1);return}switch(i.state){case Rt.Covered:this.tileset.draw(e,r,0,0,1,1);break;case Rt.Flagged:this.tileset.draw(e,r,0,0,1,1),this.tileset.draw(e,"flag",0,0,1,1);break;case Rt.Revealed:{this.tileset.draw(e,s,0,0,1,1),this.drawNearby(e,i.minesNearby());break}}}drawMultiMineTile(e,i,r,s,a){if(a){this.tileset.draw(e,r,0,0,1,1);return}i.isRevealed?(this.tileset.draw(e,s,0,0,1,1),this.drawNearby(e,i.minesNearby())):(this.tileset.draw(e,r,0,0,1,1),this.drawFlags(e,i.numFlags()))}drawStrawberryTile(e,i,r){if(r){this.tileset.draw(e,"tile_strawberry_covered",0,0,1,1);return}switch(i.state){case Rt.Covered:this.tileset.draw(e,"tile_strawberry_covered",0,0,1,1);break;case Rt.Flagged:this.tileset.draw(e,"tile_strawberry_covered",0,0,1,1),this.tileset.draw(e,"flag",0,0,1,1);break;case Rt.Revealed:{this.tileset.draw(e,"tile_strawberry_revealed",0,0,1,1);const s=i.minesNearby(!0),a=i.secondaryMinesNearby(!0);a==null?this.drawNearby(e,s):(e.save(),e.scale(.55,.55),e.translate(.1,.45),this.drawNearby(e,i.secondaryNearbyCountRightSide?s:a),e.translate(.7,0),this.drawNearby(e,i.secondaryNearbyCountRightSide?a:s),e.restore());break}}}drawForcedTile(e,i,r){switch(i.type){case"vanilla":this.drawSingleMineTile(e,i,"tile_vanilla_covered","tile_vanilla_revealed",r);break;case"chocolate":this.drawSingleMineTile(e,i,"tile_chocolate_covered","tile_chocolate_revealed",r);break;case"waffle":{i.isDark?this.drawSingleMineTile(e,i,"tile_waffle_dark_covered","tile_waffle_dark_revealed",r):this.drawSingleMineTile(e,i,"tile_waffle_light_covered","tile_waffle_light_revealed",r);break}case"stroopwafel":{i.isDark?this.drawSingleMineTile(e,i,"tile_stroopwafel_dark_covered","tile_stroopwafel_dark_revealed",r):this.drawSingleMineTile(e,i,"tile_stroopwafel_light_covered","tile_stroopwafel_light_revealed",r);break}case"blueberry":{this.drawMultiMineTile(e,i,"tile_blueberry_covered","tile_blueberry_revealed",r);break}case"strawberry":{this.drawStrawberryTile(e,i,r);break}}}drawTile(e,i){e.save(),e.translate(i.x,i.y),this.drawForcedTile(e,i,!1),e.restore()}drawParticle(e,i){switch(e.save(),i.type){case"flag":{e.translate(i.x+.5,i.y+.5),e.rotate(i.r),e.globalAlpha=i.opacity,i.isMultiFlag?(e.translate(-.5,-.5),this.drawFlags(e,i.numFlags)):this.tileset.draw(e,"flag",-.5,-.5,1,1);break}case"explosion":{const r=["explosion1","explosion2","explosion3","explosion4"],s=Math.min(Math.floor(i.lifetime/i.maxLifetime*r.length),r.length-1);this.tileset.draw(e,r[s],i.tile.x,i.tile.y,1,1);break}case"faketile":{e.translate(i.tile.x,i.tile.y),e.globalAlpha=i.opacity,this.drawForcedTile(e,i.tile,!0);break}case"tilereveal":{e.translate(i.x+.5,i.y+.5),e.rotate(i.r),e.translate(-.5,-.5),e.globalAlpha=i.opacity,this.drawForcedTile(e,i.tile,!0);break}}e.globalAlpha=1,e.restore()}drawDeathIcon(e,i,r){this.tileset.draw(e,"skull",i,r,1,1)}}function sa(t){let n,e;return n=new bh({props:{world:t[0],theme:t[4],viewport:t[1]}}),n.$on("action",t[7]),{c(){oe(n.$$.fragment)},l(i){le(n.$$.fragment,i)},m(i,r){ce(n,i,r),e=!0},p(i,r){const s={};r&1&&(s.world=i[0]),r&16&&(s.theme=i[4]),r&2&&(s.viewport=i[1]),n.$set(s)},i(i){e||(j(n.$$.fragment,i),e=!0)},o(i){V(n.$$.fragment,i),e=!1},d(i){ue(n,i)}}}function yh(t){let n,e,i,r,s=t[0]&&t[4]&&t[1]&&sa(t);return{c(){s&&s.c(),n=Qe()},l(a){s&&s.l(a),n=Qe()},m(a,o){s&&s.m(a,o),X(a,n,o),e=!0,i||(r=ge(window,"beforeunload",t[6]),i=!0)},p(a,[o]){a[0]&&a[4]&&a[1]?s?(s.p(a,o),o&19&&j(s,1)):(s=sa(a),s.c(),j(s,1),s.m(n.parentNode,n)):s&&(Nn(),V(s,1,1,()=>{s=null}),Cn())},i(a){e||(j(s),e=!0)},o(a){V(s),e=!1},d(a){a&&x(n),s&&s.d(a),i=!1,r()}}}function kh(t,n,e){let i;Ft(t,wr,p=>e(5,i=p));let{saveSlot:r}=n,{world:s}=n,a=new wh,{viewport:o}=n,{bookmarks:u=[]}=n;hi(async()=>{await a.init();const p=Uf(r);e(0,s=p.world),e(1,o=p.viewport??new Rr(s)),e(2,u=p.bookmarks??[]),s.addEventListener("sound_unflag",()=>{a.playSound("unflag")}),s.addEventListener("sound_reveal",({data:m})=>{a.playSound("reveal",m/10+.9)}),s.addEventListener("sound_explosion",()=>{a.playSound("explosion")})}),di(()=>{s.destroyDispatcher(),o.destroyDispatcher(),location.reload()});const l=()=>{zf(r,{world:s,viewport:o,bookmarks:u})},f=p=>{p.detail.type=="reveal"?s.reveal(p.detail.pos.x,p.detail.pos.y):p.detail.type=="flag"?s.flag(p.detail.pos.x,p.detail.pos.y):p.detail.type=="reset"&&s.reset(p.detail.pos.x,p.detail.pos.y)};return t.$$set=p=>{"saveSlot"in p&&e(3,r=p.saveSlot),"world"in p&&e(0,s=p.world),"viewport"in p&&e(1,o=p.viewport),"bookmarks"in p&&e(2,u=p.bookmarks)},t.$$.update=()=>{t.$$.dirty&32&&e(4,a.volume=i,a)},[s,o,u,r,a,i,l,f]}class Eh extends ye{constructor(n){super(),ke(this,n,kh,yh,ve,{saveSlot:3,world:0,viewport:1,bookmarks:2})}}/**
 * @license lucide-svelte v0.372.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Th={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":2,"stroke-linecap":"round","stroke-linejoin":"round"},aa=Th;function oa(t,n,e){const i=t.slice();return i[10]=n[e][0],i[11]=n[e][1],i}function rr(t){let n,e=[t[11]],i={};for(let r=0;r<e.length;r+=1)i=fe(i,e[r]);return{c(){n=ya(t[10]),this.h()},l(r){n=ka(r,t[10],{}),Z(n).forEach(x),this.h()},h(){li(n,i)},m(r,s){X(r,n,s)},p(r,s){li(n,i=_t(e,[s&32&&r[11]]))},d(r){r&&x(n)}}}function la(t){let n=t[10],e,i=t[10]&&rr(t);return{c(){i&&i.c(),e=Qe()},l(r){i&&i.l(r),e=Qe()},m(r,s){i&&i.m(r,s),X(r,e,s)},p(r,s){r[10]?n?ve(n,r[10])?(i.d(1),i=rr(r),n=r[10],i.c(),i.m(e.parentNode,e)):i.p(r,s):(i=rr(r),n=r[10],i.c(),i.m(e.parentNode,e)):n&&(i.d(1),i=null,n=r[10])},d(r){r&&x(e),i&&i.d(r)}}}function Ih(t){let n,e,i,r,s,a=Qt(t[5]),o=[];for(let m=0;m<a.length;m+=1)o[m]=la(oa(t,a,m));const u=t[9].default,l=Le(u,t,t[8],null);let f=[aa,t[6],{width:t[2]},{height:t[2]},{stroke:t[1]},{"stroke-width":i=t[4]?Number(t[3])*24/Number(t[2]):t[3]},{class:r=`lucide-icon lucide lucide-${t[0]} ${t[7].class??""}`}],p={};for(let m=0;m<f.length;m+=1)p=fe(p,f[m]);return{c(){n=ya("svg");for(let m=0;m<o.length;m+=1)o[m].c();e=Qe(),l&&l.c(),this.h()},l(m){n=ka(m,"svg",{width:!0,height:!0,stroke:!0,"stroke-width":!0,class:!0});var d=Z(n);for(let b=0;b<o.length;b+=1)o[b].l(d);e=Qe(),l&&l.l(d),d.forEach(x),this.h()},h(){li(n,p)},m(m,d){X(m,n,d);for(let b=0;b<o.length;b+=1)o[b]&&o[b].m(n,null);$(n,e),l&&l.m(n,null),s=!0},p(m,[d]){if(d&32){a=Qt(m[5]);let b;for(b=0;b<a.length;b+=1){const w=oa(m,a,b);o[b]?o[b].p(w,d):(o[b]=la(w),o[b].c(),o[b].m(n,e))}for(;b<o.length;b+=1)o[b].d(1);o.length=a.length}l&&l.p&&(!s||d&256)&&Ue(l,u,m,m[8],s?Fe(u,m[8],d,null):ze(m[8]),null),li(n,p=_t(f,[aa,d&64&&m[6],(!s||d&4)&&{width:m[2]},(!s||d&4)&&{height:m[2]},(!s||d&2)&&{stroke:m[1]},(!s||d&28&&i!==(i=m[4]?Number(m[3])*24/Number(m[2]):m[3]))&&{"stroke-width":i},(!s||d&129&&r!==(r=`lucide-icon lucide lucide-${m[0]} ${m[7].class??""}`))&&{class:r}]))},i(m){s||(j(l,m),s=!0)},o(m){V(l,m),s=!1},d(m){m&&x(n),yr(o,m),l&&l.d(m)}}}function Sh(t,n,e){const i=["name","color","size","strokeWidth","absoluteStrokeWidth","iconNode"];let r=ss(n,i),{$$slots:s={},$$scope:a}=n,{name:o}=n,{color:u="currentColor"}=n,{size:l=24}=n,{strokeWidth:f=2}=n,{absoluteStrokeWidth:p=!1}=n,{iconNode:m}=n;return t.$$set=d=>{e(7,n=fe(fe({},n),Pe(d))),e(6,r=ss(n,i)),"name"in d&&e(0,o=d.name),"color"in d&&e(1,u=d.color),"size"in d&&e(2,l=d.size),"strokeWidth"in d&&e(3,f=d.strokeWidth),"absoluteStrokeWidth"in d&&e(4,p=d.absoluteStrokeWidth),"iconNode"in d&&e(5,m=d.iconNode),"$$scope"in d&&e(8,a=d.$$scope)},n=Pe(n),[o,u,l,f,p,m,r,n,a,s]}class Bt extends ye{constructor(n){super(),ke(this,n,Sh,Ih,ve,{name:0,color:1,size:2,strokeWidth:3,absoluteStrokeWidth:4,iconNode:5})}}function Ph(t){let n;const e=t[2].default,i=Le(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?Fe(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function Ah(t){let n,e;const i=[{name:"info"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Ph]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=fe(r,i[s]);return n=new Bt({props:r}),{c(){oe(n.$$.fragment)},l(s){le(n.$$.fragment,s)},m(s,a){ce(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Dt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){ue(n,s)}}}function xh(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["circle",{cx:"12",cy:"12",r:"10"}],["path",{d:"M12 16v-4"}],["path",{d:"M12 8h.01"}]];return t.$$set=a=>{e(1,n=fe(fe({},n),Pe(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Pe(n),[s,n,i,r]}class Nh extends ye{constructor(n){super(),ke(this,n,xh,Ah,ve,{})}}function ca(t){let n,e,i,r,s,a,o=t[1]&&ua(t);const u=t[4].default,l=Le(u,t,t[3],null);return{c(){n=R("div"),e=R("div"),o&&o.c(),i=se(),r=R("div"),s=R("div"),l&&l.c(),this.h()},l(f){n=L(f,"DIV",{class:!0});var p=Z(n);e=L(p,"DIV",{class:!0});var m=Z(e);o&&o.l(m),m.forEach(x),i=ae(p),r=L(p,"DIV",{class:!0});var d=Z(r);s=L(d,"DIV",{class:!0});var b=Z(s);l&&l.l(b),b.forEach(x),d.forEach(x),p.forEach(x),this.h()},h(){B(e,"class","modal-background svelte-9y1m1s"),Jt(e,"modal-background-styled",t[2]),B(s,"class","pointer-events-auto"),B(r,"class","modal-content flex justify-center items-center pointer-events-none p-8 svelte-9y1m1s"),B(n,"class","modal force-overlap svelte-9y1m1s")},m(f,p){X(f,n,p),$(n,e),o&&o.m(e,null),$(n,i),$(n,r),$(r,s),l&&l.m(s,null),a=!0},p(f,p){f[1]?o?o.p(f,p):(o=ua(f),o.c(),o.m(e,null)):o&&(o.d(1),o=null),(!a||p&4)&&Jt(e,"modal-background-styled",f[2]),l&&l.p&&(!a||p&8)&&Ue(l,u,f,f[3],a?Fe(u,f[3],p,null):ze(f[3]),null)},i(f){a||(j(l,f),a=!0)},o(f){V(l,f),a=!1},d(f){f&&x(n),o&&o.d(),l&&l.d(f)}}}function ua(t){let n,e,i;return{c(){n=R("button"),this.h()},l(r){n=L(r,"BUTTON",{class:!0,"aria-label":!0}),Z(n).forEach(x),this.h()},h(){B(n,"class","w-full h-full"),B(n,"aria-label","Close Modal")},m(r,s){X(r,n,s),e||(i=ge(n,"click",t[5]),e=!0)},p:Me,d(r){r&&x(n),e=!1,i()}}}function Ch(t){let n,e,i=t[0]&&ca(t);return{c(){i&&i.c(),n=Qe()},l(r){i&&i.l(r),n=Qe()},m(r,s){i&&i.m(r,s),X(r,n,s),e=!0},p(r,[s]){r[0]?i?(i.p(r,s),s&1&&j(i,1)):(i=ca(r),i.c(),j(i,1),i.m(n.parentNode,n)):i&&(Nn(),V(i,1,1,()=>{i=null}),Cn())},i(r){e||(j(i),e=!0)},o(r){V(i),e=!1},d(r){r&&x(n),i&&i.d(r)}}}function Mh(t,n,e){let{$$slots:i={},$$scope:r}=n,{visible:s=!1}=n,{closable:a=!0}=n,{backgroundStyle:o=!0}=n;const u=()=>e(0,s=!1);return t.$$set=l=>{"visible"in l&&e(0,s=l.visible),"closable"in l&&e(1,a=l.closable),"backgroundStyle"in l&&e(2,o=l.backgroundStyle),"$$scope"in l&&e(3,r=l.$$scope)},[s,a,o,r,i,u]}class sr extends ye{constructor(n){super(),ke(this,n,Mh,Ch,ve,{visible:0,closable:1,backgroundStyle:2})}}function Dh(t){let n;const e=t[2].default,i=Le(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?Fe(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function Oh(t){let n,e;const i=[{name:"chevron-left"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Dh]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=fe(r,i[s]);return n=new Bt({props:r}),{c(){oe(n.$$.fragment)},l(s){le(n.$$.fragment,s)},m(s,a){ce(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Dt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){ue(n,s)}}}function Bh(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"m15 18-6-6 6-6"}]];return t.$$set=a=>{e(1,n=fe(fe({},n),Pe(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Pe(n),[s,n,i,r]}class $h extends ye{constructor(n){super(),ke(this,n,Bh,Oh,ve,{})}}function Rh(t){let n;const e=t[2].default,i=Le(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?Fe(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function Lh(t){let n,e;const i=[{name:"chevron-right"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Rh]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=fe(r,i[s]);return n=new Bt({props:r}),{c(){oe(n.$$.fragment)},l(s){le(n.$$.fragment,s)},m(s,a){ce(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Dt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){ue(n,s)}}}function Uh(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"m9 18 6-6-6-6"}]];return t.$$set=a=>{e(1,n=fe(fe({},n),Pe(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Pe(n),[s,n,i,r]}class zh extends ye{constructor(n){super(),ke(this,n,Uh,Lh,ve,{})}}function Fh(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_strawberry_screenshot.png" alt="Strawberry Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Strawberry</h2> <div class="biome-description svelte-1pkhcy2">Tile nearby mine count may have 2 values.
                        <br/><br/>
                        Be careful while revealing tiles; If any of the two values match, the tiles will auto reveal.</div></div>`;return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Se(n)!=="svelte-1hn2487"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function Hh(t){let n,e='<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_blueberry_screenshot.png" alt="Blueberry Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Blueberry</h2> <div class="biome-description svelte-1pkhcy2">Tiles may have up to 3 mines.</div></div>';return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Se(n)!=="svelte-1pq8aco"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function jh(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_stroopwafel_screenshot.png" alt="Stroopwafel Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Stroopwafel</h2> <div class="biome-description svelte-1pkhcy2">3x3 checkers of tiles.<br/>
                        Dark checkered sections have 8 mines.<br/>
                        Light checkered sections have 1 mine.</div></div>`;return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Se(n)!=="svelte-4cbz83"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function Zh(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_waffle_screenshot.png" alt="Waffle Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Waffle</h2> <div class="biome-description svelte-1pkhcy2">2x2 checkers of tiles.<br/>
                        Dark checkered sections have 3 mines.<br/>
                        Light checkered sections have 1 mine.</div></div>`;return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Se(n)!=="svelte-1ji8mo3"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function Vh(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_chocolate_screenshot.png" alt="Chocolate Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Chocolate</h2> <div class="biome-description svelte-1pkhcy2">The standard Minesweeper rules.<br/>
                        Much more mines than Vanilla biome.</div></div>`;return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Se(n)!=="svelte-gc9i28"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function Yh(t){let n,e='<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_vanilla_screenshot.png" alt="Vanilla Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Vanilla</h2> <div class="biome-description svelte-1pkhcy2">The standard Minesweeper rules.</div></div>';return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Se(n)!=="svelte-ic5bha"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function Xh(t){let n,e,i,r,s,a,o,u,l,f,p,m;function d(y,S){if(y[0]=="Vanilla")return Yh;if(y[0]=="Chocolate")return Vh;if(y[0]=="Waffle")return Zh;if(y[0]=="Stroopwafel")return jh;if(y[0]=="Blueberry")return Hh;if(y[0]=="Strawberry")return Fh}let b=d(t),w=b&&b(t);return a=new $h({}),l=new zh({}),{c(){n=R("div"),e=R("div"),w&&w.c(),i=se(),r=R("div"),s=R("button"),oe(a.$$.fragment),o=se(),u=R("button"),oe(l.$$.fragment),this.h()},l(y){n=L(y,"DIV",{class:!0});var S=Z(n);e=L(S,"DIV",{class:!0});var v=Z(e);w&&w.l(v),v.forEach(x),i=ae(S),r=L(S,"DIV",{class:!0});var D=Z(r);s=L(D,"BUTTON",{class:!0});var T=Z(s);le(a.$$.fragment,T),T.forEach(x),o=ae(D),u=L(D,"BUTTON",{class:!0});var O=Z(u);le(l.$$.fragment,O),O.forEach(x),D.forEach(x),S.forEach(x),this.h()},h(){B(e,"class","pointer-events-auto px-12"),B(s,"class","pointer-events-auto pl-4 hover:-translate-x-1 transition-transform"),B(u,"class","pointer-events-auto pr-4 hover:translate-x-1 transition-transform"),B(r,"class","pointer-events-none flex justify-between z-10"),B(n,"class","w-full h-full force-overlap text-white")},m(y,S){X(y,n,S),$(n,e),w&&w.m(e,null),$(n,i),$(n,r),$(r,s),ce(a,s,null),$(r,o),$(r,u),ce(l,u,null),f=!0,p||(m=[ge(s,"click",t[2]),ge(u,"click",t[3])],p=!0)},p(y,[S]){b!==(b=d(y))&&(w&&w.d(1),w=b&&b(y),w&&(w.c(),w.m(e,null)))},i(y){f||(j(a.$$.fragment,y),j(l.$$.fragment,y),f=!0)},o(y){V(a.$$.fragment,y),V(l.$$.fragment,y),f=!1},d(y){y&&x(n),w&&w.d(),ue(a),ue(l),p=!1,sn(m)}}}function Wh(t,n,e){const i=["Vanilla","Chocolate","Waffle","Stroopwafel","Blueberry","Strawberry"];let r="Vanilla";function s(u){let l=i.indexOf(r);l+=u=="next"?1:-1,l>=i.length&&(l=0),l<0&&(l=i.length-1),e(0,r=i[l])}return[r,s,u=>{u.preventDefault(),s("prev")},u=>{u.preventDefault(),s("next")}]}class Gh extends ye{constructor(n){super(),ke(this,n,Wh,Xh,ve,{})}}function fa(t,n,e){const i=t.slice();return i[4]=n[e],i}function ha(t){let n,e=t[4]+"",i,r,s,a,o;function u(){return t[3](t[4])}return{c(){n=R("button"),i=ut(e),r=se(),this.h()},l(l){n=L(l,"BUTTON",{class:!0});var f=Z(n);i=ft(f,e),r=ae(f),f.forEach(x),this.h()},h(){B(n,"class","tab w-full flex justify-center py-1 px-4 rounded-md svelte-1v0way8"),n.disabled=s=t[4]==t[0],Jt(n,"selected",t[4]==t[0])},m(l,f){X(l,n,f),$(n,i),$(n,r),a||(o=ge(n,"click",u),a=!0)},p(l,f){t=l,f&1&&s!==(s=t[4]==t[0])&&(n.disabled=s),f&5&&Jt(n,"selected",t[4]==t[0])},d(l){l&&x(n),a=!1,o()}}}function Kh(t){let n;function e(s,a){return s[1]=="mouse"?nd:s[1]=="keyboard"?td:s[1]=="touch"?ed:Qh}let i=e(t),r=i(t);return{c(){n=R("div"),r.c(),this.h()},l(s){n=L(s,"DIV",{class:!0});var a=Z(n);r.l(a),a.forEach(x),this.h()},h(){B(n,"class","px-4")},m(s,a){X(s,n,a),r.m(n,null)},p(s,a){i!==(i=e(s))&&(r.d(1),r=i(s),r&&(r.c(),r.m(n,null)))},i:Me,o:Me,d(s){s&&x(n),r.d()}}}function qh(t){let n,e,i;return e=new Gh({}),{c(){n=R("div"),oe(e.$$.fragment),this.h()},l(r){n=L(r,"DIV",{class:!0});var s=Z(n);le(e.$$.fragment,s),s.forEach(x),this.h()},h(){B(n,"class","w-full h-full inline")},m(r,s){X(r,n,s),ce(e,n,null),i=!0},p:Me,i(r){i||(j(e.$$.fragment,r),i=!0)},o(r){V(e.$$.fragment,r),i=!1},d(r){r&&x(n),ue(e)}}}function Jh(t){let n,e=`<div><a class="text-2xl font-bold" href="https://vulae.github.io/infinite-minesweeper">Infinite Minesweeper</a> <br/>
                    An infinite twist on Minesweeper that adds biomes that change the rules of the game.</div> <div class="pt-4"><span class="float-right text-xs font-extrabold">*Source code available on
                        <a class="underline" href="https://github.com/Vulae/infinite-minesweeper">GitHub</a></span></div>`;return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Se(n)!=="svelte-1yloiaf"&&(n.innerHTML=e),this.h()},h(){B(n,"class","px-4 w-full h-full flex flex-col justify-between")},m(i,r){X(i,n,r)},p:Me,i:Me,o:Me,d(i){i&&x(n)}}}function Qh(t){let n,e="Unknown control method.";return{c(){n=R("span"),n.textContent=e},l(i){n=L(i,"SPAN",{"data-svelte-h":!0}),Se(n)!=="svelte-1yl4tvk"&&(n.textContent=e)},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function ed(t){let n,e=`<h1 class="font-bold text-2xl">Touch Controls</h1>
                        Double Tap: Reveal tile
                        <br/>
                        Single Tap: Flag tile
                        <br/>
                        Pan: Move view
                        <br/>
                        Pinch: Zoom view`;return{c(){n=R("span"),n.innerHTML=e},l(i){n=L(i,"SPAN",{"data-svelte-h":!0}),Se(n)!=="svelte-1ukp1tk"&&(n.innerHTML=e)},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function td(t){let n,e=`<h1 class="font-bold text-2xl">Keyboard Controls</h1>
                        Keyboard control method not yet supported.`;return{c(){n=R("span"),n.innerHTML=e},l(i){n=L(i,"SPAN",{"data-svelte-h":!0}),Se(n)!=="svelte-1rw6f38"&&(n.innerHTML=e)},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function nd(t){let n,e=`<h1 class="font-bold text-2xl">Mouse Controls</h1>
                        Left Click: Reveal tile
                        <br/>
                        Right Click: Flag tile
                        <br/>
                        Left Click Drag: Move view
                        <br/>
                        Scroll Wheel: Zoom view`;return{c(){n=R("span"),n.innerHTML=e},l(i){n=L(i,"SPAN",{"data-svelte-h":!0}),Se(n)!=="svelte-k2yzda"&&(n.innerHTML=e)},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function id(t){let n,e,i,r,s,a,o,u,l,f=Qt(t[2]),p=[];for(let w=0;w<f.length;w+=1)p[w]=ha(fa(t,f,w));const m=[Jh,qh,Kh],d=[];function b(w,y){return w[0]=="Information"?0:w[0]=="Biomes"?1:w[0]=="Controls"?2:-1}return~(o=b(t))&&(u=d[o]=m[o](t)),{c(){n=R("div"),e=R("div");for(let w=0;w<p.length;w+=1)p[w].c();i=se(),r=R("div"),s=se(),a=R("div"),u&&u.c(),this.h()},l(w){n=L(w,"DIV",{class:!0});var y=Z(n);e=L(y,"DIV",{class:!0});var S=Z(e);for(let D=0;D<p.length;D+=1)p[D].l(S);S.forEach(x),i=ae(y),r=L(y,"DIV",{class:!0}),Z(r).forEach(x),s=ae(y),a=L(y,"DIV",{class:!0});var v=Z(a);u&&u.l(v),v.forEach(x),y.forEach(x),this.h()},h(){B(e,"class","px-4 grid grid-flow-col gap-4 items-center font-bold"),B(r,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full"),B(a,"class","w-[32rem] h-64 py-2 font-semibold"),B(n,"class","grid px-4 py-2 rounded-2xl bg-white bg-opacity-50")},m(w,y){X(w,n,y),$(n,e);for(let S=0;S<p.length;S+=1)p[S]&&p[S].m(e,null);$(n,i),$(n,r),$(n,s),$(n,a),~o&&d[o].m(a,null),l=!0},p(w,[y]){if(y&5){f=Qt(w[2]);let v;for(v=0;v<f.length;v+=1){const D=fa(w,f,v);p[v]?p[v].p(D,y):(p[v]=ha(D),p[v].c(),p[v].m(e,null))}for(;v<p.length;v+=1)p[v].d(1);p.length=f.length}let S=o;o=b(w),o===S?~o&&d[o].p(w,y):(u&&(Nn(),V(d[S],1,1,()=>{d[S]=null}),Cn()),~o?(u=d[o],u?u.p(w,y):(u=d[o]=m[o](w),u.c()),j(u,1),u.m(a,null)):u=null)},i(w){l||(j(u),l=!0)},o(w){V(u),l=!1},d(w){w&&x(n),yr(p,w),~o&&d[o].d()}}}function rd(t,n,e){let i;Ft(t,xn,o=>e(1,i=o));const r=["Information","Biomes","Controls"];let s="Information";return[s,i,r,o=>e(0,s=o)]}class sd extends ye{constructor(n){super(),ke(this,n,rd,id,ve,{})}}function ad(t){let n;const e=t[2].default,i=Le(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?Fe(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function od(t){let n,e;const i=[{name:"skull"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[ad]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=fe(r,i[s]);return n=new Bt({props:r}),{c(){oe(n.$$.fragment)},l(s){le(n.$$.fragment,s)},m(s,a){ce(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Dt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){ue(n,s)}}}function ld(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["circle",{cx:"9",cy:"12",r:"1"}],["circle",{cx:"15",cy:"12",r:"1"}],["path",{d:"M8 20v2h8v-2"}],["path",{d:"m12.5 17-.5-1-.5 1h1z"}],["path",{d:"M16 20a2 2 0 0 0 1.56-3.25 8 8 0 1 0-11.12 0A2 2 0 0 0 8 20"}]];return t.$$set=a=>{e(1,n=fe(fe({},n),Pe(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Pe(n),[s,n,i,r]}class cd extends ye{constructor(n){super(),ke(this,n,ld,od,ve,{})}}function ud(t){let n,e,i,r,s,a,o;return e=new cd({}),{c(){n=R("div"),oe(e.$$.fragment),i=se(),r=R("span"),s=ut(t[1]),this.h()},l(u){n=L(u,"DIV",{class:!0,title:!0});var l=Z(n);le(e.$$.fragment,l),i=ae(l),r=L(l,"SPAN",{class:!0});var f=Z(r);s=ft(f,t[1]),f.forEach(x),l.forEach(x),this.h()},h(){B(r,"class","text-sm"),B(n,"class","flex items-center"),B(n,"title",a=t[1]+" deaths"),qe(n,"flex-direction",t[0]=="horizontal"?"row":"column")},m(u,l){X(u,n,l),ce(e,n,null),$(n,i),$(n,r),$(r,s),o=!0},p(u,[l]){(!o||l&2)&&si(s,u[1]),(!o||l&2&&a!==(a=u[1]+" deaths"))&&B(n,"title",a),l&1&&qe(n,"flex-direction",u[0]=="horizontal"?"row":"column")},i(u){o||(j(e.$$.fragment,u),o=!0)},o(u){V(e.$$.fragment,u),o=!1},d(u){u&&x(n),ue(e)}}}function fd(t,n,e){let{layout:i}=n,{world:r}=n,s,a=0,o=null;return t.$$set=u=>{"layout"in u&&e(0,i=u.layout),"world"in u&&e(2,r=u.world)},t.$$.update=()=>{t.$$.dirty&28&&r&&(o==null||o.removeEventListener(s),e(1,a=r.deaths),e(3,s=r.addEventListener("die",()=>{e(1,a=r.deaths)})),e(4,o=r))},[i,a,r,s,o]}class hd extends ye{constructor(n){super(),ke(this,n,fd,ud,ve,{layout:0,world:2})}}function dd(t){let n;const e=t[2].default,i=Le(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?Fe(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function _d(t){let n,e;const i=[{name:"plus"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[dd]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=fe(r,i[s]);return n=new Bt({props:r}),{c(){oe(n.$$.fragment)},l(s){le(n.$$.fragment,s)},m(s,a){ce(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Dt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){ue(n,s)}}}function md(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"M5 12h14"}],["path",{d:"M12 5v14"}]];return t.$$set=a=>{e(1,n=fe(fe({},n),Pe(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Pe(n),[s,n,i,r]}class pd extends ye{constructor(n){super(),ke(this,n,md,_d,ve,{})}}function bd(t){let n;const e=t[2].default,i=Le(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?Fe(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function gd(t){let n,e;const i=[{name:"bookmark-minus"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[bd]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=fe(r,i[s]);return n=new Bt({props:r}),{c(){oe(n.$$.fragment)},l(s){le(n.$$.fragment,s)},m(s,a){ce(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Dt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){ue(n,s)}}}function vd(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"}],["line",{x1:"15",x2:"9",y1:"10",y2:"10"}]];return t.$$set=a=>{e(1,n=fe(fe({},n),Pe(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Pe(n),[s,n,i,r]}class wd extends ye{constructor(n){super(),ke(this,n,vd,gd,ve,{})}}function da(t,n,e){const i=t.slice();return i[9]=n[e],i[11]=e,i}function _a(t){let n;return{c(){n=R("div"),this.h()},l(e){n=L(e,"DIV",{class:!0}),Z(n).forEach(x),this.h()},h(){B(n,"class","w-full h-0.5 bg-black bg-opacity-50 my-1 rounded-full svelte-1wmwp0k")},m(e,i){X(e,n,i)},d(e){e&&x(n)}}}function ma(t){let n,e,i,r=t[9].createdAt.toLocaleDateString()+"",s,a,o=t[9].createdAt.toLocaleTimeString()+"",u,l,f,p=t[9].name+"",m,d,b,w,y,S,v,D,T;function O(){return t[5](t[9])}w=new wd({props:{size:"2rem"}});function Y(){return t[6](t[11])}let E=t[11]<t[0].length-1&&_a();return{c(){n=R("li"),e=R("button"),i=R("span"),s=ut(r),a=se(),u=ut(o),l=se(),f=R("div"),m=ut(p),d=se(),b=R("button"),oe(w.$$.fragment),y=se(),E&&E.c(),S=Qe(),this.h()},l(M){n=L(M,"LI",{class:!0});var P=Z(n);e=L(P,"BUTTON",{class:!0});var k=Z(e);i=L(k,"SPAN",{class:!0});var U=Z(i);s=ft(U,r),a=ae(U),u=ft(U,o),U.forEach(x),l=ae(k),f=L(k,"DIV",{class:!0});var z=Z(f);m=ft(z,p),z.forEach(x),k.forEach(x),d=ae(P),b=L(P,"BUTTON",{class:!0,title:!0});var K=Z(b);le(w.$$.fragment,K),K.forEach(x),P.forEach(x),y=ae(M),E&&E.l(M),S=Qe(),this.h()},h(){B(i,"class","text-xs font-normal svelte-1wmwp0k"),B(f,"class","text-xl font-bold svelte-1wmwp0k"),B(e,"class","flex flex-col ml-4 hover:text-blue-800 transition-colors svelte-1wmwp0k"),B(b,"class","hover:text-red-900 transition-colors svelte-1wmwp0k"),B(b,"title","Remove Bookmark"),B(n,"class","flex justify-between items-center svelte-1wmwp0k")},m(M,P){X(M,n,P),$(n,e),$(e,i),$(i,s),$(i,a),$(i,u),$(e,l),$(e,f),$(f,m),$(n,d),$(n,b),ce(w,b,null),X(M,y,P),E&&E.m(M,P),X(M,S,P),v=!0,D||(T=[ge(e,"click",O),ge(b,"click",Y)],D=!0)},p(M,P){t=M,(!v||P&1)&&r!==(r=t[9].createdAt.toLocaleDateString()+"")&&si(s,r),(!v||P&1)&&o!==(o=t[9].createdAt.toLocaleTimeString()+"")&&si(u,o),(!v||P&1)&&p!==(p=t[9].name+"")&&si(m,p),t[11]<t[0].length-1?E||(E=_a(),E.c(),E.m(S.parentNode,S)):E&&(E.d(1),E=null)},i(M){v||(j(w.$$.fragment,M),v=!0)},o(M){V(w.$$.fragment,M),v=!1},d(M){M&&(x(n),x(y),x(S)),ue(w),E&&E.d(M),D=!1,sn(T)}}}function pa(t){let n,e="You have no bookmarks.";return{c(){n=R("li"),n.textContent=e,this.h()},l(i){n=L(i,"LI",{class:!0,"data-svelte-h":!0}),Se(n)!=="svelte-1r3ii7r"&&(n.textContent=e),this.h()},h(){B(n,"class","text-xl font-bold svelte-1wmwp0k")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function yd(t){let n,e,i="Bookmarks",r,s,a,o,u,l,f,p,m,d,b,w,y,S,v,D,T=Qt(t[0]),O=[];for(let M=0;M<T.length;M+=1)O[M]=ma(da(t,T,M));const Y=M=>V(O[M],1,1,()=>{O[M]=null});let E=t[0].length==0&&pa();return y=new pd({props:{size:"2rem"}}),{c(){n=R("div"),e=R("span"),e.textContent=i,r=se(),s=R("div"),a=se(),o=R("ul");for(let M=0;M<O.length;M+=1)O[M].c();u=se(),E&&E.c(),l=se(),f=R("div"),p=se(),m=R("form"),d=R("input"),b=se(),w=R("button"),oe(y.$$.fragment),this.h()},l(M){n=L(M,"DIV",{class:!0});var P=Z(n);e=L(P,"SPAN",{class:!0,"data-svelte-h":!0}),Se(e)!=="svelte-3bkqky"&&(e.textContent=i),r=ae(P),s=L(P,"DIV",{class:!0}),Z(s).forEach(x),a=ae(P),o=L(P,"UL",{class:!0});var k=Z(o);for(let K=0;K<O.length;K+=1)O[K].l(k);u=ae(k),E&&E.l(k),k.forEach(x),l=ae(P),f=L(P,"DIV",{class:!0}),Z(f).forEach(x),p=ae(P),m=L(P,"FORM",{class:!0});var U=Z(m);d=L(U,"INPUT",{placeholder:!0,type:!0,maxlength:!0,class:!0}),b=ae(U),w=L(U,"BUTTON",{type:!0,title:!0,class:!0});var z=Z(w);le(y.$$.fragment,z),z.forEach(x),U.forEach(x),P.forEach(x),this.h()},h(){B(e,"class","text-2xl font-bold text-center svelte-1wmwp0k"),B(s,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full svelte-1wmwp0k"),B(o,"class","p-2 max-h-96 overflow-y-auto svelte-1wmwp0k"),B(f,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full svelte-1wmwp0k"),B(d,"placeholder","New Bookmark"),B(d,"type","text"),B(d,"maxlength","16"),B(d,"class","w-48 px-2 rounded-md svelte-1wmwp0k"),B(w,"type","submit"),B(w,"title","Create Bookmark"),B(w,"class","flex hover:text-green-900 transition-colors svelte-1wmwp0k"),B(m,"class","flex justify-between gap-4 px-2 pb-2 svelte-1wmwp0k"),B(n,"class","grid px-4 py-2 rounded-2xl bg-white bg-opacity-50 svelte-1wmwp0k")},m(M,P){X(M,n,P),$(n,e),$(n,r),$(n,s),$(n,a),$(n,o);for(let k=0;k<O.length;k+=1)O[k]&&O[k].m(o,null);$(o,u),E&&E.m(o,null),$(n,l),$(n,f),$(n,p),$(n,m),$(m,d),t[7](d),$(m,b),$(m,w),ce(y,w,null),S=!0,v||(D=[ge(d,"keydown",cl(t[4])),ge(m,"submit",t[8])],v=!0)},p(M,[P]){if(P&7){T=Qt(M[0]);let k;for(k=0;k<T.length;k+=1){const U=da(M,T,k);O[k]?(O[k].p(U,P),j(O[k],1)):(O[k]=ma(U),O[k].c(),j(O[k],1),O[k].m(o,u))}for(Nn(),k=T.length;k<O.length;k+=1)Y(k);Cn()}M[0].length==0?E||(E=pa(),E.c(),E.m(o,null)):E&&(E.d(1),E=null)},i(M){if(!S){for(let P=0;P<T.length;P+=1)j(O[P]);j(y.$$.fragment,M),S=!0}},o(M){O=O.filter(Boolean);for(let P=0;P<O.length;P+=1)V(O[P]);V(y.$$.fragment,M),S=!1},d(M){M&&x(n),yr(O,M),E&&E.d(),t[7](null),ue(y),v=!1,sn(D)}}}function kd(t,n,e){let{viewport:i}=n,{bookmarks:r}=n,s,{visible:a}=n;function o(m){ba.call(this,t,m)}const u=m=>{i.load(m.viewport),i.change(),e(1,a=!1)},l=m=>{r==null||r.splice(m,1),e(0,r)};function f(m){$e[m?"unshift":"push"](()=>{s=m,e(3,s)})}const p=()=>{s.value.length!=0&&(r==null||r.push({name:s.value,createdAt:new Date,viewport:i.save()}),e(0,r),e(3,s.value="",s))};return t.$$set=m=>{"viewport"in m&&e(2,i=m.viewport),"bookmarks"in m&&e(0,r=m.bookmarks),"visible"in m&&e(1,a=m.visible)},[r,a,i,s,o,u,l,f,p]}class Ed extends ye{constructor(n){super(),ke(this,n,kd,yd,ve,{viewport:2,bookmarks:0,visible:1})}}function Td(t){let n;const e=t[2].default,i=Le(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?Fe(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function Id(t){let n,e;const i=[{name:"bookmark"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Td]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=fe(r,i[s]);return n=new Bt({props:r}),{c(){oe(n.$$.fragment)},l(s){le(n.$$.fragment,s)},m(s,a){ce(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Dt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){ue(n,s)}}}function Sd(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"}]];return t.$$set=a=>{e(1,n=fe(fe({},n),Pe(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Pe(n),[s,n,i,r]}class Pd extends ye{constructor(n){super(),ke(this,n,Sd,Id,ve,{})}}function Ad(t){let n;return{c(){n=ut("ARE YOU SURE?")},l(e){n=ft(e,"ARE YOU SURE?")},m(e,i){X(e,n,i)},d(e){e&&x(n)}}}function xd(t){let n;return{c(){n=ut("CLEAR SAVE")},l(e){n=ft(e,"CLEAR SAVE")},m(e,i){X(e,n,i)},d(e){e&&x(n)}}}function Nd(t){let n,e,i="Settings",r,s,a,o,u,l,f,p,m="Mouse",d,b="Touch",w,y,S,v,D,T,O,Y,E,M,P,k,U;function z(q,_e){return q[2]?Ad:xd}let K=z(t),ne=K(t);return{c(){n=R("div"),e=R("span"),e.textContent=i,r=se(),s=R("div"),a=se(),o=R("div"),u=R("div"),l=ut(`Input Method
            `),f=R("select"),p=R("option"),p.textContent=m,d=R("option"),d.textContent=b,w=se(),y=R("div"),S=ut(`Volume
            `),v=R("input"),T=se(),O=R("div"),Y=ut(`Display information on load
            `),E=R("input"),M=se(),P=R("button"),ne.c(),this.h()},l(q){n=L(q,"DIV",{class:!0});var _e=Z(n);e=L(_e,"SPAN",{class:!0,"data-svelte-h":!0}),Se(e)!=="svelte-1v23jpc"&&(e.textContent=i),r=ae(_e),s=L(_e,"DIV",{class:!0}),Z(s).forEach(x),a=ae(_e),o=L(_e,"DIV",{class:!0});var we=Z(o);u=L(we,"DIV",{class:!0});var De=Z(u);l=ft(De,`Input Method
            `),f=L(De,"SELECT",{});var He=Z(f);p=L(He,"OPTION",{"data-svelte-h":!0}),Se(p)!=="svelte-1o1urqg"&&(p.textContent=m),d=L(He,"OPTION",{"data-svelte-h":!0}),Se(d)!=="svelte-4sw168"&&(d.textContent=b),He.forEach(x),De.forEach(x),w=ae(we),y=L(we,"DIV",{class:!0});var te=Z(y);S=ft(te,`Volume
            `),v=L(te,"INPUT",{type:!0,min:!0,max:!0,step:!0,title:!0}),te.forEach(x),T=ae(we),O=L(we,"DIV",{class:!0});var Ce=Z(O);Y=ft(Ce,`Display information on load
            `),E=L(Ce,"INPUT",{type:!0}),Ce.forEach(x),M=ae(we),P=L(we,"BUTTON",{class:!0});var je=Z(P);ne.l(je),je.forEach(x),we.forEach(x),_e.forEach(x),this.h()},h(){B(e,"class","text-2xl font-bold text-center"),B(s,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full"),p.__value="mouse",as(p,p.__value),d.__value="touch",as(d,d.__value),t[3]===void 0&&ul(()=>t[6].call(f)),B(u,"class","flex justify-between items-center gap-3"),B(v,"type","range"),B(v,"min","0"),B(v,"max","1"),B(v,"step","0.05"),v.value=t[4],B(v,"title",D=Math.round(t[4]*100)+"% Volume"),B(y,"class","flex justify-between items-center gap-3"),B(E,"type","checkbox"),B(O,"class","flex justify-between items-center gap-3"),B(P,"class","bg-black font-bold text-red-500 rounded-lg py-1"),B(o,"class","p-2 max-h-96 overflow-y-auto flex flex-col gap-4 font-semibold"),B(n,"class","grid px-4 py-2 rounded-2xl bg-white bg-opacity-50")},m(q,_e){X(q,n,_e),$(n,e),$(n,r),$(n,s),$(n,a),$(n,o),$(o,u),$(u,l),$(u,f),$(f,p),$(f,d),os(f,t[3],!0),$(o,w),$(o,y),$(y,S),$(y,v),$(o,T),$(o,O),$(O,Y),$(O,E),E.checked=t[5],$(o,M),$(o,P),ne.m(P,null),k||(U=[ge(f,"change",t[6]),ge(v,"change",t[7]),ge(E,"change",t[8]),ge(P,"click",t[9])],k=!0)},p(q,[_e]){_e&8&&os(f,q[3]),_e&16&&(v.value=q[4]),_e&16&&D!==(D=Math.round(q[4]*100)+"% Volume")&&B(v,"title",D),_e&32&&(E.checked=q[5]),K!==(K=z(q))&&(ne.d(1),ne=K(q),ne&&(ne.c(),ne.m(P,null)))},i:Me,o:Me,d(q){q&&x(n),ne.d(),k=!1,sn(U)}}}const Cd=5e3;function Md(t,n,e){let i,r,s;Ft(t,xn,d=>e(3,i=d)),Ft(t,wr,d=>e(4,r=d)),Ft(t,vr,d=>e(5,s=d));let{saveSlot:a}=n,o=-1,u=!1;di(()=>{clearTimeout(o)});function l(){i=fl(this),xn.set(i)}const f=d=>{hl(wr,r=d.currentTarget.valueAsNumber,r)};function p(){s=this.checked,vr.set(s)}const m=()=>{u?(e(2,u=!1),Ff(a),location.reload()):(e(2,u=!0),e(1,o=setTimeout(()=>{e(2,u=!1)},Cd)))};return t.$$set=d=>{"saveSlot"in d&&e(0,a=d.saveSlot)},[a,o,u,i,r,s,l,f,p,m]}class Dd extends ye{constructor(n){super(),ke(this,n,Md,Nd,ve,{saveSlot:0})}}function Od(t){let n;const e=t[2].default,i=Le(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?Fe(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function Bd(t){let n,e;const i=[{name:"settings"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Od]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=fe(r,i[s]);return n=new Bt({props:r}),{c(){oe(n.$$.fragment)},l(s){le(n.$$.fragment,s)},m(s,a){ce(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Dt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){ue(n,s)}}}function $d(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"}],["circle",{cx:"12",cy:"12",r:"3"}]];return t.$$set=a=>{e(1,n=fe(fe({},n),Pe(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Pe(n),[s,n,i,r]}class Rd extends ye{constructor(n){super(),ke(this,n,$d,Bd,ve,{})}}function Ld(t){let n,e;return n=new sd({}),{c(){oe(n.$$.fragment)},l(i){le(n.$$.fragment,i)},m(i,r){ce(n,i,r),e=!0},i(i){e||(j(n.$$.fragment,i),e=!0)},o(i){V(n.$$.fragment,i),e=!1},d(i){ue(n,i)}}}function Ud(t){let n,e,i;function r(a){t[17](a)}let s={};return t[0]!==void 0&&(s.saveSlot=t[0]),n=new Dd({props:s}),$e.push(()=>kt(n,"saveSlot",r)),{c(){oe(n.$$.fragment)},l(a){le(n.$$.fragment,a)},m(a,o){ce(n,a,o),i=!0},p(a,o){const u={};!e&&o&1&&(e=!0,u.saveSlot=a[0],yt(()=>e=!1)),n.$set(u)},i(a){i||(j(n.$$.fragment,a),i=!0)},o(a){V(n.$$.fragment,a),i=!1},d(a){ue(n,a)}}}function zd(t){let n,e,i,r;function s(u){t[19](u)}function a(u){t[20](u)}let o={viewport:t[7]};return t[5]!==void 0&&(o.visible=t[5]),t[8]!==void 0&&(o.bookmarks=t[8]),n=new Ed({props:o}),$e.push(()=>kt(n,"visible",s)),$e.push(()=>kt(n,"bookmarks",a)),{c(){oe(n.$$.fragment)},l(u){le(n.$$.fragment,u)},m(u,l){ce(n,u,l),r=!0},p(u,l){const f={};l&128&&(f.viewport=u[7]),!e&&l&32&&(e=!0,f.visible=u[5],yt(()=>e=!1)),!i&&l&256&&(i=!0,f.bookmarks=u[8],yt(()=>i=!1)),n.$set(f)},i(u){r||(j(n.$$.fragment,u),r=!0)},o(u){V(n.$$.fragment,u),r=!1},d(u){ue(n,u)}}}function Fd(t){let n,e,i,r,s,a,o,u,l,f,p,m,d,b,w,y,S,v,D,T,O,Y,E,M,P,k,U,z,K,ne,q,_e,we,De,He;function te(C){t[9](C)}function Ce(C){t[10](C)}function je(C){t[11](C)}let It={saveSlot:t[0]};t[6]!==void 0&&(It.world=t[6]),t[7]!==void 0&&(It.viewport=t[7]),t[8]!==void 0&&(It.bookmarks=t[8]),i=new Eh({props:It}),$e.push(()=>kt(i,"world",te)),$e.push(()=>kt(i,"viewport",Ce)),$e.push(()=>kt(i,"bookmarks",je)),m=new Nh({}),w=new Rd({}),v=new Pd({}),Y=new hd({props:{layout:t[1],world:t[6]}});function tt(C){t[16](C)}let I={$$slots:{default:[Ld]},$$scope:{ctx:t}};t[3]!==void 0&&(I.visible=t[3]),P=new sr({props:I}),$e.push(()=>kt(P,"visible",tt));function H(C){t[18](C)}let J={$$slots:{default:[Ud]},$$scope:{ctx:t}};t[4]!==void 0&&(J.visible=t[4]),z=new sr({props:J}),$e.push(()=>kt(z,"visible",H));function be(C){t[21](C)}let ie={$$slots:{default:[zd]},$$scope:{ctx:t}};return t[5]!==void 0&&(ie.visible=t[5]),q=new sr({props:ie}),$e.push(()=>kt(q,"visible",be)),{c(){n=R("div"),e=R("div"),oe(i.$$.fragment),o=se(),u=R("div"),l=R("div"),f=R("div"),p=R("button"),oe(m.$$.fragment),d=se(),b=R("button"),oe(w.$$.fragment),y=se(),S=R("button"),oe(v.$$.fragment),D=se(),T=R("div"),O=se(),oe(Y.$$.fragment),M=se(),oe(P.$$.fragment),U=se(),oe(z.$$.fragment),ne=se(),oe(q.$$.fragment),this.h()},l(C){n=L(C,"DIV",{class:!0});var W=Z(n);e=L(W,"DIV",{class:!0});var Te=Z(e);le(i.$$.fragment,Te),Te.forEach(x),o=ae(W),u=L(W,"DIV",{class:!0});var Xe=Z(u);l=L(Xe,"DIV",{class:!0});var We=Z(l);f=L(We,"DIV",{class:!0});var Ee=Z(f);p=L(Ee,"BUTTON",{class:!0,title:!0});var Ae=Z(p);le(m.$$.fragment,Ae),Ae.forEach(x),d=ae(Ee),b=L(Ee,"BUTTON",{class:!0,title:!0});var rt=Z(b);le(w.$$.fragment,rt),rt.forEach(x),y=ae(Ee),S=L(Ee,"BUTTON",{class:!0,title:!0});var hn=Z(S);le(v.$$.fragment,hn),hn.forEach(x),D=ae(Ee),T=L(Ee,"DIV",{class:!0}),Z(T).forEach(x),O=ae(Ee),le(Y.$$.fragment,Ee),Ee.forEach(x),We.forEach(x),Xe.forEach(x),W.forEach(x),M=ae(C),le(P.$$.fragment,C),U=ae(C),le(z.$$.fragment,C),ne=ae(C),le(q.$$.fragment,C),this.h()},h(){B(e,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1"),B(p,"class","rounded-full drop-shadow-sm"),B(p,"title","Information"),B(b,"class","rounded-full drop-shadow-sm"),B(b,"title","Settings"),B(S,"class","rounded-full drop-shadow-sm"),B(S,"title","Bookmarks"),B(T,"class","w-full h-full bg-white rounded-full p-[1px]"),B(f,"class","pointer-events-auto flex items-center gap-2 rounded-full bg-white bg-opacity-30 backdrop-blur-md shadow-lg text-white font-bold stroke-[3]"),qe(f,"flex-direction",t[1]=="vertical"?"column":"row"),qe(f,"padding",t[1]=="vertical"?"1rem 0.5rem":"0.5rem 1rem"),B(l,"class","w-full h-full flex items-center p-4"),qe(l,"flex-direction",t[1]=="vertical"?"row":"column"),qe(l,"justify-content",t[2]=="start"?"start":"end"),B(u,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1 pointer-events-none"),qe(u,"opacity",t[3]||t[4]||t[5]?0:1),B(n,"class","w-screen h-screen grid grid-cols-1 grid-rows-1")},m(C,W){X(C,n,W),$(n,e),ce(i,e,null),$(n,o),$(n,u),$(u,l),$(l,f),$(f,p),ce(m,p,null),$(f,d),$(f,b),ce(w,b,null),$(f,y),$(f,S),ce(v,S,null),$(f,D),$(f,T),$(f,O),ce(Y,f,null),X(C,M,W),ce(P,C,W),X(C,U,W),ce(z,C,W),X(C,ne,W),ce(q,C,W),we=!0,De||(He=[ge(p,"click",t[12]),ge(b,"click",t[13]),ge(S,"click",t[14]),va(E=No.call(null,u,t[15]))],De=!0)},p(C,[W]){const Te={};W&1&&(Te.saveSlot=C[0]),!r&&W&64&&(r=!0,Te.world=C[6],yt(()=>r=!1)),!s&&W&128&&(s=!0,Te.viewport=C[7],yt(()=>s=!1)),!a&&W&256&&(a=!0,Te.bookmarks=C[8],yt(()=>a=!1)),i.$set(Te);const Xe={};W&2&&(Xe.layout=C[1]),W&64&&(Xe.world=C[6]),Y.$set(Xe),W&2&&qe(f,"flex-direction",C[1]=="vertical"?"column":"row"),W&2&&qe(f,"padding",C[1]=="vertical"?"1rem 0.5rem":"0.5rem 1rem"),W&2&&qe(l,"flex-direction",C[1]=="vertical"?"row":"column"),W&4&&qe(l,"justify-content",C[2]=="start"?"start":"end"),E&&wa(E.update)&&W&6&&E.update.call(null,C[15]),W&56&&qe(u,"opacity",C[3]||C[4]||C[5]?0:1);const We={};W&8388608&&(We.$$scope={dirty:W,ctx:C}),!k&&W&8&&(k=!0,We.visible=C[3],yt(()=>k=!1)),P.$set(We);const Ee={};W&8388609&&(Ee.$$scope={dirty:W,ctx:C}),!K&&W&16&&(K=!0,Ee.visible=C[4],yt(()=>K=!1)),z.$set(Ee);const Ae={};W&8389024&&(Ae.$$scope={dirty:W,ctx:C}),!_e&&W&32&&(_e=!0,Ae.visible=C[5],yt(()=>_e=!1)),q.$set(Ae)},i(C){we||(j(i.$$.fragment,C),j(m.$$.fragment,C),j(w.$$.fragment,C),j(v.$$.fragment,C),j(Y.$$.fragment,C),j(P.$$.fragment,C),j(z.$$.fragment,C),j(q.$$.fragment,C),we=!0)},o(C){V(i.$$.fragment,C),V(m.$$.fragment,C),V(w.$$.fragment,C),V(v.$$.fragment,C),V(Y.$$.fragment,C),V(P.$$.fragment,C),V(z.$$.fragment,C),V(q.$$.fragment,C),we=!1},d(C){C&&(x(n),x(M),x(U),x(ne)),ue(i),ue(m),ue(w),ue(v),ue(Y),ue(P,C),ue(z,C),ue(q,C),De=!1,sn(He)}}}function Hd(t,n,e){let i;Ft(t,vr,k=>e(22,i=k));let r="save",s="vertical",a="end",o=!1,u=!1,l=!1,f,p,m=[];hi(()=>{i&&e(3,o=!0)});function d(k){f=k,e(6,f)}function b(k){p=k,e(7,p)}function w(k){m=k,e(8,m)}const y=()=>e(3,o=!0),S=()=>e(4,u=!0),v=()=>e(5,l=!0),D=(k,U)=>{e(1,s=k>U?"vertical":"horizontal"),e(2,a=k>U?"end":"start")};function T(k){o=k,e(3,o)}function O(k){r=k,e(0,r)}function Y(k){u=k,e(4,u)}function E(k){l=k,e(5,l)}function M(k){m=k,e(8,m)}function P(k){l=k,e(5,l)}return[r,s,a,o,u,l,f,p,m,d,b,w,y,S,v,D,T,O,Y,E,M,P]}class Yd extends ye{constructor(n){super(),ke(this,n,Hd,Fd,ve,{})}}export{Yd as component};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
