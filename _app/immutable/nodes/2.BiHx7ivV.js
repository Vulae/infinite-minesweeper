var ul=Object.defineProperty;var fl=(t,n,e)=>n in t?ul(t,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[n]=e;var P=(t,n,e)=>(fl(t,typeof n!="symbol"?n+"":n,e),e);import{s as ve,N as Fe,e as R,c as L,b as Z,f as x,p as B,S as cs,T as Jt,i as X,U as ge,V as hl,P as Ue,Q as ze,R as He,w as sn,W as Ea,o as _i,X as mi,r as Re,l as Qe,Y as Ta,M as Ie,n as De,Z as Ia,z as Pa,k as zt,a as ae,g as oe,_ as he,K as Sa,L as Aa,$ as ui,h as $,a0 as Tr,a1 as us,a2 as Se,t as ut,d as ft,q as qe,j as ai,a3 as dl,a4 as fs,B as _l,a5 as hs,a6 as ml,a7 as pl,a8 as yt}from"../chunks/scheduler.Cm_C_nGF.js";import{S as ye,i as ke,a as j,t as V,g as Nn,c as Dn,b as le,d as ce,m as ue,e as fe,f as kt}from"../chunks/index.De5vRBfx.js";function Qt(t){return(t==null?void 0:t.length)!==void 0?t:Array.from(t)}function _t(t,n){const e={},i={},r={$$scope:1};let s=t.length;for(;s--;){const a=t[s],o=n[s];if(o){for(const u in a)u in o||(i[u]=1);for(const u in o)r[u]||(e[u]=o[u],r[u]=1);t[s]=o}else for(const u in a)r[u]=1}for(const a in i)a in e||(e[a]=void 0);return e}function Mt(t){return typeof t=="object"&&t!==null?t:{}}const Q=64;function Ir(t,n){return()=>{t|=0,t=t+2654435769|0;let e=t^t>>>16;e=Math.imul(e,569420461),e=e^e>>>15,e=Math.imul(e,1935289751);const i=(e=e^e>>>15)>>>0;return n?i/4294967296:i}}function Be(t,n,e,i){n=n*2654435761&2147483647,e=e*2246822519&2147483647,i=i*3266489917&2147483647,t=t*668265263&2147483647;let r=n^e^i^t;return r=r*374761393+2654435769,r^=r<<13,r^=r>>17,r^=r<<5,(r>>>0)/4294967296}function bl(t,n){n*=t.reduce((e,i)=>e+i,0);for(let e=0;e<t.length;e++)if(n-=t[e],n<=0)return e;throw new Error("Invalid weights")}function gl(t,n,e,i){let r=1/0,s=-1;for(let a=Math.floor(n)-1;a<Math.ceil(n)+1;a++)for(let o=Math.floor(e)-1;o<Math.ceil(e)+1;o++){const u=a+Be(t,a,o,0)-.5,l=o+Be(t,a,o,1)-.5,f=(u-n)**2+(l-e)**2;f<r&&(r=f,s=bl(i,Be(t,a,o,2)))}if(s==-1)throw new Error("Voronoi noise error.");return s}function ds(t,n,e){function i(d,b,w){return(b-d)*((w*(w*6-15)+10)*w*w*w)+d}const r=(d,b)=>{const w=Be(t,d,b,0);return{x:Math.cos(w),y:Math.sin(w)}},s=(d,b,w,y)=>{const S=r(d,b),v=w-d,M=y-b;return v*S.x+M*S.y},a=Math.floor(n),o=a+1,u=Math.floor(e),l=u+1,f=n-a,p=e-u;return i(i(s(a,u,n,e),s(o,u,n,e),f),i(s(a,l,n,e),s(o,l,n,e),f),p)}var Zi=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function vl(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var ne={},pe={},mt={},an={},pt={},on={};const wl=4,_s=0,ms=1,yl=2;function ln(t){let n=t.length;for(;--n>=0;)t[n]=0}const kl=0,xa=1,El=2,Tl=3,Il=258,Pr=29,Mn=256,Tn=Mn+1+Pr,Kt=30,Sr=19,Ca=2*Tn+1,Lt=15,Vi=16,Pl=7,Ar=256,Na=16,Da=17,Ma=18,lr=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),oi=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),Sl=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),Oa=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),Al=512,Et=new Array((Tn+2)*2);ln(Et);const yn=new Array(Kt*2);ln(yn);const In=new Array(Al);ln(In);const Pn=new Array(Il-Tl+1);ln(Pn);const xr=new Array(Pr);ln(xr);const fi=new Array(Kt);ln(fi);function Yi(t,n,e,i,r){this.static_tree=t,this.extra_bits=n,this.extra_base=e,this.elems=i,this.max_length=r,this.has_stree=t&&t.length}let Ba,$a,Ra;function Xi(t,n){this.dyn_tree=t,this.max_code=0,this.stat_desc=n}const La=t=>t<256?In[t]:In[256+(t>>>7)],Sn=(t,n)=>{t.pending_buf[t.pending++]=n&255,t.pending_buf[t.pending++]=n>>>8&255},Le=(t,n,e)=>{t.bi_valid>Vi-e?(t.bi_buf|=n<<t.bi_valid&65535,Sn(t,t.bi_buf),t.bi_buf=n>>Vi-t.bi_valid,t.bi_valid+=e-Vi):(t.bi_buf|=n<<t.bi_valid&65535,t.bi_valid+=e)},ct=(t,n,e)=>{Le(t,e[n*2],e[n*2+1])},Fa=(t,n)=>{let e=0;do e|=t&1,t>>>=1,e<<=1;while(--n>0);return e>>>1},xl=t=>{t.bi_valid===16?(Sn(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=t.bi_buf&255,t.bi_buf>>=8,t.bi_valid-=8)},Cl=(t,n)=>{const e=n.dyn_tree,i=n.max_code,r=n.stat_desc.static_tree,s=n.stat_desc.has_stree,a=n.stat_desc.extra_bits,o=n.stat_desc.extra_base,u=n.stat_desc.max_length;let l,f,p,m,d,b,w=0;for(m=0;m<=Lt;m++)t.bl_count[m]=0;for(e[t.heap[t.heap_max]*2+1]=0,l=t.heap_max+1;l<Ca;l++)f=t.heap[l],m=e[e[f*2+1]*2+1]+1,m>u&&(m=u,w++),e[f*2+1]=m,!(f>i)&&(t.bl_count[m]++,d=0,f>=o&&(d=a[f-o]),b=e[f*2],t.opt_len+=b*(m+d),s&&(t.static_len+=b*(r[f*2+1]+d)));if(w!==0){do{for(m=u-1;t.bl_count[m]===0;)m--;t.bl_count[m]--,t.bl_count[m+1]+=2,t.bl_count[u]--,w-=2}while(w>0);for(m=u;m!==0;m--)for(f=t.bl_count[m];f!==0;)p=t.heap[--l],!(p>i)&&(e[p*2+1]!==m&&(t.opt_len+=(m-e[p*2+1])*e[p*2],e[p*2+1]=m),f--)}},Ua=(t,n,e)=>{const i=new Array(Lt+1);let r=0,s,a;for(s=1;s<=Lt;s++)r=r+e[s-1]<<1,i[s]=r;for(a=0;a<=n;a++){let o=t[a*2+1];o!==0&&(t[a*2]=Fa(i[o]++,o))}},Nl=()=>{let t,n,e,i,r;const s=new Array(Lt+1);for(e=0,i=0;i<Pr-1;i++)for(xr[i]=e,t=0;t<1<<lr[i];t++)Pn[e++]=i;for(Pn[e-1]=i,r=0,i=0;i<16;i++)for(fi[i]=r,t=0;t<1<<oi[i];t++)In[r++]=i;for(r>>=7;i<Kt;i++)for(fi[i]=r<<7,t=0;t<1<<oi[i]-7;t++)In[256+r++]=i;for(n=0;n<=Lt;n++)s[n]=0;for(t=0;t<=143;)Et[t*2+1]=8,t++,s[8]++;for(;t<=255;)Et[t*2+1]=9,t++,s[9]++;for(;t<=279;)Et[t*2+1]=7,t++,s[7]++;for(;t<=287;)Et[t*2+1]=8,t++,s[8]++;for(Ua(Et,Tn+1,s),t=0;t<Kt;t++)yn[t*2+1]=5,yn[t*2]=Fa(t,5);Ba=new Yi(Et,lr,Mn+1,Tn,Lt),$a=new Yi(yn,oi,0,Kt,Lt),Ra=new Yi(new Array(0),Sl,0,Sr,Pl)},za=t=>{let n;for(n=0;n<Tn;n++)t.dyn_ltree[n*2]=0;for(n=0;n<Kt;n++)t.dyn_dtree[n*2]=0;for(n=0;n<Sr;n++)t.bl_tree[n*2]=0;t.dyn_ltree[Ar*2]=1,t.opt_len=t.static_len=0,t.sym_next=t.matches=0},Ha=t=>{t.bi_valid>8?Sn(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0},ps=(t,n,e,i)=>{const r=n*2,s=e*2;return t[r]<t[s]||t[r]===t[s]&&i[n]<=i[e]},Wi=(t,n,e)=>{const i=t.heap[e];let r=e<<1;for(;r<=t.heap_len&&(r<t.heap_len&&ps(n,t.heap[r+1],t.heap[r],t.depth)&&r++,!ps(n,i,t.heap[r],t.depth));)t.heap[e]=t.heap[r],e=r,r<<=1;t.heap[e]=i},bs=(t,n,e)=>{let i,r,s=0,a,o;if(t.sym_next!==0)do i=t.pending_buf[t.sym_buf+s++]&255,i+=(t.pending_buf[t.sym_buf+s++]&255)<<8,r=t.pending_buf[t.sym_buf+s++],i===0?ct(t,r,n):(a=Pn[r],ct(t,a+Mn+1,n),o=lr[a],o!==0&&(r-=xr[a],Le(t,r,o)),i--,a=La(i),ct(t,a,e),o=oi[a],o!==0&&(i-=fi[a],Le(t,i,o)));while(s<t.sym_next);ct(t,Ar,n)},cr=(t,n)=>{const e=n.dyn_tree,i=n.stat_desc.static_tree,r=n.stat_desc.has_stree,s=n.stat_desc.elems;let a,o,u=-1,l;for(t.heap_len=0,t.heap_max=Ca,a=0;a<s;a++)e[a*2]!==0?(t.heap[++t.heap_len]=u=a,t.depth[a]=0):e[a*2+1]=0;for(;t.heap_len<2;)l=t.heap[++t.heap_len]=u<2?++u:0,e[l*2]=1,t.depth[l]=0,t.opt_len--,r&&(t.static_len-=i[l*2+1]);for(n.max_code=u,a=t.heap_len>>1;a>=1;a--)Wi(t,e,a);l=s;do a=t.heap[1],t.heap[1]=t.heap[t.heap_len--],Wi(t,e,1),o=t.heap[1],t.heap[--t.heap_max]=a,t.heap[--t.heap_max]=o,e[l*2]=e[a*2]+e[o*2],t.depth[l]=(t.depth[a]>=t.depth[o]?t.depth[a]:t.depth[o])+1,e[a*2+1]=e[o*2+1]=l,t.heap[1]=l++,Wi(t,e,1);while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],Cl(t,n),Ua(e,u,t.bl_count)},gs=(t,n,e)=>{let i,r=-1,s,a=n[0*2+1],o=0,u=7,l=4;for(a===0&&(u=138,l=3),n[(e+1)*2+1]=65535,i=0;i<=e;i++)s=a,a=n[(i+1)*2+1],!(++o<u&&s===a)&&(o<l?t.bl_tree[s*2]+=o:s!==0?(s!==r&&t.bl_tree[s*2]++,t.bl_tree[Na*2]++):o<=10?t.bl_tree[Da*2]++:t.bl_tree[Ma*2]++,o=0,r=s,a===0?(u=138,l=3):s===a?(u=6,l=3):(u=7,l=4))},vs=(t,n,e)=>{let i,r=-1,s,a=n[0*2+1],o=0,u=7,l=4;for(a===0&&(u=138,l=3),i=0;i<=e;i++)if(s=a,a=n[(i+1)*2+1],!(++o<u&&s===a)){if(o<l)do ct(t,s,t.bl_tree);while(--o!==0);else s!==0?(s!==r&&(ct(t,s,t.bl_tree),o--),ct(t,Na,t.bl_tree),Le(t,o-3,2)):o<=10?(ct(t,Da,t.bl_tree),Le(t,o-3,3)):(ct(t,Ma,t.bl_tree),Le(t,o-11,7));o=0,r=s,a===0?(u=138,l=3):s===a?(u=6,l=3):(u=7,l=4)}},Dl=t=>{let n;for(gs(t,t.dyn_ltree,t.l_desc.max_code),gs(t,t.dyn_dtree,t.d_desc.max_code),cr(t,t.bl_desc),n=Sr-1;n>=3&&t.bl_tree[Oa[n]*2+1]===0;n--);return t.opt_len+=3*(n+1)+5+5+4,n},Ml=(t,n,e,i)=>{let r;for(Le(t,n-257,5),Le(t,e-1,5),Le(t,i-4,4),r=0;r<i;r++)Le(t,t.bl_tree[Oa[r]*2+1],3);vs(t,t.dyn_ltree,n-1),vs(t,t.dyn_dtree,e-1)},Ol=t=>{let n=4093624447,e;for(e=0;e<=31;e++,n>>>=1)if(n&1&&t.dyn_ltree[e*2]!==0)return _s;if(t.dyn_ltree[9*2]!==0||t.dyn_ltree[10*2]!==0||t.dyn_ltree[13*2]!==0)return ms;for(e=32;e<Mn;e++)if(t.dyn_ltree[e*2]!==0)return ms;return _s};let ws=!1;const Bl=t=>{ws||(Nl(),ws=!0),t.l_desc=new Xi(t.dyn_ltree,Ba),t.d_desc=new Xi(t.dyn_dtree,$a),t.bl_desc=new Xi(t.bl_tree,Ra),t.bi_buf=0,t.bi_valid=0,za(t)},ja=(t,n,e,i)=>{Le(t,(kl<<1)+(i?1:0),3),Ha(t),Sn(t,e),Sn(t,~e),e&&t.pending_buf.set(t.window.subarray(n,n+e),t.pending),t.pending+=e},$l=t=>{Le(t,xa<<1,3),ct(t,Ar,Et),xl(t)},Rl=(t,n,e,i)=>{let r,s,a=0;t.level>0?(t.strm.data_type===yl&&(t.strm.data_type=Ol(t)),cr(t,t.l_desc),cr(t,t.d_desc),a=Dl(t),r=t.opt_len+3+7>>>3,s=t.static_len+3+7>>>3,s<=r&&(r=s)):r=s=e+5,e+4<=r&&n!==-1?ja(t,n,e,i):t.strategy===wl||s===r?(Le(t,(xa<<1)+(i?1:0),3),bs(t,Et,yn)):(Le(t,(El<<1)+(i?1:0),3),Ml(t,t.l_desc.max_code+1,t.d_desc.max_code+1,a+1),bs(t,t.dyn_ltree,t.dyn_dtree)),za(t),i&&Ha(t)},Ll=(t,n,e)=>(t.pending_buf[t.sym_buf+t.sym_next++]=n,t.pending_buf[t.sym_buf+t.sym_next++]=n>>8,t.pending_buf[t.sym_buf+t.sym_next++]=e,n===0?t.dyn_ltree[e*2]++:(t.matches++,n--,t.dyn_ltree[(Pn[e]+Mn+1)*2]++,t.dyn_dtree[La(n)*2]++),t.sym_next===t.sym_end);on._tr_init=Bl;on._tr_stored_block=ja;on._tr_flush_block=Rl;on._tr_tally=Ll;on._tr_align=$l;const Fl=(t,n,e,i)=>{let r=t&65535|0,s=t>>>16&65535|0,a=0;for(;e!==0;){a=e>2e3?2e3:e,e-=a;do r=r+n[i++]|0,s=s+r|0;while(--a);r%=65521,s%=65521}return r|s<<16|0};var Za=Fl;const Ul=()=>{let t,n=[];for(var e=0;e<256;e++){t=e;for(var i=0;i<8;i++)t=t&1?3988292384^t>>>1:t>>>1;n[e]=t}return n},zl=new Uint32Array(Ul()),Hl=(t,n,e,i)=>{const r=zl,s=i+e;t^=-1;for(let a=i;a<s;a++)t=t>>>8^r[(t^n[a])&255];return t^-1};var Va=Hl,Cr={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},Vt={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:jl,_tr_stored_block:ur,_tr_flush_block:Zl,_tr_tally:Ct,_tr_align:Vl}=on,Ya=Za,St=Va,Yl=Cr,{Z_NO_FLUSH:Nt,Z_PARTIAL_FLUSH:Xl,Z_FULL_FLUSH:Wl,Z_FINISH:Je,Z_BLOCK:ys,Z_OK:Ce,Z_STREAM_END:ks,Z_STREAM_ERROR:ht,Z_DATA_ERROR:Gl,Z_BUF_ERROR:Gi,Z_DEFAULT_COMPRESSION:Kl,Z_FILTERED:ql,Z_HUFFMAN_ONLY:qn,Z_RLE:Jl,Z_FIXED:Ql,Z_DEFAULT_STRATEGY:ec,Z_UNKNOWN:tc,Z_DEFLATED:pi}=Vt,nc=9,ic=15,rc=8,sc=29,ac=256,fr=ac+1+sc,oc=30,lc=19,cc=2*fr+1,uc=15,ee=3,xt=258,dt=xt+ee+1,fc=32,en=42,Nr=57,hr=69,dr=73,_r=91,mr=103,Ft=113,gn=666,$e=1,cn=2,Ht=3,un=4,hc=3,Ut=(t,n)=>(t.msg=Yl[n],n),Es=t=>t*2-(t>4?9:0),At=t=>{let n=t.length;for(;--n>=0;)t[n]=0},dc=t=>{let n,e,i,r=t.w_size;n=t.hash_size,i=n;do e=t.head[--i],t.head[i]=e>=r?e-r:0;while(--n);n=r,i=n;do e=t.prev[--i],t.prev[i]=e>=r?e-r:0;while(--n)};let _c=(t,n,e)=>(n<<t.hash_shift^e)&t.hash_mask,Dt=_c;const Ve=t=>{const n=t.state;let e=n.pending;e>t.avail_out&&(e=t.avail_out),e!==0&&(t.output.set(n.pending_buf.subarray(n.pending_out,n.pending_out+e),t.next_out),t.next_out+=e,n.pending_out+=e,t.total_out+=e,t.avail_out-=e,n.pending-=e,n.pending===0&&(n.pending_out=0))},Ye=(t,n)=>{Zl(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,n),t.block_start=t.strstart,Ve(t.strm)},se=(t,n)=>{t.pending_buf[t.pending++]=n},pn=(t,n)=>{t.pending_buf[t.pending++]=n>>>8&255,t.pending_buf[t.pending++]=n&255},pr=(t,n,e,i)=>{let r=t.avail_in;return r>i&&(r=i),r===0?0:(t.avail_in-=r,n.set(t.input.subarray(t.next_in,t.next_in+r),e),t.state.wrap===1?t.adler=Ya(t.adler,n,r,e):t.state.wrap===2&&(t.adler=St(t.adler,n,r,e)),t.next_in+=r,t.total_in+=r,r)},Xa=(t,n)=>{let e=t.max_chain_length,i=t.strstart,r,s,a=t.prev_length,o=t.nice_match;const u=t.strstart>t.w_size-dt?t.strstart-(t.w_size-dt):0,l=t.window,f=t.w_mask,p=t.prev,m=t.strstart+xt;let d=l[i+a-1],b=l[i+a];t.prev_length>=t.good_match&&(e>>=2),o>t.lookahead&&(o=t.lookahead);do if(r=n,!(l[r+a]!==b||l[r+a-1]!==d||l[r]!==l[i]||l[++r]!==l[i+1])){i+=2,r++;do;while(l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&i<m);if(s=xt-(m-i),i=m-xt,s>a){if(t.match_start=n,a=s,s>=o)break;d=l[i+a-1],b=l[i+a]}}while((n=p[n&f])>u&&--e!==0);return a<=t.lookahead?a:t.lookahead},tn=t=>{const n=t.w_size;let e,i,r;do{if(i=t.window_size-t.lookahead-t.strstart,t.strstart>=n+(n-dt)&&(t.window.set(t.window.subarray(n,n+n-i),0),t.match_start-=n,t.strstart-=n,t.block_start-=n,t.insert>t.strstart&&(t.insert=t.strstart),dc(t),i+=n),t.strm.avail_in===0)break;if(e=pr(t.strm,t.window,t.strstart+t.lookahead,i),t.lookahead+=e,t.lookahead+t.insert>=ee)for(r=t.strstart-t.insert,t.ins_h=t.window[r],t.ins_h=Dt(t,t.ins_h,t.window[r+1]);t.insert&&(t.ins_h=Dt(t,t.ins_h,t.window[r+ee-1]),t.prev[r&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=r,r++,t.insert--,!(t.lookahead+t.insert<ee)););}while(t.lookahead<dt&&t.strm.avail_in!==0)},Wa=(t,n)=>{let e=t.pending_buf_size-5>t.w_size?t.w_size:t.pending_buf_size-5,i,r,s,a=0,o=t.strm.avail_in;do{if(i=65535,s=t.bi_valid+42>>3,t.strm.avail_out<s||(s=t.strm.avail_out-s,r=t.strstart-t.block_start,i>r+t.strm.avail_in&&(i=r+t.strm.avail_in),i>s&&(i=s),i<e&&(i===0&&n!==Je||n===Nt||i!==r+t.strm.avail_in)))break;a=n===Je&&i===r+t.strm.avail_in?1:0,ur(t,0,0,a),t.pending_buf[t.pending-4]=i,t.pending_buf[t.pending-3]=i>>8,t.pending_buf[t.pending-2]=~i,t.pending_buf[t.pending-1]=~i>>8,Ve(t.strm),r&&(r>i&&(r=i),t.strm.output.set(t.window.subarray(t.block_start,t.block_start+r),t.strm.next_out),t.strm.next_out+=r,t.strm.avail_out-=r,t.strm.total_out+=r,t.block_start+=r,i-=r),i&&(pr(t.strm,t.strm.output,t.strm.next_out,i),t.strm.next_out+=i,t.strm.avail_out-=i,t.strm.total_out+=i)}while(a===0);return o-=t.strm.avail_in,o&&(o>=t.w_size?(t.matches=2,t.window.set(t.strm.input.subarray(t.strm.next_in-t.w_size,t.strm.next_in),0),t.strstart=t.w_size,t.insert=t.strstart):(t.window_size-t.strstart<=o&&(t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,t.insert>t.strstart&&(t.insert=t.strstart)),t.window.set(t.strm.input.subarray(t.strm.next_in-o,t.strm.next_in),t.strstart),t.strstart+=o,t.insert+=o>t.w_size-t.insert?t.w_size-t.insert:o),t.block_start=t.strstart),t.high_water<t.strstart&&(t.high_water=t.strstart),a?un:n!==Nt&&n!==Je&&t.strm.avail_in===0&&t.strstart===t.block_start?cn:(s=t.window_size-t.strstart,t.strm.avail_in>s&&t.block_start>=t.w_size&&(t.block_start-=t.w_size,t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,s+=t.w_size,t.insert>t.strstart&&(t.insert=t.strstart)),s>t.strm.avail_in&&(s=t.strm.avail_in),s&&(pr(t.strm,t.window,t.strstart,s),t.strstart+=s,t.insert+=s>t.w_size-t.insert?t.w_size-t.insert:s),t.high_water<t.strstart&&(t.high_water=t.strstart),s=t.bi_valid+42>>3,s=t.pending_buf_size-s>65535?65535:t.pending_buf_size-s,e=s>t.w_size?t.w_size:s,r=t.strstart-t.block_start,(r>=e||(r||n===Je)&&n!==Nt&&t.strm.avail_in===0&&r<=s)&&(i=r>s?s:r,a=n===Je&&t.strm.avail_in===0&&i===r?1:0,ur(t,t.block_start,i,a),t.block_start+=i,Ve(t.strm)),a?Ht:$e)},Ki=(t,n)=>{let e,i;for(;;){if(t.lookahead<dt){if(tn(t),t.lookahead<dt&&n===Nt)return $e;if(t.lookahead===0)break}if(e=0,t.lookahead>=ee&&(t.ins_h=Dt(t,t.ins_h,t.window[t.strstart+ee-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),e!==0&&t.strstart-e<=t.w_size-dt&&(t.match_length=Xa(t,e)),t.match_length>=ee)if(i=Ct(t,t.strstart-t.match_start,t.match_length-ee),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=ee){t.match_length--;do t.strstart++,t.ins_h=Dt(t,t.ins_h,t.window[t.strstart+ee-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart;while(--t.match_length!==0);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=Dt(t,t.ins_h,t.window[t.strstart+1]);else i=Ct(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(Ye(t,!1),t.strm.avail_out===0))return $e}return t.insert=t.strstart<ee-1?t.strstart:ee-1,n===Je?(Ye(t,!0),t.strm.avail_out===0?Ht:un):t.sym_next&&(Ye(t,!1),t.strm.avail_out===0)?$e:cn},Wt=(t,n)=>{let e,i,r;for(;;){if(t.lookahead<dt){if(tn(t),t.lookahead<dt&&n===Nt)return $e;if(t.lookahead===0)break}if(e=0,t.lookahead>=ee&&(t.ins_h=Dt(t,t.ins_h,t.window[t.strstart+ee-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=ee-1,e!==0&&t.prev_length<t.max_lazy_match&&t.strstart-e<=t.w_size-dt&&(t.match_length=Xa(t,e),t.match_length<=5&&(t.strategy===ql||t.match_length===ee&&t.strstart-t.match_start>4096)&&(t.match_length=ee-1)),t.prev_length>=ee&&t.match_length<=t.prev_length){r=t.strstart+t.lookahead-ee,i=Ct(t,t.strstart-1-t.prev_match,t.prev_length-ee),t.lookahead-=t.prev_length-1,t.prev_length-=2;do++t.strstart<=r&&(t.ins_h=Dt(t,t.ins_h,t.window[t.strstart+ee-1]),e=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart);while(--t.prev_length!==0);if(t.match_available=0,t.match_length=ee-1,t.strstart++,i&&(Ye(t,!1),t.strm.avail_out===0))return $e}else if(t.match_available){if(i=Ct(t,0,t.window[t.strstart-1]),i&&Ye(t,!1),t.strstart++,t.lookahead--,t.strm.avail_out===0)return $e}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=Ct(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<ee-1?t.strstart:ee-1,n===Je?(Ye(t,!0),t.strm.avail_out===0?Ht:un):t.sym_next&&(Ye(t,!1),t.strm.avail_out===0)?$e:cn},mc=(t,n)=>{let e,i,r,s;const a=t.window;for(;;){if(t.lookahead<=xt){if(tn(t),t.lookahead<=xt&&n===Nt)return $e;if(t.lookahead===0)break}if(t.match_length=0,t.lookahead>=ee&&t.strstart>0&&(r=t.strstart-1,i=a[r],i===a[++r]&&i===a[++r]&&i===a[++r])){s=t.strstart+xt;do;while(i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&i===a[++r]&&r<s);t.match_length=xt-(s-r),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=ee?(e=Ct(t,1,t.match_length-ee),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(e=Ct(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),e&&(Ye(t,!1),t.strm.avail_out===0))return $e}return t.insert=0,n===Je?(Ye(t,!0),t.strm.avail_out===0?Ht:un):t.sym_next&&(Ye(t,!1),t.strm.avail_out===0)?$e:cn},pc=(t,n)=>{let e;for(;;){if(t.lookahead===0&&(tn(t),t.lookahead===0)){if(n===Nt)return $e;break}if(t.match_length=0,e=Ct(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,e&&(Ye(t,!1),t.strm.avail_out===0))return $e}return t.insert=0,n===Je?(Ye(t,!0),t.strm.avail_out===0?Ht:un):t.sym_next&&(Ye(t,!1),t.strm.avail_out===0)?$e:cn};function ot(t,n,e,i,r){this.good_length=t,this.max_lazy=n,this.nice_length=e,this.max_chain=i,this.func=r}const vn=[new ot(0,0,0,0,Wa),new ot(4,4,8,4,Ki),new ot(4,5,16,8,Ki),new ot(4,6,32,32,Ki),new ot(4,4,16,16,Wt),new ot(8,16,32,32,Wt),new ot(8,16,128,128,Wt),new ot(8,32,128,256,Wt),new ot(32,128,258,1024,Wt),new ot(32,258,258,4096,Wt)],bc=t=>{t.window_size=2*t.w_size,At(t.head),t.max_lazy_match=vn[t.level].max_lazy,t.good_match=vn[t.level].good_length,t.nice_match=vn[t.level].nice_length,t.max_chain_length=vn[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=ee-1,t.match_available=0,t.ins_h=0};function gc(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=pi,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(cc*2),this.dyn_dtree=new Uint16Array((2*oc+1)*2),this.bl_tree=new Uint16Array((2*lc+1)*2),At(this.dyn_ltree),At(this.dyn_dtree),At(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(uc+1),this.heap=new Uint16Array(2*fr+1),At(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(2*fr+1),At(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const On=t=>{if(!t)return 1;const n=t.state;return!n||n.strm!==t||n.status!==en&&n.status!==Nr&&n.status!==hr&&n.status!==dr&&n.status!==_r&&n.status!==mr&&n.status!==Ft&&n.status!==gn?1:0},Ga=t=>{if(On(t))return Ut(t,ht);t.total_in=t.total_out=0,t.data_type=tc;const n=t.state;return n.pending=0,n.pending_out=0,n.wrap<0&&(n.wrap=-n.wrap),n.status=n.wrap===2?Nr:n.wrap?en:Ft,t.adler=n.wrap===2?0:1,n.last_flush=-2,jl(n),Ce},Ka=t=>{const n=Ga(t);return n===Ce&&bc(t.state),n},vc=(t,n)=>On(t)||t.state.wrap!==2?ht:(t.state.gzhead=n,Ce),qa=(t,n,e,i,r,s)=>{if(!t)return ht;let a=1;if(n===Kl&&(n=6),i<0?(a=0,i=-i):i>15&&(a=2,i-=16),r<1||r>nc||e!==pi||i<8||i>15||n<0||n>9||s<0||s>Ql||i===8&&a!==1)return Ut(t,ht);i===8&&(i=9);const o=new gc;return t.state=o,o.strm=t,o.status=en,o.wrap=a,o.gzhead=null,o.w_bits=i,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=r+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+ee-1)/ee),o.window=new Uint8Array(o.w_size*2),o.head=new Uint16Array(o.hash_size),o.prev=new Uint16Array(o.w_size),o.lit_bufsize=1<<r+6,o.pending_buf_size=o.lit_bufsize*4,o.pending_buf=new Uint8Array(o.pending_buf_size),o.sym_buf=o.lit_bufsize,o.sym_end=(o.lit_bufsize-1)*3,o.level=n,o.strategy=s,o.method=e,Ka(t)},wc=(t,n)=>qa(t,n,pi,ic,rc,ec),yc=(t,n)=>{if(On(t)||n>ys||n<0)return t?Ut(t,ht):ht;const e=t.state;if(!t.output||t.avail_in!==0&&!t.input||e.status===gn&&n!==Je)return Ut(t,t.avail_out===0?Gi:ht);const i=e.last_flush;if(e.last_flush=n,e.pending!==0){if(Ve(t),t.avail_out===0)return e.last_flush=-1,Ce}else if(t.avail_in===0&&Es(n)<=Es(i)&&n!==Je)return Ut(t,Gi);if(e.status===gn&&t.avail_in!==0)return Ut(t,Gi);if(e.status===en&&e.wrap===0&&(e.status=Ft),e.status===en){let r=pi+(e.w_bits-8<<4)<<8,s=-1;if(e.strategy>=qn||e.level<2?s=0:e.level<6?s=1:e.level===6?s=2:s=3,r|=s<<6,e.strstart!==0&&(r|=fc),r+=31-r%31,pn(e,r),e.strstart!==0&&(pn(e,t.adler>>>16),pn(e,t.adler&65535)),t.adler=1,e.status=Ft,Ve(t),e.pending!==0)return e.last_flush=-1,Ce}if(e.status===Nr){if(t.adler=0,se(e,31),se(e,139),se(e,8),e.gzhead)se(e,(e.gzhead.text?1:0)+(e.gzhead.hcrc?2:0)+(e.gzhead.extra?4:0)+(e.gzhead.name?8:0)+(e.gzhead.comment?16:0)),se(e,e.gzhead.time&255),se(e,e.gzhead.time>>8&255),se(e,e.gzhead.time>>16&255),se(e,e.gzhead.time>>24&255),se(e,e.level===9?2:e.strategy>=qn||e.level<2?4:0),se(e,e.gzhead.os&255),e.gzhead.extra&&e.gzhead.extra.length&&(se(e,e.gzhead.extra.length&255),se(e,e.gzhead.extra.length>>8&255)),e.gzhead.hcrc&&(t.adler=St(t.adler,e.pending_buf,e.pending,0)),e.gzindex=0,e.status=hr;else if(se(e,0),se(e,0),se(e,0),se(e,0),se(e,0),se(e,e.level===9?2:e.strategy>=qn||e.level<2?4:0),se(e,hc),e.status=Ft,Ve(t),e.pending!==0)return e.last_flush=-1,Ce}if(e.status===hr){if(e.gzhead.extra){let r=e.pending,s=(e.gzhead.extra.length&65535)-e.gzindex;for(;e.pending+s>e.pending_buf_size;){let o=e.pending_buf_size-e.pending;if(e.pending_buf.set(e.gzhead.extra.subarray(e.gzindex,e.gzindex+o),e.pending),e.pending=e.pending_buf_size,e.gzhead.hcrc&&e.pending>r&&(t.adler=St(t.adler,e.pending_buf,e.pending-r,r)),e.gzindex+=o,Ve(t),e.pending!==0)return e.last_flush=-1,Ce;r=0,s-=o}let a=new Uint8Array(e.gzhead.extra);e.pending_buf.set(a.subarray(e.gzindex,e.gzindex+s),e.pending),e.pending+=s,e.gzhead.hcrc&&e.pending>r&&(t.adler=St(t.adler,e.pending_buf,e.pending-r,r)),e.gzindex=0}e.status=dr}if(e.status===dr){if(e.gzhead.name){let r=e.pending,s;do{if(e.pending===e.pending_buf_size){if(e.gzhead.hcrc&&e.pending>r&&(t.adler=St(t.adler,e.pending_buf,e.pending-r,r)),Ve(t),e.pending!==0)return e.last_flush=-1,Ce;r=0}e.gzindex<e.gzhead.name.length?s=e.gzhead.name.charCodeAt(e.gzindex++)&255:s=0,se(e,s)}while(s!==0);e.gzhead.hcrc&&e.pending>r&&(t.adler=St(t.adler,e.pending_buf,e.pending-r,r)),e.gzindex=0}e.status=_r}if(e.status===_r){if(e.gzhead.comment){let r=e.pending,s;do{if(e.pending===e.pending_buf_size){if(e.gzhead.hcrc&&e.pending>r&&(t.adler=St(t.adler,e.pending_buf,e.pending-r,r)),Ve(t),e.pending!==0)return e.last_flush=-1,Ce;r=0}e.gzindex<e.gzhead.comment.length?s=e.gzhead.comment.charCodeAt(e.gzindex++)&255:s=0,se(e,s)}while(s!==0);e.gzhead.hcrc&&e.pending>r&&(t.adler=St(t.adler,e.pending_buf,e.pending-r,r))}e.status=mr}if(e.status===mr){if(e.gzhead.hcrc){if(e.pending+2>e.pending_buf_size&&(Ve(t),e.pending!==0))return e.last_flush=-1,Ce;se(e,t.adler&255),se(e,t.adler>>8&255),t.adler=0}if(e.status=Ft,Ve(t),e.pending!==0)return e.last_flush=-1,Ce}if(t.avail_in!==0||e.lookahead!==0||n!==Nt&&e.status!==gn){let r=e.level===0?Wa(e,n):e.strategy===qn?pc(e,n):e.strategy===Jl?mc(e,n):vn[e.level].func(e,n);if((r===Ht||r===un)&&(e.status=gn),r===$e||r===Ht)return t.avail_out===0&&(e.last_flush=-1),Ce;if(r===cn&&(n===Xl?Vl(e):n!==ys&&(ur(e,0,0,!1),n===Wl&&(At(e.head),e.lookahead===0&&(e.strstart=0,e.block_start=0,e.insert=0))),Ve(t),t.avail_out===0))return e.last_flush=-1,Ce}return n!==Je?Ce:e.wrap<=0?ks:(e.wrap===2?(se(e,t.adler&255),se(e,t.adler>>8&255),se(e,t.adler>>16&255),se(e,t.adler>>24&255),se(e,t.total_in&255),se(e,t.total_in>>8&255),se(e,t.total_in>>16&255),se(e,t.total_in>>24&255)):(pn(e,t.adler>>>16),pn(e,t.adler&65535)),Ve(t),e.wrap>0&&(e.wrap=-e.wrap),e.pending!==0?Ce:ks)},kc=t=>{if(On(t))return ht;const n=t.state.status;return t.state=null,n===Ft?Ut(t,Gl):Ce},Ec=(t,n)=>{let e=n.length;if(On(t))return ht;const i=t.state,r=i.wrap;if(r===2||r===1&&i.status!==en||i.lookahead)return ht;if(r===1&&(t.adler=Ya(t.adler,n,e,0)),i.wrap=0,e>=i.w_size){r===0&&(At(i.head),i.strstart=0,i.block_start=0,i.insert=0);let u=new Uint8Array(i.w_size);u.set(n.subarray(e-i.w_size,e),0),n=u,e=i.w_size}const s=t.avail_in,a=t.next_in,o=t.input;for(t.avail_in=e,t.next_in=0,t.input=n,tn(i);i.lookahead>=ee;){let u=i.strstart,l=i.lookahead-(ee-1);do i.ins_h=Dt(i,i.ins_h,i.window[u+ee-1]),i.prev[u&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=u,u++;while(--l);i.strstart=u,i.lookahead=ee-1,tn(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=ee-1,i.match_available=0,t.next_in=a,t.input=o,t.avail_in=s,i.wrap=r,Ce};pt.deflateInit=wc;pt.deflateInit2=qa;pt.deflateReset=Ka;pt.deflateResetKeep=Ga;pt.deflateSetHeader=vc;pt.deflate=yc;pt.deflateEnd=kc;pt.deflateSetDictionary=Ec;pt.deflateInfo="pako deflate (from Nodeca project)";var bi={};const Tc=(t,n)=>Object.prototype.hasOwnProperty.call(t,n);bi.assign=function(t){const n=Array.prototype.slice.call(arguments,1);for(;n.length;){const e=n.shift();if(e){if(typeof e!="object")throw new TypeError(e+"must be non-object");for(const i in e)Tc(e,i)&&(t[i]=e[i])}}return t};bi.flattenChunks=t=>{let n=0;for(let i=0,r=t.length;i<r;i++)n+=t[i].length;const e=new Uint8Array(n);for(let i=0,r=0,s=t.length;i<s;i++){let a=t[i];e.set(a,r),r+=a.length}return e};var Bn={};let Ja=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{Ja=!1}const An=new Uint8Array(256);for(let t=0;t<256;t++)An[t]=t>=252?6:t>=248?5:t>=240?4:t>=224?3:t>=192?2:1;An[254]=An[254]=1;Bn.string2buf=t=>{if(typeof TextEncoder=="function"&&TextEncoder.prototype.encode)return new TextEncoder().encode(t);let n,e,i,r,s,a=t.length,o=0;for(r=0;r<a;r++)e=t.charCodeAt(r),(e&64512)===55296&&r+1<a&&(i=t.charCodeAt(r+1),(i&64512)===56320&&(e=65536+(e-55296<<10)+(i-56320),r++)),o+=e<128?1:e<2048?2:e<65536?3:4;for(n=new Uint8Array(o),s=0,r=0;s<o;r++)e=t.charCodeAt(r),(e&64512)===55296&&r+1<a&&(i=t.charCodeAt(r+1),(i&64512)===56320&&(e=65536+(e-55296<<10)+(i-56320),r++)),e<128?n[s++]=e:e<2048?(n[s++]=192|e>>>6,n[s++]=128|e&63):e<65536?(n[s++]=224|e>>>12,n[s++]=128|e>>>6&63,n[s++]=128|e&63):(n[s++]=240|e>>>18,n[s++]=128|e>>>12&63,n[s++]=128|e>>>6&63,n[s++]=128|e&63);return n};const Ic=(t,n)=>{if(n<65534&&t.subarray&&Ja)return String.fromCharCode.apply(null,t.length===n?t:t.subarray(0,n));let e="";for(let i=0;i<n;i++)e+=String.fromCharCode(t[i]);return e};Bn.buf2string=(t,n)=>{const e=n||t.length;if(typeof TextDecoder=="function"&&TextDecoder.prototype.decode)return new TextDecoder().decode(t.subarray(0,n));let i,r;const s=new Array(e*2);for(r=0,i=0;i<e;){let a=t[i++];if(a<128){s[r++]=a;continue}let o=An[a];if(o>4){s[r++]=65533,i+=o-1;continue}for(a&=o===2?31:o===3?15:7;o>1&&i<e;)a=a<<6|t[i++]&63,o--;if(o>1){s[r++]=65533;continue}a<65536?s[r++]=a:(a-=65536,s[r++]=55296|a>>10&1023,s[r++]=56320|a&1023)}return Ic(s,r)};Bn.utf8border=(t,n)=>{n=n||t.length,n>t.length&&(n=t.length);let e=n-1;for(;e>=0&&(t[e]&192)===128;)e--;return e<0||e===0?n:e+An[t[e]]>n?e:n};function Pc(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}var Qa=Pc;const kn=pt,eo=bi,to=Bn,br=Cr,Sc=Qa,no=Object.prototype.toString,{Z_NO_FLUSH:Ac,Z_SYNC_FLUSH:xc,Z_FULL_FLUSH:Cc,Z_FINISH:Nc,Z_OK:hi,Z_STREAM_END:Dc,Z_DEFAULT_COMPRESSION:Mc,Z_DEFAULT_STRATEGY:Oc,Z_DEFLATED:Bc}=Vt;function $n(t){this.options=eo.assign({level:Mc,method:Bc,chunkSize:16384,windowBits:15,memLevel:8,strategy:Oc},t||{});let n=this.options;n.raw&&n.windowBits>0?n.windowBits=-n.windowBits:n.gzip&&n.windowBits>0&&n.windowBits<16&&(n.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Sc,this.strm.avail_out=0;let e=kn.deflateInit2(this.strm,n.level,n.method,n.windowBits,n.memLevel,n.strategy);if(e!==hi)throw new Error(br[e]);if(n.header&&kn.deflateSetHeader(this.strm,n.header),n.dictionary){let i;if(typeof n.dictionary=="string"?i=to.string2buf(n.dictionary):no.call(n.dictionary)==="[object ArrayBuffer]"?i=new Uint8Array(n.dictionary):i=n.dictionary,e=kn.deflateSetDictionary(this.strm,i),e!==hi)throw new Error(br[e]);this._dict_set=!0}}$n.prototype.push=function(t,n){const e=this.strm,i=this.options.chunkSize;let r,s;if(this.ended)return!1;for(n===~~n?s=n:s=n===!0?Nc:Ac,typeof t=="string"?e.input=to.string2buf(t):no.call(t)==="[object ArrayBuffer]"?e.input=new Uint8Array(t):e.input=t,e.next_in=0,e.avail_in=e.input.length;;){if(e.avail_out===0&&(e.output=new Uint8Array(i),e.next_out=0,e.avail_out=i),(s===xc||s===Cc)&&e.avail_out<=6){this.onData(e.output.subarray(0,e.next_out)),e.avail_out=0;continue}if(r=kn.deflate(e,s),r===Dc)return e.next_out>0&&this.onData(e.output.subarray(0,e.next_out)),r=kn.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===hi;if(e.avail_out===0){this.onData(e.output);continue}if(s>0&&e.next_out>0){this.onData(e.output.subarray(0,e.next_out)),e.avail_out=0;continue}if(e.avail_in===0)break}return!0};$n.prototype.onData=function(t){this.chunks.push(t)};$n.prototype.onEnd=function(t){t===hi&&(this.result=eo.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};function Dr(t,n){const e=new $n(n);if(e.push(t,!0),e.err)throw e.msg||br[e.err];return e.result}function $c(t,n){return n=n||{},n.raw=!0,Dr(t,n)}function Rc(t,n){return n=n||{},n.gzip=!0,Dr(t,n)}an.Deflate=$n;an.deflate=Dr;an.deflateRaw=$c;an.gzip=Rc;an.constants=Vt;var fn={},it={};const Jn=16209,Lc=16191;var Fc=function(n,e){let i,r,s,a,o,u,l,f,p,m,d,b,w,y,S,v,M,T,O,Y,E,D,A,k;const F=n.state;i=n.next_in,A=n.input,r=i+(n.avail_in-5),s=n.next_out,k=n.output,a=s-(e-n.avail_out),o=s+(n.avail_out-257),u=F.dmax,l=F.wsize,f=F.whave,p=F.wnext,m=F.window,d=F.hold,b=F.bits,w=F.lencode,y=F.distcode,S=(1<<F.lenbits)-1,v=(1<<F.distbits)-1;e:do{b<15&&(d+=A[i++]<<b,b+=8,d+=A[i++]<<b,b+=8),M=w[d&S];t:for(;;){if(T=M>>>24,d>>>=T,b-=T,T=M>>>16&255,T===0)k[s++]=M&65535;else if(T&16){O=M&65535,T&=15,T&&(b<T&&(d+=A[i++]<<b,b+=8),O+=d&(1<<T)-1,d>>>=T,b-=T),b<15&&(d+=A[i++]<<b,b+=8,d+=A[i++]<<b,b+=8),M=y[d&v];n:for(;;){if(T=M>>>24,d>>>=T,b-=T,T=M>>>16&255,T&16){if(Y=M&65535,T&=15,b<T&&(d+=A[i++]<<b,b+=8,b<T&&(d+=A[i++]<<b,b+=8)),Y+=d&(1<<T)-1,Y>u){n.msg="invalid distance too far back",F.mode=Jn;break e}if(d>>>=T,b-=T,T=s-a,Y>T){if(T=Y-T,T>f&&F.sane){n.msg="invalid distance too far back",F.mode=Jn;break e}if(E=0,D=m,p===0){if(E+=l-T,T<O){O-=T;do k[s++]=m[E++];while(--T);E=s-Y,D=k}}else if(p<T){if(E+=l+p-T,T-=p,T<O){O-=T;do k[s++]=m[E++];while(--T);if(E=0,p<O){T=p,O-=T;do k[s++]=m[E++];while(--T);E=s-Y,D=k}}}else if(E+=p-T,T<O){O-=T;do k[s++]=m[E++];while(--T);E=s-Y,D=k}for(;O>2;)k[s++]=D[E++],k[s++]=D[E++],k[s++]=D[E++],O-=3;O&&(k[s++]=D[E++],O>1&&(k[s++]=D[E++]))}else{E=s-Y;do k[s++]=k[E++],k[s++]=k[E++],k[s++]=k[E++],O-=3;while(O>2);O&&(k[s++]=k[E++],O>1&&(k[s++]=k[E++]))}}else if(T&64){n.msg="invalid distance code",F.mode=Jn;break e}else{M=y[(M&65535)+(d&(1<<T)-1)];continue n}break}}else if(T&64)if(T&32){F.mode=Lc;break e}else{n.msg="invalid literal/length code",F.mode=Jn;break e}else{M=w[(M&65535)+(d&(1<<T)-1)];continue t}break}}while(i<r&&s<o);O=b>>3,i-=O,b-=O<<3,d&=(1<<b)-1,n.next_in=i,n.next_out=s,n.avail_in=i<r?5+(r-i):5-(i-r),n.avail_out=s<o?257+(o-s):257-(s-o),F.hold=d,F.bits=b};const Gt=15,Ts=852,Is=592,Ps=0,qi=1,Ss=2,Uc=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),zc=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),Hc=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),jc=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),Zc=(t,n,e,i,r,s,a,o)=>{const u=o.bits;let l=0,f=0,p=0,m=0,d=0,b=0,w=0,y=0,S=0,v=0,M,T,O,Y,E,D=null,A;const k=new Uint16Array(Gt+1),F=new Uint16Array(Gt+1);let U=null,K,ie,q;for(l=0;l<=Gt;l++)k[l]=0;for(f=0;f<i;f++)k[n[e+f]]++;for(d=u,m=Gt;m>=1&&k[m]===0;m--);if(d>m&&(d=m),m===0)return r[s++]=1<<24|64<<16|0,r[s++]=1<<24|64<<16|0,o.bits=1,0;for(p=1;p<m&&k[p]===0;p++);for(d<p&&(d=p),y=1,l=1;l<=Gt;l++)if(y<<=1,y-=k[l],y<0)return-1;if(y>0&&(t===Ps||m!==1))return-1;for(F[1]=0,l=1;l<Gt;l++)F[l+1]=F[l]+k[l];for(f=0;f<i;f++)n[e+f]!==0&&(a[F[n[e+f]]++]=f);if(t===Ps?(D=U=a,A=20):t===qi?(D=Uc,U=zc,A=257):(D=Hc,U=jc,A=0),v=0,f=0,l=p,E=s,b=d,w=0,O=-1,S=1<<d,Y=S-1,t===qi&&S>Ts||t===Ss&&S>Is)return 1;for(;;){K=l-w,a[f]+1<A?(ie=0,q=a[f]):a[f]>=A?(ie=U[a[f]-A],q=D[a[f]-A]):(ie=96,q=0),M=1<<l-w,T=1<<b,p=T;do T-=M,r[E+(v>>w)+T]=K<<24|ie<<16|q|0;while(T!==0);for(M=1<<l-1;v&M;)M>>=1;if(M!==0?(v&=M-1,v+=M):v=0,f++,--k[l]===0){if(l===m)break;l=n[e+a[f]]}if(l>d&&(v&Y)!==O){for(w===0&&(w=d),E+=p,b=l-w,y=1<<b;b+w<m&&(y-=k[b+w],!(y<=0));)b++,y<<=1;if(S+=1<<b,t===qi&&S>Ts||t===Ss&&S>Is)return 1;O=v&Y,r[O]=d<<24|b<<16|E-s|0}}return v!==0&&(r[E+v]=l-w<<24|64<<16|0),o.bits=d,0};var Vc=Zc;const gr=Za,lt=Va,Yc=Fc,En=Vc,Xc=0,io=1,ro=2,{Z_FINISH:As,Z_BLOCK:Wc,Z_TREES:Qn,Z_OK:jt,Z_STREAM_END:Gc,Z_NEED_DICT:Kc,Z_STREAM_ERROR:et,Z_DATA_ERROR:so,Z_MEM_ERROR:ao,Z_BUF_ERROR:qc,Z_DEFLATED:xs}=Vt,gi=16180,Cs=16181,Ns=16182,Ds=16183,Ms=16184,Os=16185,Bs=16186,$s=16187,Rs=16188,Ls=16189,di=16190,wt=16191,Ji=16192,Fs=16193,Qi=16194,Us=16195,zs=16196,Hs=16197,js=16198,ei=16199,ti=16200,Zs=16201,Vs=16202,Ys=16203,Xs=16204,Ws=16205,er=16206,Gs=16207,Ks=16208,me=16209,oo=16210,lo=16211,Jc=852,Qc=592,eu=15,tu=eu,qs=t=>(t>>>24&255)+(t>>>8&65280)+((t&65280)<<8)+((t&255)<<24);function nu(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Yt=t=>{if(!t)return 1;const n=t.state;return!n||n.strm!==t||n.mode<gi||n.mode>lo?1:0},co=t=>{if(Yt(t))return et;const n=t.state;return t.total_in=t.total_out=n.total=0,t.msg="",n.wrap&&(t.adler=n.wrap&1),n.mode=gi,n.last=0,n.havedict=0,n.flags=-1,n.dmax=32768,n.head=null,n.hold=0,n.bits=0,n.lencode=n.lendyn=new Int32Array(Jc),n.distcode=n.distdyn=new Int32Array(Qc),n.sane=1,n.back=-1,jt},uo=t=>{if(Yt(t))return et;const n=t.state;return n.wsize=0,n.whave=0,n.wnext=0,co(t)},fo=(t,n)=>{let e;if(Yt(t))return et;const i=t.state;return n<0?(e=0,n=-n):(e=(n>>4)+5,n<48&&(n&=15)),n&&(n<8||n>15)?et:(i.window!==null&&i.wbits!==n&&(i.window=null),i.wrap=e,i.wbits=n,uo(t))},ho=(t,n)=>{if(!t)return et;const e=new nu;t.state=e,e.strm=t,e.window=null,e.mode=gi;const i=fo(t,n);return i!==jt&&(t.state=null),i},iu=t=>ho(t,tu);let Js=!0,tr,nr;const ru=t=>{if(Js){tr=new Int32Array(512),nr=new Int32Array(32);let n=0;for(;n<144;)t.lens[n++]=8;for(;n<256;)t.lens[n++]=9;for(;n<280;)t.lens[n++]=7;for(;n<288;)t.lens[n++]=8;for(En(io,t.lens,0,288,tr,0,t.work,{bits:9}),n=0;n<32;)t.lens[n++]=5;En(ro,t.lens,0,32,nr,0,t.work,{bits:5}),Js=!1}t.lencode=tr,t.lenbits=9,t.distcode=nr,t.distbits=5},_o=(t,n,e,i)=>{let r;const s=t.state;return s.window===null&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new Uint8Array(s.wsize)),i>=s.wsize?(s.window.set(n.subarray(e-s.wsize,e),0),s.wnext=0,s.whave=s.wsize):(r=s.wsize-s.wnext,r>i&&(r=i),s.window.set(n.subarray(e-i,e-i+r),s.wnext),i-=r,i?(s.window.set(n.subarray(e-i,e),0),s.wnext=i,s.whave=s.wsize):(s.wnext+=r,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=r))),0},su=(t,n)=>{let e,i,r,s,a,o,u,l,f,p,m,d,b,w,y=0,S,v,M,T,O,Y,E,D;const A=new Uint8Array(4);let k,F;const U=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(Yt(t)||!t.output||!t.input&&t.avail_in!==0)return et;e=t.state,e.mode===wt&&(e.mode=Ji),a=t.next_out,r=t.output,u=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,l=e.hold,f=e.bits,p=o,m=u,D=jt;e:for(;;)switch(e.mode){case gi:if(e.wrap===0){e.mode=Ji;break}for(;f<16;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(e.wrap&2&&l===35615){e.wbits===0&&(e.wbits=15),e.check=0,A[0]=l&255,A[1]=l>>>8&255,e.check=lt(e.check,A,2,0),l=0,f=0,e.mode=Cs;break}if(e.head&&(e.head.done=!1),!(e.wrap&1)||(((l&255)<<8)+(l>>8))%31){t.msg="incorrect header check",e.mode=me;break}if((l&15)!==xs){t.msg="unknown compression method",e.mode=me;break}if(l>>>=4,f-=4,E=(l&15)+8,e.wbits===0&&(e.wbits=E),E>15||E>e.wbits){t.msg="invalid window size",e.mode=me;break}e.dmax=1<<e.wbits,e.flags=0,t.adler=e.check=1,e.mode=l&512?Ls:wt,l=0,f=0;break;case Cs:for(;f<16;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(e.flags=l,(e.flags&255)!==xs){t.msg="unknown compression method",e.mode=me;break}if(e.flags&57344){t.msg="unknown header flags set",e.mode=me;break}e.head&&(e.head.text=l>>8&1),e.flags&512&&e.wrap&4&&(A[0]=l&255,A[1]=l>>>8&255,e.check=lt(e.check,A,2,0)),l=0,f=0,e.mode=Ns;case Ns:for(;f<32;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}e.head&&(e.head.time=l),e.flags&512&&e.wrap&4&&(A[0]=l&255,A[1]=l>>>8&255,A[2]=l>>>16&255,A[3]=l>>>24&255,e.check=lt(e.check,A,4,0)),l=0,f=0,e.mode=Ds;case Ds:for(;f<16;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}e.head&&(e.head.xflags=l&255,e.head.os=l>>8),e.flags&512&&e.wrap&4&&(A[0]=l&255,A[1]=l>>>8&255,e.check=lt(e.check,A,2,0)),l=0,f=0,e.mode=Ms;case Ms:if(e.flags&1024){for(;f<16;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}e.length=l,e.head&&(e.head.extra_len=l),e.flags&512&&e.wrap&4&&(A[0]=l&255,A[1]=l>>>8&255,e.check=lt(e.check,A,2,0)),l=0,f=0}else e.head&&(e.head.extra=null);e.mode=Os;case Os:if(e.flags&1024&&(d=e.length,d>o&&(d=o),d&&(e.head&&(E=e.head.extra_len-e.length,e.head.extra||(e.head.extra=new Uint8Array(e.head.extra_len)),e.head.extra.set(i.subarray(s,s+d),E)),e.flags&512&&e.wrap&4&&(e.check=lt(e.check,i,d,s)),o-=d,s+=d,e.length-=d),e.length))break e;e.length=0,e.mode=Bs;case Bs:if(e.flags&2048){if(o===0)break e;d=0;do E=i[s+d++],e.head&&E&&e.length<65536&&(e.head.name+=String.fromCharCode(E));while(E&&d<o);if(e.flags&512&&e.wrap&4&&(e.check=lt(e.check,i,d,s)),o-=d,s+=d,E)break e}else e.head&&(e.head.name=null);e.length=0,e.mode=$s;case $s:if(e.flags&4096){if(o===0)break e;d=0;do E=i[s+d++],e.head&&E&&e.length<65536&&(e.head.comment+=String.fromCharCode(E));while(E&&d<o);if(e.flags&512&&e.wrap&4&&(e.check=lt(e.check,i,d,s)),o-=d,s+=d,E)break e}else e.head&&(e.head.comment=null);e.mode=Rs;case Rs:if(e.flags&512){for(;f<16;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(e.wrap&4&&l!==(e.check&65535)){t.msg="header crc mismatch",e.mode=me;break}l=0,f=0}e.head&&(e.head.hcrc=e.flags>>9&1,e.head.done=!0),t.adler=e.check=0,e.mode=wt;break;case Ls:for(;f<32;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}t.adler=e.check=qs(l),l=0,f=0,e.mode=di;case di:if(e.havedict===0)return t.next_out=a,t.avail_out=u,t.next_in=s,t.avail_in=o,e.hold=l,e.bits=f,Kc;t.adler=e.check=1,e.mode=wt;case wt:if(n===Wc||n===Qn)break e;case Ji:if(e.last){l>>>=f&7,f-=f&7,e.mode=er;break}for(;f<3;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}switch(e.last=l&1,l>>>=1,f-=1,l&3){case 0:e.mode=Fs;break;case 1:if(ru(e),e.mode=ei,n===Qn){l>>>=2,f-=2;break e}break;case 2:e.mode=zs;break;case 3:t.msg="invalid block type",e.mode=me}l>>>=2,f-=2;break;case Fs:for(l>>>=f&7,f-=f&7;f<32;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if((l&65535)!==(l>>>16^65535)){t.msg="invalid stored block lengths",e.mode=me;break}if(e.length=l&65535,l=0,f=0,e.mode=Qi,n===Qn)break e;case Qi:e.mode=Us;case Us:if(d=e.length,d){if(d>o&&(d=o),d>u&&(d=u),d===0)break e;r.set(i.subarray(s,s+d),a),o-=d,s+=d,u-=d,a+=d,e.length-=d;break}e.mode=wt;break;case zs:for(;f<14;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(e.nlen=(l&31)+257,l>>>=5,f-=5,e.ndist=(l&31)+1,l>>>=5,f-=5,e.ncode=(l&15)+4,l>>>=4,f-=4,e.nlen>286||e.ndist>30){t.msg="too many length or distance symbols",e.mode=me;break}e.have=0,e.mode=Hs;case Hs:for(;e.have<e.ncode;){for(;f<3;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}e.lens[U[e.have++]]=l&7,l>>>=3,f-=3}for(;e.have<19;)e.lens[U[e.have++]]=0;if(e.lencode=e.lendyn,e.lenbits=7,k={bits:e.lenbits},D=En(Xc,e.lens,0,19,e.lencode,0,e.work,k),e.lenbits=k.bits,D){t.msg="invalid code lengths set",e.mode=me;break}e.have=0,e.mode=js;case js:for(;e.have<e.nlen+e.ndist;){for(;y=e.lencode[l&(1<<e.lenbits)-1],S=y>>>24,v=y>>>16&255,M=y&65535,!(S<=f);){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(M<16)l>>>=S,f-=S,e.lens[e.have++]=M;else{if(M===16){for(F=S+2;f<F;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(l>>>=S,f-=S,e.have===0){t.msg="invalid bit length repeat",e.mode=me;break}E=e.lens[e.have-1],d=3+(l&3),l>>>=2,f-=2}else if(M===17){for(F=S+3;f<F;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}l>>>=S,f-=S,E=0,d=3+(l&7),l>>>=3,f-=3}else{for(F=S+7;f<F;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}l>>>=S,f-=S,E=0,d=11+(l&127),l>>>=7,f-=7}if(e.have+d>e.nlen+e.ndist){t.msg="invalid bit length repeat",e.mode=me;break}for(;d--;)e.lens[e.have++]=E}}if(e.mode===me)break;if(e.lens[256]===0){t.msg="invalid code -- missing end-of-block",e.mode=me;break}if(e.lenbits=9,k={bits:e.lenbits},D=En(io,e.lens,0,e.nlen,e.lencode,0,e.work,k),e.lenbits=k.bits,D){t.msg="invalid literal/lengths set",e.mode=me;break}if(e.distbits=6,e.distcode=e.distdyn,k={bits:e.distbits},D=En(ro,e.lens,e.nlen,e.ndist,e.distcode,0,e.work,k),e.distbits=k.bits,D){t.msg="invalid distances set",e.mode=me;break}if(e.mode=ei,n===Qn)break e;case ei:e.mode=ti;case ti:if(o>=6&&u>=258){t.next_out=a,t.avail_out=u,t.next_in=s,t.avail_in=o,e.hold=l,e.bits=f,Yc(t,m),a=t.next_out,r=t.output,u=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,l=e.hold,f=e.bits,e.mode===wt&&(e.back=-1);break}for(e.back=0;y=e.lencode[l&(1<<e.lenbits)-1],S=y>>>24,v=y>>>16&255,M=y&65535,!(S<=f);){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(v&&!(v&240)){for(T=S,O=v,Y=M;y=e.lencode[Y+((l&(1<<T+O)-1)>>T)],S=y>>>24,v=y>>>16&255,M=y&65535,!(T+S<=f);){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}l>>>=T,f-=T,e.back+=T}if(l>>>=S,f-=S,e.back+=S,e.length=M,v===0){e.mode=Ws;break}if(v&32){e.back=-1,e.mode=wt;break}if(v&64){t.msg="invalid literal/length code",e.mode=me;break}e.extra=v&15,e.mode=Zs;case Zs:if(e.extra){for(F=e.extra;f<F;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}e.length+=l&(1<<e.extra)-1,l>>>=e.extra,f-=e.extra,e.back+=e.extra}e.was=e.length,e.mode=Vs;case Vs:for(;y=e.distcode[l&(1<<e.distbits)-1],S=y>>>24,v=y>>>16&255,M=y&65535,!(S<=f);){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(!(v&240)){for(T=S,O=v,Y=M;y=e.distcode[Y+((l&(1<<T+O)-1)>>T)],S=y>>>24,v=y>>>16&255,M=y&65535,!(T+S<=f);){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}l>>>=T,f-=T,e.back+=T}if(l>>>=S,f-=S,e.back+=S,v&64){t.msg="invalid distance code",e.mode=me;break}e.offset=M,e.extra=v&15,e.mode=Ys;case Ys:if(e.extra){for(F=e.extra;f<F;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}e.offset+=l&(1<<e.extra)-1,l>>>=e.extra,f-=e.extra,e.back+=e.extra}if(e.offset>e.dmax){t.msg="invalid distance too far back",e.mode=me;break}e.mode=Xs;case Xs:if(u===0)break e;if(d=m-u,e.offset>d){if(d=e.offset-d,d>e.whave&&e.sane){t.msg="invalid distance too far back",e.mode=me;break}d>e.wnext?(d-=e.wnext,b=e.wsize-d):b=e.wnext-d,d>e.length&&(d=e.length),w=e.window}else w=r,b=a-e.offset,d=e.length;d>u&&(d=u),u-=d,e.length-=d;do r[a++]=w[b++];while(--d);e.length===0&&(e.mode=ti);break;case Ws:if(u===0)break e;r[a++]=e.length,u--,e.mode=ti;break;case er:if(e.wrap){for(;f<32;){if(o===0)break e;o--,l|=i[s++]<<f,f+=8}if(m-=u,t.total_out+=m,e.total+=m,e.wrap&4&&m&&(t.adler=e.check=e.flags?lt(e.check,r,m,a-m):gr(e.check,r,m,a-m)),m=u,e.wrap&4&&(e.flags?l:qs(l))!==e.check){t.msg="incorrect data check",e.mode=me;break}l=0,f=0}e.mode=Gs;case Gs:if(e.wrap&&e.flags){for(;f<32;){if(o===0)break e;o--,l+=i[s++]<<f,f+=8}if(e.wrap&4&&l!==(e.total&4294967295)){t.msg="incorrect length check",e.mode=me;break}l=0,f=0}e.mode=Ks;case Ks:D=Gc;break e;case me:D=so;break e;case oo:return ao;case lo:default:return et}return t.next_out=a,t.avail_out=u,t.next_in=s,t.avail_in=o,e.hold=l,e.bits=f,(e.wsize||m!==t.avail_out&&e.mode<me&&(e.mode<er||n!==As))&&_o(t,t.output,t.next_out,m-t.avail_out),p-=t.avail_in,m-=t.avail_out,t.total_in+=p,t.total_out+=m,e.total+=m,e.wrap&4&&m&&(t.adler=e.check=e.flags?lt(e.check,r,m,t.next_out-m):gr(e.check,r,m,t.next_out-m)),t.data_type=e.bits+(e.last?64:0)+(e.mode===wt?128:0)+(e.mode===ei||e.mode===Qi?256:0),(p===0&&m===0||n===As)&&D===jt&&(D=qc),D},au=t=>{if(Yt(t))return et;let n=t.state;return n.window&&(n.window=null),t.state=null,jt},ou=(t,n)=>{if(Yt(t))return et;const e=t.state;return e.wrap&2?(e.head=n,n.done=!1,jt):et},lu=(t,n)=>{const e=n.length;let i,r,s;return Yt(t)||(i=t.state,i.wrap!==0&&i.mode!==di)?et:i.mode===di&&(r=1,r=gr(r,n,e,0),r!==i.check)?so:(s=_o(t,n,e,e),s?(i.mode=oo,ao):(i.havedict=1,jt))};it.inflateReset=uo;it.inflateReset2=fo;it.inflateResetKeep=co;it.inflateInit=iu;it.inflateInit2=ho;it.inflate=su;it.inflateEnd=au;it.inflateGetHeader=ou;it.inflateSetDictionary=lu;it.inflateInfo="pako inflate (from Nodeca project)";function cu(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var uu=cu;const Tt=it,mo=bi,vr=Bn,wr=Cr,fu=Qa,hu=uu,po=Object.prototype.toString,{Z_NO_FLUSH:du,Z_FINISH:_u,Z_OK:xn,Z_STREAM_END:ir,Z_NEED_DICT:rr,Z_STREAM_ERROR:mu,Z_DATA_ERROR:Qs,Z_MEM_ERROR:pu}=Vt;function Rn(t){this.options=mo.assign({chunkSize:1024*64,windowBits:15,to:""},t||{});const n=this.options;n.raw&&n.windowBits>=0&&n.windowBits<16&&(n.windowBits=-n.windowBits,n.windowBits===0&&(n.windowBits=-15)),n.windowBits>=0&&n.windowBits<16&&!(t&&t.windowBits)&&(n.windowBits+=32),n.windowBits>15&&n.windowBits<48&&(n.windowBits&15||(n.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new fu,this.strm.avail_out=0;let e=Tt.inflateInit2(this.strm,n.windowBits);if(e!==xn)throw new Error(wr[e]);if(this.header=new hu,Tt.inflateGetHeader(this.strm,this.header),n.dictionary&&(typeof n.dictionary=="string"?n.dictionary=vr.string2buf(n.dictionary):po.call(n.dictionary)==="[object ArrayBuffer]"&&(n.dictionary=new Uint8Array(n.dictionary)),n.raw&&(e=Tt.inflateSetDictionary(this.strm,n.dictionary),e!==xn)))throw new Error(wr[e])}Rn.prototype.push=function(t,n){const e=this.strm,i=this.options.chunkSize,r=this.options.dictionary;let s,a,o;if(this.ended)return!1;for(n===~~n?a=n:a=n===!0?_u:du,po.call(t)==="[object ArrayBuffer]"?e.input=new Uint8Array(t):e.input=t,e.next_in=0,e.avail_in=e.input.length;;){for(e.avail_out===0&&(e.output=new Uint8Array(i),e.next_out=0,e.avail_out=i),s=Tt.inflate(e,a),s===rr&&r&&(s=Tt.inflateSetDictionary(e,r),s===xn?s=Tt.inflate(e,a):s===Qs&&(s=rr));e.avail_in>0&&s===ir&&e.state.wrap>0&&t[e.next_in]!==0;)Tt.inflateReset(e),s=Tt.inflate(e,a);switch(s){case mu:case Qs:case rr:case pu:return this.onEnd(s),this.ended=!0,!1}if(o=e.avail_out,e.next_out&&(e.avail_out===0||s===ir))if(this.options.to==="string"){let u=vr.utf8border(e.output,e.next_out),l=e.next_out-u,f=vr.buf2string(e.output,u);e.next_out=l,e.avail_out=i-l,l&&e.output.set(e.output.subarray(u,u+l),0),this.onData(f)}else this.onData(e.output.length===e.next_out?e.output:e.output.subarray(0,e.next_out));if(!(s===xn&&o===0)){if(s===ir)return s=Tt.inflateEnd(this.strm),this.onEnd(s),this.ended=!0,!0;if(e.avail_in===0)break}}return!0};Rn.prototype.onData=function(t){this.chunks.push(t)};Rn.prototype.onEnd=function(t){t===xn&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=mo.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};function Mr(t,n){const e=new Rn(n);if(e.push(t),e.err)throw e.msg||wr[e.err];return e.result}function bu(t,n){return n=n||{},n.raw=!0,Mr(t,n)}fn.Inflate=Rn;fn.inflate=Mr;fn.inflateRaw=bu;fn.ungzip=Mr;fn.constants=Vt;const{Deflate:gu,deflate:vu,deflateRaw:wu,gzip:yu}=an,{Inflate:ku,inflate:Eu,inflateRaw:Tu,ungzip:Iu}=fn,Pu=Vt;mt.Deflate=gu;mt.deflate=vu;mt.deflateRaw=wu;mt.gzip=yu;mt.Inflate=ku;mt.inflate=Eu;mt.inflateRaw=Tu;mt.ungzip=Iu;mt.constants=Pu;var Zt={};Object.defineProperty(Zt,"__esModule",{value:!0});Zt.IO=Zt.BitIO=void 0;const Su=1024,Au=1024;class bo{constructor(n=Su){P(this,"length",0);P(this,"_pointer",0);typeof n=="number"?(this.length=0,this.buffer=new ArrayBuffer(n)):(this.length=n.byteLength,this.buffer=n)}set pointer(n){n>this.length&&(this.length=n),this._pointer=n}get pointer(){return this._pointer}get view(){return new DataView(this.buffer)}final(){return this.buffer.slice(0,this.length)}expect(n){if(this.buffer.byteLength<this.pointer+n){const e=new Uint8Array(this.buffer.byteLength+n+Au);e.set(new Uint8Array(this.buffer),0),this.buffer=e.buffer}}}class xu extends bo{getByte(){return this.view.getUint8(this.pointer++)}getBuffer(n){const e=this.buffer.slice(this.pointer,this.pointer+n);return this.pointer+=n,e}putByte(n){this.expect(1),this.view.setUint8(this.pointer++,n)}putBuffer(n){this.expect(n.byteLength),new Uint8Array(this.buffer).set(new Uint8Array(n),this.pointer),this.pointer+=n.byteLength}withholdByte(){const n=this.pointer++;return e=>this.view.setUint8(n,e)}}Zt.IO=xu;class Cu extends bo{constructor(){super(...arguments);P(this,"_bitPointer",0)}set pointer(e){this._bitPointer=0,super.pointer=e}get pointer(){return super.pointer}set bitPointer(e){e<8?this._bitPointer=e:(this.pointer+=e>>3,this._bitPointer=e&7)}get bitPointer(){return this._bitPointer}flush(){this.bitPointer!=0&&(this.bitPointer=0,this.pointer++)}final(){return this.flush(),super.final()}putBit(e){this.expect(1),this.view.setUint8(this.pointer,this.view.getUint8(this.pointer)|(e?1:0)<<this.bitPointer++)}getBit(){return!!(this.view.getUint8(this.pointer)&1<<this.bitPointer++)}putBits(e,i){for(let r=0;r<i;r++)this.putBit(!!(e>>r&1))}getBits(e){let i=0;for(let r=0;r<e;r++)i|=(this.getBit()?1:0)<<r;return i}}Zt.BitIO=Cu;var de={};Object.defineProperty(de,"__esModule",{value:!0});de.decodeBigInt=vo;de.decodeIndex=Bu;de.encodeBigInt=go;de.encodeIndex=Ou;de.hashStr=Nu;de.hex=Du;de.stringSort=Mu;function Nu(t){let n=5381;for(let e=0;e<t.length;e++)n=(n<<5)+n^t.charCodeAt(e);return n>>>0}function Du(t,n,e="0x"){return e+t.toString(16).padStart(n*2,"0")}function Mu(t,n){return(t>n?1:0)-(t<n?1:0)}function go(t,n,e){const i=t<0n;if(i){if(!n)throw new Error("Cannot encode negative bigint when parser is not signed.");t=-t}for(n?(e.putByte(Number((t&0b00111111n)<<2n)|(i?2:0)|(t>0b00111111n?1:0)),t>>=6n):(e.putByte(Number((t&0b01111111n)<<1n)|(t>0b01111111n?1:0)),t>>=7n);t>0n;)e.putByte(Number((t&0b01111111n)<<1n)|(t>0b01111111n?1:0)),t>>=7n}function vo(t,n){let e=n.getByte(),i=t?BigInt(e&252)>>2n:BigInt(e&254)>>1n;const r=t?!!(e&2):!1;let s=t?6:7;for(;e&1;)e=n.getByte(),i|=BigInt((e&254)>>1)<<BigInt(s),s+=7;return r?-i:i}function Ou(t,n,e){if(e<0)throw new Error("EncodeIndex invalid length.");if(n<0||n>=e)throw new Error("EncodeIndex out of bounds.");if(!(e<=1)){if(e==2){t.bitField.putBit(n===1);return}go(BigInt(n),!1,t.body)}}function Bu(t,n){if(n<0)throw new Error("DecodeIndex invalid length.");let e;if(n<=1?e=0:n==2?e=t.bitField.getBit()?1:0:e=Number(vo(!1,t.body)),e<0||e>=n)throw new Error("DecodeIndex out of bounds.");return e}var wo={exports:{}};(function(t,n){(function(e,i){t.exports=i()})(typeof self<"u"?self:typeof window<"u"?window:Zi,function(){var e="3.7.7",i=e,r=typeof Buffer=="function",s=typeof TextDecoder=="function"?new TextDecoder:void 0,a=typeof TextEncoder=="function"?new TextEncoder:void 0,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",u=Array.prototype.slice.call(o),l=function(I){var H={};return I.forEach(function(J,be){return H[J]=be}),H}(u),f=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,p=String.fromCharCode.bind(String),m=typeof Uint8Array.from=="function"?Uint8Array.from.bind(Uint8Array):function(I){return new Uint8Array(Array.prototype.slice.call(I,0))},d=function(I){return I.replace(/=/g,"").replace(/[+\/]/g,function(H){return H=="+"?"-":"_"})},b=function(I){return I.replace(/[^A-Za-z0-9\+\/]/g,"")},w=function(I){for(var H,J,be,re,N="",W=I.length%3,Te=0;Te<I.length;){if((J=I.charCodeAt(Te++))>255||(be=I.charCodeAt(Te++))>255||(re=I.charCodeAt(Te++))>255)throw new TypeError("invalid character found");H=J<<16|be<<8|re,N+=u[H>>18&63]+u[H>>12&63]+u[H>>6&63]+u[H&63]}return W?N.slice(0,W-3)+"===".substring(W):N},y=typeof btoa=="function"?function(I){return btoa(I)}:r?function(I){return Buffer.from(I,"binary").toString("base64")}:w,S=r?function(I){return Buffer.from(I).toString("base64")}:function(I){for(var H=4096,J=[],be=0,re=I.length;be<re;be+=H)J.push(p.apply(null,I.subarray(be,be+H)));return y(J.join(""))},v=function(I,H){return H===void 0&&(H=!1),H?d(S(I)):S(I)},M=function(I){if(I.length<2){var H=I.charCodeAt(0);return H<128?I:H<2048?p(192|H>>>6)+p(128|H&63):p(224|H>>>12&15)+p(128|H>>>6&63)+p(128|H&63)}else{var H=65536+(I.charCodeAt(0)-55296)*1024+(I.charCodeAt(1)-56320);return p(240|H>>>18&7)+p(128|H>>>12&63)+p(128|H>>>6&63)+p(128|H&63)}},T=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,O=function(I){return I.replace(T,M)},Y=r?function(I){return Buffer.from(I,"utf8").toString("base64")}:a?function(I){return S(a.encode(I))}:function(I){return y(O(I))},E=function(I,H){return H===void 0&&(H=!1),H?d(Y(I)):Y(I)},D=function(I){return E(I,!0)},A=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,k=function(I){switch(I.length){case 4:var H=(7&I.charCodeAt(0))<<18|(63&I.charCodeAt(1))<<12|(63&I.charCodeAt(2))<<6|63&I.charCodeAt(3),J=H-65536;return p((J>>>10)+55296)+p((J&1023)+56320);case 3:return p((15&I.charCodeAt(0))<<12|(63&I.charCodeAt(1))<<6|63&I.charCodeAt(2));default:return p((31&I.charCodeAt(0))<<6|63&I.charCodeAt(1))}},F=function(I){return I.replace(A,k)},U=function(I){if(I=I.replace(/\s+/g,""),!f.test(I))throw new TypeError("malformed base64.");I+="==".slice(2-(I.length&3));for(var H,J="",be,re,N=0;N<I.length;)H=l[I.charAt(N++)]<<18|l[I.charAt(N++)]<<12|(be=l[I.charAt(N++)])<<6|(re=l[I.charAt(N++)]),J+=be===64?p(H>>16&255):re===64?p(H>>16&255,H>>8&255):p(H>>16&255,H>>8&255,H&255);return J},K=typeof atob=="function"?function(I){return atob(b(I))}:r?function(I){return Buffer.from(I,"base64").toString("binary")}:U,ie=r?function(I){return m(Buffer.from(I,"base64"))}:function(I){return m(K(I).split("").map(function(H){return H.charCodeAt(0)}))},q=function(I){return ie(we(I))},_e=r?function(I){return Buffer.from(I,"base64").toString("utf8")}:s?function(I){return s.decode(ie(I))}:function(I){return F(K(I))},we=function(I){return b(I.replace(/[-_]/g,function(H){return H=="-"?"+":"/"}))},Me=function(I){return _e(we(I))},je=function(I){if(typeof I!="string")return!1;var H=I.replace(/\s+/g,"").replace(/={0,2}$/,"");return!/[^\s0-9a-zA-Z\+/]/.test(H)||!/[^\s0-9a-zA-Z\-_]/.test(H)},te=function(I){return{value:I,enumerable:!1,writable:!0,configurable:!0}},Ne=function(){var I=function(H,J){return Object.defineProperty(String.prototype,H,te(J))};I("fromBase64",function(){return Me(this)}),I("toBase64",function(H){return E(this,H)}),I("toBase64URI",function(){return E(this,!0)}),I("toBase64URL",function(){return E(this,!0)}),I("toUint8Array",function(){return q(this)})},Ze=function(){var I=function(H,J){return Object.defineProperty(Uint8Array.prototype,H,te(J))};I("toBase64",function(H){return v(this,H)}),I("toBase64URI",function(){return v(this,!0)}),I("toBase64URL",function(){return v(this,!0)})},It=function(){Ne(),Ze()},tt={version:e,VERSION:i,atob:K,atobPolyfill:U,btoa:y,btoaPolyfill:w,fromBase64:Me,toBase64:E,encode:E,encodeURI:D,encodeURL:D,utob:O,btou:F,decode:Me,isValid:je,fromUint8Array:v,toUint8Array:q,extendString:Ne,extendUint8Array:Ze,extendBuiltins:It};return tt.Base64={},Object.keys(tt).forEach(function(I){return tt.Base64[I]=tt[I]}),tt})})(wo);var $u=wo.exports;Object.defineProperty(pe,"__esModule",{value:!0});pe.Parser=pe.EncodeContext=pe.DecodeContext=void 0;var yo=Ru(mt),qt=Zt,li=de,ko=$u;function Ru(t){return t&&t.__esModule?t:{default:t}}function Lu(t){return yo.default.deflateRaw(t).buffer}function Fu(t){return yo.default.inflateRaw(t).buffer}function Uu(t,n=!1){return ko.Base64.fromUint8Array(new Uint8Array(t),n)}function zu(t){return ko.Base64.toUint8Array(t).buffer}class Hu{encode(n,e={}){const i=new Io(this,e);i.encode(this,n);const r=i.final();return e.base64??!1?Uu(r,e.base64UrlSafe??!1):r}decode(n){return typeof n=="string"&&(n=zu(n)),new Po(this,n).decode(this)}}pe.Parser=Hu;const Eo=1,To=2;class Io{constructor(n,e={}){P(this,"stack",[]);P(this,"bitField",new qt.BitIO);P(this,"body",new qt.IO);this.baseType=n,this.compressed=e.compressed??!0,this.forceCompressed=e.forceCompressed??!1}compress(n){if(!this.compressed)return{compressed:!1,data:n};const e=Lu(n);return e.byteLength<n.byteLength||this.forceCompressed?{compressed:!0,data:e}:{compressed:!1,data:n}}final(){const n=new qt.IO;n.putBuffer(new Uint32Array([this.baseType.magic]).buffer);const e=n.withholdByte(),{compressed:i,data:r}=this.compress(this.bitField.final());(0,li.encodeBigInt)(BigInt(r.byteLength),!1,n),n.putBuffer(r);const{compressed:s,data:a}=this.compress(this.body.final());return n.putBuffer(a),e((s?Eo:0)|(i?To:0)),n.final()}encode(n,e){this.stack.push(n),n.encodeInternal(this,e),this.stack.pop()}}pe.EncodeContext=Io;class Po{constructor(n,e){P(this,"stack",[]);this.baseType=n;const i=new qt.IO(e),r=new Uint32Array(i.getBuffer(4))[0];if(r!=this.baseType.magic)throw new Error(`ParserContext magic check failed. Expected ${(0,li.hex)(this.baseType.magic,4)} Got ${(0,li.hex)(r,4)}`);const s=i.getByte(),a=Number((0,li.decodeBigInt)(!1,i)),o=this.decompress(i.getBuffer(a),s&To);this.bitField=new qt.BitIO(o);const u=this.decompress(i.getBuffer(i.length-i.pointer),s&Eo);this.body=new qt.IO(u)}decompress(n,e){return e?Fu(n):n}decode(n){this.stack.push(n);const e=n.decodeInternal(this);return this.stack.pop(),e}}pe.DecodeContext=Po;var vi={};Object.defineProperty(vi,"__esModule",{value:!0});vi.ModifyHashParser=void 0;var ju=pe,Zu=de;class Vu extends ju.Parser{constructor(n,e){super(),this.modifier=n,this.parser=e,this.magic=(0,Zu.hashStr)(`ModifyHashParser:${this.parser.magic}:${this.modifier}`)}encodeInternal(n,e){n.encode(this.parser,e)}decodeInternal(n){return n.decode(this.parser)}}vi.ModifyHashParser=Vu;var Ot={};Object.defineProperty(Ot,"__esModule",{value:!0});Ot.BigIntParser=void 0;var Yu=pe,sr=de;class Xu extends Yu.Parser{constructor(n){super(),this.signed=n,this.magic=(0,sr.hashStr)(`BigIntParser:${this.signed?"Signed":"Unsigned"}`)}encodeInternal(n,e){(0,sr.encodeBigInt)(e,this.signed,n.body)}decodeInternal(n){return(0,sr.decodeBigInt)(this.signed,n.body)}}Ot.BigIntParser=Xu;var Ln={};Object.defineProperty(Ln,"__esModule",{value:!0});Ln.BinaryParser=void 0;var Wu=pe,Gu=de,ea=Ot;class Ku extends Wu.Parser{constructor(){super(...arguments);P(this,"magic",(0,Gu.hashStr)("BinaryParser"))}encodeInternal(e,i){e.encode(new ea.BigIntParser(!1),BigInt(i.byteLength)),e.body.putBuffer(i)}decodeInternal(e){const i=Number(e.decode(new ea.BigIntParser(!1)));return e.body.getBuffer(i)}}Ln.BinaryParser=Ku;var wi={};Object.defineProperty(wi,"__esModule",{value:!0});wi.NumberParser=void 0;var qu=pe,Ju=de;class Qu extends qu.Parser{constructor(n){super(),this.type=n,this.magic=(0,Ju.hashStr)(`NumberParser:${this.type}`)}encodeInternal(n,e){switch(n.body.expect(8),this.type){case"u8":n.body.view.setUint8(n.body.pointer,e),n.body.pointer+=1;break;case"u16":n.body.view.setUint16(n.body.pointer,e,!0),n.body.pointer+=2;break;case"u32":n.body.view.setUint32(n.body.pointer,e,!0),n.body.pointer+=4;break;case"u64":n.body.view.setBigUint64(n.body.pointer,e,!0),n.body.pointer+=8;break;case"i8":n.body.view.setInt8(n.body.pointer,e),n.body.pointer+=1;break;case"i16":n.body.view.setInt16(n.body.pointer,e,!0),n.body.pointer+=2;break;case"i32":n.body.view.setInt32(n.body.pointer,e,!0),n.body.pointer+=4;break;case"i64":n.body.view.setBigInt64(n.body.pointer,e,!0),n.body.pointer+=8;break;case"f32":n.body.view.setFloat32(n.body.pointer,e,!0),n.body.pointer+=4;break;case"f64":n.body.view.setFloat64(n.body.pointer,e,!0),n.body.pointer+=8;break;default:throw new Error("NumParser invalid type.")}}decodeInternal(n){let e;switch(this.type){case"u8":e=n.body.view.getUint8(n.body.pointer),n.body.pointer+=1;break;case"u16":e=n.body.view.getUint16(n.body.pointer,!0),n.body.pointer+=2;break;case"u32":e=n.body.view.getUint32(n.body.pointer,!0),n.body.pointer+=4;break;case"u64":e=n.body.view.getBigUint64(n.body.pointer,!0),n.body.pointer+=8;break;case"i8":e=n.body.view.getInt8(n.body.pointer),n.body.pointer+=1;break;case"i16":e=n.body.view.getInt16(n.body.pointer,!0),n.body.pointer+=2;break;case"i32":e=n.body.view.getInt32(n.body.pointer,!0),n.body.pointer+=4;break;case"i64":e=n.body.view.getBigInt64(n.body.pointer,!0),n.body.pointer+=8;break;case"f32":e=n.body.view.getFloat32(n.body.pointer,!0),n.body.pointer+=4;break;case"f64":e=n.body.view.getFloat64(n.body.pointer,!0),n.body.pointer+=8;break;default:throw new Error("NumParser invalid type.")}return e}}wi.NumberParser=Qu;var Fn={};Object.defineProperty(Fn,"__esModule",{value:!0});Fn.StringParser=void 0;var ef=pe,tf=de,ta=Ln;class nf extends ef.Parser{constructor(){super(...arguments);P(this,"magic",(0,tf.hashStr)("StringParser"))}encodeInternal(e,i){e.encode(new ta.BinaryParser,new TextEncoder().encode(i))}decodeInternal(e){return new TextDecoder("utf-8").decode(e.decode(new ta.BinaryParser))}}Fn.StringParser=nf;var yi={};Object.defineProperty(yi,"__esModule",{value:!0});yi.BooleanParser=void 0;var rf=pe,sf=de;class af extends rf.Parser{constructor(){super(...arguments);P(this,"magic",(0,sf.hashStr)("BooleanParser"))}encodeInternal(e,i){e.bitField.putBit(i)}decodeInternal(e){return e.bitField.getBit()}}yi.BooleanParser=af;var ki={};Object.defineProperty(ki,"__esModule",{value:!0});ki.NullableParser=void 0;var of=pe,lf=de;class cf extends of.Parser{constructor(n){super(),this.type=n,this.magic=(0,lf.hashStr)(`NullableParser:${this.type.magic}`)}encodeInternal(n,e){e!==null?(n.bitField.putBit(!0),n.encode(this.type,e)):n.bitField.putBit(!1)}decodeInternal(n){return n.bitField.getBit()?n.decode(this.type):null}}ki.NullableParser=cf;var Un={};Object.defineProperty(Un,"__esModule",{value:!0});Un.ObjectParser=void 0;var uf=pe,ff=de;class hf extends uf.Parser{constructor(n){super(),this.objType=n,this.keys=Object.keys(this.objType).toSorted(),this.magic=(0,ff.hashStr)(`StringParser:${this.keys.map(e=>`${String(e)}-${this.objType[e].magic}`).join(",")}`)}encodeInternal(n,e){for(const i of this.keys)n.encode(this.objType[i],e[i])}decodeInternal(n){let e={};for(const i of this.keys)e[i]=n.decode(this.objType[i]);return e}}Un.ObjectParser=hf;var Ei={};Object.defineProperty(Ei,"__esModule",{value:!0});Ei.ArrayParser=void 0;var df=pe,_f=de,na=Ot;class mf extends df.Parser{constructor(n){super(),this.arrType=n,this.magic=(0,_f.hashStr)(`ArrayParser:${this.arrType.magic}`)}encodeInternal(n,e){n.encode(new na.BigIntParser(!1),BigInt(e.length));for(const i of e)n.encode(this.arrType,i)}decodeInternal(n){const e=Number(n.decode(new na.BigIntParser(!1))),i=[];for(let r=0;r<e;r++)i.push(n.decode(this.arrType));return i}}Ei.ArrayParser=mf;var Ti={};Object.defineProperty(Ti,"__esModule",{value:!0});Ti.MapParser=void 0;var pf=pe,bf=de,ia=Ot;class gf extends pf.Parser{constructor(n,e){super(),this.keyType=n,this.valueType=e,this.magic=(0,bf.hashStr)(`MapParser:${this.keyType.magic}-${this.valueType.magic}`)}encodeInternal(n,e){n.encode(new ia.BigIntParser(!1),BigInt(e.size));for(const[i,r]of e.entries())n.encode(this.keyType,i),n.encode(this.valueType,r)}decodeInternal(n){const e=new Map,i=Number(n.decode(new ia.BigIntParser(!1)));for(let r=0;r<i;r++){const s=n.decode(this.keyType),a=n.decode(this.valueType);e.set(s,a)}return e}}Ti.MapParser=gf;var Ii={};Object.defineProperty(Ii,"__esModule",{value:!0});Ii.DateParser=void 0;var vf=pe,wf=de,ra=Ot;class yf extends vf.Parser{constructor(){super(...arguments);P(this,"magic",(0,wf.hashStr)("DateParser"))}encodeInternal(e,i){e.encode(new ra.BigIntParser(!1),BigInt(i.valueOf()))}decodeInternal(e){return new Date(Number(e.decode(new ra.BigIntParser(!1))))}}Ii.DateParser=yf;var Pi={};Object.defineProperty(Pi,"__esModule",{value:!0});Pi.TupleParser=void 0;var kf=pe,Ef=de;class Tf extends kf.Parser{constructor(n){super(),this.elementTypes=n,this.magic=(0,Ef.hashStr)(`TupleParser:${this.elementTypes.map(e=>e.magic).join(",")}`)}encodeInternal(n,e){for(let i=0;i<e.length;i++)n.encode(this.elementTypes[i],e[i])}decodeInternal(n){let e=[];for(let i=0;i<this.elementTypes.length;i++)e.push(n.decode(this.elementTypes[i]));return e}}Pi.TupleParser=Tf;var Si={};Object.defineProperty(Si,"__esModule",{value:!0});Si.BranchParser=void 0;var If=pe,ni=de;class Pf extends If.Parser{constructor(n){super(),this.branchTypes=Object.entries(n).toSorted(([e],[i])=>(0,ni.stringSort)(e,i)),this.magic=(0,ni.hashStr)(`BranchParser:${this.branchTypes.map(([e,i])=>`${e}-${i.magic}`).join(",")}`)}encodeInternal(n,e){const i=this.branchTypes.findIndex(([r])=>r==e[0]);if(i===-1)throw new Error("BranchParser: Failed to find key index.");(0,ni.encodeIndex)(n,i,this.branchTypes.length),n.encode(this.branchTypes[i][1],e[1])}decodeInternal(n){const e=(0,ni.decodeIndex)(n,this.branchTypes.length);return[this.branchTypes[e][0],n.decode(this.branchTypes[e][1])]}}Si.BranchParser=Pf;var Ai={};Object.defineProperty(Ai,"__esModule",{value:!0});Ai.BranchByKeyParser=void 0;var Sf=pe,ii=de,Af=Un;class xf extends Sf.Parser{constructor(n,e){super(),this.key=n,this.branchTypes=Object.entries(e).toSorted(([i],[r])=>(0,ii.stringSort)(i,r)).map(([i,r])=>{if(this.key in r)throw new Error(`BranchByKeyParser: Key is included in parser map, remove key ${i}.${this.key}`);return[i,new Af.ObjectParser(r)]}),this.magic=(0,ii.hashStr)(`BranchByKeyParser:${this.key}:${this.branchTypes.map(([i,r])=>`${i}-${r.magic}`).join(",")}`)}encodeInternal(n,e){const i=this.branchTypes.findIndex(([r])=>r==e[this.key]);if(i===-1)throw new Error("BranchByKeyParser: Failed to find key index.");(0,ii.encodeIndex)(n,i,this.branchTypes.length),n.encode(this.branchTypes[i][1],e)}decodeInternal(n){const e=(0,ii.decodeIndex)(n,this.branchTypes.length);return{...n.decode(this.branchTypes[e][1]),[this.key]:this.branchTypes[e][0]}}}Ai.BranchByKeyParser=xf;var xi={};Object.defineProperty(xi,"__esModule",{value:!0});xi.EnumParser=void 0;var Cf=pe,ri=de;class Nf extends Cf.Parser{constructor(n){super(),this.values=n.toSorted((e,i)=>(0,ri.stringSort)(String(e),String(i))),this.magic=(0,ri.hashStr)(`EnumParser:${this.values.join(",")}`)}encodeInternal(n,e){const i=this.values.findIndex(r=>r==e);if(i===-1)throw new Error("EnumParser: Failed to find key index.");(0,ri.encodeIndex)(n,i,this.values.length)}decodeInternal(n){const e=(0,ri.decodeIndex)(n,this.values.length);return this.values[e]}}xi.EnumParser=Nf;var Ci={};Object.defineProperty(Ci,"__esModule",{value:!0});Ci.EnumFallbackParser=void 0;var Df=pe,si=de,sa=Fn;class Mf extends Df.Parser{constructor(n){super(),this.values=n.toSorted((e,i)=>(0,si.stringSort)(e,i)),this.magic=(0,si.hashStr)(`EnumFallbackParser:${this.values.join(",")}`)}encodeInternal(n,e){const i=this.values.findIndex(r=>r==e);i===-1?(n.bitField.putBit(!1),n.encode(new sa.StringParser,e)):(n.bitField.putBit(!0),(0,si.encodeIndex)(n,i,this.values.length))}decodeInternal(n){if(n.bitField.getBit()){const e=(0,si.decodeIndex)(n,this.values.length);return this.values[e]}else return n.decode(new sa.StringParser)}}Ci.EnumFallbackParser=Mf;(function(t){Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"ArrayParser",{enumerable:!0,get:function(){return m.ArrayParser}}),Object.defineProperty(t,"BigIntParser",{enumerable:!0,get:function(){return s.BigIntParser}}),Object.defineProperty(t,"BinaryParser",{enumerable:!0,get:function(){return a.BinaryParser}}),Object.defineProperty(t,"BitIO",{enumerable:!0,get:function(){return e.BitIO}}),Object.defineProperty(t,"BooleanParser",{enumerable:!0,get:function(){return l.BooleanParser}}),Object.defineProperty(t,"BranchByKeyParser",{enumerable:!0,get:function(){return S.BranchByKeyParser}}),Object.defineProperty(t,"BranchParser",{enumerable:!0,get:function(){return y.BranchParser}}),Object.defineProperty(t,"DateParser",{enumerable:!0,get:function(){return b.DateParser}}),Object.defineProperty(t,"DecodeContext",{enumerable:!0,get:function(){return n.DecodeContext}}),Object.defineProperty(t,"EncodeContext",{enumerable:!0,get:function(){return n.EncodeContext}}),Object.defineProperty(t,"EnumFallbackParser",{enumerable:!0,get:function(){return M.EnumFallbackParser}}),Object.defineProperty(t,"EnumParser",{enumerable:!0,get:function(){return v.EnumParser}}),Object.defineProperty(t,"IO",{enumerable:!0,get:function(){return e.IO}}),Object.defineProperty(t,"MapParser",{enumerable:!0,get:function(){return d.MapParser}}),Object.defineProperty(t,"ModifyHashParser",{enumerable:!0,get:function(){return r.ModifyHashParser}}),Object.defineProperty(t,"NullableParser",{enumerable:!0,get:function(){return f.NullableParser}}),Object.defineProperty(t,"NumberParser",{enumerable:!0,get:function(){return o.NumberParser}}),Object.defineProperty(t,"ObjectParser",{enumerable:!0,get:function(){return p.ObjectParser}}),Object.defineProperty(t,"Parser",{enumerable:!0,get:function(){return n.Parser}}),Object.defineProperty(t,"ParserType",{enumerable:!0,get:function(){return n.ParserType}}),Object.defineProperty(t,"StringParser",{enumerable:!0,get:function(){return u.StringParser}}),Object.defineProperty(t,"TupleParser",{enumerable:!0,get:function(){return w.TupleParser}}),t.array=U,t.bigint=O,t.binary=Y,t.boolean=A,t.branch=_e,t.branchByKey=we,t.date=ie,Object.defineProperty(t,"decodeBigInt",{enumerable:!0,get:function(){return i.decodeBigInt}}),Object.defineProperty(t,"decodeIndex",{enumerable:!0,get:function(){return i.decodeIndex}}),Object.defineProperty(t,"encodeBigInt",{enumerable:!0,get:function(){return i.encodeBigInt}}),Object.defineProperty(t,"encodeIndex",{enumerable:!0,get:function(){return i.encodeIndex}}),t.enum=Me,t.enumFallback=je,Object.defineProperty(t,"hashStr",{enumerable:!0,get:function(){return i.hashStr}}),t.map=K,t.modifyhash=T,t.nullable=k,t.number=E,t.object=F,t.string=D,Object.defineProperty(t,"stringSort",{enumerable:!0,get:function(){return i.stringSort}}),t.tuple=q;var n=pe,e=Zt,i=de,r=vi,s=Ot,a=Ln,o=wi,u=Fn,l=yi,f=ki,p=Un,m=Ei,d=Ti,b=Ii,w=Pi,y=Si,S=Ai,v=xi,M=Ci;function T(te,Ne){return new r.ModifyHashParser(te,Ne)}function O(te){return new s.BigIntParser(te)}function Y(){return new a.BinaryParser}function E(te){return new o.NumberParser(te)}function D(){return new u.StringParser}function A(){return new l.BooleanParser}function k(te){return new f.NullableParser(te)}function F(te){return new p.ObjectParser(te)}function U(te){return new m.ArrayParser(te)}function K(te,Ne){return new d.MapParser(te,Ne)}function ie(){return new b.DateParser}function q(te){return new w.TupleParser(te)}function _e(te){return new y.BranchParser(te)}function we(te,Ne){return new S.BranchByKeyParser(te,Ne)}function Me(te){return new v.EnumParser(te)}function je(te){return new M.EnumFallbackParser(te)}})(ne);function Ni(t){return t<0?0:t>1?1:t}function Of(t,n,e,i){return Math.sqrt((e-t)**2+(i-n)**2)}function Bf(t,n,e,i,r){return(t<n||t>e)&&console.warn(`Mapped value outside of mapping range. mapRange(${t}, ${n}, ${e}, ${i}, ${r})`),i+(t-n)/(e-n)*(r-i)}function $f(t,n,e,i,r){return Math.floor(Bf(t,n,e,i,r+1))}function aa(t){let n=0;for(;t;)t&=t-1,n++;return n}function*Rf(t,n){let e=t,i=n,r=1,s=1;for(;;){for(;2*e*r<s;)yield{x:e,y:i},e+=r;for(;2*i*r<s;)yield{x:e,y:i},i+=r;r=-1*r,s+=1}}function yr(t,n,e){if(t instanceof HTMLCanvasElement){let i;n??!0?i=t:(i=document.createElement("canvas"),i.width=t.width,i.height=t.height);const r=i.getContext("2d",e);if(!r)throw new Error("2d canvas context is not supported on this machine or browser.");return(n??!0)||r.drawImage(t,0,0),[t,r]}else if(t instanceof HTMLImageElement){const i=document.createElement("canvas");i.width=t.width,i.height=t.height;const r=i.getContext("2d",n);if(!r)throw new Error("2d canvas context is not supported on this machine or browser.");return r.drawImage(t,0,0),[i,r]}else if(typeof t=="number"){const i=document.createElement("canvas");i.width=t,i.height=n;const r=i.getContext("2d",e);if(!r)throw new Error("2d canvas context is not supported on this machine or browser.");return[i,r]}else{const i=document.createElement("canvas"),r=i.getContext("2d",t);if(!r)throw new Error("2d canvas context is not supported on this machine or browser.");return[i,r]}}function Lf(t){if(typeof t=="string"){const n=t;t=document.createElement("img"),t.src=n}return t.loading="eager",new Promise((n,e)=>{if(t.complete&&t.naturalWidth!==0)return n(t);const i=()=>{t.removeEventListener("load",i),t.removeEventListener("error",r),n(t)},r=s=>{t.removeEventListener("load",i),t.removeEventListener("error",r),e("Failed to load image.")};t.addEventListener("load",i),t.addEventListener("error",r)})}const nn=Symbol("TILE_NO_NEARBY");class Or{constructor(n,e,i){P(this,"world");P(this,"x");P(this,"y");P(this,"minesNearbyCache",null);this.world=n,this.x=e,this.y=i}minesNearby(n=!1){if(this.minesNearbyCache!==null&&n)return this.minesNearbyCache;let e=!0,i=0;for(const r of this.searchPattern)i+=this.world.getTile(this.x+r.x,this.y+r.y).numMines(),i!=0&&(e=!1);return this.minesNearbyCache=i==0&&e?nn:i,this.minesNearbyCache}flagsNearby(){let n=!0,e=0;for(const i of this.searchPattern)e+=this.world.getTile(this.x+i.x,this.y+i.y).numFlags(),e!=0&&(n=!1);return e==0&&n?nn:e}isDeathTile(){const n=this.world.getGeneratedChunk(Math.floor(this.x/Q),Math.floor(this.y/Q)),e=this.x-n.chunkX*Q,i=this.y-n.chunkY*Q;return n.deaths.some(r=>r.x==e&&r.y==i)}static load(n,e,i,r){throw new Error("Tile.load needs to be implemented on derived class.")}}class So extends Or{constructor(e,i,r,s){super(e,i,r);P(this,"_numMines");P(this,"_numFlags",0);P(this,"isRevealed",!1);P(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this._numMines=s}numMines(){return this._numMines}numFlags(){return this._numFlags}flag(){this.isRevealed||(this._numFlags++,this._numFlags%=this.numMaxMines+1)}reveal(){return this.isRevealed||this._numFlags>0?!1:(this._numMines==0?this.isRevealed=!0:this._numFlags=this._numMines,!0)}save(e){e.putBit(this.isRevealed),this.isRevealed||e.putBits(this._numFlags,aa(this.numMaxMines))}static loadInternal(e,i){return e.isRevealed=i.getBit(),e.isRevealed||(e._numFlags=i.getBits(aa(e.numMaxMines))),e}static load(e,i,r,s){throw new Error("MultiMineTile.load needs to be implemented on derived class.")}}class Br extends So{constructor(e,i,r){const s=Be(e.tileSeed,i,r,0)>.8?$f(Be(e.tileSeed,i,r,1),0,1,1,3):0;super(e,i,r,s);P(this,"type","blueberry");P(this,"numMaxMines",3)}static load(e,i,r,s){return this.loadInternal(new Br(e,i,r),s)}}var Rt=(t=>(t[t.Covered=0]="Covered",t[t.Flagged=1]="Flagged",t[t.Revealed=2]="Revealed",t))(Rt||{});class zn extends Or{constructor(e,i,r,s){super(e,i,r);P(this,"isMine");P(this,"state",0);P(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this.isMine=s}numMines(){return this.isMine?1:0}numFlags(){return this.state==1?1:0}flag(){this.state!=2&&(this.state==0?this.state=1:this.state=0)}reveal(){return this.state!=0?!1:(this.isMine?this.state=1:this.state=2,!0)}save(e){this.isMine?e.putBit(this.state==1):this.state==0?e.putBit(!1):(e.putBit(!0),e.putBit(this.state==1))}static loadInternal(e,i){return e.isMine?e.state=i.getBit()?1:0:i.getBit()?e.state=i.getBit()?1:2:e.state=0,e}static load(e,i,r,s){throw new Error("SingleMineTile.load needs to be implemented on derived class.")}}class $r extends zn{constructor(e,i,r){const s=Be(e.tileSeed,i,r,0)>.625;super(e,i,r,s);P(this,"type","chocolate")}static load(e,i,r,s){return this.loadInternal(new $r(e,i,r),s)}}class Rr extends zn{constructor(e,i,r){const s=Be(e.tileSeed,i,r,0)>.825;super(e,i,r,s);P(this,"type","strawberry");P(this,"secondaryNearbyCountModifier",null);P(this,"secondaryNearbyCountRightSide",!1);Be(e.tileSeed,i,r,1)>.3&&(this.secondaryNearbyCountModifier=Be(e.tileSeed,i,r,2)>.3?1:-1,this.secondaryNearbyCountRightSide=Be(e.tileSeed,i,r,3)>.5)}secondaryMinesNearby(e){if(this.secondaryNearbyCountModifier==null)return null;const i=this.minesNearby(e);if(i==nn||i<1)return null;const r=i+this.secondaryNearbyCountModifier;return r<=0?null:r}static load(e,i,r,s){return this.loadInternal(new Rr(e,i,r),s)}}function Ao(t,n,e,i){const r=Math.floor(e/n),s=Math.floor(i/n),a=(r+s%2)%2==0,o=Math.abs(e%n)+Math.abs(i%n)*n,u=Math.floor(Be(t.tileSeed,r,s,0)*n**2),l=a?o!=u:o==u;return{isDark:a,isMine:l}}class Lr extends zn{constructor(e,i,r){const{isDark:s,isMine:a}=Ao(e,2,i,r);super(e,i,r,a);P(this,"type","waffle");P(this,"isDark");this.isDark=s}static load(e,i,r,s){return this.loadInternal(new Lr(e,i,r),s)}}class Fr extends zn{constructor(e,i,r){const{isDark:s,isMine:a}=Ao(e,3,i,r);super(e,i,r,a);P(this,"type","stroopwafel");P(this,"isDark");this.isDark=s}static load(e,i,r,s){return this.loadInternal(new Fr(e,i,r),s)}}class Ur extends zn{constructor(e,i,r){const s=Be(e.tileSeed,i,r,0)>.85;super(e,i,r,s);P(this,"type","vanilla")}static load(e,i,r,s){return this.loadInternal(new Ur(e,i,r),s)}}var ci=(t=>(t[t.None=0]="None",t[t.Normal=1]="Normal",t[t.Anti=2]="Anti",t))(ci||{}),wn=(t=>(t[t.Covered=0]="Covered",t[t.Flagged=1]="Flagged",t[t.AntiFlagged=2]="AntiFlagged",t[t.Revealed=3]="Revealed",t))(wn||{});class Ff extends Or{constructor(e,i,r,s){super(e,i,r);P(this,"mine");P(this,"state",0);P(this,"searchPattern",[{x:-1,y:0},{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1}]);this.mine=s}numMines(){return this.mine==1?1:this.mine==2?-1:0}numFlags(){return this.state==1?1:this.state==2?-1:0}flag(){switch(this.state){case 0:this.state=1;break;case 1:this.state=2;break;case 2:this.state=0;break}}reveal(){return this.state!=0?!1:(this.mine==0?this.state=3:this.state=this.mine==1?1:2,!0)}save(e){this.mine==1||this.mine==2?this.state==0?e.putBit(!1):(e.putBit(!0),e.putBit(this.state==2)):this.state==0?e.putBit(!1):(e.putBit(!0),this.state==3?e.putBit(!1):(e.putBit(!0),e.putBit(this.state==2)))}static loadInternal(e,i){return e.mine==1||e.mine==2?i.getBit()?e.state=i.getBit()?2:1:e.state=0:i.getBit()?i.getBit()?e.state=i.getBit()?2:1:e.state=3:e.state=0,e}static load(e,i,r,s){throw new Error("SingleAntiMineTile.load needs to be implemented on derived class.")}}class zr extends Ff{constructor(e,i,r){const s=Be(e.tileSeed,i,r,0)>.7,a=Be(e.tileSeed,i,r,1)>.5;super(e,i,r,s?a?ci.Anti:ci.Normal:ci.None);P(this,"type","cookies_and_cream")}static load(e,i,r,s){return this.loadInternal(new zr(e,i,r),s)}}const Uf={type:"collection",weight:1,scale:24,smoothness:.8,biomes:[{type:"collection",weight:5,scale:24,smoothness:.8,biomes:[{type:"biome",weight:3,tile:Ur},{type:"biome",weight:1,tile:$r}]},{type:"collection",weight:2,scale:64,smoothness:0,biomes:[{type:"biome",weight:1,tile:Lr},{type:"biome",weight:2,tile:Fr}]},{type:"collection",weight:2,scale:32,smoothness:.5,biomes:[{type:"biome",weight:1,tile:Br},{type:"biome",weight:1,tile:Rr}]},{type:"biome",weight:2,tile:zr}]};function zf(t,n,e,i,r){const s=Ir(t,!1),a=ds(s(),n,e)*i,o=ds(s(),n,e)*i;return gl(s(),n+a,e+o,r)}function xo(t,n,e){const i=Ir(t.biomeSeed,!1);let r=Uf;for(;r.type=="collection";){const s=zf(i(),n/r.scale,e/r.scale,r.smoothness,r.biomes.map(a=>a.weight));r=r.biomes[s]}return r.tile}function Co(t,n,e){const i=xo(t,n,e);return new i(t,n,e)}class No{constructor(n,e,i){P(this,"world");P(this,"chunkX");P(this,"chunkY");this.world=n,this.chunkX=e,this.chunkY=i}isGenerated(){return this instanceof rn}generate(){if(this.isGenerated())throw new Error("Cannot generate an already generated chunk.");console.log(`Generating new chunk: ${this.chunkX}, ${this.chunkY}`);const n=[];for(let e=0;e<Q;e++)for(let i=0;i<Q;i++){const r=this.world.generateTile(this.chunkX*Q+i,this.chunkY*Q+e);n.push(r)}return new rn(this.world,this.chunkX,this.chunkY,n)}}class rn extends No{constructor(e,i,r,s){super(e,i,r);P(this,"tiles");P(this,"deaths",[]);if(this.tiles=s,this.tiles.length!=Q*Q)throw new Error("GeneratedChunk incorrect tiles length.")}getTileAbsolute(e,i){return this.getTile(e-this.chunkX*Q,i-this.chunkY*Q)}getTile(e,i){return this.tiles[e+i*Q]}resetTileAbsolute(e,i){return this.resetTile(e-this.chunkX*Q,i-this.chunkY*Q)}resetTile(e,i){this.tiles[e+i*Q]=Co(this.world,this.chunkX*Q+e,this.chunkY*Q+i)}encodeTiles(){const e=new ne.BitIO(2048);for(const i of this.tiles)i.save(e);return e.final()}static decodeTiles(e,i,r,s){const a=new ne.BitIO(s);let o=[];for(let u=0;u<Q;u++)for(let l=0;l<Q;l++){const f=i*Q+l,p=r*Q+u,d=xo(e,f,p).load(e,f,p,a);o.push(d)}return new rn(e,i,r,o)}save(){return{deaths:this.deaths,tiles:this.encodeTiles()}}static load(e,i,r,s){const a=rn.decodeTiles(e,i,r,s.tiles);return a.deaths=s.deaths,a}}let Hf=0;function jf(){return Hf++}class Do{constructor(){P(this,"_dispatcherDestroyed",!1);P(this,"listeners",{})}get dispatcherDestroyed(){return this._dispatcherDestroyed}dispatcherCheckDestroyed(){if(this.dispatcherDestroyed)throw new Error("EventDispatcher used after destroyed.")}getListenersArr(n){return this.listeners[n]||(this.listeners[n]=[]),this.listeners[n]}*listenersIter(){for(const n in this.listeners){const e=this.listeners[n];for(const i of e)yield i}}addEventListener(n,e,i=!1,r=0){this.dispatcherCheckDestroyed();let s=this.getListenersArr(n);const a={key:n,callbackfn:e,priority:r,id:jf(),once:i};return s.push(a),s.sort((o,u)=>o.priority-u.priority),a}dispatchEvent(n,e){this.dispatcherCheckDestroyed();const i=this.getListenersArr(n);for(const r of i){let s=!1;if(r.callbackfn({data:e,dispatcher:this,listener:r,stopPropagation:()=>s=!0}),r.once&&this.removeEventListener(r),s)break}}removeEventListener(n){this.dispatcherCheckDestroyed();let e=!1;if(typeof n!="number"){const i=this.getListenersArr(n.key);for(const r of i)r.id==n.id&&(i.splice(i.indexOf(r),1),e=!0)}else for(const i of this.listenersIter())i.id==n&&this.removeEventListener(i)&&(e=!0);return e}destroyDispatcher(){this.dispatcherCheckDestroyed(),this._dispatcherDestroyed=!0;for(const n in this.listeners)delete this.listeners[n]}}class Di extends Do{constructor(e){super();P(this,"seed");P(this,"tileSeed");P(this,"biomeSeed");P(this,"createdAt",new Date);P(this,"deaths",0);P(this,"chunks",{});P(this,"_revealCount",0);P(this,"_died",!1);this.seed=(e&4294967295)>>>0;const i=Ir(this.seed,!1);this.tileSeed=i(),this.biomeSeed=i(),this.addEventListener("die",({data:{x:r,y:s}})=>{this.deaths++;const a=this.getGeneratedChunk(Math.floor(r/Q),Math.floor(s/Q));a.deaths.push({x:r-a.chunkX*Q,y:s-a.chunkY*Q,diedAt:new Date})})}change(){this.dispatchEvent("change",null)}generateTile(e,i){return Co(this,e,i)}getChunk(e,i){const r=this.chunks[`${e},${i}`];return r||new No(this,e,i)}getGeneratedChunk(e,i){const r=this.getChunk(e,i);if(r.isGenerated())return r;const s=r.generate();return this.chunks[`${e},${i}`]=s,s}getTile(e,i){const r=Math.floor(e/Q),s=Math.floor(i/Q);return this.getGeneratedChunk(r,s).getTileAbsolute(e,i)}flag(e,i){const r=this.getTile(e,i);if(r.isDeathTile())return;const s=r.numFlags();r.flag();const a=r.numFlags();a==0&&a!=s&&(this.dispatchEvent("particle_unflag",{x:e,y:i}),this.dispatchEvent("sound_unflag",null))}_reveal(e,i){const r=this.getTile(e,i);if(r.reveal())if(this._revealCount++,r.numMines()!=0){this._died=!0,this.dispatchEvent("particle_explosion",{x:r.x,y:r.y}),this.dispatchEvent("die",{x:r.x,y:r.y});return}else this.dispatchEvent("particle_reveal",{x:r.x,y:r.y});let s=[],a=[];if(r.type=="strawberry"){const o=r.secondaryMinesNearby(!1);o!=null&&o==r.flagsNearby()&&a.push(r)}for(r.minesNearby()==r.flagsNearby()&&(a.includes(r)||a.push(r));a.length>0;){const o=a.pop();s.push(o);for(const u of o.searchPattern){const l=this.getTile(o.x+u.x,o.y+u.y);a.some(f=>f.x==l.x&&f.y==l.y)||s.some(f=>f.x==l.x&&f.y==l.y)||(l.minesNearby()==nn?a.push(l):s.push(l))}}for(const o of s)o.reveal()&&(this._revealCount++,o.numMines()!=0?(this._died=!0,this.dispatchEvent("particle_explosion",{x:o.x,y:o.y}),this.dispatchEvent("die",{x:o.x,y:o.y})):this.dispatchEvent("particle_reveal",{x:o.x,y:o.y}))}reveal(e,i){return this._revealCount=0,this._died=!1,this._reveal(e,i),this._revealCount>0&&this.dispatchEvent("sound_reveal",this._revealCount),this._died&&this.dispatchEvent("sound_explosion",null),this._died}reset(e,i){const r=this.getChunk(Math.floor(e/Q),Math.floor(i/Q));r.isGenerated()&&r.resetTileAbsolute(e,i)}closest0(e,i){for(const{x:r,y:s}of Rf(e,i)){const a=this.getTile(r,s);if(a.numMines()==0&&a.minesNearby()==nn)return{x:r,y:s}}throw new Error("This error should never happen, it's just here to make TypeScript happy.")}save(){const e={seed:this.seed,createdAt:this.createdAt,numDeaths:this.deaths,chunks:new Map};for(const i in this.chunks){const r=i,s=this.chunks[r];e.chunks.set(r,s.save())}return e}static load(e){const i=new Di(e.seed);return i.createdAt=e.createdAt,i.deaths=e.numDeaths,e.chunks.forEach((r,s)=>{const[a,o,u]=s.match(/^(-?\d+),(-?\d+)$/),[l,f]=[parseInt(o),parseInt(u)];i.chunks[s]=rn.load(i,l,f,r)}),i}}class Hr extends Do{constructor(e,i){super();P(this,"world");P(this,"x",0);P(this,"y",0);P(this,"scale",64);this.world=e,i&&this.load(i)}change(){this.dispatchEvent("change",null)}load(e){this.x=e.x,this.y=e.y,this.scale=e.scale}save(){return{x:this.x,y:this.y,scale:this.scale}}translate(e,i,r){this.x-=i/this.scale,this.y-=r/this.scale}scaleFrom(e,i,r,s){const a=this.x+e.width/this.scale*(r/e.width-.5),o=this.y+e.height/this.scale*(s/e.height-.5);this.scale=i;const u=this.x+e.width/this.scale*(r/e.width-.5),l=this.y+e.height/this.scale*(s/e.height-.5);this.x-=u-a,this.y-=l-o}clampScale(e,i,r,s){return e.width/i<r&&(i=e.width/r),e.height/i<r&&(i=e.height/r),e.width/i>s&&(i=e.width/s),e.height/i>s&&(i=e.height/s),i}bounds(e,i,r=0){const s=this.x-e.width/this.scale/2-r,a=this.y-e.height/this.scale/2-r,o=this.x+e.width/this.scale/2+r,u=this.y+e.height/this.scale/2+r;return i?{minX:Math.floor(s),minY:Math.floor(a),maxX:Math.ceil(o),maxY:Math.ceil(u)}:{minX:s,minY:a,maxX:o,maxY:u}}inBounds(e,i,r,s=0){const a=this.bounds(e,!1,s);return i>=a.minX&&i<=a.maxX&&r>=a.minY&&r<=a.maxY}canvasPos(e,i,r,s){const a=(i-e.width/2)/this.scale+this.x,o=(r-e.height/2)/this.scale+this.y;return s?{x:Math.floor(a),y:Math.floor(o)}:{x:a,y:o}}transformCtx(e,i){i.translate(e.width/2,e.height/2),i.scale(this.scale,this.scale),i.translate(-this.x,-this.y)}forEachTileInViewport(e,i,r=0){const s=this.bounds(e,!0,r);for(let a=s.minX;a<s.maxX;a++)for(let o=s.minY;o<s.maxY;o++){const u=this.world.getTile(a,o);i(u)}}forEachChunkInViewport(e,i,r=0){const s=this.bounds(e,!0,r);s.minX=Math.floor(s.minX/Q),s.minY=Math.floor(s.minY/Q),s.maxX=Math.ceil(s.maxX/Q),s.maxY=Math.ceil(s.maxY/Q);for(let a=s.minX;a<s.maxX;a++)for(let o=s.minY;o<s.maxY;o++){const u=this.world.getChunk(a,o);u.isGenerated()&&i(u)}}}function Zf(t,n){console.log("Loaded new world"),n&&localStorage.setItem(t,"PLACEHOLDER");const e=new Di(Math.floor(Math.random()*4294967295)),i=e.closest0(0,0);return e.reveal(i.x,i.y),{world:e,spawnX:i.x,spawnY:i.y}}function oa(t,n){const{world:e,spawnX:i,spawnY:r}=Zf(t,n),s=new Hr(e,{x:i,y:r,scale:48});return console.log(s),{world:e,viewport:s,bookmarks:[{name:"Spawn",createdAt:new Date,viewport:s.save()}]}}function Vf(t){const n=localStorage.getItem(t);if(n){console.log("Loaded saved world");try{const e=Mo.decode(n),i=Di.load(e.world),r=new Hr(i,e.viewport);return{world:i,viewport:r,bookmarks:e.bookmarks}}catch(e){return console.error("Failed to load world."),console.error(e),oa(t,!1)}}else return oa(t,!0)}function Yf(t,n){if(localStorage.getItem(t)!==null){console.log("Save world");try{localStorage.setItem(t,Mo.encode({world:n.world.save(),viewport:n.viewport.save(),bookmarks:n.bookmarks??[]},{base64:!0})),localStorage.removeItem("save_error")}catch(e){localStorage.setItem("save_error",String(e))}}}function Xf(t){localStorage.removeItem(t)}const Wf=ne.object({deaths:ne.array(ne.object({x:ne.number("u8"),y:ne.number("u8"),diedAt:ne.date()})),tiles:ne.binary()});class la extends ne.Parser{constructor(){super(...arguments);P(this,"magic",ne.hashStr("ChunkCoordinateParser"))}encodeInternal(e,i){const[r,s,a]=i.match(/^(-?\d+),(-?\d+)$/),[o,u]=[parseInt(s),parseInt(a)];e.encode(new ne.BigIntParser(!0),BigInt(o)),e.encode(new ne.BigIntParser(!0),BigInt(u))}decodeInternal(e){const i=Number(e.decode(new ne.BigIntParser(!0))),r=Number(e.decode(new ne.BigIntParser(!0)));return`${i},${r}`}}class Gf extends ne.Parser{constructor(e){super();P(this,"magic");P(this,"type");this.type=e,this.magic=ne.hashStr(`ChunkCoordinateMapParser:${this.type.magic}`)}encodeInternal(e,i){e.encode(new ne.BigIntParser(!1),BigInt(i.size));for(const[r,s]of i.entries())e.encode(new la,r),e.encode(this.type,s)}decodeInternal(e){const i=new Map,r=Number(e.decode(new ne.BigIntParser(!1)));for(let s=0;s<r;s++){const a=e.decode(new la),o=e.decode(this.type);i.set(a,o)}return i}}const Kf=ne.object({seed:ne.number("u32"),createdAt:ne.date(),numDeaths:ne.number("u32"),chunks:new Gf(Wf)}),ca=ne.object({x:ne.number("f64"),y:ne.number("f64"),scale:ne.number("f64")}),Mo=ne.modifyhash("v1.0.6",ne.object({world:Kf,viewport:ca,bookmarks:ne.array(ne.object({name:ne.string(),createdAt:ne.date(),viewport:ca}))})),Oo=(t,n)=>{const e=new ResizeObserver(()=>{n(t.clientWidth,t.clientHeight)});return e.observe(t),{destroy(){e.unobserve(t),e.disconnect()}}};class qf{constructor(n,e,i,r){P(this,"world");P(this,"theme");P(this,"canvas");P(this,"ctx");P(this,"viewport");this.world=n,this.theme=e,this.canvas=i;const s=this.canvas.getContext("2d");if(!s)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=s,this.viewport=r}async init(){}destroy(){}renderWorld(){this.ctx.imageSmoothingEnabled=!1,this.viewport.transformCtx(this.canvas,this.ctx),this.viewport.forEachTileInViewport(this.canvas,n=>{this.theme.drawTile(this.ctx,n)},0),this.viewport.forEachChunkInViewport(this.canvas,n=>{n.deaths.forEach(e=>{this.theme.drawDeathIcon(this.ctx,n.chunkX*Q+e.x,n.chunkY*Q+e.y)})},0),this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.renderWorld()}}class Mi{constructor(){P(this,"_alive",!0);P(this,"_lifetime",0)}get alive(){return this._alive}set alive(n){this._alive=n}get lifetime(){return this._lifetime}rendererUpdate(n,e){this._lifetime+=e,this.update(n,e)}}class Jf extends Mi{constructor(e){super();P(this,"type","explosion");P(this,"maxLifetime",500);P(this,"tile");this.tile=e}update(e,i){this.lifetime>this.maxLifetime&&(this.alive=!1)}}class Qf extends Mi{constructor(e){super();P(this,"type","faketile");P(this,"tile");this.tile=e}get opacity(){return Ni(2-this.lifetime/250+2)}update(e,i){this.lifetime>2e3&&(this.alive=!1)}}class ua extends Mi{constructor(e,i,r,s){super();P(this,"type","flag");P(this,"x");P(this,"y");P(this,"dx");P(this,"dy");P(this,"r");P(this,"dr");P(this,"isMultiFlag");P(this,"numFlags");this.x=e,this.y=i,this.dx=(Math.random()-.5)*.005,this.dy=-(Math.random()*.002+.005),this.r=0,this.dr=(Math.random()-.5)*.01,this.isMultiFlag=r,this.numFlags=s}get opacity(){return Ni(1-this.lifetime/250+.5)}update(e,i){this.dy+=5e-5*i,this.dx*=.99,this.dy*=this.dy<0?1:.95,this.x+=this.dx*i,this.y+=this.dy*i,this.r+=this.dr*i,this.lifetime>=500&&(this.alive=!1)}}class eh extends Mi{constructor(e){super();P(this,"type","tilereveal");P(this,"tile");P(this,"x");P(this,"y");P(this,"dx");P(this,"dy");P(this,"r");P(this,"dr");P(this,"totalLifetime");this.tile=e,this.x=this.tile.x,this.y=this.tile.y,this.dx=(Math.random()-.5)*.005,this.dy=-(Math.random()*.002+.005),this.r=0,this.dr=(Math.random()-.5)*.01,this.totalLifetime=Math.random()*750+250}get opacity(){return Ni(1-this.lifetime/(this.totalLifetime/2)+.5)}update(e,i){this.dy+=5e-5*i,this.dx*=.99,this.dy*=this.dy<0?1:.98,this.x+=this.dx*i,this.y+=this.dy*i,this.r+=this.dr*i,this.lifetime>=this.totalLifetime&&(this.alive=!1)}}class th{constructor(n,e,i,r){P(this,"world");P(this,"theme");P(this,"canvas");P(this,"ctx");P(this,"viewport");P(this,"particles",[]);P(this,"listeners",[]);P(this,"lastFrameTime",-1);this.world=n,this.theme=e,this.canvas=i;const s=this.canvas.getContext("2d");if(!s)throw new Error("This browser or machine does not support canvas 2d.");this.ctx=s,this.viewport=r}async init(){this.listeners.push(this.world.addEventListener("particle_unflag",({data:{x:n,y:e}})=>{const i=this.world.getTile(n,e);i instanceof So?this.particles.push(new ua(n,e,!0,i.numMaxMines)):this.particles.push(new ua(n,e,!1,i.type=="cookies_and_cream"?-1:1))})),this.listeners.push(this.world.addEventListener("particle_explosion",({data:{x:n,y:e}})=>{const i=this.world.getTile(n,e);this.particles.unshift(new Qf(i)),this.particles.push(new Jf(i))})),this.listeners.push(this.world.addEventListener("particle_reveal",({data:{x:n,y:e}})=>{const i=this.world.getTile(n,e);this.particles.push(new eh(i))}))}destroy(){let n;for(;n=this.listeners.pop();)this.world.removeEventListener(n)}renderParticles(n){this.ctx.imageSmoothingEnabled=!1,this.viewport.transformCtx(this.canvas,this.ctx);for(let e=0;e<this.particles.length;e++){const i=this.particles[e];i.rendererUpdate(this,n),i.alive||(this.particles.splice(e,1),e--)}for(const e of this.particles)this.theme.drawParticle(this.ctx,e);this.ctx.imageSmoothingEnabled=!0}render(){this.ctx.reset(),this.ctx.fillStyle="transparent",this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const n=performance.now();if(this.lastFrameTime==-1)this.renderParticles(0);else{const e=n-this.lastFrameTime;this.renderParticles(e)}this.lastFrameTime=n}}function nh(t){let n,e,i,r,s;const a=t[8].default,o=Fe(a,t,t[7],null);return{c(){n=R("div"),o&&o.c(),this.h()},l(u){n=L(u,"DIV",{class:!0});var l=Z(n);o&&o.l(l),l.forEach(x),this.h()},h(){B(n,"class",e=cs(t[0])+" svelte-1ijt5qm"),Jt(n,"mouse-controller-dragging",t[1]=="drag")},m(u,l){X(u,n,l),o&&o.m(n,null),i=!0,r||(s=[ge(n,"mousedown",t[10]),ge(n,"mousemove",t[11]),ge(n,"mouseup",t[12]),ge(n,"mouseout",t[13]),ge(n,"wheel",t[14],{passive:!0}),ge(n,"contextmenu",hl(t[9]))],r=!0)},p(u,[l]){o&&o.p&&(!i||l&128)&&Ue(o,a,u,u[7],i?He(a,u[7],l,null):ze(u[7]),null),(!i||l&1&&e!==(e=cs(u[0])+" svelte-1ijt5qm"))&&B(n,"class",e),(!i||l&3)&&Jt(n,"mouse-controller-dragging",u[1]=="drag")},i(u){i||(j(o,u),i=!0)},o(u){V(o,u),i=!1},d(u){u&&x(n),o&&o.d(u),r=!1,sn(s)}}}const ih=10,rh=10;function sh(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=jr();let{class:a=""}=n,o=null;const u=v=>{switch(v.button){case 0:return"primary";case 1:return"extra";case 2:return"secondary";default:return null}};let l=0,f=0;const p=(v,M)=>Of(l,f,v.offsetX,v.offsetY)>M;function m(v){Ea.call(this,t,v)}const d=v=>{o==null&&(e(1,o=u(v)),e(2,l=v.offsetX),e(3,f=v.offsetY))},b=v=>{let M=v.movementX,T=v.movementY;if(o=="primary")if(p(v,ih))M+=v.offsetX-l,T+=v.offsetY-f,e(1,o="drag");else return;o=="drag"&&s("move",{x:v.offsetX,y:v.offsetY,dx:M,dy:T})},w=v=>{if(o==null||o=="drag"||p(v,rh)){e(1,o=null);return}s("input",{x:v.offsetX,y:v.offsetY,type:o}),e(1,o=null)},y=()=>{e(1,o=null)},S=v=>{s("zoom",{x:v.offsetX,y:v.offsetY,amountType:"relative",amount:v.deltaY>0?.9:1.1})};return t.$$set=v=>{"class"in v&&e(0,a=v.class),"$$scope"in v&&e(7,r=v.$$scope)},[a,o,l,f,s,u,p,r,i,m,d,b,w,y,S]}class ah extends ye{constructor(n){super(),ke(this,n,sh,nh,ve,{class:0})}}var Bo={exports:{}};/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */(function(t){(function(n,e,i,r){var s=["","webkit","Moz","MS","ms","o"],a=e.createElement("div"),o="function",u=Math.round,l=Math.abs,f=Date.now;function p(c,h,_){return setTimeout(M(c,_),h)}function m(c,h,_){return Array.isArray(c)?(d(c,_[h],_),!0):!1}function d(c,h,_){var g;if(c)if(c.forEach)c.forEach(h,_);else if(c.length!==r)for(g=0;g<c.length;)h.call(_,c[g],g,c),g++;else for(g in c)c.hasOwnProperty(g)&&h.call(_,c[g],g,c)}function b(c,h,_){var g="DEPRECATED METHOD: "+h+`
`+_+` AT 
`;return function(){var C=new Error("get-stack-trace"),z=C&&C.stack?C.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",G=n.console&&(n.console.warn||n.console.log);return G&&G.call(n.console,g,z),c.apply(this,arguments)}}var w;typeof Object.assign!="function"?w=function(h){if(h===r||h===null)throw new TypeError("Cannot convert undefined or null to object");for(var _=Object(h),g=1;g<arguments.length;g++){var C=arguments[g];if(C!==r&&C!==null)for(var z in C)C.hasOwnProperty(z)&&(_[z]=C[z])}return _}:w=Object.assign;var y=b(function(h,_,g){for(var C=Object.keys(_),z=0;z<C.length;)(!g||g&&h[C[z]]===r)&&(h[C[z]]=_[C[z]]),z++;return h},"extend","Use `assign`."),S=b(function(h,_){return y(h,_,!0)},"merge","Use `assign`.");function v(c,h,_){var g=h.prototype,C;C=c.prototype=Object.create(g),C.constructor=c,C._super=g,_&&w(C,_)}function M(c,h){return function(){return c.apply(h,arguments)}}function T(c,h){return typeof c==o?c.apply(h&&h[0]||r,h):c}function O(c,h){return c===r?h:c}function Y(c,h,_){d(k(h),function(g){c.addEventListener(g,_,!1)})}function E(c,h,_){d(k(h),function(g){c.removeEventListener(g,_,!1)})}function D(c,h){for(;c;){if(c==h)return!0;c=c.parentNode}return!1}function A(c,h){return c.indexOf(h)>-1}function k(c){return c.trim().split(/\s+/g)}function F(c,h,_){if(c.indexOf&&!_)return c.indexOf(h);for(var g=0;g<c.length;){if(_&&c[g][_]==h||!_&&c[g]===h)return g;g++}return-1}function U(c){return Array.prototype.slice.call(c,0)}function K(c,h,_){for(var g=[],C=[],z=0;z<c.length;){var G=h?c[z][h]:c[z];F(C,G)<0&&g.push(c[z]),C[z]=G,z++}return _&&(h?g=g.sort(function(xe,Oe){return xe[h]>Oe[h]}):g=g.sort()),g}function ie(c,h){for(var _,g,C=h[0].toUpperCase()+h.slice(1),z=0;z<s.length;){if(_=s[z],g=_?_+C:h,g in c)return g;z++}return r}var q=1;function _e(){return q++}function we(c){var h=c.ownerDocument||c;return h.defaultView||h.parentWindow||n}var Me=/mobile|tablet|ip(ad|hone|od)|android/i,je="ontouchstart"in n,te=ie(n,"PointerEvent")!==r,Ne=je&&Me.test(navigator.userAgent),Ze="touch",It="pen",tt="mouse",I="kinect",H=25,J=1,be=2,re=4,N=8,W=1,Te=2,Xe=4,We=8,Ee=16,Ae=Te|Xe,rt=We|Ee,hn=Ae|rt,Vr=["x","y"],Hn=["clientX","clientY"];function Ge(c,h){var _=this;this.manager=c,this.callback=h,this.element=c.element,this.target=c.options.inputTarget,this.domHandler=function(g){T(c.options.enable,[c])&&_.handler(g)},this.init()}Ge.prototype={handler:function(){},init:function(){this.evEl&&Y(this.element,this.evEl,this.domHandler),this.evTarget&&Y(this.target,this.evTarget,this.domHandler),this.evWin&&Y(we(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&E(this.element,this.evEl,this.domHandler),this.evTarget&&E(this.target,this.evTarget,this.domHandler),this.evWin&&E(we(this.element),this.evWin,this.domHandler)}};function Ro(c){var h,_=c.options.inputClass;return _?h=_:te?h=Bi:Ne?h=Vn:je?h=$i:h=Zn,new h(c,Lo)}function Lo(c,h,_){var g=_.pointers.length,C=_.changedPointers.length,z=h&J&&g-C===0,G=h&(re|N)&&g-C===0;_.isFirst=!!z,_.isFinal=!!G,z&&(c.session={}),_.eventType=h,Fo(c,_),c.emit("hammer.input",_),c.recognize(_),c.session.prevInput=_}function Fo(c,h){var _=c.session,g=h.pointers,C=g.length;_.firstInput||(_.firstInput=Yr(h)),C>1&&!_.firstMultiple?_.firstMultiple=Yr(h):C===1&&(_.firstMultiple=!1);var z=_.firstInput,G=_.firstMultiple,Pe=G?G.center:z.center,xe=h.center=Xr(g);h.timeStamp=f(),h.deltaTime=h.timeStamp-z.timeStamp,h.angle=Oi(Pe,xe),h.distance=jn(Pe,xe),Uo(_,h),h.offsetDirection=Gr(h.deltaX,h.deltaY);var Oe=Wr(h.deltaTime,h.deltaX,h.deltaY);h.overallVelocityX=Oe.x,h.overallVelocityY=Oe.y,h.overallVelocity=l(Oe.x)>l(Oe.y)?Oe.x:Oe.y,h.scale=G?jo(G.pointers,g):1,h.rotation=G?Ho(G.pointers,g):0,h.maxPointers=_.prevInput?h.pointers.length>_.prevInput.maxPointers?h.pointers.length:_.prevInput.maxPointers:h.pointers.length,zo(_,h);var at=c.element;D(h.srcEvent.target,at)&&(at=h.srcEvent.target),h.target=at}function Uo(c,h){var _=h.center,g=c.offsetDelta||{},C=c.prevDelta||{},z=c.prevInput||{};(h.eventType===J||z.eventType===re)&&(C=c.prevDelta={x:z.deltaX||0,y:z.deltaY||0},g=c.offsetDelta={x:_.x,y:_.y}),h.deltaX=C.x+(_.x-g.x),h.deltaY=C.y+(_.y-g.y)}function zo(c,h){var _=c.lastInterval||h,g=h.timeStamp-_.timeStamp,C,z,G,Pe;if(h.eventType!=N&&(g>H||_.velocity===r)){var xe=h.deltaX-_.deltaX,Oe=h.deltaY-_.deltaY,at=Wr(g,xe,Oe);z=at.x,G=at.y,C=l(at.x)>l(at.y)?at.x:at.y,Pe=Gr(xe,Oe),c.lastInterval=h}else C=_.velocity,z=_.velocityX,G=_.velocityY,Pe=_.direction;h.velocity=C,h.velocityX=z,h.velocityY=G,h.direction=Pe}function Yr(c){for(var h=[],_=0;_<c.pointers.length;)h[_]={clientX:u(c.pointers[_].clientX),clientY:u(c.pointers[_].clientY)},_++;return{timeStamp:f(),pointers:h,center:Xr(h),deltaX:c.deltaX,deltaY:c.deltaY}}function Xr(c){var h=c.length;if(h===1)return{x:u(c[0].clientX),y:u(c[0].clientY)};for(var _=0,g=0,C=0;C<h;)_+=c[C].clientX,g+=c[C].clientY,C++;return{x:u(_/h),y:u(g/h)}}function Wr(c,h,_){return{x:h/c||0,y:_/c||0}}function Gr(c,h){return c===h?W:l(c)>=l(h)?c<0?Te:Xe:h<0?We:Ee}function jn(c,h,_){_||(_=Vr);var g=h[_[0]]-c[_[0]],C=h[_[1]]-c[_[1]];return Math.sqrt(g*g+C*C)}function Oi(c,h,_){_||(_=Vr);var g=h[_[0]]-c[_[0]],C=h[_[1]]-c[_[1]];return Math.atan2(C,g)*180/Math.PI}function Ho(c,h){return Oi(h[1],h[0],Hn)+Oi(c[1],c[0],Hn)}function jo(c,h){return jn(h[0],h[1],Hn)/jn(c[0],c[1],Hn)}var Zo={mousedown:J,mousemove:be,mouseup:re},Vo="mousedown",Yo="mousemove mouseup";function Zn(){this.evEl=Vo,this.evWin=Yo,this.pressed=!1,Ge.apply(this,arguments)}v(Zn,Ge,{handler:function(h){var _=Zo[h.type];_&J&&h.button===0&&(this.pressed=!0),_&be&&h.which!==1&&(_=re),this.pressed&&(_&re&&(this.pressed=!1),this.callback(this.manager,_,{pointers:[h],changedPointers:[h],pointerType:tt,srcEvent:h}))}});var Xo={pointerdown:J,pointermove:be,pointerup:re,pointercancel:N,pointerout:N},Wo={2:Ze,3:It,4:tt,5:I},Kr="pointerdown",qr="pointermove pointerup pointercancel";n.MSPointerEvent&&!n.PointerEvent&&(Kr="MSPointerDown",qr="MSPointerMove MSPointerUp MSPointerCancel");function Bi(){this.evEl=Kr,this.evWin=qr,Ge.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}v(Bi,Ge,{handler:function(h){var _=this.store,g=!1,C=h.type.toLowerCase().replace("ms",""),z=Xo[C],G=Wo[h.pointerType]||h.pointerType,Pe=G==Ze,xe=F(_,h.pointerId,"pointerId");z&J&&(h.button===0||Pe)?xe<0&&(_.push(h),xe=_.length-1):z&(re|N)&&(g=!0),!(xe<0)&&(_[xe]=h,this.callback(this.manager,z,{pointers:_,changedPointers:[h],pointerType:G,srcEvent:h}),g&&_.splice(xe,1))}});var Go={touchstart:J,touchmove:be,touchend:re,touchcancel:N},Ko="touchstart",qo="touchstart touchmove touchend touchcancel";function Jr(){this.evTarget=Ko,this.evWin=qo,this.started=!1,Ge.apply(this,arguments)}v(Jr,Ge,{handler:function(h){var _=Go[h.type];if(_===J&&(this.started=!0),!!this.started){var g=Jo.call(this,h,_);_&(re|N)&&g[0].length-g[1].length===0&&(this.started=!1),this.callback(this.manager,_,{pointers:g[0],changedPointers:g[1],pointerType:Ze,srcEvent:h})}}});function Jo(c,h){var _=U(c.touches),g=U(c.changedTouches);return h&(re|N)&&(_=K(_.concat(g),"identifier",!0)),[_,g]}var Qo={touchstart:J,touchmove:be,touchend:re,touchcancel:N},el="touchstart touchmove touchend touchcancel";function Vn(){this.evTarget=el,this.targetIds={},Ge.apply(this,arguments)}v(Vn,Ge,{handler:function(h){var _=Qo[h.type],g=tl.call(this,h,_);g&&this.callback(this.manager,_,{pointers:g[0],changedPointers:g[1],pointerType:Ze,srcEvent:h})}});function tl(c,h){var _=U(c.touches),g=this.targetIds;if(h&(J|be)&&_.length===1)return g[_[0].identifier]=!0,[_,_];var C,z,G=U(c.changedTouches),Pe=[],xe=this.target;if(z=_.filter(function(Oe){return D(Oe.target,xe)}),h===J)for(C=0;C<z.length;)g[z[C].identifier]=!0,C++;for(C=0;C<G.length;)g[G[C].identifier]&&Pe.push(G[C]),h&(re|N)&&delete g[G[C].identifier],C++;if(Pe.length)return[K(z.concat(Pe),"identifier",!0),Pe]}var nl=2500,Qr=25;function $i(){Ge.apply(this,arguments);var c=M(this.handler,this);this.touch=new Vn(this.manager,c),this.mouse=new Zn(this.manager,c),this.primaryTouch=null,this.lastTouches=[]}v($i,Ge,{handler:function(h,_,g){var C=g.pointerType==Ze,z=g.pointerType==tt;if(!(z&&g.sourceCapabilities&&g.sourceCapabilities.firesTouchEvents)){if(C)il.call(this,_,g);else if(z&&rl.call(this,g))return;this.callback(h,_,g)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});function il(c,h){c&J?(this.primaryTouch=h.changedPointers[0].identifier,es.call(this,h)):c&(re|N)&&es.call(this,h)}function es(c){var h=c.changedPointers[0];if(h.identifier===this.primaryTouch){var _={x:h.clientX,y:h.clientY};this.lastTouches.push(_);var g=this.lastTouches,C=function(){var z=g.indexOf(_);z>-1&&g.splice(z,1)};setTimeout(C,nl)}}function rl(c){for(var h=c.srcEvent.clientX,_=c.srcEvent.clientY,g=0;g<this.lastTouches.length;g++){var C=this.lastTouches[g],z=Math.abs(h-C.x),G=Math.abs(_-C.y);if(z<=Qr&&G<=Qr)return!0}return!1}var ts=ie(a.style,"touchAction"),ns=ts!==r,is="compute",rs="auto",Ri="manipulation",$t="none",dn="pan-x",_n="pan-y",Yn=al();function Li(c,h){this.manager=c,this.set(h)}Li.prototype={set:function(c){c==is&&(c=this.compute()),ns&&this.manager.element.style&&Yn[c]&&(this.manager.element.style[ts]=c),this.actions=c.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var c=[];return d(this.manager.recognizers,function(h){T(h.options.enable,[h])&&(c=c.concat(h.getTouchAction()))}),sl(c.join(" "))},preventDefaults:function(c){var h=c.srcEvent,_=c.offsetDirection;if(this.manager.session.prevented){h.preventDefault();return}var g=this.actions,C=A(g,$t)&&!Yn[$t],z=A(g,_n)&&!Yn[_n],G=A(g,dn)&&!Yn[dn];if(C){var Pe=c.pointers.length===1,xe=c.distance<2,Oe=c.deltaTime<250;if(Pe&&xe&&Oe)return}if(!(G&&z)&&(C||z&&_&Ae||G&&_&rt))return this.preventSrc(h)},preventSrc:function(c){this.manager.session.prevented=!0,c.preventDefault()}};function sl(c){if(A(c,$t))return $t;var h=A(c,dn),_=A(c,_n);return h&&_?$t:h||_?h?dn:_n:A(c,Ri)?Ri:rs}function al(){if(!ns)return!1;var c={},h=n.CSS&&n.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(_){c[_]=h?n.CSS.supports("touch-action",_):!0}),c}var Xn=1,Ke=2,Xt=4,Pt=8,bt=Pt,mn=16,st=32;function gt(c){this.options=w({},this.defaults,c||{}),this.id=_e(),this.manager=null,this.options.enable=O(this.options.enable,!0),this.state=Xn,this.simultaneous={},this.requireFail=[]}gt.prototype={defaults:{},set:function(c){return w(this.options,c),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(c){if(m(c,"recognizeWith",this))return this;var h=this.simultaneous;return c=Wn(c,this),h[c.id]||(h[c.id]=c,c.recognizeWith(this)),this},dropRecognizeWith:function(c){return m(c,"dropRecognizeWith",this)?this:(c=Wn(c,this),delete this.simultaneous[c.id],this)},requireFailure:function(c){if(m(c,"requireFailure",this))return this;var h=this.requireFail;return c=Wn(c,this),F(h,c)===-1&&(h.push(c),c.requireFailure(this)),this},dropRequireFailure:function(c){if(m(c,"dropRequireFailure",this))return this;c=Wn(c,this);var h=F(this.requireFail,c);return h>-1&&this.requireFail.splice(h,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(c){return!!this.simultaneous[c.id]},emit:function(c){var h=this,_=this.state;function g(C){h.manager.emit(C,c)}_<Pt&&g(h.options.event+ss(_)),g(h.options.event),c.additionalEvent&&g(c.additionalEvent),_>=Pt&&g(h.options.event+ss(_))},tryEmit:function(c){if(this.canEmit())return this.emit(c);this.state=st},canEmit:function(){for(var c=0;c<this.requireFail.length;){if(!(this.requireFail[c].state&(st|Xn)))return!1;c++}return!0},recognize:function(c){var h=w({},c);if(!T(this.options.enable,[this,h])){this.reset(),this.state=st;return}this.state&(bt|mn|st)&&(this.state=Xn),this.state=this.process(h),this.state&(Ke|Xt|Pt|mn)&&this.tryEmit(h)},process:function(c){},getTouchAction:function(){},reset:function(){}};function ss(c){return c&mn?"cancel":c&Pt?"end":c&Xt?"move":c&Ke?"start":""}function as(c){return c==Ee?"down":c==We?"up":c==Te?"left":c==Xe?"right":""}function Wn(c,h){var _=h.manager;return _?_.get(c):c}function nt(){gt.apply(this,arguments)}v(nt,gt,{defaults:{pointers:1},attrTest:function(c){var h=this.options.pointers;return h===0||c.pointers.length===h},process:function(c){var h=this.state,_=c.eventType,g=h&(Ke|Xt),C=this.attrTest(c);return g&&(_&N||!C)?h|mn:g||C?_&re?h|Pt:h&Ke?h|Xt:Ke:st}});function Gn(){nt.apply(this,arguments),this.pX=null,this.pY=null}v(Gn,nt,{defaults:{event:"pan",threshold:10,pointers:1,direction:hn},getTouchAction:function(){var c=this.options.direction,h=[];return c&Ae&&h.push(_n),c&rt&&h.push(dn),h},directionTest:function(c){var h=this.options,_=!0,g=c.distance,C=c.direction,z=c.deltaX,G=c.deltaY;return C&h.direction||(h.direction&Ae?(C=z===0?W:z<0?Te:Xe,_=z!=this.pX,g=Math.abs(c.deltaX)):(C=G===0?W:G<0?We:Ee,_=G!=this.pY,g=Math.abs(c.deltaY))),c.direction=C,_&&g>h.threshold&&C&h.direction},attrTest:function(c){return nt.prototype.attrTest.call(this,c)&&(this.state&Ke||!(this.state&Ke)&&this.directionTest(c))},emit:function(c){this.pX=c.deltaX,this.pY=c.deltaY;var h=as(c.direction);h&&(c.additionalEvent=this.options.event+h),this._super.emit.call(this,c)}});function Fi(){nt.apply(this,arguments)}v(Fi,nt,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[$t]},attrTest:function(c){return this._super.attrTest.call(this,c)&&(Math.abs(c.scale-1)>this.options.threshold||this.state&Ke)},emit:function(c){if(c.scale!==1){var h=c.scale<1?"in":"out";c.additionalEvent=this.options.event+h}this._super.emit.call(this,c)}});function Ui(){gt.apply(this,arguments),this._timer=null,this._input=null}v(Ui,gt,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[rs]},process:function(c){var h=this.options,_=c.pointers.length===h.pointers,g=c.distance<h.threshold,C=c.deltaTime>h.time;if(this._input=c,!g||!_||c.eventType&(re|N)&&!C)this.reset();else if(c.eventType&J)this.reset(),this._timer=p(function(){this.state=bt,this.tryEmit()},h.time,this);else if(c.eventType&re)return bt;return st},reset:function(){clearTimeout(this._timer)},emit:function(c){this.state===bt&&(c&&c.eventType&re?this.manager.emit(this.options.event+"up",c):(this._input.timeStamp=f(),this.manager.emit(this.options.event,this._input)))}});function zi(){nt.apply(this,arguments)}v(zi,nt,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[$t]},attrTest:function(c){return this._super.attrTest.call(this,c)&&(Math.abs(c.rotation)>this.options.threshold||this.state&Ke)}});function Hi(){nt.apply(this,arguments)}v(Hi,nt,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:Ae|rt,pointers:1},getTouchAction:function(){return Gn.prototype.getTouchAction.call(this)},attrTest:function(c){var h=this.options.direction,_;return h&(Ae|rt)?_=c.overallVelocity:h&Ae?_=c.overallVelocityX:h&rt&&(_=c.overallVelocityY),this._super.attrTest.call(this,c)&&h&c.offsetDirection&&c.distance>this.options.threshold&&c.maxPointers==this.options.pointers&&l(_)>this.options.velocity&&c.eventType&re},emit:function(c){var h=as(c.offsetDirection);h&&this.manager.emit(this.options.event+h,c),this.manager.emit(this.options.event,c)}});function Kn(){gt.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}v(Kn,gt,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[Ri]},process:function(c){var h=this.options,_=c.pointers.length===h.pointers,g=c.distance<h.threshold,C=c.deltaTime<h.time;if(this.reset(),c.eventType&J&&this.count===0)return this.failTimeout();if(g&&C&&_){if(c.eventType!=re)return this.failTimeout();var z=this.pTime?c.timeStamp-this.pTime<h.interval:!0,G=!this.pCenter||jn(this.pCenter,c.center)<h.posThreshold;this.pTime=c.timeStamp,this.pCenter=c.center,!G||!z?this.count=1:this.count+=1,this._input=c;var Pe=this.count%h.taps;if(Pe===0)return this.hasRequireFailures()?(this._timer=p(function(){this.state=bt,this.tryEmit()},h.interval,this),Ke):bt}return st},failTimeout:function(){return this._timer=p(function(){this.state=st},this.options.interval,this),st},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==bt&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}});function vt(c,h){return h=h||{},h.recognizers=O(h.recognizers,vt.defaults.preset),new ji(c,h)}vt.VERSION="2.0.7",vt.defaults={domEvents:!1,touchAction:is,enable:!0,inputTarget:null,inputClass:null,preset:[[zi,{enable:!1}],[Fi,{enable:!1},["rotate"]],[Hi,{direction:Ae}],[Gn,{direction:Ae},["swipe"]],[Kn],[Kn,{event:"doubletap",taps:2},["tap"]],[Ui]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};var ol=1,os=2;function ji(c,h){this.options=w({},vt.defaults,h||{}),this.options.inputTarget=this.options.inputTarget||c,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=c,this.input=Ro(this),this.touchAction=new Li(this,this.options.touchAction),ls(this,!0),d(this.options.recognizers,function(_){var g=this.add(new _[0](_[1]));_[2]&&g.recognizeWith(_[2]),_[3]&&g.requireFailure(_[3])},this)}ji.prototype={set:function(c){return w(this.options,c),c.touchAction&&this.touchAction.update(),c.inputTarget&&(this.input.destroy(),this.input.target=c.inputTarget,this.input.init()),this},stop:function(c){this.session.stopped=c?os:ol},recognize:function(c){var h=this.session;if(!h.stopped){this.touchAction.preventDefaults(c);var _,g=this.recognizers,C=h.curRecognizer;(!C||C&&C.state&bt)&&(C=h.curRecognizer=null);for(var z=0;z<g.length;)_=g[z],h.stopped!==os&&(!C||_==C||_.canRecognizeWith(C))?_.recognize(c):_.reset(),!C&&_.state&(Ke|Xt|Pt)&&(C=h.curRecognizer=_),z++}},get:function(c){if(c instanceof gt)return c;for(var h=this.recognizers,_=0;_<h.length;_++)if(h[_].options.event==c)return h[_];return null},add:function(c){if(m(c,"add",this))return this;var h=this.get(c.options.event);return h&&this.remove(h),this.recognizers.push(c),c.manager=this,this.touchAction.update(),c},remove:function(c){if(m(c,"remove",this))return this;if(c=this.get(c),c){var h=this.recognizers,_=F(h,c);_!==-1&&(h.splice(_,1),this.touchAction.update())}return this},on:function(c,h){if(c!==r&&h!==r){var _=this.handlers;return d(k(c),function(g){_[g]=_[g]||[],_[g].push(h)}),this}},off:function(c,h){if(c!==r){var _=this.handlers;return d(k(c),function(g){h?_[g]&&_[g].splice(F(_[g],h),1):delete _[g]}),this}},emit:function(c,h){this.options.domEvents&&ll(c,h);var _=this.handlers[c]&&this.handlers[c].slice();if(!(!_||!_.length)){h.type=c,h.preventDefault=function(){h.srcEvent.preventDefault()};for(var g=0;g<_.length;)_[g](h),g++}},destroy:function(){this.element&&ls(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}};function ls(c,h){var _=c.element;if(_.style){var g;d(c.options.cssProps,function(C,z){g=ie(_.style,z),h?(c.oldCssProps[g]=_.style[g],_.style[g]=C):_.style[g]=c.oldCssProps[g]||""}),h||(c.oldCssProps={})}}function ll(c,h){var _=e.createEvent("Event");_.initEvent(c,!0,!0),_.gesture=h,h.target.dispatchEvent(_)}w(vt,{INPUT_START:J,INPUT_MOVE:be,INPUT_END:re,INPUT_CANCEL:N,STATE_POSSIBLE:Xn,STATE_BEGAN:Ke,STATE_CHANGED:Xt,STATE_ENDED:Pt,STATE_RECOGNIZED:bt,STATE_CANCELLED:mn,STATE_FAILED:st,DIRECTION_NONE:W,DIRECTION_LEFT:Te,DIRECTION_RIGHT:Xe,DIRECTION_UP:We,DIRECTION_DOWN:Ee,DIRECTION_HORIZONTAL:Ae,DIRECTION_VERTICAL:rt,DIRECTION_ALL:hn,Manager:ji,Input:Ge,TouchAction:Li,TouchInput:Vn,MouseInput:Zn,PointerEventInput:Bi,TouchMouseInput:$i,SingleTouchInput:Jr,Recognizer:gt,AttrRecognizer:nt,Tap:Kn,Pan:Gn,Swipe:Hi,Pinch:Fi,Rotate:zi,Press:Ui,on:Y,off:E,each:d,merge:S,extend:y,assign:w,inherit:v,bindFn:M,prefixed:ie});var cl=typeof n<"u"?n:typeof self<"u"?self:{};cl.Hammer=vt,typeof r=="function"&&r.amd?r(function(){return vt}):t.exports?t.exports=vt:n[i]=vt})(window,document,"Hammer")})(Bo);var oh=Bo.exports;const bn=vl(oh);function lh(t){let n,e;const i=t[3].default,r=Fe(i,t,t[2],null);return{c(){n=R("div"),r&&r.c(),this.h()},l(s){n=L(s,"DIV",{class:!0});var a=Z(n);r&&r.l(a),a.forEach(x),this.h()},h(){B(n,"class",t[0])},m(s,a){X(s,n,a),r&&r.m(n,null),t[4](n),e=!0},p(s,[a]){r&&r.p&&(!e||a&4)&&Ue(r,i,s,s[2],e?He(i,s[2],a,null):ze(s[2]),null),(!e||a&1)&&B(n,"class",s[0])},i(s){e||(j(r,s),e=!0)},o(s){V(r,s),e=!1},d(s){s&&x(n),r&&r.d(s),t[4](null)}}}function ch(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=jr();let{class:a=""}=n,o,u,l=null;_i(()=>{u=new bn.Manager(o,{recognizers:[[bn.Pan],[bn.Pinch]]});const p=new bn.Tap({taps:1,event:"tapSingle"}),m=new bn.Tap({taps:2,event:"tapDouble"});u.add([m,p]),m.recognizeWith(p),p.requireFailure(m),u.on("pan",d=>{l&&s("move",{x:d.center.x,y:d.center.y,dx:d.center.x-l.center.x,dy:d.center.y-l.center.y}),l=d.isFinal?null:d}),u.on("pinch",d=>{}),u.on("tapSingle",d=>{s("input",{x:d.center.x,y:d.center.y,type:"secondary"})}),u.on("tapDouble",d=>{s("input",{x:d.center.x,y:d.center.y,type:"primary"})})}),mi(()=>{u.destroy()});function f(p){Re[p?"unshift":"push"](()=>{o=p,e(1,o)})}return t.$$set=p=>{"class"in p&&e(0,a=p.class),"$$scope"in p&&e(2,r=p.$$scope)},[a,o,r,i,f]}class uh extends ye{constructor(n){super(),ke(this,n,ch,lh,ve,{class:0})}}function fh(t){let n,e="Unsupported input method.";return{c(){n=R("span"),n.textContent=e},l(i){n=L(i,"SPAN",{"data-svelte-h":!0}),Ie(n)!=="svelte-1d8n4pk"&&(n.textContent=e)},m(i,r){X(i,n,r)},p:De,i:De,o:De,d(i){i&&x(n)}}}function hh(t){let n,e;return n=new uh({props:{class:t[0],$$slots:{default:[mh]},$$scope:{ctx:t}}}),n.$on("move",t[7]),n.$on("zoom",t[8]),n.$on("input",t[9]),{c(){le(n.$$.fragment)},l(i){ce(n.$$.fragment,i)},m(i,r){ue(n,i,r),e=!0},p(i,r){const s={};r&1&&(s.class=i[0]),r&1024&&(s.$$scope={dirty:r,ctx:i}),n.$set(s)},i(i){e||(j(n.$$.fragment,i),e=!0)},o(i){V(n.$$.fragment,i),e=!1},d(i){fe(n,i)}}}function dh(t){let n,e="Keyboard input method not implemented.";return{c(){n=R("span"),n.textContent=e},l(i){n=L(i,"SPAN",{"data-svelte-h":!0}),Ie(n)!=="svelte-1slf3g9"&&(n.textContent=e)},m(i,r){X(i,n,r)},p:De,i:De,o:De,d(i){i&&x(n)}}}function _h(t){let n,e;return n=new ah({props:{class:t[0],$$slots:{default:[ph]},$$scope:{ctx:t}}}),n.$on("move",t[4]),n.$on("zoom",t[5]),n.$on("input",t[6]),{c(){le(n.$$.fragment)},l(i){ce(n.$$.fragment,i)},m(i,r){ue(n,i,r),e=!0},p(i,r){const s={};r&1&&(s.class=i[0]),r&1024&&(s.$$scope={dirty:r,ctx:i}),n.$set(s)},i(i){e||(j(n.$$.fragment,i),e=!0)},o(i){V(n.$$.fragment,i),e=!1},d(i){fe(n,i)}}}function mh(t){let n;const e=t[3].default,i=Fe(e,t,t[10],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&1024)&&Ue(i,e,r,r[10],n?He(e,r[10],s,null):ze(r[10]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function ph(t){let n;const e=t[3].default,i=Fe(e,t,t[10],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&1024)&&Ue(i,e,r,r[10],n?He(e,r[10],s,null):ze(r[10]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function bh(t){let n,e,i,r;const s=[_h,dh,hh,fh],a=[];function o(u,l){return u[1]=="mouse"?0:u[1]=="keyboard"?1:u[1]=="touch"?2:3}return n=o(t),e=a[n]=s[n](t),{c(){e.c(),i=Qe()},l(u){e.l(u),i=Qe()},m(u,l){a[n].m(u,l),X(u,i,l),r=!0},p(u,[l]){let f=n;n=o(u),n===f?a[n].p(u,l):(Nn(),V(a[f],1,1,()=>{a[f]=null}),Dn(),e=a[n],e?e.p(u,l):(e=a[n]=s[n](u),e.c()),j(e,1),e.m(i.parentNode,i))},i(u){r||(j(e),r=!0)},o(u){V(e),r=!1},d(u){u&&x(i),a[n].d(u)}}}function jr(){return Ta()}function gh(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=jr();let{class:a=""}=n,{inputMethod:o="mouse"}=n;const u=b=>s("move",b.detail),l=b=>s("zoom",b.detail),f=b=>s("input",b.detail),p=b=>s("move",b.detail),m=b=>s("zoom",b.detail),d=b=>s("input",b.detail);return t.$$set=b=>{"class"in b&&e(0,a=b.class),"inputMethod"in b&&e(1,o=b.inputMethod),"$$scope"in b&&e(10,r=b.$$scope)},[a,o,s,i,u,l,f,p,m,d,r]}class vh extends ye{constructor(n){super(),ke(this,n,gh,bh,ve,{class:0,inputMethod:1})}}function wh(t,n){return t!=t?n==n:t!==n||t&&typeof t=="object"||typeof t=="function"}class Zr{constructor(n,e,i){P(this,"slot");P(this,"key");P(this,"value");P(this,"subscriptions",new Set);this.slot=n,this.key=e,this.load(),this.value===void 0&&(this.value=i,this.save())}getObj(){let n=localStorage.getItem(this.slot);return n===null&&(localStorage.setItem(this.slot,"{}"),n=localStorage.getItem(this.slot)),JSON.parse(n)}save(){const n=this.getObj();n[this.key]=this.value,localStorage.setItem(this.slot,JSON.stringify(n)),console.debug(`LocalStorageWritable: Saved to ${this.slot}['${this.key}'] = ${this.value}`)}load(){const n=this.getObj();this.value=this.key in n?n[this.key]:void 0,console.debug(`LocalStorageWritable: Loaded from ${this.slot}['${this.key}'] = ${this.value}`)}set(n){wh(this.value,n)&&(this.value=n,this.save(),this.subscriptions.forEach(e=>e[0](this.value)))}update(n){this.value&&this.set(n(this.value))}subscribe(n,e=()=>{}){const i=[n,e];return this.subscriptions.add(i),this.value!==void 0&&n(this.value),()=>{this.subscriptions.delete(i)}}}const kr=new Zr("settings","autoDisplayInfo",!0),Er=new Zr("settings","volume",.25),Cn=new Zr("settings","inputMethod","mouse");function yh(t){let n,e,i;return{c(){n=R("canvas"),e=ae(),i=R("canvas")},l(r){n=L(r,"CANVAS",{}),Z(n).forEach(x),e=oe(r),i=L(r,"CANVAS",{}),Z(i).forEach(x)},m(r,s){X(r,n,s),t[9](n),X(r,e,s),X(r,i,s),t[10](i)},p:De,d(r){r&&(x(n),x(e),x(i)),t[9](null),t[10](null)}}}function kh(t){let n,e,i,r,s,a;return e=new vh({props:{class:"w-full h-full force-overlap",inputMethod:t[5],$$slots:{default:[yh]},$$scope:{ctx:t}}}),e.$on("move",t[11]),e.$on("zoom",t[12]),e.$on("input",t[13]),{c(){n=R("div"),le(e.$$.fragment),this.h()},l(o){n=L(o,"DIV",{class:!0});var u=Z(n);ce(e.$$.fragment,u),u.forEach(x),this.h()},h(){B(n,"class","w-full h-full cursor-pointer")},m(o,u){X(o,n,u),ue(e,n,null),t[14](n),r=!0,s||(a=Ia(i=Oo.call(null,n,t[15])),s=!0)},p(o,[u]){const l={};u&32&&(l.inputMethod=o[5]),u&33554456&&(l.$$scope={dirty:u,ctx:o}),e.$set(l),i&&Pa(i.update)&&u&26&&i.update.call(null,o[15])},i(o){r||(j(e.$$.fragment,o),r=!0)},o(o){V(e.$$.fragment,o),r=!1},d(o){o&&x(n),fe(e),t[14](null),s=!1,a()}}}function Eh(t,n,e){let i;zt(t,Cn,U=>e(5,i=U));const r=Ta();let s,{world:a}=n,{theme:o}=n,{viewport:u}=n,l,f;const p=async()=>{l==null||l.destroy(),f&&(l=new qf(a,o,f,u),await l.init(),e(3,f.width=s.clientWidth,f),e(3,f.height=s.clientHeight,f),w=!0,S())};let m,d;const b=async()=>{m==null||m.destroy(),d&&(m=new th(a,o,d,u),await m.init(),e(4,d.width=s.clientWidth,d),e(4,d.height=s.clientHeight,d))};let w=!1,y=-1;const S=()=>{cancelAnimationFrame(y),y=requestAnimationFrame(S),w&&(w=!1,l==null||l.render()),m==null||m.render()};let v,M,T;_i(async()=>{await p(),await b(),v=a.addEventListener("change",()=>{w=!0}),M=u.addEventListener("change",()=>{w=!0}),T=Cn.subscribe(()=>{setTimeout(async()=>{await p(),await b()},100)})}),mi(()=>{l==null||l.destroy(),m==null||m.destroy(),a.removeEventListener(v),u.removeEventListener(M),T(),cancelAnimationFrame(y)});function O(U){Re[U?"unshift":"push"](()=>{f=U,e(3,f)})}function Y(U){Re[U?"unshift":"push"](()=>{d=U,e(4,d)})}const E=U=>{u.translate(f,U.detail.dx,U.detail.dy),u.change()},D=U=>{const K=U.detail.amountType=="relative"?u.scale*U.detail.amount:u.scale+(U.detail.amount-1),ie=u.clampScale(f,K,4,48);u.scaleFrom(f,ie,U.detail.x,U.detail.y),u.change()},A=U=>{const K=u.canvasPos(f,U.detail.x,U.detail.y,!0);switch(U.detail.type){case"primary":r("action",{type:"reveal",pos:K});break;case"secondary":r("action",{type:"flag",pos:K});break;case"extra":r("action",{type:"reset",pos:K});break}a.change()};function k(U){Re[U?"unshift":"push"](()=>{s=U,e(2,s)})}const F=(U,K)=>{e(3,f.width=U,f),e(3,f.height=K,f),e(4,d.width=U,d),e(4,d.height=K,d),u.change(),S()};return t.$$set=U=>{"world"in U&&e(0,a=U.world),"theme"in U&&e(8,o=U.theme),"viewport"in U&&e(1,u=U.viewport)},[a,u,s,f,d,i,r,S,o,O,Y,E,D,A,k,F]}class Th extends ye{constructor(n){super(),ke(this,n,Eh,kh,ve,{world:0,theme:8,viewport:1})}}class $o{constructor(n,e){P(this,"textures");P(this,"img");typeof n=="string"?(this.img=document.createElement("img"),this.img.loading="eager",this.img.src=n):this.img=n,this.textures=e}async awaitLoad(){this.img instanceof HTMLCanvasElement||await Lf(this.img)}onLoad(n){this.awaitLoad().then(()=>n(this))}draw(n,e,i,r,s,a){const[o,u,l,f]=this.textures[e];n.drawImage(this.img,o,u,l,f,i,r,s,a)}toImageDataAtlas(){const[n,e]=this.img instanceof HTMLCanvasElement?yr(this.img,!0,{willReadFrequently:!1}):yr(this.img,{willReadFrequently:!1});return new Ih(Object.fromEntries(Object.entries(this.textures).map(([i,[r,s,a,o]])=>[i,e.getImageData(r,s,a,o)])))}}class Ih{constructor(n){P(this,"textures");this.textures=n}toImageAtlas(n=!0){let e=0,i=0,r={},s=0;for(const u in this.textures){const l=this.textures[u];n&&s++,r[u]={x:s,y:n?1:0,width:l.width,height:l.height,name:u},s+=l.width+(n?1:0),e=s,i=Math.max(i,l.height+(n?2:0))}const[a,o]=yr(e,i);for(const u in r){const l=r[u];o.putImageData(this.textures[u],l.x,l.y)}return new $o(a,Object.fromEntries(Object.entries(r).map(([u,l])=>(l=l,[u,[l.x,l.y,l.width,l.height]]))))}}class Ph{constructor(){P(this,"volume",1)}playSound(n,e=1){const i=this.soundEffects[n],r=Ni(e*this.volume);if(r<=0)return;const s=document.createElement("audio");s.src=i.src,s.volume=r,s.playbackRate=1+Math.random()*i.variation,s.preservesPitch=!1;const a=()=>{s.removeEventListener("ended",a),s.remove()};s.addEventListener("ended",a),s.play()}}class Sh extends Ph{constructor(){super(...arguments);P(this,"tileset",new $o("/infinite-minesweeper/retro/tileset.png",{null:[0,0,16,16],skull:[0,16,16,16],bomb:[16,0,16,16],explosion1:[16,16,16,16],explosion2:[16,32,16,16],explosion3:[16,48,16,16],explosion4:[16,64,16,16],flag:[32,16,16,16],flag_1:[32,48,16,16],flag_2:[32,64,16,16],flag_3:[32,80,16,16],flag_anti:[32,32,16,16],flag_anti_1:[32,96,16,16],flag_anti_2:[32,112,16,16],flag_anti_3:[32,128,16,16],number_0:[48,0,16,16],number_1:[48,16,16,16],number_2:[48,32,16,16],number_3:[48,48,16,16],number_4:[48,64,16,16],number_5:[48,80,16,16],number_6:[48,96,16,16],number_7:[48,112,16,16],number_8:[48,128,16,16],number_9:[48,144,16,16],number_10:[48,160,16,16],number_11:[48,176,16,16],number_12:[48,192,16,16],number_13:[48,208,16,16],number_14:[48,224,16,16],number_15:[48,240,16,16],number_16:[48,256,16,16],number_17:[48,272,16,16],number_18:[48,288,16,16],number_19:[48,304,16,16],number_20:[48,320,16,16],number_21:[48,336,16,16],number_22:[48,352,16,16],number_23:[48,368,16,16],number_24:[48,384,16,16],number_negative_sign:[96,96,16,16],tile_vanilla_covered:[64,0,16,16],tile_vanilla_revealed:[80,0,16,16],tile_chocolate_covered:[64,16,16,16],tile_chocolate_revealed:[80,16,16,16],tile_waffle_light_covered:[64,32,16,16],tile_waffle_light_revealed:[80,32,16,16],tile_waffle_dark_covered:[96,32,16,16],tile_waffle_dark_revealed:[112,32,16,16],tile_stroopwafel_light_covered:[64,48,16,16],tile_stroopwafel_light_revealed:[80,48,16,16],tile_stroopwafel_dark_covered:[96,48,16,16],tile_stroopwafel_dark_revealed:[112,48,16,16],tile_blueberry_covered:[64,64,16,16],tile_blueberry_revealed:[80,64,16,16],tile_strawberry_covered:[64,80,16,16],tile_strawberry_revealed:[80,80,16,16],tile_cookies_and_cream_covered:[64,96,16,16],tile_cookies_and_cream_revealed:[80,96,16,16]}));P(this,"soundEffects",{reveal:{src:"/infinite-minesweeper/retro/reveal.wav",variation:.25},unflag:{src:"/infinite-minesweeper/retro/unflag.wav",variation:.25},explosion:{src:"/infinite-minesweeper/retro/explosion.wav",variation:.25}})}async init(){await this.tileset.awaitLoad(),this.tileset=this.tileset.toImageDataAtlas().toImageAtlas(!0)}drawNearby(e,i){if(i!=nn){if(i<0){e.save(),e.scale(.55,.55),e.translate(.1,.45),this.tileset.draw(e,"number_negative_sign",0,0,1,1),e.fillStyle=["#FFFFFF","#0026FF","#267F00","#BA0000","#00137F","#7F0000","#008080","#33D137","#9400D8","#E48C00","#FF8F9F","#FF8F00","#598CAA","#F03E69"][-i]??"white",e.fillRect(.25-.004,.4375-.004,.4375+.008,.125+.008),e.translate(.7,0),this.drawNearby(e,-i),e.restore();return}switch(i){case 0:this.tileset.draw(e,"number_0",0,0,1,1);break;case 1:this.tileset.draw(e,"number_1",0,0,1,1);break;case 2:this.tileset.draw(e,"number_2",0,0,1,1);break;case 3:this.tileset.draw(e,"number_3",0,0,1,1);break;case 4:this.tileset.draw(e,"number_4",0,0,1,1);break;case 5:this.tileset.draw(e,"number_5",0,0,1,1);break;case 6:this.tileset.draw(e,"number_6",0,0,1,1);break;case 7:this.tileset.draw(e,"number_7",0,0,1,1);break;case 8:this.tileset.draw(e,"number_8",0,0,1,1);break;case 9:this.tileset.draw(e,"number_9",0,0,1,1);break;case 10:this.tileset.draw(e,"number_10",0,0,1,1);break;case 11:this.tileset.draw(e,"number_11",0,0,1,1);break;case 12:this.tileset.draw(e,"number_12",0,0,1,1);break;case 13:this.tileset.draw(e,"number_13",0,0,1,1);break;case 14:this.tileset.draw(e,"number_14",0,0,1,1);break;case 15:this.tileset.draw(e,"number_15",0,0,1,1);break;case 16:this.tileset.draw(e,"number_16",0,0,1,1);break;case 17:this.tileset.draw(e,"number_17",0,0,1,1);break;case 18:this.tileset.draw(e,"number_18",0,0,1,1);break;case 19:this.tileset.draw(e,"number_19",0,0,1,1);break;case 20:this.tileset.draw(e,"number_20",0,0,1,1);break;case 21:this.tileset.draw(e,"number_21",0,0,1,1);break;case 22:this.tileset.draw(e,"number_22",0,0,1,1);break;case 23:this.tileset.draw(e,"number_23",0,0,1,1);break;case 24:this.tileset.draw(e,"number_24",0,0,1,1);break;default:throw new Error(`ThemeRetro invalid draw nearby count. ${i}`)}}}drawFlags(e,i){switch(i){case 0:break;case 1:this.tileset.draw(e,"flag_1",0,0,1,1);break;case 2:this.tileset.draw(e,"flag_2",0,0,1,1);break;case 3:this.tileset.draw(e,"flag_3",0,0,1,1);break;case-1:this.tileset.draw(e,"flag_anti_1",0,0,1,1);break;case-2:this.tileset.draw(e,"flag_anti_2",0,0,1,1);break;case-3:this.tileset.draw(e,"flag_anti_3",0,0,1,1);break;default:throw new Error("ThemeRetro invalid draw flag count.")}}drawSingleMineTile(e,i,r,s,a){if(a){this.tileset.draw(e,r,0,0,1,1);return}switch(i.state){case Rt.Covered:this.tileset.draw(e,r,0,0,1,1);break;case Rt.Flagged:this.tileset.draw(e,r,0,0,1,1),this.tileset.draw(e,"flag",0,0,1,1);break;case Rt.Revealed:{this.tileset.draw(e,s,0,0,1,1),this.drawNearby(e,i.minesNearby());break}}}drawMultiMineTile(e,i,r,s,a){if(a){this.tileset.draw(e,r,0,0,1,1);return}i.isRevealed?(this.tileset.draw(e,s,0,0,1,1),this.drawNearby(e,i.minesNearby())):(this.tileset.draw(e,r,0,0,1,1),this.drawFlags(e,i.numFlags()))}drawStrawberryTile(e,i,r){if(r){this.tileset.draw(e,"tile_strawberry_covered",0,0,1,1);return}switch(i.state){case Rt.Covered:this.tileset.draw(e,"tile_strawberry_covered",0,0,1,1);break;case Rt.Flagged:this.tileset.draw(e,"tile_strawberry_covered",0,0,1,1),this.tileset.draw(e,"flag",0,0,1,1);break;case Rt.Revealed:{this.tileset.draw(e,"tile_strawberry_revealed",0,0,1,1);const s=i.minesNearby(!0),a=i.secondaryMinesNearby(!0);a==null?this.drawNearby(e,s):(e.save(),e.scale(.55,.55),e.translate(.1,.45),this.drawNearby(e,i.secondaryNearbyCountRightSide?s:a),e.translate(.7,0),this.drawNearby(e,i.secondaryNearbyCountRightSide?a:s),e.restore());break}}}drawSingleAntiMineTile(e,i,r,s,a){if(a){this.tileset.draw(e,r,0,0,1,1);return}switch(i.state){case wn.Covered:this.tileset.draw(e,r,0,0,1,1);break;case wn.Flagged:this.tileset.draw(e,r,0,0,1,1),this.tileset.draw(e,"flag",0,0,1,1);break;case wn.AntiFlagged:this.tileset.draw(e,r,0,0,1,1),this.tileset.draw(e,"flag_anti",0,0,1,1);break;case wn.Revealed:{this.tileset.draw(e,s,0,0,1,1),this.drawNearby(e,i.minesNearby());break}}}drawForcedTile(e,i,r){switch(i.type){case"vanilla":this.drawSingleMineTile(e,i,"tile_vanilla_covered","tile_vanilla_revealed",r);break;case"chocolate":this.drawSingleMineTile(e,i,"tile_chocolate_covered","tile_chocolate_revealed",r);break;case"waffle":{i.isDark?this.drawSingleMineTile(e,i,"tile_waffle_dark_covered","tile_waffle_dark_revealed",r):this.drawSingleMineTile(e,i,"tile_waffle_light_covered","tile_waffle_light_revealed",r);break}case"stroopwafel":{i.isDark?this.drawSingleMineTile(e,i,"tile_stroopwafel_dark_covered","tile_stroopwafel_dark_revealed",r):this.drawSingleMineTile(e,i,"tile_stroopwafel_light_covered","tile_stroopwafel_light_revealed",r);break}case"blueberry":{this.drawMultiMineTile(e,i,"tile_blueberry_covered","tile_blueberry_revealed",r);break}case"strawberry":{this.drawStrawberryTile(e,i,r);break}case"cookies_and_cream":{this.drawSingleAntiMineTile(e,i,"tile_cookies_and_cream_covered","tile_cookies_and_cream_revealed",r);break}}}drawTile(e,i){e.save(),e.translate(i.x,i.y),this.drawForcedTile(e,i,!1),e.restore()}drawParticle(e,i){switch(e.save(),i.type){case"flag":{e.translate(i.x+.5,i.y+.5),e.rotate(i.r),e.globalAlpha=i.opacity,i.isMultiFlag?(e.translate(-.5,-.5),this.drawFlags(e,i.numFlags)):i.numFlags==1?this.tileset.draw(e,"flag",-.5,-.5,1,1):this.tileset.draw(e,"flag_anti",-.5,-.5,1,1);break}case"explosion":{const r=["explosion1","explosion2","explosion3","explosion4"],s=Math.min(Math.floor(i.lifetime/i.maxLifetime*r.length),r.length-1);this.tileset.draw(e,r[s],i.tile.x,i.tile.y,1,1);break}case"faketile":{e.translate(i.tile.x,i.tile.y),e.globalAlpha=i.opacity,this.drawForcedTile(e,i.tile,!0);break}case"tilereveal":{e.translate(i.x+.5,i.y+.5),e.rotate(i.r),e.translate(-.5,-.5),e.globalAlpha=i.opacity,this.drawForcedTile(e,i.tile,!0);break}}e.globalAlpha=1,e.restore()}drawDeathIcon(e,i,r){this.tileset.draw(e,"skull",i,r,1,1)}}function fa(t){let n,e;return n=new Th({props:{world:t[0],theme:t[4],viewport:t[1]}}),n.$on("action",t[7]),{c(){le(n.$$.fragment)},l(i){ce(n.$$.fragment,i)},m(i,r){ue(n,i,r),e=!0},p(i,r){const s={};r&1&&(s.world=i[0]),r&16&&(s.theme=i[4]),r&2&&(s.viewport=i[1]),n.$set(s)},i(i){e||(j(n.$$.fragment,i),e=!0)},o(i){V(n.$$.fragment,i),e=!1},d(i){fe(n,i)}}}function Ah(t){let n,e,i,r,s=t[0]&&t[4]&&t[1]&&fa(t);return{c(){s&&s.c(),n=Qe()},l(a){s&&s.l(a),n=Qe()},m(a,o){s&&s.m(a,o),X(a,n,o),e=!0,i||(r=ge(window,"beforeunload",t[6]),i=!0)},p(a,[o]){a[0]&&a[4]&&a[1]?s?(s.p(a,o),o&19&&j(s,1)):(s=fa(a),s.c(),j(s,1),s.m(n.parentNode,n)):s&&(Nn(),V(s,1,1,()=>{s=null}),Dn())},i(a){e||(j(s),e=!0)},o(a){V(s),e=!1},d(a){a&&x(n),s&&s.d(a),i=!1,r()}}}function xh(t,n,e){let i;zt(t,Er,p=>e(5,i=p));let{saveSlot:r}=n,{world:s}=n,a=new Sh,{viewport:o}=n,{bookmarks:u=[]}=n;_i(async()=>{await a.init();const p=Vf(r);e(0,s=p.world),e(1,o=p.viewport??new Hr(s)),e(2,u=p.bookmarks??[]),s.addEventListener("sound_unflag",()=>{a.playSound("unflag")}),s.addEventListener("sound_reveal",({data:m})=>{a.playSound("reveal",m/10+.9)}),s.addEventListener("sound_explosion",()=>{a.playSound("explosion")})}),mi(()=>{s.destroyDispatcher(),o.destroyDispatcher(),location.reload()});const l=()=>{Yf(r,{world:s,viewport:o,bookmarks:u})},f=p=>{p.detail.type=="reveal"?s.reveal(p.detail.pos.x,p.detail.pos.y):p.detail.type=="flag"?s.flag(p.detail.pos.x,p.detail.pos.y):p.detail.type=="reset"&&s.reset(p.detail.pos.x,p.detail.pos.y)};return t.$$set=p=>{"saveSlot"in p&&e(3,r=p.saveSlot),"world"in p&&e(0,s=p.world),"viewport"in p&&e(1,o=p.viewport),"bookmarks"in p&&e(2,u=p.bookmarks)},t.$$.update=()=>{t.$$.dirty&32&&e(4,a.volume=i,a)},[s,o,u,r,a,i,l,f]}class Ch extends ye{constructor(n){super(),ke(this,n,xh,Ah,ve,{saveSlot:3,world:0,viewport:1,bookmarks:2})}}/**
 * @license lucide-svelte v0.372.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Nh={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":2,"stroke-linecap":"round","stroke-linejoin":"round"},ha=Nh;function da(t,n,e){const i=t.slice();return i[10]=n[e][0],i[11]=n[e][1],i}function ar(t){let n,e=[t[11]],i={};for(let r=0;r<e.length;r+=1)i=he(i,e[r]);return{c(){n=Sa(t[10]),this.h()},l(r){n=Aa(r,t[10],{}),Z(n).forEach(x),this.h()},h(){ui(n,i)},m(r,s){X(r,n,s)},p(r,s){ui(n,i=_t(e,[s&32&&r[11]]))},d(r){r&&x(n)}}}function _a(t){let n=t[10],e,i=t[10]&&ar(t);return{c(){i&&i.c(),e=Qe()},l(r){i&&i.l(r),e=Qe()},m(r,s){i&&i.m(r,s),X(r,e,s)},p(r,s){r[10]?n?ve(n,r[10])?(i.d(1),i=ar(r),n=r[10],i.c(),i.m(e.parentNode,e)):i.p(r,s):(i=ar(r),n=r[10],i.c(),i.m(e.parentNode,e)):n&&(i.d(1),i=null,n=r[10])},d(r){r&&x(e),i&&i.d(r)}}}function Dh(t){let n,e,i,r,s,a=Qt(t[5]),o=[];for(let m=0;m<a.length;m+=1)o[m]=_a(da(t,a,m));const u=t[9].default,l=Fe(u,t,t[8],null);let f=[ha,t[6],{width:t[2]},{height:t[2]},{stroke:t[1]},{"stroke-width":i=t[4]?Number(t[3])*24/Number(t[2]):t[3]},{class:r=`lucide-icon lucide lucide-${t[0]} ${t[7].class??""}`}],p={};for(let m=0;m<f.length;m+=1)p=he(p,f[m]);return{c(){n=Sa("svg");for(let m=0;m<o.length;m+=1)o[m].c();e=Qe(),l&&l.c(),this.h()},l(m){n=Aa(m,"svg",{width:!0,height:!0,stroke:!0,"stroke-width":!0,class:!0});var d=Z(n);for(let b=0;b<o.length;b+=1)o[b].l(d);e=Qe(),l&&l.l(d),d.forEach(x),this.h()},h(){ui(n,p)},m(m,d){X(m,n,d);for(let b=0;b<o.length;b+=1)o[b]&&o[b].m(n,null);$(n,e),l&&l.m(n,null),s=!0},p(m,[d]){if(d&32){a=Qt(m[5]);let b;for(b=0;b<a.length;b+=1){const w=da(m,a,b);o[b]?o[b].p(w,d):(o[b]=_a(w),o[b].c(),o[b].m(n,e))}for(;b<o.length;b+=1)o[b].d(1);o.length=a.length}l&&l.p&&(!s||d&256)&&Ue(l,u,m,m[8],s?He(u,m[8],d,null):ze(m[8]),null),ui(n,p=_t(f,[ha,d&64&&m[6],(!s||d&4)&&{width:m[2]},(!s||d&4)&&{height:m[2]},(!s||d&2)&&{stroke:m[1]},(!s||d&28&&i!==(i=m[4]?Number(m[3])*24/Number(m[2]):m[3]))&&{"stroke-width":i},(!s||d&129&&r!==(r=`lucide-icon lucide lucide-${m[0]} ${m[7].class??""}`))&&{class:r}]))},i(m){s||(j(l,m),s=!0)},o(m){V(l,m),s=!1},d(m){m&&x(n),Tr(o,m),l&&l.d(m)}}}function Mh(t,n,e){const i=["name","color","size","strokeWidth","absoluteStrokeWidth","iconNode"];let r=us(n,i),{$$slots:s={},$$scope:a}=n,{name:o}=n,{color:u="currentColor"}=n,{size:l=24}=n,{strokeWidth:f=2}=n,{absoluteStrokeWidth:p=!1}=n,{iconNode:m}=n;return t.$$set=d=>{e(7,n=he(he({},n),Se(d))),e(6,r=us(n,i)),"name"in d&&e(0,o=d.name),"color"in d&&e(1,u=d.color),"size"in d&&e(2,l=d.size),"strokeWidth"in d&&e(3,f=d.strokeWidth),"absoluteStrokeWidth"in d&&e(4,p=d.absoluteStrokeWidth),"iconNode"in d&&e(5,m=d.iconNode),"$$scope"in d&&e(8,a=d.$$scope)},n=Se(n),[o,u,l,f,p,m,r,n,a,s]}class Bt extends ye{constructor(n){super(),ke(this,n,Mh,Dh,ve,{name:0,color:1,size:2,strokeWidth:3,absoluteStrokeWidth:4,iconNode:5})}}function Oh(t){let n;const e=t[2].default,i=Fe(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?He(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function Bh(t){let n,e;const i=[{name:"info"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Oh]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Mt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function $h(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["circle",{cx:"12",cy:"12",r:"10"}],["path",{d:"M12 16v-4"}],["path",{d:"M12 8h.01"}]];return t.$$set=a=>{e(1,n=he(he({},n),Se(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Se(n),[s,n,i,r]}class Rh extends ye{constructor(n){super(),ke(this,n,$h,Bh,ve,{})}}function ma(t){let n,e,i,r,s,a,o=t[1]&&pa(t);const u=t[4].default,l=Fe(u,t,t[3],null);return{c(){n=R("div"),e=R("div"),o&&o.c(),i=ae(),r=R("div"),s=R("div"),l&&l.c(),this.h()},l(f){n=L(f,"DIV",{class:!0});var p=Z(n);e=L(p,"DIV",{class:!0});var m=Z(e);o&&o.l(m),m.forEach(x),i=oe(p),r=L(p,"DIV",{class:!0});var d=Z(r);s=L(d,"DIV",{class:!0});var b=Z(s);l&&l.l(b),b.forEach(x),d.forEach(x),p.forEach(x),this.h()},h(){B(e,"class","modal-background svelte-9y1m1s"),Jt(e,"modal-background-styled",t[2]),B(s,"class","pointer-events-auto"),B(r,"class","modal-content flex justify-center items-center pointer-events-none p-8 svelte-9y1m1s"),B(n,"class","modal force-overlap svelte-9y1m1s")},m(f,p){X(f,n,p),$(n,e),o&&o.m(e,null),$(n,i),$(n,r),$(r,s),l&&l.m(s,null),a=!0},p(f,p){f[1]?o?o.p(f,p):(o=pa(f),o.c(),o.m(e,null)):o&&(o.d(1),o=null),(!a||p&4)&&Jt(e,"modal-background-styled",f[2]),l&&l.p&&(!a||p&8)&&Ue(l,u,f,f[3],a?He(u,f[3],p,null):ze(f[3]),null)},i(f){a||(j(l,f),a=!0)},o(f){V(l,f),a=!1},d(f){f&&x(n),o&&o.d(),l&&l.d(f)}}}function pa(t){let n,e,i;return{c(){n=R("button"),this.h()},l(r){n=L(r,"BUTTON",{class:!0,"aria-label":!0}),Z(n).forEach(x),this.h()},h(){B(n,"class","w-full h-full"),B(n,"aria-label","Close Modal")},m(r,s){X(r,n,s),e||(i=ge(n,"click",t[5]),e=!0)},p:De,d(r){r&&x(n),e=!1,i()}}}function Lh(t){let n,e,i=t[0]&&ma(t);return{c(){i&&i.c(),n=Qe()},l(r){i&&i.l(r),n=Qe()},m(r,s){i&&i.m(r,s),X(r,n,s),e=!0},p(r,[s]){r[0]?i?(i.p(r,s),s&1&&j(i,1)):(i=ma(r),i.c(),j(i,1),i.m(n.parentNode,n)):i&&(Nn(),V(i,1,1,()=>{i=null}),Dn())},i(r){e||(j(i),e=!0)},o(r){V(i),e=!1},d(r){r&&x(n),i&&i.d(r)}}}function Fh(t,n,e){let{$$slots:i={},$$scope:r}=n,{visible:s=!1}=n,{closable:a=!0}=n,{backgroundStyle:o=!0}=n;const u=()=>e(0,s=!1);return t.$$set=l=>{"visible"in l&&e(0,s=l.visible),"closable"in l&&e(1,a=l.closable),"backgroundStyle"in l&&e(2,o=l.backgroundStyle),"$$scope"in l&&e(3,r=l.$$scope)},[s,a,o,r,i,u]}class or extends ye{constructor(n){super(),ke(this,n,Fh,Lh,ve,{visible:0,closable:1,backgroundStyle:2})}}function Uh(t){let n;const e=t[2].default,i=Fe(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?He(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function zh(t){let n,e;const i=[{name:"chevron-left"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Uh]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Mt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function Hh(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"m15 18-6-6 6-6"}]];return t.$$set=a=>{e(1,n=he(he({},n),Se(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Se(n),[s,n,i,r]}class jh extends ye{constructor(n){super(),ke(this,n,Hh,zh,ve,{})}}function Zh(t){let n;const e=t[2].default,i=Fe(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?He(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function Vh(t){let n,e;const i=[{name:"chevron-right"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Zh]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Mt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function Yh(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"m9 18 6-6-6-6"}]];return t.$$set=a=>{e(1,n=he(he({},n),Se(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Se(n),[s,n,i,r]}class Xh extends ye{constructor(n){super(),ke(this,n,Yh,Vh,ve,{})}}function Wh(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_cookies_and_cream_screenshot.png" alt="Cookies and Cream Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Cookies and Cream</h2> <div class="biome-description svelte-1pkhcy2">Tile may have anti mine. Anti mines count as -1 mines.
                        <br/><br/>
                        Be careful while revealing tiles; Nearby tiles may still have mines, even though nearby mines is equal to nearby flags.</div></div>`;return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Ie(n)!=="svelte-dc0odg"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome text-black svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function Gh(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_strawberry_screenshot.png" alt="Strawberry Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Strawberry</h2> <div class="biome-description svelte-1pkhcy2">Tile nearby mine count may have 2 values.
                        <br/><br/>
                        Be careful while revealing tiles; If any of the two values match, the tiles will auto reveal.</div></div>`;return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Ie(n)!=="svelte-1hn2487"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function Kh(t){let n,e='<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_blueberry_screenshot.png" alt="Blueberry Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Blueberry</h2> <div class="biome-description svelte-1pkhcy2">Tiles may have up to 3 mines.</div></div>';return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Ie(n)!=="svelte-1pq8aco"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function qh(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_stroopwafel_screenshot.png" alt="Stroopwafel Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Stroopwafel</h2> <div class="biome-description svelte-1pkhcy2">3x3 checkers of tiles.<br/>
                        Dark checkered sections have 8 mines.<br/>
                        Light checkered sections have 1 mine.</div></div>`;return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Ie(n)!=="svelte-4cbz83"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function Jh(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_waffle_screenshot.png" alt="Waffle Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Waffle</h2> <div class="biome-description svelte-1pkhcy2">2x2 checkers of tiles.<br/>
                        Dark checkered sections have 3 mines.<br/>
                        Light checkered sections have 1 mine.</div></div>`;return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Ie(n)!=="svelte-1ji8mo3"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function Qh(t){let n,e=`<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_chocolate_screenshot.png" alt="Chocolate Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Chocolate</h2> <div class="biome-description svelte-1pkhcy2">The standard Minesweeper rules.<br/>
                        Much more mines than Vanilla biome.</div></div>`;return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Ie(n)!=="svelte-gc9i28"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function ed(t){let n,e='<img class="biome-backdrop svelte-1pkhcy2" src="/infinite-minesweeper/biome_vanilla_screenshot.png" alt="Vanilla Biome Screenshot"/> <div class="biome-content svelte-1pkhcy2"><h2 class="biome-title svelte-1pkhcy2">Vanilla</h2> <div class="biome-description svelte-1pkhcy2">The standard Minesweeper rules.</div></div>';return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Ie(n)!=="svelte-ic5bha"&&(n.innerHTML=e),this.h()},h(){B(n,"class","biome svelte-1pkhcy2")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function td(t){let n,e,i,r,s,a,o,u,l,f,p,m;function d(y,S){if(y[0]=="Vanilla")return ed;if(y[0]=="Chocolate")return Qh;if(y[0]=="Waffle")return Jh;if(y[0]=="Stroopwafel")return qh;if(y[0]=="Blueberry")return Kh;if(y[0]=="Strawberry")return Gh;if(y[0]=="Cookies and Cream")return Wh}let b=d(t),w=b&&b(t);return a=new jh({}),l=new Xh({}),{c(){n=R("div"),e=R("div"),w&&w.c(),i=ae(),r=R("div"),s=R("button"),le(a.$$.fragment),o=ae(),u=R("button"),le(l.$$.fragment),this.h()},l(y){n=L(y,"DIV",{class:!0});var S=Z(n);e=L(S,"DIV",{class:!0});var v=Z(e);w&&w.l(v),v.forEach(x),i=oe(S),r=L(S,"DIV",{class:!0});var M=Z(r);s=L(M,"BUTTON",{class:!0});var T=Z(s);ce(a.$$.fragment,T),T.forEach(x),o=oe(M),u=L(M,"BUTTON",{class:!0});var O=Z(u);ce(l.$$.fragment,O),O.forEach(x),M.forEach(x),S.forEach(x),this.h()},h(){B(e,"class","pointer-events-auto px-12"),B(s,"class","pointer-events-auto pl-4 hover:-translate-x-1 transition-transform"),B(u,"class","pointer-events-auto pr-4 hover:translate-x-1 transition-transform"),B(r,"class","pointer-events-none flex justify-between z-10"),B(n,"class","w-full h-full force-overlap text-white")},m(y,S){X(y,n,S),$(n,e),w&&w.m(e,null),$(n,i),$(n,r),$(r,s),ue(a,s,null),$(r,o),$(r,u),ue(l,u,null),f=!0,p||(m=[ge(s,"click",t[2]),ge(u,"click",t[3])],p=!0)},p(y,[S]){b!==(b=d(y))&&(w&&w.d(1),w=b&&b(y),w&&(w.c(),w.m(e,null)))},i(y){f||(j(a.$$.fragment,y),j(l.$$.fragment,y),f=!0)},o(y){V(a.$$.fragment,y),V(l.$$.fragment,y),f=!1},d(y){y&&x(n),w&&w.d(),fe(a),fe(l),p=!1,sn(m)}}}function nd(t,n,e){const i=["Vanilla","Chocolate","Waffle","Stroopwafel","Blueberry","Strawberry","Cookies and Cream"];let r="Vanilla";function s(u){let l=i.indexOf(r);l+=u=="next"?1:-1,l>=i.length&&(l=0),l<0&&(l=i.length-1),e(0,r=i[l])}return[r,s,u=>{u.preventDefault(),s("prev")},u=>{u.preventDefault(),s("next")}]}class id extends ye{constructor(n){super(),ke(this,n,nd,td,ve,{})}}function ba(t,n,e){const i=t.slice();return i[4]=n[e],i}function ga(t){let n,e=t[4]+"",i,r,s,a,o;function u(){return t[3](t[4])}return{c(){n=R("button"),i=ut(e),r=ae(),this.h()},l(l){n=L(l,"BUTTON",{class:!0});var f=Z(n);i=ft(f,e),r=oe(f),f.forEach(x),this.h()},h(){B(n,"class","tab w-full flex justify-center py-1 px-4 rounded-md svelte-1v0way8"),n.disabled=s=t[4]==t[0],Jt(n,"selected",t[4]==t[0])},m(l,f){X(l,n,f),$(n,i),$(n,r),a||(o=ge(n,"click",u),a=!0)},p(l,f){t=l,f&1&&s!==(s=t[4]==t[0])&&(n.disabled=s),f&5&&Jt(n,"selected",t[4]==t[0])},d(l){l&&x(n),a=!1,o()}}}function rd(t){let n;function e(s,a){return s[1]=="mouse"?ud:s[1]=="keyboard"?cd:s[1]=="touch"?ld:od}let i=e(t),r=i(t);return{c(){n=R("div"),r.c(),this.h()},l(s){n=L(s,"DIV",{class:!0});var a=Z(n);r.l(a),a.forEach(x),this.h()},h(){B(n,"class","px-4")},m(s,a){X(s,n,a),r.m(n,null)},p(s,a){i!==(i=e(s))&&(r.d(1),r=i(s),r&&(r.c(),r.m(n,null)))},i:De,o:De,d(s){s&&x(n),r.d()}}}function sd(t){let n,e,i;return e=new id({}),{c(){n=R("div"),le(e.$$.fragment),this.h()},l(r){n=L(r,"DIV",{class:!0});var s=Z(n);ce(e.$$.fragment,s),s.forEach(x),this.h()},h(){B(n,"class","w-full h-full inline")},m(r,s){X(r,n,s),ue(e,n,null),i=!0},p:De,i(r){i||(j(e.$$.fragment,r),i=!0)},o(r){V(e.$$.fragment,r),i=!1},d(r){r&&x(n),fe(e)}}}function ad(t){let n,e=`<div><a class="text-2xl font-bold" href="https://vulae.github.io/infinite-minesweeper">Infinite Minesweeper</a> <br/>
                    An infinite twist on Minesweeper that adds biomes that change the rules of the game.</div> <div class="pt-4"><span class="float-right text-xs font-extrabold">*Source code available on
                        <a class="underline" href="https://github.com/Vulae/infinite-minesweeper">GitHub</a></span></div>`;return{c(){n=R("div"),n.innerHTML=e,this.h()},l(i){n=L(i,"DIV",{class:!0,"data-svelte-h":!0}),Ie(n)!=="svelte-1yloiaf"&&(n.innerHTML=e),this.h()},h(){B(n,"class","px-4 w-full h-full flex flex-col justify-between")},m(i,r){X(i,n,r)},p:De,i:De,o:De,d(i){i&&x(n)}}}function od(t){let n,e="Unknown control method.";return{c(){n=R("span"),n.textContent=e},l(i){n=L(i,"SPAN",{"data-svelte-h":!0}),Ie(n)!=="svelte-1yl4tvk"&&(n.textContent=e)},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function ld(t){let n,e=`<h1 class="font-bold text-2xl">Touch Controls</h1>
                        Double Tap: Reveal tile
                        <br/>
                        Single Tap: Flag tile
                        <br/>
                        Pan: Move view
                        <br/>
                        Pinch: Zoom view`;return{c(){n=R("span"),n.innerHTML=e},l(i){n=L(i,"SPAN",{"data-svelte-h":!0}),Ie(n)!=="svelte-1ukp1tk"&&(n.innerHTML=e)},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function cd(t){let n,e=`<h1 class="font-bold text-2xl">Keyboard Controls</h1>
                        Keyboard control method not yet supported.`;return{c(){n=R("span"),n.innerHTML=e},l(i){n=L(i,"SPAN",{"data-svelte-h":!0}),Ie(n)!=="svelte-1rw6f38"&&(n.innerHTML=e)},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function ud(t){let n,e=`<h1 class="font-bold text-2xl">Mouse Controls</h1>
                        Left Click: Reveal tile
                        <br/>
                        Right Click: Flag tile
                        <br/>
                        Left Click Drag: Move view
                        <br/>
                        Scroll Wheel: Zoom view`;return{c(){n=R("span"),n.innerHTML=e},l(i){n=L(i,"SPAN",{"data-svelte-h":!0}),Ie(n)!=="svelte-k2yzda"&&(n.innerHTML=e)},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function fd(t){let n,e,i,r,s,a,o,u,l,f=Qt(t[2]),p=[];for(let w=0;w<f.length;w+=1)p[w]=ga(ba(t,f,w));const m=[ad,sd,rd],d=[];function b(w,y){return w[0]=="Information"?0:w[0]=="Biomes"?1:w[0]=="Controls"?2:-1}return~(o=b(t))&&(u=d[o]=m[o](t)),{c(){n=R("div"),e=R("div");for(let w=0;w<p.length;w+=1)p[w].c();i=ae(),r=R("div"),s=ae(),a=R("div"),u&&u.c(),this.h()},l(w){n=L(w,"DIV",{class:!0});var y=Z(n);e=L(y,"DIV",{class:!0});var S=Z(e);for(let M=0;M<p.length;M+=1)p[M].l(S);S.forEach(x),i=oe(y),r=L(y,"DIV",{class:!0}),Z(r).forEach(x),s=oe(y),a=L(y,"DIV",{class:!0});var v=Z(a);u&&u.l(v),v.forEach(x),y.forEach(x),this.h()},h(){B(e,"class","px-4 grid grid-flow-col gap-4 items-center font-bold"),B(r,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full"),B(a,"class","w-[32rem] h-64 py-2 font-semibold"),B(n,"class","grid px-4 py-2 rounded-2xl bg-white bg-opacity-50")},m(w,y){X(w,n,y),$(n,e);for(let S=0;S<p.length;S+=1)p[S]&&p[S].m(e,null);$(n,i),$(n,r),$(n,s),$(n,a),~o&&d[o].m(a,null),l=!0},p(w,[y]){if(y&5){f=Qt(w[2]);let v;for(v=0;v<f.length;v+=1){const M=ba(w,f,v);p[v]?p[v].p(M,y):(p[v]=ga(M),p[v].c(),p[v].m(e,null))}for(;v<p.length;v+=1)p[v].d(1);p.length=f.length}let S=o;o=b(w),o===S?~o&&d[o].p(w,y):(u&&(Nn(),V(d[S],1,1,()=>{d[S]=null}),Dn()),~o?(u=d[o],u?u.p(w,y):(u=d[o]=m[o](w),u.c()),j(u,1),u.m(a,null)):u=null)},i(w){l||(j(u),l=!0)},o(w){V(u),l=!1},d(w){w&&x(n),Tr(p,w),~o&&d[o].d()}}}function hd(t,n,e){let i;zt(t,Cn,o=>e(1,i=o));const r=["Information","Biomes","Controls"];let s="Information";return[s,i,r,o=>e(0,s=o)]}class dd extends ye{constructor(n){super(),ke(this,n,hd,fd,ve,{})}}function _d(t){let n;const e=t[2].default,i=Fe(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?He(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function md(t){let n,e;const i=[{name:"skull"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[_d]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Mt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function pd(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["circle",{cx:"9",cy:"12",r:"1"}],["circle",{cx:"15",cy:"12",r:"1"}],["path",{d:"M8 20v2h8v-2"}],["path",{d:"m12.5 17-.5-1-.5 1h1z"}],["path",{d:"M16 20a2 2 0 0 0 1.56-3.25 8 8 0 1 0-11.12 0A2 2 0 0 0 8 20"}]];return t.$$set=a=>{e(1,n=he(he({},n),Se(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Se(n),[s,n,i,r]}class bd extends ye{constructor(n){super(),ke(this,n,pd,md,ve,{})}}function gd(t){let n,e,i,r,s,a,o;return e=new bd({}),{c(){n=R("div"),le(e.$$.fragment),i=ae(),r=R("span"),s=ut(t[1]),this.h()},l(u){n=L(u,"DIV",{class:!0,title:!0});var l=Z(n);ce(e.$$.fragment,l),i=oe(l),r=L(l,"SPAN",{class:!0});var f=Z(r);s=ft(f,t[1]),f.forEach(x),l.forEach(x),this.h()},h(){B(r,"class","text-sm"),B(n,"class","flex items-center"),B(n,"title",a=t[1]+" deaths"),qe(n,"flex-direction",t[0]=="horizontal"?"row":"column")},m(u,l){X(u,n,l),ue(e,n,null),$(n,i),$(n,r),$(r,s),o=!0},p(u,[l]){(!o||l&2)&&ai(s,u[1]),(!o||l&2&&a!==(a=u[1]+" deaths"))&&B(n,"title",a),l&1&&qe(n,"flex-direction",u[0]=="horizontal"?"row":"column")},i(u){o||(j(e.$$.fragment,u),o=!0)},o(u){V(e.$$.fragment,u),o=!1},d(u){u&&x(n),fe(e)}}}function vd(t,n,e){let{layout:i}=n,{world:r}=n,s,a=0,o=null;return t.$$set=u=>{"layout"in u&&e(0,i=u.layout),"world"in u&&e(2,r=u.world)},t.$$.update=()=>{t.$$.dirty&28&&r&&(o==null||o.removeEventListener(s),e(1,a=r.deaths),e(3,s=r.addEventListener("die",()=>{e(1,a=r.deaths)})),e(4,o=r))},[i,a,r,s,o]}class wd extends ye{constructor(n){super(),ke(this,n,vd,gd,ve,{layout:0,world:2})}}function yd(t){let n;const e=t[2].default,i=Fe(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?He(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function kd(t){let n,e;const i=[{name:"plus"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[yd]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Mt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function Ed(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"M5 12h14"}],["path",{d:"M12 5v14"}]];return t.$$set=a=>{e(1,n=he(he({},n),Se(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Se(n),[s,n,i,r]}class Td extends ye{constructor(n){super(),ke(this,n,Ed,kd,ve,{})}}function Id(t){let n;const e=t[2].default,i=Fe(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?He(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function Pd(t){let n,e;const i=[{name:"bookmark-minus"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Id]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Mt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function Sd(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"}],["line",{x1:"15",x2:"9",y1:"10",y2:"10"}]];return t.$$set=a=>{e(1,n=he(he({},n),Se(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Se(n),[s,n,i,r]}class Ad extends ye{constructor(n){super(),ke(this,n,Sd,Pd,ve,{})}}function va(t,n,e){const i=t.slice();return i[9]=n[e],i[11]=e,i}function wa(t){let n;return{c(){n=R("div"),this.h()},l(e){n=L(e,"DIV",{class:!0}),Z(n).forEach(x),this.h()},h(){B(n,"class","w-full h-0.5 bg-black bg-opacity-50 my-1 rounded-full svelte-1wmwp0k")},m(e,i){X(e,n,i)},d(e){e&&x(n)}}}function ya(t){let n,e,i,r=t[9].createdAt.toLocaleDateString()+"",s,a,o=t[9].createdAt.toLocaleTimeString()+"",u,l,f,p=t[9].name+"",m,d,b,w,y,S,v,M,T;function O(){return t[5](t[9])}w=new Ad({props:{size:"2rem"}});function Y(){return t[6](t[11])}let E=t[11]<t[0].length-1&&wa();return{c(){n=R("li"),e=R("button"),i=R("span"),s=ut(r),a=ae(),u=ut(o),l=ae(),f=R("div"),m=ut(p),d=ae(),b=R("button"),le(w.$$.fragment),y=ae(),E&&E.c(),S=Qe(),this.h()},l(D){n=L(D,"LI",{class:!0});var A=Z(n);e=L(A,"BUTTON",{class:!0});var k=Z(e);i=L(k,"SPAN",{class:!0});var F=Z(i);s=ft(F,r),a=oe(F),u=ft(F,o),F.forEach(x),l=oe(k),f=L(k,"DIV",{class:!0});var U=Z(f);m=ft(U,p),U.forEach(x),k.forEach(x),d=oe(A),b=L(A,"BUTTON",{class:!0,title:!0});var K=Z(b);ce(w.$$.fragment,K),K.forEach(x),A.forEach(x),y=oe(D),E&&E.l(D),S=Qe(),this.h()},h(){B(i,"class","text-xs font-normal svelte-1wmwp0k"),B(f,"class","text-xl font-bold svelte-1wmwp0k"),B(e,"class","flex flex-col ml-4 hover:text-blue-800 transition-colors svelte-1wmwp0k"),B(b,"class","hover:text-red-900 transition-colors svelte-1wmwp0k"),B(b,"title","Remove Bookmark"),B(n,"class","flex justify-between items-center svelte-1wmwp0k")},m(D,A){X(D,n,A),$(n,e),$(e,i),$(i,s),$(i,a),$(i,u),$(e,l),$(e,f),$(f,m),$(n,d),$(n,b),ue(w,b,null),X(D,y,A),E&&E.m(D,A),X(D,S,A),v=!0,M||(T=[ge(e,"click",O),ge(b,"click",Y)],M=!0)},p(D,A){t=D,(!v||A&1)&&r!==(r=t[9].createdAt.toLocaleDateString()+"")&&ai(s,r),(!v||A&1)&&o!==(o=t[9].createdAt.toLocaleTimeString()+"")&&ai(u,o),(!v||A&1)&&p!==(p=t[9].name+"")&&ai(m,p),t[11]<t[0].length-1?E||(E=wa(),E.c(),E.m(S.parentNode,S)):E&&(E.d(1),E=null)},i(D){v||(j(w.$$.fragment,D),v=!0)},o(D){V(w.$$.fragment,D),v=!1},d(D){D&&(x(n),x(y),x(S)),fe(w),E&&E.d(D),M=!1,sn(T)}}}function ka(t){let n,e="You have no bookmarks.";return{c(){n=R("li"),n.textContent=e,this.h()},l(i){n=L(i,"LI",{class:!0,"data-svelte-h":!0}),Ie(n)!=="svelte-1r3ii7r"&&(n.textContent=e),this.h()},h(){B(n,"class","text-xl font-bold svelte-1wmwp0k")},m(i,r){X(i,n,r)},d(i){i&&x(n)}}}function xd(t){let n,e,i="Bookmarks",r,s,a,o,u,l,f,p,m,d,b,w,y,S,v,M,T=Qt(t[0]),O=[];for(let D=0;D<T.length;D+=1)O[D]=ya(va(t,T,D));const Y=D=>V(O[D],1,1,()=>{O[D]=null});let E=t[0].length==0&&ka();return y=new Td({props:{size:"2rem"}}),{c(){n=R("div"),e=R("span"),e.textContent=i,r=ae(),s=R("div"),a=ae(),o=R("ul");for(let D=0;D<O.length;D+=1)O[D].c();u=ae(),E&&E.c(),l=ae(),f=R("div"),p=ae(),m=R("form"),d=R("input"),b=ae(),w=R("button"),le(y.$$.fragment),this.h()},l(D){n=L(D,"DIV",{class:!0});var A=Z(n);e=L(A,"SPAN",{class:!0,"data-svelte-h":!0}),Ie(e)!=="svelte-3bkqky"&&(e.textContent=i),r=oe(A),s=L(A,"DIV",{class:!0}),Z(s).forEach(x),a=oe(A),o=L(A,"UL",{class:!0});var k=Z(o);for(let K=0;K<O.length;K+=1)O[K].l(k);u=oe(k),E&&E.l(k),k.forEach(x),l=oe(A),f=L(A,"DIV",{class:!0}),Z(f).forEach(x),p=oe(A),m=L(A,"FORM",{class:!0});var F=Z(m);d=L(F,"INPUT",{placeholder:!0,type:!0,maxlength:!0,class:!0}),b=oe(F),w=L(F,"BUTTON",{type:!0,title:!0,class:!0});var U=Z(w);ce(y.$$.fragment,U),U.forEach(x),F.forEach(x),A.forEach(x),this.h()},h(){B(e,"class","text-2xl font-bold text-center svelte-1wmwp0k"),B(s,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full svelte-1wmwp0k"),B(o,"class","p-2 max-h-96 overflow-y-auto svelte-1wmwp0k"),B(f,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full svelte-1wmwp0k"),B(d,"placeholder","New Bookmark"),B(d,"type","text"),B(d,"maxlength","16"),B(d,"class","w-48 px-2 rounded-md svelte-1wmwp0k"),B(w,"type","submit"),B(w,"title","Create Bookmark"),B(w,"class","flex hover:text-green-900 transition-colors svelte-1wmwp0k"),B(m,"class","flex justify-between gap-4 px-2 pb-2 svelte-1wmwp0k"),B(n,"class","grid px-4 py-2 rounded-2xl bg-white bg-opacity-50 svelte-1wmwp0k")},m(D,A){X(D,n,A),$(n,e),$(n,r),$(n,s),$(n,a),$(n,o);for(let k=0;k<O.length;k+=1)O[k]&&O[k].m(o,null);$(o,u),E&&E.m(o,null),$(n,l),$(n,f),$(n,p),$(n,m),$(m,d),t[7](d),$(m,b),$(m,w),ue(y,w,null),S=!0,v||(M=[ge(d,"keydown",dl(t[4])),ge(m,"submit",t[8])],v=!0)},p(D,[A]){if(A&7){T=Qt(D[0]);let k;for(k=0;k<T.length;k+=1){const F=va(D,T,k);O[k]?(O[k].p(F,A),j(O[k],1)):(O[k]=ya(F),O[k].c(),j(O[k],1),O[k].m(o,u))}for(Nn(),k=T.length;k<O.length;k+=1)Y(k);Dn()}D[0].length==0?E||(E=ka(),E.c(),E.m(o,null)):E&&(E.d(1),E=null)},i(D){if(!S){for(let A=0;A<T.length;A+=1)j(O[A]);j(y.$$.fragment,D),S=!0}},o(D){O=O.filter(Boolean);for(let A=0;A<O.length;A+=1)V(O[A]);V(y.$$.fragment,D),S=!1},d(D){D&&x(n),Tr(O,D),E&&E.d(),t[7](null),fe(y),v=!1,sn(M)}}}function Cd(t,n,e){let{viewport:i}=n,{bookmarks:r}=n,s,{visible:a}=n;function o(m){Ea.call(this,t,m)}const u=m=>{i.load(m.viewport),i.change(),e(1,a=!1)},l=m=>{r==null||r.splice(m,1),e(0,r)};function f(m){Re[m?"unshift":"push"](()=>{s=m,e(3,s)})}const p=()=>{s.value.length!=0&&(r==null||r.push({name:s.value,createdAt:new Date,viewport:i.save()}),e(0,r),e(3,s.value="",s))};return t.$$set=m=>{"viewport"in m&&e(2,i=m.viewport),"bookmarks"in m&&e(0,r=m.bookmarks),"visible"in m&&e(1,a=m.visible)},[r,a,i,s,o,u,l,f,p]}class Nd extends ye{constructor(n){super(),ke(this,n,Cd,xd,ve,{viewport:2,bookmarks:0,visible:1})}}function Dd(t){let n;const e=t[2].default,i=Fe(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?He(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function Md(t){let n,e;const i=[{name:"bookmark"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Dd]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Mt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function Od(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"}]];return t.$$set=a=>{e(1,n=he(he({},n),Se(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Se(n),[s,n,i,r]}class Bd extends ye{constructor(n){super(),ke(this,n,Od,Md,ve,{})}}function $d(t){let n;return{c(){n=ut("ARE YOU SURE?")},l(e){n=ft(e,"ARE YOU SURE?")},m(e,i){X(e,n,i)},d(e){e&&x(n)}}}function Rd(t){let n;return{c(){n=ut("CLEAR SAVE")},l(e){n=ft(e,"CLEAR SAVE")},m(e,i){X(e,n,i)},d(e){e&&x(n)}}}function Ld(t){let n,e,i="Settings",r,s,a,o,u,l,f,p,m="Mouse",d,b="Touch",w,y,S,v,M,T,O,Y,E,D,A,k,F;function U(q,_e){return q[2]?$d:Rd}let K=U(t),ie=K(t);return{c(){n=R("div"),e=R("span"),e.textContent=i,r=ae(),s=R("div"),a=ae(),o=R("div"),u=R("div"),l=ut(`Input Method
            `),f=R("select"),p=R("option"),p.textContent=m,d=R("option"),d.textContent=b,w=ae(),y=R("div"),S=ut(`Volume
            `),v=R("input"),T=ae(),O=R("div"),Y=ut(`Display information on load
            `),E=R("input"),D=ae(),A=R("button"),ie.c(),this.h()},l(q){n=L(q,"DIV",{class:!0});var _e=Z(n);e=L(_e,"SPAN",{class:!0,"data-svelte-h":!0}),Ie(e)!=="svelte-1v23jpc"&&(e.textContent=i),r=oe(_e),s=L(_e,"DIV",{class:!0}),Z(s).forEach(x),a=oe(_e),o=L(_e,"DIV",{class:!0});var we=Z(o);u=L(we,"DIV",{class:!0});var Me=Z(u);l=ft(Me,`Input Method
            `),f=L(Me,"SELECT",{});var je=Z(f);p=L(je,"OPTION",{"data-svelte-h":!0}),Ie(p)!=="svelte-1o1urqg"&&(p.textContent=m),d=L(je,"OPTION",{"data-svelte-h":!0}),Ie(d)!=="svelte-4sw168"&&(d.textContent=b),je.forEach(x),Me.forEach(x),w=oe(we),y=L(we,"DIV",{class:!0});var te=Z(y);S=ft(te,`Volume
            `),v=L(te,"INPUT",{type:!0,min:!0,max:!0,step:!0,title:!0}),te.forEach(x),T=oe(we),O=L(we,"DIV",{class:!0});var Ne=Z(O);Y=ft(Ne,`Display information on load
            `),E=L(Ne,"INPUT",{type:!0}),Ne.forEach(x),D=oe(we),A=L(we,"BUTTON",{class:!0});var Ze=Z(A);ie.l(Ze),Ze.forEach(x),we.forEach(x),_e.forEach(x),this.h()},h(){B(e,"class","text-2xl font-bold text-center"),B(s,"class","w-full h-1 bg-black bg-opacity-50 my-2 rounded-full"),p.__value="mouse",fs(p,p.__value),d.__value="touch",fs(d,d.__value),t[3]===void 0&&_l(()=>t[6].call(f)),B(u,"class","flex justify-between items-center gap-3"),B(v,"type","range"),B(v,"min","0"),B(v,"max","1"),B(v,"step","0.05"),v.value=t[4],B(v,"title",M=Math.round(t[4]*100)+"% Volume"),B(y,"class","flex justify-between items-center gap-3"),B(E,"type","checkbox"),B(O,"class","flex justify-between items-center gap-3"),B(A,"class","bg-black font-bold text-red-500 rounded-lg py-1"),B(o,"class","p-2 max-h-96 overflow-y-auto flex flex-col gap-4 font-semibold"),B(n,"class","grid px-4 py-2 rounded-2xl bg-white bg-opacity-50")},m(q,_e){X(q,n,_e),$(n,e),$(n,r),$(n,s),$(n,a),$(n,o),$(o,u),$(u,l),$(u,f),$(f,p),$(f,d),hs(f,t[3],!0),$(o,w),$(o,y),$(y,S),$(y,v),$(o,T),$(o,O),$(O,Y),$(O,E),E.checked=t[5],$(o,D),$(o,A),ie.m(A,null),k||(F=[ge(f,"change",t[6]),ge(v,"change",t[7]),ge(E,"change",t[8]),ge(A,"click",t[9])],k=!0)},p(q,[_e]){_e&8&&hs(f,q[3]),_e&16&&(v.value=q[4]),_e&16&&M!==(M=Math.round(q[4]*100)+"% Volume")&&B(v,"title",M),_e&32&&(E.checked=q[5]),K!==(K=U(q))&&(ie.d(1),ie=K(q),ie&&(ie.c(),ie.m(A,null)))},i:De,o:De,d(q){q&&x(n),ie.d(),k=!1,sn(F)}}}const Fd=5e3;function Ud(t,n,e){let i,r,s;zt(t,Cn,d=>e(3,i=d)),zt(t,Er,d=>e(4,r=d)),zt(t,kr,d=>e(5,s=d));let{saveSlot:a}=n,o=-1,u=!1;mi(()=>{clearTimeout(o)});function l(){i=ml(this),Cn.set(i)}const f=d=>{pl(Er,r=d.currentTarget.valueAsNumber,r)};function p(){s=this.checked,kr.set(s)}const m=()=>{u?(e(2,u=!1),Xf(a),location.reload()):(e(2,u=!0),e(1,o=setTimeout(()=>{e(2,u=!1)},Fd)))};return t.$$set=d=>{"saveSlot"in d&&e(0,a=d.saveSlot)},[a,o,u,i,r,s,l,f,p,m]}class zd extends ye{constructor(n){super(),ke(this,n,Ud,Ld,ve,{saveSlot:0})}}function Hd(t){let n;const e=t[2].default,i=Fe(e,t,t[3],null);return{c(){i&&i.c()},l(r){i&&i.l(r)},m(r,s){i&&i.m(r,s),n=!0},p(r,s){i&&i.p&&(!n||s&8)&&Ue(i,e,r,r[3],n?He(e,r[3],s,null):ze(r[3]),null)},i(r){n||(j(i,r),n=!0)},o(r){V(i,r),n=!1},d(r){i&&i.d(r)}}}function jd(t){let n,e;const i=[{name:"settings"},t[1],{iconNode:t[0]}];let r={$$slots:{default:[Hd]},$$scope:{ctx:t}};for(let s=0;s<i.length;s+=1)r=he(r,i[s]);return n=new Bt({props:r}),{c(){le(n.$$.fragment)},l(s){ce(n.$$.fragment,s)},m(s,a){ue(n,s,a),e=!0},p(s,[a]){const o=a&3?_t(i,[i[0],a&2&&Mt(s[1]),a&1&&{iconNode:s[0]}]):{};a&8&&(o.$$scope={dirty:a,ctx:s}),n.$set(o)},i(s){e||(j(n.$$.fragment,s),e=!0)},o(s){V(n.$$.fragment,s),e=!1},d(s){fe(n,s)}}}function Zd(t,n,e){let{$$slots:i={},$$scope:r}=n;const s=[["path",{d:"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"}],["circle",{cx:"12",cy:"12",r:"3"}]];return t.$$set=a=>{e(1,n=he(he({},n),Se(a))),"$$scope"in a&&e(3,r=a.$$scope)},n=Se(n),[s,n,i,r]}class Vd extends ye{constructor(n){super(),ke(this,n,Zd,jd,ve,{})}}function Yd(t){let n,e;return n=new dd({}),{c(){le(n.$$.fragment)},l(i){ce(n.$$.fragment,i)},m(i,r){ue(n,i,r),e=!0},i(i){e||(j(n.$$.fragment,i),e=!0)},o(i){V(n.$$.fragment,i),e=!1},d(i){fe(n,i)}}}function Xd(t){let n,e,i;function r(a){t[17](a)}let s={};return t[0]!==void 0&&(s.saveSlot=t[0]),n=new zd({props:s}),Re.push(()=>kt(n,"saveSlot",r)),{c(){le(n.$$.fragment)},l(a){ce(n.$$.fragment,a)},m(a,o){ue(n,a,o),i=!0},p(a,o){const u={};!e&&o&1&&(e=!0,u.saveSlot=a[0],yt(()=>e=!1)),n.$set(u)},i(a){i||(j(n.$$.fragment,a),i=!0)},o(a){V(n.$$.fragment,a),i=!1},d(a){fe(n,a)}}}function Wd(t){let n,e,i,r;function s(u){t[19](u)}function a(u){t[20](u)}let o={viewport:t[7]};return t[5]!==void 0&&(o.visible=t[5]),t[8]!==void 0&&(o.bookmarks=t[8]),n=new Nd({props:o}),Re.push(()=>kt(n,"visible",s)),Re.push(()=>kt(n,"bookmarks",a)),{c(){le(n.$$.fragment)},l(u){ce(n.$$.fragment,u)},m(u,l){ue(n,u,l),r=!0},p(u,l){const f={};l&128&&(f.viewport=u[7]),!e&&l&32&&(e=!0,f.visible=u[5],yt(()=>e=!1)),!i&&l&256&&(i=!0,f.bookmarks=u[8],yt(()=>i=!1)),n.$set(f)},i(u){r||(j(n.$$.fragment,u),r=!0)},o(u){V(n.$$.fragment,u),r=!1},d(u){fe(n,u)}}}function Gd(t){let n,e,i,r,s,a,o,u,l,f,p,m,d,b,w,y,S,v,M,T,O,Y,E,D,A,k,F,U,K,ie,q,_e,we,Me,je;function te(N){t[9](N)}function Ne(N){t[10](N)}function Ze(N){t[11](N)}let It={saveSlot:t[0]};t[6]!==void 0&&(It.world=t[6]),t[7]!==void 0&&(It.viewport=t[7]),t[8]!==void 0&&(It.bookmarks=t[8]),i=new Ch({props:It}),Re.push(()=>kt(i,"world",te)),Re.push(()=>kt(i,"viewport",Ne)),Re.push(()=>kt(i,"bookmarks",Ze)),m=new Rh({}),w=new Vd({}),v=new Bd({}),Y=new wd({props:{layout:t[1],world:t[6]}});function tt(N){t[16](N)}let I={$$slots:{default:[Yd]},$$scope:{ctx:t}};t[3]!==void 0&&(I.visible=t[3]),A=new or({props:I}),Re.push(()=>kt(A,"visible",tt));function H(N){t[18](N)}let J={$$slots:{default:[Xd]},$$scope:{ctx:t}};t[4]!==void 0&&(J.visible=t[4]),U=new or({props:J}),Re.push(()=>kt(U,"visible",H));function be(N){t[21](N)}let re={$$slots:{default:[Wd]},$$scope:{ctx:t}};return t[5]!==void 0&&(re.visible=t[5]),q=new or({props:re}),Re.push(()=>kt(q,"visible",be)),{c(){n=R("div"),e=R("div"),le(i.$$.fragment),o=ae(),u=R("div"),l=R("div"),f=R("div"),p=R("button"),le(m.$$.fragment),d=ae(),b=R("button"),le(w.$$.fragment),y=ae(),S=R("button"),le(v.$$.fragment),M=ae(),T=R("div"),O=ae(),le(Y.$$.fragment),D=ae(),le(A.$$.fragment),F=ae(),le(U.$$.fragment),ie=ae(),le(q.$$.fragment),this.h()},l(N){n=L(N,"DIV",{class:!0});var W=Z(n);e=L(W,"DIV",{class:!0});var Te=Z(e);ce(i.$$.fragment,Te),Te.forEach(x),o=oe(W),u=L(W,"DIV",{class:!0});var Xe=Z(u);l=L(Xe,"DIV",{class:!0});var We=Z(l);f=L(We,"DIV",{class:!0});var Ee=Z(f);p=L(Ee,"BUTTON",{class:!0,title:!0});var Ae=Z(p);ce(m.$$.fragment,Ae),Ae.forEach(x),d=oe(Ee),b=L(Ee,"BUTTON",{class:!0,title:!0});var rt=Z(b);ce(w.$$.fragment,rt),rt.forEach(x),y=oe(Ee),S=L(Ee,"BUTTON",{class:!0,title:!0});var hn=Z(S);ce(v.$$.fragment,hn),hn.forEach(x),M=oe(Ee),T=L(Ee,"DIV",{class:!0}),Z(T).forEach(x),O=oe(Ee),ce(Y.$$.fragment,Ee),Ee.forEach(x),We.forEach(x),Xe.forEach(x),W.forEach(x),D=oe(N),ce(A.$$.fragment,N),F=oe(N),ce(U.$$.fragment,N),ie=oe(N),ce(q.$$.fragment,N),this.h()},h(){B(e,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1"),B(p,"class","rounded-full drop-shadow-sm"),B(p,"title","Information"),B(b,"class","rounded-full drop-shadow-sm"),B(b,"title","Settings"),B(S,"class","rounded-full drop-shadow-sm"),B(S,"title","Bookmarks"),B(T,"class","w-full h-full bg-white rounded-full p-[1px]"),B(f,"class","pointer-events-auto flex items-center gap-2 rounded-full bg-white bg-opacity-30 backdrop-blur-md shadow-lg text-white font-bold stroke-[3]"),qe(f,"flex-direction",t[1]=="vertical"?"column":"row"),qe(f,"padding",t[1]=="vertical"?"1rem 0.5rem":"0.5rem 1rem"),B(l,"class","w-full h-full flex items-center p-4"),qe(l,"flex-direction",t[1]=="vertical"?"row":"column"),qe(l,"justify-content",t[2]=="start"?"start":"end"),B(u,"class","w-full h-full col-start-1 col-end-1 row-start-1 row-end-1 pointer-events-none"),qe(u,"opacity",t[3]||t[4]||t[5]?0:1),B(n,"class","w-screen h-screen grid grid-cols-1 grid-rows-1")},m(N,W){X(N,n,W),$(n,e),ue(i,e,null),$(n,o),$(n,u),$(u,l),$(l,f),$(f,p),ue(m,p,null),$(f,d),$(f,b),ue(w,b,null),$(f,y),$(f,S),ue(v,S,null),$(f,M),$(f,T),$(f,O),ue(Y,f,null),X(N,D,W),ue(A,N,W),X(N,F,W),ue(U,N,W),X(N,ie,W),ue(q,N,W),we=!0,Me||(je=[ge(p,"click",t[12]),ge(b,"click",t[13]),ge(S,"click",t[14]),Ia(E=Oo.call(null,u,t[15]))],Me=!0)},p(N,[W]){const Te={};W&1&&(Te.saveSlot=N[0]),!r&&W&64&&(r=!0,Te.world=N[6],yt(()=>r=!1)),!s&&W&128&&(s=!0,Te.viewport=N[7],yt(()=>s=!1)),!a&&W&256&&(a=!0,Te.bookmarks=N[8],yt(()=>a=!1)),i.$set(Te);const Xe={};W&2&&(Xe.layout=N[1]),W&64&&(Xe.world=N[6]),Y.$set(Xe),W&2&&qe(f,"flex-direction",N[1]=="vertical"?"column":"row"),W&2&&qe(f,"padding",N[1]=="vertical"?"1rem 0.5rem":"0.5rem 1rem"),W&2&&qe(l,"flex-direction",N[1]=="vertical"?"row":"column"),W&4&&qe(l,"justify-content",N[2]=="start"?"start":"end"),E&&Pa(E.update)&&W&6&&E.update.call(null,N[15]),W&56&&qe(u,"opacity",N[3]||N[4]||N[5]?0:1);const We={};W&8388608&&(We.$$scope={dirty:W,ctx:N}),!k&&W&8&&(k=!0,We.visible=N[3],yt(()=>k=!1)),A.$set(We);const Ee={};W&8388609&&(Ee.$$scope={dirty:W,ctx:N}),!K&&W&16&&(K=!0,Ee.visible=N[4],yt(()=>K=!1)),U.$set(Ee);const Ae={};W&8389024&&(Ae.$$scope={dirty:W,ctx:N}),!_e&&W&32&&(_e=!0,Ae.visible=N[5],yt(()=>_e=!1)),q.$set(Ae)},i(N){we||(j(i.$$.fragment,N),j(m.$$.fragment,N),j(w.$$.fragment,N),j(v.$$.fragment,N),j(Y.$$.fragment,N),j(A.$$.fragment,N),j(U.$$.fragment,N),j(q.$$.fragment,N),we=!0)},o(N){V(i.$$.fragment,N),V(m.$$.fragment,N),V(w.$$.fragment,N),V(v.$$.fragment,N),V(Y.$$.fragment,N),V(A.$$.fragment,N),V(U.$$.fragment,N),V(q.$$.fragment,N),we=!1},d(N){N&&(x(n),x(D),x(F),x(ie)),fe(i),fe(m),fe(w),fe(v),fe(Y),fe(A,N),fe(U,N),fe(q,N),Me=!1,sn(je)}}}function Kd(t,n,e){let i;zt(t,kr,k=>e(22,i=k));let r="save",s="vertical",a="end",o=!1,u=!1,l=!1,f,p,m=[];_i(()=>{i&&e(3,o=!0)});function d(k){f=k,e(6,f)}function b(k){p=k,e(7,p)}function w(k){m=k,e(8,m)}const y=()=>e(3,o=!0),S=()=>e(4,u=!0),v=()=>e(5,l=!0),M=(k,F)=>{e(1,s=k>F?"vertical":"horizontal"),e(2,a=k>F?"end":"start")};function T(k){o=k,e(3,o)}function O(k){r=k,e(0,r)}function Y(k){u=k,e(4,u)}function E(k){l=k,e(5,l)}function D(k){m=k,e(8,m)}function A(k){l=k,e(5,l)}return[r,s,a,o,u,l,f,p,m,d,b,w,y,S,v,M,T,O,Y,E,D,A]}class e0 extends ye{constructor(n){super(),ke(this,n,Kd,Gd,ve,{})}}export{e0 as component};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5CaUh4N2l2Vi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9pbnRlcm5hbC9lYWNoLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9pbnRlcm5hbC9zcHJlYWQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2dhbWUvQ29uc3RhbnRzLnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9STkcudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi90cmVlcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2FkbGVyMzIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9jcmMzMi5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL21lc3NhZ2VzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvY29uc3RhbnRzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvZGVmbGF0ZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi91dGlscy9jb21tb24uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGFrby9saWIvdXRpbHMvc3RyaW5ncy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL3pzdHJlYW0uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGFrby9saWIvZGVmbGF0ZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2luZmZhc3QuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9pbmZ0cmVlcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2luZmxhdGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9nemhlYWRlci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wYWtvL2xpYi9pbmZsYXRlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bha28vaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmludHlwZS9kaXN0L0lPLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JpbnR5cGUvZGlzdC9VdGlsLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2pzLWJhc2U2NC9iYXNlNjQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmludHlwZS9kaXN0L1BhcnNlci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iaW50eXBlL2Rpc3QvcGFyc2VyL01vZGlmeUhhc2guanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmludHlwZS9kaXN0L3BhcnNlci9CaWdJbnQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmludHlwZS9kaXN0L3BhcnNlci9CaW5hcnkuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmludHlwZS9kaXN0L3BhcnNlci9OdW1iZXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmludHlwZS9kaXN0L3BhcnNlci9TdHJpbmcuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmludHlwZS9kaXN0L3BhcnNlci9Cb29sZWFuLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JpbnR5cGUvZGlzdC9wYXJzZXIvTnVsbGFibGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmludHlwZS9kaXN0L3BhcnNlci9PYmplY3QuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmludHlwZS9kaXN0L3BhcnNlci9BcnJheS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iaW50eXBlL2Rpc3QvcGFyc2VyL01hcC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iaW50eXBlL2Rpc3QvcGFyc2VyL0RhdGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmludHlwZS9kaXN0L3BhcnNlci9UdXBsZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iaW50eXBlL2Rpc3QvcGFyc2VyL0JyYW5jaC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iaW50eXBlL2Rpc3QvcGFyc2VyL0JyYW5jaEJ5S2V5LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JpbnR5cGUvZGlzdC9wYXJzZXIvRW51bS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iaW50eXBlL2Rpc3QvcGFyc2VyL0VudW1GYWxsYmFjay5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iaW50eXBlL2Rpc3QvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL1V0aWwudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2dhbWUvdGlsZS9UaWxlLnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9nYW1lL3RpbGUvTXVsdGlNaW5lLnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9nYW1lL3RpbGUvYmlvbWUvQmx1ZWJlcnJ5LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9nYW1lL3RpbGUvU2luZ2xlTWluZS50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvZ2FtZS90aWxlL2Jpb21lL0Nob2NvbGF0ZS50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvZ2FtZS90aWxlL2Jpb21lL1N0cmF3YmVycnkudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2dhbWUvdGlsZS9iaW9tZS9XYWZmbGUudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2dhbWUvdGlsZS9iaW9tZS9TdHJvb3B3YWZlbC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvZ2FtZS90aWxlL2Jpb21lL1ZhbmlsbGEudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2dhbWUvdGlsZS9TaW5nbGVBbnRpTWluZS50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvZ2FtZS90aWxlL2Jpb21lL0Nvb2tpZXNBbmRDcmVhbS50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvZ2FtZS9HZW5lcmF0b3IudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2dhbWUvQ2h1bmsudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL0V2ZW50RGlzcGF0Y2hlci50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvZ2FtZS9Xb3JsZC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvZ2FtZS9WaWV3cG9ydC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvZ2FtZS9TYXZlLnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9hY3Rpb25zL1Jlc2l6ZS50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvZ2FtZS9Xb3JsZFJlbmRlcmVyLnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9nYW1lL3BhcnRpY2xlL1BhcnRpY2xlLnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9nYW1lL3BhcnRpY2xlL0V4cGxvc2lvbi50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvZ2FtZS9wYXJ0aWNsZS9GYWtlVGlsZS50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvZ2FtZS9wYXJ0aWNsZS9GbGFnLnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9nYW1lL3BhcnRpY2xlL1RpbGVSZXZlYWwudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2dhbWUvUGFydGljbGVSZW5kZXJlci50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2NvbnRyb2xsZXIvTW91c2VDb250cm9sbGVyLnN2ZWx0ZSIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9oYW1tZXJqcy9oYW1tZXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9jb250cm9sbGVyL1RvdWNoQ29udHJvbGxlci5zdmVsdGUiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9jb250cm9sbGVyL0NvbnRyb2xsZXIuc3ZlbHRlIiwiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL3N0b3JlLnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvUmVuZGVyZXIuc3ZlbHRlIiwiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9BdGxhcy50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvZ2FtZS90aGVtZS9UaGVtZS50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvZ2FtZS90aGVtZS9yZXRyby50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0dhbWUuc3ZlbHRlIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2x1Y2lkZS1zdmVsdGUvZGlzdC9kZWZhdWx0QXR0cmlidXRlcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sdWNpZGUtc3ZlbHRlL2Rpc3QvSWNvbi5zdmVsdGUiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbHVjaWRlLXN2ZWx0ZS9kaXN0L2ljb25zL2luZm8uc3ZlbHRlIiwiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvTW9kYWwuc3ZlbHRlIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2x1Y2lkZS1zdmVsdGUvZGlzdC9pY29ucy9jaGV2cm9uLWxlZnQuc3ZlbHRlIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2x1Y2lkZS1zdmVsdGUvZGlzdC9pY29ucy9jaGV2cm9uLXJpZ2h0LnN2ZWx0ZSIsIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0luZm9Nb2RhbEJpb21lcy5zdmVsdGUiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9JbmZvTW9kYWwuc3ZlbHRlIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2x1Y2lkZS1zdmVsdGUvZGlzdC9pY29ucy9za3VsbC5zdmVsdGUiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9EZWF0aENvdW50ZXIuc3ZlbHRlIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2x1Y2lkZS1zdmVsdGUvZGlzdC9pY29ucy9wbHVzLnN2ZWx0ZSIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sdWNpZGUtc3ZlbHRlL2Rpc3QvaWNvbnMvYm9va21hcmstbWludXMuc3ZlbHRlIiwiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvQm9va21hcmtzTW9kYWwuc3ZlbHRlIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2x1Y2lkZS1zdmVsdGUvZGlzdC9pY29ucy9ib29rbWFyay5zdmVsdGUiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9TZXR0aW5nc01vZGFsLnN2ZWx0ZSIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sdWNpZGUtc3ZlbHRlL2Rpc3QvaWNvbnMvc2V0dGluZ3Muc3ZlbHRlIiwiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL3JvdXRlcy8rcGFnZS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHJhbnNpdGlvbl9pbiwgdHJhbnNpdGlvbl9vdXQgfSBmcm9tICcuL3RyYW5zaXRpb25zLmpzJztcbmltcG9ydCB7IHJ1bl9hbGwgfSBmcm9tICcuL3V0aWxzLmpzJztcblxuLy8gZ2VuZXJhbCBlYWNoIGZ1bmN0aW9uczpcblxuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZV9hcnJheV9saWtlKGFycmF5X2xpa2Vfb3JfaXRlcmF0b3IpIHtcblx0cmV0dXJuIGFycmF5X2xpa2Vfb3JfaXRlcmF0b3I/Lmxlbmd0aCAhPT0gdW5kZWZpbmVkXG5cdFx0PyBhcnJheV9saWtlX29yX2l0ZXJhdG9yXG5cdFx0OiBBcnJheS5mcm9tKGFycmF5X2xpa2Vfb3JfaXRlcmF0b3IpO1xufVxuXG4vLyBrZXllZCBlYWNoIGZ1bmN0aW9uczpcblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuXHRibG9jay5kKDEpO1xuXHRsb29rdXAuZGVsZXRlKGJsb2NrLmtleSk7XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBvdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG5cdHRyYW5zaXRpb25fb3V0KGJsb2NrLCAxLCAxLCAoKSA9PiB7XG5cdFx0bG9va3VwLmRlbGV0ZShibG9jay5rZXkpO1xuXHR9KTtcbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpeF9hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG5cdGJsb2NrLmYoKTtcblx0ZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKTtcbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpeF9hbmRfb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuXHRibG9jay5mKCk7XG5cdG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApO1xufVxuXG4vKiogQHJldHVybnMge2FueVtdfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9rZXllZF9lYWNoKFxuXHRvbGRfYmxvY2tzLFxuXHRkaXJ0eSxcblx0Z2V0X2tleSxcblx0ZHluYW1pYyxcblx0Y3R4LFxuXHRsaXN0LFxuXHRsb29rdXAsXG5cdG5vZGUsXG5cdGRlc3Ryb3ksXG5cdGNyZWF0ZV9lYWNoX2Jsb2NrLFxuXHRuZXh0LFxuXHRnZXRfY29udGV4dFxuKSB7XG5cdGxldCBvID0gb2xkX2Jsb2Nrcy5sZW5ndGg7XG5cdGxldCBuID0gbGlzdC5sZW5ndGg7XG5cdGxldCBpID0gbztcblx0Y29uc3Qgb2xkX2luZGV4ZXMgPSB7fTtcblx0d2hpbGUgKGktLSkgb2xkX2luZGV4ZXNbb2xkX2Jsb2Nrc1tpXS5rZXldID0gaTtcblx0Y29uc3QgbmV3X2Jsb2NrcyA9IFtdO1xuXHRjb25zdCBuZXdfbG9va3VwID0gbmV3IE1hcCgpO1xuXHRjb25zdCBkZWx0YXMgPSBuZXcgTWFwKCk7XG5cdGNvbnN0IHVwZGF0ZXMgPSBbXTtcblx0aSA9IG47XG5cdHdoaWxlIChpLS0pIHtcblx0XHRjb25zdCBjaGlsZF9jdHggPSBnZXRfY29udGV4dChjdHgsIGxpc3QsIGkpO1xuXHRcdGNvbnN0IGtleSA9IGdldF9rZXkoY2hpbGRfY3R4KTtcblx0XHRsZXQgYmxvY2sgPSBsb29rdXAuZ2V0KGtleSk7XG5cdFx0aWYgKCFibG9jaykge1xuXHRcdFx0YmxvY2sgPSBjcmVhdGVfZWFjaF9ibG9jayhrZXksIGNoaWxkX2N0eCk7XG5cdFx0XHRibG9jay5jKCk7XG5cdFx0fSBlbHNlIGlmIChkeW5hbWljKSB7XG5cdFx0XHQvLyBkZWZlciB1cGRhdGVzIHVudGlsIGFsbCB0aGUgRE9NIHNodWZmbGluZyBpcyBkb25lXG5cdFx0XHR1cGRhdGVzLnB1c2goKCkgPT4gYmxvY2sucChjaGlsZF9jdHgsIGRpcnR5KSk7XG5cdFx0fVxuXHRcdG5ld19sb29rdXAuc2V0KGtleSwgKG5ld19ibG9ja3NbaV0gPSBibG9jaykpO1xuXHRcdGlmIChrZXkgaW4gb2xkX2luZGV4ZXMpIGRlbHRhcy5zZXQoa2V5LCBNYXRoLmFicyhpIC0gb2xkX2luZGV4ZXNba2V5XSkpO1xuXHR9XG5cdGNvbnN0IHdpbGxfbW92ZSA9IG5ldyBTZXQoKTtcblx0Y29uc3QgZGlkX21vdmUgPSBuZXcgU2V0KCk7XG5cdC8qKiBAcmV0dXJucyB7dm9pZH0gKi9cblx0ZnVuY3Rpb24gaW5zZXJ0KGJsb2NrKSB7XG5cdFx0dHJhbnNpdGlvbl9pbihibG9jaywgMSk7XG5cdFx0YmxvY2subShub2RlLCBuZXh0KTtcblx0XHRsb29rdXAuc2V0KGJsb2NrLmtleSwgYmxvY2spO1xuXHRcdG5leHQgPSBibG9jay5maXJzdDtcblx0XHRuLS07XG5cdH1cblx0d2hpbGUgKG8gJiYgbikge1xuXHRcdGNvbnN0IG5ld19ibG9jayA9IG5ld19ibG9ja3NbbiAtIDFdO1xuXHRcdGNvbnN0IG9sZF9ibG9jayA9IG9sZF9ibG9ja3NbbyAtIDFdO1xuXHRcdGNvbnN0IG5ld19rZXkgPSBuZXdfYmxvY2sua2V5O1xuXHRcdGNvbnN0IG9sZF9rZXkgPSBvbGRfYmxvY2sua2V5O1xuXHRcdGlmIChuZXdfYmxvY2sgPT09IG9sZF9ibG9jaykge1xuXHRcdFx0Ly8gZG8gbm90aGluZ1xuXHRcdFx0bmV4dCA9IG5ld19ibG9jay5maXJzdDtcblx0XHRcdG8tLTtcblx0XHRcdG4tLTtcblx0XHR9IGVsc2UgaWYgKCFuZXdfbG9va3VwLmhhcyhvbGRfa2V5KSkge1xuXHRcdFx0Ly8gcmVtb3ZlIG9sZCBibG9ja1xuXHRcdFx0ZGVzdHJveShvbGRfYmxvY2ssIGxvb2t1cCk7XG5cdFx0XHRvLS07XG5cdFx0fSBlbHNlIGlmICghbG9va3VwLmhhcyhuZXdfa2V5KSB8fCB3aWxsX21vdmUuaGFzKG5ld19rZXkpKSB7XG5cdFx0XHRpbnNlcnQobmV3X2Jsb2NrKTtcblx0XHR9IGVsc2UgaWYgKGRpZF9tb3ZlLmhhcyhvbGRfa2V5KSkge1xuXHRcdFx0by0tO1xuXHRcdH0gZWxzZSBpZiAoZGVsdGFzLmdldChuZXdfa2V5KSA+IGRlbHRhcy5nZXQob2xkX2tleSkpIHtcblx0XHRcdGRpZF9tb3ZlLmFkZChuZXdfa2V5KTtcblx0XHRcdGluc2VydChuZXdfYmxvY2spO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aWxsX21vdmUuYWRkKG9sZF9rZXkpO1xuXHRcdFx0by0tO1xuXHRcdH1cblx0fVxuXHR3aGlsZSAoby0tKSB7XG5cdFx0Y29uc3Qgb2xkX2Jsb2NrID0gb2xkX2Jsb2Nrc1tvXTtcblx0XHRpZiAoIW5ld19sb29rdXAuaGFzKG9sZF9ibG9jay5rZXkpKSBkZXN0cm95KG9sZF9ibG9jaywgbG9va3VwKTtcblx0fVxuXHR3aGlsZSAobikgaW5zZXJ0KG5ld19ibG9ja3NbbiAtIDFdKTtcblx0cnVuX2FsbCh1cGRhdGVzKTtcblx0cmV0dXJuIG5ld19ibG9ja3M7XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZV9lYWNoX2tleXMoY3R4LCBsaXN0LCBnZXRfY29udGV4dCwgZ2V0X2tleSkge1xuXHRjb25zdCBrZXlzID0gbmV3IE1hcCgpO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHRjb25zdCBrZXkgPSBnZXRfa2V5KGdldF9jb250ZXh0KGN0eCwgbGlzdCwgaSkpO1xuXHRcdGlmIChrZXlzLmhhcyhrZXkpKSB7XG5cdFx0XHRsZXQgdmFsdWUgPSAnJztcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHZhbHVlID0gYHdpdGggdmFsdWUgJyR7U3RyaW5nKGtleSl9JyBgO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHQvLyBjYW4ndCBzdHJpbmdpZnlcblx0XHRcdH1cblx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0YENhbm5vdCBoYXZlIGR1cGxpY2F0ZSBrZXlzIGluIGEga2V5ZWQgZWFjaDogS2V5cyBhdCBpbmRleCAke2tleXMuZ2V0KFxuXHRcdFx0XHRcdGtleVxuXHRcdFx0XHQpfSBhbmQgJHtpfSAke3ZhbHVlfWFyZSBkdXBsaWNhdGVzYFxuXHRcdFx0KTtcblx0XHR9XG5cdFx0a2V5cy5zZXQoa2V5LCBpKTtcblx0fVxufVxuIiwiLyoqIEByZXR1cm5zIHt7fX0gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRfc3ByZWFkX3VwZGF0ZShsZXZlbHMsIHVwZGF0ZXMpIHtcblx0Y29uc3QgdXBkYXRlID0ge307XG5cdGNvbnN0IHRvX251bGxfb3V0ID0ge307XG5cdGNvbnN0IGFjY291bnRlZF9mb3IgPSB7ICQkc2NvcGU6IDEgfTtcblx0bGV0IGkgPSBsZXZlbHMubGVuZ3RoO1xuXHR3aGlsZSAoaS0tKSB7XG5cdFx0Y29uc3QgbyA9IGxldmVsc1tpXTtcblx0XHRjb25zdCBuID0gdXBkYXRlc1tpXTtcblx0XHRpZiAobikge1xuXHRcdFx0Zm9yIChjb25zdCBrZXkgaW4gbykge1xuXHRcdFx0XHRpZiAoIShrZXkgaW4gbikpIHRvX251bGxfb3V0W2tleV0gPSAxO1xuXHRcdFx0fVxuXHRcdFx0Zm9yIChjb25zdCBrZXkgaW4gbikge1xuXHRcdFx0XHRpZiAoIWFjY291bnRlZF9mb3Jba2V5XSkge1xuXHRcdFx0XHRcdHVwZGF0ZVtrZXldID0gbltrZXldO1xuXHRcdFx0XHRcdGFjY291bnRlZF9mb3Jba2V5XSA9IDE7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGxldmVsc1tpXSA9IG47XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoY29uc3Qga2V5IGluIG8pIHtcblx0XHRcdFx0YWNjb3VudGVkX2ZvcltrZXldID0gMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0Zm9yIChjb25zdCBrZXkgaW4gdG9fbnVsbF9vdXQpIHtcblx0XHRpZiAoIShrZXkgaW4gdXBkYXRlKSkgdXBkYXRlW2tleV0gPSB1bmRlZmluZWQ7XG5cdH1cblx0cmV0dXJuIHVwZGF0ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldF9zcHJlYWRfb2JqZWN0KHNwcmVhZF9wcm9wcykge1xuXHRyZXR1cm4gdHlwZW9mIHNwcmVhZF9wcm9wcyA9PT0gJ29iamVjdCcgJiYgc3ByZWFkX3Byb3BzICE9PSBudWxsID8gc3ByZWFkX3Byb3BzIDoge307XG59XG4iLCJcblxuXG5leHBvcnQgY29uc3QgQ0hVTktfU0laRSA9IDY0O1xuIiwiXG5cblxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTIxMjk1I2Fuc3dlci00NzU5MzMxNlxuLyoqXG4gKiBAcGFyYW0gbm9ybWFsUmFuZ2UgSWYgdG8gcmV0dXJuIDAtMSByYW5nZSBpbnN0ZWFkIG9mIDAtMHhGRkZGRkZGRlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRtaXgzMihhOiBudW1iZXIsIG5vcm1hbFJhbmdlOiBib29sZWFuKTogKCkgPT4gbnVtYmVyIHtcbiAgICByZXR1cm4gKCk6IG51bWJlciA9PiB7XG4gICAgICAgIGEgfD0gMDtcbiAgICAgICAgYSA9IGEgKyAweDlFMzc3OUI5IHwgMDtcbiAgICAgICAgbGV0IHQgPSBhIF4gYSA+Pj4gMTY7XG4gICAgICAgIHQgPSBNYXRoLmltdWwodCwgMHgyMUYwQUFBRCk7XG4gICAgICAgIHQgPSB0IF4gdCA+Pj4gMTU7XG4gICAgICAgIHQgPSBNYXRoLmltdWwodCwgMHg3MzVBMkQ5Nyk7XG4gICAgICAgIGNvbnN0IHYgPSAodCA9IHQgXiB0ID4+PiAxNSkgPj4+IDA7XG4gICAgICAgIHJldHVybiAobm9ybWFsUmFuZ2UgPyAodiAvIDQyOTQ5NjcyOTYpIDogdik7XG4gICAgfVxufVxuXG4vKipcbiAqIEByZXR1cm5zIEhhc2ggdmFsdWUgYmV0d2VlbiAwIGFuZCAxXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNoTm9ybWFsKHNlZWQ6IG51bWJlciwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlcik6IG51bWJlciB7XG4gICAgLy8gVE9ETzogV2hhdCBhcmUgdGhlIG9wdGltYWwgdmFsdWVzIGZvciBoZXJlP1xuICAgIHggPSAgICAoeCAgICAqIDI2NTQ0MzU3NjEpICYgMHg3RkZGRkZGRjtcbiAgICB5ID0gICAgKHkgICAgKiAyMjQ2ODIyNTE5KSAmIDB4N0ZGRkZGRkY7XG4gICAgeiA9ICAgICh6ICAgICogMzI2NjQ4OTkxNykgJiAweDdGRkZGRkZGO1xuICAgIHNlZWQgPSAoc2VlZCAqIDY2ODI2NTI2MyApICYgMHg3RkZGRkZGRjtcblxuICAgIGxldCBoYXNoVmFsdWUgPSB4IF4geSBeIHogXiBzZWVkO1xuICAgIGhhc2hWYWx1ZSA9IGhhc2hWYWx1ZSAqIDM3NDc2MTM5MyArIDB4OUUzNzc5Qjk7XG4gICAgaGFzaFZhbHVlIF49IGhhc2hWYWx1ZSA8PCAxMztcbiAgICBoYXNoVmFsdWUgXj0gaGFzaFZhbHVlID4+IDE3O1xuICAgIGhhc2hWYWx1ZSBePSBoYXNoVmFsdWUgPDwgNTtcblxuICAgIHJldHVybiAoaGFzaFZhbHVlID4+PiAwKSAvIDB4MTAwMDAwMDAwO1xufVxuXG5mdW5jdGlvbiB3ZWlnaHRJbmRleCh3ZWlnaHRzOiBudW1iZXJbXSwgdmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgdmFsdWUgKj0gd2VpZ2h0cy5yZWR1Y2UoKHRvdGFsLCB3ZWlnaHQpID0+IHRvdGFsICsgd2VpZ2h0LCAwKTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgd2VpZ2h0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YWx1ZSAtPSB3ZWlnaHRzW2ldO1xuICAgICAgICBpZih2YWx1ZSA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgd2VpZ2h0cycpO1xufVxuXG4vKipcbiAqIEByZXR1cm5zIFdlaWdodCBpbmRleFxuICovXG5leHBvcnQgZnVuY3Rpb24gdm9yb25vaV9ub2lzZTJkKHNlZWQ6IG51bWJlciwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHdlaWdodHM6IG51bWJlcltdKTogbnVtYmVyIHtcbiAgICBsZXQgY2xvc2VzdERpc3QgPSBJbmZpbml0eTtcbiAgICBsZXQgY2xvc2VzdFR5cGUgPSAtMTtcblxuICAgIGZvciAobGV0IGkgPSBNYXRoLmZsb29yKHgpIC0gMTsgaSA8IE1hdGguY2VpbCh4KSArIDE7IGkrKykge1xuICAgICAgICBmb3IgKGxldCBqID0gTWF0aC5mbG9vcih5KSAtIDE7IGogPCBNYXRoLmNlaWwoeSkgKyAxOyBqKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50WCA9IGkgKyBoYXNoTm9ybWFsKHNlZWQsIGksIGosIDApIC0gMC41O1xuICAgICAgICAgICAgY29uc3QgcG9pbnRZID0gaiArIGhhc2hOb3JtYWwoc2VlZCwgaSwgaiwgMSkgLSAwLjU7XG5cbiAgICAgICAgICAgIGNvbnN0IGRpc3QgPSAocG9pbnRYIC0geCkqKjIgKyAocG9pbnRZIC0geSkqKjI7XG5cbiAgICAgICAgICAgIGlmKGRpc3QgPCBjbG9zZXN0RGlzdCkge1xuICAgICAgICAgICAgICAgIGNsb3Nlc3REaXN0ID0gZGlzdDtcbiAgICAgICAgICAgICAgICBjbG9zZXN0VHlwZSA9IHdlaWdodEluZGV4KHdlaWdodHMsIGhhc2hOb3JtYWwoc2VlZCwgaSwgaiwgMikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYoY2xvc2VzdFR5cGUgPT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdWb3Jvbm9pIG5vaXNlIGVycm9yLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjbG9zZXN0VHlwZTtcbn1cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBwZXJsaW5fbm9pc2UyZChzZWVkOiBudW1iZXIsIHg6IG51bWJlciwgeTogbnVtYmVyKTogbnVtYmVyIHtcblxuICAgIGZ1bmN0aW9uIGludGVycG9sYXRlKGEwOiBudW1iZXIsIGExOiBudW1iZXIsIHc6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIC8vIHJldHVybiAoYTEgLSBhMCkgKiB3ICsgYTA7XG4gICAgICAgIC8vIHJldHVybiAoYTEgLSBhMCkgKiAoMy4wIC0gdyAqIDIuMCkgKiB3ICogdyArIGEwO1xuICAgICAgICByZXR1cm4gKGExIC0gYTApICogKCh3ICogKHcgKiA2LjAgLSAxNS4wKSArIDEwLjApICogdyAqIHcgKiB3KSArIGEwO1xuICAgIH1cblxuICAgIGNvbnN0IHJhbmRvbUdyYWRpZW50ID0gKHg6IG51bWJlciwgeTogbnVtYmVyKTogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9ID0+IHtcbiAgICAgICAgY29uc3QgYW5nbGUgPSBoYXNoTm9ybWFsKHNlZWQsIHgsIHksIDApO1xuICAgICAgICByZXR1cm4geyB4OiBNYXRoLmNvcyhhbmdsZSksIHk6IE1hdGguc2luKGFuZ2xlKSB9O1xuICAgIH1cblxuICAgIGNvbnN0IGRvdEdyaWRHcmFkaWVudCA9IChpeDogbnVtYmVyLCBpeTogbnVtYmVyLCB4OiBudW1iZXIsIHk6IG51bWJlcik6IG51bWJlciA9PiB7XG4gICAgICAgIGNvbnN0IGdyYWRpZW50ID0gcmFuZG9tR3JhZGllbnQoaXgsIGl5KTtcbiAgICAgICAgY29uc3QgZHggPSB4IC0gaXg7XG4gICAgICAgIGNvbnN0IGR5ID0geSAtIGl5O1xuICAgICAgICByZXR1cm4gZHggKiBncmFkaWVudC54ICsgZHkgKiBncmFkaWVudC55O1xuICAgIH1cblxuICAgIGNvbnN0IHgwID0gTWF0aC5mbG9vcih4KTtcbiAgICBjb25zdCB4MSA9IHgwICsgMTtcbiAgICBjb25zdCB5MCA9IE1hdGguZmxvb3IoeSk7XG4gICAgY29uc3QgeTEgPSB5MCArIDE7XG5cbiAgICBjb25zdCBzeCA9IHggLSB4MDtcbiAgICBjb25zdCBzeSA9IHkgLSB5MDtcblxuICAgIGNvbnN0IHZhbHVlID0gaW50ZXJwb2xhdGUoXG4gICAgICAgIGludGVycG9sYXRlKFxuICAgICAgICAgICAgZG90R3JpZEdyYWRpZW50KHgwLCB5MCwgeCwgeSksXG4gICAgICAgICAgICBkb3RHcmlkR3JhZGllbnQoeDEsIHkwLCB4LCB5KSxcbiAgICAgICAgICAgIHN4XG4gICAgICAgICksXG4gICAgICAgIGludGVycG9sYXRlKFxuICAgICAgICAgICAgZG90R3JpZEdyYWRpZW50KHgwLCB5MSwgeCwgeSksXG4gICAgICAgICAgICBkb3RHcmlkR3JhZGllbnQoeDEsIHkxLCB4LCB5KSxcbiAgICAgICAgICAgIHN4XG4gICAgICAgICksXG4gICAgICAgIHN5XG4gICAgKTtcblxuICAgIHJldHVybiB2YWx1ZTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG4vKiBlc2xpbnQtZGlzYWJsZSBzcGFjZS11bmFyeS1vcHMgKi9cblxuLyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuLy9jb25zdCBaX0ZJTFRFUkVEICAgICAgICAgID0gMTtcbi8vY29uc3QgWl9IVUZGTUFOX09OTFkgICAgICA9IDI7XG4vL2NvbnN0IFpfUkxFICAgICAgICAgICAgICAgPSAzO1xuY29uc3QgWl9GSVhFRCAgICAgICAgICAgICAgID0gNDtcbi8vY29uc3QgWl9ERUZBVUxUX1NUUkFURUdZICA9IDA7XG5cbi8qIFBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi9cbmNvbnN0IFpfQklOQVJZICAgICAgICAgICAgICA9IDA7XG5jb25zdCBaX1RFWFQgICAgICAgICAgICAgICAgPSAxO1xuLy9jb25zdCBaX0FTQ0lJICAgICAgICAgICAgID0gMTsgLy8gPSBaX1RFWFRcbmNvbnN0IFpfVU5LTk9XTiAgICAgICAgICAgICA9IDI7XG5cbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuZnVuY3Rpb24gemVybyhidWYpIHsgbGV0IGxlbiA9IGJ1Zi5sZW5ndGg7IHdoaWxlICgtLWxlbiA+PSAwKSB7IGJ1ZltsZW5dID0gMDsgfSB9XG5cbi8vIEZyb20genV0aWwuaFxuXG5jb25zdCBTVE9SRURfQkxPQ0sgPSAwO1xuY29uc3QgU1RBVElDX1RSRUVTID0gMTtcbmNvbnN0IERZTl9UUkVFUyAgICA9IDI7XG4vKiBUaGUgdGhyZWUga2luZHMgb2YgYmxvY2sgdHlwZSAqL1xuXG5jb25zdCBNSU5fTUFUQ0ggICAgPSAzO1xuY29uc3QgTUFYX01BVENIICAgID0gMjU4O1xuLyogVGhlIG1pbmltdW0gYW5kIG1heGltdW0gbWF0Y2ggbGVuZ3RocyAqL1xuXG4vLyBGcm9tIGRlZmxhdGUuaFxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBJbnRlcm5hbCBjb21wcmVzc2lvbiBzdGF0ZS5cbiAqL1xuXG5jb25zdCBMRU5HVEhfQ09ERVMgID0gMjk7XG4vKiBudW1iZXIgb2YgbGVuZ3RoIGNvZGVzLCBub3QgY291bnRpbmcgdGhlIHNwZWNpYWwgRU5EX0JMT0NLIGNvZGUgKi9cblxuY29uc3QgTElURVJBTFMgICAgICA9IDI1Njtcbi8qIG51bWJlciBvZiBsaXRlcmFsIGJ5dGVzIDAuLjI1NSAqL1xuXG5jb25zdCBMX0NPREVTICAgICAgID0gTElURVJBTFMgKyAxICsgTEVOR1RIX0NPREVTO1xuLyogbnVtYmVyIG9mIExpdGVyYWwgb3IgTGVuZ3RoIGNvZGVzLCBpbmNsdWRpbmcgdGhlIEVORF9CTE9DSyBjb2RlICovXG5cbmNvbnN0IERfQ09ERVMgICAgICAgPSAzMDtcbi8qIG51bWJlciBvZiBkaXN0YW5jZSBjb2RlcyAqL1xuXG5jb25zdCBCTF9DT0RFUyAgICAgID0gMTk7XG4vKiBudW1iZXIgb2YgY29kZXMgdXNlZCB0byB0cmFuc2ZlciB0aGUgYml0IGxlbmd0aHMgKi9cblxuY29uc3QgSEVBUF9TSVpFICAgICA9IDIgKiBMX0NPREVTICsgMTtcbi8qIG1heGltdW0gaGVhcCBzaXplICovXG5cbmNvbnN0IE1BWF9CSVRTICAgICAgPSAxNTtcbi8qIEFsbCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JJVFMgYml0cyAqL1xuXG5jb25zdCBCdWZfc2l6ZSAgICAgID0gMTY7XG4vKiBzaXplIG9mIGJpdCBidWZmZXIgaW4gYmlfYnVmICovXG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCBNQVhfQkxfQklUUyA9IDc7XG4vKiBCaXQgbGVuZ3RoIGNvZGVzIG11c3Qgbm90IGV4Y2VlZCBNQVhfQkxfQklUUyBiaXRzICovXG5cbmNvbnN0IEVORF9CTE9DSyAgID0gMjU2O1xuLyogZW5kIG9mIGJsb2NrIGxpdGVyYWwgY29kZSAqL1xuXG5jb25zdCBSRVBfM182ICAgICA9IDE2O1xuLyogcmVwZWF0IHByZXZpb3VzIGJpdCBsZW5ndGggMy02IHRpbWVzICgyIGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG5jb25zdCBSRVBaXzNfMTAgICA9IDE3O1xuLyogcmVwZWF0IGEgemVybyBsZW5ndGggMy0xMCB0aW1lcyAgKDMgYml0cyBvZiByZXBlYXQgY291bnQpICovXG5cbmNvbnN0IFJFUFpfMTFfMTM4ID0gMTg7XG4vKiByZXBlYXQgYSB6ZXJvIGxlbmd0aCAxMS0xMzggdGltZXMgICg3IGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBjb21tYS1zcGFjaW5nLGFycmF5LWJyYWNrZXQtc3BhY2luZyAqL1xuY29uc3QgZXh0cmFfbGJpdHMgPSAgIC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggbGVuZ3RoIGNvZGUgKi9cbiAgbmV3IFVpbnQ4QXJyYXkoWzAsMCwwLDAsMCwwLDAsMCwxLDEsMSwxLDIsMiwyLDIsMywzLDMsMyw0LDQsNCw0LDUsNSw1LDUsMF0pO1xuXG5jb25zdCBleHRyYV9kYml0cyA9ICAgLyogZXh0cmEgYml0cyBmb3IgZWFjaCBkaXN0YW5jZSBjb2RlICovXG4gIG5ldyBVaW50OEFycmF5KFswLDAsMCwwLDEsMSwyLDIsMywzLDQsNCw1LDUsNiw2LDcsNyw4LDgsOSw5LDEwLDEwLDExLDExLDEyLDEyLDEzLDEzXSk7XG5cbmNvbnN0IGV4dHJhX2JsYml0cyA9ICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGJpdCBsZW5ndGggY29kZSAqL1xuICBuZXcgVWludDhBcnJheShbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyLDMsN10pO1xuXG5jb25zdCBibF9vcmRlciA9XG4gIG5ldyBVaW50OEFycmF5KFsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XSk7XG4vKiBlc2xpbnQtZW5hYmxlIGNvbW1hLXNwYWNpbmcsYXJyYXktYnJhY2tldC1zcGFjaW5nICovXG5cbi8qIFRoZSBsZW5ndGhzIG9mIHRoZSBiaXQgbGVuZ3RoIGNvZGVzIGFyZSBzZW50IGluIG9yZGVyIG9mIGRlY3JlYXNpbmdcbiAqIHByb2JhYmlsaXR5LCB0byBhdm9pZCB0cmFuc21pdHRpbmcgdGhlIGxlbmd0aHMgZm9yIHVudXNlZCBiaXQgbGVuZ3RoIGNvZGVzLlxuICovXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogTG9jYWwgZGF0YS4gVGhlc2UgYXJlIGluaXRpYWxpemVkIG9ubHkgb25jZS5cbiAqL1xuXG4vLyBXZSBwcmUtZmlsbCBhcnJheXMgd2l0aCAwIHRvIGF2b2lkIHVuaW5pdGlhbGl6ZWQgZ2Fwc1xuXG5jb25zdCBESVNUX0NPREVfTEVOID0gNTEyOyAvKiBzZWUgZGVmaW5pdGlvbiBvZiBhcnJheSBkaXN0X2NvZGUgYmVsb3cgKi9cblxuLy8gISEhISBVc2UgZmxhdCBhcnJheSBpbnN0ZWFkIG9mIHN0cnVjdHVyZSwgRnJlcSA9IGkqMiwgTGVuID0gaSoyKzFcbmNvbnN0IHN0YXRpY19sdHJlZSAgPSBuZXcgQXJyYXkoKExfQ09ERVMgKyAyKSAqIDIpO1xuemVybyhzdGF0aWNfbHRyZWUpO1xuLyogVGhlIHN0YXRpYyBsaXRlcmFsIHRyZWUuIFNpbmNlIHRoZSBiaXQgbGVuZ3RocyBhcmUgaW1wb3NlZCwgdGhlcmUgaXMgbm9cbiAqIG5lZWQgZm9yIHRoZSBMX0NPREVTIGV4dHJhIGNvZGVzIHVzZWQgZHVyaW5nIGhlYXAgY29uc3RydWN0aW9uLiBIb3dldmVyXG4gKiBUaGUgY29kZXMgMjg2IGFuZCAyODcgYXJlIG5lZWRlZCB0byBidWlsZCBhIGNhbm9uaWNhbCB0cmVlIChzZWUgX3RyX2luaXRcbiAqIGJlbG93KS5cbiAqL1xuXG5jb25zdCBzdGF0aWNfZHRyZWUgID0gbmV3IEFycmF5KERfQ09ERVMgKiAyKTtcbnplcm8oc3RhdGljX2R0cmVlKTtcbi8qIFRoZSBzdGF0aWMgZGlzdGFuY2UgdHJlZS4gKEFjdHVhbGx5IGEgdHJpdmlhbCB0cmVlIHNpbmNlIGFsbCBjb2RlcyB1c2VcbiAqIDUgYml0cy4pXG4gKi9cblxuY29uc3QgX2Rpc3RfY29kZSAgICA9IG5ldyBBcnJheShESVNUX0NPREVfTEVOKTtcbnplcm8oX2Rpc3RfY29kZSk7XG4vKiBEaXN0YW5jZSBjb2Rlcy4gVGhlIGZpcnN0IDI1NiB2YWx1ZXMgY29ycmVzcG9uZCB0byB0aGUgZGlzdGFuY2VzXG4gKiAzIC4uIDI1OCwgdGhlIGxhc3QgMjU2IHZhbHVlcyBjb3JyZXNwb25kIHRvIHRoZSB0b3AgOCBiaXRzIG9mXG4gKiB0aGUgMTUgYml0IGRpc3RhbmNlcy5cbiAqL1xuXG5jb25zdCBfbGVuZ3RoX2NvZGUgID0gbmV3IEFycmF5KE1BWF9NQVRDSCAtIE1JTl9NQVRDSCArIDEpO1xuemVybyhfbGVuZ3RoX2NvZGUpO1xuLyogbGVuZ3RoIGNvZGUgZm9yIGVhY2ggbm9ybWFsaXplZCBtYXRjaCBsZW5ndGggKDAgPT0gTUlOX01BVENIKSAqL1xuXG5jb25zdCBiYXNlX2xlbmd0aCAgID0gbmV3IEFycmF5KExFTkdUSF9DT0RFUyk7XG56ZXJvKGJhc2VfbGVuZ3RoKTtcbi8qIEZpcnN0IG5vcm1hbGl6ZWQgbGVuZ3RoIGZvciBlYWNoIGNvZGUgKDAgPSBNSU5fTUFUQ0gpICovXG5cbmNvbnN0IGJhc2VfZGlzdCAgICAgPSBuZXcgQXJyYXkoRF9DT0RFUyk7XG56ZXJvKGJhc2VfZGlzdCk7XG4vKiBGaXJzdCBub3JtYWxpemVkIGRpc3RhbmNlIGZvciBlYWNoIGNvZGUgKDAgPSBkaXN0YW5jZSBvZiAxKSAqL1xuXG5cbmZ1bmN0aW9uIFN0YXRpY1RyZWVEZXNjKHN0YXRpY190cmVlLCBleHRyYV9iaXRzLCBleHRyYV9iYXNlLCBlbGVtcywgbWF4X2xlbmd0aCkge1xuXG4gIHRoaXMuc3RhdGljX3RyZWUgID0gc3RhdGljX3RyZWU7ICAvKiBzdGF0aWMgdHJlZSBvciBOVUxMICovXG4gIHRoaXMuZXh0cmFfYml0cyAgID0gZXh0cmFfYml0czsgICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGNvZGUgb3IgTlVMTCAqL1xuICB0aGlzLmV4dHJhX2Jhc2UgICA9IGV4dHJhX2Jhc2U7ICAgLyogYmFzZSBpbmRleCBmb3IgZXh0cmFfYml0cyAqL1xuICB0aGlzLmVsZW1zICAgICAgICA9IGVsZW1zOyAgICAgICAgLyogbWF4IG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUgdHJlZSAqL1xuICB0aGlzLm1heF9sZW5ndGggICA9IG1heF9sZW5ndGg7ICAgLyogbWF4IGJpdCBsZW5ndGggZm9yIHRoZSBjb2RlcyAqL1xuXG4gIC8vIHNob3cgaWYgYHN0YXRpY190cmVlYCBoYXMgZGF0YSBvciBkdW1teSAtIG5lZWRlZCBmb3IgbW9ub21vcnBoaWMgb2JqZWN0c1xuICB0aGlzLmhhc19zdHJlZSAgICA9IHN0YXRpY190cmVlICYmIHN0YXRpY190cmVlLmxlbmd0aDtcbn1cblxuXG5sZXQgc3RhdGljX2xfZGVzYztcbmxldCBzdGF0aWNfZF9kZXNjO1xubGV0IHN0YXRpY19ibF9kZXNjO1xuXG5cbmZ1bmN0aW9uIFRyZWVEZXNjKGR5bl90cmVlLCBzdGF0X2Rlc2MpIHtcbiAgdGhpcy5keW5fdHJlZSA9IGR5bl90cmVlOyAgICAgLyogdGhlIGR5bmFtaWMgdHJlZSAqL1xuICB0aGlzLm1heF9jb2RlID0gMDsgICAgICAgICAgICAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cbiAgdGhpcy5zdGF0X2Rlc2MgPSBzdGF0X2Rlc2M7ICAgLyogdGhlIGNvcnJlc3BvbmRpbmcgc3RhdGljIHRyZWUgKi9cbn1cblxuXG5cbmNvbnN0IGRfY29kZSA9IChkaXN0KSA9PiB7XG5cbiAgcmV0dXJuIGRpc3QgPCAyNTYgPyBfZGlzdF9jb2RlW2Rpc3RdIDogX2Rpc3RfY29kZVsyNTYgKyAoZGlzdCA+Pj4gNyldO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIE91dHB1dCBhIHNob3J0IExTQiBmaXJzdCBvbiB0aGUgc3RyZWFtLlxuICogSU4gYXNzZXJ0aW9uOiB0aGVyZSBpcyBlbm91Z2ggcm9vbSBpbiBwZW5kaW5nQnVmLlxuICovXG5jb25zdCBwdXRfc2hvcnQgPSAocywgdykgPT4ge1xuLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHcpICYgMHhmZikpO1xuLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHVzaCkodykgPj4gOCkpO1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9ICh3KSAmIDB4ZmY7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gKHcgPj4+IDgpICYgMHhmZjtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIGEgdmFsdWUgb24gYSBnaXZlbiBudW1iZXIgb2YgYml0cy5cbiAqIElOIGFzc2VydGlvbjogbGVuZ3RoIDw9IDE2IGFuZCB2YWx1ZSBmaXRzIGluIGxlbmd0aCBiaXRzLlxuICovXG5jb25zdCBzZW5kX2JpdHMgPSAocywgdmFsdWUsIGxlbmd0aCkgPT4ge1xuXG4gIGlmIChzLmJpX3ZhbGlkID4gKEJ1Zl9zaXplIC0gbGVuZ3RoKSkge1xuICAgIHMuYmlfYnVmIHw9ICh2YWx1ZSA8PCBzLmJpX3ZhbGlkKSAmIDB4ZmZmZjtcbiAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpO1xuICAgIHMuYmlfYnVmID0gdmFsdWUgPj4gKEJ1Zl9zaXplIC0gcy5iaV92YWxpZCk7XG4gICAgcy5iaV92YWxpZCArPSBsZW5ndGggLSBCdWZfc2l6ZTtcbiAgfSBlbHNlIHtcbiAgICBzLmJpX2J1ZiB8PSAodmFsdWUgPDwgcy5iaV92YWxpZCkgJiAweGZmZmY7XG4gICAgcy5iaV92YWxpZCArPSBsZW5ndGg7XG4gIH1cbn07XG5cblxuY29uc3Qgc2VuZF9jb2RlID0gKHMsIGMsIHRyZWUpID0+IHtcblxuICBzZW5kX2JpdHMocywgdHJlZVtjICogMl0vKi5Db2RlKi8sIHRyZWVbYyAqIDIgKyAxXS8qLkxlbiovKTtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBSZXZlcnNlIHRoZSBmaXJzdCBsZW4gYml0cyBvZiBhIGNvZGUsIHVzaW5nIHN0cmFpZ2h0Zm9yd2FyZCBjb2RlIChhIGZhc3RlclxuICogbWV0aG9kIHdvdWxkIHVzZSBhIHRhYmxlKVxuICogSU4gYXNzZXJ0aW9uOiAxIDw9IGxlbiA8PSAxNVxuICovXG5jb25zdCBiaV9yZXZlcnNlID0gKGNvZGUsIGxlbikgPT4ge1xuXG4gIGxldCByZXMgPSAwO1xuICBkbyB7XG4gICAgcmVzIHw9IGNvZGUgJiAxO1xuICAgIGNvZGUgPj4+PSAxO1xuICAgIHJlcyA8PD0gMTtcbiAgfSB3aGlsZSAoLS1sZW4gPiAwKTtcbiAgcmV0dXJuIHJlcyA+Pj4gMTtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGbHVzaCB0aGUgYml0IGJ1ZmZlciwga2VlcGluZyBhdCBtb3N0IDcgYml0cyBpbiBpdC5cbiAqL1xuY29uc3QgYmlfZmx1c2ggPSAocykgPT4ge1xuXG4gIGlmIChzLmJpX3ZhbGlkID09PSAxNikge1xuICAgIHB1dF9zaG9ydChzLCBzLmJpX2J1Zik7XG4gICAgcy5iaV9idWYgPSAwO1xuICAgIHMuYmlfdmFsaWQgPSAwO1xuXG4gIH0gZWxzZSBpZiAocy5iaV92YWxpZCA+PSA4KSB7XG4gICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBzLmJpX2J1ZiAmIDB4ZmY7XG4gICAgcy5iaV9idWYgPj49IDg7XG4gICAgcy5iaV92YWxpZCAtPSA4O1xuICB9XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29tcHV0ZSB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RocyBmb3IgYSB0cmVlIGFuZCB1cGRhdGUgdGhlIHRvdGFsIGJpdCBsZW5ndGhcbiAqIGZvciB0aGUgY3VycmVudCBibG9jay5cbiAqIElOIGFzc2VydGlvbjogdGhlIGZpZWxkcyBmcmVxIGFuZCBkYWQgYXJlIHNldCwgaGVhcFtoZWFwX21heF0gYW5kXG4gKiAgICBhYm92ZSBhcmUgdGhlIHRyZWUgbm9kZXMgc29ydGVkIGJ5IGluY3JlYXNpbmcgZnJlcXVlbmN5LlxuICogT1VUIGFzc2VydGlvbnM6IHRoZSBmaWVsZCBsZW4gaXMgc2V0IHRvIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGgsIHRoZVxuICogICAgIGFycmF5IGJsX2NvdW50IGNvbnRhaW5zIHRoZSBmcmVxdWVuY2llcyBmb3IgZWFjaCBiaXQgbGVuZ3RoLlxuICogICAgIFRoZSBsZW5ndGggb3B0X2xlbiBpcyB1cGRhdGVkOyBzdGF0aWNfbGVuIGlzIGFsc28gdXBkYXRlZCBpZiBzdHJlZSBpc1xuICogICAgIG5vdCBudWxsLlxuICovXG5jb25zdCBnZW5fYml0bGVuID0gKHMsIGRlc2MpID0+IHtcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICB0cmVlX2Rlc2MgKmRlc2M7ICAgIC8qIHRoZSB0cmVlIGRlc2NyaXB0b3IgKi9cblxuICBjb25zdCB0cmVlICAgICAgICAgICAgPSBkZXNjLmR5bl90cmVlO1xuICBjb25zdCBtYXhfY29kZSAgICAgICAgPSBkZXNjLm1heF9jb2RlO1xuICBjb25zdCBzdHJlZSAgICAgICAgICAgPSBkZXNjLnN0YXRfZGVzYy5zdGF0aWNfdHJlZTtcbiAgY29uc3QgaGFzX3N0cmVlICAgICAgID0gZGVzYy5zdGF0X2Rlc2MuaGFzX3N0cmVlO1xuICBjb25zdCBleHRyYSAgICAgICAgICAgPSBkZXNjLnN0YXRfZGVzYy5leHRyYV9iaXRzO1xuICBjb25zdCBiYXNlICAgICAgICAgICAgPSBkZXNjLnN0YXRfZGVzYy5leHRyYV9iYXNlO1xuICBjb25zdCBtYXhfbGVuZ3RoICAgICAgPSBkZXNjLnN0YXRfZGVzYy5tYXhfbGVuZ3RoO1xuICBsZXQgaDsgICAgICAgICAgICAgIC8qIGhlYXAgaW5kZXggKi9cbiAgbGV0IG4sIG07ICAgICAgICAgICAvKiBpdGVyYXRlIG92ZXIgdGhlIHRyZWUgZWxlbWVudHMgKi9cbiAgbGV0IGJpdHM7ICAgICAgICAgICAvKiBiaXQgbGVuZ3RoICovXG4gIGxldCB4Yml0czsgICAgICAgICAgLyogZXh0cmEgYml0cyAqL1xuICBsZXQgZjsgICAgICAgICAgICAgIC8qIGZyZXF1ZW5jeSAqL1xuICBsZXQgb3ZlcmZsb3cgPSAwOyAgIC8qIG51bWJlciBvZiBlbGVtZW50cyB3aXRoIGJpdCBsZW5ndGggdG9vIGxhcmdlICovXG5cbiAgZm9yIChiaXRzID0gMDsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7XG4gICAgcy5ibF9jb3VudFtiaXRzXSA9IDA7XG4gIH1cblxuICAvKiBJbiBhIGZpcnN0IHBhc3MsIGNvbXB1dGUgdGhlIG9wdGltYWwgYml0IGxlbmd0aHMgKHdoaWNoIG1heVxuICAgKiBvdmVyZmxvdyBpbiB0aGUgY2FzZSBvZiB0aGUgYml0IGxlbmd0aCB0cmVlKS5cbiAgICovXG4gIHRyZWVbcy5oZWFwW3MuaGVhcF9tYXhdICogMiArIDFdLyouTGVuKi8gPSAwOyAvKiByb290IG9mIHRoZSBoZWFwICovXG5cbiAgZm9yIChoID0gcy5oZWFwX21heCArIDE7IGggPCBIRUFQX1NJWkU7IGgrKykge1xuICAgIG4gPSBzLmhlYXBbaF07XG4gICAgYml0cyA9IHRyZWVbdHJlZVtuICogMiArIDFdLyouRGFkKi8gKiAyICsgMV0vKi5MZW4qLyArIDE7XG4gICAgaWYgKGJpdHMgPiBtYXhfbGVuZ3RoKSB7XG4gICAgICBiaXRzID0gbWF4X2xlbmd0aDtcbiAgICAgIG92ZXJmbG93Kys7XG4gICAgfVxuICAgIHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gYml0cztcbiAgICAvKiBXZSBvdmVyd3JpdGUgdHJlZVtuXS5EYWQgd2hpY2ggaXMgbm8gbG9uZ2VyIG5lZWRlZCAqL1xuXG4gICAgaWYgKG4gPiBtYXhfY29kZSkgeyBjb250aW51ZTsgfSAvKiBub3QgYSBsZWFmIG5vZGUgKi9cblxuICAgIHMuYmxfY291bnRbYml0c10rKztcbiAgICB4Yml0cyA9IDA7XG4gICAgaWYgKG4gPj0gYmFzZSkge1xuICAgICAgeGJpdHMgPSBleHRyYVtuIC0gYmFzZV07XG4gICAgfVxuICAgIGYgPSB0cmVlW24gKiAyXS8qLkZyZXEqLztcbiAgICBzLm9wdF9sZW4gKz0gZiAqIChiaXRzICsgeGJpdHMpO1xuICAgIGlmIChoYXNfc3RyZWUpIHtcbiAgICAgIHMuc3RhdGljX2xlbiArPSBmICogKHN0cmVlW24gKiAyICsgMV0vKi5MZW4qLyArIHhiaXRzKTtcbiAgICB9XG4gIH1cbiAgaWYgKG92ZXJmbG93ID09PSAwKSB7IHJldHVybjsgfVxuXG4gIC8vIFRyYWNldigoc3RkZXJyLFwiXFxuYml0IGxlbmd0aCBvdmVyZmxvd1xcblwiKSk7XG4gIC8qIFRoaXMgaGFwcGVucyBmb3IgZXhhbXBsZSBvbiBvYmoyIGFuZCBwaWMgb2YgdGhlIENhbGdhcnkgY29ycHVzICovXG5cbiAgLyogRmluZCB0aGUgZmlyc3QgYml0IGxlbmd0aCB3aGljaCBjb3VsZCBpbmNyZWFzZTogKi9cbiAgZG8ge1xuICAgIGJpdHMgPSBtYXhfbGVuZ3RoIC0gMTtcbiAgICB3aGlsZSAocy5ibF9jb3VudFtiaXRzXSA9PT0gMCkgeyBiaXRzLS07IH1cbiAgICBzLmJsX2NvdW50W2JpdHNdLS07ICAgICAgLyogbW92ZSBvbmUgbGVhZiBkb3duIHRoZSB0cmVlICovXG4gICAgcy5ibF9jb3VudFtiaXRzICsgMV0gKz0gMjsgLyogbW92ZSBvbmUgb3ZlcmZsb3cgaXRlbSBhcyBpdHMgYnJvdGhlciAqL1xuICAgIHMuYmxfY291bnRbbWF4X2xlbmd0aF0tLTtcbiAgICAvKiBUaGUgYnJvdGhlciBvZiB0aGUgb3ZlcmZsb3cgaXRlbSBhbHNvIG1vdmVzIG9uZSBzdGVwIHVwLFxuICAgICAqIGJ1dCB0aGlzIGRvZXMgbm90IGFmZmVjdCBibF9jb3VudFttYXhfbGVuZ3RoXVxuICAgICAqL1xuICAgIG92ZXJmbG93IC09IDI7XG4gIH0gd2hpbGUgKG92ZXJmbG93ID4gMCk7XG5cbiAgLyogTm93IHJlY29tcHV0ZSBhbGwgYml0IGxlbmd0aHMsIHNjYW5uaW5nIGluIGluY3JlYXNpbmcgZnJlcXVlbmN5LlxuICAgKiBoIGlzIHN0aWxsIGVxdWFsIHRvIEhFQVBfU0laRS4gKEl0IGlzIHNpbXBsZXIgdG8gcmVjb25zdHJ1Y3QgYWxsXG4gICAqIGxlbmd0aHMgaW5zdGVhZCBvZiBmaXhpbmcgb25seSB0aGUgd3Jvbmcgb25lcy4gVGhpcyBpZGVhIGlzIHRha2VuXG4gICAqIGZyb20gJ2FyJyB3cml0dGVuIGJ5IEhhcnVoaWtvIE9rdW11cmEuKVxuICAgKi9cbiAgZm9yIChiaXRzID0gbWF4X2xlbmd0aDsgYml0cyAhPT0gMDsgYml0cy0tKSB7XG4gICAgbiA9IHMuYmxfY291bnRbYml0c107XG4gICAgd2hpbGUgKG4gIT09IDApIHtcbiAgICAgIG0gPSBzLmhlYXBbLS1oXTtcbiAgICAgIGlmIChtID4gbWF4X2NvZGUpIHsgY29udGludWU7IH1cbiAgICAgIGlmICh0cmVlW20gKiAyICsgMV0vKi5MZW4qLyAhPT0gYml0cykge1xuICAgICAgICAvLyBUcmFjZXYoKHN0ZGVycixcImNvZGUgJWQgYml0cyAlZC0+JWRcXG5cIiwgbSwgdHJlZVttXS5MZW4sIGJpdHMpKTtcbiAgICAgICAgcy5vcHRfbGVuICs9IChiaXRzIC0gdHJlZVttICogMiArIDFdLyouTGVuKi8pICogdHJlZVttICogMl0vKi5GcmVxKi87XG4gICAgICAgIHRyZWVbbSAqIDIgKyAxXS8qLkxlbiovID0gYml0cztcbiAgICAgIH1cbiAgICAgIG4tLTtcbiAgICB9XG4gIH1cbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBHZW5lcmF0ZSB0aGUgY29kZXMgZm9yIGEgZ2l2ZW4gdHJlZSBhbmQgYml0IGNvdW50cyAod2hpY2ggbmVlZCBub3QgYmVcbiAqIG9wdGltYWwpLlxuICogSU4gYXNzZXJ0aW9uOiB0aGUgYXJyYXkgYmxfY291bnQgY29udGFpbnMgdGhlIGJpdCBsZW5ndGggc3RhdGlzdGljcyBmb3JcbiAqIHRoZSBnaXZlbiB0cmVlIGFuZCB0aGUgZmllbGQgbGVuIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMuXG4gKiBPVVQgYXNzZXJ0aW9uOiB0aGUgZmllbGQgY29kZSBpcyBzZXQgZm9yIGFsbCB0cmVlIGVsZW1lbnRzIG9mIG5vblxuICogICAgIHplcm8gY29kZSBsZW5ndGguXG4gKi9cbmNvbnN0IGdlbl9jb2RlcyA9ICh0cmVlLCBtYXhfY29kZSwgYmxfY291bnQpID0+IHtcbi8vICAgIGN0X2RhdGEgKnRyZWU7ICAgICAgICAgICAgIC8qIHRoZSB0cmVlIHRvIGRlY29yYXRlICovXG4vLyAgICBpbnQgbWF4X2NvZGU7ICAgICAgICAgICAgICAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cbi8vICAgIHVzaGYgKmJsX2NvdW50OyAgICAgICAgICAgIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggKi9cblxuICBjb25zdCBuZXh0X2NvZGUgPSBuZXcgQXJyYXkoTUFYX0JJVFMgKyAxKTsgLyogbmV4dCBjb2RlIHZhbHVlIGZvciBlYWNoIGJpdCBsZW5ndGggKi9cbiAgbGV0IGNvZGUgPSAwOyAgICAgICAgICAgICAgLyogcnVubmluZyBjb2RlIHZhbHVlICovXG4gIGxldCBiaXRzOyAgICAgICAgICAgICAgICAgIC8qIGJpdCBpbmRleCAqL1xuICBsZXQgbjsgICAgICAgICAgICAgICAgICAgICAvKiBjb2RlIGluZGV4ICovXG5cbiAgLyogVGhlIGRpc3RyaWJ1dGlvbiBjb3VudHMgYXJlIGZpcnN0IHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGNvZGUgdmFsdWVzXG4gICAqIHdpdGhvdXQgYml0IHJldmVyc2FsLlxuICAgKi9cbiAgZm9yIChiaXRzID0gMTsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7XG4gICAgY29kZSA9IChjb2RlICsgYmxfY291bnRbYml0cyAtIDFdKSA8PCAxO1xuICAgIG5leHRfY29kZVtiaXRzXSA9IGNvZGU7XG4gIH1cbiAgLyogQ2hlY2sgdGhhdCB0aGUgYml0IGNvdW50cyBpbiBibF9jb3VudCBhcmUgY29uc2lzdGVudC4gVGhlIGxhc3QgY29kZVxuICAgKiBtdXN0IGJlIGFsbCBvbmVzLlxuICAgKi9cbiAgLy9Bc3NlcnQgKGNvZGUgKyBibF9jb3VudFtNQVhfQklUU10tMSA9PSAoMTw8TUFYX0JJVFMpLTEsXG4gIC8vICAgICAgICBcImluY29uc2lzdGVudCBiaXQgY291bnRzXCIpO1xuICAvL1RyYWNldigoc3RkZXJyLFwiXFxuZ2VuX2NvZGVzOiBtYXhfY29kZSAlZCBcIiwgbWF4X2NvZGUpKTtcblxuICBmb3IgKG4gPSAwOyAgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgbGV0IGxlbiA9IHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovO1xuICAgIGlmIChsZW4gPT09IDApIHsgY29udGludWU7IH1cbiAgICAvKiBOb3cgcmV2ZXJzZSB0aGUgYml0cyAqL1xuICAgIHRyZWVbbiAqIDJdLyouQ29kZSovID0gYmlfcmV2ZXJzZShuZXh0X2NvZGVbbGVuXSsrLCBsZW4pO1xuXG4gICAgLy9UcmFjZWN2KHRyZWUgIT0gc3RhdGljX2x0cmVlLCAoc3RkZXJyLFwiXFxubiAlM2QgJWMgbCAlMmQgYyAlNHggKCV4KSBcIixcbiAgICAvLyAgICAgbiwgKGlzZ3JhcGgobikgPyBuIDogJyAnKSwgbGVuLCB0cmVlW25dLkNvZGUsIG5leHRfY29kZVtsZW5dLTEpKTtcbiAgfVxufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEluaXRpYWxpemUgdGhlIHZhcmlvdXMgJ2NvbnN0YW50JyB0YWJsZXMuXG4gKi9cbmNvbnN0IHRyX3N0YXRpY19pbml0ID0gKCkgPT4ge1xuXG4gIGxldCBuOyAgICAgICAgLyogaXRlcmF0ZXMgb3ZlciB0cmVlIGVsZW1lbnRzICovXG4gIGxldCBiaXRzOyAgICAgLyogYml0IGNvdW50ZXIgKi9cbiAgbGV0IGxlbmd0aDsgICAvKiBsZW5ndGggdmFsdWUgKi9cbiAgbGV0IGNvZGU7ICAgICAvKiBjb2RlIHZhbHVlICovXG4gIGxldCBkaXN0OyAgICAgLyogZGlzdGFuY2UgaW5kZXggKi9cbiAgY29uc3QgYmxfY291bnQgPSBuZXcgQXJyYXkoTUFYX0JJVFMgKyAxKTtcbiAgLyogbnVtYmVyIG9mIGNvZGVzIGF0IGVhY2ggYml0IGxlbmd0aCBmb3IgYW4gb3B0aW1hbCB0cmVlICovXG5cbiAgLy8gZG8gY2hlY2sgaW4gX3RyX2luaXQoKVxuICAvL2lmIChzdGF0aWNfaW5pdF9kb25lKSByZXR1cm47XG5cbiAgLyogRm9yIHNvbWUgZW1iZWRkZWQgdGFyZ2V0cywgZ2xvYmFsIHZhcmlhYmxlcyBhcmUgbm90IGluaXRpYWxpemVkOiAqL1xuLyojaWZkZWYgTk9fSU5JVF9HTE9CQUxfUE9JTlRFUlNcbiAgc3RhdGljX2xfZGVzYy5zdGF0aWNfdHJlZSA9IHN0YXRpY19sdHJlZTtcbiAgc3RhdGljX2xfZGVzYy5leHRyYV9iaXRzID0gZXh0cmFfbGJpdHM7XG4gIHN0YXRpY19kX2Rlc2Muc3RhdGljX3RyZWUgPSBzdGF0aWNfZHRyZWU7XG4gIHN0YXRpY19kX2Rlc2MuZXh0cmFfYml0cyA9IGV4dHJhX2RiaXRzO1xuICBzdGF0aWNfYmxfZGVzYy5leHRyYV9iaXRzID0gZXh0cmFfYmxiaXRzO1xuI2VuZGlmKi9cblxuICAvKiBJbml0aWFsaXplIHRoZSBtYXBwaW5nIGxlbmd0aCAoMC4uMjU1KSAtPiBsZW5ndGggY29kZSAoMC4uMjgpICovXG4gIGxlbmd0aCA9IDA7XG4gIGZvciAoY29kZSA9IDA7IGNvZGUgPCBMRU5HVEhfQ09ERVMgLSAxOyBjb2RlKyspIHtcbiAgICBiYXNlX2xlbmd0aFtjb2RlXSA9IGxlbmd0aDtcbiAgICBmb3IgKG4gPSAwOyBuIDwgKDEgPDwgZXh0cmFfbGJpdHNbY29kZV0pOyBuKyspIHtcbiAgICAgIF9sZW5ndGhfY29kZVtsZW5ndGgrK10gPSBjb2RlO1xuICAgIH1cbiAgfVxuICAvL0Fzc2VydCAobGVuZ3RoID09IDI1NiwgXCJ0cl9zdGF0aWNfaW5pdDogbGVuZ3RoICE9IDI1NlwiKTtcbiAgLyogTm90ZSB0aGF0IHRoZSBsZW5ndGggMjU1IChtYXRjaCBsZW5ndGggMjU4KSBjYW4gYmUgcmVwcmVzZW50ZWRcbiAgICogaW4gdHdvIGRpZmZlcmVudCB3YXlzOiBjb2RlIDI4NCArIDUgYml0cyBvciBjb2RlIDI4NSwgc28gd2VcbiAgICogb3ZlcndyaXRlIGxlbmd0aF9jb2RlWzI1NV0gdG8gdXNlIHRoZSBiZXN0IGVuY29kaW5nOlxuICAgKi9cbiAgX2xlbmd0aF9jb2RlW2xlbmd0aCAtIDFdID0gY29kZTtcblxuICAvKiBJbml0aWFsaXplIHRoZSBtYXBwaW5nIGRpc3QgKDAuLjMySykgLT4gZGlzdCBjb2RlICgwLi4yOSkgKi9cbiAgZGlzdCA9IDA7XG4gIGZvciAoY29kZSA9IDA7IGNvZGUgPCAxNjsgY29kZSsrKSB7XG4gICAgYmFzZV9kaXN0W2NvZGVdID0gZGlzdDtcbiAgICBmb3IgKG4gPSAwOyBuIDwgKDEgPDwgZXh0cmFfZGJpdHNbY29kZV0pOyBuKyspIHtcbiAgICAgIF9kaXN0X2NvZGVbZGlzdCsrXSA9IGNvZGU7XG4gICAgfVxuICB9XG4gIC8vQXNzZXJ0IChkaXN0ID09IDI1NiwgXCJ0cl9zdGF0aWNfaW5pdDogZGlzdCAhPSAyNTZcIik7XG4gIGRpc3QgPj49IDc7IC8qIGZyb20gbm93IG9uLCBhbGwgZGlzdGFuY2VzIGFyZSBkaXZpZGVkIGJ5IDEyOCAqL1xuICBmb3IgKDsgY29kZSA8IERfQ09ERVM7IGNvZGUrKykge1xuICAgIGJhc2VfZGlzdFtjb2RlXSA9IGRpc3QgPDwgNztcbiAgICBmb3IgKG4gPSAwOyBuIDwgKDEgPDwgKGV4dHJhX2RiaXRzW2NvZGVdIC0gNykpOyBuKyspIHtcbiAgICAgIF9kaXN0X2NvZGVbMjU2ICsgZGlzdCsrXSA9IGNvZGU7XG4gICAgfVxuICB9XG4gIC8vQXNzZXJ0IChkaXN0ID09IDI1NiwgXCJ0cl9zdGF0aWNfaW5pdDogMjU2K2Rpc3QgIT0gNTEyXCIpO1xuXG4gIC8qIENvbnN0cnVjdCB0aGUgY29kZXMgb2YgdGhlIHN0YXRpYyBsaXRlcmFsIHRyZWUgKi9cbiAgZm9yIChiaXRzID0gMDsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7XG4gICAgYmxfY291bnRbYml0c10gPSAwO1xuICB9XG5cbiAgbiA9IDA7XG4gIHdoaWxlIChuIDw9IDE0Mykge1xuICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSA4O1xuICAgIG4rKztcbiAgICBibF9jb3VudFs4XSsrO1xuICB9XG4gIHdoaWxlIChuIDw9IDI1NSkge1xuICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSA5O1xuICAgIG4rKztcbiAgICBibF9jb3VudFs5XSsrO1xuICB9XG4gIHdoaWxlIChuIDw9IDI3OSkge1xuICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSA3O1xuICAgIG4rKztcbiAgICBibF9jb3VudFs3XSsrO1xuICB9XG4gIHdoaWxlIChuIDw9IDI4Nykge1xuICAgIHN0YXRpY19sdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSA4O1xuICAgIG4rKztcbiAgICBibF9jb3VudFs4XSsrO1xuICB9XG4gIC8qIENvZGVzIDI4NiBhbmQgMjg3IGRvIG5vdCBleGlzdCwgYnV0IHdlIG11c3QgaW5jbHVkZSB0aGVtIGluIHRoZVxuICAgKiB0cmVlIGNvbnN0cnVjdGlvbiB0byBnZXQgYSBjYW5vbmljYWwgSHVmZm1hbiB0cmVlIChsb25nZXN0IGNvZGVcbiAgICogYWxsIG9uZXMpXG4gICAqL1xuICBnZW5fY29kZXMoc3RhdGljX2x0cmVlLCBMX0NPREVTICsgMSwgYmxfY291bnQpO1xuXG4gIC8qIFRoZSBzdGF0aWMgZGlzdGFuY2UgdHJlZSBpcyB0cml2aWFsOiAqL1xuICBmb3IgKG4gPSAwOyBuIDwgRF9DT0RFUzsgbisrKSB7XG4gICAgc3RhdGljX2R0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDU7XG4gICAgc3RhdGljX2R0cmVlW24gKiAyXS8qLkNvZGUqLyA9IGJpX3JldmVyc2UobiwgNSk7XG4gIH1cblxuICAvLyBOb3cgZGF0YSByZWFkeSBhbmQgd2UgY2FuIGluaXQgc3RhdGljIHRyZWVzXG4gIHN0YXRpY19sX2Rlc2MgPSBuZXcgU3RhdGljVHJlZURlc2Moc3RhdGljX2x0cmVlLCBleHRyYV9sYml0cywgTElURVJBTFMgKyAxLCBMX0NPREVTLCBNQVhfQklUUyk7XG4gIHN0YXRpY19kX2Rlc2MgPSBuZXcgU3RhdGljVHJlZURlc2Moc3RhdGljX2R0cmVlLCBleHRyYV9kYml0cywgMCwgICAgICAgICAgRF9DT0RFUywgTUFYX0JJVFMpO1xuICBzdGF0aWNfYmxfZGVzYyA9IG5ldyBTdGF0aWNUcmVlRGVzYyhuZXcgQXJyYXkoMCksIGV4dHJhX2JsYml0cywgMCwgICAgICAgICBCTF9DT0RFUywgTUFYX0JMX0JJVFMpO1xuXG4gIC8vc3RhdGljX2luaXRfZG9uZSA9IHRydWU7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSBhIG5ldyBibG9jay5cbiAqL1xuY29uc3QgaW5pdF9ibG9jayA9IChzKSA9PiB7XG5cbiAgbGV0IG47IC8qIGl0ZXJhdGVzIG92ZXIgdHJlZSBlbGVtZW50cyAqL1xuXG4gIC8qIEluaXRpYWxpemUgdGhlIHRyZWVzLiAqL1xuICBmb3IgKG4gPSAwOyBuIDwgTF9DT0RFUzsgIG4rKykgeyBzLmR5bl9sdHJlZVtuICogMl0vKi5GcmVxKi8gPSAwOyB9XG4gIGZvciAobiA9IDA7IG4gPCBEX0NPREVTOyAgbisrKSB7IHMuZHluX2R0cmVlW24gKiAyXS8qLkZyZXEqLyA9IDA7IH1cbiAgZm9yIChuID0gMDsgbiA8IEJMX0NPREVTOyBuKyspIHsgcy5ibF90cmVlW24gKiAyXS8qLkZyZXEqLyA9IDA7IH1cblxuICBzLmR5bl9sdHJlZVtFTkRfQkxPQ0sgKiAyXS8qLkZyZXEqLyA9IDE7XG4gIHMub3B0X2xlbiA9IHMuc3RhdGljX2xlbiA9IDA7XG4gIHMuc3ltX25leHQgPSBzLm1hdGNoZXMgPSAwO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZsdXNoIHRoZSBiaXQgYnVmZmVyIGFuZCBhbGlnbiB0aGUgb3V0cHV0IG9uIGEgYnl0ZSBib3VuZGFyeVxuICovXG5jb25zdCBiaV93aW5kdXAgPSAocykgPT5cbntcbiAgaWYgKHMuYmlfdmFsaWQgPiA4KSB7XG4gICAgcHV0X3Nob3J0KHMsIHMuYmlfYnVmKTtcbiAgfSBlbHNlIGlmIChzLmJpX3ZhbGlkID4gMCkge1xuICAgIC8vcHV0X2J5dGUocywgKEJ5dGUpcy0+YmlfYnVmKTtcbiAgICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IHMuYmlfYnVmO1xuICB9XG4gIHMuYmlfYnVmID0gMDtcbiAgcy5iaV92YWxpZCA9IDA7XG59O1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbXBhcmVzIHRvIHN1YnRyZWVzLCB1c2luZyB0aGUgdHJlZSBkZXB0aCBhcyB0aWUgYnJlYWtlciB3aGVuXG4gKiB0aGUgc3VidHJlZXMgaGF2ZSBlcXVhbCBmcmVxdWVuY3kuIFRoaXMgbWluaW1pemVzIHRoZSB3b3JzdCBjYXNlIGxlbmd0aC5cbiAqL1xuY29uc3Qgc21hbGxlciA9ICh0cmVlLCBuLCBtLCBkZXB0aCkgPT4ge1xuXG4gIGNvbnN0IF9uMiA9IG4gKiAyO1xuICBjb25zdCBfbTIgPSBtICogMjtcbiAgcmV0dXJuICh0cmVlW19uMl0vKi5GcmVxKi8gPCB0cmVlW19tMl0vKi5GcmVxKi8gfHxcbiAgICAgICAgICh0cmVlW19uMl0vKi5GcmVxKi8gPT09IHRyZWVbX20yXS8qLkZyZXEqLyAmJiBkZXB0aFtuXSA8PSBkZXB0aFttXSkpO1xufTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBSZXN0b3JlIHRoZSBoZWFwIHByb3BlcnR5IGJ5IG1vdmluZyBkb3duIHRoZSB0cmVlIHN0YXJ0aW5nIGF0IG5vZGUgayxcbiAqIGV4Y2hhbmdpbmcgYSBub2RlIHdpdGggdGhlIHNtYWxsZXN0IG9mIGl0cyB0d28gc29ucyBpZiBuZWNlc3NhcnksIHN0b3BwaW5nXG4gKiB3aGVuIHRoZSBoZWFwIHByb3BlcnR5IGlzIHJlLWVzdGFibGlzaGVkIChlYWNoIGZhdGhlciBzbWFsbGVyIHRoYW4gaXRzXG4gKiB0d28gc29ucykuXG4gKi9cbmNvbnN0IHBxZG93bmhlYXAgPSAocywgdHJlZSwgaykgPT4ge1xuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGN0X2RhdGEgKnRyZWU7ICAvKiB0aGUgdHJlZSB0byByZXN0b3JlICovXG4vLyAgICBpbnQgazsgICAgICAgICAgICAgICAvKiBub2RlIHRvIG1vdmUgZG93biAqL1xuXG4gIGNvbnN0IHYgPSBzLmhlYXBba107XG4gIGxldCBqID0gayA8PCAxOyAgLyogbGVmdCBzb24gb2YgayAqL1xuICB3aGlsZSAoaiA8PSBzLmhlYXBfbGVuKSB7XG4gICAgLyogU2V0IGogdG8gdGhlIHNtYWxsZXN0IG9mIHRoZSB0d28gc29uczogKi9cbiAgICBpZiAoaiA8IHMuaGVhcF9sZW4gJiZcbiAgICAgIHNtYWxsZXIodHJlZSwgcy5oZWFwW2ogKyAxXSwgcy5oZWFwW2pdLCBzLmRlcHRoKSkge1xuICAgICAgaisrO1xuICAgIH1cbiAgICAvKiBFeGl0IGlmIHYgaXMgc21hbGxlciB0aGFuIGJvdGggc29ucyAqL1xuICAgIGlmIChzbWFsbGVyKHRyZWUsIHYsIHMuaGVhcFtqXSwgcy5kZXB0aCkpIHsgYnJlYWs7IH1cblxuICAgIC8qIEV4Y2hhbmdlIHYgd2l0aCB0aGUgc21hbGxlc3Qgc29uICovXG4gICAgcy5oZWFwW2tdID0gcy5oZWFwW2pdO1xuICAgIGsgPSBqO1xuXG4gICAgLyogQW5kIGNvbnRpbnVlIGRvd24gdGhlIHRyZWUsIHNldHRpbmcgaiB0byB0aGUgbGVmdCBzb24gb2YgayAqL1xuICAgIGogPDw9IDE7XG4gIH1cbiAgcy5oZWFwW2tdID0gdjtcbn07XG5cblxuLy8gaW5saW5lZCBtYW51YWxseVxuLy8gY29uc3QgU01BTExFU1QgPSAxO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgdGhlIGJsb2NrIGRhdGEgY29tcHJlc3NlZCB1c2luZyB0aGUgZ2l2ZW4gSHVmZm1hbiB0cmVlc1xuICovXG5jb25zdCBjb21wcmVzc19ibG9jayA9IChzLCBsdHJlZSwgZHRyZWUpID0+IHtcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBjb25zdCBjdF9kYXRhICpsdHJlZTsgLyogbGl0ZXJhbCB0cmVlICovXG4vLyAgICBjb25zdCBjdF9kYXRhICpkdHJlZTsgLyogZGlzdGFuY2UgdHJlZSAqL1xuXG4gIGxldCBkaXN0OyAgICAgICAgICAgLyogZGlzdGFuY2Ugb2YgbWF0Y2hlZCBzdHJpbmcgKi9cbiAgbGV0IGxjOyAgICAgICAgICAgICAvKiBtYXRjaCBsZW5ndGggb3IgdW5tYXRjaGVkIGNoYXIgKGlmIGRpc3QgPT0gMCkgKi9cbiAgbGV0IHN4ID0gMDsgICAgICAgICAvKiBydW5uaW5nIGluZGV4IGluIHN5bV9idWYgKi9cbiAgbGV0IGNvZGU7ICAgICAgICAgICAvKiB0aGUgY29kZSB0byBzZW5kICovXG4gIGxldCBleHRyYTsgICAgICAgICAgLyogbnVtYmVyIG9mIGV4dHJhIGJpdHMgdG8gc2VuZCAqL1xuXG4gIGlmIChzLnN5bV9uZXh0ICE9PSAwKSB7XG4gICAgZG8ge1xuICAgICAgZGlzdCA9IHMucGVuZGluZ19idWZbcy5zeW1fYnVmICsgc3grK10gJiAweGZmO1xuICAgICAgZGlzdCArPSAocy5wZW5kaW5nX2J1ZltzLnN5bV9idWYgKyBzeCsrXSAmIDB4ZmYpIDw8IDg7XG4gICAgICBsYyA9IHMucGVuZGluZ19idWZbcy5zeW1fYnVmICsgc3grK107XG4gICAgICBpZiAoZGlzdCA9PT0gMCkge1xuICAgICAgICBzZW5kX2NvZGUocywgbGMsIGx0cmVlKTsgLyogc2VuZCBhIGxpdGVyYWwgYnl0ZSAqL1xuICAgICAgICAvL1RyYWNlY3YoaXNncmFwaChsYyksIChzdGRlcnIsXCIgJyVjJyBcIiwgbGMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIEhlcmUsIGxjIGlzIHRoZSBtYXRjaCBsZW5ndGggLSBNSU5fTUFUQ0ggKi9cbiAgICAgICAgY29kZSA9IF9sZW5ndGhfY29kZVtsY107XG4gICAgICAgIHNlbmRfY29kZShzLCBjb2RlICsgTElURVJBTFMgKyAxLCBsdHJlZSk7IC8qIHNlbmQgdGhlIGxlbmd0aCBjb2RlICovXG4gICAgICAgIGV4dHJhID0gZXh0cmFfbGJpdHNbY29kZV07XG4gICAgICAgIGlmIChleHRyYSAhPT0gMCkge1xuICAgICAgICAgIGxjIC09IGJhc2VfbGVuZ3RoW2NvZGVdO1xuICAgICAgICAgIHNlbmRfYml0cyhzLCBsYywgZXh0cmEpOyAgICAgICAvKiBzZW5kIHRoZSBleHRyYSBsZW5ndGggYml0cyAqL1xuICAgICAgICB9XG4gICAgICAgIGRpc3QtLTsgLyogZGlzdCBpcyBub3cgdGhlIG1hdGNoIGRpc3RhbmNlIC0gMSAqL1xuICAgICAgICBjb2RlID0gZF9jb2RlKGRpc3QpO1xuICAgICAgICAvL0Fzc2VydCAoY29kZSA8IERfQ09ERVMsIFwiYmFkIGRfY29kZVwiKTtcblxuICAgICAgICBzZW5kX2NvZGUocywgY29kZSwgZHRyZWUpOyAgICAgICAvKiBzZW5kIHRoZSBkaXN0YW5jZSBjb2RlICovXG4gICAgICAgIGV4dHJhID0gZXh0cmFfZGJpdHNbY29kZV07XG4gICAgICAgIGlmIChleHRyYSAhPT0gMCkge1xuICAgICAgICAgIGRpc3QgLT0gYmFzZV9kaXN0W2NvZGVdO1xuICAgICAgICAgIHNlbmRfYml0cyhzLCBkaXN0LCBleHRyYSk7ICAgLyogc2VuZCB0aGUgZXh0cmEgZGlzdGFuY2UgYml0cyAqL1xuICAgICAgICB9XG4gICAgICB9IC8qIGxpdGVyYWwgb3IgbWF0Y2ggcGFpciA/ICovXG5cbiAgICAgIC8qIENoZWNrIHRoYXQgdGhlIG92ZXJsYXkgYmV0d2VlbiBwZW5kaW5nX2J1ZiBhbmQgc3ltX2J1ZiBpcyBvazogKi9cbiAgICAgIC8vQXNzZXJ0KHMtPnBlbmRpbmcgPCBzLT5saXRfYnVmc2l6ZSArIHN4LCBcInBlbmRpbmdCdWYgb3ZlcmZsb3dcIik7XG5cbiAgICB9IHdoaWxlIChzeCA8IHMuc3ltX25leHQpO1xuICB9XG5cbiAgc2VuZF9jb2RlKHMsIEVORF9CTE9DSywgbHRyZWUpO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbnN0cnVjdCBvbmUgSHVmZm1hbiB0cmVlIGFuZCBhc3NpZ25zIHRoZSBjb2RlIGJpdCBzdHJpbmdzIGFuZCBsZW5ndGhzLlxuICogVXBkYXRlIHRoZSB0b3RhbCBiaXQgbGVuZ3RoIGZvciB0aGUgY3VycmVudCBibG9jay5cbiAqIElOIGFzc2VydGlvbjogdGhlIGZpZWxkIGZyZXEgaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cy5cbiAqIE9VVCBhc3NlcnRpb25zOiB0aGUgZmllbGRzIGxlbiBhbmQgY29kZSBhcmUgc2V0IHRvIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGhcbiAqICAgICBhbmQgY29ycmVzcG9uZGluZyBjb2RlLiBUaGUgbGVuZ3RoIG9wdF9sZW4gaXMgdXBkYXRlZDsgc3RhdGljX2xlbiBpc1xuICogICAgIGFsc28gdXBkYXRlZCBpZiBzdHJlZSBpcyBub3QgbnVsbC4gVGhlIGZpZWxkIG1heF9jb2RlIGlzIHNldC5cbiAqL1xuY29uc3QgYnVpbGRfdHJlZSA9IChzLCBkZXNjKSA9PiB7XG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgdHJlZV9kZXNjICpkZXNjOyAvKiB0aGUgdHJlZSBkZXNjcmlwdG9yICovXG5cbiAgY29uc3QgdHJlZSAgICAgPSBkZXNjLmR5bl90cmVlO1xuICBjb25zdCBzdHJlZSAgICA9IGRlc2Muc3RhdF9kZXNjLnN0YXRpY190cmVlO1xuICBjb25zdCBoYXNfc3RyZWUgPSBkZXNjLnN0YXRfZGVzYy5oYXNfc3RyZWU7XG4gIGNvbnN0IGVsZW1zICAgID0gZGVzYy5zdGF0X2Rlc2MuZWxlbXM7XG4gIGxldCBuLCBtOyAgICAgICAgICAvKiBpdGVyYXRlIG92ZXIgaGVhcCBlbGVtZW50cyAqL1xuICBsZXQgbWF4X2NvZGUgPSAtMTsgLyogbGFyZ2VzdCBjb2RlIHdpdGggbm9uIHplcm8gZnJlcXVlbmN5ICovXG4gIGxldCBub2RlOyAgICAgICAgICAvKiBuZXcgbm9kZSBiZWluZyBjcmVhdGVkICovXG5cbiAgLyogQ29uc3RydWN0IHRoZSBpbml0aWFsIGhlYXAsIHdpdGggbGVhc3QgZnJlcXVlbnQgZWxlbWVudCBpblxuICAgKiBoZWFwW1NNQUxMRVNUXS4gVGhlIHNvbnMgb2YgaGVhcFtuXSBhcmUgaGVhcFsyKm5dIGFuZCBoZWFwWzIqbisxXS5cbiAgICogaGVhcFswXSBpcyBub3QgdXNlZC5cbiAgICovXG4gIHMuaGVhcF9sZW4gPSAwO1xuICBzLmhlYXBfbWF4ID0gSEVBUF9TSVpFO1xuXG4gIGZvciAobiA9IDA7IG4gPCBlbGVtczsgbisrKSB7XG4gICAgaWYgKHRyZWVbbiAqIDJdLyouRnJlcSovICE9PSAwKSB7XG4gICAgICBzLmhlYXBbKytzLmhlYXBfbGVuXSA9IG1heF9jb2RlID0gbjtcbiAgICAgIHMuZGVwdGhbbl0gPSAwO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gMDtcbiAgICB9XG4gIH1cblxuICAvKiBUaGUgcGt6aXAgZm9ybWF0IHJlcXVpcmVzIHRoYXQgYXQgbGVhc3Qgb25lIGRpc3RhbmNlIGNvZGUgZXhpc3RzLFxuICAgKiBhbmQgdGhhdCBhdCBsZWFzdCBvbmUgYml0IHNob3VsZCBiZSBzZW50IGV2ZW4gaWYgdGhlcmUgaXMgb25seSBvbmVcbiAgICogcG9zc2libGUgY29kZS4gU28gdG8gYXZvaWQgc3BlY2lhbCBjaGVja3MgbGF0ZXIgb24gd2UgZm9yY2UgYXQgbGVhc3RcbiAgICogdHdvIGNvZGVzIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeS5cbiAgICovXG4gIHdoaWxlIChzLmhlYXBfbGVuIDwgMikge1xuICAgIG5vZGUgPSBzLmhlYXBbKytzLmhlYXBfbGVuXSA9IChtYXhfY29kZSA8IDIgPyArK21heF9jb2RlIDogMCk7XG4gICAgdHJlZVtub2RlICogMl0vKi5GcmVxKi8gPSAxO1xuICAgIHMuZGVwdGhbbm9kZV0gPSAwO1xuICAgIHMub3B0X2xlbi0tO1xuXG4gICAgaWYgKGhhc19zdHJlZSkge1xuICAgICAgcy5zdGF0aWNfbGVuIC09IHN0cmVlW25vZGUgKiAyICsgMV0vKi5MZW4qLztcbiAgICB9XG4gICAgLyogbm9kZSBpcyAwIG9yIDEgc28gaXQgZG9lcyBub3QgaGF2ZSBleHRyYSBiaXRzICovXG4gIH1cbiAgZGVzYy5tYXhfY29kZSA9IG1heF9jb2RlO1xuXG4gIC8qIFRoZSBlbGVtZW50cyBoZWFwW2hlYXBfbGVuLzIrMSAuLiBoZWFwX2xlbl0gYXJlIGxlYXZlcyBvZiB0aGUgdHJlZSxcbiAgICogZXN0YWJsaXNoIHN1Yi1oZWFwcyBvZiBpbmNyZWFzaW5nIGxlbmd0aHM6XG4gICAqL1xuICBmb3IgKG4gPSAocy5oZWFwX2xlbiA+PiAxLyppbnQgLzIqLyk7IG4gPj0gMTsgbi0tKSB7IHBxZG93bmhlYXAocywgdHJlZSwgbik7IH1cblxuICAvKiBDb25zdHJ1Y3QgdGhlIEh1ZmZtYW4gdHJlZSBieSByZXBlYXRlZGx5IGNvbWJpbmluZyB0aGUgbGVhc3QgdHdvXG4gICAqIGZyZXF1ZW50IG5vZGVzLlxuICAgKi9cbiAgbm9kZSA9IGVsZW1zOyAgICAgICAgICAgICAgLyogbmV4dCBpbnRlcm5hbCBub2RlIG9mIHRoZSB0cmVlICovXG4gIGRvIHtcbiAgICAvL3BxcmVtb3ZlKHMsIHRyZWUsIG4pOyAgLyogbiA9IG5vZGUgb2YgbGVhc3QgZnJlcXVlbmN5ICovXG4gICAgLyoqKiBwcXJlbW92ZSAqKiovXG4gICAgbiA9IHMuaGVhcFsxLypTTUFMTEVTVCovXTtcbiAgICBzLmhlYXBbMS8qU01BTExFU1QqL10gPSBzLmhlYXBbcy5oZWFwX2xlbi0tXTtcbiAgICBwcWRvd25oZWFwKHMsIHRyZWUsIDEvKlNNQUxMRVNUKi8pO1xuICAgIC8qKiovXG5cbiAgICBtID0gcy5oZWFwWzEvKlNNQUxMRVNUKi9dOyAvKiBtID0gbm9kZSBvZiBuZXh0IGxlYXN0IGZyZXF1ZW5jeSAqL1xuXG4gICAgcy5oZWFwWy0tcy5oZWFwX21heF0gPSBuOyAvKiBrZWVwIHRoZSBub2RlcyBzb3J0ZWQgYnkgZnJlcXVlbmN5ICovXG4gICAgcy5oZWFwWy0tcy5oZWFwX21heF0gPSBtO1xuXG4gICAgLyogQ3JlYXRlIGEgbmV3IG5vZGUgZmF0aGVyIG9mIG4gYW5kIG0gKi9cbiAgICB0cmVlW25vZGUgKiAyXS8qLkZyZXEqLyA9IHRyZWVbbiAqIDJdLyouRnJlcSovICsgdHJlZVttICogMl0vKi5GcmVxKi87XG4gICAgcy5kZXB0aFtub2RlXSA9IChzLmRlcHRoW25dID49IHMuZGVwdGhbbV0gPyBzLmRlcHRoW25dIDogcy5kZXB0aFttXSkgKyAxO1xuICAgIHRyZWVbbiAqIDIgKyAxXS8qLkRhZCovID0gdHJlZVttICogMiArIDFdLyouRGFkKi8gPSBub2RlO1xuXG4gICAgLyogYW5kIGluc2VydCB0aGUgbmV3IG5vZGUgaW4gdGhlIGhlYXAgKi9cbiAgICBzLmhlYXBbMS8qU01BTExFU1QqL10gPSBub2RlKys7XG4gICAgcHFkb3duaGVhcChzLCB0cmVlLCAxLypTTUFMTEVTVCovKTtcblxuICB9IHdoaWxlIChzLmhlYXBfbGVuID49IDIpO1xuXG4gIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gcy5oZWFwWzEvKlNNQUxMRVNUKi9dO1xuXG4gIC8qIEF0IHRoaXMgcG9pbnQsIHRoZSBmaWVsZHMgZnJlcSBhbmQgZGFkIGFyZSBzZXQuIFdlIGNhbiBub3dcbiAgICogZ2VuZXJhdGUgdGhlIGJpdCBsZW5ndGhzLlxuICAgKi9cbiAgZ2VuX2JpdGxlbihzLCBkZXNjKTtcblxuICAvKiBUaGUgZmllbGQgbGVuIGlzIG5vdyBzZXQsIHdlIGNhbiBnZW5lcmF0ZSB0aGUgYml0IGNvZGVzICovXG4gIGdlbl9jb2Rlcyh0cmVlLCBtYXhfY29kZSwgcy5ibF9jb3VudCk7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2NhbiBhIGxpdGVyYWwgb3IgZGlzdGFuY2UgdHJlZSB0byBkZXRlcm1pbmUgdGhlIGZyZXF1ZW5jaWVzIG9mIHRoZSBjb2Rlc1xuICogaW4gdGhlIGJpdCBsZW5ndGggdHJlZS5cbiAqL1xuY29uc3Qgc2Nhbl90cmVlID0gKHMsIHRyZWUsIG1heF9jb2RlKSA9PiB7XG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgY3RfZGF0YSAqdHJlZTsgICAvKiB0aGUgdHJlZSB0byBiZSBzY2FubmVkICovXG4vLyAgICBpbnQgbWF4X2NvZGU7ICAgIC8qIGFuZCBpdHMgbGFyZ2VzdCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xuXG4gIGxldCBuOyAgICAgICAgICAgICAgICAgICAgIC8qIGl0ZXJhdGVzIG92ZXIgYWxsIHRyZWUgZWxlbWVudHMgKi9cbiAgbGV0IHByZXZsZW4gPSAtMTsgICAgICAgICAgLyogbGFzdCBlbWl0dGVkIGxlbmd0aCAqL1xuICBsZXQgY3VybGVuOyAgICAgICAgICAgICAgICAvKiBsZW5ndGggb2YgY3VycmVudCBjb2RlICovXG5cbiAgbGV0IG5leHRsZW4gPSB0cmVlWzAgKiAyICsgMV0vKi5MZW4qLzsgLyogbGVuZ3RoIG9mIG5leHQgY29kZSAqL1xuXG4gIGxldCBjb3VudCA9IDA7ICAgICAgICAgICAgIC8qIHJlcGVhdCBjb3VudCBvZiB0aGUgY3VycmVudCBjb2RlICovXG4gIGxldCBtYXhfY291bnQgPSA3OyAgICAgICAgIC8qIG1heCByZXBlYXQgY291bnQgKi9cbiAgbGV0IG1pbl9jb3VudCA9IDQ7ICAgICAgICAgLyogbWluIHJlcGVhdCBjb3VudCAqL1xuXG4gIGlmIChuZXh0bGVuID09PSAwKSB7XG4gICAgbWF4X2NvdW50ID0gMTM4O1xuICAgIG1pbl9jb3VudCA9IDM7XG4gIH1cbiAgdHJlZVsobWF4X2NvZGUgKyAxKSAqIDIgKyAxXS8qLkxlbiovID0gMHhmZmZmOyAvKiBndWFyZCAqL1xuXG4gIGZvciAobiA9IDA7IG4gPD0gbWF4X2NvZGU7IG4rKykge1xuICAgIGN1cmxlbiA9IG5leHRsZW47XG4gICAgbmV4dGxlbiA9IHRyZWVbKG4gKyAxKSAqIDIgKyAxXS8qLkxlbiovO1xuXG4gICAgaWYgKCsrY291bnQgPCBtYXhfY291bnQgJiYgY3VybGVuID09PSBuZXh0bGVuKSB7XG4gICAgICBjb250aW51ZTtcblxuICAgIH0gZWxzZSBpZiAoY291bnQgPCBtaW5fY291bnQpIHtcbiAgICAgIHMuYmxfdHJlZVtjdXJsZW4gKiAyXS8qLkZyZXEqLyArPSBjb3VudDtcblxuICAgIH0gZWxzZSBpZiAoY3VybGVuICE9PSAwKSB7XG5cbiAgICAgIGlmIChjdXJsZW4gIT09IHByZXZsZW4pIHsgcy5ibF90cmVlW2N1cmxlbiAqIDJdLyouRnJlcSovKys7IH1cbiAgICAgIHMuYmxfdHJlZVtSRVBfM182ICogMl0vKi5GcmVxKi8rKztcblxuICAgIH0gZWxzZSBpZiAoY291bnQgPD0gMTApIHtcbiAgICAgIHMuYmxfdHJlZVtSRVBaXzNfMTAgKiAyXS8qLkZyZXEqLysrO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHMuYmxfdHJlZVtSRVBaXzExXzEzOCAqIDJdLyouRnJlcSovKys7XG4gICAgfVxuXG4gICAgY291bnQgPSAwO1xuICAgIHByZXZsZW4gPSBjdXJsZW47XG5cbiAgICBpZiAobmV4dGxlbiA9PT0gMCkge1xuICAgICAgbWF4X2NvdW50ID0gMTM4O1xuICAgICAgbWluX2NvdW50ID0gMztcblxuICAgIH0gZWxzZSBpZiAoY3VybGVuID09PSBuZXh0bGVuKSB7XG4gICAgICBtYXhfY291bnQgPSA2O1xuICAgICAgbWluX2NvdW50ID0gMztcblxuICAgIH0gZWxzZSB7XG4gICAgICBtYXhfY291bnQgPSA3O1xuICAgICAgbWluX2NvdW50ID0gNDtcbiAgICB9XG4gIH1cbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIGEgbGl0ZXJhbCBvciBkaXN0YW5jZSB0cmVlIGluIGNvbXByZXNzZWQgZm9ybSwgdXNpbmcgdGhlIGNvZGVzIGluXG4gKiBibF90cmVlLlxuICovXG5jb25zdCBzZW5kX3RyZWUgPSAocywgdHJlZSwgbWF4X2NvZGUpID0+IHtcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBjdF9kYXRhICp0cmVlOyAvKiB0aGUgdHJlZSB0byBiZSBzY2FubmVkICovXG4vLyAgICBpbnQgbWF4X2NvZGU7ICAgICAgIC8qIGFuZCBpdHMgbGFyZ2VzdCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xuXG4gIGxldCBuOyAgICAgICAgICAgICAgICAgICAgIC8qIGl0ZXJhdGVzIG92ZXIgYWxsIHRyZWUgZWxlbWVudHMgKi9cbiAgbGV0IHByZXZsZW4gPSAtMTsgICAgICAgICAgLyogbGFzdCBlbWl0dGVkIGxlbmd0aCAqL1xuICBsZXQgY3VybGVuOyAgICAgICAgICAgICAgICAvKiBsZW5ndGggb2YgY3VycmVudCBjb2RlICovXG5cbiAgbGV0IG5leHRsZW4gPSB0cmVlWzAgKiAyICsgMV0vKi5MZW4qLzsgLyogbGVuZ3RoIG9mIG5leHQgY29kZSAqL1xuXG4gIGxldCBjb3VudCA9IDA7ICAgICAgICAgICAgIC8qIHJlcGVhdCBjb3VudCBvZiB0aGUgY3VycmVudCBjb2RlICovXG4gIGxldCBtYXhfY291bnQgPSA3OyAgICAgICAgIC8qIG1heCByZXBlYXQgY291bnQgKi9cbiAgbGV0IG1pbl9jb3VudCA9IDQ7ICAgICAgICAgLyogbWluIHJlcGVhdCBjb3VudCAqL1xuXG4gIC8qIHRyZWVbbWF4X2NvZGUrMV0uTGVuID0gLTE7ICovICAvKiBndWFyZCBhbHJlYWR5IHNldCAqL1xuICBpZiAobmV4dGxlbiA9PT0gMCkge1xuICAgIG1heF9jb3VudCA9IDEzODtcbiAgICBtaW5fY291bnQgPSAzO1xuICB9XG5cbiAgZm9yIChuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgY3VybGVuID0gbmV4dGxlbjtcbiAgICBuZXh0bGVuID0gdHJlZVsobiArIDEpICogMiArIDFdLyouTGVuKi87XG5cbiAgICBpZiAoKytjb3VudCA8IG1heF9jb3VudCAmJiBjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8IG1pbl9jb3VudCkge1xuICAgICAgZG8geyBzZW5kX2NvZGUocywgY3VybGVuLCBzLmJsX3RyZWUpOyB9IHdoaWxlICgtLWNvdW50ICE9PSAwKTtcblxuICAgIH0gZWxzZSBpZiAoY3VybGVuICE9PSAwKSB7XG4gICAgICBpZiAoY3VybGVuICE9PSBwcmV2bGVuKSB7XG4gICAgICAgIHNlbmRfY29kZShzLCBjdXJsZW4sIHMuYmxfdHJlZSk7XG4gICAgICAgIGNvdW50LS07XG4gICAgICB9XG4gICAgICAvL0Fzc2VydChjb3VudCA+PSAzICYmIGNvdW50IDw9IDYsIFwiIDNfNj9cIik7XG4gICAgICBzZW5kX2NvZGUocywgUkVQXzNfNiwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDMsIDIpO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8PSAxMCkge1xuICAgICAgc2VuZF9jb2RlKHMsIFJFUFpfM18xMCwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDMsIDMpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbmRfY29kZShzLCBSRVBaXzExXzEzOCwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDExLCA3KTtcbiAgICB9XG5cbiAgICBjb3VudCA9IDA7XG4gICAgcHJldmxlbiA9IGN1cmxlbjtcbiAgICBpZiAobmV4dGxlbiA9PT0gMCkge1xuICAgICAgbWF4X2NvdW50ID0gMTM4O1xuICAgICAgbWluX2NvdW50ID0gMztcblxuICAgIH0gZWxzZSBpZiAoY3VybGVuID09PSBuZXh0bGVuKSB7XG4gICAgICBtYXhfY291bnQgPSA2O1xuICAgICAgbWluX2NvdW50ID0gMztcblxuICAgIH0gZWxzZSB7XG4gICAgICBtYXhfY291bnQgPSA3O1xuICAgICAgbWluX2NvdW50ID0gNDtcbiAgICB9XG4gIH1cbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb25zdHJ1Y3QgdGhlIEh1ZmZtYW4gdHJlZSBmb3IgdGhlIGJpdCBsZW5ndGhzIGFuZCByZXR1cm4gdGhlIGluZGV4IGluXG4gKiBibF9vcmRlciBvZiB0aGUgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgdG8gc2VuZC5cbiAqL1xuY29uc3QgYnVpbGRfYmxfdHJlZSA9IChzKSA9PiB7XG5cbiAgbGV0IG1heF9ibGluZGV4OyAgLyogaW5kZXggb2YgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgb2Ygbm9uIHplcm8gZnJlcSAqL1xuXG4gIC8qIERldGVybWluZSB0aGUgYml0IGxlbmd0aCBmcmVxdWVuY2llcyBmb3IgbGl0ZXJhbCBhbmQgZGlzdGFuY2UgdHJlZXMgKi9cbiAgc2Nhbl90cmVlKHMsIHMuZHluX2x0cmVlLCBzLmxfZGVzYy5tYXhfY29kZSk7XG4gIHNjYW5fdHJlZShzLCBzLmR5bl9kdHJlZSwgcy5kX2Rlc2MubWF4X2NvZGUpO1xuXG4gIC8qIEJ1aWxkIHRoZSBiaXQgbGVuZ3RoIHRyZWU6ICovXG4gIGJ1aWxkX3RyZWUocywgcy5ibF9kZXNjKTtcbiAgLyogb3B0X2xlbiBub3cgaW5jbHVkZXMgdGhlIGxlbmd0aCBvZiB0aGUgdHJlZSByZXByZXNlbnRhdGlvbnMsIGV4Y2VwdFxuICAgKiB0aGUgbGVuZ3RocyBvZiB0aGUgYml0IGxlbmd0aHMgY29kZXMgYW5kIHRoZSA1KzUrNCBiaXRzIGZvciB0aGUgY291bnRzLlxuICAgKi9cblxuICAvKiBEZXRlcm1pbmUgdGhlIG51bWJlciBvZiBiaXQgbGVuZ3RoIGNvZGVzIHRvIHNlbmQuIFRoZSBwa3ppcCBmb3JtYXRcbiAgICogcmVxdWlyZXMgdGhhdCBhdCBsZWFzdCA0IGJpdCBsZW5ndGggY29kZXMgYmUgc2VudC4gKGFwcG5vdGUudHh0IHNheXNcbiAgICogMyBidXQgdGhlIGFjdHVhbCB2YWx1ZSB1c2VkIGlzIDQuKVxuICAgKi9cbiAgZm9yIChtYXhfYmxpbmRleCA9IEJMX0NPREVTIC0gMTsgbWF4X2JsaW5kZXggPj0gMzsgbWF4X2JsaW5kZXgtLSkge1xuICAgIGlmIChzLmJsX3RyZWVbYmxfb3JkZXJbbWF4X2JsaW5kZXhdICogMiArIDFdLyouTGVuKi8gIT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICAvKiBVcGRhdGUgb3B0X2xlbiB0byBpbmNsdWRlIHRoZSBiaXQgbGVuZ3RoIHRyZWUgYW5kIGNvdW50cyAqL1xuICBzLm9wdF9sZW4gKz0gMyAqIChtYXhfYmxpbmRleCArIDEpICsgNSArIDUgKyA0O1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmR5biB0cmVlczogZHluICVsZCwgc3RhdCAlbGRcIixcbiAgLy8gICAgICAgIHMtPm9wdF9sZW4sIHMtPnN0YXRpY19sZW4pKTtcblxuICByZXR1cm4gbWF4X2JsaW5kZXg7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCB0aGUgaGVhZGVyIGZvciBhIGJsb2NrIHVzaW5nIGR5bmFtaWMgSHVmZm1hbiB0cmVlczogdGhlIGNvdW50cywgdGhlXG4gKiBsZW5ndGhzIG9mIHRoZSBiaXQgbGVuZ3RoIGNvZGVzLCB0aGUgbGl0ZXJhbCB0cmVlIGFuZCB0aGUgZGlzdGFuY2UgdHJlZS5cbiAqIElOIGFzc2VydGlvbjogbGNvZGVzID49IDI1NywgZGNvZGVzID49IDEsIGJsY29kZXMgPj0gNC5cbiAqL1xuY29uc3Qgc2VuZF9hbGxfdHJlZXMgPSAocywgbGNvZGVzLCBkY29kZXMsIGJsY29kZXMpID0+IHtcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBpbnQgbGNvZGVzLCBkY29kZXMsIGJsY29kZXM7IC8qIG51bWJlciBvZiBjb2RlcyBmb3IgZWFjaCB0cmVlICovXG5cbiAgbGV0IHJhbms7ICAgICAgICAgICAgICAgICAgICAvKiBpbmRleCBpbiBibF9vcmRlciAqL1xuXG4gIC8vQXNzZXJ0IChsY29kZXMgPj0gMjU3ICYmIGRjb2RlcyA+PSAxICYmIGJsY29kZXMgPj0gNCwgXCJub3QgZW5vdWdoIGNvZGVzXCIpO1xuICAvL0Fzc2VydCAobGNvZGVzIDw9IExfQ09ERVMgJiYgZGNvZGVzIDw9IERfQ09ERVMgJiYgYmxjb2RlcyA8PSBCTF9DT0RFUyxcbiAgLy8gICAgICAgIFwidG9vIG1hbnkgY29kZXNcIik7XG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuYmwgY291bnRzOiBcIikpO1xuICBzZW5kX2JpdHMocywgbGNvZGVzIC0gMjU3LCA1KTsgLyogbm90ICsyNTUgYXMgc3RhdGVkIGluIGFwcG5vdGUudHh0ICovXG4gIHNlbmRfYml0cyhzLCBkY29kZXMgLSAxLCAgIDUpO1xuICBzZW5kX2JpdHMocywgYmxjb2RlcyAtIDQsICA0KTsgLyogbm90IC0zIGFzIHN0YXRlZCBpbiBhcHBub3RlLnR4dCAqL1xuICBmb3IgKHJhbmsgPSAwOyByYW5rIDwgYmxjb2RlczsgcmFuaysrKSB7XG4gICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5ibCBjb2RlICUyZCBcIiwgYmxfb3JkZXJbcmFua10pKTtcbiAgICBzZW5kX2JpdHMocywgcy5ibF90cmVlW2JsX29yZGVyW3JhbmtdICogMiArIDFdLyouTGVuKi8sIDMpO1xuICB9XG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuYmwgdHJlZTogc2VudCAlbGRcIiwgcy0+Yml0c19zZW50KSk7XG5cbiAgc2VuZF90cmVlKHMsIHMuZHluX2x0cmVlLCBsY29kZXMgLSAxKTsgLyogbGl0ZXJhbCB0cmVlICovXG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxubGl0IHRyZWU6IHNlbnQgJWxkXCIsIHMtPmJpdHNfc2VudCkpO1xuXG4gIHNlbmRfdHJlZShzLCBzLmR5bl9kdHJlZSwgZGNvZGVzIC0gMSk7IC8qIGRpc3RhbmNlIHRyZWUgKi9cbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5kaXN0IHRyZWU6IHNlbnQgJWxkXCIsIHMtPmJpdHNfc2VudCkpO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENoZWNrIGlmIHRoZSBkYXRhIHR5cGUgaXMgVEVYVCBvciBCSU5BUlksIHVzaW5nIHRoZSBmb2xsb3dpbmcgYWxnb3JpdGhtOlxuICogLSBURVhUIGlmIHRoZSB0d28gY29uZGl0aW9ucyBiZWxvdyBhcmUgc2F0aXNmaWVkOlxuICogICAgYSkgVGhlcmUgYXJlIG5vIG5vbi1wb3J0YWJsZSBjb250cm9sIGNoYXJhY3RlcnMgYmVsb25naW5nIHRvIHRoZVxuICogICAgICAgXCJibG9jayBsaXN0XCIgKDAuLjYsIDE0Li4yNSwgMjguLjMxKS5cbiAqICAgIGIpIFRoZXJlIGlzIGF0IGxlYXN0IG9uZSBwcmludGFibGUgY2hhcmFjdGVyIGJlbG9uZ2luZyB0byB0aGVcbiAqICAgICAgIFwiYWxsb3cgbGlzdFwiICg5IHtUQUJ9LCAxMCB7TEZ9LCAxMyB7Q1J9LCAzMi4uMjU1KS5cbiAqIC0gQklOQVJZIG90aGVyd2lzZS5cbiAqIC0gVGhlIGZvbGxvd2luZyBwYXJ0aWFsbHktcG9ydGFibGUgY29udHJvbCBjaGFyYWN0ZXJzIGZvcm0gYVxuICogICBcImdyYXkgbGlzdFwiIHRoYXQgaXMgaWdub3JlZCBpbiB0aGlzIGRldGVjdGlvbiBhbGdvcml0aG06XG4gKiAgICg3IHtCRUx9LCA4IHtCU30sIDExIHtWVH0sIDEyIHtGRn0sIDI2IHtTVUJ9LCAyNyB7RVNDfSkuXG4gKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZHMgRnJlcSBvZiBkeW5fbHRyZWUgYXJlIHNldC5cbiAqL1xuY29uc3QgZGV0ZWN0X2RhdGFfdHlwZSA9IChzKSA9PiB7XG4gIC8qIGJsb2NrX21hc2sgaXMgdGhlIGJpdCBtYXNrIG9mIGJsb2NrLWxpc3RlZCBieXRlc1xuICAgKiBzZXQgYml0cyAwLi42LCAxNC4uMjUsIGFuZCAyOC4uMzFcbiAgICogMHhmM2ZmYzA3ZiA9IGJpbmFyeSAxMTExMDAxMTExMTExMTExMTEwMDAwMDAwMTExMTExMVxuICAgKi9cbiAgbGV0IGJsb2NrX21hc2sgPSAweGYzZmZjMDdmO1xuICBsZXQgbjtcblxuICAvKiBDaGVjayBmb3Igbm9uLXRleHR1YWwgKFwiYmxvY2stbGlzdGVkXCIpIGJ5dGVzLiAqL1xuICBmb3IgKG4gPSAwOyBuIDw9IDMxOyBuKyssIGJsb2NrX21hc2sgPj4+PSAxKSB7XG4gICAgaWYgKChibG9ja19tYXNrICYgMSkgJiYgKHMuZHluX2x0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkpIHtcbiAgICAgIHJldHVybiBaX0JJTkFSWTtcbiAgICB9XG4gIH1cblxuICAvKiBDaGVjayBmb3IgdGV4dHVhbCAoXCJhbGxvdy1saXN0ZWRcIikgYnl0ZXMuICovXG4gIGlmIChzLmR5bl9sdHJlZVs5ICogMl0vKi5GcmVxKi8gIT09IDAgfHwgcy5keW5fbHRyZWVbMTAgKiAyXS8qLkZyZXEqLyAhPT0gMCB8fFxuICAgICAgcy5keW5fbHRyZWVbMTMgKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgIHJldHVybiBaX1RFWFQ7XG4gIH1cbiAgZm9yIChuID0gMzI7IG4gPCBMSVRFUkFMUzsgbisrKSB7XG4gICAgaWYgKHMuZHluX2x0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgICAgcmV0dXJuIFpfVEVYVDtcbiAgICB9XG4gIH1cblxuICAvKiBUaGVyZSBhcmUgbm8gXCJibG9jay1saXN0ZWRcIiBvciBcImFsbG93LWxpc3RlZFwiIGJ5dGVzOlxuICAgKiB0aGlzIHN0cmVhbSBlaXRoZXIgaXMgZW1wdHkgb3IgaGFzIHRvbGVyYXRlZCAoXCJncmF5LWxpc3RlZFwiKSBieXRlcyBvbmx5LlxuICAgKi9cbiAgcmV0dXJuIFpfQklOQVJZO1xufTtcblxuXG5sZXQgc3RhdGljX2luaXRfZG9uZSA9IGZhbHNlO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEluaXRpYWxpemUgdGhlIHRyZWUgZGF0YSBzdHJ1Y3R1cmVzIGZvciBhIG5ldyB6bGliIHN0cmVhbS5cbiAqL1xuY29uc3QgX3RyX2luaXQgPSAocykgPT5cbntcblxuICBpZiAoIXN0YXRpY19pbml0X2RvbmUpIHtcbiAgICB0cl9zdGF0aWNfaW5pdCgpO1xuICAgIHN0YXRpY19pbml0X2RvbmUgPSB0cnVlO1xuICB9XG5cbiAgcy5sX2Rlc2MgID0gbmV3IFRyZWVEZXNjKHMuZHluX2x0cmVlLCBzdGF0aWNfbF9kZXNjKTtcbiAgcy5kX2Rlc2MgID0gbmV3IFRyZWVEZXNjKHMuZHluX2R0cmVlLCBzdGF0aWNfZF9kZXNjKTtcbiAgcy5ibF9kZXNjID0gbmV3IFRyZWVEZXNjKHMuYmxfdHJlZSwgc3RhdGljX2JsX2Rlc2MpO1xuXG4gIHMuYmlfYnVmID0gMDtcbiAgcy5iaV92YWxpZCA9IDA7XG5cbiAgLyogSW5pdGlhbGl6ZSB0aGUgZmlyc3QgYmxvY2sgb2YgdGhlIGZpcnN0IGZpbGU6ICovXG4gIGluaXRfYmxvY2socyk7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCBhIHN0b3JlZCBibG9ja1xuICovXG5jb25zdCBfdHJfc3RvcmVkX2Jsb2NrID0gKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgbGFzdCkgPT4ge1xuLy9EZWZsYXRlU3RhdGUgKnM7XG4vL2NoYXJmICpidWY7ICAgICAgIC8qIGlucHV0IGJsb2NrICovXG4vL3VsZyBzdG9yZWRfbGVuOyAgIC8qIGxlbmd0aCBvZiBpbnB1dCBibG9jayAqL1xuLy9pbnQgbGFzdDsgICAgICAgICAvKiBvbmUgaWYgdGhpcyBpcyB0aGUgbGFzdCBibG9jayBmb3IgYSBmaWxlICovXG5cbiAgc2VuZF9iaXRzKHMsIChTVE9SRURfQkxPQ0sgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7ICAgIC8qIHNlbmQgYmxvY2sgdHlwZSAqL1xuICBiaV93aW5kdXAocyk7ICAgICAgICAvKiBhbGlnbiBvbiBieXRlIGJvdW5kYXJ5ICovXG4gIHB1dF9zaG9ydChzLCBzdG9yZWRfbGVuKTtcbiAgcHV0X3Nob3J0KHMsIH5zdG9yZWRfbGVuKTtcbiAgaWYgKHN0b3JlZF9sZW4pIHtcbiAgICBzLnBlbmRpbmdfYnVmLnNldChzLndpbmRvdy5zdWJhcnJheShidWYsIGJ1ZiArIHN0b3JlZF9sZW4pLCBzLnBlbmRpbmcpO1xuICB9XG4gIHMucGVuZGluZyArPSBzdG9yZWRfbGVuO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgb25lIGVtcHR5IHN0YXRpYyBibG9jayB0byBnaXZlIGVub3VnaCBsb29rYWhlYWQgZm9yIGluZmxhdGUuXG4gKiBUaGlzIHRha2VzIDEwIGJpdHMsIG9mIHdoaWNoIDcgbWF5IHJlbWFpbiBpbiB0aGUgYml0IGJ1ZmZlci5cbiAqL1xuY29uc3QgX3RyX2FsaWduID0gKHMpID0+IHtcbiAgc2VuZF9iaXRzKHMsIFNUQVRJQ19UUkVFUyA8PCAxLCAzKTtcbiAgc2VuZF9jb2RlKHMsIEVORF9CTE9DSywgc3RhdGljX2x0cmVlKTtcbiAgYmlfZmx1c2gocyk7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nIGZvciB0aGUgY3VycmVudCBibG9jazogZHluYW1pYyB0cmVlcywgc3RhdGljXG4gKiB0cmVlcyBvciBzdG9yZSwgYW5kIHdyaXRlIG91dCB0aGUgZW5jb2RlZCBibG9jay5cbiAqL1xuY29uc3QgX3RyX2ZsdXNoX2Jsb2NrID0gKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgbGFzdCkgPT4ge1xuLy9EZWZsYXRlU3RhdGUgKnM7XG4vL2NoYXJmICpidWY7ICAgICAgIC8qIGlucHV0IGJsb2NrLCBvciBOVUxMIGlmIHRvbyBvbGQgKi9cbi8vdWxnIHN0b3JlZF9sZW47ICAgLyogbGVuZ3RoIG9mIGlucHV0IGJsb2NrICovXG4vL2ludCBsYXN0OyAgICAgICAgIC8qIG9uZSBpZiB0aGlzIGlzIHRoZSBsYXN0IGJsb2NrIGZvciBhIGZpbGUgKi9cblxuICBsZXQgb3B0X2xlbmIsIHN0YXRpY19sZW5iOyAgLyogb3B0X2xlbiBhbmQgc3RhdGljX2xlbiBpbiBieXRlcyAqL1xuICBsZXQgbWF4X2JsaW5kZXggPSAwOyAgICAgICAgLyogaW5kZXggb2YgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgb2Ygbm9uIHplcm8gZnJlcSAqL1xuXG4gIC8qIEJ1aWxkIHRoZSBIdWZmbWFuIHRyZWVzIHVubGVzcyBhIHN0b3JlZCBibG9jayBpcyBmb3JjZWQgKi9cbiAgaWYgKHMubGV2ZWwgPiAwKSB7XG5cbiAgICAvKiBDaGVjayBpZiB0aGUgZmlsZSBpcyBiaW5hcnkgb3IgdGV4dCAqL1xuICAgIGlmIChzLnN0cm0uZGF0YV90eXBlID09PSBaX1VOS05PV04pIHtcbiAgICAgIHMuc3RybS5kYXRhX3R5cGUgPSBkZXRlY3RfZGF0YV90eXBlKHMpO1xuICAgIH1cblxuICAgIC8qIENvbnN0cnVjdCB0aGUgbGl0ZXJhbCBhbmQgZGlzdGFuY2UgdHJlZXMgKi9cbiAgICBidWlsZF90cmVlKHMsIHMubF9kZXNjKTtcbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5saXQgZGF0YTogZHluICVsZCwgc3RhdCAlbGRcIiwgcy0+b3B0X2xlbixcbiAgICAvLyAgICAgICAgcy0+c3RhdGljX2xlbikpO1xuXG4gICAgYnVpbGRfdHJlZShzLCBzLmRfZGVzYyk7XG4gICAgLy8gVHJhY2V2KChzdGRlcnIsIFwiXFxuZGlzdCBkYXRhOiBkeW4gJWxkLCBzdGF0ICVsZFwiLCBzLT5vcHRfbGVuLFxuICAgIC8vICAgICAgICBzLT5zdGF0aWNfbGVuKSk7XG4gICAgLyogQXQgdGhpcyBwb2ludCwgb3B0X2xlbiBhbmQgc3RhdGljX2xlbiBhcmUgdGhlIHRvdGFsIGJpdCBsZW5ndGhzIG9mXG4gICAgICogdGhlIGNvbXByZXNzZWQgYmxvY2sgZGF0YSwgZXhjbHVkaW5nIHRoZSB0cmVlIHJlcHJlc2VudGF0aW9ucy5cbiAgICAgKi9cblxuICAgIC8qIEJ1aWxkIHRoZSBiaXQgbGVuZ3RoIHRyZWUgZm9yIHRoZSBhYm92ZSB0d28gdHJlZXMsIGFuZCBnZXQgdGhlIGluZGV4XG4gICAgICogaW4gYmxfb3JkZXIgb2YgdGhlIGxhc3QgYml0IGxlbmd0aCBjb2RlIHRvIHNlbmQuXG4gICAgICovXG4gICAgbWF4X2JsaW5kZXggPSBidWlsZF9ibF90cmVlKHMpO1xuXG4gICAgLyogRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nLiBDb21wdXRlIHRoZSBibG9jayBsZW5ndGhzIGluIGJ5dGVzLiAqL1xuICAgIG9wdF9sZW5iID0gKHMub3B0X2xlbiArIDMgKyA3KSA+Pj4gMztcbiAgICBzdGF0aWNfbGVuYiA9IChzLnN0YXRpY19sZW4gKyAzICsgNykgPj4+IDM7XG5cbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5vcHQgJWx1KCVsdSkgc3RhdCAlbHUoJWx1KSBzdG9yZWQgJWx1IGxpdCAldSBcIixcbiAgICAvLyAgICAgICAgb3B0X2xlbmIsIHMtPm9wdF9sZW4sIHN0YXRpY19sZW5iLCBzLT5zdGF0aWNfbGVuLCBzdG9yZWRfbGVuLFxuICAgIC8vICAgICAgICBzLT5zeW1fbmV4dCAvIDMpKTtcblxuICAgIGlmIChzdGF0aWNfbGVuYiA8PSBvcHRfbGVuYikgeyBvcHRfbGVuYiA9IHN0YXRpY19sZW5iOyB9XG5cbiAgfSBlbHNlIHtcbiAgICAvLyBBc3NlcnQoYnVmICE9IChjaGFyKikwLCBcImxvc3QgYnVmXCIpO1xuICAgIG9wdF9sZW5iID0gc3RhdGljX2xlbmIgPSBzdG9yZWRfbGVuICsgNTsgLyogZm9yY2UgYSBzdG9yZWQgYmxvY2sgKi9cbiAgfVxuXG4gIGlmICgoc3RvcmVkX2xlbiArIDQgPD0gb3B0X2xlbmIpICYmIChidWYgIT09IC0xKSkge1xuICAgIC8qIDQ6IHR3byB3b3JkcyBmb3IgdGhlIGxlbmd0aHMgKi9cblxuICAgIC8qIFRoZSB0ZXN0IGJ1ZiAhPSBOVUxMIGlzIG9ubHkgbmVjZXNzYXJ5IGlmIExJVF9CVUZTSVpFID4gV1NJWkUuXG4gICAgICogT3RoZXJ3aXNlIHdlIGNhbid0IGhhdmUgcHJvY2Vzc2VkIG1vcmUgdGhhbiBXU0laRSBpbnB1dCBieXRlcyBzaW5jZVxuICAgICAqIHRoZSBsYXN0IGJsb2NrIGZsdXNoLCBiZWNhdXNlIGNvbXByZXNzaW9uIHdvdWxkIGhhdmUgYmVlblxuICAgICAqIHN1Y2Nlc3NmdWwuIElmIExJVF9CVUZTSVpFIDw9IFdTSVpFLCBpdCBpcyBuZXZlciB0b28gbGF0ZSB0b1xuICAgICAqIHRyYW5zZm9ybSBhIGJsb2NrIGludG8gYSBzdG9yZWQgYmxvY2suXG4gICAgICovXG4gICAgX3RyX3N0b3JlZF9ibG9jayhzLCBidWYsIHN0b3JlZF9sZW4sIGxhc3QpO1xuXG4gIH0gZWxzZSBpZiAocy5zdHJhdGVneSA9PT0gWl9GSVhFRCB8fCBzdGF0aWNfbGVuYiA9PT0gb3B0X2xlbmIpIHtcblxuICAgIHNlbmRfYml0cyhzLCAoU1RBVElDX1RSRUVTIDw8IDEpICsgKGxhc3QgPyAxIDogMCksIDMpO1xuICAgIGNvbXByZXNzX2Jsb2NrKHMsIHN0YXRpY19sdHJlZSwgc3RhdGljX2R0cmVlKTtcblxuICB9IGVsc2Uge1xuICAgIHNlbmRfYml0cyhzLCAoRFlOX1RSRUVTIDw8IDEpICsgKGxhc3QgPyAxIDogMCksIDMpO1xuICAgIHNlbmRfYWxsX3RyZWVzKHMsIHMubF9kZXNjLm1heF9jb2RlICsgMSwgcy5kX2Rlc2MubWF4X2NvZGUgKyAxLCBtYXhfYmxpbmRleCArIDEpO1xuICAgIGNvbXByZXNzX2Jsb2NrKHMsIHMuZHluX2x0cmVlLCBzLmR5bl9kdHJlZSk7XG4gIH1cbiAgLy8gQXNzZXJ0IChzLT5jb21wcmVzc2VkX2xlbiA9PSBzLT5iaXRzX3NlbnQsIFwiYmFkIGNvbXByZXNzZWQgc2l6ZVwiKTtcbiAgLyogVGhlIGFib3ZlIGNoZWNrIGlzIG1hZGUgbW9kIDJeMzIsIGZvciBmaWxlcyBsYXJnZXIgdGhhbiA1MTIgTUJcbiAgICogYW5kIHVMb25nIGltcGxlbWVudGVkIG9uIDMyIGJpdHMuXG4gICAqL1xuICBpbml0X2Jsb2NrKHMpO1xuXG4gIGlmIChsYXN0KSB7XG4gICAgYmlfd2luZHVwKHMpO1xuICB9XG4gIC8vIFRyYWNldigoc3RkZXJyLFwiXFxuY29tcHJsZW4gJWx1KCVsdSkgXCIsIHMtPmNvbXByZXNzZWRfbGVuPj4zLFxuICAvLyAgICAgICBzLT5jb21wcmVzc2VkX2xlbi03Kmxhc3QpKTtcbn07XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2F2ZSB0aGUgbWF0Y2ggaW5mbyBhbmQgdGFsbHkgdGhlIGZyZXF1ZW5jeSBjb3VudHMuIFJldHVybiB0cnVlIGlmXG4gKiB0aGUgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQuXG4gKi9cbmNvbnN0IF90cl90YWxseSA9IChzLCBkaXN0LCBsYykgPT4ge1xuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIHVuc2lnbmVkIGRpc3Q7ICAvKiBkaXN0YW5jZSBvZiBtYXRjaGVkIHN0cmluZyAqL1xuLy8gICAgdW5zaWduZWQgbGM7ICAgIC8qIG1hdGNoIGxlbmd0aC1NSU5fTUFUQ0ggb3IgdW5tYXRjaGVkIGNoYXIgKGlmIGRpc3Q9PTApICovXG5cbiAgcy5wZW5kaW5nX2J1ZltzLnN5bV9idWYgKyBzLnN5bV9uZXh0KytdID0gZGlzdDtcbiAgcy5wZW5kaW5nX2J1ZltzLnN5bV9idWYgKyBzLnN5bV9uZXh0KytdID0gZGlzdCA+PiA4O1xuICBzLnBlbmRpbmdfYnVmW3Muc3ltX2J1ZiArIHMuc3ltX25leHQrK10gPSBsYztcbiAgaWYgKGRpc3QgPT09IDApIHtcbiAgICAvKiBsYyBpcyB0aGUgdW5tYXRjaGVkIGNoYXIgKi9cbiAgICBzLmR5bl9sdHJlZVtsYyAqIDJdLyouRnJlcSovKys7XG4gIH0gZWxzZSB7XG4gICAgcy5tYXRjaGVzKys7XG4gICAgLyogSGVyZSwgbGMgaXMgdGhlIG1hdGNoIGxlbmd0aCAtIE1JTl9NQVRDSCAqL1xuICAgIGRpc3QtLTsgICAgICAgICAgICAgLyogZGlzdCA9IG1hdGNoIGRpc3RhbmNlIC0gMSAqL1xuICAgIC8vQXNzZXJ0KCh1c2gpZGlzdCA8ICh1c2gpTUFYX0RJU1QocykgJiZcbiAgICAvLyAgICAgICAodXNoKWxjIDw9ICh1c2gpKE1BWF9NQVRDSC1NSU5fTUFUQ0gpICYmXG4gICAgLy8gICAgICAgKHVzaClkX2NvZGUoZGlzdCkgPCAodXNoKURfQ09ERVMsICBcIl90cl90YWxseTogYmFkIG1hdGNoXCIpO1xuXG4gICAgcy5keW5fbHRyZWVbKF9sZW5ndGhfY29kZVtsY10gKyBMSVRFUkFMUyArIDEpICogMl0vKi5GcmVxKi8rKztcbiAgICBzLmR5bl9kdHJlZVtkX2NvZGUoZGlzdCkgKiAyXS8qLkZyZXEqLysrO1xuICB9XG5cbiAgcmV0dXJuIChzLnN5bV9uZXh0ID09PSBzLnN5bV9lbmQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMuX3RyX2luaXQgID0gX3RyX2luaXQ7XG5tb2R1bGUuZXhwb3J0cy5fdHJfc3RvcmVkX2Jsb2NrID0gX3RyX3N0b3JlZF9ibG9jaztcbm1vZHVsZS5leHBvcnRzLl90cl9mbHVzaF9ibG9jayAgPSBfdHJfZmx1c2hfYmxvY2s7XG5tb2R1bGUuZXhwb3J0cy5fdHJfdGFsbHkgPSBfdHJfdGFsbHk7XG5tb2R1bGUuZXhwb3J0cy5fdHJfYWxpZ24gPSBfdHJfYWxpZ247XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIE5vdGU6IGFkbGVyMzIgdGFrZXMgMTIlIGZvciBsZXZlbCAwIGFuZCAyJSBmb3IgbGV2ZWwgNi5cbi8vIEl0IGlzbid0IHdvcnRoIGl0IHRvIG1ha2UgYWRkaXRpb25hbCBvcHRpbWl6YXRpb25zIGFzIGluIG9yaWdpbmFsLlxuLy8gU21hbGwgc2l6ZSBpcyBwcmVmZXJhYmxlLlxuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbmNvbnN0IGFkbGVyMzIgPSAoYWRsZXIsIGJ1ZiwgbGVuLCBwb3MpID0+IHtcbiAgbGV0IHMxID0gKGFkbGVyICYgMHhmZmZmKSB8MCxcbiAgICAgIHMyID0gKChhZGxlciA+Pj4gMTYpICYgMHhmZmZmKSB8MCxcbiAgICAgIG4gPSAwO1xuXG4gIHdoaWxlIChsZW4gIT09IDApIHtcbiAgICAvLyBTZXQgbGltaXQgfiB0d2ljZSBsZXNzIHRoYW4gNTU1MiwgdG8ga2VlcFxuICAgIC8vIHMyIGluIDMxLWJpdHMsIGJlY2F1c2Ugd2UgZm9yY2Ugc2lnbmVkIGludHMuXG4gICAgLy8gaW4gb3RoZXIgY2FzZSAlPSB3aWxsIGZhaWwuXG4gICAgbiA9IGxlbiA+IDIwMDAgPyAyMDAwIDogbGVuO1xuICAgIGxlbiAtPSBuO1xuXG4gICAgZG8ge1xuICAgICAgczEgPSAoczEgKyBidWZbcG9zKytdKSB8MDtcbiAgICAgIHMyID0gKHMyICsgczEpIHwwO1xuICAgIH0gd2hpbGUgKC0tbik7XG5cbiAgICBzMSAlPSA2NTUyMTtcbiAgICBzMiAlPSA2NTUyMTtcbiAgfVxuXG4gIHJldHVybiAoczEgfCAoczIgPDwgMTYpKSB8MDtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBhZGxlcjMyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBOb3RlOiB3ZSBjYW4ndCBnZXQgc2lnbmlmaWNhbnQgc3BlZWQgYm9vc3QgaGVyZS5cbi8vIFNvIHdyaXRlIGNvZGUgdG8gbWluaW1pemUgc2l6ZSAtIG5vIHByZWdlbmVyYXRlZCB0YWJsZXNcbi8vIGFuZCBhcnJheSB0b29scyBkZXBlbmRlbmNpZXMuXG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuLy8gVXNlIG9yZGluYXJ5IGFycmF5LCBzaW5jZSB1bnR5cGVkIG1ha2VzIG5vIGJvb3N0IGhlcmVcbmNvbnN0IG1ha2VUYWJsZSA9ICgpID0+IHtcbiAgbGV0IGMsIHRhYmxlID0gW107XG5cbiAgZm9yICh2YXIgbiA9IDA7IG4gPCAyNTY7IG4rKykge1xuICAgIGMgPSBuO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgODsgaysrKSB7XG4gICAgICBjID0gKChjICYgMSkgPyAoMHhFREI4ODMyMCBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuICAgIH1cbiAgICB0YWJsZVtuXSA9IGM7XG4gIH1cblxuICByZXR1cm4gdGFibGU7XG59O1xuXG4vLyBDcmVhdGUgdGFibGUgb24gbG9hZC4gSnVzdCAyNTUgc2lnbmVkIGxvbmdzLiBOb3QgYSBwcm9ibGVtLlxuY29uc3QgY3JjVGFibGUgPSBuZXcgVWludDMyQXJyYXkobWFrZVRhYmxlKCkpO1xuXG5cbmNvbnN0IGNyYzMyID0gKGNyYywgYnVmLCBsZW4sIHBvcykgPT4ge1xuICBjb25zdCB0ID0gY3JjVGFibGU7XG4gIGNvbnN0IGVuZCA9IHBvcyArIGxlbjtcblxuICBjcmMgXj0gLTE7XG5cbiAgZm9yIChsZXQgaSA9IHBvczsgaSA8IGVuZDsgaSsrKSB7XG4gICAgY3JjID0gKGNyYyA+Pj4gOCkgXiB0WyhjcmMgXiBidWZbaV0pICYgMHhGRl07XG4gIH1cblxuICByZXR1cm4gKGNyYyBeICgtMSkpOyAvLyA+Pj4gMDtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBjcmMzMjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgMjogICAgICAnbmVlZCBkaWN0aW9uYXJ5JywgICAgIC8qIFpfTkVFRF9ESUNUICAgICAgIDIgICovXG4gIDE6ICAgICAgJ3N0cmVhbSBlbmQnLCAgICAgICAgICAvKiBaX1NUUkVBTV9FTkQgICAgICAxICAqL1xuICAwOiAgICAgICcnLCAgICAgICAgICAgICAgICAgICAgLyogWl9PSyAgICAgICAgICAgICAgMCAgKi9cbiAgJy0xJzogICAnZmlsZSBlcnJvcicsICAgICAgICAgIC8qIFpfRVJSTk8gICAgICAgICAoLTEpICovXG4gICctMic6ICAgJ3N0cmVhbSBlcnJvcicsICAgICAgICAvKiBaX1NUUkVBTV9FUlJPUiAgKC0yKSAqL1xuICAnLTMnOiAgICdkYXRhIGVycm9yJywgICAgICAgICAgLyogWl9EQVRBX0VSUk9SICAgICgtMykgKi9cbiAgJy00JzogICAnaW5zdWZmaWNpZW50IG1lbW9yeScsIC8qIFpfTUVNX0VSUk9SICAgICAoLTQpICovXG4gICctNSc6ICAgJ2J1ZmZlciBlcnJvcicsICAgICAgICAvKiBaX0JVRl9FUlJPUiAgICAgKC01KSAqL1xuICAnLTYnOiAgICdpbmNvbXBhdGlibGUgdmVyc2lvbicgLyogWl9WRVJTSU9OX0VSUk9SICgtNikgKi9cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgLyogQWxsb3dlZCBmbHVzaCB2YWx1ZXM7IHNlZSBkZWZsYXRlKCkgYW5kIGluZmxhdGUoKSBiZWxvdyBmb3IgZGV0YWlscyAqL1xuICBaX05PX0ZMVVNIOiAgICAgICAgIDAsXG4gIFpfUEFSVElBTF9GTFVTSDogICAgMSxcbiAgWl9TWU5DX0ZMVVNIOiAgICAgICAyLFxuICBaX0ZVTExfRkxVU0g6ICAgICAgIDMsXG4gIFpfRklOSVNIOiAgICAgICAgICAgNCxcbiAgWl9CTE9DSzogICAgICAgICAgICA1LFxuICBaX1RSRUVTOiAgICAgICAgICAgIDYsXG5cbiAgLyogUmV0dXJuIGNvZGVzIGZvciB0aGUgY29tcHJlc3Npb24vZGVjb21wcmVzc2lvbiBmdW5jdGlvbnMuIE5lZ2F0aXZlIHZhbHVlc1xuICAqIGFyZSBlcnJvcnMsIHBvc2l0aXZlIHZhbHVlcyBhcmUgdXNlZCBmb3Igc3BlY2lhbCBidXQgbm9ybWFsIGV2ZW50cy5cbiAgKi9cbiAgWl9PSzogICAgICAgICAgICAgICAwLFxuICBaX1NUUkVBTV9FTkQ6ICAgICAgIDEsXG4gIFpfTkVFRF9ESUNUOiAgICAgICAgMixcbiAgWl9FUlJOTzogICAgICAgICAgIC0xLFxuICBaX1NUUkVBTV9FUlJPUjogICAgLTIsXG4gIFpfREFUQV9FUlJPUjogICAgICAtMyxcbiAgWl9NRU1fRVJST1I6ICAgICAgIC00LFxuICBaX0JVRl9FUlJPUjogICAgICAgLTUsXG4gIC8vWl9WRVJTSU9OX0VSUk9SOiAtNixcblxuICAvKiBjb21wcmVzc2lvbiBsZXZlbHMgKi9cbiAgWl9OT19DT01QUkVTU0lPTjogICAgICAgICAwLFxuICBaX0JFU1RfU1BFRUQ6ICAgICAgICAgICAgIDEsXG4gIFpfQkVTVF9DT01QUkVTU0lPTjogICAgICAgOSxcbiAgWl9ERUZBVUxUX0NPTVBSRVNTSU9OOiAgIC0xLFxuXG5cbiAgWl9GSUxURVJFRDogICAgICAgICAgICAgICAxLFxuICBaX0hVRkZNQU5fT05MWTogICAgICAgICAgIDIsXG4gIFpfUkxFOiAgICAgICAgICAgICAgICAgICAgMyxcbiAgWl9GSVhFRDogICAgICAgICAgICAgICAgICA0LFxuICBaX0RFRkFVTFRfU1RSQVRFR1k6ICAgICAgIDAsXG5cbiAgLyogUG9zc2libGUgdmFsdWVzIG9mIHRoZSBkYXRhX3R5cGUgZmllbGQgKHRob3VnaCBzZWUgaW5mbGF0ZSgpKSAqL1xuICBaX0JJTkFSWTogICAgICAgICAgICAgICAgIDAsXG4gIFpfVEVYVDogICAgICAgICAgICAgICAgICAgMSxcbiAgLy9aX0FTQ0lJOiAgICAgICAgICAgICAgICAxLCAvLyA9IFpfVEVYVCAoZGVwcmVjYXRlZClcbiAgWl9VTktOT1dOOiAgICAgICAgICAgICAgICAyLFxuXG4gIC8qIFRoZSBkZWZsYXRlIGNvbXByZXNzaW9uIG1ldGhvZCAqL1xuICBaX0RFRkxBVEVEOiAgICAgICAgICAgICAgIDhcbiAgLy9aX05VTEw6ICAgICAgICAgICAgICAgICBudWxsIC8vIFVzZSAtMSBvciBudWxsIGlubGluZSwgZGVwZW5kaW5nIG9uIHZhciB0eXBlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbmNvbnN0IHsgX3RyX2luaXQsIF90cl9zdG9yZWRfYmxvY2ssIF90cl9mbHVzaF9ibG9jaywgX3RyX3RhbGx5LCBfdHJfYWxpZ24gfSA9IHJlcXVpcmUoJy4vdHJlZXMnKTtcbmNvbnN0IGFkbGVyMzIgPSByZXF1aXJlKCcuL2FkbGVyMzInKTtcbmNvbnN0IGNyYzMyICAgPSByZXF1aXJlKCcuL2NyYzMyJyk7XG5jb25zdCBtc2cgICAgID0gcmVxdWlyZSgnLi9tZXNzYWdlcycpO1xuXG4vKiBQdWJsaWMgY29uc3RhbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuY29uc3Qge1xuICBaX05PX0ZMVVNILCBaX1BBUlRJQUxfRkxVU0gsIFpfRlVMTF9GTFVTSCwgWl9GSU5JU0gsIFpfQkxPQ0ssXG4gIFpfT0ssIFpfU1RSRUFNX0VORCwgWl9TVFJFQU1fRVJST1IsIFpfREFUQV9FUlJPUiwgWl9CVUZfRVJST1IsXG4gIFpfREVGQVVMVF9DT01QUkVTU0lPTixcbiAgWl9GSUxURVJFRCwgWl9IVUZGTUFOX09OTFksIFpfUkxFLCBaX0ZJWEVELCBaX0RFRkFVTFRfU1RSQVRFR1ksXG4gIFpfVU5LTk9XTixcbiAgWl9ERUZMQVRFRFxufSA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJyk7XG5cbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuY29uc3QgTUFYX01FTV9MRVZFTCA9IDk7XG4vKiBNYXhpbXVtIHZhbHVlIGZvciBtZW1MZXZlbCBpbiBkZWZsYXRlSW5pdDIgKi9cbmNvbnN0IE1BWF9XQklUUyA9IDE1O1xuLyogMzJLIExaNzcgd2luZG93ICovXG5jb25zdCBERUZfTUVNX0xFVkVMID0gODtcblxuXG5jb25zdCBMRU5HVEhfQ09ERVMgID0gMjk7XG4vKiBudW1iZXIgb2YgbGVuZ3RoIGNvZGVzLCBub3QgY291bnRpbmcgdGhlIHNwZWNpYWwgRU5EX0JMT0NLIGNvZGUgKi9cbmNvbnN0IExJVEVSQUxTICAgICAgPSAyNTY7XG4vKiBudW1iZXIgb2YgbGl0ZXJhbCBieXRlcyAwLi4yNTUgKi9cbmNvbnN0IExfQ09ERVMgICAgICAgPSBMSVRFUkFMUyArIDEgKyBMRU5HVEhfQ09ERVM7XG4vKiBudW1iZXIgb2YgTGl0ZXJhbCBvciBMZW5ndGggY29kZXMsIGluY2x1ZGluZyB0aGUgRU5EX0JMT0NLIGNvZGUgKi9cbmNvbnN0IERfQ09ERVMgICAgICAgPSAzMDtcbi8qIG51bWJlciBvZiBkaXN0YW5jZSBjb2RlcyAqL1xuY29uc3QgQkxfQ09ERVMgICAgICA9IDE5O1xuLyogbnVtYmVyIG9mIGNvZGVzIHVzZWQgdG8gdHJhbnNmZXIgdGhlIGJpdCBsZW5ndGhzICovXG5jb25zdCBIRUFQX1NJWkUgICAgID0gMiAqIExfQ09ERVMgKyAxO1xuLyogbWF4aW11bSBoZWFwIHNpemUgKi9cbmNvbnN0IE1BWF9CSVRTICA9IDE1O1xuLyogQWxsIGNvZGVzIG11c3Qgbm90IGV4Y2VlZCBNQVhfQklUUyBiaXRzICovXG5cbmNvbnN0IE1JTl9NQVRDSCA9IDM7XG5jb25zdCBNQVhfTUFUQ0ggPSAyNTg7XG5jb25zdCBNSU5fTE9PS0FIRUFEID0gKE1BWF9NQVRDSCArIE1JTl9NQVRDSCArIDEpO1xuXG5jb25zdCBQUkVTRVRfRElDVCA9IDB4MjA7XG5cbmNvbnN0IElOSVRfU1RBVEUgICAgPSAgNDI7ICAgIC8qIHpsaWIgaGVhZGVyIC0+IEJVU1lfU1RBVEUgKi9cbi8vI2lmZGVmIEdaSVBcbmNvbnN0IEdaSVBfU1RBVEUgICAgPSAgNTc7ICAgIC8qIGd6aXAgaGVhZGVyIC0+IEJVU1lfU1RBVEUgfCBFWFRSQV9TVEFURSAqL1xuLy8jZW5kaWZcbmNvbnN0IEVYVFJBX1NUQVRFICAgPSAgNjk7ICAgIC8qIGd6aXAgZXh0cmEgYmxvY2sgLT4gTkFNRV9TVEFURSAqL1xuY29uc3QgTkFNRV9TVEFURSAgICA9ICA3MzsgICAgLyogZ3ppcCBmaWxlIG5hbWUgLT4gQ09NTUVOVF9TVEFURSAqL1xuY29uc3QgQ09NTUVOVF9TVEFURSA9ICA5MTsgICAgLyogZ3ppcCBjb21tZW50IC0+IEhDUkNfU1RBVEUgKi9cbmNvbnN0IEhDUkNfU1RBVEUgICAgPSAxMDM7ICAgIC8qIGd6aXAgaGVhZGVyIENSQyAtPiBCVVNZX1NUQVRFICovXG5jb25zdCBCVVNZX1NUQVRFICAgID0gMTEzOyAgICAvKiBkZWZsYXRlIC0+IEZJTklTSF9TVEFURSAqL1xuY29uc3QgRklOSVNIX1NUQVRFICA9IDY2NjsgICAgLyogc3RyZWFtIGNvbXBsZXRlICovXG5cbmNvbnN0IEJTX05FRURfTU9SRSAgICAgID0gMTsgLyogYmxvY2sgbm90IGNvbXBsZXRlZCwgbmVlZCBtb3JlIGlucHV0IG9yIG1vcmUgb3V0cHV0ICovXG5jb25zdCBCU19CTE9DS19ET05FICAgICA9IDI7IC8qIGJsb2NrIGZsdXNoIHBlcmZvcm1lZCAqL1xuY29uc3QgQlNfRklOSVNIX1NUQVJURUQgPSAzOyAvKiBmaW5pc2ggc3RhcnRlZCwgbmVlZCBvbmx5IG1vcmUgb3V0cHV0IGF0IG5leHQgZGVmbGF0ZSAqL1xuY29uc3QgQlNfRklOSVNIX0RPTkUgICAgPSA0OyAvKiBmaW5pc2ggZG9uZSwgYWNjZXB0IG5vIG1vcmUgaW5wdXQgb3Igb3V0cHV0ICovXG5cbmNvbnN0IE9TX0NPREUgPSAweDAzOyAvLyBVbml4IDopIC4gRG9uJ3QgZGV0ZWN0LCB1c2UgdGhpcyBkZWZhdWx0LlxuXG5jb25zdCBlcnIgPSAoc3RybSwgZXJyb3JDb2RlKSA9PiB7XG4gIHN0cm0ubXNnID0gbXNnW2Vycm9yQ29kZV07XG4gIHJldHVybiBlcnJvckNvZGU7XG59O1xuXG5jb25zdCByYW5rID0gKGYpID0+IHtcbiAgcmV0dXJuICgoZikgKiAyKSAtICgoZikgPiA0ID8gOSA6IDApO1xufTtcblxuY29uc3QgemVybyA9IChidWYpID0+IHtcbiAgbGV0IGxlbiA9IGJ1Zi5sZW5ndGg7IHdoaWxlICgtLWxlbiA+PSAwKSB7IGJ1ZltsZW5dID0gMDsgfVxufTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTbGlkZSB0aGUgaGFzaCB0YWJsZSB3aGVuIHNsaWRpbmcgdGhlIHdpbmRvdyBkb3duIChjb3VsZCBiZSBhdm9pZGVkIHdpdGggMzJcbiAqIGJpdCB2YWx1ZXMgYXQgdGhlIGV4cGVuc2Ugb2YgbWVtb3J5IHVzYWdlKS4gV2Ugc2xpZGUgZXZlbiB3aGVuIGxldmVsID09IDAgdG9cbiAqIGtlZXAgdGhlIGhhc2ggdGFibGUgY29uc2lzdGVudCBpZiB3ZSBzd2l0Y2ggYmFjayB0byBsZXZlbCA+IDAgbGF0ZXIuXG4gKi9cbmNvbnN0IHNsaWRlX2hhc2ggPSAocykgPT4ge1xuICBsZXQgbiwgbTtcbiAgbGV0IHA7XG4gIGxldCB3c2l6ZSA9IHMud19zaXplO1xuXG4gIG4gPSBzLmhhc2hfc2l6ZTtcbiAgcCA9IG47XG4gIGRvIHtcbiAgICBtID0gcy5oZWFkWy0tcF07XG4gICAgcy5oZWFkW3BdID0gKG0gPj0gd3NpemUgPyBtIC0gd3NpemUgOiAwKTtcbiAgfSB3aGlsZSAoLS1uKTtcbiAgbiA9IHdzaXplO1xuLy8jaWZuZGVmIEZBU1RFU1RcbiAgcCA9IG47XG4gIGRvIHtcbiAgICBtID0gcy5wcmV2Wy0tcF07XG4gICAgcy5wcmV2W3BdID0gKG0gPj0gd3NpemUgPyBtIC0gd3NpemUgOiAwKTtcbiAgICAvKiBJZiBuIGlzIG5vdCBvbiBhbnkgaGFzaCBjaGFpbiwgcHJldltuXSBpcyBnYXJiYWdlIGJ1dFxuICAgICAqIGl0cyB2YWx1ZSB3aWxsIG5ldmVyIGJlIHVzZWQuXG4gICAgICovXG4gIH0gd2hpbGUgKC0tbik7XG4vLyNlbmRpZlxufTtcblxuLyogZXNsaW50LWRpc2FibGUgbmV3LWNhcCAqL1xubGV0IEhBU0hfWkxJQiA9IChzLCBwcmV2LCBkYXRhKSA9PiAoKHByZXYgPDwgcy5oYXNoX3NoaWZ0KSBeIGRhdGEpICYgcy5oYXNoX21hc2s7XG4vLyBUaGlzIGhhc2ggY2F1c2VzIGxlc3MgY29sbGlzaW9ucywgaHR0cHM6Ly9naXRodWIuY29tL25vZGVjYS9wYWtvL2lzc3Vlcy8xMzVcbi8vIEJ1dCBicmVha3MgYmluYXJ5IGNvbXBhdGliaWxpdHlcbi8vbGV0IEhBU0hfRkFTVCA9IChzLCBwcmV2LCBkYXRhKSA9PiAoKHByZXYgPDwgOCkgKyAocHJldiA+PiA4KSArIChkYXRhIDw8IDQpKSAmIHMuaGFzaF9tYXNrO1xubGV0IEhBU0ggPSBIQVNIX1pMSUI7XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRmx1c2ggYXMgbXVjaCBwZW5kaW5nIG91dHB1dCBhcyBwb3NzaWJsZS4gQWxsIGRlZmxhdGUoKSBvdXRwdXQsIGV4Y2VwdCBmb3JcbiAqIHNvbWUgZGVmbGF0ZV9zdG9yZWQoKSBvdXRwdXQsIGdvZXMgdGhyb3VnaCB0aGlzIGZ1bmN0aW9uIHNvIHNvbWVcbiAqIGFwcGxpY2F0aW9ucyBtYXkgd2lzaCB0byBtb2RpZnkgaXQgdG8gYXZvaWQgYWxsb2NhdGluZyBhIGxhcmdlXG4gKiBzdHJtLT5uZXh0X291dCBidWZmZXIgYW5kIGNvcHlpbmcgaW50byBpdC4gKFNlZSBhbHNvIHJlYWRfYnVmKCkpLlxuICovXG5jb25zdCBmbHVzaF9wZW5kaW5nID0gKHN0cm0pID0+IHtcbiAgY29uc3QgcyA9IHN0cm0uc3RhdGU7XG5cbiAgLy9fdHJfZmx1c2hfYml0cyhzKTtcbiAgbGV0IGxlbiA9IHMucGVuZGluZztcbiAgaWYgKGxlbiA+IHN0cm0uYXZhaWxfb3V0KSB7XG4gICAgbGVuID0gc3RybS5hdmFpbF9vdXQ7XG4gIH1cbiAgaWYgKGxlbiA9PT0gMCkgeyByZXR1cm47IH1cblxuICBzdHJtLm91dHB1dC5zZXQocy5wZW5kaW5nX2J1Zi5zdWJhcnJheShzLnBlbmRpbmdfb3V0LCBzLnBlbmRpbmdfb3V0ICsgbGVuKSwgc3RybS5uZXh0X291dCk7XG4gIHN0cm0ubmV4dF9vdXQgICs9IGxlbjtcbiAgcy5wZW5kaW5nX291dCAgKz0gbGVuO1xuICBzdHJtLnRvdGFsX291dCArPSBsZW47XG4gIHN0cm0uYXZhaWxfb3V0IC09IGxlbjtcbiAgcy5wZW5kaW5nICAgICAgLT0gbGVuO1xuICBpZiAocy5wZW5kaW5nID09PSAwKSB7XG4gICAgcy5wZW5kaW5nX291dCA9IDA7XG4gIH1cbn07XG5cblxuY29uc3QgZmx1c2hfYmxvY2tfb25seSA9IChzLCBsYXN0KSA9PiB7XG4gIF90cl9mbHVzaF9ibG9jayhzLCAocy5ibG9ja19zdGFydCA+PSAwID8gcy5ibG9ja19zdGFydCA6IC0xKSwgcy5zdHJzdGFydCAtIHMuYmxvY2tfc3RhcnQsIGxhc3QpO1xuICBzLmJsb2NrX3N0YXJ0ID0gcy5zdHJzdGFydDtcbiAgZmx1c2hfcGVuZGluZyhzLnN0cm0pO1xufTtcblxuXG5jb25zdCBwdXRfYnl0ZSA9IChzLCBiKSA9PiB7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gYjtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogUHV0IGEgc2hvcnQgaW4gdGhlIHBlbmRpbmcgYnVmZmVyLiBUaGUgMTYtYml0IHZhbHVlIGlzIHB1dCBpbiBNU0Igb3JkZXIuXG4gKiBJTiBhc3NlcnRpb246IHRoZSBzdHJlYW0gc3RhdGUgaXMgY29ycmVjdCBhbmQgdGhlcmUgaXMgZW5vdWdoIHJvb20gaW5cbiAqIHBlbmRpbmdfYnVmLlxuICovXG5jb25zdCBwdXRTaG9ydE1TQiA9IChzLCBiKSA9PiB7XG5cbiAgLy8gIHB1dF9ieXRlKHMsIChCeXRlKShiID4+IDgpKTtcbi8vICBwdXRfYnl0ZShzLCAoQnl0ZSkoYiAmIDB4ZmYpKTtcbiAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSAoYiA+Pj4gOCkgJiAweGZmO1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IGIgJiAweGZmO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFJlYWQgYSBuZXcgYnVmZmVyIGZyb20gdGhlIGN1cnJlbnQgaW5wdXQgc3RyZWFtLCB1cGRhdGUgdGhlIGFkbGVyMzJcbiAqIGFuZCB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgcmVhZC4gIEFsbCBkZWZsYXRlKCkgaW5wdXQgZ29lcyB0aHJvdWdoXG4gKiB0aGlzIGZ1bmN0aW9uIHNvIHNvbWUgYXBwbGljYXRpb25zIG1heSB3aXNoIHRvIG1vZGlmeSBpdCB0byBhdm9pZFxuICogYWxsb2NhdGluZyBhIGxhcmdlIHN0cm0tPmlucHV0IGJ1ZmZlciBhbmQgY29weWluZyBmcm9tIGl0LlxuICogKFNlZSBhbHNvIGZsdXNoX3BlbmRpbmcoKSkuXG4gKi9cbmNvbnN0IHJlYWRfYnVmID0gKHN0cm0sIGJ1Ziwgc3RhcnQsIHNpemUpID0+IHtcblxuICBsZXQgbGVuID0gc3RybS5hdmFpbF9pbjtcblxuICBpZiAobGVuID4gc2l6ZSkgeyBsZW4gPSBzaXplOyB9XG4gIGlmIChsZW4gPT09IDApIHsgcmV0dXJuIDA7IH1cblxuICBzdHJtLmF2YWlsX2luIC09IGxlbjtcblxuICAvLyB6bWVtY3B5KGJ1Ziwgc3RybS0+bmV4dF9pbiwgbGVuKTtcbiAgYnVmLnNldChzdHJtLmlucHV0LnN1YmFycmF5KHN0cm0ubmV4dF9pbiwgc3RybS5uZXh0X2luICsgbGVuKSwgc3RhcnQpO1xuICBpZiAoc3RybS5zdGF0ZS53cmFwID09PSAxKSB7XG4gICAgc3RybS5hZGxlciA9IGFkbGVyMzIoc3RybS5hZGxlciwgYnVmLCBsZW4sIHN0YXJ0KTtcbiAgfVxuXG4gIGVsc2UgaWYgKHN0cm0uc3RhdGUud3JhcCA9PT0gMikge1xuICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBidWYsIGxlbiwgc3RhcnQpO1xuICB9XG5cbiAgc3RybS5uZXh0X2luICs9IGxlbjtcbiAgc3RybS50b3RhbF9pbiArPSBsZW47XG5cbiAgcmV0dXJuIGxlbjtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZXQgbWF0Y2hfc3RhcnQgdG8gdGhlIGxvbmdlc3QgbWF0Y2ggc3RhcnRpbmcgYXQgdGhlIGdpdmVuIHN0cmluZyBhbmRcbiAqIHJldHVybiBpdHMgbGVuZ3RoLiBNYXRjaGVzIHNob3J0ZXIgb3IgZXF1YWwgdG8gcHJldl9sZW5ndGggYXJlIGRpc2NhcmRlZCxcbiAqIGluIHdoaWNoIGNhc2UgdGhlIHJlc3VsdCBpcyBlcXVhbCB0byBwcmV2X2xlbmd0aCBhbmQgbWF0Y2hfc3RhcnQgaXNcbiAqIGdhcmJhZ2UuXG4gKiBJTiBhc3NlcnRpb25zOiBjdXJfbWF0Y2ggaXMgdGhlIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW4gZm9yIHRoZSBjdXJyZW50XG4gKiAgIHN0cmluZyAoc3Ryc3RhcnQpIGFuZCBpdHMgZGlzdGFuY2UgaXMgPD0gTUFYX0RJU1QsIGFuZCBwcmV2X2xlbmd0aCA+PSAxXG4gKiBPVVQgYXNzZXJ0aW9uOiB0aGUgbWF0Y2ggbGVuZ3RoIGlzIG5vdCBncmVhdGVyIHRoYW4gcy0+bG9va2FoZWFkLlxuICovXG5jb25zdCBsb25nZXN0X21hdGNoID0gKHMsIGN1cl9tYXRjaCkgPT4ge1xuXG4gIGxldCBjaGFpbl9sZW5ndGggPSBzLm1heF9jaGFpbl9sZW5ndGg7ICAgICAgLyogbWF4IGhhc2ggY2hhaW4gbGVuZ3RoICovXG4gIGxldCBzY2FuID0gcy5zdHJzdGFydDsgLyogY3VycmVudCBzdHJpbmcgKi9cbiAgbGV0IG1hdGNoOyAgICAgICAgICAgICAgICAgICAgICAgLyogbWF0Y2hlZCBzdHJpbmcgKi9cbiAgbGV0IGxlbjsgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBsZW5ndGggb2YgY3VycmVudCBtYXRjaCAqL1xuICBsZXQgYmVzdF9sZW4gPSBzLnByZXZfbGVuZ3RoOyAgICAgICAgICAgICAgLyogYmVzdCBtYXRjaCBsZW5ndGggc28gZmFyICovXG4gIGxldCBuaWNlX21hdGNoID0gcy5uaWNlX21hdGNoOyAgICAgICAgICAgICAvKiBzdG9wIGlmIG1hdGNoIGxvbmcgZW5vdWdoICovXG4gIGNvbnN0IGxpbWl0ID0gKHMuc3Ryc3RhcnQgPiAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkgP1xuICAgICAgcy5zdHJzdGFydCAtIChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpIDogMC8qTklMKi87XG5cbiAgY29uc3QgX3dpbiA9IHMud2luZG93OyAvLyBzaG9ydGN1dFxuXG4gIGNvbnN0IHdtYXNrID0gcy53X21hc2s7XG4gIGNvbnN0IHByZXYgID0gcy5wcmV2O1xuXG4gIC8qIFN0b3Agd2hlbiBjdXJfbWF0Y2ggYmVjb21lcyA8PSBsaW1pdC4gVG8gc2ltcGxpZnkgdGhlIGNvZGUsXG4gICAqIHdlIHByZXZlbnQgbWF0Y2hlcyB3aXRoIHRoZSBzdHJpbmcgb2Ygd2luZG93IGluZGV4IDAuXG4gICAqL1xuXG4gIGNvbnN0IHN0cmVuZCA9IHMuc3Ryc3RhcnQgKyBNQVhfTUFUQ0g7XG4gIGxldCBzY2FuX2VuZDEgID0gX3dpbltzY2FuICsgYmVzdF9sZW4gLSAxXTtcbiAgbGV0IHNjYW5fZW5kICAgPSBfd2luW3NjYW4gKyBiZXN0X2xlbl07XG5cbiAgLyogVGhlIGNvZGUgaXMgb3B0aW1pemVkIGZvciBIQVNIX0JJVFMgPj0gOCBhbmQgTUFYX01BVENILTIgbXVsdGlwbGUgb2YgMTYuXG4gICAqIEl0IGlzIGVhc3kgdG8gZ2V0IHJpZCBvZiB0aGlzIG9wdGltaXphdGlvbiBpZiBuZWNlc3NhcnkuXG4gICAqL1xuICAvLyBBc3NlcnQocy0+aGFzaF9iaXRzID49IDggJiYgTUFYX01BVENIID09IDI1OCwgXCJDb2RlIHRvbyBjbGV2ZXJcIik7XG5cbiAgLyogRG8gbm90IHdhc3RlIHRvbyBtdWNoIHRpbWUgaWYgd2UgYWxyZWFkeSBoYXZlIGEgZ29vZCBtYXRjaDogKi9cbiAgaWYgKHMucHJldl9sZW5ndGggPj0gcy5nb29kX21hdGNoKSB7XG4gICAgY2hhaW5fbGVuZ3RoID4+PSAyO1xuICB9XG4gIC8qIERvIG5vdCBsb29rIGZvciBtYXRjaGVzIGJleW9uZCB0aGUgZW5kIG9mIHRoZSBpbnB1dC4gVGhpcyBpcyBuZWNlc3NhcnlcbiAgICogdG8gbWFrZSBkZWZsYXRlIGRldGVybWluaXN0aWMuXG4gICAqL1xuICBpZiAobmljZV9tYXRjaCA+IHMubG9va2FoZWFkKSB7IG5pY2VfbWF0Y2ggPSBzLmxvb2thaGVhZDsgfVxuXG4gIC8vIEFzc2VydCgodWxnKXMtPnN0cnN0YXJ0IDw9IHMtPndpbmRvd19zaXplLU1JTl9MT09LQUhFQUQsIFwibmVlZCBsb29rYWhlYWRcIik7XG5cbiAgZG8ge1xuICAgIC8vIEFzc2VydChjdXJfbWF0Y2ggPCBzLT5zdHJzdGFydCwgXCJubyBmdXR1cmVcIik7XG4gICAgbWF0Y2ggPSBjdXJfbWF0Y2g7XG5cbiAgICAvKiBTa2lwIHRvIG5leHQgbWF0Y2ggaWYgdGhlIG1hdGNoIGxlbmd0aCBjYW5ub3QgaW5jcmVhc2VcbiAgICAgKiBvciBpZiB0aGUgbWF0Y2ggbGVuZ3RoIGlzIGxlc3MgdGhhbiAyLiAgTm90ZSB0aGF0IHRoZSBjaGVja3MgYmVsb3dcbiAgICAgKiBmb3IgaW5zdWZmaWNpZW50IGxvb2thaGVhZCBvbmx5IG9jY3VyIG9jY2FzaW9uYWxseSBmb3IgcGVyZm9ybWFuY2VcbiAgICAgKiByZWFzb25zLiAgVGhlcmVmb3JlIHVuaW5pdGlhbGl6ZWQgbWVtb3J5IHdpbGwgYmUgYWNjZXNzZWQsIGFuZFxuICAgICAqIGNvbmRpdGlvbmFsIGp1bXBzIHdpbGwgYmUgbWFkZSB0aGF0IGRlcGVuZCBvbiB0aG9zZSB2YWx1ZXMuXG4gICAgICogSG93ZXZlciB0aGUgbGVuZ3RoIG9mIHRoZSBtYXRjaCBpcyBsaW1pdGVkIHRvIHRoZSBsb29rYWhlYWQsIHNvXG4gICAgICogdGhlIG91dHB1dCBvZiBkZWZsYXRlIGlzIG5vdCBhZmZlY3RlZCBieSB0aGUgdW5pbml0aWFsaXplZCB2YWx1ZXMuXG4gICAgICovXG5cbiAgICBpZiAoX3dpblttYXRjaCArIGJlc3RfbGVuXSAgICAgIT09IHNjYW5fZW5kICB8fFxuICAgICAgICBfd2luW21hdGNoICsgYmVzdF9sZW4gLSAxXSAhPT0gc2Nhbl9lbmQxIHx8XG4gICAgICAgIF93aW5bbWF0Y2hdICAgICAgICAgICAgICAgICE9PSBfd2luW3NjYW5dIHx8XG4gICAgICAgIF93aW5bKyttYXRjaF0gICAgICAgICAgICAgICE9PSBfd2luW3NjYW4gKyAxXSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyogVGhlIGNoZWNrIGF0IGJlc3RfbGVuLTEgY2FuIGJlIHJlbW92ZWQgYmVjYXVzZSBpdCB3aWxsIGJlIG1hZGVcbiAgICAgKiBhZ2FpbiBsYXRlci4gKFRoaXMgaGV1cmlzdGljIGlzIG5vdCBhbHdheXMgYSB3aW4uKVxuICAgICAqIEl0IGlzIG5vdCBuZWNlc3NhcnkgdG8gY29tcGFyZSBzY2FuWzJdIGFuZCBtYXRjaFsyXSBzaW5jZSB0aGV5XG4gICAgICogYXJlIGFsd2F5cyBlcXVhbCB3aGVuIHRoZSBvdGhlciBieXRlcyBtYXRjaCwgZ2l2ZW4gdGhhdFxuICAgICAqIHRoZSBoYXNoIGtleXMgYXJlIGVxdWFsIGFuZCB0aGF0IEhBU0hfQklUUyA+PSA4LlxuICAgICAqL1xuICAgIHNjYW4gKz0gMjtcbiAgICBtYXRjaCsrO1xuICAgIC8vIEFzc2VydCgqc2NhbiA9PSAqbWF0Y2gsIFwibWF0Y2hbMl0/XCIpO1xuXG4gICAgLyogV2UgY2hlY2sgZm9yIGluc3VmZmljaWVudCBsb29rYWhlYWQgb25seSBldmVyeSA4dGggY29tcGFyaXNvbjtcbiAgICAgKiB0aGUgMjU2dGggY2hlY2sgd2lsbCBiZSBtYWRlIGF0IHN0cnN0YXJ0KzI1OC5cbiAgICAgKi9cbiAgICBkbyB7XG4gICAgICAvKmpzaGludCBub2VtcHR5OmZhbHNlKi9cbiAgICB9IHdoaWxlIChfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmXG4gICAgICAgICAgICAgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJlxuICAgICAgICAgICAgIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJiBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiZcbiAgICAgICAgICAgICBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmXG4gICAgICAgICAgICAgc2NhbiA8IHN0cmVuZCk7XG5cbiAgICAvLyBBc3NlcnQoc2NhbiA8PSBzLT53aW5kb3crKHVuc2lnbmVkKShzLT53aW5kb3dfc2l6ZS0xKSwgXCJ3aWxkIHNjYW5cIik7XG5cbiAgICBsZW4gPSBNQVhfTUFUQ0ggLSAoc3RyZW5kIC0gc2Nhbik7XG4gICAgc2NhbiA9IHN0cmVuZCAtIE1BWF9NQVRDSDtcblxuICAgIGlmIChsZW4gPiBiZXN0X2xlbikge1xuICAgICAgcy5tYXRjaF9zdGFydCA9IGN1cl9tYXRjaDtcbiAgICAgIGJlc3RfbGVuID0gbGVuO1xuICAgICAgaWYgKGxlbiA+PSBuaWNlX21hdGNoKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgc2Nhbl9lbmQxICA9IF93aW5bc2NhbiArIGJlc3RfbGVuIC0gMV07XG4gICAgICBzY2FuX2VuZCAgID0gX3dpbltzY2FuICsgYmVzdF9sZW5dO1xuICAgIH1cbiAgfSB3aGlsZSAoKGN1cl9tYXRjaCA9IHByZXZbY3VyX21hdGNoICYgd21hc2tdKSA+IGxpbWl0ICYmIC0tY2hhaW5fbGVuZ3RoICE9PSAwKTtcblxuICBpZiAoYmVzdF9sZW4gPD0gcy5sb29rYWhlYWQpIHtcbiAgICByZXR1cm4gYmVzdF9sZW47XG4gIH1cbiAgcmV0dXJuIHMubG9va2FoZWFkO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZpbGwgdGhlIHdpbmRvdyB3aGVuIHRoZSBsb29rYWhlYWQgYmVjb21lcyBpbnN1ZmZpY2llbnQuXG4gKiBVcGRhdGVzIHN0cnN0YXJ0IGFuZCBsb29rYWhlYWQuXG4gKlxuICogSU4gYXNzZXJ0aW9uOiBsb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEXG4gKiBPVVQgYXNzZXJ0aW9uczogc3Ryc3RhcnQgPD0gd2luZG93X3NpemUtTUlOX0xPT0tBSEVBRFxuICogICAgQXQgbGVhc3Qgb25lIGJ5dGUgaGFzIGJlZW4gcmVhZCwgb3IgYXZhaWxfaW4gPT0gMDsgcmVhZHMgYXJlXG4gKiAgICBwZXJmb3JtZWQgZm9yIGF0IGxlYXN0IHR3byBieXRlcyAocmVxdWlyZWQgZm9yIHRoZSB6aXAgdHJhbnNsYXRlX2VvbFxuICogICAgb3B0aW9uIC0tIG5vdCBzdXBwb3J0ZWQgaGVyZSkuXG4gKi9cbmNvbnN0IGZpbGxfd2luZG93ID0gKHMpID0+IHtcblxuICBjb25zdCBfd19zaXplID0gcy53X3NpemU7XG4gIGxldCBuLCBtb3JlLCBzdHI7XG5cbiAgLy9Bc3NlcnQocy0+bG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCwgXCJhbHJlYWR5IGVub3VnaCBsb29rYWhlYWRcIik7XG5cbiAgZG8ge1xuICAgIG1vcmUgPSBzLndpbmRvd19zaXplIC0gcy5sb29rYWhlYWQgLSBzLnN0cnN0YXJ0O1xuXG4gICAgLy8gSlMgaW50cyBoYXZlIDMyIGJpdCwgYmxvY2sgYmVsb3cgbm90IG5lZWRlZFxuICAgIC8qIERlYWwgd2l0aCAhQCMkJSA2NEsgbGltaXQ6ICovXG4gICAgLy9pZiAoc2l6ZW9mKGludCkgPD0gMikge1xuICAgIC8vICAgIGlmIChtb3JlID09IDAgJiYgcy0+c3Ryc3RhcnQgPT0gMCAmJiBzLT5sb29rYWhlYWQgPT0gMCkge1xuICAgIC8vICAgICAgICBtb3JlID0gd3NpemU7XG4gICAgLy9cbiAgICAvLyAgfSBlbHNlIGlmIChtb3JlID09ICh1bnNpZ25lZCkoLTEpKSB7XG4gICAgLy8gICAgICAgIC8qIFZlcnkgdW5saWtlbHksIGJ1dCBwb3NzaWJsZSBvbiAxNiBiaXQgbWFjaGluZSBpZlxuICAgIC8vICAgICAgICAgKiBzdHJzdGFydCA9PSAwICYmIGxvb2thaGVhZCA9PSAxIChpbnB1dCBkb25lIGEgYnl0ZSBhdCB0aW1lKVxuICAgIC8vICAgICAgICAgKi9cbiAgICAvLyAgICAgICAgbW9yZS0tO1xuICAgIC8vICAgIH1cbiAgICAvL31cblxuXG4gICAgLyogSWYgdGhlIHdpbmRvdyBpcyBhbG1vc3QgZnVsbCBhbmQgdGhlcmUgaXMgaW5zdWZmaWNpZW50IGxvb2thaGVhZCxcbiAgICAgKiBtb3ZlIHRoZSB1cHBlciBoYWxmIHRvIHRoZSBsb3dlciBvbmUgdG8gbWFrZSByb29tIGluIHRoZSB1cHBlciBoYWxmLlxuICAgICAqL1xuICAgIGlmIChzLnN0cnN0YXJ0ID49IF93X3NpemUgKyAoX3dfc2l6ZSAtIE1JTl9MT09LQUhFQUQpKSB7XG5cbiAgICAgIHMud2luZG93LnNldChzLndpbmRvdy5zdWJhcnJheShfd19zaXplLCBfd19zaXplICsgX3dfc2l6ZSAtIG1vcmUpLCAwKTtcbiAgICAgIHMubWF0Y2hfc3RhcnQgLT0gX3dfc2l6ZTtcbiAgICAgIHMuc3Ryc3RhcnQgLT0gX3dfc2l6ZTtcbiAgICAgIC8qIHdlIG5vdyBoYXZlIHN0cnN0YXJ0ID49IE1BWF9ESVNUICovXG4gICAgICBzLmJsb2NrX3N0YXJ0IC09IF93X3NpemU7XG4gICAgICBpZiAocy5pbnNlcnQgPiBzLnN0cnN0YXJ0KSB7XG4gICAgICAgIHMuaW5zZXJ0ID0gcy5zdHJzdGFydDtcbiAgICAgIH1cbiAgICAgIHNsaWRlX2hhc2gocyk7XG4gICAgICBtb3JlICs9IF93X3NpemU7XG4gICAgfVxuICAgIGlmIChzLnN0cm0uYXZhaWxfaW4gPT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8qIElmIHRoZXJlIHdhcyBubyBzbGlkaW5nOlxuICAgICAqICAgIHN0cnN0YXJ0IDw9IFdTSVpFK01BWF9ESVNULTEgJiYgbG9va2FoZWFkIDw9IE1JTl9MT09LQUhFQUQgLSAxICYmXG4gICAgICogICAgbW9yZSA9PSB3aW5kb3dfc2l6ZSAtIGxvb2thaGVhZCAtIHN0cnN0YXJ0XG4gICAgICogPT4gbW9yZSA+PSB3aW5kb3dfc2l6ZSAtIChNSU5fTE9PS0FIRUFELTEgKyBXU0laRSArIE1BWF9ESVNULTEpXG4gICAgICogPT4gbW9yZSA+PSB3aW5kb3dfc2l6ZSAtIDIqV1NJWkUgKyAyXG4gICAgICogSW4gdGhlIEJJR19NRU0gb3IgTU1BUCBjYXNlIChub3QgeWV0IHN1cHBvcnRlZCksXG4gICAgICogICB3aW5kb3dfc2l6ZSA9PSBpbnB1dF9zaXplICsgTUlOX0xPT0tBSEVBRCAgJiZcbiAgICAgKiAgIHN0cnN0YXJ0ICsgcy0+bG9va2FoZWFkIDw9IGlucHV0X3NpemUgPT4gbW9yZSA+PSBNSU5fTE9PS0FIRUFELlxuICAgICAqIE90aGVyd2lzZSwgd2luZG93X3NpemUgPT0gMipXU0laRSBzbyBtb3JlID49IDIuXG4gICAgICogSWYgdGhlcmUgd2FzIHNsaWRpbmcsIG1vcmUgPj0gV1NJWkUuIFNvIGluIGFsbCBjYXNlcywgbW9yZSA+PSAyLlxuICAgICAqL1xuICAgIC8vQXNzZXJ0KG1vcmUgPj0gMiwgXCJtb3JlIDwgMlwiKTtcbiAgICBuID0gcmVhZF9idWYocy5zdHJtLCBzLndpbmRvdywgcy5zdHJzdGFydCArIHMubG9va2FoZWFkLCBtb3JlKTtcbiAgICBzLmxvb2thaGVhZCArPSBuO1xuXG4gICAgLyogSW5pdGlhbGl6ZSB0aGUgaGFzaCB2YWx1ZSBub3cgdGhhdCB3ZSBoYXZlIHNvbWUgaW5wdXQ6ICovXG4gICAgaWYgKHMubG9va2FoZWFkICsgcy5pbnNlcnQgPj0gTUlOX01BVENIKSB7XG4gICAgICBzdHIgPSBzLnN0cnN0YXJ0IC0gcy5pbnNlcnQ7XG4gICAgICBzLmluc19oID0gcy53aW5kb3dbc3RyXTtcblxuICAgICAgLyogVVBEQVRFX0hBU0gocywgcy0+aW5zX2gsIHMtPndpbmRvd1tzdHIgKyAxXSk7ICovXG4gICAgICBzLmluc19oID0gSEFTSChzLCBzLmluc19oLCBzLndpbmRvd1tzdHIgKyAxXSk7XG4vLyNpZiBNSU5fTUFUQ0ggIT0gM1xuLy8gICAgICAgIENhbGwgdXBkYXRlX2hhc2goKSBNSU5fTUFUQ0gtMyBtb3JlIHRpbWVzXG4vLyNlbmRpZlxuICAgICAgd2hpbGUgKHMuaW5zZXJ0KSB7XG4gICAgICAgIC8qIFVQREFURV9IQVNIKHMsIHMtPmluc19oLCBzLT53aW5kb3dbc3RyICsgTUlOX01BVENILTFdKTsgKi9cbiAgICAgICAgcy5pbnNfaCA9IEhBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbc3RyICsgTUlOX01BVENIIC0gMV0pO1xuXG4gICAgICAgIHMucHJldltzdHIgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICAgIHMuaGVhZFtzLmluc19oXSA9IHN0cjtcbiAgICAgICAgc3RyKys7XG4gICAgICAgIHMuaW5zZXJ0LS07XG4gICAgICAgIGlmIChzLmxvb2thaGVhZCArIHMuaW5zZXJ0IDwgTUlOX01BVENIKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLyogSWYgdGhlIHdob2xlIGlucHV0IGhhcyBsZXNzIHRoYW4gTUlOX01BVENIIGJ5dGVzLCBpbnNfaCBpcyBnYXJiYWdlLFxuICAgICAqIGJ1dCB0aGlzIGlzIG5vdCBpbXBvcnRhbnQgc2luY2Ugb25seSBsaXRlcmFsIGJ5dGVzIHdpbGwgYmUgZW1pdHRlZC5cbiAgICAgKi9cblxuICB9IHdoaWxlIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgcy5zdHJtLmF2YWlsX2luICE9PSAwKTtcblxuICAvKiBJZiB0aGUgV0lOX0lOSVQgYnl0ZXMgYWZ0ZXIgdGhlIGVuZCBvZiB0aGUgY3VycmVudCBkYXRhIGhhdmUgbmV2ZXIgYmVlblxuICAgKiB3cml0dGVuLCB0aGVuIHplcm8gdGhvc2UgYnl0ZXMgaW4gb3JkZXIgdG8gYXZvaWQgbWVtb3J5IGNoZWNrIHJlcG9ydHMgb2ZcbiAgICogdGhlIHVzZSBvZiB1bmluaXRpYWxpemVkIChvciB1bmluaXRpYWxpc2VkIGFzIEp1bGlhbiB3cml0ZXMpIGJ5dGVzIGJ5XG4gICAqIHRoZSBsb25nZXN0IG1hdGNoIHJvdXRpbmVzLiAgVXBkYXRlIHRoZSBoaWdoIHdhdGVyIG1hcmsgZm9yIHRoZSBuZXh0XG4gICAqIHRpbWUgdGhyb3VnaCBoZXJlLiAgV0lOX0lOSVQgaXMgc2V0IHRvIE1BWF9NQVRDSCBzaW5jZSB0aGUgbG9uZ2VzdCBtYXRjaFxuICAgKiByb3V0aW5lcyBhbGxvdyBzY2FubmluZyB0byBzdHJzdGFydCArIE1BWF9NQVRDSCwgaWdub3JpbmcgbG9va2FoZWFkLlxuICAgKi9cbi8vICBpZiAocy5oaWdoX3dhdGVyIDwgcy53aW5kb3dfc2l6ZSkge1xuLy8gICAgY29uc3QgY3VyciA9IHMuc3Ryc3RhcnQgKyBzLmxvb2thaGVhZDtcbi8vICAgIGxldCBpbml0ID0gMDtcbi8vXG4vLyAgICBpZiAocy5oaWdoX3dhdGVyIDwgY3Vycikge1xuLy8gICAgICAvKiBQcmV2aW91cyBoaWdoIHdhdGVyIG1hcmsgYmVsb3cgY3VycmVudCBkYXRhIC0tIHplcm8gV0lOX0lOSVRcbi8vICAgICAgICogYnl0ZXMgb3IgdXAgdG8gZW5kIG9mIHdpbmRvdywgd2hpY2hldmVyIGlzIGxlc3MuXG4vLyAgICAgICAqL1xuLy8gICAgICBpbml0ID0gcy53aW5kb3dfc2l6ZSAtIGN1cnI7XG4vLyAgICAgIGlmIChpbml0ID4gV0lOX0lOSVQpXG4vLyAgICAgICAgaW5pdCA9IFdJTl9JTklUO1xuLy8gICAgICB6bWVtemVybyhzLT53aW5kb3cgKyBjdXJyLCAodW5zaWduZWQpaW5pdCk7XG4vLyAgICAgIHMtPmhpZ2hfd2F0ZXIgPSBjdXJyICsgaW5pdDtcbi8vICAgIH1cbi8vICAgIGVsc2UgaWYgKHMtPmhpZ2hfd2F0ZXIgPCAodWxnKWN1cnIgKyBXSU5fSU5JVCkge1xuLy8gICAgICAvKiBIaWdoIHdhdGVyIG1hcmsgYXQgb3IgYWJvdmUgY3VycmVudCBkYXRhLCBidXQgYmVsb3cgY3VycmVudCBkYXRhXG4vLyAgICAgICAqIHBsdXMgV0lOX0lOSVQgLS0gemVybyBvdXQgdG8gY3VycmVudCBkYXRhIHBsdXMgV0lOX0lOSVQsIG9yIHVwXG4vLyAgICAgICAqIHRvIGVuZCBvZiB3aW5kb3csIHdoaWNoZXZlciBpcyBsZXNzLlxuLy8gICAgICAgKi9cbi8vICAgICAgaW5pdCA9ICh1bGcpY3VyciArIFdJTl9JTklUIC0gcy0+aGlnaF93YXRlcjtcbi8vICAgICAgaWYgKGluaXQgPiBzLT53aW5kb3dfc2l6ZSAtIHMtPmhpZ2hfd2F0ZXIpXG4vLyAgICAgICAgaW5pdCA9IHMtPndpbmRvd19zaXplIC0gcy0+aGlnaF93YXRlcjtcbi8vICAgICAgem1lbXplcm8ocy0+d2luZG93ICsgcy0+aGlnaF93YXRlciwgKHVuc2lnbmVkKWluaXQpO1xuLy8gICAgICBzLT5oaWdoX3dhdGVyICs9IGluaXQ7XG4vLyAgICB9XG4vLyAgfVxuLy9cbi8vICBBc3NlcnQoKHVsZylzLT5zdHJzdGFydCA8PSBzLT53aW5kb3dfc2l6ZSAtIE1JTl9MT09LQUhFQUQsXG4vLyAgICBcIm5vdCBlbm91Z2ggcm9vbSBmb3Igc2VhcmNoXCIpO1xufTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5IHdpdGhvdXQgY29tcHJlc3Npb24gYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIHRoZSBpbnB1dCBzdHJlYW0sIHJldHVyblxuICogdGhlIGN1cnJlbnQgYmxvY2sgc3RhdGUuXG4gKlxuICogSW4gY2FzZSBkZWZsYXRlUGFyYW1zKCkgaXMgdXNlZCB0byBsYXRlciBzd2l0Y2ggdG8gYSBub24temVybyBjb21wcmVzc2lvblxuICogbGV2ZWwsIHMtPm1hdGNoZXMgKG90aGVyd2lzZSB1bnVzZWQgd2hlbiBzdG9yaW5nKSBrZWVwcyB0cmFjayBvZiB0aGUgbnVtYmVyXG4gKiBvZiBoYXNoIHRhYmxlIHNsaWRlcyB0byBwZXJmb3JtLiBJZiBzLT5tYXRjaGVzIGlzIDEsIHRoZW4gb25lIGhhc2ggdGFibGVcbiAqIHNsaWRlIHdpbGwgYmUgZG9uZSB3aGVuIHN3aXRjaGluZy4gSWYgcy0+bWF0Y2hlcyBpcyAyLCB0aGUgbWF4aW11bSB2YWx1ZVxuICogYWxsb3dlZCBoZXJlLCB0aGVuIHRoZSBoYXNoIHRhYmxlIHdpbGwgYmUgY2xlYXJlZCwgc2luY2UgdHdvIG9yIG1vcmUgc2xpZGVzXG4gKiBpcyB0aGUgc2FtZSBhcyBhIGNsZWFyLlxuICpcbiAqIGRlZmxhdGVfc3RvcmVkKCkgaXMgd3JpdHRlbiB0byBtaW5pbWl6ZSB0aGUgbnVtYmVyIG9mIHRpbWVzIGFuIGlucHV0IGJ5dGUgaXNcbiAqIGNvcGllZC4gSXQgaXMgbW9zdCBlZmZpY2llbnQgd2l0aCBsYXJnZSBpbnB1dCBhbmQgb3V0cHV0IGJ1ZmZlcnMsIHdoaWNoXG4gKiBtYXhpbWl6ZXMgdGhlIG9wcG9ydHVuaXRlcyB0byBoYXZlIGEgc2luZ2xlIGNvcHkgZnJvbSBuZXh0X2luIHRvIG5leHRfb3V0LlxuICovXG5jb25zdCBkZWZsYXRlX3N0b3JlZCA9IChzLCBmbHVzaCkgPT4ge1xuXG4gIC8qIFNtYWxsZXN0IHdvcnRoeSBibG9jayBzaXplIHdoZW4gbm90IGZsdXNoaW5nIG9yIGZpbmlzaGluZy4gQnkgZGVmYXVsdFxuICAgKiB0aGlzIGlzIDMySy4gVGhpcyBjYW4gYmUgYXMgc21hbGwgYXMgNTA3IGJ5dGVzIGZvciBtZW1MZXZlbCA9PSAxLiBGb3JcbiAgICogbGFyZ2UgaW5wdXQgYW5kIG91dHB1dCBidWZmZXJzLCB0aGUgc3RvcmVkIGJsb2NrIHNpemUgd2lsbCBiZSBsYXJnZXIuXG4gICAqL1xuICBsZXQgbWluX2Jsb2NrID0gcy5wZW5kaW5nX2J1Zl9zaXplIC0gNSA+IHMud19zaXplID8gcy53X3NpemUgOiBzLnBlbmRpbmdfYnVmX3NpemUgLSA1O1xuXG4gIC8qIENvcHkgYXMgbWFueSBtaW5fYmxvY2sgb3IgbGFyZ2VyIHN0b3JlZCBibG9ja3MgZGlyZWN0bHkgdG8gbmV4dF9vdXQgYXNcbiAgICogcG9zc2libGUuIElmIGZsdXNoaW5nLCBjb3B5IHRoZSByZW1haW5pbmcgYXZhaWxhYmxlIGlucHV0IHRvIG5leHRfb3V0IGFzXG4gICAqIHN0b3JlZCBibG9ja3MsIGlmIHRoZXJlIGlzIGVub3VnaCBzcGFjZS5cbiAgICovXG4gIGxldCBsZW4sIGxlZnQsIGhhdmUsIGxhc3QgPSAwO1xuICBsZXQgdXNlZCA9IHMuc3RybS5hdmFpbF9pbjtcbiAgZG8ge1xuICAgIC8qIFNldCBsZW4gdG8gdGhlIG1heGltdW0gc2l6ZSBibG9jayB0aGF0IHdlIGNhbiBjb3B5IGRpcmVjdGx5IHdpdGggdGhlXG4gICAgICogYXZhaWxhYmxlIGlucHV0IGRhdGEgYW5kIG91dHB1dCBzcGFjZS4gU2V0IGxlZnQgdG8gaG93IG11Y2ggb2YgdGhhdFxuICAgICAqIHdvdWxkIGJlIGNvcGllZCBmcm9tIHdoYXQncyBsZWZ0IGluIHRoZSB3aW5kb3cuXG4gICAgICovXG4gICAgbGVuID0gNjU1MzUvKiBNQVhfU1RPUkVEICovOyAgICAgLyogbWF4aW11bSBkZWZsYXRlIHN0b3JlZCBibG9jayBsZW5ndGggKi9cbiAgICBoYXZlID0gKHMuYmlfdmFsaWQgKyA0MikgPj4gMzsgICAgIC8qIG51bWJlciBvZiBoZWFkZXIgYnl0ZXMgKi9cbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA8IGhhdmUpIHsgICAgICAgICAvKiBuZWVkIHJvb20gZm9yIGhlYWRlciAqL1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICAgLyogbWF4aW11bSBzdG9yZWQgYmxvY2sgbGVuZ3RoIHRoYXQgd2lsbCBmaXQgaW4gYXZhaWxfb3V0OiAqL1xuICAgIGhhdmUgPSBzLnN0cm0uYXZhaWxfb3V0IC0gaGF2ZTtcbiAgICBsZWZ0ID0gcy5zdHJzdGFydCAtIHMuYmxvY2tfc3RhcnQ7ICAvKiBieXRlcyBsZWZ0IGluIHdpbmRvdyAqL1xuICAgIGlmIChsZW4gPiBsZWZ0ICsgcy5zdHJtLmF2YWlsX2luKSB7XG4gICAgICBsZW4gPSBsZWZ0ICsgcy5zdHJtLmF2YWlsX2luOyAgIC8qIGxpbWl0IGxlbiB0byB0aGUgaW5wdXQgKi9cbiAgICB9XG4gICAgaWYgKGxlbiA+IGhhdmUpIHtcbiAgICAgIGxlbiA9IGhhdmU7ICAgICAgICAgICAgIC8qIGxpbWl0IGxlbiB0byB0aGUgb3V0cHV0ICovXG4gICAgfVxuXG4gICAgLyogSWYgdGhlIHN0b3JlZCBibG9jayB3b3VsZCBiZSBsZXNzIHRoYW4gbWluX2Jsb2NrIGluIGxlbmd0aCwgb3IgaWZcbiAgICAgKiB1bmFibGUgdG8gY29weSBhbGwgb2YgdGhlIGF2YWlsYWJsZSBpbnB1dCB3aGVuIGZsdXNoaW5nLCB0aGVuIHRyeVxuICAgICAqIGNvcHlpbmcgdG8gdGhlIHdpbmRvdyBhbmQgdGhlIHBlbmRpbmcgYnVmZmVyIGluc3RlYWQuIEFsc28gZG9uJ3RcbiAgICAgKiB3cml0ZSBhbiBlbXB0eSBibG9jayB3aGVuIGZsdXNoaW5nIC0tIGRlZmxhdGUoKSBkb2VzIHRoYXQuXG4gICAgICovXG4gICAgaWYgKGxlbiA8IG1pbl9ibG9jayAmJiAoKGxlbiA9PT0gMCAmJiBmbHVzaCAhPT0gWl9GSU5JU0gpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBmbHVzaCA9PT0gWl9OT19GTFVTSCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgbGVuICE9PSBsZWZ0ICsgcy5zdHJtLmF2YWlsX2luKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLyogTWFrZSBhIGR1bW15IHN0b3JlZCBibG9jayBpbiBwZW5kaW5nIHRvIGdldCB0aGUgaGVhZGVyIGJ5dGVzLFxuICAgICAqIGluY2x1ZGluZyBhbnkgcGVuZGluZyBiaXRzLiBUaGlzIGFsc28gdXBkYXRlcyB0aGUgZGVidWdnaW5nIGNvdW50cy5cbiAgICAgKi9cbiAgICBsYXN0ID0gZmx1c2ggPT09IFpfRklOSVNIICYmIGxlbiA9PT0gbGVmdCArIHMuc3RybS5hdmFpbF9pbiA/IDEgOiAwO1xuICAgIF90cl9zdG9yZWRfYmxvY2socywgMCwgMCwgbGFzdCk7XG5cbiAgICAvKiBSZXBsYWNlIHRoZSBsZW5ndGhzIGluIHRoZSBkdW1teSBzdG9yZWQgYmxvY2sgd2l0aCBsZW4uICovXG4gICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcgLSA0XSA9IGxlbjtcbiAgICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZyAtIDNdID0gbGVuID4+IDg7XG4gICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcgLSAyXSA9IH5sZW47XG4gICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcgLSAxXSA9IH5sZW4gPj4gODtcblxuICAgIC8qIFdyaXRlIHRoZSBzdG9yZWQgYmxvY2sgaGVhZGVyIGJ5dGVzLiAqL1xuICAgIGZsdXNoX3BlbmRpbmcocy5zdHJtKTtcblxuLy8jaWZkZWYgWkxJQl9ERUJVR1xuLy8gICAgLyogVXBkYXRlIGRlYnVnZ2luZyBjb3VudHMgZm9yIHRoZSBkYXRhIGFib3V0IHRvIGJlIGNvcGllZC4gKi9cbi8vICAgIHMtPmNvbXByZXNzZWRfbGVuICs9IGxlbiA8PCAzO1xuLy8gICAgcy0+Yml0c19zZW50ICs9IGxlbiA8PCAzO1xuLy8jZW5kaWZcblxuICAgIC8qIENvcHkgdW5jb21wcmVzc2VkIGJ5dGVzIGZyb20gdGhlIHdpbmRvdyB0byBuZXh0X291dC4gKi9cbiAgICBpZiAobGVmdCkge1xuICAgICAgaWYgKGxlZnQgPiBsZW4pIHtcbiAgICAgICAgbGVmdCA9IGxlbjtcbiAgICAgIH1cbiAgICAgIC8vem1lbWNweShzLT5zdHJtLT5uZXh0X291dCwgcy0+d2luZG93ICsgcy0+YmxvY2tfc3RhcnQsIGxlZnQpO1xuICAgICAgcy5zdHJtLm91dHB1dC5zZXQocy53aW5kb3cuc3ViYXJyYXkocy5ibG9ja19zdGFydCwgcy5ibG9ja19zdGFydCArIGxlZnQpLCBzLnN0cm0ubmV4dF9vdXQpO1xuICAgICAgcy5zdHJtLm5leHRfb3V0ICs9IGxlZnQ7XG4gICAgICBzLnN0cm0uYXZhaWxfb3V0IC09IGxlZnQ7XG4gICAgICBzLnN0cm0udG90YWxfb3V0ICs9IGxlZnQ7XG4gICAgICBzLmJsb2NrX3N0YXJ0ICs9IGxlZnQ7XG4gICAgICBsZW4gLT0gbGVmdDtcbiAgICB9XG5cbiAgICAvKiBDb3B5IHVuY29tcHJlc3NlZCBieXRlcyBkaXJlY3RseSBmcm9tIG5leHRfaW4gdG8gbmV4dF9vdXQsIHVwZGF0aW5nXG4gICAgICogdGhlIGNoZWNrIHZhbHVlLlxuICAgICAqL1xuICAgIGlmIChsZW4pIHtcbiAgICAgIHJlYWRfYnVmKHMuc3RybSwgcy5zdHJtLm91dHB1dCwgcy5zdHJtLm5leHRfb3V0LCBsZW4pO1xuICAgICAgcy5zdHJtLm5leHRfb3V0ICs9IGxlbjtcbiAgICAgIHMuc3RybS5hdmFpbF9vdXQgLT0gbGVuO1xuICAgICAgcy5zdHJtLnRvdGFsX291dCArPSBsZW47XG4gICAgfVxuICB9IHdoaWxlIChsYXN0ID09PSAwKTtcblxuICAvKiBVcGRhdGUgdGhlIHNsaWRpbmcgd2luZG93IHdpdGggdGhlIGxhc3Qgcy0+d19zaXplIGJ5dGVzIG9mIHRoZSBjb3BpZWRcbiAgICogZGF0YSwgb3IgYXBwZW5kIGFsbCBvZiB0aGUgY29waWVkIGRhdGEgdG8gdGhlIGV4aXN0aW5nIHdpbmRvdyBpZiBsZXNzXG4gICAqIHRoYW4gcy0+d19zaXplIGJ5dGVzIHdlcmUgY29waWVkLiBBbHNvIHVwZGF0ZSB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRvXG4gICAqIGluc2VydCBpbiB0aGUgaGFzaCB0YWJsZXMsIGluIHRoZSBldmVudCB0aGF0IGRlZmxhdGVQYXJhbXMoKSBzd2l0Y2hlcyB0b1xuICAgKiBhIG5vbi16ZXJvIGNvbXByZXNzaW9uIGxldmVsLlxuICAgKi9cbiAgdXNlZCAtPSBzLnN0cm0uYXZhaWxfaW47ICAgIC8qIG51bWJlciBvZiBpbnB1dCBieXRlcyBkaXJlY3RseSBjb3BpZWQgKi9cbiAgaWYgKHVzZWQpIHtcbiAgICAvKiBJZiBhbnkgaW5wdXQgd2FzIHVzZWQsIHRoZW4gbm8gdW51c2VkIGlucHV0IHJlbWFpbnMgaW4gdGhlIHdpbmRvdyxcbiAgICAgKiB0aGVyZWZvcmUgcy0+YmxvY2tfc3RhcnQgPT0gcy0+c3Ryc3RhcnQuXG4gICAgICovXG4gICAgaWYgKHVzZWQgPj0gcy53X3NpemUpIHsgIC8qIHN1cHBsYW50IHRoZSBwcmV2aW91cyBoaXN0b3J5ICovXG4gICAgICBzLm1hdGNoZXMgPSAyOyAgICAgLyogY2xlYXIgaGFzaCAqL1xuICAgICAgLy96bWVtY3B5KHMtPndpbmRvdywgcy0+c3RybS0+bmV4dF9pbiAtIHMtPndfc2l6ZSwgcy0+d19zaXplKTtcbiAgICAgIHMud2luZG93LnNldChzLnN0cm0uaW5wdXQuc3ViYXJyYXkocy5zdHJtLm5leHRfaW4gLSBzLndfc2l6ZSwgcy5zdHJtLm5leHRfaW4pLCAwKTtcbiAgICAgIHMuc3Ryc3RhcnQgPSBzLndfc2l6ZTtcbiAgICAgIHMuaW5zZXJ0ID0gcy5zdHJzdGFydDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpZiAocy53aW5kb3dfc2l6ZSAtIHMuc3Ryc3RhcnQgPD0gdXNlZCkge1xuICAgICAgICAvKiBTbGlkZSB0aGUgd2luZG93IGRvd24uICovXG4gICAgICAgIHMuc3Ryc3RhcnQgLT0gcy53X3NpemU7XG4gICAgICAgIC8vem1lbWNweShzLT53aW5kb3csIHMtPndpbmRvdyArIHMtPndfc2l6ZSwgcy0+c3Ryc3RhcnQpO1xuICAgICAgICBzLndpbmRvdy5zZXQocy53aW5kb3cuc3ViYXJyYXkocy53X3NpemUsIHMud19zaXplICsgcy5zdHJzdGFydCksIDApO1xuICAgICAgICBpZiAocy5tYXRjaGVzIDwgMikge1xuICAgICAgICAgIHMubWF0Y2hlcysrOyAgIC8qIGFkZCBhIHBlbmRpbmcgc2xpZGVfaGFzaCgpICovXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMuaW5zZXJ0ID4gcy5zdHJzdGFydCkge1xuICAgICAgICAgIHMuaW5zZXJ0ID0gcy5zdHJzdGFydDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy96bWVtY3B5KHMtPndpbmRvdyArIHMtPnN0cnN0YXJ0LCBzLT5zdHJtLT5uZXh0X2luIC0gdXNlZCwgdXNlZCk7XG4gICAgICBzLndpbmRvdy5zZXQocy5zdHJtLmlucHV0LnN1YmFycmF5KHMuc3RybS5uZXh0X2luIC0gdXNlZCwgcy5zdHJtLm5leHRfaW4pLCBzLnN0cnN0YXJ0KTtcbiAgICAgIHMuc3Ryc3RhcnQgKz0gdXNlZDtcbiAgICAgIHMuaW5zZXJ0ICs9IHVzZWQgPiBzLndfc2l6ZSAtIHMuaW5zZXJ0ID8gcy53X3NpemUgLSBzLmluc2VydCA6IHVzZWQ7XG4gICAgfVxuICAgIHMuYmxvY2tfc3RhcnQgPSBzLnN0cnN0YXJ0O1xuICB9XG4gIGlmIChzLmhpZ2hfd2F0ZXIgPCBzLnN0cnN0YXJ0KSB7XG4gICAgcy5oaWdoX3dhdGVyID0gcy5zdHJzdGFydDtcbiAgfVxuXG4gIC8qIElmIHRoZSBsYXN0IGJsb2NrIHdhcyB3cml0dGVuIHRvIG5leHRfb3V0LCB0aGVuIGRvbmUuICovXG4gIGlmIChsYXN0KSB7XG4gICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FO1xuICB9XG5cbiAgLyogSWYgZmx1c2hpbmcgYW5kIGFsbCBpbnB1dCBoYXMgYmVlbiBjb25zdW1lZCwgdGhlbiBkb25lLiAqL1xuICBpZiAoZmx1c2ggIT09IFpfTk9fRkxVU0ggJiYgZmx1c2ggIT09IFpfRklOSVNIICYmXG4gICAgcy5zdHJtLmF2YWlsX2luID09PSAwICYmIHMuc3Ryc3RhcnQgPT09IHMuYmxvY2tfc3RhcnQpIHtcbiAgICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcbiAgfVxuXG4gIC8qIEZpbGwgdGhlIHdpbmRvdyB3aXRoIGFueSByZW1haW5pbmcgaW5wdXQuICovXG4gIGhhdmUgPSBzLndpbmRvd19zaXplIC0gcy5zdHJzdGFydDtcbiAgaWYgKHMuc3RybS5hdmFpbF9pbiA+IGhhdmUgJiYgcy5ibG9ja19zdGFydCA+PSBzLndfc2l6ZSkge1xuICAgIC8qIFNsaWRlIHRoZSB3aW5kb3cgZG93bi4gKi9cbiAgICBzLmJsb2NrX3N0YXJ0IC09IHMud19zaXplO1xuICAgIHMuc3Ryc3RhcnQgLT0gcy53X3NpemU7XG4gICAgLy96bWVtY3B5KHMtPndpbmRvdywgcy0+d2luZG93ICsgcy0+d19zaXplLCBzLT5zdHJzdGFydCk7XG4gICAgcy53aW5kb3cuc2V0KHMud2luZG93LnN1YmFycmF5KHMud19zaXplLCBzLndfc2l6ZSArIHMuc3Ryc3RhcnQpLCAwKTtcbiAgICBpZiAocy5tYXRjaGVzIDwgMikge1xuICAgICAgcy5tYXRjaGVzKys7ICAgICAgIC8qIGFkZCBhIHBlbmRpbmcgc2xpZGVfaGFzaCgpICovXG4gICAgfVxuICAgIGhhdmUgKz0gcy53X3NpemU7ICAgICAgLyogbW9yZSBzcGFjZSBub3cgKi9cbiAgICBpZiAocy5pbnNlcnQgPiBzLnN0cnN0YXJ0KSB7XG4gICAgICBzLmluc2VydCA9IHMuc3Ryc3RhcnQ7XG4gICAgfVxuICB9XG4gIGlmIChoYXZlID4gcy5zdHJtLmF2YWlsX2luKSB7XG4gICAgaGF2ZSA9IHMuc3RybS5hdmFpbF9pbjtcbiAgfVxuICBpZiAoaGF2ZSkge1xuICAgIHJlYWRfYnVmKHMuc3RybSwgcy53aW5kb3csIHMuc3Ryc3RhcnQsIGhhdmUpO1xuICAgIHMuc3Ryc3RhcnQgKz0gaGF2ZTtcbiAgICBzLmluc2VydCArPSBoYXZlID4gcy53X3NpemUgLSBzLmluc2VydCA/IHMud19zaXplIC0gcy5pbnNlcnQgOiBoYXZlO1xuICB9XG4gIGlmIChzLmhpZ2hfd2F0ZXIgPCBzLnN0cnN0YXJ0KSB7XG4gICAgcy5oaWdoX3dhdGVyID0gcy5zdHJzdGFydDtcbiAgfVxuXG4gIC8qIFRoZXJlIHdhcyBub3QgZW5vdWdoIGF2YWlsX291dCB0byB3cml0ZSBhIGNvbXBsZXRlIHdvcnRoeSBvciBmbHVzaGVkXG4gICAqIHN0b3JlZCBibG9jayB0byBuZXh0X291dC4gV3JpdGUgYSBzdG9yZWQgYmxvY2sgdG8gcGVuZGluZyBpbnN0ZWFkLCBpZiB3ZVxuICAgKiBoYXZlIGVub3VnaCBpbnB1dCBmb3IgYSB3b3J0aHkgYmxvY2ssIG9yIGlmIGZsdXNoaW5nIGFuZCB0aGVyZSBpcyBlbm91Z2hcbiAgICogcm9vbSBmb3IgdGhlIHJlbWFpbmluZyBpbnB1dCBhcyBhIHN0b3JlZCBibG9jayBpbiB0aGUgcGVuZGluZyBidWZmZXIuXG4gICAqL1xuICBoYXZlID0gKHMuYmlfdmFsaWQgKyA0MikgPj4gMzsgICAgIC8qIG51bWJlciBvZiBoZWFkZXIgYnl0ZXMgKi9cbiAgICAvKiBtYXhpbXVtIHN0b3JlZCBibG9jayBsZW5ndGggdGhhdCB3aWxsIGZpdCBpbiBwZW5kaW5nOiAqL1xuICBoYXZlID0gcy5wZW5kaW5nX2J1Zl9zaXplIC0gaGF2ZSA+IDY1NTM1LyogTUFYX1NUT1JFRCAqLyA/IDY1NTM1LyogTUFYX1NUT1JFRCAqLyA6IHMucGVuZGluZ19idWZfc2l6ZSAtIGhhdmU7XG4gIG1pbl9ibG9jayA9IGhhdmUgPiBzLndfc2l6ZSA/IHMud19zaXplIDogaGF2ZTtcbiAgbGVmdCA9IHMuc3Ryc3RhcnQgLSBzLmJsb2NrX3N0YXJ0O1xuICBpZiAobGVmdCA+PSBtaW5fYmxvY2sgfHxcbiAgICAgKChsZWZ0IHx8IGZsdXNoID09PSBaX0ZJTklTSCkgJiYgZmx1c2ggIT09IFpfTk9fRkxVU0ggJiZcbiAgICAgcy5zdHJtLmF2YWlsX2luID09PSAwICYmIGxlZnQgPD0gaGF2ZSkpIHtcbiAgICBsZW4gPSBsZWZ0ID4gaGF2ZSA/IGhhdmUgOiBsZWZ0O1xuICAgIGxhc3QgPSBmbHVzaCA9PT0gWl9GSU5JU0ggJiYgcy5zdHJtLmF2YWlsX2luID09PSAwICYmXG4gICAgICAgICBsZW4gPT09IGxlZnQgPyAxIDogMDtcbiAgICBfdHJfc3RvcmVkX2Jsb2NrKHMsIHMuYmxvY2tfc3RhcnQsIGxlbiwgbGFzdCk7XG4gICAgcy5ibG9ja19zdGFydCArPSBsZW47XG4gICAgZmx1c2hfcGVuZGluZyhzLnN0cm0pO1xuICB9XG5cbiAgLyogV2UndmUgZG9uZSBhbGwgd2UgY2FuIHdpdGggdGhlIGF2YWlsYWJsZSBpbnB1dCBhbmQgb3V0cHV0LiAqL1xuICByZXR1cm4gbGFzdCA/IEJTX0ZJTklTSF9TVEFSVEVEIDogQlNfTkVFRF9NT1JFO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbXByZXNzIGFzIG11Y2ggYXMgcG9zc2libGUgZnJvbSB0aGUgaW5wdXQgc3RyZWFtLCByZXR1cm4gdGhlIGN1cnJlbnRcbiAqIGJsb2NrIHN0YXRlLlxuICogVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBwZXJmb3JtIGxhenkgZXZhbHVhdGlvbiBvZiBtYXRjaGVzIGFuZCBpbnNlcnRzXG4gKiBuZXcgc3RyaW5ncyBpbiB0aGUgZGljdGlvbmFyeSBvbmx5IGZvciB1bm1hdGNoZWQgc3RyaW5ncyBvciBmb3Igc2hvcnRcbiAqIG1hdGNoZXMuIEl0IGlzIHVzZWQgb25seSBmb3IgdGhlIGZhc3QgY29tcHJlc3Npb24gb3B0aW9ucy5cbiAqL1xuY29uc3QgZGVmbGF0ZV9mYXN0ID0gKHMsIGZsdXNoKSA9PiB7XG5cbiAgbGV0IGhhc2hfaGVhZDsgICAgICAgIC8qIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW4gKi9cbiAgbGV0IGJmbHVzaDsgICAgICAgICAgIC8qIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZCAqL1xuXG4gIGZvciAoOzspIHtcbiAgICAvKiBNYWtlIHN1cmUgdGhhdCB3ZSBhbHdheXMgaGF2ZSBlbm91Z2ggbG9va2FoZWFkLCBleGNlcHRcbiAgICAgKiBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBmaWxlLiBXZSBuZWVkIE1BWF9NQVRDSCBieXRlc1xuICAgICAqIGZvciB0aGUgbmV4dCBtYXRjaCwgcGx1cyBNSU5fTUFUQ0ggYnl0ZXMgdG8gaW5zZXJ0IHRoZVxuICAgICAqIHN0cmluZyBmb2xsb3dpbmcgdGhlIG5leHQgbWF0Y2guXG4gICAgICovXG4gICAgaWYgKHMubG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCkge1xuICAgICAgZmlsbF93aW5kb3cocyk7XG4gICAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHtcbiAgICAgICAgYnJlYWs7IC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogSW5zZXJ0IHRoZSBzdHJpbmcgd2luZG93W3N0cnN0YXJ0IC4uIHN0cnN0YXJ0KzJdIGluIHRoZVxuICAgICAqIGRpY3Rpb25hcnksIGFuZCBzZXQgaGFzaF9oZWFkIHRvIHRoZSBoZWFkIG9mIHRoZSBoYXNoIGNoYWluOlxuICAgICAqL1xuICAgIGhhc2hfaGVhZCA9IDAvKk5JTCovO1xuICAgIGlmIChzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0gpIHtcbiAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovXG4gICAgICBzLmluc19oID0gSEFTSChzLCBzLmluc19oLCBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIIC0gMV0pO1xuICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzLnN0cnN0YXJ0O1xuICAgICAgLyoqKi9cbiAgICB9XG5cbiAgICAvKiBGaW5kIHRoZSBsb25nZXN0IG1hdGNoLCBkaXNjYXJkaW5nIHRob3NlIDw9IHByZXZfbGVuZ3RoLlxuICAgICAqIEF0IHRoaXMgcG9pbnQgd2UgaGF2ZSBhbHdheXMgbWF0Y2hfbGVuZ3RoIDwgTUlOX01BVENIXG4gICAgICovXG4gICAgaWYgKGhhc2hfaGVhZCAhPT0gMC8qTklMKi8gJiYgKChzLnN0cnN0YXJ0IC0gaGFzaF9oZWFkKSA8PSAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkpIHtcbiAgICAgIC8qIFRvIHNpbXBsaWZ5IHRoZSBjb2RlLCB3ZSBwcmV2ZW50IG1hdGNoZXMgd2l0aCB0aGUgc3RyaW5nXG4gICAgICAgKiBvZiB3aW5kb3cgaW5kZXggMCAoaW4gcGFydGljdWxhciB3ZSBoYXZlIHRvIGF2b2lkIGEgbWF0Y2hcbiAgICAgICAqIG9mIHRoZSBzdHJpbmcgd2l0aCBpdHNlbGYgYXQgdGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBmaWxlKS5cbiAgICAgICAqL1xuICAgICAgcy5tYXRjaF9sZW5ndGggPSBsb25nZXN0X21hdGNoKHMsIGhhc2hfaGVhZCk7XG4gICAgICAvKiBsb25nZXN0X21hdGNoKCkgc2V0cyBtYXRjaF9zdGFydCAqL1xuICAgIH1cbiAgICBpZiAocy5tYXRjaF9sZW5ndGggPj0gTUlOX01BVENIKSB7XG4gICAgICAvLyBjaGVja19tYXRjaChzLCBzLnN0cnN0YXJ0LCBzLm1hdGNoX3N0YXJ0LCBzLm1hdGNoX2xlbmd0aCk7IC8vIGZvciBkZWJ1ZyBvbmx5XG5cbiAgICAgIC8qKiogX3RyX3RhbGx5X2Rpc3Qocywgcy5zdHJzdGFydCAtIHMubWF0Y2hfc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICBzLm1hdGNoX2xlbmd0aCAtIE1JTl9NQVRDSCwgYmZsdXNoKTsgKioqL1xuICAgICAgYmZsdXNoID0gX3RyX3RhbGx5KHMsIHMuc3Ryc3RhcnQgLSBzLm1hdGNoX3N0YXJ0LCBzLm1hdGNoX2xlbmd0aCAtIE1JTl9NQVRDSCk7XG5cbiAgICAgIHMubG9va2FoZWFkIC09IHMubWF0Y2hfbGVuZ3RoO1xuXG4gICAgICAvKiBJbnNlcnQgbmV3IHN0cmluZ3MgaW4gdGhlIGhhc2ggdGFibGUgb25seSBpZiB0aGUgbWF0Y2ggbGVuZ3RoXG4gICAgICAgKiBpcyBub3QgdG9vIGxhcmdlLiBUaGlzIHNhdmVzIHRpbWUgYnV0IGRlZ3JhZGVzIGNvbXByZXNzaW9uLlxuICAgICAgICovXG4gICAgICBpZiAocy5tYXRjaF9sZW5ndGggPD0gcy5tYXhfbGF6eV9tYXRjaC8qbWF4X2luc2VydF9sZW5ndGgqLyAmJiBzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0gpIHtcbiAgICAgICAgcy5tYXRjaF9sZW5ndGgtLTsgLyogc3RyaW5nIGF0IHN0cnN0YXJ0IGFscmVhZHkgaW4gdGFibGUgKi9cbiAgICAgICAgZG8ge1xuICAgICAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICAgICAgICAvKioqIElOU0VSVF9TVFJJTkcocywgcy5zdHJzdGFydCwgaGFzaF9oZWFkKTsgKioqL1xuICAgICAgICAgIHMuaW5zX2ggPSBIQVNIKHMsIHMuaW5zX2gsIHMud2luZG93W3Muc3Ryc3RhcnQgKyBNSU5fTUFUQ0ggLSAxXSk7XG4gICAgICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDtcbiAgICAgICAgICAvKioqL1xuICAgICAgICAgIC8qIHN0cnN0YXJ0IG5ldmVyIGV4Y2VlZHMgV1NJWkUtTUFYX01BVENILCBzbyB0aGVyZSBhcmVcbiAgICAgICAgICAgKiBhbHdheXMgTUlOX01BVENIIGJ5dGVzIGFoZWFkLlxuICAgICAgICAgICAqL1xuICAgICAgICB9IHdoaWxlICgtLXMubWF0Y2hfbGVuZ3RoICE9PSAwKTtcbiAgICAgICAgcy5zdHJzdGFydCsrO1xuICAgICAgfSBlbHNlXG4gICAgICB7XG4gICAgICAgIHMuc3Ryc3RhcnQgKz0gcy5tYXRjaF9sZW5ndGg7XG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gMDtcbiAgICAgICAgcy5pbnNfaCA9IHMud2luZG93W3Muc3Ryc3RhcnRdO1xuICAgICAgICAvKiBVUERBVEVfSEFTSChzLCBzLmluc19oLCBzLndpbmRvd1tzLnN0cnN0YXJ0KzFdKTsgKi9cbiAgICAgICAgcy5pbnNfaCA9IEhBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbcy5zdHJzdGFydCArIDFdKTtcblxuLy8jaWYgTUlOX01BVENIICE9IDNcbi8vICAgICAgICAgICAgICAgIENhbGwgVVBEQVRFX0hBU0goKSBNSU5fTUFUQ0gtMyBtb3JlIHRpbWVzXG4vLyNlbmRpZlxuICAgICAgICAvKiBJZiBsb29rYWhlYWQgPCBNSU5fTUFUQ0gsIGluc19oIGlzIGdhcmJhZ2UsIGJ1dCBpdCBkb2VzIG5vdFxuICAgICAgICAgKiBtYXR0ZXIgc2luY2UgaXQgd2lsbCBiZSByZWNvbXB1dGVkIGF0IG5leHQgZGVmbGF0ZSBjYWxsLlxuICAgICAgICAgKi9cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLyogTm8gbWF0Y2gsIG91dHB1dCBhIGxpdGVyYWwgYnl0ZSAqL1xuICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsXCIlY1wiLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSkpO1xuICAgICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnRdLCBiZmx1c2gpOyAqKiovXG4gICAgICBiZmx1c2ggPSBfdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydF0pO1xuXG4gICAgICBzLmxvb2thaGVhZC0tO1xuICAgICAgcy5zdHJzdGFydCsrO1xuICAgIH1cbiAgICBpZiAoYmZsdXNoKSB7XG4gICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICAvKioqL1xuICAgIH1cbiAgfVxuICBzLmluc2VydCA9ICgocy5zdHJzdGFydCA8IChNSU5fTUFUQ0ggLSAxKSkgPyBzLnN0cnN0YXJ0IDogTUlOX01BVENIIC0gMSk7XG4gIGlmIChmbHVzaCA9PT0gWl9GSU5JU0gpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuICBpZiAocy5zeW1fbmV4dCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcbn07XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2FtZSBhcyBhYm92ZSwgYnV0IGFjaGlldmVzIGJldHRlciBjb21wcmVzc2lvbi4gV2UgdXNlIGEgbGF6eVxuICogZXZhbHVhdGlvbiBmb3IgbWF0Y2hlczogYSBtYXRjaCBpcyBmaW5hbGx5IGFkb3B0ZWQgb25seSBpZiB0aGVyZSBpc1xuICogbm8gYmV0dGVyIG1hdGNoIGF0IHRoZSBuZXh0IHdpbmRvdyBwb3NpdGlvbi5cbiAqL1xuY29uc3QgZGVmbGF0ZV9zbG93ID0gKHMsIGZsdXNoKSA9PiB7XG5cbiAgbGV0IGhhc2hfaGVhZDsgICAgICAgICAgLyogaGVhZCBvZiBoYXNoIGNoYWluICovXG4gIGxldCBiZmx1c2g7ICAgICAgICAgICAgICAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi9cblxuICBsZXQgbWF4X2luc2VydDtcblxuICAvKiBQcm9jZXNzIHRoZSBpbnB1dCBibG9jay4gKi9cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxuICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzXG4gICAgICogZm9yIHRoZSBuZXh0IG1hdGNoLCBwbHVzIE1JTl9NQVRDSCBieXRlcyB0byBpbnNlcnQgdGhlXG4gICAgICogc3RyaW5nIGZvbGxvd2luZyB0aGUgbmV4dCBtYXRjaC5cbiAgICAgKi9cbiAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEKSB7XG4gICAgICBmaWxsX3dpbmRvdyhzKTtcbiAgICAgIGlmIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gpIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkgeyBicmVhazsgfSAvKiBmbHVzaCB0aGUgY3VycmVudCBibG9jayAqL1xuICAgIH1cblxuICAgIC8qIEluc2VydCB0aGUgc3RyaW5nIHdpbmRvd1tzdHJzdGFydCAuLiBzdHJzdGFydCsyXSBpbiB0aGVcbiAgICAgKiBkaWN0aW9uYXJ5LCBhbmQgc2V0IGhhc2hfaGVhZCB0byB0aGUgaGVhZCBvZiB0aGUgaGFzaCBjaGFpbjpcbiAgICAgKi9cbiAgICBoYXNoX2hlYWQgPSAwLypOSUwqLztcbiAgICBpZiAocy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XG4gICAgICAvKioqIElOU0VSVF9TVFJJTkcocywgcy5zdHJzdGFydCwgaGFzaF9oZWFkKTsgKioqL1xuICAgICAgcy5pbnNfaCA9IEhBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCAtIDFdKTtcbiAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDtcbiAgICAgIC8qKiovXG4gICAgfVxuXG4gICAgLyogRmluZCB0aGUgbG9uZ2VzdCBtYXRjaCwgZGlzY2FyZGluZyB0aG9zZSA8PSBwcmV2X2xlbmd0aC5cbiAgICAgKi9cbiAgICBzLnByZXZfbGVuZ3RoID0gcy5tYXRjaF9sZW5ndGg7XG4gICAgcy5wcmV2X21hdGNoID0gcy5tYXRjaF9zdGFydDtcbiAgICBzLm1hdGNoX2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG5cbiAgICBpZiAoaGFzaF9oZWFkICE9PSAwLypOSUwqLyAmJiBzLnByZXZfbGVuZ3RoIDwgcy5tYXhfbGF6eV9tYXRjaCAmJlxuICAgICAgICBzLnN0cnN0YXJ0IC0gaGFzaF9oZWFkIDw9IChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpLypNQVhfRElTVChzKSovKSB7XG4gICAgICAvKiBUbyBzaW1wbGlmeSB0aGUgY29kZSwgd2UgcHJldmVudCBtYXRjaGVzIHdpdGggdGhlIHN0cmluZ1xuICAgICAgICogb2Ygd2luZG93IGluZGV4IDAgKGluIHBhcnRpY3VsYXIgd2UgaGF2ZSB0byBhdm9pZCBhIG1hdGNoXG4gICAgICAgKiBvZiB0aGUgc3RyaW5nIHdpdGggaXRzZWxmIGF0IHRoZSBzdGFydCBvZiB0aGUgaW5wdXQgZmlsZSkuXG4gICAgICAgKi9cbiAgICAgIHMubWF0Y2hfbGVuZ3RoID0gbG9uZ2VzdF9tYXRjaChzLCBoYXNoX2hlYWQpO1xuICAgICAgLyogbG9uZ2VzdF9tYXRjaCgpIHNldHMgbWF0Y2hfc3RhcnQgKi9cblxuICAgICAgaWYgKHMubWF0Y2hfbGVuZ3RoIDw9IDUgJiZcbiAgICAgICAgIChzLnN0cmF0ZWd5ID09PSBaX0ZJTFRFUkVEIHx8IChzLm1hdGNoX2xlbmd0aCA9PT0gTUlOX01BVENIICYmIHMuc3Ryc3RhcnQgLSBzLm1hdGNoX3N0YXJ0ID4gNDA5Ni8qVE9PX0ZBUiovKSkpIHtcblxuICAgICAgICAvKiBJZiBwcmV2X21hdGNoIGlzIGFsc28gTUlOX01BVENILCBtYXRjaF9zdGFydCBpcyBnYXJiYWdlXG4gICAgICAgICAqIGJ1dCB3ZSB3aWxsIGlnbm9yZSB0aGUgY3VycmVudCBtYXRjaCBhbnl3YXkuXG4gICAgICAgICAqL1xuICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG4gICAgICB9XG4gICAgfVxuICAgIC8qIElmIHRoZXJlIHdhcyBhIG1hdGNoIGF0IHRoZSBwcmV2aW91cyBzdGVwIGFuZCB0aGUgY3VycmVudFxuICAgICAqIG1hdGNoIGlzIG5vdCBiZXR0ZXIsIG91dHB1dCB0aGUgcHJldmlvdXMgbWF0Y2g6XG4gICAgICovXG4gICAgaWYgKHMucHJldl9sZW5ndGggPj0gTUlOX01BVENIICYmIHMubWF0Y2hfbGVuZ3RoIDw9IHMucHJldl9sZW5ndGgpIHtcbiAgICAgIG1heF9pbnNlcnQgPSBzLnN0cnN0YXJ0ICsgcy5sb29rYWhlYWQgLSBNSU5fTUFUQ0g7XG4gICAgICAvKiBEbyBub3QgaW5zZXJ0IHN0cmluZ3MgaW4gaGFzaCB0YWJsZSBiZXlvbmQgdGhpcy4gKi9cblxuICAgICAgLy9jaGVja19tYXRjaChzLCBzLnN0cnN0YXJ0LTEsIHMucHJldl9tYXRjaCwgcy5wcmV2X2xlbmd0aCk7XG5cbiAgICAgIC8qKipfdHJfdGFsbHlfZGlzdChzLCBzLnN0cnN0YXJ0IC0gMSAtIHMucHJldl9tYXRjaCxcbiAgICAgICAgICAgICAgICAgICAgIHMucHJldl9sZW5ndGggLSBNSU5fTUFUQ0gsIGJmbHVzaCk7KioqL1xuICAgICAgYmZsdXNoID0gX3RyX3RhbGx5KHMsIHMuc3Ryc3RhcnQgLSAxIC0gcy5wcmV2X21hdGNoLCBzLnByZXZfbGVuZ3RoIC0gTUlOX01BVENIKTtcbiAgICAgIC8qIEluc2VydCBpbiBoYXNoIHRhYmxlIGFsbCBzdHJpbmdzIHVwIHRvIHRoZSBlbmQgb2YgdGhlIG1hdGNoLlxuICAgICAgICogc3Ryc3RhcnQtMSBhbmQgc3Ryc3RhcnQgYXJlIGFscmVhZHkgaW5zZXJ0ZWQuIElmIHRoZXJlIGlzIG5vdFxuICAgICAgICogZW5vdWdoIGxvb2thaGVhZCwgdGhlIGxhc3QgdHdvIHN0cmluZ3MgYXJlIG5vdCBpbnNlcnRlZCBpblxuICAgICAgICogdGhlIGhhc2ggdGFibGUuXG4gICAgICAgKi9cbiAgICAgIHMubG9va2FoZWFkIC09IHMucHJldl9sZW5ndGggLSAxO1xuICAgICAgcy5wcmV2X2xlbmd0aCAtPSAyO1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoKytzLnN0cnN0YXJ0IDw9IG1heF9pbnNlcnQpIHtcbiAgICAgICAgICAvKioqIElOU0VSVF9TVFJJTkcocywgcy5zdHJzdGFydCwgaGFzaF9oZWFkKTsgKioqL1xuICAgICAgICAgIHMuaW5zX2ggPSBIQVNIKHMsIHMuaW5zX2gsIHMud2luZG93W3Muc3Ryc3RhcnQgKyBNSU5fTUFUQ0ggLSAxXSk7XG4gICAgICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDtcbiAgICAgICAgICAvKioqL1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlICgtLXMucHJldl9sZW5ndGggIT09IDApO1xuICAgICAgcy5tYXRjaF9hdmFpbGFibGUgPSAwO1xuICAgICAgcy5tYXRjaF9sZW5ndGggPSBNSU5fTUFUQ0ggLSAxO1xuICAgICAgcy5zdHJzdGFydCsrO1xuXG4gICAgICBpZiAoYmZsdXNoKSB7XG4gICAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgICAgfVxuICAgICAgICAvKioqL1xuICAgICAgfVxuXG4gICAgfSBlbHNlIGlmIChzLm1hdGNoX2F2YWlsYWJsZSkge1xuICAgICAgLyogSWYgdGhlcmUgd2FzIG5vIG1hdGNoIGF0IHRoZSBwcmV2aW91cyBwb3NpdGlvbiwgb3V0cHV0IGFcbiAgICAgICAqIHNpbmdsZSBsaXRlcmFsLiBJZiB0aGVyZSB3YXMgYSBtYXRjaCBidXQgdGhlIGN1cnJlbnQgbWF0Y2hcbiAgICAgICAqIGlzIGxvbmdlciwgdHJ1bmNhdGUgdGhlIHByZXZpb3VzIG1hdGNoIHRvIGEgc2luZ2xlIGxpdGVyYWwuXG4gICAgICAgKi9cbiAgICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0LTFdKSk7XG4gICAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydC0xXSwgYmZsdXNoKTsgKioqL1xuICAgICAgYmZsdXNoID0gX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnQgLSAxXSk7XG5cbiAgICAgIGlmIChiZmx1c2gpIHtcbiAgICAgICAgLyoqKiBGTFVTSF9CTE9DS19PTkxZKHMsIDApICoqKi9cbiAgICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICAgIC8qKiovXG4gICAgICB9XG4gICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgICBzLmxvb2thaGVhZC0tO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLyogVGhlcmUgaXMgbm8gcHJldmlvdXMgbWF0Y2ggdG8gY29tcGFyZSB3aXRoLCB3YWl0IGZvclxuICAgICAgICogdGhlIG5leHQgc3RlcCB0byBkZWNpZGUuXG4gICAgICAgKi9cbiAgICAgIHMubWF0Y2hfYXZhaWxhYmxlID0gMTtcbiAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICAgIHMubG9va2FoZWFkLS07XG4gICAgfVxuICB9XG4gIC8vQXNzZXJ0IChmbHVzaCAhPSBaX05PX0ZMVVNILCBcIm5vIGZsdXNoP1wiKTtcbiAgaWYgKHMubWF0Y2hfYXZhaWxhYmxlKSB7XG4gICAgLy9UcmFjZXZ2KChzdGRlcnIsXCIlY1wiLCBzLT53aW5kb3dbcy0+c3Ryc3RhcnQtMV0pKTtcbiAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydC0xXSwgYmZsdXNoKTsgKioqL1xuICAgIGJmbHVzaCA9IF90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0IC0gMV0pO1xuXG4gICAgcy5tYXRjaF9hdmFpbGFibGUgPSAwO1xuICB9XG4gIHMuaW5zZXJ0ID0gcy5zdHJzdGFydCA8IE1JTl9NQVRDSCAtIDEgPyBzLnN0cnN0YXJ0IDogTUlOX01BVENIIC0gMTtcbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7XG4gICAgfVxuICAgIC8qKiovXG4gICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FO1xuICB9XG4gIGlmIChzLnN5bV9uZXh0KSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgIH1cbiAgICAvKioqL1xuICB9XG5cbiAgcmV0dXJuIEJTX0JMT0NLX0RPTkU7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRm9yIFpfUkxFLCBzaW1wbHkgbG9vayBmb3IgcnVucyBvZiBieXRlcywgZ2VuZXJhdGUgbWF0Y2hlcyBvbmx5IG9mIGRpc3RhbmNlXG4gKiBvbmUuICBEbyBub3QgbWFpbnRhaW4gYSBoYXNoIHRhYmxlLiAgKEl0IHdpbGwgYmUgcmVnZW5lcmF0ZWQgaWYgdGhpcyBydW4gb2ZcbiAqIGRlZmxhdGUgc3dpdGNoZXMgYXdheSBmcm9tIFpfUkxFLilcbiAqL1xuY29uc3QgZGVmbGF0ZV9ybGUgPSAocywgZmx1c2gpID0+IHtcblxuICBsZXQgYmZsdXNoOyAgICAgICAgICAgIC8qIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZCAqL1xuICBsZXQgcHJldjsgICAgICAgICAgICAgIC8qIGJ5dGUgYXQgZGlzdGFuY2Ugb25lIHRvIG1hdGNoICovXG4gIGxldCBzY2FuLCBzdHJlbmQ7ICAgICAgLyogc2NhbiBnb2VzIHVwIHRvIHN0cmVuZCBmb3IgbGVuZ3RoIG9mIHJ1biAqL1xuXG4gIGNvbnN0IF93aW4gPSBzLndpbmRvdztcblxuICBmb3IgKDs7KSB7XG4gICAgLyogTWFrZSBzdXJlIHRoYXQgd2UgYWx3YXlzIGhhdmUgZW5vdWdoIGxvb2thaGVhZCwgZXhjZXB0XG4gICAgICogYXQgdGhlIGVuZCBvZiB0aGUgaW5wdXQgZmlsZS4gV2UgbmVlZCBNQVhfTUFUQ0ggYnl0ZXNcbiAgICAgKiBmb3IgdGhlIGxvbmdlc3QgcnVuLCBwbHVzIG9uZSBmb3IgdGhlIHVucm9sbGVkIGxvb3AuXG4gICAgICovXG4gICAgaWYgKHMubG9va2FoZWFkIDw9IE1BWF9NQVRDSCkge1xuICAgICAgZmlsbF93aW5kb3cocyk7XG4gICAgICBpZiAocy5sb29rYWhlYWQgPD0gTUFYX01BVENIICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHsgYnJlYWs7IH0gLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cbiAgICB9XG5cbiAgICAvKiBTZWUgaG93IG1hbnkgdGltZXMgdGhlIHByZXZpb3VzIGJ5dGUgcmVwZWF0cyAqL1xuICAgIHMubWF0Y2hfbGVuZ3RoID0gMDtcbiAgICBpZiAocy5sb29rYWhlYWQgPj0gTUlOX01BVENIICYmIHMuc3Ryc3RhcnQgPiAwKSB7XG4gICAgICBzY2FuID0gcy5zdHJzdGFydCAtIDE7XG4gICAgICBwcmV2ID0gX3dpbltzY2FuXTtcbiAgICAgIGlmIChwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSkge1xuICAgICAgICBzdHJlbmQgPSBzLnN0cnN0YXJ0ICsgTUFYX01BVENIO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgLypqc2hpbnQgbm9lbXB0eTpmYWxzZSovXG4gICAgICAgIH0gd2hpbGUgKHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiZcbiAgICAgICAgICAgICAgICAgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJlxuICAgICAgICAgICAgICAgICBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmXG4gICAgICAgICAgICAgICAgIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiZcbiAgICAgICAgICAgICAgICAgc2NhbiA8IHN0cmVuZCk7XG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gTUFYX01BVENIIC0gKHN0cmVuZCAtIHNjYW4pO1xuICAgICAgICBpZiAocy5tYXRjaF9sZW5ndGggPiBzLmxvb2thaGVhZCkge1xuICAgICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gcy5sb29rYWhlYWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vQXNzZXJ0KHNjYW4gPD0gcy0+d2luZG93Kyh1SW50KShzLT53aW5kb3dfc2l6ZS0xKSwgXCJ3aWxkIHNjYW5cIik7XG4gICAgfVxuXG4gICAgLyogRW1pdCBtYXRjaCBpZiBoYXZlIHJ1biBvZiBNSU5fTUFUQ0ggb3IgbG9uZ2VyLCBlbHNlIGVtaXQgbGl0ZXJhbCAqL1xuICAgIGlmIChzLm1hdGNoX2xlbmd0aCA+PSBNSU5fTUFUQ0gpIHtcbiAgICAgIC8vY2hlY2tfbWF0Y2gocywgcy5zdHJzdGFydCwgcy5zdHJzdGFydCAtIDEsIHMubWF0Y2hfbGVuZ3RoKTtcblxuICAgICAgLyoqKiBfdHJfdGFsbHlfZGlzdChzLCAxLCBzLm1hdGNoX2xlbmd0aCAtIE1JTl9NQVRDSCwgYmZsdXNoKTsgKioqL1xuICAgICAgYmZsdXNoID0gX3RyX3RhbGx5KHMsIDEsIHMubWF0Y2hfbGVuZ3RoIC0gTUlOX01BVENIKTtcblxuICAgICAgcy5sb29rYWhlYWQgLT0gcy5tYXRjaF9sZW5ndGg7XG4gICAgICBzLnN0cnN0YXJ0ICs9IHMubWF0Y2hfbGVuZ3RoO1xuICAgICAgcy5tYXRjaF9sZW5ndGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiBObyBtYXRjaCwgb3V0cHV0IGEgbGl0ZXJhbCBieXRlICovXG4gICAgICAvL1RyYWNldnYoKHN0ZGVycixcIiVjXCIsIHMtPndpbmRvd1tzLT5zdHJzdGFydF0pKTtcbiAgICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSwgYmZsdXNoKTsgKioqL1xuICAgICAgYmZsdXNoID0gX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnRdKTtcblxuICAgICAgcy5sb29rYWhlYWQtLTtcbiAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICB9XG4gICAgaWYgKGJmbHVzaCkge1xuICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgLyoqKi9cbiAgICB9XG4gIH1cbiAgcy5pbnNlcnQgPSAwO1xuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIKSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgdHJ1ZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDtcbiAgICB9XG4gICAgLyoqKi9cbiAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7XG4gIH1cbiAgaWYgKHMuc3ltX25leHQpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgfVxuICAgIC8qKiovXG4gIH1cbiAgcmV0dXJuIEJTX0JMT0NLX0RPTkU7XG59O1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZvciBaX0hVRkZNQU5fT05MWSwgZG8gbm90IGxvb2sgZm9yIG1hdGNoZXMuICBEbyBub3QgbWFpbnRhaW4gYSBoYXNoIHRhYmxlLlxuICogKEl0IHdpbGwgYmUgcmVnZW5lcmF0ZWQgaWYgdGhpcyBydW4gb2YgZGVmbGF0ZSBzd2l0Y2hlcyBhd2F5IGZyb20gSHVmZm1hbi4pXG4gKi9cbmNvbnN0IGRlZmxhdGVfaHVmZiA9IChzLCBmbHVzaCkgPT4ge1xuXG4gIGxldCBiZmx1c2g7ICAgICAgICAgICAgIC8qIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZCAqL1xuXG4gIGZvciAoOzspIHtcbiAgICAvKiBNYWtlIHN1cmUgdGhhdCB3ZSBoYXZlIGEgbGl0ZXJhbCB0byB3cml0ZS4gKi9cbiAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHtcbiAgICAgIGZpbGxfd2luZG93KHMpO1xuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7XG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9OT19GTFVTSCkge1xuICAgICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7ICAgICAgLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBPdXRwdXQgYSBsaXRlcmFsIGJ5dGUgKi9cbiAgICBzLm1hdGNoX2xlbmd0aCA9IDA7XG4gICAgLy9UcmFjZXZ2KChzdGRlcnIsXCIlY1wiLCBzLT53aW5kb3dbcy0+c3Ryc3RhcnRdKSk7XG4gICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnRdLCBiZmx1c2gpOyAqKiovXG4gICAgYmZsdXNoID0gX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnRdKTtcbiAgICBzLmxvb2thaGVhZC0tO1xuICAgIHMuc3Ryc3RhcnQrKztcbiAgICBpZiAoYmZsdXNoKSB7XG4gICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICAvKioqL1xuICAgIH1cbiAgfVxuICBzLmluc2VydCA9IDA7XG4gIGlmIChmbHVzaCA9PT0gWl9GSU5JU0gpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuICBpZiAocy5zeW1fbmV4dCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcbn07XG5cbi8qIFZhbHVlcyBmb3IgbWF4X2xhenlfbWF0Y2gsIGdvb2RfbWF0Y2ggYW5kIG1heF9jaGFpbl9sZW5ndGgsIGRlcGVuZGluZyBvblxuICogdGhlIGRlc2lyZWQgcGFjayBsZXZlbCAoMC4uOSkuIFRoZSB2YWx1ZXMgZ2l2ZW4gYmVsb3cgaGF2ZSBiZWVuIHR1bmVkIHRvXG4gKiBleGNsdWRlIHdvcnN0IGNhc2UgcGVyZm9ybWFuY2UgZm9yIHBhdGhvbG9naWNhbCBmaWxlcy4gQmV0dGVyIHZhbHVlcyBtYXkgYmVcbiAqIGZvdW5kIGZvciBzcGVjaWZpYyBmaWxlcy5cbiAqL1xuZnVuY3Rpb24gQ29uZmlnKGdvb2RfbGVuZ3RoLCBtYXhfbGF6eSwgbmljZV9sZW5ndGgsIG1heF9jaGFpbiwgZnVuYykge1xuXG4gIHRoaXMuZ29vZF9sZW5ndGggPSBnb29kX2xlbmd0aDtcbiAgdGhpcy5tYXhfbGF6eSA9IG1heF9sYXp5O1xuICB0aGlzLm5pY2VfbGVuZ3RoID0gbmljZV9sZW5ndGg7XG4gIHRoaXMubWF4X2NoYWluID0gbWF4X2NoYWluO1xuICB0aGlzLmZ1bmMgPSBmdW5jO1xufVxuXG5jb25zdCBjb25maWd1cmF0aW9uX3RhYmxlID0gW1xuICAvKiAgICAgIGdvb2QgbGF6eSBuaWNlIGNoYWluICovXG4gIG5ldyBDb25maWcoMCwgMCwgMCwgMCwgZGVmbGF0ZV9zdG9yZWQpLCAgICAgICAgICAvKiAwIHN0b3JlIG9ubHkgKi9cbiAgbmV3IENvbmZpZyg0LCA0LCA4LCA0LCBkZWZsYXRlX2Zhc3QpLCAgICAgICAgICAgIC8qIDEgbWF4IHNwZWVkLCBubyBsYXp5IG1hdGNoZXMgKi9cbiAgbmV3IENvbmZpZyg0LCA1LCAxNiwgOCwgZGVmbGF0ZV9mYXN0KSwgICAgICAgICAgIC8qIDIgKi9cbiAgbmV3IENvbmZpZyg0LCA2LCAzMiwgMzIsIGRlZmxhdGVfZmFzdCksICAgICAgICAgIC8qIDMgKi9cblxuICBuZXcgQ29uZmlnKDQsIDQsIDE2LCAxNiwgZGVmbGF0ZV9zbG93KSwgICAgICAgICAgLyogNCBsYXp5IG1hdGNoZXMgKi9cbiAgbmV3IENvbmZpZyg4LCAxNiwgMzIsIDMyLCBkZWZsYXRlX3Nsb3cpLCAgICAgICAgIC8qIDUgKi9cbiAgbmV3IENvbmZpZyg4LCAxNiwgMTI4LCAxMjgsIGRlZmxhdGVfc2xvdyksICAgICAgIC8qIDYgKi9cbiAgbmV3IENvbmZpZyg4LCAzMiwgMTI4LCAyNTYsIGRlZmxhdGVfc2xvdyksICAgICAgIC8qIDcgKi9cbiAgbmV3IENvbmZpZygzMiwgMTI4LCAyNTgsIDEwMjQsIGRlZmxhdGVfc2xvdyksICAgIC8qIDggKi9cbiAgbmV3IENvbmZpZygzMiwgMjU4LCAyNTgsIDQwOTYsIGRlZmxhdGVfc2xvdykgICAgIC8qIDkgbWF4IGNvbXByZXNzaW9uICovXG5dO1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSB0aGUgXCJsb25nZXN0IG1hdGNoXCIgcm91dGluZXMgZm9yIGEgbmV3IHpsaWIgc3RyZWFtXG4gKi9cbmNvbnN0IGxtX2luaXQgPSAocykgPT4ge1xuXG4gIHMud2luZG93X3NpemUgPSAyICogcy53X3NpemU7XG5cbiAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovXG4gIHplcm8ocy5oZWFkKTsgLy8gRmlsbCB3aXRoIE5JTCAoPSAwKTtcblxuICAvKiBTZXQgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzOlxuICAgKi9cbiAgcy5tYXhfbGF6eV9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubWF4X2xhenk7XG4gIHMuZ29vZF9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0uZ29vZF9sZW5ndGg7XG4gIHMubmljZV9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubmljZV9sZW5ndGg7XG4gIHMubWF4X2NoYWluX2xlbmd0aCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubWF4X2NoYWluO1xuXG4gIHMuc3Ryc3RhcnQgPSAwO1xuICBzLmJsb2NrX3N0YXJ0ID0gMDtcbiAgcy5sb29rYWhlYWQgPSAwO1xuICBzLmluc2VydCA9IDA7XG4gIHMubWF0Y2hfbGVuZ3RoID0gcy5wcmV2X2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG4gIHMubWF0Y2hfYXZhaWxhYmxlID0gMDtcbiAgcy5pbnNfaCA9IDA7XG59O1xuXG5cbmZ1bmN0aW9uIERlZmxhdGVTdGF0ZSgpIHtcbiAgdGhpcy5zdHJtID0gbnVsbDsgICAgICAgICAgICAvKiBwb2ludGVyIGJhY2sgdG8gdGhpcyB6bGliIHN0cmVhbSAqL1xuICB0aGlzLnN0YXR1cyA9IDA7ICAgICAgICAgICAgLyogYXMgdGhlIG5hbWUgaW1wbGllcyAqL1xuICB0aGlzLnBlbmRpbmdfYnVmID0gbnVsbDsgICAgICAvKiBvdXRwdXQgc3RpbGwgcGVuZGluZyAqL1xuICB0aGlzLnBlbmRpbmdfYnVmX3NpemUgPSAwOyAgLyogc2l6ZSBvZiBwZW5kaW5nX2J1ZiAqL1xuICB0aGlzLnBlbmRpbmdfb3V0ID0gMDsgICAgICAgLyogbmV4dCBwZW5kaW5nIGJ5dGUgdG8gb3V0cHV0IHRvIHRoZSBzdHJlYW0gKi9cbiAgdGhpcy5wZW5kaW5nID0gMDsgICAgICAgICAgIC8qIG5iIG9mIGJ5dGVzIGluIHRoZSBwZW5kaW5nIGJ1ZmZlciAqL1xuICB0aGlzLndyYXAgPSAwOyAgICAgICAgICAgICAgLyogYml0IDAgdHJ1ZSBmb3IgemxpYiwgYml0IDEgdHJ1ZSBmb3IgZ3ppcCAqL1xuICB0aGlzLmd6aGVhZCA9IG51bGw7ICAgICAgICAgLyogZ3ppcCBoZWFkZXIgaW5mb3JtYXRpb24gdG8gd3JpdGUgKi9cbiAgdGhpcy5nemluZGV4ID0gMDsgICAgICAgICAgIC8qIHdoZXJlIGluIGV4dHJhLCBuYW1lLCBvciBjb21tZW50ICovXG4gIHRoaXMubWV0aG9kID0gWl9ERUZMQVRFRDsgLyogY2FuIG9ubHkgYmUgREVGTEFURUQgKi9cbiAgdGhpcy5sYXN0X2ZsdXNoID0gLTE7ICAgLyogdmFsdWUgb2YgZmx1c2ggcGFyYW0gZm9yIHByZXZpb3VzIGRlZmxhdGUgY2FsbCAqL1xuXG4gIHRoaXMud19zaXplID0gMDsgIC8qIExaNzcgd2luZG93IHNpemUgKDMySyBieSBkZWZhdWx0KSAqL1xuICB0aGlzLndfYml0cyA9IDA7ICAvKiBsb2cyKHdfc2l6ZSkgICg4Li4xNikgKi9cbiAgdGhpcy53X21hc2sgPSAwOyAgLyogd19zaXplIC0gMSAqL1xuXG4gIHRoaXMud2luZG93ID0gbnVsbDtcbiAgLyogU2xpZGluZyB3aW5kb3cuIElucHV0IGJ5dGVzIGFyZSByZWFkIGludG8gdGhlIHNlY29uZCBoYWxmIG9mIHRoZSB3aW5kb3csXG4gICAqIGFuZCBtb3ZlIHRvIHRoZSBmaXJzdCBoYWxmIGxhdGVyIHRvIGtlZXAgYSBkaWN0aW9uYXJ5IG9mIGF0IGxlYXN0IHdTaXplXG4gICAqIGJ5dGVzLiBXaXRoIHRoaXMgb3JnYW5pemF0aW9uLCBtYXRjaGVzIGFyZSBsaW1pdGVkIHRvIGEgZGlzdGFuY2Ugb2ZcbiAgICogd1NpemUtTUFYX01BVENIIGJ5dGVzLCBidXQgdGhpcyBlbnN1cmVzIHRoYXQgSU8gaXMgYWx3YXlzXG4gICAqIHBlcmZvcm1lZCB3aXRoIGEgbGVuZ3RoIG11bHRpcGxlIG9mIHRoZSBibG9jayBzaXplLlxuICAgKi9cblxuICB0aGlzLndpbmRvd19zaXplID0gMDtcbiAgLyogQWN0dWFsIHNpemUgb2Ygd2luZG93OiAyKndTaXplLCBleGNlcHQgd2hlbiB0aGUgdXNlciBpbnB1dCBidWZmZXJcbiAgICogaXMgZGlyZWN0bHkgdXNlZCBhcyBzbGlkaW5nIHdpbmRvdy5cbiAgICovXG5cbiAgdGhpcy5wcmV2ID0gbnVsbDtcbiAgLyogTGluayB0byBvbGRlciBzdHJpbmcgd2l0aCBzYW1lIGhhc2ggaW5kZXguIFRvIGxpbWl0IHRoZSBzaXplIG9mIHRoaXNcbiAgICogYXJyYXkgdG8gNjRLLCB0aGlzIGxpbmsgaXMgbWFpbnRhaW5lZCBvbmx5IGZvciB0aGUgbGFzdCAzMksgc3RyaW5ncy5cbiAgICogQW4gaW5kZXggaW4gdGhpcyBhcnJheSBpcyB0aHVzIGEgd2luZG93IGluZGV4IG1vZHVsbyAzMksuXG4gICAqL1xuXG4gIHRoaXMuaGVhZCA9IG51bGw7ICAgLyogSGVhZHMgb2YgdGhlIGhhc2ggY2hhaW5zIG9yIE5JTC4gKi9cblxuICB0aGlzLmluc19oID0gMDsgICAgICAgLyogaGFzaCBpbmRleCBvZiBzdHJpbmcgdG8gYmUgaW5zZXJ0ZWQgKi9cbiAgdGhpcy5oYXNoX3NpemUgPSAwOyAgIC8qIG51bWJlciBvZiBlbGVtZW50cyBpbiBoYXNoIHRhYmxlICovXG4gIHRoaXMuaGFzaF9iaXRzID0gMDsgICAvKiBsb2cyKGhhc2hfc2l6ZSkgKi9cbiAgdGhpcy5oYXNoX21hc2sgPSAwOyAgIC8qIGhhc2hfc2l6ZS0xICovXG5cbiAgdGhpcy5oYXNoX3NoaWZ0ID0gMDtcbiAgLyogTnVtYmVyIG9mIGJpdHMgYnkgd2hpY2ggaW5zX2ggbXVzdCBiZSBzaGlmdGVkIGF0IGVhY2ggaW5wdXRcbiAgICogc3RlcC4gSXQgbXVzdCBiZSBzdWNoIHRoYXQgYWZ0ZXIgTUlOX01BVENIIHN0ZXBzLCB0aGUgb2xkZXN0XG4gICAqIGJ5dGUgbm8gbG9uZ2VyIHRha2VzIHBhcnQgaW4gdGhlIGhhc2gga2V5LCB0aGF0IGlzOlxuICAgKiAgIGhhc2hfc2hpZnQgKiBNSU5fTUFUQ0ggPj0gaGFzaF9iaXRzXG4gICAqL1xuXG4gIHRoaXMuYmxvY2tfc3RhcnQgPSAwO1xuICAvKiBXaW5kb3cgcG9zaXRpb24gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgY3VycmVudCBvdXRwdXQgYmxvY2suIEdldHNcbiAgICogbmVnYXRpdmUgd2hlbiB0aGUgd2luZG93IGlzIG1vdmVkIGJhY2t3YXJkcy5cbiAgICovXG5cbiAgdGhpcy5tYXRjaF9sZW5ndGggPSAwOyAgICAgIC8qIGxlbmd0aCBvZiBiZXN0IG1hdGNoICovXG4gIHRoaXMucHJldl9tYXRjaCA9IDA7ICAgICAgICAvKiBwcmV2aW91cyBtYXRjaCAqL1xuICB0aGlzLm1hdGNoX2F2YWlsYWJsZSA9IDA7ICAgLyogc2V0IGlmIHByZXZpb3VzIG1hdGNoIGV4aXN0cyAqL1xuICB0aGlzLnN0cnN0YXJ0ID0gMDsgICAgICAgICAgLyogc3RhcnQgb2Ygc3RyaW5nIHRvIGluc2VydCAqL1xuICB0aGlzLm1hdGNoX3N0YXJ0ID0gMDsgICAgICAgLyogc3RhcnQgb2YgbWF0Y2hpbmcgc3RyaW5nICovXG4gIHRoaXMubG9va2FoZWFkID0gMDsgICAgICAgICAvKiBudW1iZXIgb2YgdmFsaWQgYnl0ZXMgYWhlYWQgaW4gd2luZG93ICovXG5cbiAgdGhpcy5wcmV2X2xlbmd0aCA9IDA7XG4gIC8qIExlbmd0aCBvZiB0aGUgYmVzdCBtYXRjaCBhdCBwcmV2aW91cyBzdGVwLiBNYXRjaGVzIG5vdCBncmVhdGVyIHRoYW4gdGhpc1xuICAgKiBhcmUgZGlzY2FyZGVkLiBUaGlzIGlzIHVzZWQgaW4gdGhlIGxhenkgbWF0Y2ggZXZhbHVhdGlvbi5cbiAgICovXG5cbiAgdGhpcy5tYXhfY2hhaW5fbGVuZ3RoID0gMDtcbiAgLyogVG8gc3BlZWQgdXAgZGVmbGF0aW9uLCBoYXNoIGNoYWlucyBhcmUgbmV2ZXIgc2VhcmNoZWQgYmV5b25kIHRoaXNcbiAgICogbGVuZ3RoLiAgQSBoaWdoZXIgbGltaXQgaW1wcm92ZXMgY29tcHJlc3Npb24gcmF0aW8gYnV0IGRlZ3JhZGVzIHRoZVxuICAgKiBzcGVlZC5cbiAgICovXG5cbiAgdGhpcy5tYXhfbGF6eV9tYXRjaCA9IDA7XG4gIC8qIEF0dGVtcHQgdG8gZmluZCBhIGJldHRlciBtYXRjaCBvbmx5IHdoZW4gdGhlIGN1cnJlbnQgbWF0Y2ggaXMgc3RyaWN0bHlcbiAgICogc21hbGxlciB0aGFuIHRoaXMgdmFsdWUuIFRoaXMgbWVjaGFuaXNtIGlzIHVzZWQgb25seSBmb3IgY29tcHJlc3Npb25cbiAgICogbGV2ZWxzID49IDQuXG4gICAqL1xuICAvLyBUaGF0J3MgYWxpYXMgdG8gbWF4X2xhenlfbWF0Y2gsIGRvbid0IHVzZSBkaXJlY3RseVxuICAvL3RoaXMubWF4X2luc2VydF9sZW5ndGggPSAwO1xuICAvKiBJbnNlcnQgbmV3IHN0cmluZ3MgaW4gdGhlIGhhc2ggdGFibGUgb25seSBpZiB0aGUgbWF0Y2ggbGVuZ3RoIGlzIG5vdFxuICAgKiBncmVhdGVyIHRoYW4gdGhpcyBsZW5ndGguIFRoaXMgc2F2ZXMgdGltZSBidXQgZGVncmFkZXMgY29tcHJlc3Npb24uXG4gICAqIG1heF9pbnNlcnRfbGVuZ3RoIGlzIHVzZWQgb25seSBmb3IgY29tcHJlc3Npb24gbGV2ZWxzIDw9IDMuXG4gICAqL1xuXG4gIHRoaXMubGV2ZWwgPSAwOyAgICAgLyogY29tcHJlc3Npb24gbGV2ZWwgKDEuLjkpICovXG4gIHRoaXMuc3RyYXRlZ3kgPSAwOyAgLyogZmF2b3Igb3IgZm9yY2UgSHVmZm1hbiBjb2RpbmcqL1xuXG4gIHRoaXMuZ29vZF9tYXRjaCA9IDA7XG4gIC8qIFVzZSBhIGZhc3RlciBzZWFyY2ggd2hlbiB0aGUgcHJldmlvdXMgbWF0Y2ggaXMgbG9uZ2VyIHRoYW4gdGhpcyAqL1xuXG4gIHRoaXMubmljZV9tYXRjaCA9IDA7IC8qIFN0b3Agc2VhcmNoaW5nIHdoZW4gY3VycmVudCBtYXRjaCBleGNlZWRzIHRoaXMgKi9cblxuICAgICAgICAgICAgICAvKiB1c2VkIGJ5IHRyZWVzLmM6ICovXG5cbiAgLyogRGlkbid0IHVzZSBjdF9kYXRhIHR5cGVkZWYgYmVsb3cgdG8gc3VwcHJlc3MgY29tcGlsZXIgd2FybmluZyAqL1xuXG4gIC8vIHN0cnVjdCBjdF9kYXRhX3MgZHluX2x0cmVlW0hFQVBfU0laRV07ICAgLyogbGl0ZXJhbCBhbmQgbGVuZ3RoIHRyZWUgKi9cbiAgLy8gc3RydWN0IGN0X2RhdGFfcyBkeW5fZHRyZWVbMipEX0NPREVTKzFdOyAvKiBkaXN0YW5jZSB0cmVlICovXG4gIC8vIHN0cnVjdCBjdF9kYXRhX3MgYmxfdHJlZVsyKkJMX0NPREVTKzFdOyAgLyogSHVmZm1hbiB0cmVlIGZvciBiaXQgbGVuZ3RocyAqL1xuXG4gIC8vIFVzZSBmbGF0IGFycmF5IG9mIERPVUJMRSBzaXplLCB3aXRoIGludGVybGVhdmVkIGZhdGEsXG4gIC8vIGJlY2F1c2UgSlMgZG9lcyBub3Qgc3VwcG9ydCBlZmZlY3RpdmVcbiAgdGhpcy5keW5fbHRyZWUgID0gbmV3IFVpbnQxNkFycmF5KEhFQVBfU0laRSAqIDIpO1xuICB0aGlzLmR5bl9kdHJlZSAgPSBuZXcgVWludDE2QXJyYXkoKDIgKiBEX0NPREVTICsgMSkgKiAyKTtcbiAgdGhpcy5ibF90cmVlICAgID0gbmV3IFVpbnQxNkFycmF5KCgyICogQkxfQ09ERVMgKyAxKSAqIDIpO1xuICB6ZXJvKHRoaXMuZHluX2x0cmVlKTtcbiAgemVybyh0aGlzLmR5bl9kdHJlZSk7XG4gIHplcm8odGhpcy5ibF90cmVlKTtcblxuICB0aGlzLmxfZGVzYyAgID0gbnVsbDsgICAgICAgICAvKiBkZXNjLiBmb3IgbGl0ZXJhbCB0cmVlICovXG4gIHRoaXMuZF9kZXNjICAgPSBudWxsOyAgICAgICAgIC8qIGRlc2MuIGZvciBkaXN0YW5jZSB0cmVlICovXG4gIHRoaXMuYmxfZGVzYyAgPSBudWxsOyAgICAgICAgIC8qIGRlc2MuIGZvciBiaXQgbGVuZ3RoIHRyZWUgKi9cblxuICAvL3VzaCBibF9jb3VudFtNQVhfQklUUysxXTtcbiAgdGhpcy5ibF9jb3VudCA9IG5ldyBVaW50MTZBcnJheShNQVhfQklUUyArIDEpO1xuICAvKiBudW1iZXIgb2YgY29kZXMgYXQgZWFjaCBiaXQgbGVuZ3RoIGZvciBhbiBvcHRpbWFsIHRyZWUgKi9cblxuICAvL2ludCBoZWFwWzIqTF9DT0RFUysxXTsgICAgICAvKiBoZWFwIHVzZWQgdG8gYnVpbGQgdGhlIEh1ZmZtYW4gdHJlZXMgKi9cbiAgdGhpcy5oZWFwID0gbmV3IFVpbnQxNkFycmF5KDIgKiBMX0NPREVTICsgMSk7ICAvKiBoZWFwIHVzZWQgdG8gYnVpbGQgdGhlIEh1ZmZtYW4gdHJlZXMgKi9cbiAgemVybyh0aGlzLmhlYXApO1xuXG4gIHRoaXMuaGVhcF9sZW4gPSAwOyAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUgaGVhcCAqL1xuICB0aGlzLmhlYXBfbWF4ID0gMDsgICAgICAgICAgICAgICAvKiBlbGVtZW50IG9mIGxhcmdlc3QgZnJlcXVlbmN5ICovXG4gIC8qIFRoZSBzb25zIG9mIGhlYXBbbl0gYXJlIGhlYXBbMipuXSBhbmQgaGVhcFsyKm4rMV0uIGhlYXBbMF0gaXMgbm90IHVzZWQuXG4gICAqIFRoZSBzYW1lIGhlYXAgYXJyYXkgaXMgdXNlZCB0byBidWlsZCBhbGwgdHJlZXMuXG4gICAqL1xuXG4gIHRoaXMuZGVwdGggPSBuZXcgVWludDE2QXJyYXkoMiAqIExfQ09ERVMgKyAxKTsgLy91Y2ggZGVwdGhbMipMX0NPREVTKzFdO1xuICB6ZXJvKHRoaXMuZGVwdGgpO1xuICAvKiBEZXB0aCBvZiBlYWNoIHN1YnRyZWUgdXNlZCBhcyB0aWUgYnJlYWtlciBmb3IgdHJlZXMgb2YgZXF1YWwgZnJlcXVlbmN5XG4gICAqL1xuXG4gIHRoaXMuc3ltX2J1ZiA9IDA7ICAgICAgICAvKiBidWZmZXIgZm9yIGRpc3RhbmNlcyBhbmQgbGl0ZXJhbHMvbGVuZ3RocyAqL1xuXG4gIHRoaXMubGl0X2J1ZnNpemUgPSAwO1xuICAvKiBTaXplIG9mIG1hdGNoIGJ1ZmZlciBmb3IgbGl0ZXJhbHMvbGVuZ3Rocy4gIFRoZXJlIGFyZSA0IHJlYXNvbnMgZm9yXG4gICAqIGxpbWl0aW5nIGxpdF9idWZzaXplIHRvIDY0SzpcbiAgICogICAtIGZyZXF1ZW5jaWVzIGNhbiBiZSBrZXB0IGluIDE2IGJpdCBjb3VudGVyc1xuICAgKiAgIC0gaWYgY29tcHJlc3Npb24gaXMgbm90IHN1Y2Nlc3NmdWwgZm9yIHRoZSBmaXJzdCBibG9jaywgYWxsIGlucHV0XG4gICAqICAgICBkYXRhIGlzIHN0aWxsIGluIHRoZSB3aW5kb3cgc28gd2UgY2FuIHN0aWxsIGVtaXQgYSBzdG9yZWQgYmxvY2sgZXZlblxuICAgKiAgICAgd2hlbiBpbnB1dCBjb21lcyBmcm9tIHN0YW5kYXJkIGlucHV0LiAgKFRoaXMgY2FuIGFsc28gYmUgZG9uZSBmb3JcbiAgICogICAgIGFsbCBibG9ja3MgaWYgbGl0X2J1ZnNpemUgaXMgbm90IGdyZWF0ZXIgdGhhbiAzMksuKVxuICAgKiAgIC0gaWYgY29tcHJlc3Npb24gaXMgbm90IHN1Y2Nlc3NmdWwgZm9yIGEgZmlsZSBzbWFsbGVyIHRoYW4gNjRLLCB3ZSBjYW5cbiAgICogICAgIGV2ZW4gZW1pdCBhIHN0b3JlZCBmaWxlIGluc3RlYWQgb2YgYSBzdG9yZWQgYmxvY2sgKHNhdmluZyA1IGJ5dGVzKS5cbiAgICogICAgIFRoaXMgaXMgYXBwbGljYWJsZSBvbmx5IGZvciB6aXAgKG5vdCBnemlwIG9yIHpsaWIpLlxuICAgKiAgIC0gY3JlYXRpbmcgbmV3IEh1ZmZtYW4gdHJlZXMgbGVzcyBmcmVxdWVudGx5IG1heSBub3QgcHJvdmlkZSBmYXN0XG4gICAqICAgICBhZGFwdGF0aW9uIHRvIGNoYW5nZXMgaW4gdGhlIGlucHV0IGRhdGEgc3RhdGlzdGljcy4gKFRha2UgZm9yXG4gICAqICAgICBleGFtcGxlIGEgYmluYXJ5IGZpbGUgd2l0aCBwb29ybHkgY29tcHJlc3NpYmxlIGNvZGUgZm9sbG93ZWQgYnlcbiAgICogICAgIGEgaGlnaGx5IGNvbXByZXNzaWJsZSBzdHJpbmcgdGFibGUuKSBTbWFsbGVyIGJ1ZmZlciBzaXplcyBnaXZlXG4gICAqICAgICBmYXN0IGFkYXB0YXRpb24gYnV0IGhhdmUgb2YgY291cnNlIHRoZSBvdmVyaGVhZCBvZiB0cmFuc21pdHRpbmdcbiAgICogICAgIHRyZWVzIG1vcmUgZnJlcXVlbnRseS5cbiAgICogICAtIEkgY2FuJ3QgY291bnQgYWJvdmUgNFxuICAgKi9cblxuICB0aGlzLnN5bV9uZXh0ID0gMDsgICAgICAvKiBydW5uaW5nIGluZGV4IGluIHN5bV9idWYgKi9cbiAgdGhpcy5zeW1fZW5kID0gMDsgICAgICAgLyogc3ltYm9sIHRhYmxlIGZ1bGwgd2hlbiBzeW1fbmV4dCByZWFjaGVzIHRoaXMgKi9cblxuICB0aGlzLm9wdF9sZW4gPSAwOyAgICAgICAvKiBiaXQgbGVuZ3RoIG9mIGN1cnJlbnQgYmxvY2sgd2l0aCBvcHRpbWFsIHRyZWVzICovXG4gIHRoaXMuc3RhdGljX2xlbiA9IDA7ICAgIC8qIGJpdCBsZW5ndGggb2YgY3VycmVudCBibG9jayB3aXRoIHN0YXRpYyB0cmVlcyAqL1xuICB0aGlzLm1hdGNoZXMgPSAwOyAgICAgICAvKiBudW1iZXIgb2Ygc3RyaW5nIG1hdGNoZXMgaW4gY3VycmVudCBibG9jayAqL1xuICB0aGlzLmluc2VydCA9IDA7ICAgICAgICAvKiBieXRlcyBhdCBlbmQgb2Ygd2luZG93IGxlZnQgdG8gaW5zZXJ0ICovXG5cblxuICB0aGlzLmJpX2J1ZiA9IDA7XG4gIC8qIE91dHB1dCBidWZmZXIuIGJpdHMgYXJlIGluc2VydGVkIHN0YXJ0aW5nIGF0IHRoZSBib3R0b20gKGxlYXN0XG4gICAqIHNpZ25pZmljYW50IGJpdHMpLlxuICAgKi9cbiAgdGhpcy5iaV92YWxpZCA9IDA7XG4gIC8qIE51bWJlciBvZiB2YWxpZCBiaXRzIGluIGJpX2J1Zi4gIEFsbCBiaXRzIGFib3ZlIHRoZSBsYXN0IHZhbGlkIGJpdFxuICAgKiBhcmUgYWx3YXlzIHplcm8uXG4gICAqL1xuXG4gIC8vIFVzZWQgZm9yIHdpbmRvdyBtZW1vcnkgaW5pdC4gV2Ugc2FmZWx5IGlnbm9yZSBpdCBmb3IgSlMuIFRoYXQgbWFrZXNcbiAgLy8gc2Vuc2Ugb25seSBmb3IgcG9pbnRlcnMgYW5kIG1lbW9yeSBjaGVjayB0b29scy5cbiAgLy90aGlzLmhpZ2hfd2F0ZXIgPSAwO1xuICAvKiBIaWdoIHdhdGVyIG1hcmsgb2Zmc2V0IGluIHdpbmRvdyBmb3IgaW5pdGlhbGl6ZWQgYnl0ZXMgLS0gYnl0ZXMgYWJvdmVcbiAgICogdGhpcyBhcmUgc2V0IHRvIHplcm8gaW4gb3JkZXIgdG8gYXZvaWQgbWVtb3J5IGNoZWNrIHdhcm5pbmdzIHdoZW5cbiAgICogbG9uZ2VzdCBtYXRjaCByb3V0aW5lcyBhY2Nlc3MgYnl0ZXMgcGFzdCB0aGUgaW5wdXQuICBUaGlzIGlzIHRoZW5cbiAgICogdXBkYXRlZCB0byB0aGUgbmV3IGhpZ2ggd2F0ZXIgbWFyay5cbiAgICovXG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ2hlY2sgZm9yIGEgdmFsaWQgZGVmbGF0ZSBzdHJlYW0gc3RhdGUuIFJldHVybiAwIGlmIG9rLCAxIGlmIG5vdC5cbiAqL1xuY29uc3QgZGVmbGF0ZVN0YXRlQ2hlY2sgPSAoc3RybSkgPT4ge1xuXG4gIGlmICghc3RybSkge1xuICAgIHJldHVybiAxO1xuICB9XG4gIGNvbnN0IHMgPSBzdHJtLnN0YXRlO1xuICBpZiAoIXMgfHwgcy5zdHJtICE9PSBzdHJtIHx8IChzLnN0YXR1cyAhPT0gSU5JVF9TVEFURSAmJlxuLy8jaWZkZWYgR1pJUFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnN0YXR1cyAhPT0gR1pJUF9TVEFURSAmJlxuLy8jZW5kaWZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5zdGF0dXMgIT09IEVYVFJBX1NUQVRFICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuc3RhdHVzICE9PSBOQU1FX1NUQVRFICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuc3RhdHVzICE9PSBDT01NRU5UX1NUQVRFICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuc3RhdHVzICE9PSBIQ1JDX1NUQVRFICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuc3RhdHVzICE9PSBCVVNZX1NUQVRFICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuc3RhdHVzICE9PSBGSU5JU0hfU1RBVEUpKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgcmV0dXJuIDA7XG59O1xuXG5cbmNvbnN0IGRlZmxhdGVSZXNldEtlZXAgPSAoc3RybSkgPT4ge1xuXG4gIGlmIChkZWZsYXRlU3RhdGVDaGVjayhzdHJtKSkge1xuICAgIHJldHVybiBlcnIoc3RybSwgWl9TVFJFQU1fRVJST1IpO1xuICB9XG5cbiAgc3RybS50b3RhbF9pbiA9IHN0cm0udG90YWxfb3V0ID0gMDtcbiAgc3RybS5kYXRhX3R5cGUgPSBaX1VOS05PV047XG5cbiAgY29uc3QgcyA9IHN0cm0uc3RhdGU7XG4gIHMucGVuZGluZyA9IDA7XG4gIHMucGVuZGluZ19vdXQgPSAwO1xuXG4gIGlmIChzLndyYXAgPCAwKSB7XG4gICAgcy53cmFwID0gLXMud3JhcDtcbiAgICAvKiB3YXMgbWFkZSBuZWdhdGl2ZSBieSBkZWZsYXRlKC4uLiwgWl9GSU5JU0gpOyAqL1xuICB9XG4gIHMuc3RhdHVzID1cbi8vI2lmZGVmIEdaSVBcbiAgICBzLndyYXAgPT09IDIgPyBHWklQX1NUQVRFIDpcbi8vI2VuZGlmXG4gICAgcy53cmFwID8gSU5JVF9TVEFURSA6IEJVU1lfU1RBVEU7XG4gIHN0cm0uYWRsZXIgPSAocy53cmFwID09PSAyKSA/XG4gICAgMCAgLy8gY3JjMzIoMCwgWl9OVUxMLCAwKVxuICA6XG4gICAgMTsgLy8gYWRsZXIzMigwLCBaX05VTEwsIDApXG4gIHMubGFzdF9mbHVzaCA9IC0yO1xuICBfdHJfaW5pdChzKTtcbiAgcmV0dXJuIFpfT0s7XG59O1xuXG5cbmNvbnN0IGRlZmxhdGVSZXNldCA9IChzdHJtKSA9PiB7XG5cbiAgY29uc3QgcmV0ID0gZGVmbGF0ZVJlc2V0S2VlcChzdHJtKTtcbiAgaWYgKHJldCA9PT0gWl9PSykge1xuICAgIGxtX2luaXQoc3RybS5zdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn07XG5cblxuY29uc3QgZGVmbGF0ZVNldEhlYWRlciA9IChzdHJtLCBoZWFkKSA9PiB7XG5cbiAgaWYgKGRlZmxhdGVTdGF0ZUNoZWNrKHN0cm0pIHx8IHN0cm0uc3RhdGUud3JhcCAhPT0gMikge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuICBzdHJtLnN0YXRlLmd6aGVhZCA9IGhlYWQ7XG4gIHJldHVybiBaX09LO1xufTtcblxuXG5jb25zdCBkZWZsYXRlSW5pdDIgPSAoc3RybSwgbGV2ZWwsIG1ldGhvZCwgd2luZG93Qml0cywgbWVtTGV2ZWwsIHN0cmF0ZWd5KSA9PiB7XG5cbiAgaWYgKCFzdHJtKSB7IC8vID09PSBaX05VTExcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cbiAgbGV0IHdyYXAgPSAxO1xuXG4gIGlmIChsZXZlbCA9PT0gWl9ERUZBVUxUX0NPTVBSRVNTSU9OKSB7XG4gICAgbGV2ZWwgPSA2O1xuICB9XG5cbiAgaWYgKHdpbmRvd0JpdHMgPCAwKSB7IC8qIHN1cHByZXNzIHpsaWIgd3JhcHBlciAqL1xuICAgIHdyYXAgPSAwO1xuICAgIHdpbmRvd0JpdHMgPSAtd2luZG93Qml0cztcbiAgfVxuXG4gIGVsc2UgaWYgKHdpbmRvd0JpdHMgPiAxNSkge1xuICAgIHdyYXAgPSAyOyAgICAgICAgICAgLyogd3JpdGUgZ3ppcCB3cmFwcGVyIGluc3RlYWQgKi9cbiAgICB3aW5kb3dCaXRzIC09IDE2O1xuICB9XG5cblxuICBpZiAobWVtTGV2ZWwgPCAxIHx8IG1lbUxldmVsID4gTUFYX01FTV9MRVZFTCB8fCBtZXRob2QgIT09IFpfREVGTEFURUQgfHxcbiAgICB3aW5kb3dCaXRzIDwgOCB8fCB3aW5kb3dCaXRzID4gMTUgfHwgbGV2ZWwgPCAwIHx8IGxldmVsID4gOSB8fFxuICAgIHN0cmF0ZWd5IDwgMCB8fCBzdHJhdGVneSA+IFpfRklYRUQgfHwgKHdpbmRvd0JpdHMgPT09IDggJiYgd3JhcCAhPT0gMSkpIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfU1RSRUFNX0VSUk9SKTtcbiAgfVxuXG5cbiAgaWYgKHdpbmRvd0JpdHMgPT09IDgpIHtcbiAgICB3aW5kb3dCaXRzID0gOTtcbiAgfVxuICAvKiB1bnRpbCAyNTYtYnl0ZSB3aW5kb3cgYnVnIGZpeGVkICovXG5cbiAgY29uc3QgcyA9IG5ldyBEZWZsYXRlU3RhdGUoKTtcblxuICBzdHJtLnN0YXRlID0gcztcbiAgcy5zdHJtID0gc3RybTtcbiAgcy5zdGF0dXMgPSBJTklUX1NUQVRFOyAgICAgLyogdG8gcGFzcyBzdGF0ZSB0ZXN0IGluIGRlZmxhdGVSZXNldCgpICovXG5cbiAgcy53cmFwID0gd3JhcDtcbiAgcy5nemhlYWQgPSBudWxsO1xuICBzLndfYml0cyA9IHdpbmRvd0JpdHM7XG4gIHMud19zaXplID0gMSA8PCBzLndfYml0cztcbiAgcy53X21hc2sgPSBzLndfc2l6ZSAtIDE7XG5cbiAgcy5oYXNoX2JpdHMgPSBtZW1MZXZlbCArIDc7XG4gIHMuaGFzaF9zaXplID0gMSA8PCBzLmhhc2hfYml0cztcbiAgcy5oYXNoX21hc2sgPSBzLmhhc2hfc2l6ZSAtIDE7XG4gIHMuaGFzaF9zaGlmdCA9IH5+KChzLmhhc2hfYml0cyArIE1JTl9NQVRDSCAtIDEpIC8gTUlOX01BVENIKTtcblxuICBzLndpbmRvdyA9IG5ldyBVaW50OEFycmF5KHMud19zaXplICogMik7XG4gIHMuaGVhZCA9IG5ldyBVaW50MTZBcnJheShzLmhhc2hfc2l6ZSk7XG4gIHMucHJldiA9IG5ldyBVaW50MTZBcnJheShzLndfc2l6ZSk7XG5cbiAgLy8gRG9uJ3QgbmVlZCBtZW0gaW5pdCBtYWdpYyBmb3IgSlMuXG4gIC8vcy5oaWdoX3dhdGVyID0gMDsgIC8qIG5vdGhpbmcgd3JpdHRlbiB0byBzLT53aW5kb3cgeWV0ICovXG5cbiAgcy5saXRfYnVmc2l6ZSA9IDEgPDwgKG1lbUxldmVsICsgNik7IC8qIDE2SyBlbGVtZW50cyBieSBkZWZhdWx0ICovXG5cbiAgLyogV2Ugb3ZlcmxheSBwZW5kaW5nX2J1ZiBhbmQgc3ltX2J1Zi4gVGhpcyB3b3JrcyBzaW5jZSB0aGUgYXZlcmFnZSBzaXplXG4gICAqIGZvciBsZW5ndGgvZGlzdGFuY2UgcGFpcnMgb3ZlciBhbnkgY29tcHJlc3NlZCBibG9jayBpcyBhc3N1cmVkIHRvIGJlIDMxXG4gICAqIGJpdHMgb3IgbGVzcy5cbiAgICpcbiAgICogQW5hbHlzaXM6IFRoZSBsb25nZXN0IGZpeGVkIGNvZGVzIGFyZSBhIGxlbmd0aCBjb2RlIG9mIDggYml0cyBwbHVzIDVcbiAgICogZXh0cmEgYml0cywgZm9yIGxlbmd0aHMgMTMxIHRvIDI1Ny4gVGhlIGxvbmdlc3QgZml4ZWQgZGlzdGFuY2UgY29kZXMgYXJlXG4gICAqIDUgYml0cyBwbHVzIDEzIGV4dHJhIGJpdHMsIGZvciBkaXN0YW5jZXMgMTYzODUgdG8gMzI3NjguIFRoZSBsb25nZXN0XG4gICAqIHBvc3NpYmxlIGZpeGVkLWNvZGVzIGxlbmd0aC9kaXN0YW5jZSBwYWlyIGlzIHRoZW4gMzEgYml0cyB0b3RhbC5cbiAgICpcbiAgICogc3ltX2J1ZiBzdGFydHMgb25lLWZvdXJ0aCBvZiB0aGUgd2F5IGludG8gcGVuZGluZ19idWYuIFNvIHRoZXJlIGFyZVxuICAgKiB0aHJlZSBieXRlcyBpbiBzeW1fYnVmIGZvciBldmVyeSBmb3VyIGJ5dGVzIGluIHBlbmRpbmdfYnVmLiBFYWNoIHN5bWJvbFxuICAgKiBpbiBzeW1fYnVmIGlzIHRocmVlIGJ5dGVzIC0tIHR3byBmb3IgdGhlIGRpc3RhbmNlIGFuZCBvbmUgZm9yIHRoZVxuICAgKiBsaXRlcmFsL2xlbmd0aC4gQXMgZWFjaCBzeW1ib2wgaXMgY29uc3VtZWQsIHRoZSBwb2ludGVyIHRvIHRoZSBuZXh0XG4gICAqIHN5bV9idWYgdmFsdWUgdG8gcmVhZCBtb3ZlcyBmb3J3YXJkIHRocmVlIGJ5dGVzLiBGcm9tIHRoYXQgc3ltYm9sLCB1cCB0b1xuICAgKiAzMSBiaXRzIGFyZSB3cml0dGVuIHRvIHBlbmRpbmdfYnVmLiBUaGUgY2xvc2VzdCB0aGUgd3JpdHRlbiBwZW5kaW5nX2J1ZlxuICAgKiBiaXRzIGdldHMgdG8gdGhlIG5leHQgc3ltX2J1ZiBzeW1ib2wgdG8gcmVhZCBpcyBqdXN0IGJlZm9yZSB0aGUgbGFzdFxuICAgKiBjb2RlIGlzIHdyaXR0ZW4uIEF0IHRoYXQgdGltZSwgMzEqKG4tMikgYml0cyBoYXZlIGJlZW4gd3JpdHRlbiwganVzdFxuICAgKiBhZnRlciAyNCoobi0yKSBiaXRzIGhhdmUgYmVlbiBjb25zdW1lZCBmcm9tIHN5bV9idWYuIHN5bV9idWYgc3RhcnRzIGF0XG4gICAqIDgqbiBiaXRzIGludG8gcGVuZGluZ19idWYuIChOb3RlIHRoYXQgdGhlIHN5bWJvbCBidWZmZXIgZmlsbHMgd2hlbiBuLTFcbiAgICogc3ltYm9scyBhcmUgd3JpdHRlbi4pIFRoZSBjbG9zZXN0IHRoZSB3cml0aW5nIGdldHMgdG8gd2hhdCBpcyB1bnJlYWQgaXNcbiAgICogdGhlbiBuKzE0IGJpdHMuIEhlcmUgbiBpcyBsaXRfYnVmc2l6ZSwgd2hpY2ggaXMgMTYzODQgYnkgZGVmYXVsdCwgYW5kXG4gICAqIGNhbiByYW5nZSBmcm9tIDEyOCB0byAzMjc2OC5cbiAgICpcbiAgICogVGhlcmVmb3JlLCBhdCBhIG1pbmltdW0sIHRoZXJlIGFyZSAxNDIgYml0cyBvZiBzcGFjZSBiZXR3ZWVuIHdoYXQgaXNcbiAgICogd3JpdHRlbiBhbmQgd2hhdCBpcyByZWFkIGluIHRoZSBvdmVybGFpbiBidWZmZXJzLCBzbyB0aGUgc3ltYm9scyBjYW5ub3RcbiAgICogYmUgb3ZlcndyaXR0ZW4gYnkgdGhlIGNvbXByZXNzZWQgZGF0YS4gVGhhdCBzcGFjZSBpcyBhY3R1YWxseSAxMzkgYml0cyxcbiAgICogZHVlIHRvIHRoZSB0aHJlZS1iaXQgZml4ZWQtY29kZSBibG9jayBoZWFkZXIuXG4gICAqXG4gICAqIFRoYXQgY292ZXJzIHRoZSBjYXNlIHdoZXJlIGVpdGhlciBaX0ZJWEVEIGlzIHNwZWNpZmllZCwgZm9yY2luZyBmaXhlZFxuICAgKiBjb2Rlcywgb3Igd2hlbiB0aGUgdXNlIG9mIGZpeGVkIGNvZGVzIGlzIGNob3NlbiwgYmVjYXVzZSB0aGF0IGNob2ljZVxuICAgKiByZXN1bHRzIGluIGEgc21hbGxlciBjb21wcmVzc2VkIGJsb2NrIHRoYW4gZHluYW1pYyBjb2Rlcy4gVGhhdCBsYXR0ZXJcbiAgICogY29uZGl0aW9uIHRoZW4gYXNzdXJlcyB0aGF0IHRoZSBhYm92ZSBhbmFseXNpcyBhbHNvIGNvdmVycyBhbGwgZHluYW1pY1xuICAgKiBibG9ja3MuIEEgZHluYW1pYy1jb2RlIGJsb2NrIHdpbGwgb25seSBiZSBjaG9zZW4gdG8gYmUgZW1pdHRlZCBpZiBpdCBoYXNcbiAgICogZmV3ZXIgYml0cyB0aGFuIGEgZml4ZWQtY29kZSBibG9jayB3b3VsZCBmb3IgdGhlIHNhbWUgc2V0IG9mIHN5bWJvbHMuXG4gICAqIFRoZXJlZm9yZSBpdHMgYXZlcmFnZSBzeW1ib2wgbGVuZ3RoIGlzIGFzc3VyZWQgdG8gYmUgbGVzcyB0aGFuIDMxLiBTb1xuICAgKiB0aGUgY29tcHJlc3NlZCBkYXRhIGZvciBhIGR5bmFtaWMgYmxvY2sgYWxzbyBjYW5ub3Qgb3ZlcndyaXRlIHRoZVxuICAgKiBzeW1ib2xzIGZyb20gd2hpY2ggaXQgaXMgYmVpbmcgY29uc3RydWN0ZWQuXG4gICAqL1xuXG4gIHMucGVuZGluZ19idWZfc2l6ZSA9IHMubGl0X2J1ZnNpemUgKiA0O1xuICBzLnBlbmRpbmdfYnVmID0gbmV3IFVpbnQ4QXJyYXkocy5wZW5kaW5nX2J1Zl9zaXplKTtcblxuICAvLyBJdCBpcyBvZmZzZXQgZnJvbSBgcy5wZW5kaW5nX2J1ZmAgKHNpemUgaXMgYHMubGl0X2J1ZnNpemUgKiAyYClcbiAgLy9zLT5zeW1fYnVmID0gcy0+cGVuZGluZ19idWYgKyBzLT5saXRfYnVmc2l6ZTtcbiAgcy5zeW1fYnVmID0gcy5saXRfYnVmc2l6ZTtcblxuICAvL3MtPnN5bV9lbmQgPSAocy0+bGl0X2J1ZnNpemUgLSAxKSAqIDM7XG4gIHMuc3ltX2VuZCA9IChzLmxpdF9idWZzaXplIC0gMSkgKiAzO1xuICAvKiBXZSBhdm9pZCBlcXVhbGl0eSB3aXRoIGxpdF9idWZzaXplKjMgYmVjYXVzZSBvZiB3cmFwYXJvdW5kIGF0IDY0S1xuICAgKiBvbiAxNiBiaXQgbWFjaGluZXMgYW5kIGJlY2F1c2Ugc3RvcmVkIGJsb2NrcyBhcmUgcmVzdHJpY3RlZCB0b1xuICAgKiA2NEstMSBieXRlcy5cbiAgICovXG5cbiAgcy5sZXZlbCA9IGxldmVsO1xuICBzLnN0cmF0ZWd5ID0gc3RyYXRlZ3k7XG4gIHMubWV0aG9kID0gbWV0aG9kO1xuXG4gIHJldHVybiBkZWZsYXRlUmVzZXQoc3RybSk7XG59O1xuXG5jb25zdCBkZWZsYXRlSW5pdCA9IChzdHJtLCBsZXZlbCkgPT4ge1xuXG4gIHJldHVybiBkZWZsYXRlSW5pdDIoc3RybSwgbGV2ZWwsIFpfREVGTEFURUQsIE1BWF9XQklUUywgREVGX01FTV9MRVZFTCwgWl9ERUZBVUxUX1NUUkFURUdZKTtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuY29uc3QgZGVmbGF0ZSA9IChzdHJtLCBmbHVzaCkgPT4ge1xuXG4gIGlmIChkZWZsYXRlU3RhdGVDaGVjayhzdHJtKSB8fCBmbHVzaCA+IFpfQkxPQ0sgfHwgZmx1c2ggPCAwKSB7XG4gICAgcmV0dXJuIHN0cm0gPyBlcnIoc3RybSwgWl9TVFJFQU1fRVJST1IpIDogWl9TVFJFQU1fRVJST1I7XG4gIH1cblxuICBjb25zdCBzID0gc3RybS5zdGF0ZTtcblxuICBpZiAoIXN0cm0ub3V0cHV0IHx8XG4gICAgICAoc3RybS5hdmFpbF9pbiAhPT0gMCAmJiAhc3RybS5pbnB1dCkgfHxcbiAgICAgIChzLnN0YXR1cyA9PT0gRklOSVNIX1NUQVRFICYmIGZsdXNoICE9PSBaX0ZJTklTSCkpIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIChzdHJtLmF2YWlsX291dCA9PT0gMCkgPyBaX0JVRl9FUlJPUiA6IFpfU1RSRUFNX0VSUk9SKTtcbiAgfVxuXG4gIGNvbnN0IG9sZF9mbHVzaCA9IHMubGFzdF9mbHVzaDtcbiAgcy5sYXN0X2ZsdXNoID0gZmx1c2g7XG5cbiAgLyogRmx1c2ggYXMgbXVjaCBwZW5kaW5nIG91dHB1dCBhcyBwb3NzaWJsZSAqL1xuICBpZiAocy5wZW5kaW5nICE9PSAwKSB7XG4gICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIC8qIFNpbmNlIGF2YWlsX291dCBpcyAwLCBkZWZsYXRlIHdpbGwgYmUgY2FsbGVkIGFnYWluIHdpdGhcbiAgICAgICAqIG1vcmUgb3V0cHV0IHNwYWNlLCBidXQgcG9zc2libHkgd2l0aCBib3RoIHBlbmRpbmcgYW5kXG4gICAgICAgKiBhdmFpbF9pbiBlcXVhbCB0byB6ZXJvLiBUaGVyZSB3b24ndCBiZSBhbnl0aGluZyB0byBkbyxcbiAgICAgICAqIGJ1dCB0aGlzIGlzIG5vdCBhbiBlcnJvciBzaXR1YXRpb24gc28gbWFrZSBzdXJlIHdlXG4gICAgICAgKiByZXR1cm4gT0sgaW5zdGVhZCBvZiBCVUZfRVJST1IgYXQgbmV4dCBjYWxsIG9mIGRlZmxhdGU6XG4gICAgICAgKi9cbiAgICAgIHMubGFzdF9mbHVzaCA9IC0xO1xuICAgICAgcmV0dXJuIFpfT0s7XG4gICAgfVxuXG4gICAgLyogTWFrZSBzdXJlIHRoZXJlIGlzIHNvbWV0aGluZyB0byBkbyBhbmQgYXZvaWQgZHVwbGljYXRlIGNvbnNlY3V0aXZlXG4gICAgICogZmx1c2hlcy4gRm9yIHJlcGVhdGVkIGFuZCB1c2VsZXNzIGNhbGxzIHdpdGggWl9GSU5JU0gsIHdlIGtlZXBcbiAgICAgKiByZXR1cm5pbmcgWl9TVFJFQU1fRU5EIGluc3RlYWQgb2YgWl9CVUZfRVJST1IuXG4gICAgICovXG4gIH0gZWxzZSBpZiAoc3RybS5hdmFpbF9pbiA9PT0gMCAmJiByYW5rKGZsdXNoKSA8PSByYW5rKG9sZF9mbHVzaCkgJiZcbiAgICBmbHVzaCAhPT0gWl9GSU5JU0gpIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfQlVGX0VSUk9SKTtcbiAgfVxuXG4gIC8qIFVzZXIgbXVzdCBub3QgcHJvdmlkZSBtb3JlIGlucHV0IGFmdGVyIHRoZSBmaXJzdCBGSU5JU0g6ICovXG4gIGlmIChzLnN0YXR1cyA9PT0gRklOSVNIX1NUQVRFICYmIHN0cm0uYXZhaWxfaW4gIT09IDApIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfQlVGX0VSUk9SKTtcbiAgfVxuXG4gIC8qIFdyaXRlIHRoZSBoZWFkZXIgKi9cbiAgaWYgKHMuc3RhdHVzID09PSBJTklUX1NUQVRFICYmIHMud3JhcCA9PT0gMCkge1xuICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcbiAgfVxuICBpZiAocy5zdGF0dXMgPT09IElOSVRfU1RBVEUpIHtcbiAgICAvKiB6bGliIGhlYWRlciAqL1xuICAgIGxldCBoZWFkZXIgPSAoWl9ERUZMQVRFRCArICgocy53X2JpdHMgLSA4KSA8PCA0KSkgPDwgODtcbiAgICBsZXQgbGV2ZWxfZmxhZ3MgPSAtMTtcblxuICAgIGlmIChzLnN0cmF0ZWd5ID49IFpfSFVGRk1BTl9PTkxZIHx8IHMubGV2ZWwgPCAyKSB7XG4gICAgICBsZXZlbF9mbGFncyA9IDA7XG4gICAgfSBlbHNlIGlmIChzLmxldmVsIDwgNikge1xuICAgICAgbGV2ZWxfZmxhZ3MgPSAxO1xuICAgIH0gZWxzZSBpZiAocy5sZXZlbCA9PT0gNikge1xuICAgICAgbGV2ZWxfZmxhZ3MgPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXZlbF9mbGFncyA9IDM7XG4gICAgfVxuICAgIGhlYWRlciB8PSAobGV2ZWxfZmxhZ3MgPDwgNik7XG4gICAgaWYgKHMuc3Ryc3RhcnQgIT09IDApIHsgaGVhZGVyIHw9IFBSRVNFVF9ESUNUOyB9XG4gICAgaGVhZGVyICs9IDMxIC0gKGhlYWRlciAlIDMxKTtcblxuICAgIHB1dFNob3J0TVNCKHMsIGhlYWRlcik7XG5cbiAgICAvKiBTYXZlIHRoZSBhZGxlcjMyIG9mIHRoZSBwcmVzZXQgZGljdGlvbmFyeTogKi9cbiAgICBpZiAocy5zdHJzdGFydCAhPT0gMCkge1xuICAgICAgcHV0U2hvcnRNU0Iocywgc3RybS5hZGxlciA+Pj4gMTYpO1xuICAgICAgcHV0U2hvcnRNU0Iocywgc3RybS5hZGxlciAmIDB4ZmZmZik7XG4gICAgfVxuICAgIHN0cm0uYWRsZXIgPSAxOyAvLyBhZGxlcjMyKDBMLCBaX05VTEwsIDApO1xuICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcblxuICAgIC8qIENvbXByZXNzaW9uIG11c3Qgc3RhcnQgd2l0aCBhbiBlbXB0eSBwZW5kaW5nIGJ1ZmZlciAqL1xuICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgaWYgKHMucGVuZGluZyAhPT0gMCkge1xuICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7XG4gICAgICByZXR1cm4gWl9PSztcbiAgICB9XG4gIH1cbi8vI2lmZGVmIEdaSVBcbiAgaWYgKHMuc3RhdHVzID09PSBHWklQX1NUQVRFKSB7XG4gICAgLyogZ3ppcCBoZWFkZXIgKi9cbiAgICBzdHJtLmFkbGVyID0gMDsgIC8vY3JjMzIoMEwsIFpfTlVMTCwgMCk7XG4gICAgcHV0X2J5dGUocywgMzEpO1xuICAgIHB1dF9ieXRlKHMsIDEzOSk7XG4gICAgcHV0X2J5dGUocywgOCk7XG4gICAgaWYgKCFzLmd6aGVhZCkgeyAvLyBzLT5nemhlYWQgPT0gWl9OVUxMXG4gICAgICBwdXRfYnl0ZShzLCAwKTtcbiAgICAgIHB1dF9ieXRlKHMsIDApO1xuICAgICAgcHV0X2J5dGUocywgMCk7XG4gICAgICBwdXRfYnl0ZShzLCAwKTtcbiAgICAgIHB1dF9ieXRlKHMsIDApO1xuICAgICAgcHV0X2J5dGUocywgcy5sZXZlbCA9PT0gOSA/IDIgOlxuICAgICAgICAgICAgICAgICAgKHMuc3RyYXRlZ3kgPj0gWl9IVUZGTUFOX09OTFkgfHwgcy5sZXZlbCA8IDIgP1xuICAgICAgICAgICAgICAgICAgIDQgOiAwKSk7XG4gICAgICBwdXRfYnl0ZShzLCBPU19DT0RFKTtcbiAgICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcblxuICAgICAgLyogQ29tcHJlc3Npb24gbXVzdCBzdGFydCB3aXRoIGFuIGVtcHR5IHBlbmRpbmcgYnVmZmVyICovXG4gICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgICAgaWYgKHMucGVuZGluZyAhPT0gMCkge1xuICAgICAgICBzLmxhc3RfZmx1c2ggPSAtMTtcbiAgICAgICAgcmV0dXJuIFpfT0s7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRleHQgPyAxIDogMCkgK1xuICAgICAgICAgICAgICAgICAgKHMuZ3poZWFkLmhjcmMgPyAyIDogMCkgK1xuICAgICAgICAgICAgICAgICAgKCFzLmd6aGVhZC5leHRyYSA/IDAgOiA0KSArXG4gICAgICAgICAgICAgICAgICAoIXMuZ3poZWFkLm5hbWUgPyAwIDogOCkgK1xuICAgICAgICAgICAgICAgICAgKCFzLmd6aGVhZC5jb21tZW50ID8gMCA6IDE2KVxuICAgICAgKTtcbiAgICAgIHB1dF9ieXRlKHMsIHMuZ3poZWFkLnRpbWUgJiAweGZmKTtcbiAgICAgIHB1dF9ieXRlKHMsIChzLmd6aGVhZC50aW1lID4+IDgpICYgMHhmZik7XG4gICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQudGltZSA+PiAxNikgJiAweGZmKTtcbiAgICAgIHB1dF9ieXRlKHMsIChzLmd6aGVhZC50aW1lID4+IDI0KSAmIDB4ZmYpO1xuICAgICAgcHV0X2J5dGUocywgcy5sZXZlbCA9PT0gOSA/IDIgOlxuICAgICAgICAgICAgICAgICAgKHMuc3RyYXRlZ3kgPj0gWl9IVUZGTUFOX09OTFkgfHwgcy5sZXZlbCA8IDIgP1xuICAgICAgICAgICAgICAgICAgIDQgOiAwKSk7XG4gICAgICBwdXRfYnl0ZShzLCBzLmd6aGVhZC5vcyAmIDB4ZmYpO1xuICAgICAgaWYgKHMuZ3poZWFkLmV4dHJhICYmIHMuZ3poZWFkLmV4dHJhLmxlbmd0aCkge1xuICAgICAgICBwdXRfYnl0ZShzLCBzLmd6aGVhZC5leHRyYS5sZW5ndGggJiAweGZmKTtcbiAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLmV4dHJhLmxlbmd0aCA+PiA4KSAmIDB4ZmYpO1xuICAgICAgfVxuICAgICAgaWYgKHMuZ3poZWFkLmhjcmMpIHtcbiAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZywgMCk7XG4gICAgICB9XG4gICAgICBzLmd6aW5kZXggPSAwO1xuICAgICAgcy5zdGF0dXMgPSBFWFRSQV9TVEFURTtcbiAgICB9XG4gIH1cbiAgaWYgKHMuc3RhdHVzID09PSBFWFRSQV9TVEFURSkge1xuICAgIGlmIChzLmd6aGVhZC5leHRyYS8qICE9IFpfTlVMTCovKSB7XG4gICAgICBsZXQgYmVnID0gcy5wZW5kaW5nOyAgIC8qIHN0YXJ0IG9mIGJ5dGVzIHRvIHVwZGF0ZSBjcmMgKi9cbiAgICAgIGxldCBsZWZ0ID0gKHMuZ3poZWFkLmV4dHJhLmxlbmd0aCAmIDB4ZmZmZikgLSBzLmd6aW5kZXg7XG4gICAgICB3aGlsZSAocy5wZW5kaW5nICsgbGVmdCA+IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICBsZXQgY29weSA9IHMucGVuZGluZ19idWZfc2l6ZSAtIHMucGVuZGluZztcbiAgICAgICAgLy8gem1lbWNweShzLnBlbmRpbmdfYnVmICsgcy5wZW5kaW5nLFxuICAgICAgICAvLyAgICBzLmd6aGVhZC5leHRyYSArIHMuZ3ppbmRleCwgY29weSk7XG4gICAgICAgIHMucGVuZGluZ19idWYuc2V0KHMuZ3poZWFkLmV4dHJhLnN1YmFycmF5KHMuZ3ppbmRleCwgcy5nemluZGV4ICsgY29weSksIHMucGVuZGluZyk7XG4gICAgICAgIHMucGVuZGluZyA9IHMucGVuZGluZ19idWZfc2l6ZTtcbiAgICAgICAgLy8tLS0gSENSQ19VUERBVEUoYmVnKSAtLS0vL1xuICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcbiAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgICB9XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgcy5nemluZGV4ICs9IGNvcHk7XG4gICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgICAgIGlmIChzLnBlbmRpbmcgIT09IDApIHtcbiAgICAgICAgICBzLmxhc3RfZmx1c2ggPSAtMTtcbiAgICAgICAgICByZXR1cm4gWl9PSztcbiAgICAgICAgfVxuICAgICAgICBiZWcgPSAwO1xuICAgICAgICBsZWZ0IC09IGNvcHk7XG4gICAgICB9XG4gICAgICAvLyBKUyBzcGVjaWZpYzogcy5nemhlYWQuZXh0cmEgbWF5IGJlIFR5cGVkQXJyYXkgb3IgQXJyYXkgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICAgIC8vICAgICAgICAgICAgICBUeXBlZEFycmF5LnNsaWNlIGFuZCBUeXBlZEFycmF5LmZyb20gZG9uJ3QgZXhpc3QgaW4gSUUxMC1JRTExXG4gICAgICBsZXQgZ3poZWFkX2V4dHJhID0gbmV3IFVpbnQ4QXJyYXkocy5nemhlYWQuZXh0cmEpO1xuICAgICAgLy8gem1lbWNweShzLT5wZW5kaW5nX2J1ZiArIHMtPnBlbmRpbmcsXG4gICAgICAvLyAgICAgcy0+Z3poZWFkLT5leHRyYSArIHMtPmd6aW5kZXgsIGxlZnQpO1xuICAgICAgcy5wZW5kaW5nX2J1Zi5zZXQoZ3poZWFkX2V4dHJhLnN1YmFycmF5KHMuZ3ppbmRleCwgcy5nemluZGV4ICsgbGVmdCksIHMucGVuZGluZyk7XG4gICAgICBzLnBlbmRpbmcgKz0gbGVmdDtcbiAgICAgIC8vLS0tIEhDUkNfVVBEQVRFKGJlZykgLS0tLy9cbiAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgfVxuICAgICAgLy8tLS0vL1xuICAgICAgcy5nemluZGV4ID0gMDtcbiAgICB9XG4gICAgcy5zdGF0dXMgPSBOQU1FX1NUQVRFO1xuICB9XG4gIGlmIChzLnN0YXR1cyA9PT0gTkFNRV9TVEFURSkge1xuICAgIGlmIChzLmd6aGVhZC5uYW1lLyogIT0gWl9OVUxMKi8pIHtcbiAgICAgIGxldCBiZWcgPSBzLnBlbmRpbmc7ICAgLyogc3RhcnQgb2YgYnl0ZXMgdG8gdXBkYXRlIGNyYyAqL1xuICAgICAgbGV0IHZhbDtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgICAgLy8tLS0gSENSQ19VUERBVEUoYmVnKSAtLS0vL1xuICAgICAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgICAgICAgaWYgKHMucGVuZGluZyAhPT0gMCkge1xuICAgICAgICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7XG4gICAgICAgICAgICByZXR1cm4gWl9PSztcbiAgICAgICAgICB9XG4gICAgICAgICAgYmVnID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBKUyBzcGVjaWZpYzogbGl0dGxlIG1hZ2ljIHRvIGFkZCB6ZXJvIHRlcm1pbmF0b3IgdG8gZW5kIG9mIHN0cmluZ1xuICAgICAgICBpZiAocy5nemluZGV4IDwgcy5nemhlYWQubmFtZS5sZW5ndGgpIHtcbiAgICAgICAgICB2YWwgPSBzLmd6aGVhZC5uYW1lLmNoYXJDb2RlQXQocy5nemluZGV4KyspICYgMHhmZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWwgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHB1dF9ieXRlKHMsIHZhbCk7XG4gICAgICB9IHdoaWxlICh2YWwgIT09IDApO1xuICAgICAgLy8tLS0gSENSQ19VUERBVEUoYmVnKSAtLS0vL1xuICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICB9XG4gICAgICAvLy0tLS8vXG4gICAgICBzLmd6aW5kZXggPSAwO1xuICAgIH1cbiAgICBzLnN0YXR1cyA9IENPTU1FTlRfU1RBVEU7XG4gIH1cbiAgaWYgKHMuc3RhdHVzID09PSBDT01NRU5UX1NUQVRFKSB7XG4gICAgaWYgKHMuZ3poZWFkLmNvbW1lbnQvKiAhPSBaX05VTEwqLykge1xuICAgICAgbGV0IGJlZyA9IHMucGVuZGluZzsgICAvKiBzdGFydCBvZiBieXRlcyB0byB1cGRhdGUgY3JjICovXG4gICAgICBsZXQgdmFsO1xuICAgICAgZG8ge1xuICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICAvLy0tLSBIQ1JDX1VQREFURShiZWcpIC0tLS8vXG4gICAgICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICAgICAgICBpZiAocy5wZW5kaW5nICE9PSAwKSB7XG4gICAgICAgICAgICBzLmxhc3RfZmx1c2ggPSAtMTtcbiAgICAgICAgICAgIHJldHVybiBaX09LO1xuICAgICAgICAgIH1cbiAgICAgICAgICBiZWcgPSAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIEpTIHNwZWNpZmljOiBsaXR0bGUgbWFnaWMgdG8gYWRkIHplcm8gdGVybWluYXRvciB0byBlbmQgb2Ygc3RyaW5nXG4gICAgICAgIGlmIChzLmd6aW5kZXggPCBzLmd6aGVhZC5jb21tZW50Lmxlbmd0aCkge1xuICAgICAgICAgIHZhbCA9IHMuZ3poZWFkLmNvbW1lbnQuY2hhckNvZGVBdChzLmd6aW5kZXgrKykgJiAweGZmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcHV0X2J5dGUocywgdmFsKTtcbiAgICAgIH0gd2hpbGUgKHZhbCAhPT0gMCk7XG4gICAgICAvLy0tLSBIQ1JDX1VQREFURShiZWcpIC0tLS8vXG4gICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcbiAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgIH1cbiAgICAgIC8vLS0tLy9cbiAgICB9XG4gICAgcy5zdGF0dXMgPSBIQ1JDX1NUQVRFO1xuICB9XG4gIGlmIChzLnN0YXR1cyA9PT0gSENSQ19TVEFURSkge1xuICAgIGlmIChzLmd6aGVhZC5oY3JjKSB7XG4gICAgICBpZiAocy5wZW5kaW5nICsgMiA+IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgICAgICBpZiAocy5wZW5kaW5nICE9PSAwKSB7XG4gICAgICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7XG4gICAgICAgICAgcmV0dXJuIFpfT0s7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHB1dF9ieXRlKHMsIHN0cm0uYWRsZXIgJiAweGZmKTtcbiAgICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDgpICYgMHhmZik7XG4gICAgICBzdHJtLmFkbGVyID0gMDsgLy9jcmMzMigwTCwgWl9OVUxMLCAwKTtcbiAgICB9XG4gICAgcy5zdGF0dXMgPSBCVVNZX1NUQVRFO1xuXG4gICAgLyogQ29tcHJlc3Npb24gbXVzdCBzdGFydCB3aXRoIGFuIGVtcHR5IHBlbmRpbmcgYnVmZmVyICovXG4gICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICBpZiAocy5wZW5kaW5nICE9PSAwKSB7XG4gICAgICBzLmxhc3RfZmx1c2ggPSAtMTtcbiAgICAgIHJldHVybiBaX09LO1xuICAgIH1cbiAgfVxuLy8jZW5kaWZcblxuICAvKiBTdGFydCBhIG5ldyBibG9jayBvciBjb250aW51ZSB0aGUgY3VycmVudCBvbmUuXG4gICAqL1xuICBpZiAoc3RybS5hdmFpbF9pbiAhPT0gMCB8fCBzLmxvb2thaGVhZCAhPT0gMCB8fFxuICAgIChmbHVzaCAhPT0gWl9OT19GTFVTSCAmJiBzLnN0YXR1cyAhPT0gRklOSVNIX1NUQVRFKSkge1xuICAgIGxldCBic3RhdGUgPSBzLmxldmVsID09PSAwID8gZGVmbGF0ZV9zdG9yZWQocywgZmx1c2gpIDpcbiAgICAgICAgICAgICAgICAgcy5zdHJhdGVneSA9PT0gWl9IVUZGTUFOX09OTFkgPyBkZWZsYXRlX2h1ZmYocywgZmx1c2gpIDpcbiAgICAgICAgICAgICAgICAgcy5zdHJhdGVneSA9PT0gWl9STEUgPyBkZWZsYXRlX3JsZShzLCBmbHVzaCkgOlxuICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uX3RhYmxlW3MubGV2ZWxdLmZ1bmMocywgZmx1c2gpO1xuXG4gICAgaWYgKGJzdGF0ZSA9PT0gQlNfRklOSVNIX1NUQVJURUQgfHwgYnN0YXRlID09PSBCU19GSU5JU0hfRE9ORSkge1xuICAgICAgcy5zdGF0dXMgPSBGSU5JU0hfU1RBVEU7XG4gICAgfVxuICAgIGlmIChic3RhdGUgPT09IEJTX05FRURfTU9SRSB8fCBic3RhdGUgPT09IEJTX0ZJTklTSF9TVEFSVEVEKSB7XG4gICAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7XG4gICAgICAgIC8qIGF2b2lkIEJVRl9FUlJPUiBuZXh0IGNhbGwsIHNlZSBhYm92ZSAqL1xuICAgICAgfVxuICAgICAgcmV0dXJuIFpfT0s7XG4gICAgICAvKiBJZiBmbHVzaCAhPSBaX05PX0ZMVVNIICYmIGF2YWlsX291dCA9PSAwLCB0aGUgbmV4dCBjYWxsXG4gICAgICAgKiBvZiBkZWZsYXRlIHNob3VsZCB1c2UgdGhlIHNhbWUgZmx1c2ggcGFyYW1ldGVyIHRvIG1ha2Ugc3VyZVxuICAgICAgICogdGhhdCB0aGUgZmx1c2ggaXMgY29tcGxldGUuIFNvIHdlIGRvbid0IGhhdmUgdG8gb3V0cHV0IGFuXG4gICAgICAgKiBlbXB0eSBibG9jayBoZXJlLCB0aGlzIHdpbGwgYmUgZG9uZSBhdCBuZXh0IGNhbGwuIFRoaXMgYWxzb1xuICAgICAgICogZW5zdXJlcyB0aGF0IGZvciBhIHZlcnkgc21hbGwgb3V0cHV0IGJ1ZmZlciwgd2UgZW1pdCBhdCBtb3N0XG4gICAgICAgKiBvbmUgZW1wdHkgYmxvY2suXG4gICAgICAgKi9cbiAgICB9XG4gICAgaWYgKGJzdGF0ZSA9PT0gQlNfQkxPQ0tfRE9ORSkge1xuICAgICAgaWYgKGZsdXNoID09PSBaX1BBUlRJQUxfRkxVU0gpIHtcbiAgICAgICAgX3RyX2FsaWduKHMpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZmx1c2ggIT09IFpfQkxPQ0spIHsgLyogRlVMTF9GTFVTSCBvciBTWU5DX0ZMVVNIICovXG5cbiAgICAgICAgX3RyX3N0b3JlZF9ibG9jayhzLCAwLCAwLCBmYWxzZSk7XG4gICAgICAgIC8qIEZvciBhIGZ1bGwgZmx1c2gsIHRoaXMgZW1wdHkgYmxvY2sgd2lsbCBiZSByZWNvZ25pemVkXG4gICAgICAgICAqIGFzIGEgc3BlY2lhbCBtYXJrZXIgYnkgaW5mbGF0ZV9zeW5jKCkuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoZmx1c2ggPT09IFpfRlVMTF9GTFVTSCkge1xuICAgICAgICAgIC8qKiogQ0xFQVJfSEFTSChzKTsgKioqLyAgICAgICAgICAgICAvKiBmb3JnZXQgaGlzdG9yeSAqL1xuICAgICAgICAgIHplcm8ocy5oZWFkKTsgLy8gRmlsbCB3aXRoIE5JTCAoPSAwKTtcblxuICAgICAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgICAgICAgcy5zdHJzdGFydCA9IDA7XG4gICAgICAgICAgICBzLmJsb2NrX3N0YXJ0ID0gMDtcbiAgICAgICAgICAgIHMuaW5zZXJ0ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7IC8qIGF2b2lkIEJVRl9FUlJPUiBhdCBuZXh0IGNhbGwsIHNlZSBhYm92ZSAqL1xuICAgICAgICByZXR1cm4gWl9PSztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZmx1c2ggIT09IFpfRklOSVNIKSB7IHJldHVybiBaX09LOyB9XG4gIGlmIChzLndyYXAgPD0gMCkgeyByZXR1cm4gWl9TVFJFQU1fRU5EOyB9XG5cbiAgLyogV3JpdGUgdGhlIHRyYWlsZXIgKi9cbiAgaWYgKHMud3JhcCA9PT0gMikge1xuICAgIHB1dF9ieXRlKHMsIHN0cm0uYWRsZXIgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS5hZGxlciA+PiA4KSAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDE2KSAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDI0KSAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIHN0cm0udG90YWxfaW4gJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS50b3RhbF9pbiA+PiA4KSAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLnRvdGFsX2luID4+IDE2KSAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLnRvdGFsX2luID4+IDI0KSAmIDB4ZmYpO1xuICB9XG4gIGVsc2VcbiAge1xuICAgIHB1dFNob3J0TVNCKHMsIHN0cm0uYWRsZXIgPj4+IDE2KTtcbiAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyICYgMHhmZmZmKTtcbiAgfVxuXG4gIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gIC8qIElmIGF2YWlsX291dCBpcyB6ZXJvLCB0aGUgYXBwbGljYXRpb24gd2lsbCBjYWxsIGRlZmxhdGUgYWdhaW5cbiAgICogdG8gZmx1c2ggdGhlIHJlc3QuXG4gICAqL1xuICBpZiAocy53cmFwID4gMCkgeyBzLndyYXAgPSAtcy53cmFwOyB9XG4gIC8qIHdyaXRlIHRoZSB0cmFpbGVyIG9ubHkgb25jZSEgKi9cbiAgcmV0dXJuIHMucGVuZGluZyAhPT0gMCA/IFpfT0sgOiBaX1NUUkVBTV9FTkQ7XG59O1xuXG5cbmNvbnN0IGRlZmxhdGVFbmQgPSAoc3RybSkgPT4ge1xuXG4gIGlmIChkZWZsYXRlU3RhdGVDaGVjayhzdHJtKSkge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuXG4gIGNvbnN0IHN0YXR1cyA9IHN0cm0uc3RhdGUuc3RhdHVzO1xuXG4gIHN0cm0uc3RhdGUgPSBudWxsO1xuXG4gIHJldHVybiBzdGF0dXMgPT09IEJVU1lfU1RBVEUgPyBlcnIoc3RybSwgWl9EQVRBX0VSUk9SKSA6IFpfT0s7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEluaXRpYWxpemVzIHRoZSBjb21wcmVzc2lvbiBkaWN0aW9uYXJ5IGZyb20gdGhlIGdpdmVuIGJ5dGVcbiAqIHNlcXVlbmNlIHdpdGhvdXQgcHJvZHVjaW5nIGFueSBjb21wcmVzc2VkIG91dHB1dC5cbiAqL1xuY29uc3QgZGVmbGF0ZVNldERpY3Rpb25hcnkgPSAoc3RybSwgZGljdGlvbmFyeSkgPT4ge1xuXG4gIGxldCBkaWN0TGVuZ3RoID0gZGljdGlvbmFyeS5sZW5ndGg7XG5cbiAgaWYgKGRlZmxhdGVTdGF0ZUNoZWNrKHN0cm0pKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgY29uc3QgcyA9IHN0cm0uc3RhdGU7XG4gIGNvbnN0IHdyYXAgPSBzLndyYXA7XG5cbiAgaWYgKHdyYXAgPT09IDIgfHwgKHdyYXAgPT09IDEgJiYgcy5zdGF0dXMgIT09IElOSVRfU1RBVEUpIHx8IHMubG9va2FoZWFkKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgLyogd2hlbiB1c2luZyB6bGliIHdyYXBwZXJzLCBjb21wdXRlIEFkbGVyLTMyIGZvciBwcm92aWRlZCBkaWN0aW9uYXJ5ICovXG4gIGlmICh3cmFwID09PSAxKSB7XG4gICAgLyogYWRsZXIzMihzdHJtLT5hZGxlciwgZGljdGlvbmFyeSwgZGljdExlbmd0aCk7ICovXG4gICAgc3RybS5hZGxlciA9IGFkbGVyMzIoc3RybS5hZGxlciwgZGljdGlvbmFyeSwgZGljdExlbmd0aCwgMCk7XG4gIH1cblxuICBzLndyYXAgPSAwOyAgIC8qIGF2b2lkIGNvbXB1dGluZyBBZGxlci0zMiBpbiByZWFkX2J1ZiAqL1xuXG4gIC8qIGlmIGRpY3Rpb25hcnkgd291bGQgZmlsbCB3aW5kb3csIGp1c3QgcmVwbGFjZSB0aGUgaGlzdG9yeSAqL1xuICBpZiAoZGljdExlbmd0aCA+PSBzLndfc2l6ZSkge1xuICAgIGlmICh3cmFwID09PSAwKSB7ICAgICAgICAgICAgLyogYWxyZWFkeSBlbXB0eSBvdGhlcndpc2UgKi9cbiAgICAgIC8qKiogQ0xFQVJfSEFTSChzKTsgKioqL1xuICAgICAgemVybyhzLmhlYWQpOyAvLyBGaWxsIHdpdGggTklMICg9IDApO1xuICAgICAgcy5zdHJzdGFydCA9IDA7XG4gICAgICBzLmJsb2NrX3N0YXJ0ID0gMDtcbiAgICAgIHMuaW5zZXJ0ID0gMDtcbiAgICB9XG4gICAgLyogdXNlIHRoZSB0YWlsICovXG4gICAgLy8gZGljdGlvbmFyeSA9IGRpY3Rpb25hcnkuc2xpY2UoZGljdExlbmd0aCAtIHMud19zaXplKTtcbiAgICBsZXQgdG1wRGljdCA9IG5ldyBVaW50OEFycmF5KHMud19zaXplKTtcbiAgICB0bXBEaWN0LnNldChkaWN0aW9uYXJ5LnN1YmFycmF5KGRpY3RMZW5ndGggLSBzLndfc2l6ZSwgZGljdExlbmd0aCksIDApO1xuICAgIGRpY3Rpb25hcnkgPSB0bXBEaWN0O1xuICAgIGRpY3RMZW5ndGggPSBzLndfc2l6ZTtcbiAgfVxuICAvKiBpbnNlcnQgZGljdGlvbmFyeSBpbnRvIHdpbmRvdyBhbmQgaGFzaCAqL1xuICBjb25zdCBhdmFpbCA9IHN0cm0uYXZhaWxfaW47XG4gIGNvbnN0IG5leHQgPSBzdHJtLm5leHRfaW47XG4gIGNvbnN0IGlucHV0ID0gc3RybS5pbnB1dDtcbiAgc3RybS5hdmFpbF9pbiA9IGRpY3RMZW5ndGg7XG4gIHN0cm0ubmV4dF9pbiA9IDA7XG4gIHN0cm0uaW5wdXQgPSBkaWN0aW9uYXJ5O1xuICBmaWxsX3dpbmRvdyhzKTtcbiAgd2hpbGUgKHMubG9va2FoZWFkID49IE1JTl9NQVRDSCkge1xuICAgIGxldCBzdHIgPSBzLnN0cnN0YXJ0O1xuICAgIGxldCBuID0gcy5sb29rYWhlYWQgLSAoTUlOX01BVENIIC0gMSk7XG4gICAgZG8ge1xuICAgICAgLyogVVBEQVRFX0hBU0gocywgcy0+aW5zX2gsIHMtPndpbmRvd1tzdHIgKyBNSU5fTUFUQ0gtMV0pOyAqL1xuICAgICAgcy5pbnNfaCA9IEhBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbc3RyICsgTUlOX01BVENIIC0gMV0pO1xuXG4gICAgICBzLnByZXZbc3RyICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuXG4gICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzdHI7XG4gICAgICBzdHIrKztcbiAgICB9IHdoaWxlICgtLW4pO1xuICAgIHMuc3Ryc3RhcnQgPSBzdHI7XG4gICAgcy5sb29rYWhlYWQgPSBNSU5fTUFUQ0ggLSAxO1xuICAgIGZpbGxfd2luZG93KHMpO1xuICB9XG4gIHMuc3Ryc3RhcnQgKz0gcy5sb29rYWhlYWQ7XG4gIHMuYmxvY2tfc3RhcnQgPSBzLnN0cnN0YXJ0O1xuICBzLmluc2VydCA9IHMubG9va2FoZWFkO1xuICBzLmxvb2thaGVhZCA9IDA7XG4gIHMubWF0Y2hfbGVuZ3RoID0gcy5wcmV2X2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG4gIHMubWF0Y2hfYXZhaWxhYmxlID0gMDtcbiAgc3RybS5uZXh0X2luID0gbmV4dDtcbiAgc3RybS5pbnB1dCA9IGlucHV0O1xuICBzdHJtLmF2YWlsX2luID0gYXZhaWw7XG4gIHMud3JhcCA9IHdyYXA7XG4gIHJldHVybiBaX09LO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cy5kZWZsYXRlSW5pdCA9IGRlZmxhdGVJbml0O1xubW9kdWxlLmV4cG9ydHMuZGVmbGF0ZUluaXQyID0gZGVmbGF0ZUluaXQyO1xubW9kdWxlLmV4cG9ydHMuZGVmbGF0ZVJlc2V0ID0gZGVmbGF0ZVJlc2V0O1xubW9kdWxlLmV4cG9ydHMuZGVmbGF0ZVJlc2V0S2VlcCA9IGRlZmxhdGVSZXNldEtlZXA7XG5tb2R1bGUuZXhwb3J0cy5kZWZsYXRlU2V0SGVhZGVyID0gZGVmbGF0ZVNldEhlYWRlcjtcbm1vZHVsZS5leHBvcnRzLmRlZmxhdGUgPSBkZWZsYXRlO1xubW9kdWxlLmV4cG9ydHMuZGVmbGF0ZUVuZCA9IGRlZmxhdGVFbmQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZsYXRlU2V0RGljdGlvbmFyeSA9IGRlZmxhdGVTZXREaWN0aW9uYXJ5O1xubW9kdWxlLmV4cG9ydHMuZGVmbGF0ZUluZm8gPSAncGFrbyBkZWZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KSc7XG5cbi8qIE5vdCBpbXBsZW1lbnRlZFxubW9kdWxlLmV4cG9ydHMuZGVmbGF0ZUJvdW5kID0gZGVmbGF0ZUJvdW5kO1xubW9kdWxlLmV4cG9ydHMuZGVmbGF0ZUNvcHkgPSBkZWZsYXRlQ29weTtcbm1vZHVsZS5leHBvcnRzLmRlZmxhdGVHZXREaWN0aW9uYXJ5ID0gZGVmbGF0ZUdldERpY3Rpb25hcnk7XG5tb2R1bGUuZXhwb3J0cy5kZWZsYXRlUGFyYW1zID0gZGVmbGF0ZVBhcmFtcztcbm1vZHVsZS5leHBvcnRzLmRlZmxhdGVQZW5kaW5nID0gZGVmbGF0ZVBlbmRpbmc7XG5tb2R1bGUuZXhwb3J0cy5kZWZsYXRlUHJpbWUgPSBkZWZsYXRlUHJpbWU7XG5tb2R1bGUuZXhwb3J0cy5kZWZsYXRlVHVuZSA9IGRlZmxhdGVUdW5lO1xuKi9cbiIsIid1c2Ugc3RyaWN0JztcblxuXG5jb25zdCBfaGFzID0gKG9iaiwga2V5KSA9PiB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMuYXNzaWduID0gZnVuY3Rpb24gKG9iaiAvKmZyb20xLCBmcm9tMiwgZnJvbTMsIC4uLiovKSB7XG4gIGNvbnN0IHNvdXJjZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB3aGlsZSAoc291cmNlcy5sZW5ndGgpIHtcbiAgICBjb25zdCBzb3VyY2UgPSBzb3VyY2VzLnNoaWZ0KCk7XG4gICAgaWYgKCFzb3VyY2UpIHsgY29udGludWU7IH1cblxuICAgIGlmICh0eXBlb2Ygc291cmNlICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzb3VyY2UgKyAnbXVzdCBiZSBub24tb2JqZWN0Jyk7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBwIGluIHNvdXJjZSkge1xuICAgICAgaWYgKF9oYXMoc291cmNlLCBwKSkge1xuICAgICAgICBvYmpbcF0gPSBzb3VyY2VbcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cblxuLy8gSm9pbiBhcnJheSBvZiBjaHVua3MgdG8gc2luZ2xlIGFycmF5LlxubW9kdWxlLmV4cG9ydHMuZmxhdHRlbkNodW5rcyA9IChjaHVua3MpID0+IHtcbiAgLy8gY2FsY3VsYXRlIGRhdGEgbGVuZ3RoXG4gIGxldCBsZW4gPSAwO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gY2h1bmtzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGxlbiArPSBjaHVua3NbaV0ubGVuZ3RoO1xuICB9XG5cbiAgLy8gam9pbiBjaHVua3NcbiAgY29uc3QgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkobGVuKTtcblxuICBmb3IgKGxldCBpID0gMCwgcG9zID0gMCwgbCA9IGNodW5rcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBsZXQgY2h1bmsgPSBjaHVua3NbaV07XG4gICAgcmVzdWx0LnNldChjaHVuaywgcG9zKTtcbiAgICBwb3MgKz0gY2h1bmsubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBTdHJpbmcgZW5jb2RlL2RlY29kZSBoZWxwZXJzXG4ndXNlIHN0cmljdCc7XG5cblxuLy8gUXVpY2sgY2hlY2sgaWYgd2UgY2FuIHVzZSBmYXN0IGFycmF5IHRvIGJpbiBzdHJpbmcgY29udmVyc2lvblxuLy9cbi8vIC0gYXBwbHkoQXJyYXkpIGNhbiBmYWlsIG9uIEFuZHJvaWQgMi4yXG4vLyAtIGFwcGx5KFVpbnQ4QXJyYXkpIGNhbiBmYWlsIG9uIGlPUyA1LjEgU2FmYXJpXG4vL1xubGV0IFNUUl9BUFBMWV9VSUFfT0sgPSB0cnVlO1xuXG50cnkgeyBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KDEpKTsgfSBjYXRjaCAoX18pIHsgU1RSX0FQUExZX1VJQV9PSyA9IGZhbHNlOyB9XG5cblxuLy8gVGFibGUgd2l0aCB1dGY4IGxlbmd0aHMgKGNhbGN1bGF0ZWQgYnkgZmlyc3QgYnl0ZSBvZiBzZXF1ZW5jZSlcbi8vIE5vdGUsIHRoYXQgNSAmIDYtYnl0ZSB2YWx1ZXMgYW5kIHNvbWUgNC1ieXRlIHZhbHVlcyBjYW4gbm90IGJlIHJlcHJlc2VudGVkIGluIEpTLFxuLy8gYmVjYXVzZSBtYXggcG9zc2libGUgY29kZXBvaW50IGlzIDB4MTBmZmZmXG5jb25zdCBfdXRmOGxlbiA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG5mb3IgKGxldCBxID0gMDsgcSA8IDI1NjsgcSsrKSB7XG4gIF91dGY4bGVuW3FdID0gKHEgPj0gMjUyID8gNiA6IHEgPj0gMjQ4ID8gNSA6IHEgPj0gMjQwID8gNCA6IHEgPj0gMjI0ID8gMyA6IHEgPj0gMTkyID8gMiA6IDEpO1xufVxuX3V0ZjhsZW5bMjU0XSA9IF91dGY4bGVuWzI1NF0gPSAxOyAvLyBJbnZhbGlkIHNlcXVlbmNlIHN0YXJ0XG5cblxuLy8gY29udmVydCBzdHJpbmcgdG8gYXJyYXkgKHR5cGVkLCB3aGVuIHBvc3NpYmxlKVxubW9kdWxlLmV4cG9ydHMuc3RyaW5nMmJ1ZiA9IChzdHIpID0+IHtcbiAgaWYgKHR5cGVvZiBUZXh0RW5jb2RlciA9PT0gJ2Z1bmN0aW9uJyAmJiBUZXh0RW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlKSB7XG4gICAgcmV0dXJuIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShzdHIpO1xuICB9XG5cbiAgbGV0IGJ1ZiwgYywgYzIsIG1fcG9zLCBpLCBzdHJfbGVuID0gc3RyLmxlbmd0aCwgYnVmX2xlbiA9IDA7XG5cbiAgLy8gY291bnQgYmluYXJ5IHNpemVcbiAgZm9yIChtX3BvcyA9IDA7IG1fcG9zIDwgc3RyX2xlbjsgbV9wb3MrKykge1xuICAgIGMgPSBzdHIuY2hhckNvZGVBdChtX3Bvcyk7XG4gICAgaWYgKChjICYgMHhmYzAwKSA9PT0gMHhkODAwICYmIChtX3BvcyArIDEgPCBzdHJfbGVuKSkge1xuICAgICAgYzIgPSBzdHIuY2hhckNvZGVBdChtX3BvcyArIDEpO1xuICAgICAgaWYgKChjMiAmIDB4ZmMwMCkgPT09IDB4ZGMwMCkge1xuICAgICAgICBjID0gMHgxMDAwMCArICgoYyAtIDB4ZDgwMCkgPDwgMTApICsgKGMyIC0gMHhkYzAwKTtcbiAgICAgICAgbV9wb3MrKztcbiAgICAgIH1cbiAgICB9XG4gICAgYnVmX2xlbiArPSBjIDwgMHg4MCA/IDEgOiBjIDwgMHg4MDAgPyAyIDogYyA8IDB4MTAwMDAgPyAzIDogNDtcbiAgfVxuXG4gIC8vIGFsbG9jYXRlIGJ1ZmZlclxuICBidWYgPSBuZXcgVWludDhBcnJheShidWZfbGVuKTtcblxuICAvLyBjb252ZXJ0XG4gIGZvciAoaSA9IDAsIG1fcG9zID0gMDsgaSA8IGJ1Zl9sZW47IG1fcG9zKyspIHtcbiAgICBjID0gc3RyLmNoYXJDb2RlQXQobV9wb3MpO1xuICAgIGlmICgoYyAmIDB4ZmMwMCkgPT09IDB4ZDgwMCAmJiAobV9wb3MgKyAxIDwgc3RyX2xlbikpIHtcbiAgICAgIGMyID0gc3RyLmNoYXJDb2RlQXQobV9wb3MgKyAxKTtcbiAgICAgIGlmICgoYzIgJiAweGZjMDApID09PSAweGRjMDApIHtcbiAgICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgLSAweGQ4MDApIDw8IDEwKSArIChjMiAtIDB4ZGMwMCk7XG4gICAgICAgIG1fcG9zKys7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjIDwgMHg4MCkge1xuICAgICAgLyogb25lIGJ5dGUgKi9cbiAgICAgIGJ1ZltpKytdID0gYztcbiAgICB9IGVsc2UgaWYgKGMgPCAweDgwMCkge1xuICAgICAgLyogdHdvIGJ5dGVzICovXG4gICAgICBidWZbaSsrXSA9IDB4QzAgfCAoYyA+Pj4gNik7XG4gICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyAmIDB4M2YpO1xuICAgIH0gZWxzZSBpZiAoYyA8IDB4MTAwMDApIHtcbiAgICAgIC8qIHRocmVlIGJ5dGVzICovXG4gICAgICBidWZbaSsrXSA9IDB4RTAgfCAoYyA+Pj4gMTIpO1xuICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgPj4+IDYgJiAweDNmKTtcbiAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjICYgMHgzZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIGZvdXIgYnl0ZXMgKi9cbiAgICAgIGJ1ZltpKytdID0gMHhmMCB8IChjID4+PiAxOCk7XG4gICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyA+Pj4gMTIgJiAweDNmKTtcbiAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjID4+PiA2ICYgMHgzZik7XG4gICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyAmIDB4M2YpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWY7XG59O1xuXG4vLyBIZWxwZXJcbmNvbnN0IGJ1ZjJiaW5zdHJpbmcgPSAoYnVmLCBsZW4pID0+IHtcbiAgLy8gT24gQ2hyb21lLCB0aGUgYXJndW1lbnRzIGluIGEgZnVuY3Rpb24gY2FsbCB0aGF0IGFyZSBhbGxvd2VkIGlzIGA2NTUzNGAuXG4gIC8vIElmIHRoZSBsZW5ndGggb2YgdGhlIGJ1ZmZlciBpcyBzbWFsbGVyIHRoYW4gdGhhdCwgd2UgY2FuIHVzZSB0aGlzIG9wdGltaXphdGlvbixcbiAgLy8gb3RoZXJ3aXNlIHdlIHdpbGwgdGFrZSBhIHNsb3dlciBwYXRoLlxuICBpZiAobGVuIDwgNjU1MzQpIHtcbiAgICBpZiAoYnVmLnN1YmFycmF5ICYmIFNUUl9BUFBMWV9VSUFfT0spIHtcbiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGJ1Zi5sZW5ndGggPT09IGxlbiA/IGJ1ZiA6IGJ1Zi5zdWJhcnJheSgwLCBsZW4pKTtcbiAgICB9XG4gIH1cblxuICBsZXQgcmVzdWx0ID0gJyc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8vIGNvbnZlcnQgYXJyYXkgdG8gc3RyaW5nXG5tb2R1bGUuZXhwb3J0cy5idWYyc3RyaW5nID0gKGJ1ZiwgbWF4KSA9PiB7XG4gIGNvbnN0IGxlbiA9IG1heCB8fCBidWYubGVuZ3RoO1xuXG4gIGlmICh0eXBlb2YgVGV4dERlY29kZXIgPT09ICdmdW5jdGlvbicgJiYgVGV4dERlY29kZXIucHJvdG90eXBlLmRlY29kZSkge1xuICAgIHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoYnVmLnN1YmFycmF5KDAsIG1heCkpO1xuICB9XG5cbiAgbGV0IGksIG91dDtcblxuICAvLyBSZXNlcnZlIG1heCBwb3NzaWJsZSBsZW5ndGggKDIgd29yZHMgcGVyIGNoYXIpXG4gIC8vIE5COiBieSB1bmtub3duIHJlYXNvbnMsIEFycmF5IGlzIHNpZ25pZmljYW50bHkgZmFzdGVyIGZvclxuICAvLyAgICAgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseSB0aGFuIFVpbnQxNkFycmF5LlxuICBjb25zdCB1dGYxNmJ1ZiA9IG5ldyBBcnJheShsZW4gKiAyKTtcblxuICBmb3IgKG91dCA9IDAsIGkgPSAwOyBpIDwgbGVuOykge1xuICAgIGxldCBjID0gYnVmW2krK107XG4gICAgLy8gcXVpY2sgcHJvY2VzcyBhc2NpaVxuICAgIGlmIChjIDwgMHg4MCkgeyB1dGYxNmJ1ZltvdXQrK10gPSBjOyBjb250aW51ZTsgfVxuXG4gICAgbGV0IGNfbGVuID0gX3V0ZjhsZW5bY107XG4gICAgLy8gc2tpcCA1ICYgNiBieXRlIGNvZGVzXG4gICAgaWYgKGNfbGVuID4gNCkgeyB1dGYxNmJ1ZltvdXQrK10gPSAweGZmZmQ7IGkgKz0gY19sZW4gLSAxOyBjb250aW51ZTsgfVxuXG4gICAgLy8gYXBwbHkgbWFzayBvbiBmaXJzdCBieXRlXG4gICAgYyAmPSBjX2xlbiA9PT0gMiA/IDB4MWYgOiBjX2xlbiA9PT0gMyA/IDB4MGYgOiAweDA3O1xuICAgIC8vIGpvaW4gdGhlIHJlc3RcbiAgICB3aGlsZSAoY19sZW4gPiAxICYmIGkgPCBsZW4pIHtcbiAgICAgIGMgPSAoYyA8PCA2KSB8IChidWZbaSsrXSAmIDB4M2YpO1xuICAgICAgY19sZW4tLTtcbiAgICB9XG5cbiAgICAvLyB0ZXJtaW5hdGVkIGJ5IGVuZCBvZiBzdHJpbmc/XG4gICAgaWYgKGNfbGVuID4gMSkgeyB1dGYxNmJ1ZltvdXQrK10gPSAweGZmZmQ7IGNvbnRpbnVlOyB9XG5cbiAgICBpZiAoYyA8IDB4MTAwMDApIHtcbiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGMgLT0gMHgxMDAwMDtcbiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IDB4ZDgwMCB8ICgoYyA+PiAxMCkgJiAweDNmZik7XG4gICAgICB1dGYxNmJ1ZltvdXQrK10gPSAweGRjMDAgfCAoYyAmIDB4M2ZmKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmMmJpbnN0cmluZyh1dGYxNmJ1Ziwgb3V0KTtcbn07XG5cblxuLy8gQ2FsY3VsYXRlIG1heCBwb3NzaWJsZSBwb3NpdGlvbiBpbiB1dGY4IGJ1ZmZlcixcbi8vIHRoYXQgd2lsbCBub3QgYnJlYWsgc2VxdWVuY2UuIElmIHRoYXQncyBub3QgcG9zc2libGVcbi8vIC0gKHZlcnkgc21hbGwgbGltaXRzKSByZXR1cm4gbWF4IHNpemUgYXMgaXMuXG4vL1xuLy8gYnVmW10gLSB1dGY4IGJ5dGVzIGFycmF5XG4vLyBtYXggICAtIGxlbmd0aCBsaW1pdCAobWFuZGF0b3J5KTtcbm1vZHVsZS5leHBvcnRzLnV0Zjhib3JkZXIgPSAoYnVmLCBtYXgpID0+IHtcblxuICBtYXggPSBtYXggfHwgYnVmLmxlbmd0aDtcbiAgaWYgKG1heCA+IGJ1Zi5sZW5ndGgpIHsgbWF4ID0gYnVmLmxlbmd0aDsgfVxuXG4gIC8vIGdvIGJhY2sgZnJvbSBsYXN0IHBvc2l0aW9uLCB1bnRpbCBzdGFydCBvZiBzZXF1ZW5jZSBmb3VuZFxuICBsZXQgcG9zID0gbWF4IC0gMTtcbiAgd2hpbGUgKHBvcyA+PSAwICYmIChidWZbcG9zXSAmIDB4QzApID09PSAweDgwKSB7IHBvcy0tOyB9XG5cbiAgLy8gVmVyeSBzbWFsbCBhbmQgYnJva2VuIHNlcXVlbmNlLFxuICAvLyByZXR1cm4gbWF4LCBiZWNhdXNlIHdlIHNob3VsZCByZXR1cm4gc29tZXRoaW5nIGFueXdheS5cbiAgaWYgKHBvcyA8IDApIHsgcmV0dXJuIG1heDsgfVxuXG4gIC8vIElmIHdlIGNhbWUgdG8gc3RhcnQgb2YgYnVmZmVyIC0gdGhhdCBtZWFucyBidWZmZXIgaXMgdG9vIHNtYWxsLFxuICAvLyByZXR1cm4gbWF4IHRvby5cbiAgaWYgKHBvcyA9PT0gMCkgeyByZXR1cm4gbWF4OyB9XG5cbiAgcmV0dXJuIChwb3MgKyBfdXRmOGxlbltidWZbcG9zXV0gPiBtYXgpID8gcG9zIDogbWF4O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5mdW5jdGlvbiBaU3RyZWFtKCkge1xuICAvKiBuZXh0IGlucHV0IGJ5dGUgKi9cbiAgdGhpcy5pbnB1dCA9IG51bGw7IC8vIEpTIHNwZWNpZmljLCBiZWNhdXNlIHdlIGhhdmUgbm8gcG9pbnRlcnNcbiAgdGhpcy5uZXh0X2luID0gMDtcbiAgLyogbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZSBhdCBpbnB1dCAqL1xuICB0aGlzLmF2YWlsX2luID0gMDtcbiAgLyogdG90YWwgbnVtYmVyIG9mIGlucHV0IGJ5dGVzIHJlYWQgc28gZmFyICovXG4gIHRoaXMudG90YWxfaW4gPSAwO1xuICAvKiBuZXh0IG91dHB1dCBieXRlIHNob3VsZCBiZSBwdXQgdGhlcmUgKi9cbiAgdGhpcy5vdXRwdXQgPSBudWxsOyAvLyBKUyBzcGVjaWZpYywgYmVjYXVzZSB3ZSBoYXZlIG5vIHBvaW50ZXJzXG4gIHRoaXMubmV4dF9vdXQgPSAwO1xuICAvKiByZW1haW5pbmcgZnJlZSBzcGFjZSBhdCBvdXRwdXQgKi9cbiAgdGhpcy5hdmFpbF9vdXQgPSAwO1xuICAvKiB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgb3V0cHV0IHNvIGZhciAqL1xuICB0aGlzLnRvdGFsX291dCA9IDA7XG4gIC8qIGxhc3QgZXJyb3IgbWVzc2FnZSwgTlVMTCBpZiBubyBlcnJvciAqL1xuICB0aGlzLm1zZyA9ICcnLypaX05VTEwqLztcbiAgLyogbm90IHZpc2libGUgYnkgYXBwbGljYXRpb25zICovXG4gIHRoaXMuc3RhdGUgPSBudWxsO1xuICAvKiBiZXN0IGd1ZXNzIGFib3V0IHRoZSBkYXRhIHR5cGU6IGJpbmFyeSBvciB0ZXh0ICovXG4gIHRoaXMuZGF0YV90eXBlID0gMi8qWl9VTktOT1dOKi87XG4gIC8qIGFkbGVyMzIgdmFsdWUgb2YgdGhlIHVuY29tcHJlc3NlZCBkYXRhICovXG4gIHRoaXMuYWRsZXIgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFpTdHJlYW07XG4iLCIndXNlIHN0cmljdCc7XG5cblxuY29uc3QgemxpYl9kZWZsYXRlID0gcmVxdWlyZSgnLi96bGliL2RlZmxhdGUnKTtcbmNvbnN0IHV0aWxzICAgICAgICA9IHJlcXVpcmUoJy4vdXRpbHMvY29tbW9uJyk7XG5jb25zdCBzdHJpbmdzICAgICAgPSByZXF1aXJlKCcuL3V0aWxzL3N0cmluZ3MnKTtcbmNvbnN0IG1zZyAgICAgICAgICA9IHJlcXVpcmUoJy4vemxpYi9tZXNzYWdlcycpO1xuY29uc3QgWlN0cmVhbSAgICAgID0gcmVxdWlyZSgnLi96bGliL3pzdHJlYW0nKTtcblxuY29uc3QgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKiBQdWJsaWMgY29uc3RhbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuY29uc3Qge1xuICBaX05PX0ZMVVNILCBaX1NZTkNfRkxVU0gsIFpfRlVMTF9GTFVTSCwgWl9GSU5JU0gsXG4gIFpfT0ssIFpfU1RSRUFNX0VORCxcbiAgWl9ERUZBVUxUX0NPTVBSRVNTSU9OLFxuICBaX0RFRkFVTFRfU1RSQVRFR1ksXG4gIFpfREVGTEFURURcbn0gPSByZXF1aXJlKCcuL3psaWIvY29uc3RhbnRzJyk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuLyoqXG4gKiBjbGFzcyBEZWZsYXRlXG4gKlxuICogR2VuZXJpYyBKUy1zdHlsZSB3cmFwcGVyIGZvciB6bGliIGNhbGxzLiBJZiB5b3UgZG9uJ3QgbmVlZFxuICogc3RyZWFtaW5nIGJlaGF2aW91ciAtIHVzZSBtb3JlIHNpbXBsZSBmdW5jdGlvbnM6IFtbZGVmbGF0ZV1dLFxuICogW1tkZWZsYXRlUmF3XV0gYW5kIFtbZ3ppcF1dLlxuICoqL1xuXG4vKiBpbnRlcm5hbFxuICogRGVmbGF0ZS5jaHVua3MgLT4gQXJyYXlcbiAqXG4gKiBDaHVua3Mgb2Ygb3V0cHV0IGRhdGEsIGlmIFtbRGVmbGF0ZSNvbkRhdGFdXSBub3Qgb3ZlcnJpZGRlbi5cbiAqKi9cblxuLyoqXG4gKiBEZWZsYXRlLnJlc3VsdCAtPiBVaW50OEFycmF5XG4gKlxuICogQ29tcHJlc3NlZCByZXN1bHQsIGdlbmVyYXRlZCBieSBkZWZhdWx0IFtbRGVmbGF0ZSNvbkRhdGFdXVxuICogYW5kIFtbRGVmbGF0ZSNvbkVuZF1dIGhhbmRsZXJzLiBGaWxsZWQgYWZ0ZXIgeW91IHB1c2ggbGFzdCBjaHVua1xuICogKGNhbGwgW1tEZWZsYXRlI3B1c2hdXSB3aXRoIGBaX0ZJTklTSGAgLyBgdHJ1ZWAgcGFyYW0pLlxuICoqL1xuXG4vKipcbiAqIERlZmxhdGUuZXJyIC0+IE51bWJlclxuICpcbiAqIEVycm9yIGNvZGUgYWZ0ZXIgZGVmbGF0ZSBmaW5pc2hlZC4gMCAoWl9PSykgb24gc3VjY2Vzcy5cbiAqIFlvdSB3aWxsIG5vdCBuZWVkIGl0IGluIHJlYWwgbGlmZSwgYmVjYXVzZSBkZWZsYXRlIGVycm9yc1xuICogYXJlIHBvc3NpYmxlIG9ubHkgb24gd3Jvbmcgb3B0aW9ucyBvciBiYWQgYG9uRGF0YWAgLyBgb25FbmRgXG4gKiBjdXN0b20gaGFuZGxlcnMuXG4gKiovXG5cbi8qKlxuICogRGVmbGF0ZS5tc2cgLT4gU3RyaW5nXG4gKlxuICogRXJyb3IgbWVzc2FnZSwgaWYgW1tEZWZsYXRlLmVycl1dICE9IDBcbiAqKi9cblxuXG4vKipcbiAqIG5ldyBEZWZsYXRlKG9wdGlvbnMpXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgZGVmbGF0ZSBvcHRpb25zLlxuICpcbiAqIENyZWF0ZXMgbmV3IGRlZmxhdG9yIGluc3RhbmNlIHdpdGggc3BlY2lmaWVkIHBhcmFtcy4gVGhyb3dzIGV4Y2VwdGlvblxuICogb24gYmFkIHBhcmFtcy4gU3VwcG9ydGVkIG9wdGlvbnM6XG4gKlxuICogLSBgbGV2ZWxgXG4gKiAtIGB3aW5kb3dCaXRzYFxuICogLSBgbWVtTGV2ZWxgXG4gKiAtIGBzdHJhdGVneWBcbiAqIC0gYGRpY3Rpb25hcnlgXG4gKlxuICogW2h0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZF0oaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkKVxuICogZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhlc2UuXG4gKlxuICogQWRkaXRpb25hbCBvcHRpb25zLCBmb3IgaW50ZXJuYWwgbmVlZHM6XG4gKlxuICogLSBgY2h1bmtTaXplYCAtIHNpemUgb2YgZ2VuZXJhdGVkIGRhdGEgY2h1bmtzICgxNksgYnkgZGVmYXVsdClcbiAqIC0gYHJhd2AgKEJvb2xlYW4pIC0gZG8gcmF3IGRlZmxhdGVcbiAqIC0gYGd6aXBgIChCb29sZWFuKSAtIGNyZWF0ZSBnemlwIHdyYXBwZXJcbiAqIC0gYGhlYWRlcmAgKE9iamVjdCkgLSBjdXN0b20gaGVhZGVyIGZvciBnemlwXG4gKiAgIC0gYHRleHRgIChCb29sZWFuKSAtIHRydWUgaWYgY29tcHJlc3NlZCBkYXRhIGJlbGlldmVkIHRvIGJlIHRleHRcbiAqICAgLSBgdGltZWAgKE51bWJlcikgLSBtb2RpZmljYXRpb24gdGltZSwgdW5peCB0aW1lc3RhbXBcbiAqICAgLSBgb3NgIChOdW1iZXIpIC0gb3BlcmF0aW9uIHN5c3RlbSBjb2RlXG4gKiAgIC0gYGV4dHJhYCAoQXJyYXkpIC0gYXJyYXkgb2YgYnl0ZXMgd2l0aCBleHRyYSBkYXRhIChtYXggNjU1MzYpXG4gKiAgIC0gYG5hbWVgIChTdHJpbmcpIC0gZmlsZSBuYW1lIChiaW5hcnkgc3RyaW5nKVxuICogICAtIGBjb21tZW50YCAoU3RyaW5nKSAtIGNvbW1lbnQgKGJpbmFyeSBzdHJpbmcpXG4gKiAgIC0gYGhjcmNgIChCb29sZWFuKSAtIHRydWUgaWYgaGVhZGVyIGNyYyBzaG91bGQgYmUgYWRkZWRcbiAqXG4gKiAjIyMjIyBFeGFtcGxlOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IHBha28gPSByZXF1aXJlKCdwYWtvJylcbiAqICAgLCBjaHVuazEgPSBuZXcgVWludDhBcnJheShbMSwyLDMsNCw1LDYsNyw4LDldKVxuICogICAsIGNodW5rMiA9IG5ldyBVaW50OEFycmF5KFsxMCwxMSwxMiwxMywxNCwxNSwxNiwxNywxOCwxOV0pO1xuICpcbiAqIGNvbnN0IGRlZmxhdGUgPSBuZXcgcGFrby5EZWZsYXRlKHsgbGV2ZWw6IDN9KTtcbiAqXG4gKiBkZWZsYXRlLnB1c2goY2h1bmsxLCBmYWxzZSk7XG4gKiBkZWZsYXRlLnB1c2goY2h1bmsyLCB0cnVlKTsgIC8vIHRydWUgLT4gbGFzdCBjaHVua1xuICpcbiAqIGlmIChkZWZsYXRlLmVycikgeyB0aHJvdyBuZXcgRXJyb3IoZGVmbGF0ZS5lcnIpOyB9XG4gKlxuICogY29uc29sZS5sb2coZGVmbGF0ZS5yZXN1bHQpO1xuICogYGBgXG4gKiovXG5mdW5jdGlvbiBEZWZsYXRlKG9wdGlvbnMpIHtcbiAgdGhpcy5vcHRpb25zID0gdXRpbHMuYXNzaWduKHtcbiAgICBsZXZlbDogWl9ERUZBVUxUX0NPTVBSRVNTSU9OLFxuICAgIG1ldGhvZDogWl9ERUZMQVRFRCxcbiAgICBjaHVua1NpemU6IDE2Mzg0LFxuICAgIHdpbmRvd0JpdHM6IDE1LFxuICAgIG1lbUxldmVsOiA4LFxuICAgIHN0cmF0ZWd5OiBaX0RFRkFVTFRfU1RSQVRFR1lcbiAgfSwgb3B0aW9ucyB8fCB7fSk7XG5cbiAgbGV0IG9wdCA9IHRoaXMub3B0aW9ucztcblxuICBpZiAob3B0LnJhdyAmJiAob3B0LndpbmRvd0JpdHMgPiAwKSkge1xuICAgIG9wdC53aW5kb3dCaXRzID0gLW9wdC53aW5kb3dCaXRzO1xuICB9XG5cbiAgZWxzZSBpZiAob3B0Lmd6aXAgJiYgKG9wdC53aW5kb3dCaXRzID4gMCkgJiYgKG9wdC53aW5kb3dCaXRzIDwgMTYpKSB7XG4gICAgb3B0LndpbmRvd0JpdHMgKz0gMTY7XG4gIH1cblxuICB0aGlzLmVyciAgICA9IDA7ICAgICAgLy8gZXJyb3IgY29kZSwgaWYgaGFwcGVucyAoMCA9IFpfT0spXG4gIHRoaXMubXNnICAgID0gJyc7ICAgICAvLyBlcnJvciBtZXNzYWdlXG4gIHRoaXMuZW5kZWQgID0gZmFsc2U7ICAvLyB1c2VkIHRvIGF2b2lkIG11bHRpcGxlIG9uRW5kKCkgY2FsbHNcbiAgdGhpcy5jaHVua3MgPSBbXTsgICAgIC8vIGNodW5rcyBvZiBjb21wcmVzc2VkIGRhdGFcblxuICB0aGlzLnN0cm0gPSBuZXcgWlN0cmVhbSgpO1xuICB0aGlzLnN0cm0uYXZhaWxfb3V0ID0gMDtcblxuICBsZXQgc3RhdHVzID0gemxpYl9kZWZsYXRlLmRlZmxhdGVJbml0MihcbiAgICB0aGlzLnN0cm0sXG4gICAgb3B0LmxldmVsLFxuICAgIG9wdC5tZXRob2QsXG4gICAgb3B0LndpbmRvd0JpdHMsXG4gICAgb3B0Lm1lbUxldmVsLFxuICAgIG9wdC5zdHJhdGVneVxuICApO1xuXG4gIGlmIChzdGF0dXMgIT09IFpfT0spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnW3N0YXR1c10pO1xuICB9XG5cbiAgaWYgKG9wdC5oZWFkZXIpIHtcbiAgICB6bGliX2RlZmxhdGUuZGVmbGF0ZVNldEhlYWRlcih0aGlzLnN0cm0sIG9wdC5oZWFkZXIpO1xuICB9XG5cbiAgaWYgKG9wdC5kaWN0aW9uYXJ5KSB7XG4gICAgbGV0IGRpY3Q7XG4gICAgLy8gQ29udmVydCBkYXRhIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2Ygb3B0LmRpY3Rpb25hcnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBJZiB3ZSBuZWVkIHRvIGNvbXByZXNzIHRleHQsIGNoYW5nZSBlbmNvZGluZyB0byB1dGY4LlxuICAgICAgZGljdCA9IHN0cmluZ3Muc3RyaW5nMmJ1ZihvcHQuZGljdGlvbmFyeSk7XG4gICAgfSBlbHNlIGlmICh0b1N0cmluZy5jYWxsKG9wdC5kaWN0aW9uYXJ5KSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJykge1xuICAgICAgZGljdCA9IG5ldyBVaW50OEFycmF5KG9wdC5kaWN0aW9uYXJ5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGljdCA9IG9wdC5kaWN0aW9uYXJ5O1xuICAgIH1cblxuICAgIHN0YXR1cyA9IHpsaWJfZGVmbGF0ZS5kZWZsYXRlU2V0RGljdGlvbmFyeSh0aGlzLnN0cm0sIGRpY3QpO1xuXG4gICAgaWYgKHN0YXR1cyAhPT0gWl9PSykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZ1tzdGF0dXNdKTtcbiAgICB9XG5cbiAgICB0aGlzLl9kaWN0X3NldCA9IHRydWU7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWZsYXRlI3B1c2goZGF0YVssIGZsdXNoX21vZGVdKSAtPiBCb29sZWFuXG4gKiAtIGRhdGEgKFVpbnQ4QXJyYXl8QXJyYXlCdWZmZXJ8U3RyaW5nKTogaW5wdXQgZGF0YS4gU3RyaW5ncyB3aWxsIGJlXG4gKiAgIGNvbnZlcnRlZCB0byB1dGY4IGJ5dGUgc2VxdWVuY2UuXG4gKiAtIGZsdXNoX21vZGUgKE51bWJlcnxCb29sZWFuKTogMC4uNiBmb3IgY29ycmVzcG9uZGluZyBaX05PX0ZMVVNILi5aX1RSRUUgbW9kZXMuXG4gKiAgIFNlZSBjb25zdGFudHMuIFNraXBwZWQgb3IgYGZhbHNlYCBtZWFucyBaX05PX0ZMVVNILCBgdHJ1ZWAgbWVhbnMgWl9GSU5JU0guXG4gKlxuICogU2VuZHMgaW5wdXQgZGF0YSB0byBkZWZsYXRlIHBpcGUsIGdlbmVyYXRpbmcgW1tEZWZsYXRlI29uRGF0YV1dIGNhbGxzIHdpdGhcbiAqIG5ldyBjb21wcmVzc2VkIGNodW5rcy4gUmV0dXJucyBgdHJ1ZWAgb24gc3VjY2Vzcy4gVGhlIGxhc3QgZGF0YSBibG9jayBtdXN0XG4gKiBoYXZlIGBmbHVzaF9tb2RlYCBaX0ZJTklTSCAob3IgYHRydWVgKS4gVGhhdCB3aWxsIGZsdXNoIGludGVybmFsIHBlbmRpbmdcbiAqIGJ1ZmZlcnMgYW5kIGNhbGwgW1tEZWZsYXRlI29uRW5kXV0uXG4gKlxuICogT24gZmFpbCBjYWxsIFtbRGVmbGF0ZSNvbkVuZF1dIHdpdGggZXJyb3IgY29kZSBhbmQgcmV0dXJuIGZhbHNlLlxuICpcbiAqICMjIyMjIEV4YW1wbGVcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBwdXNoKGNodW5rLCBmYWxzZSk7IC8vIHB1c2ggb25lIG9mIGRhdGEgY2h1bmtzXG4gKiAuLi5cbiAqIHB1c2goY2h1bmssIHRydWUpOyAgLy8gcHVzaCBsYXN0IGNodW5rXG4gKiBgYGBcbiAqKi9cbkRlZmxhdGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoZGF0YSwgZmx1c2hfbW9kZSkge1xuICBjb25zdCBzdHJtID0gdGhpcy5zdHJtO1xuICBjb25zdCBjaHVua1NpemUgPSB0aGlzLm9wdGlvbnMuY2h1bmtTaXplO1xuICBsZXQgc3RhdHVzLCBfZmx1c2hfbW9kZTtcblxuICBpZiAodGhpcy5lbmRlZCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICBpZiAoZmx1c2hfbW9kZSA9PT0gfn5mbHVzaF9tb2RlKSBfZmx1c2hfbW9kZSA9IGZsdXNoX21vZGU7XG4gIGVsc2UgX2ZsdXNoX21vZGUgPSBmbHVzaF9tb2RlID09PSB0cnVlID8gWl9GSU5JU0ggOiBaX05PX0ZMVVNIO1xuXG4gIC8vIENvbnZlcnQgZGF0YSBpZiBuZWVkZWRcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIC8vIElmIHdlIG5lZWQgdG8gY29tcHJlc3MgdGV4dCwgY2hhbmdlIGVuY29kaW5nIHRvIHV0ZjguXG4gICAgc3RybS5pbnB1dCA9IHN0cmluZ3Muc3RyaW5nMmJ1ZihkYXRhKTtcbiAgfSBlbHNlIGlmICh0b1N0cmluZy5jYWxsKGRhdGEpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nKSB7XG4gICAgc3RybS5pbnB1dCA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICB9IGVsc2Uge1xuICAgIHN0cm0uaW5wdXQgPSBkYXRhO1xuICB9XG5cbiAgc3RybS5uZXh0X2luID0gMDtcbiAgc3RybS5hdmFpbF9pbiA9IHN0cm0uaW5wdXQubGVuZ3RoO1xuXG4gIGZvciAoOzspIHtcbiAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgIHN0cm0ub3V0cHV0ID0gbmV3IFVpbnQ4QXJyYXkoY2h1bmtTaXplKTtcbiAgICAgIHN0cm0ubmV4dF9vdXQgPSAwO1xuICAgICAgc3RybS5hdmFpbF9vdXQgPSBjaHVua1NpemU7XG4gICAgfVxuXG4gICAgLy8gTWFrZSBzdXJlIGF2YWlsX291dCA+IDYgdG8gYXZvaWQgcmVwZWF0aW5nIG1hcmtlcnNcbiAgICBpZiAoKF9mbHVzaF9tb2RlID09PSBaX1NZTkNfRkxVU0ggfHwgX2ZsdXNoX21vZGUgPT09IFpfRlVMTF9GTFVTSCkgJiYgc3RybS5hdmFpbF9vdXQgPD0gNikge1xuICAgICAgdGhpcy5vbkRhdGEoc3RybS5vdXRwdXQuc3ViYXJyYXkoMCwgc3RybS5uZXh0X291dCkpO1xuICAgICAgc3RybS5hdmFpbF9vdXQgPSAwO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgc3RhdHVzID0gemxpYl9kZWZsYXRlLmRlZmxhdGUoc3RybSwgX2ZsdXNoX21vZGUpO1xuXG4gICAgLy8gRW5kZWQgPT4gZmx1c2ggYW5kIGZpbmlzaFxuICAgIGlmIChzdGF0dXMgPT09IFpfU1RSRUFNX0VORCkge1xuICAgICAgaWYgKHN0cm0ubmV4dF9vdXQgPiAwKSB7XG4gICAgICAgIHRoaXMub25EYXRhKHN0cm0ub3V0cHV0LnN1YmFycmF5KDAsIHN0cm0ubmV4dF9vdXQpKTtcbiAgICAgIH1cbiAgICAgIHN0YXR1cyA9IHpsaWJfZGVmbGF0ZS5kZWZsYXRlRW5kKHRoaXMuc3RybSk7XG4gICAgICB0aGlzLm9uRW5kKHN0YXR1cyk7XG4gICAgICB0aGlzLmVuZGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiBzdGF0dXMgPT09IFpfT0s7XG4gICAgfVxuXG4gICAgLy8gRmx1c2ggaWYgb3V0IGJ1ZmZlciBmdWxsXG4gICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICB0aGlzLm9uRGF0YShzdHJtLm91dHB1dCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBGbHVzaCBpZiByZXF1ZXN0ZWQgYW5kIGhhcyBkYXRhXG4gICAgaWYgKF9mbHVzaF9tb2RlID4gMCAmJiBzdHJtLm5leHRfb3V0ID4gMCkge1xuICAgICAgdGhpcy5vbkRhdGEoc3RybS5vdXRwdXQuc3ViYXJyYXkoMCwgc3RybS5uZXh0X291dCkpO1xuICAgICAgc3RybS5hdmFpbF9vdXQgPSAwO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHN0cm0uYXZhaWxfaW4gPT09IDApIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5cbi8qKlxuICogRGVmbGF0ZSNvbkRhdGEoY2h1bmspIC0+IFZvaWRcbiAqIC0gY2h1bmsgKFVpbnQ4QXJyYXkpOiBvdXRwdXQgZGF0YS5cbiAqXG4gKiBCeSBkZWZhdWx0LCBzdG9yZXMgZGF0YSBibG9ja3MgaW4gYGNodW5rc1tdYCBwcm9wZXJ0eSBhbmQgZ2x1ZVxuICogdGhvc2UgaW4gYG9uRW5kYC4gT3ZlcnJpZGUgdGhpcyBoYW5kbGVyLCBpZiB5b3UgbmVlZCBhbm90aGVyIGJlaGF2aW91ci5cbiAqKi9cbkRlZmxhdGUucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICB0aGlzLmNodW5rcy5wdXNoKGNodW5rKTtcbn07XG5cblxuLyoqXG4gKiBEZWZsYXRlI29uRW5kKHN0YXR1cykgLT4gVm9pZFxuICogLSBzdGF0dXMgKE51bWJlcik6IGRlZmxhdGUgc3RhdHVzLiAwIChaX09LKSBvbiBzdWNjZXNzLFxuICogICBvdGhlciBpZiBub3QuXG4gKlxuICogQ2FsbGVkIG9uY2UgYWZ0ZXIgeW91IHRlbGwgZGVmbGF0ZSB0aGF0IHRoZSBpbnB1dCBzdHJlYW0gaXNcbiAqIGNvbXBsZXRlIChaX0ZJTklTSCkuIEJ5IGRlZmF1bHQgLSBqb2luIGNvbGxlY3RlZCBjaHVua3MsXG4gKiBmcmVlIG1lbW9yeSBhbmQgZmlsbCBgcmVzdWx0c2AgLyBgZXJyYCBwcm9wZXJ0aWVzLlxuICoqL1xuRGVmbGF0ZS5wcm90b3R5cGUub25FbmQgPSBmdW5jdGlvbiAoc3RhdHVzKSB7XG4gIC8vIE9uIHN1Y2Nlc3MgLSBqb2luXG4gIGlmIChzdGF0dXMgPT09IFpfT0spIHtcbiAgICB0aGlzLnJlc3VsdCA9IHV0aWxzLmZsYXR0ZW5DaHVua3ModGhpcy5jaHVua3MpO1xuICB9XG4gIHRoaXMuY2h1bmtzID0gW107XG4gIHRoaXMuZXJyID0gc3RhdHVzO1xuICB0aGlzLm1zZyA9IHRoaXMuc3RybS5tc2c7XG59O1xuXG5cbi8qKlxuICogZGVmbGF0ZShkYXRhWywgb3B0aW9uc10pIC0+IFVpbnQ4QXJyYXlcbiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheUJ1ZmZlcnxTdHJpbmcpOiBpbnB1dCBkYXRhIHRvIGNvbXByZXNzLlxuICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGRlZmxhdGUgb3B0aW9ucy5cbiAqXG4gKiBDb21wcmVzcyBgZGF0YWAgd2l0aCBkZWZsYXRlIGFsZ29yaXRobSBhbmQgYG9wdGlvbnNgLlxuICpcbiAqIFN1cHBvcnRlZCBvcHRpb25zIGFyZTpcbiAqXG4gKiAtIGxldmVsXG4gKiAtIHdpbmRvd0JpdHNcbiAqIC0gbWVtTGV2ZWxcbiAqIC0gc3RyYXRlZ3lcbiAqIC0gZGljdGlvbmFyeVxuICpcbiAqIFtodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWRdKGh0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZClcbiAqIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHRoZXNlLlxuICpcbiAqIFN1Z2FyIChvcHRpb25zKTpcbiAqXG4gKiAtIGByYXdgIChCb29sZWFuKSAtIHNheSB0aGF0IHdlIHdvcmsgd2l0aCByYXcgc3RyZWFtLCBpZiB5b3UgZG9uJ3Qgd2lzaCB0byBzcGVjaWZ5XG4gKiAgIG5lZ2F0aXZlIHdpbmRvd0JpdHMgaW1wbGljaXRseS5cbiAqXG4gKiAjIyMjIyBFeGFtcGxlOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IHBha28gPSByZXF1aXJlKCdwYWtvJylcbiAqIGNvbnN0IGRhdGEgPSBuZXcgVWludDhBcnJheShbMSwyLDMsNCw1LDYsNyw4LDldKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhwYWtvLmRlZmxhdGUoZGF0YSkpO1xuICogYGBgXG4gKiovXG5mdW5jdGlvbiBkZWZsYXRlKGlucHV0LCBvcHRpb25zKSB7XG4gIGNvbnN0IGRlZmxhdG9yID0gbmV3IERlZmxhdGUob3B0aW9ucyk7XG5cbiAgZGVmbGF0b3IucHVzaChpbnB1dCwgdHJ1ZSk7XG5cbiAgLy8gVGhhdCB3aWxsIG5ldmVyIGhhcHBlbnMsIGlmIHlvdSBkb24ndCBjaGVhdCB3aXRoIG9wdGlvbnMgOilcbiAgaWYgKGRlZmxhdG9yLmVycikgeyB0aHJvdyBkZWZsYXRvci5tc2cgfHwgbXNnW2RlZmxhdG9yLmVycl07IH1cblxuICByZXR1cm4gZGVmbGF0b3IucmVzdWx0O1xufVxuXG5cbi8qKlxuICogZGVmbGF0ZVJhdyhkYXRhWywgb3B0aW9uc10pIC0+IFVpbnQ4QXJyYXlcbiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheUJ1ZmZlcnxTdHJpbmcpOiBpbnB1dCBkYXRhIHRvIGNvbXByZXNzLlxuICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGRlZmxhdGUgb3B0aW9ucy5cbiAqXG4gKiBUaGUgc2FtZSBhcyBbW2RlZmxhdGVdXSwgYnV0IGNyZWF0ZXMgcmF3IGRhdGEsIHdpdGhvdXQgd3JhcHBlclxuICogKGhlYWRlciBhbmQgYWRsZXIzMiBjcmMpLlxuICoqL1xuZnVuY3Rpb24gZGVmbGF0ZVJhdyhpbnB1dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5yYXcgPSB0cnVlO1xuICByZXR1cm4gZGVmbGF0ZShpbnB1dCwgb3B0aW9ucyk7XG59XG5cblxuLyoqXG4gKiBnemlwKGRhdGFbLCBvcHRpb25zXSkgLT4gVWludDhBcnJheVxuICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5QnVmZmVyfFN0cmluZyk6IGlucHV0IGRhdGEgdG8gY29tcHJlc3MuXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgZGVmbGF0ZSBvcHRpb25zLlxuICpcbiAqIFRoZSBzYW1lIGFzIFtbZGVmbGF0ZV1dLCBidXQgY3JlYXRlIGd6aXAgd3JhcHBlciBpbnN0ZWFkIG9mXG4gKiBkZWZsYXRlIG9uZS5cbiAqKi9cbmZ1bmN0aW9uIGd6aXAoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuZ3ppcCA9IHRydWU7XG4gIHJldHVybiBkZWZsYXRlKGlucHV0LCBvcHRpb25zKTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cy5EZWZsYXRlID0gRGVmbGF0ZTtcbm1vZHVsZS5leHBvcnRzLmRlZmxhdGUgPSBkZWZsYXRlO1xubW9kdWxlLmV4cG9ydHMuZGVmbGF0ZVJhdyA9IGRlZmxhdGVSYXc7XG5tb2R1bGUuZXhwb3J0cy5nemlwID0gZ3ppcDtcbm1vZHVsZS5leHBvcnRzLmNvbnN0YW50cyA9IHJlcXVpcmUoJy4vemxpYi9jb25zdGFudHMnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG4vLyBTZWUgc3RhdGUgZGVmcyBmcm9tIGluZmxhdGUuanNcbmNvbnN0IEJBRCA9IDE2MjA5OyAgICAgICAvKiBnb3QgYSBkYXRhIGVycm9yIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXG5jb25zdCBUWVBFID0gMTYxOTE7ICAgICAgLyogaTogd2FpdGluZyBmb3IgdHlwZSBiaXRzLCBpbmNsdWRpbmcgbGFzdC1mbGFnIGJpdCAqL1xuXG4vKlxuICAgRGVjb2RlIGxpdGVyYWwsIGxlbmd0aCwgYW5kIGRpc3RhbmNlIGNvZGVzIGFuZCB3cml0ZSBvdXQgdGhlIHJlc3VsdGluZ1xuICAgbGl0ZXJhbCBhbmQgbWF0Y2ggYnl0ZXMgdW50aWwgZWl0aGVyIG5vdCBlbm91Z2ggaW5wdXQgb3Igb3V0cHV0IGlzXG4gICBhdmFpbGFibGUsIGFuIGVuZC1vZi1ibG9jayBpcyBlbmNvdW50ZXJlZCwgb3IgYSBkYXRhIGVycm9yIGlzIGVuY291bnRlcmVkLlxuICAgV2hlbiBsYXJnZSBlbm91Z2ggaW5wdXQgYW5kIG91dHB1dCBidWZmZXJzIGFyZSBzdXBwbGllZCB0byBpbmZsYXRlKCksIGZvclxuICAgZXhhbXBsZSwgYSAxNksgaW5wdXQgYnVmZmVyIGFuZCBhIDY0SyBvdXRwdXQgYnVmZmVyLCBtb3JlIHRoYW4gOTUlIG9mIHRoZVxuICAgaW5mbGF0ZSBleGVjdXRpb24gdGltZSBpcyBzcGVudCBpbiB0aGlzIHJvdXRpbmUuXG5cbiAgIEVudHJ5IGFzc3VtcHRpb25zOlxuXG4gICAgICAgIHN0YXRlLm1vZGUgPT09IExFTlxuICAgICAgICBzdHJtLmF2YWlsX2luID49IDZcbiAgICAgICAgc3RybS5hdmFpbF9vdXQgPj0gMjU4XG4gICAgICAgIHN0YXJ0ID49IHN0cm0uYXZhaWxfb3V0XG4gICAgICAgIHN0YXRlLmJpdHMgPCA4XG5cbiAgIE9uIHJldHVybiwgc3RhdGUubW9kZSBpcyBvbmUgb2Y6XG5cbiAgICAgICAgTEVOIC0tIHJhbiBvdXQgb2YgZW5vdWdoIG91dHB1dCBzcGFjZSBvciBlbm91Z2ggYXZhaWxhYmxlIGlucHV0XG4gICAgICAgIFRZUEUgLS0gcmVhY2hlZCBlbmQgb2YgYmxvY2sgY29kZSwgaW5mbGF0ZSgpIHRvIGludGVycHJldCBuZXh0IGJsb2NrXG4gICAgICAgIEJBRCAtLSBlcnJvciBpbiBibG9jayBkYXRhXG5cbiAgIE5vdGVzOlxuXG4gICAgLSBUaGUgbWF4aW11bSBpbnB1dCBiaXRzIHVzZWQgYnkgYSBsZW5ndGgvZGlzdGFuY2UgcGFpciBpcyAxNSBiaXRzIGZvciB0aGVcbiAgICAgIGxlbmd0aCBjb2RlLCA1IGJpdHMgZm9yIHRoZSBsZW5ndGggZXh0cmEsIDE1IGJpdHMgZm9yIHRoZSBkaXN0YW5jZSBjb2RlLFxuICAgICAgYW5kIDEzIGJpdHMgZm9yIHRoZSBkaXN0YW5jZSBleHRyYS4gIFRoaXMgdG90YWxzIDQ4IGJpdHMsIG9yIHNpeCBieXRlcy5cbiAgICAgIFRoZXJlZm9yZSBpZiBzdHJtLmF2YWlsX2luID49IDYsIHRoZW4gdGhlcmUgaXMgZW5vdWdoIGlucHV0IHRvIGF2b2lkXG4gICAgICBjaGVja2luZyBmb3IgYXZhaWxhYmxlIGlucHV0IHdoaWxlIGRlY29kaW5nLlxuXG4gICAgLSBUaGUgbWF4aW11bSBieXRlcyB0aGF0IGEgc2luZ2xlIGxlbmd0aC9kaXN0YW5jZSBwYWlyIGNhbiBvdXRwdXQgaXMgMjU4XG4gICAgICBieXRlcywgd2hpY2ggaXMgdGhlIG1heGltdW0gbGVuZ3RoIHRoYXQgY2FuIGJlIGNvZGVkLiAgaW5mbGF0ZV9mYXN0KClcbiAgICAgIHJlcXVpcmVzIHN0cm0uYXZhaWxfb3V0ID49IDI1OCBmb3IgZWFjaCBsb29wIHRvIGF2b2lkIGNoZWNraW5nIGZvclxuICAgICAgb3V0cHV0IHNwYWNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluZmxhdGVfZmFzdChzdHJtLCBzdGFydCkge1xuICBsZXQgX2luOyAgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5pbnB1dCAqL1xuICBsZXQgbGFzdDsgICAgICAgICAgICAgICAgICAgLyogaGF2ZSBlbm91Z2ggaW5wdXQgd2hpbGUgaW4gPCBsYXN0ICovXG4gIGxldCBfb3V0OyAgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLm91dHB1dCAqL1xuICBsZXQgYmVnOyAgICAgICAgICAgICAgICAgICAgLyogaW5mbGF0ZSgpJ3MgaW5pdGlhbCBzdHJtLm91dHB1dCAqL1xuICBsZXQgZW5kOyAgICAgICAgICAgICAgICAgICAgLyogd2hpbGUgb3V0IDwgZW5kLCBlbm91Z2ggc3BhY2UgYXZhaWxhYmxlICovXG4vLyNpZmRlZiBJTkZMQVRFX1NUUklDVFxuICBsZXQgZG1heDsgICAgICAgICAgICAgICAgICAgLyogbWF4aW11bSBkaXN0YW5jZSBmcm9tIHpsaWIgaGVhZGVyICovXG4vLyNlbmRpZlxuICBsZXQgd3NpemU7ICAgICAgICAgICAgICAgICAgLyogd2luZG93IHNpemUgb3IgemVybyBpZiBub3QgdXNpbmcgd2luZG93ICovXG4gIGxldCB3aGF2ZTsgICAgICAgICAgICAgICAgICAvKiB2YWxpZCBieXRlcyBpbiB0aGUgd2luZG93ICovXG4gIGxldCB3bmV4dDsgICAgICAgICAgICAgICAgICAvKiB3aW5kb3cgd3JpdGUgaW5kZXggKi9cbiAgLy8gVXNlIGBzX3dpbmRvd2AgaW5zdGVhZCBgd2luZG93YCwgYXZvaWQgY29uZmxpY3Qgd2l0aCBpbnN0cnVtZW50YXRpb24gdG9vbHNcbiAgbGV0IHNfd2luZG93OyAgICAgICAgICAgICAgIC8qIGFsbG9jYXRlZCBzbGlkaW5nIHdpbmRvdywgaWYgd3NpemUgIT0gMCAqL1xuICBsZXQgaG9sZDsgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5ob2xkICovXG4gIGxldCBiaXRzOyAgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLmJpdHMgKi9cbiAgbGV0IGxjb2RlOyAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0ubGVuY29kZSAqL1xuICBsZXQgZGNvZGU7ICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5kaXN0Y29kZSAqL1xuICBsZXQgbG1hc2s7ICAgICAgICAgICAgICAgICAgLyogbWFzayBmb3IgZmlyc3QgbGV2ZWwgb2YgbGVuZ3RoIGNvZGVzICovXG4gIGxldCBkbWFzazsgICAgICAgICAgICAgICAgICAvKiBtYXNrIGZvciBmaXJzdCBsZXZlbCBvZiBkaXN0YW5jZSBjb2RlcyAqL1xuICBsZXQgaGVyZTsgICAgICAgICAgICAgICAgICAgLyogcmV0cmlldmVkIHRhYmxlIGVudHJ5ICovXG4gIGxldCBvcDsgICAgICAgICAgICAgICAgICAgICAvKiBjb2RlIGJpdHMsIG9wZXJhdGlvbiwgZXh0cmEgYml0cywgb3IgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qICB3aW5kb3cgcG9zaXRpb24sIHdpbmRvdyBieXRlcyB0byBjb3B5ICovXG4gIGxldCBsZW47ICAgICAgICAgICAgICAgICAgICAvKiBtYXRjaCBsZW5ndGgsIHVudXNlZCBieXRlcyAqL1xuICBsZXQgZGlzdDsgICAgICAgICAgICAgICAgICAgLyogbWF0Y2ggZGlzdGFuY2UgKi9cbiAgbGV0IGZyb207ICAgICAgICAgICAgICAgICAgIC8qIHdoZXJlIHRvIGNvcHkgbWF0Y2ggZnJvbSAqL1xuICBsZXQgZnJvbV9zb3VyY2U7XG5cblxuICBsZXQgaW5wdXQsIG91dHB1dDsgLy8gSlMgc3BlY2lmaWMsIGJlY2F1c2Ugd2UgaGF2ZSBubyBwb2ludGVyc1xuXG4gIC8qIGNvcHkgc3RhdGUgdG8gbG9jYWwgdmFyaWFibGVzICovXG4gIGNvbnN0IHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgLy9oZXJlID0gc3RhdGUuaGVyZTtcbiAgX2luID0gc3RybS5uZXh0X2luO1xuICBpbnB1dCA9IHN0cm0uaW5wdXQ7XG4gIGxhc3QgPSBfaW4gKyAoc3RybS5hdmFpbF9pbiAtIDUpO1xuICBfb3V0ID0gc3RybS5uZXh0X291dDtcbiAgb3V0cHV0ID0gc3RybS5vdXRwdXQ7XG4gIGJlZyA9IF9vdXQgLSAoc3RhcnQgLSBzdHJtLmF2YWlsX291dCk7XG4gIGVuZCA9IF9vdXQgKyAoc3RybS5hdmFpbF9vdXQgLSAyNTcpO1xuLy8jaWZkZWYgSU5GTEFURV9TVFJJQ1RcbiAgZG1heCA9IHN0YXRlLmRtYXg7XG4vLyNlbmRpZlxuICB3c2l6ZSA9IHN0YXRlLndzaXplO1xuICB3aGF2ZSA9IHN0YXRlLndoYXZlO1xuICB3bmV4dCA9IHN0YXRlLnduZXh0O1xuICBzX3dpbmRvdyA9IHN0YXRlLndpbmRvdztcbiAgaG9sZCA9IHN0YXRlLmhvbGQ7XG4gIGJpdHMgPSBzdGF0ZS5iaXRzO1xuICBsY29kZSA9IHN0YXRlLmxlbmNvZGU7XG4gIGRjb2RlID0gc3RhdGUuZGlzdGNvZGU7XG4gIGxtYXNrID0gKDEgPDwgc3RhdGUubGVuYml0cykgLSAxO1xuICBkbWFzayA9ICgxIDw8IHN0YXRlLmRpc3RiaXRzKSAtIDE7XG5cblxuICAvKiBkZWNvZGUgbGl0ZXJhbHMgYW5kIGxlbmd0aC9kaXN0YW5jZXMgdW50aWwgZW5kLW9mLWJsb2NrIG9yIG5vdCBlbm91Z2hcbiAgICAgaW5wdXQgZGF0YSBvciBvdXRwdXQgc3BhY2UgKi9cblxuICB0b3A6XG4gIGRvIHtcbiAgICBpZiAoYml0cyA8IDE1KSB7XG4gICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuICAgICAgYml0cyArPSA4O1xuICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgIGJpdHMgKz0gODtcbiAgICB9XG5cbiAgICBoZXJlID0gbGNvZGVbaG9sZCAmIGxtYXNrXTtcblxuICAgIGRvbGVuOlxuICAgIGZvciAoOzspIHsgLy8gR290byBlbXVsYXRpb25cbiAgICAgIG9wID0gaGVyZSA+Pj4gMjQvKmhlcmUuYml0cyovO1xuICAgICAgaG9sZCA+Pj49IG9wO1xuICAgICAgYml0cyAtPSBvcDtcbiAgICAgIG9wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmYvKmhlcmUub3AqLztcbiAgICAgIGlmIChvcCA9PT0gMCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbGl0ZXJhbCAqL1xuICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgaGVyZS52YWwgPj0gMHgyMCAmJiBoZXJlLnZhbCA8IDB4N2YgP1xuICAgICAgICAvLyAgICAgICAgXCJpbmZsYXRlOiAgICAgICAgIGxpdGVyYWwgJyVjJ1xcblwiIDpcbiAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsIDB4JTAyeFxcblwiLCBoZXJlLnZhbCkpO1xuICAgICAgICBvdXRwdXRbX291dCsrXSA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChvcCAmIDE2KSB7ICAgICAgICAgICAgICAgICAgICAgLyogbGVuZ3RoIGJhc2UgKi9cbiAgICAgICAgbGVuID0gaGVyZSAmIDB4ZmZmZi8qaGVyZS52YWwqLztcbiAgICAgICAgb3AgJj0gMTU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGV4dHJhIGJpdHMgKi9cbiAgICAgICAgaWYgKG9wKSB7XG4gICAgICAgICAgaWYgKGJpdHMgPCBvcCkge1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuICs9IGhvbGQgJiAoKDEgPDwgb3ApIC0gMSk7XG4gICAgICAgICAgaG9sZCA+Pj49IG9wO1xuICAgICAgICAgIGJpdHMgLT0gb3A7XG4gICAgICAgIH1cbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBsZW5ndGggJXVcXG5cIiwgbGVuKSk7XG4gICAgICAgIGlmIChiaXRzIDwgMTUpIHtcbiAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICBoZXJlID0gZGNvZGVbaG9sZCAmIGRtYXNrXTtcblxuICAgICAgICBkb2Rpc3Q6XG4gICAgICAgIGZvciAoOzspIHsgLy8gZ290byBlbXVsYXRpb25cbiAgICAgICAgICBvcCA9IGhlcmUgPj4+IDI0LypoZXJlLmJpdHMqLztcbiAgICAgICAgICBob2xkID4+Pj0gb3A7XG4gICAgICAgICAgYml0cyAtPSBvcDtcbiAgICAgICAgICBvcCA9IChoZXJlID4+PiAxNikgJiAweGZmLypoZXJlLm9wKi87XG5cbiAgICAgICAgICBpZiAob3AgJiAxNikgeyAgICAgICAgICAgICAgICAgICAgICAvKiBkaXN0YW5jZSBiYXNlICovXG4gICAgICAgICAgICBkaXN0ID0gaGVyZSAmIDB4ZmZmZi8qaGVyZS52YWwqLztcbiAgICAgICAgICAgIG9wICY9IDE1OyAgICAgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGV4dHJhIGJpdHMgKi9cbiAgICAgICAgICAgIGlmIChiaXRzIDwgb3ApIHtcbiAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICBpZiAoYml0cyA8IG9wKSB7XG4gICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpc3QgKz0gaG9sZCAmICgoMSA8PCBvcCkgLSAxKTtcbi8vI2lmZGVmIElORkxBVEVfU1RSSUNUXG4gICAgICAgICAgICBpZiAoZGlzdCA+IGRtYXgpIHtcbiAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snO1xuICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgICBicmVhayB0b3A7XG4gICAgICAgICAgICB9XG4vLyNlbmRpZlxuICAgICAgICAgICAgaG9sZCA+Pj49IG9wO1xuICAgICAgICAgICAgYml0cyAtPSBvcDtcbiAgICAgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgZGlzdGFuY2UgJXVcXG5cIiwgZGlzdCkpO1xuICAgICAgICAgICAgb3AgPSBfb3V0IC0gYmVnOyAgICAgICAgICAgICAgICAvKiBtYXggZGlzdGFuY2UgaW4gb3V0cHV0ICovXG4gICAgICAgICAgICBpZiAoZGlzdCA+IG9wKSB7ICAgICAgICAgICAgICAgIC8qIHNlZSBpZiBjb3B5IGZyb20gd2luZG93ICovXG4gICAgICAgICAgICAgIG9wID0gZGlzdCAtIG9wOyAgICAgICAgICAgICAgIC8qIGRpc3RhbmNlIGJhY2sgaW4gd2luZG93ICovXG4gICAgICAgICAgICAgIGlmIChvcCA+IHdoYXZlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLnNhbmUpIHtcbiAgICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJztcbiAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICAgICAgICBicmVhayB0b3A7XG4gICAgICAgICAgICAgICAgfVxuXG4vLyAoISkgVGhpcyBibG9jayBpcyBkaXNhYmxlZCBpbiB6bGliIGRlZmF1bHRzLFxuLy8gZG9uJ3QgZW5hYmxlIGl0IGZvciBiaW5hcnkgY29tcGF0aWJpbGl0eVxuLy8jaWZkZWYgSU5GTEFURV9BTExPV19JTlZBTElEX0RJU1RBTkNFX1RPT0ZBUl9BUlJSXG4vLyAgICAgICAgICAgICAgICBpZiAobGVuIDw9IG9wIC0gd2hhdmUpIHtcbi8vICAgICAgICAgICAgICAgICAgZG8ge1xuLy8gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gMDtcbi8vICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1sZW4pO1xuLy8gICAgICAgICAgICAgICAgICBjb250aW51ZSB0b3A7XG4vLyAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICBsZW4gLT0gb3AgLSB3aGF2ZTtcbi8vICAgICAgICAgICAgICAgIGRvIHtcbi8vICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSAwO1xuLy8gICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCA+IHdoYXZlKTtcbi8vICAgICAgICAgICAgICAgIGlmIChvcCA9PT0gMCkge1xuLy8gICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7XG4vLyAgICAgICAgICAgICAgICAgIGRvIHtcbi8vICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuLy8gICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLWxlbik7XG4vLyAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIHRvcDtcbi8vICAgICAgICAgICAgICAgIH1cbi8vI2VuZGlmXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZnJvbSA9IDA7IC8vIHdpbmRvdyBpbmRleFxuICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IHNfd2luZG93O1xuICAgICAgICAgICAgICBpZiAod25leHQgPT09IDApIHsgICAgICAgICAgIC8qIHZlcnkgY29tbW9uIGNhc2UgKi9cbiAgICAgICAgICAgICAgICBmcm9tICs9IHdzaXplIC0gb3A7XG4gICAgICAgICAgICAgICAgaWYgKG9wIDwgbGVuKSB7ICAgICAgICAgLyogc29tZSBmcm9tIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgICAgbGVuIC09IG9wO1xuICAgICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IHNfd2luZG93W2Zyb20rK107XG4gICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTtcbiAgICAgICAgICAgICAgICAgIGZyb20gPSBfb3V0IC0gZGlzdDsgIC8qIHJlc3QgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIGlmICh3bmV4dCA8IG9wKSB7ICAgICAgLyogd3JhcCBhcm91bmQgd2luZG93ICovXG4gICAgICAgICAgICAgICAgZnJvbSArPSB3c2l6ZSArIHduZXh0IC0gb3A7XG4gICAgICAgICAgICAgICAgb3AgLT0gd25leHQ7XG4gICAgICAgICAgICAgICAgaWYgKG9wIDwgbGVuKSB7ICAgICAgICAgLyogc29tZSBmcm9tIGVuZCBvZiB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcDtcbiAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7XG4gICAgICAgICAgICAgICAgICBmcm9tID0gMDtcbiAgICAgICAgICAgICAgICAgIGlmICh3bmV4dCA8IGxlbikgeyAgLyogc29tZSBmcm9tIHN0YXJ0IG9mIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgICAgICBvcCA9IHduZXh0O1xuICAgICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IHNfd2luZG93W2Zyb20rK107XG4gICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAgICAgLyogcmVzdCBmcm9tIG91dHB1dCAqL1xuICAgICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgIC8qIGNvbnRpZ3VvdXMgaW4gd2luZG93ICovXG4gICAgICAgICAgICAgICAgZnJvbSArPSB3bmV4dCAtIG9wO1xuICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcDtcbiAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7XG4gICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAvKiByZXN0IGZyb20gb3V0cHV0ICovXG4gICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgd2hpbGUgKGxlbiA+IDIpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBsZW4gLT0gMztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIGlmIChsZW4gPiAxKSB7XG4gICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgICAgICAgICAvKiBjb3B5IGRpcmVjdCBmcm9tIG91dHB1dCAqL1xuICAgICAgICAgICAgICBkbyB7ICAgICAgICAgICAgICAgICAgICAgICAgLyogbWluaW11bSBsZW5ndGggaXMgdGhyZWUgKi9cbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBsZW4gLT0gMztcbiAgICAgICAgICAgICAgfSB3aGlsZSAobGVuID4gMik7XG4gICAgICAgICAgICAgIGlmIChsZW4pIHtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuICAgICAgICAgICAgICAgIGlmIChsZW4gPiAxKSB7XG4gICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmICgob3AgJiA2NCkgPT09IDApIHsgICAgICAgICAgLyogMm5kIGxldmVsIGRpc3RhbmNlIGNvZGUgKi9cbiAgICAgICAgICAgIGhlcmUgPSBkY29kZVsoaGVyZSAmIDB4ZmZmZikvKmhlcmUudmFsKi8gKyAoaG9sZCAmICgoMSA8PCBvcCkgLSAxKSldO1xuICAgICAgICAgICAgY29udGludWUgZG9kaXN0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgY29kZSc7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrOyAvLyBuZWVkIHRvIGVtdWxhdGUgZ290byB2aWEgXCJjb250aW51ZVwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKChvcCAmIDY0KSA9PT0gMCkgeyAgICAgICAgICAgICAgLyogMm5kIGxldmVsIGxlbmd0aCBjb2RlICovXG4gICAgICAgIGhlcmUgPSBsY29kZVsoaGVyZSAmIDB4ZmZmZikvKmhlcmUudmFsKi8gKyAoaG9sZCAmICgoMSA8PCBvcCkgLSAxKSldO1xuICAgICAgICBjb250aW51ZSBkb2xlbjtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKG9wICYgMzIpIHsgICAgICAgICAgICAgICAgICAgICAvKiBlbmQtb2YtYmxvY2sgKi9cbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBlbmQgb2YgYmxvY2tcXG5cIikpO1xuICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTtcbiAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZSc7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgIGJyZWFrIHRvcDtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7IC8vIG5lZWQgdG8gZW11bGF0ZSBnb3RvIHZpYSBcImNvbnRpbnVlXCJcbiAgICB9XG4gIH0gd2hpbGUgKF9pbiA8IGxhc3QgJiYgX291dCA8IGVuZCk7XG5cbiAgLyogcmV0dXJuIHVudXNlZCBieXRlcyAob24gZW50cnksIGJpdHMgPCA4LCBzbyBpbiB3b24ndCBnbyB0b28gZmFyIGJhY2spICovXG4gIGxlbiA9IGJpdHMgPj4gMztcbiAgX2luIC09IGxlbjtcbiAgYml0cyAtPSBsZW4gPDwgMztcbiAgaG9sZCAmPSAoMSA8PCBiaXRzKSAtIDE7XG5cbiAgLyogdXBkYXRlIHN0YXRlIGFuZCByZXR1cm4gKi9cbiAgc3RybS5uZXh0X2luID0gX2luO1xuICBzdHJtLm5leHRfb3V0ID0gX291dDtcbiAgc3RybS5hdmFpbF9pbiA9IChfaW4gPCBsYXN0ID8gNSArIChsYXN0IC0gX2luKSA6IDUgLSAoX2luIC0gbGFzdCkpO1xuICBzdHJtLmF2YWlsX291dCA9IChfb3V0IDwgZW5kID8gMjU3ICsgKGVuZCAtIF9vdXQpIDogMjU3IC0gKF9vdXQgLSBlbmQpKTtcbiAgc3RhdGUuaG9sZCA9IGhvbGQ7XG4gIHN0YXRlLmJpdHMgPSBiaXRzO1xuICByZXR1cm47XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbmNvbnN0IE1BWEJJVFMgPSAxNTtcbmNvbnN0IEVOT1VHSF9MRU5TID0gODUyO1xuY29uc3QgRU5PVUdIX0RJU1RTID0gNTkyO1xuLy9jb25zdCBFTk9VR0ggPSAoRU5PVUdIX0xFTlMrRU5PVUdIX0RJU1RTKTtcblxuY29uc3QgQ09ERVMgPSAwO1xuY29uc3QgTEVOUyA9IDE7XG5jb25zdCBESVNUUyA9IDI7XG5cbmNvbnN0IGxiYXNlID0gbmV3IFVpbnQxNkFycmF5KFsgLyogTGVuZ3RoIGNvZGVzIDI1Ny4uMjg1IGJhc2UgKi9cbiAgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMywgMTUsIDE3LCAxOSwgMjMsIDI3LCAzMSxcbiAgMzUsIDQzLCA1MSwgNTksIDY3LCA4MywgOTksIDExNSwgMTMxLCAxNjMsIDE5NSwgMjI3LCAyNTgsIDAsIDBcbl0pO1xuXG5jb25zdCBsZXh0ID0gbmV3IFVpbnQ4QXJyYXkoWyAvKiBMZW5ndGggY29kZXMgMjU3Li4yODUgZXh0cmEgKi9cbiAgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNywgMTcsIDE3LCAxNywgMTgsIDE4LCAxOCwgMTgsXG4gIDE5LCAxOSwgMTksIDE5LCAyMCwgMjAsIDIwLCAyMCwgMjEsIDIxLCAyMSwgMjEsIDE2LCA3MiwgNzhcbl0pO1xuXG5jb25zdCBkYmFzZSA9IG5ldyBVaW50MTZBcnJheShbIC8qIERpc3RhbmNlIGNvZGVzIDAuLjI5IGJhc2UgKi9cbiAgMSwgMiwgMywgNCwgNSwgNywgOSwgMTMsIDE3LCAyNSwgMzMsIDQ5LCA2NSwgOTcsIDEyOSwgMTkzLFxuICAyNTcsIDM4NSwgNTEzLCA3NjksIDEwMjUsIDE1MzcsIDIwNDksIDMwNzMsIDQwOTcsIDYxNDUsXG4gIDgxOTMsIDEyMjg5LCAxNjM4NSwgMjQ1NzcsIDAsIDBcbl0pO1xuXG5jb25zdCBkZXh0ID0gbmV3IFVpbnQ4QXJyYXkoWyAvKiBEaXN0YW5jZSBjb2RlcyAwLi4yOSBleHRyYSAqL1xuICAxNiwgMTYsIDE2LCAxNiwgMTcsIDE3LCAxOCwgMTgsIDE5LCAxOSwgMjAsIDIwLCAyMSwgMjEsIDIyLCAyMixcbiAgMjMsIDIzLCAyNCwgMjQsIDI1LCAyNSwgMjYsIDI2LCAyNywgMjcsXG4gIDI4LCAyOCwgMjksIDI5LCA2NCwgNjRcbl0pO1xuXG5jb25zdCBpbmZsYXRlX3RhYmxlID0gKHR5cGUsIGxlbnMsIGxlbnNfaW5kZXgsIGNvZGVzLCB0YWJsZSwgdGFibGVfaW5kZXgsIHdvcmssIG9wdHMpID0+XG57XG4gIGNvbnN0IGJpdHMgPSBvcHRzLmJpdHM7XG4gICAgICAvL2hlcmUgPSBvcHRzLmhlcmU7IC8qIHRhYmxlIGVudHJ5IGZvciBkdXBsaWNhdGlvbiAqL1xuXG4gIGxldCBsZW4gPSAwOyAgICAgICAgICAgICAgIC8qIGEgY29kZSdzIGxlbmd0aCBpbiBiaXRzICovXG4gIGxldCBzeW0gPSAwOyAgICAgICAgICAgICAgIC8qIGluZGV4IG9mIGNvZGUgc3ltYm9scyAqL1xuICBsZXQgbWluID0gMCwgbWF4ID0gMDsgICAgICAgICAgLyogbWluaW11bSBhbmQgbWF4aW11bSBjb2RlIGxlbmd0aHMgKi9cbiAgbGV0IHJvb3QgPSAwOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGluZGV4IGJpdHMgZm9yIHJvb3QgdGFibGUgKi9cbiAgbGV0IGN1cnIgPSAwOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGluZGV4IGJpdHMgZm9yIGN1cnJlbnQgdGFibGUgKi9cbiAgbGV0IGRyb3AgPSAwOyAgICAgICAgICAgICAgLyogY29kZSBiaXRzIHRvIGRyb3AgZm9yIHN1Yi10YWJsZSAqL1xuICBsZXQgbGVmdCA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBwcmVmaXggY29kZXMgYXZhaWxhYmxlICovXG4gIGxldCB1c2VkID0gMDsgICAgICAgICAgICAgIC8qIGNvZGUgZW50cmllcyBpbiB0YWJsZSB1c2VkICovXG4gIGxldCBodWZmID0gMDsgICAgICAgICAgICAgIC8qIEh1ZmZtYW4gY29kZSAqL1xuICBsZXQgaW5jcjsgICAgICAgICAgICAgIC8qIGZvciBpbmNyZW1lbnRpbmcgY29kZSwgaW5kZXggKi9cbiAgbGV0IGZpbGw7ICAgICAgICAgICAgICAvKiBpbmRleCBmb3IgcmVwbGljYXRpbmcgZW50cmllcyAqL1xuICBsZXQgbG93OyAgICAgICAgICAgICAgIC8qIGxvdyBiaXRzIGZvciBjdXJyZW50IHJvb3QgZW50cnkgKi9cbiAgbGV0IG1hc2s7ICAgICAgICAgICAgICAvKiBtYXNrIGZvciBsb3cgcm9vdCBiaXRzICovXG4gIGxldCBuZXh0OyAgICAgICAgICAgICAvKiBuZXh0IGF2YWlsYWJsZSBzcGFjZSBpbiB0YWJsZSAqL1xuICBsZXQgYmFzZSA9IG51bGw7ICAgICAvKiBiYXNlIHZhbHVlIHRhYmxlIHRvIHVzZSAqL1xuLy8gIGxldCBzaG9leHRyYTsgICAgLyogZXh0cmEgYml0cyB0YWJsZSB0byB1c2UgKi9cbiAgbGV0IG1hdGNoOyAgICAgICAgICAgICAgICAgIC8qIHVzZSBiYXNlIGFuZCBleHRyYSBmb3Igc3ltYm9sID49IG1hdGNoICovXG4gIGNvbnN0IGNvdW50ID0gbmV3IFVpbnQxNkFycmF5KE1BWEJJVFMgKyAxKTsgLy9bTUFYQklUUysxXTsgICAgLyogbnVtYmVyIG9mIGNvZGVzIG9mIGVhY2ggbGVuZ3RoICovXG4gIGNvbnN0IG9mZnMgPSBuZXcgVWludDE2QXJyYXkoTUFYQklUUyArIDEpOyAvL1tNQVhCSVRTKzFdOyAgICAgLyogb2Zmc2V0cyBpbiB0YWJsZSBmb3IgZWFjaCBsZW5ndGggKi9cbiAgbGV0IGV4dHJhID0gbnVsbDtcblxuICBsZXQgaGVyZV9iaXRzLCBoZXJlX29wLCBoZXJlX3ZhbDtcblxuICAvKlxuICAgUHJvY2VzcyBhIHNldCBvZiBjb2RlIGxlbmd0aHMgdG8gY3JlYXRlIGEgY2Fub25pY2FsIEh1ZmZtYW4gY29kZS4gIFRoZVxuICAgY29kZSBsZW5ndGhzIGFyZSBsZW5zWzAuLmNvZGVzLTFdLiAgRWFjaCBsZW5ndGggY29ycmVzcG9uZHMgdG8gdGhlXG4gICBzeW1ib2xzIDAuLmNvZGVzLTEuICBUaGUgSHVmZm1hbiBjb2RlIGlzIGdlbmVyYXRlZCBieSBmaXJzdCBzb3J0aW5nIHRoZVxuICAgc3ltYm9scyBieSBsZW5ndGggZnJvbSBzaG9ydCB0byBsb25nLCBhbmQgcmV0YWluaW5nIHRoZSBzeW1ib2wgb3JkZXJcbiAgIGZvciBjb2RlcyB3aXRoIGVxdWFsIGxlbmd0aHMuICBUaGVuIHRoZSBjb2RlIHN0YXJ0cyB3aXRoIGFsbCB6ZXJvIGJpdHNcbiAgIGZvciB0aGUgZmlyc3QgY29kZSBvZiB0aGUgc2hvcnRlc3QgbGVuZ3RoLCBhbmQgdGhlIGNvZGVzIGFyZSBpbnRlZ2VyXG4gICBpbmNyZW1lbnRzIGZvciB0aGUgc2FtZSBsZW5ndGgsIGFuZCB6ZXJvcyBhcmUgYXBwZW5kZWQgYXMgdGhlIGxlbmd0aFxuICAgaW5jcmVhc2VzLiAgRm9yIHRoZSBkZWZsYXRlIGZvcm1hdCwgdGhlc2UgYml0cyBhcmUgc3RvcmVkIGJhY2t3YXJkc1xuICAgZnJvbSB0aGVpciBtb3JlIG5hdHVyYWwgaW50ZWdlciBpbmNyZW1lbnQgb3JkZXJpbmcsIGFuZCBzbyB3aGVuIHRoZVxuICAgZGVjb2RpbmcgdGFibGVzIGFyZSBidWlsdCBpbiB0aGUgbGFyZ2UgbG9vcCBiZWxvdywgdGhlIGludGVnZXIgY29kZXNcbiAgIGFyZSBpbmNyZW1lbnRlZCBiYWNrd2FyZHMuXG5cbiAgIFRoaXMgcm91dGluZSBhc3N1bWVzLCBidXQgZG9lcyBub3QgY2hlY2ssIHRoYXQgYWxsIG9mIHRoZSBlbnRyaWVzIGluXG4gICBsZW5zW10gYXJlIGluIHRoZSByYW5nZSAwLi5NQVhCSVRTLiAgVGhlIGNhbGxlciBtdXN0IGFzc3VyZSB0aGlzLlxuICAgMS4uTUFYQklUUyBpcyBpbnRlcnByZXRlZCBhcyB0aGF0IGNvZGUgbGVuZ3RoLiAgemVybyBtZWFucyB0aGF0IHRoYXRcbiAgIHN5bWJvbCBkb2VzIG5vdCBvY2N1ciBpbiB0aGlzIGNvZGUuXG5cbiAgIFRoZSBjb2RlcyBhcmUgc29ydGVkIGJ5IGNvbXB1dGluZyBhIGNvdW50IG9mIGNvZGVzIGZvciBlYWNoIGxlbmd0aCxcbiAgIGNyZWF0aW5nIGZyb20gdGhhdCBhIHRhYmxlIG9mIHN0YXJ0aW5nIGluZGljZXMgZm9yIGVhY2ggbGVuZ3RoIGluIHRoZVxuICAgc29ydGVkIHRhYmxlLCBhbmQgdGhlbiBlbnRlcmluZyB0aGUgc3ltYm9scyBpbiBvcmRlciBpbiB0aGUgc29ydGVkXG4gICB0YWJsZS4gIFRoZSBzb3J0ZWQgdGFibGUgaXMgd29ya1tdLCB3aXRoIHRoYXQgc3BhY2UgYmVpbmcgcHJvdmlkZWQgYnlcbiAgIHRoZSBjYWxsZXIuXG5cbiAgIFRoZSBsZW5ndGggY291bnRzIGFyZSB1c2VkIGZvciBvdGhlciBwdXJwb3NlcyBhcyB3ZWxsLCBpLmUuIGZpbmRpbmdcbiAgIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIGxlbmd0aCBjb2RlcywgZGV0ZXJtaW5pbmcgaWYgdGhlcmUgYXJlIGFueVxuICAgY29kZXMgYXQgYWxsLCBjaGVja2luZyBmb3IgYSB2YWxpZCBzZXQgb2YgbGVuZ3RocywgYW5kIGxvb2tpbmcgYWhlYWRcbiAgIGF0IGxlbmd0aCBjb3VudHMgdG8gZGV0ZXJtaW5lIHN1Yi10YWJsZSBzaXplcyB3aGVuIGJ1aWxkaW5nIHRoZVxuICAgZGVjb2RpbmcgdGFibGVzLlxuICAgKi9cblxuICAvKiBhY2N1bXVsYXRlIGxlbmd0aHMgZm9yIGNvZGVzIChhc3N1bWVzIGxlbnNbXSBhbGwgaW4gMC4uTUFYQklUUykgKi9cbiAgZm9yIChsZW4gPSAwOyBsZW4gPD0gTUFYQklUUzsgbGVuKyspIHtcbiAgICBjb3VudFtsZW5dID0gMDtcbiAgfVxuICBmb3IgKHN5bSA9IDA7IHN5bSA8IGNvZGVzOyBzeW0rKykge1xuICAgIGNvdW50W2xlbnNbbGVuc19pbmRleCArIHN5bV1dKys7XG4gIH1cblxuICAvKiBib3VuZCBjb2RlIGxlbmd0aHMsIGZvcmNlIHJvb3QgdG8gYmUgd2l0aGluIGNvZGUgbGVuZ3RocyAqL1xuICByb290ID0gYml0cztcbiAgZm9yIChtYXggPSBNQVhCSVRTOyBtYXggPj0gMTsgbWF4LS0pIHtcbiAgICBpZiAoY291bnRbbWF4XSAhPT0gMCkgeyBicmVhazsgfVxuICB9XG4gIGlmIChyb290ID4gbWF4KSB7XG4gICAgcm9vdCA9IG1heDtcbiAgfVxuICBpZiAobWF4ID09PSAwKSB7ICAgICAgICAgICAgICAgICAgICAgLyogbm8gc3ltYm9scyB0byBjb2RlIGF0IGFsbCAqL1xuICAgIC8vdGFibGUub3Bbb3B0cy50YWJsZV9pbmRleF0gPSA2NDsgIC8vaGVyZS5vcCA9ICh2YXIgY2hhcik2NDsgICAgLyogaW52YWxpZCBjb2RlIG1hcmtlciAqL1xuICAgIC8vdGFibGUuYml0c1tvcHRzLnRhYmxlX2luZGV4XSA9IDE7ICAgLy9oZXJlLmJpdHMgPSAodmFyIGNoYXIpMTtcbiAgICAvL3RhYmxlLnZhbFtvcHRzLnRhYmxlX2luZGV4KytdID0gMDsgICAvL2hlcmUudmFsID0gKHZhciBzaG9ydCkwO1xuICAgIHRhYmxlW3RhYmxlX2luZGV4KytdID0gKDEgPDwgMjQpIHwgKDY0IDw8IDE2KSB8IDA7XG5cblxuICAgIC8vdGFibGUub3Bbb3B0cy50YWJsZV9pbmRleF0gPSA2NDtcbiAgICAvL3RhYmxlLmJpdHNbb3B0cy50YWJsZV9pbmRleF0gPSAxO1xuICAgIC8vdGFibGUudmFsW29wdHMudGFibGVfaW5kZXgrK10gPSAwO1xuICAgIHRhYmxlW3RhYmxlX2luZGV4KytdID0gKDEgPDwgMjQpIHwgKDY0IDw8IDE2KSB8IDA7XG5cbiAgICBvcHRzLmJpdHMgPSAxO1xuICAgIHJldHVybiAwOyAgICAgLyogbm8gc3ltYm9scywgYnV0IHdhaXQgZm9yIGRlY29kaW5nIHRvIHJlcG9ydCBlcnJvciAqL1xuICB9XG4gIGZvciAobWluID0gMTsgbWluIDwgbWF4OyBtaW4rKykge1xuICAgIGlmIChjb3VudFttaW5dICE9PSAwKSB7IGJyZWFrOyB9XG4gIH1cbiAgaWYgKHJvb3QgPCBtaW4pIHtcbiAgICByb290ID0gbWluO1xuICB9XG5cbiAgLyogY2hlY2sgZm9yIGFuIG92ZXItc3Vic2NyaWJlZCBvciBpbmNvbXBsZXRlIHNldCBvZiBsZW5ndGhzICovXG4gIGxlZnQgPSAxO1xuICBmb3IgKGxlbiA9IDE7IGxlbiA8PSBNQVhCSVRTOyBsZW4rKykge1xuICAgIGxlZnQgPDw9IDE7XG4gICAgbGVmdCAtPSBjb3VudFtsZW5dO1xuICAgIGlmIChsZWZ0IDwgMCkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH0gICAgICAgIC8qIG92ZXItc3Vic2NyaWJlZCAqL1xuICB9XG4gIGlmIChsZWZ0ID4gMCAmJiAodHlwZSA9PT0gQ09ERVMgfHwgbWF4ICE9PSAxKSkge1xuICAgIHJldHVybiAtMTsgICAgICAgICAgICAgICAgICAgICAgLyogaW5jb21wbGV0ZSBzZXQgKi9cbiAgfVxuXG4gIC8qIGdlbmVyYXRlIG9mZnNldHMgaW50byBzeW1ib2wgdGFibGUgZm9yIGVhY2ggbGVuZ3RoIGZvciBzb3J0aW5nICovXG4gIG9mZnNbMV0gPSAwO1xuICBmb3IgKGxlbiA9IDE7IGxlbiA8IE1BWEJJVFM7IGxlbisrKSB7XG4gICAgb2Zmc1tsZW4gKyAxXSA9IG9mZnNbbGVuXSArIGNvdW50W2xlbl07XG4gIH1cblxuICAvKiBzb3J0IHN5bWJvbHMgYnkgbGVuZ3RoLCBieSBzeW1ib2wgb3JkZXIgd2l0aGluIGVhY2ggbGVuZ3RoICovXG4gIGZvciAoc3ltID0gMDsgc3ltIDwgY29kZXM7IHN5bSsrKSB7XG4gICAgaWYgKGxlbnNbbGVuc19pbmRleCArIHN5bV0gIT09IDApIHtcbiAgICAgIHdvcmtbb2Zmc1tsZW5zW2xlbnNfaW5kZXggKyBzeW1dXSsrXSA9IHN5bTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgQ3JlYXRlIGFuZCBmaWxsIGluIGRlY29kaW5nIHRhYmxlcy4gIEluIHRoaXMgbG9vcCwgdGhlIHRhYmxlIGJlaW5nXG4gICBmaWxsZWQgaXMgYXQgbmV4dCBhbmQgaGFzIGN1cnIgaW5kZXggYml0cy4gIFRoZSBjb2RlIGJlaW5nIHVzZWQgaXMgaHVmZlxuICAgd2l0aCBsZW5ndGggbGVuLiAgVGhhdCBjb2RlIGlzIGNvbnZlcnRlZCB0byBhbiBpbmRleCBieSBkcm9wcGluZyBkcm9wXG4gICBiaXRzIG9mZiBvZiB0aGUgYm90dG9tLiAgRm9yIGNvZGVzIHdoZXJlIGxlbiBpcyBsZXNzIHRoYW4gZHJvcCArIGN1cnIsXG4gICB0aG9zZSB0b3AgZHJvcCArIGN1cnIgLSBsZW4gYml0cyBhcmUgaW5jcmVtZW50ZWQgdGhyb3VnaCBhbGwgdmFsdWVzIHRvXG4gICBmaWxsIHRoZSB0YWJsZSB3aXRoIHJlcGxpY2F0ZWQgZW50cmllcy5cblxuICAgcm9vdCBpcyB0aGUgbnVtYmVyIG9mIGluZGV4IGJpdHMgZm9yIHRoZSByb290IHRhYmxlLiAgV2hlbiBsZW4gZXhjZWVkc1xuICAgcm9vdCwgc3ViLXRhYmxlcyBhcmUgY3JlYXRlZCBwb2ludGVkIHRvIGJ5IHRoZSByb290IGVudHJ5IHdpdGggYW4gaW5kZXhcbiAgIG9mIHRoZSBsb3cgcm9vdCBiaXRzIG9mIGh1ZmYuICBUaGlzIGlzIHNhdmVkIGluIGxvdyB0byBjaGVjayBmb3Igd2hlbiBhXG4gICBuZXcgc3ViLXRhYmxlIHNob3VsZCBiZSBzdGFydGVkLiAgZHJvcCBpcyB6ZXJvIHdoZW4gdGhlIHJvb3QgdGFibGUgaXNcbiAgIGJlaW5nIGZpbGxlZCwgYW5kIGRyb3AgaXMgcm9vdCB3aGVuIHN1Yi10YWJsZXMgYXJlIGJlaW5nIGZpbGxlZC5cblxuICAgV2hlbiBhIG5ldyBzdWItdGFibGUgaXMgbmVlZGVkLCBpdCBpcyBuZWNlc3NhcnkgdG8gbG9vayBhaGVhZCBpbiB0aGVcbiAgIGNvZGUgbGVuZ3RocyB0byBkZXRlcm1pbmUgd2hhdCBzaXplIHN1Yi10YWJsZSBpcyBuZWVkZWQuICBUaGUgbGVuZ3RoXG4gICBjb3VudHMgYXJlIHVzZWQgZm9yIHRoaXMsIGFuZCBzbyBjb3VudFtdIGlzIGRlY3JlbWVudGVkIGFzIGNvZGVzIGFyZVxuICAgZW50ZXJlZCBpbiB0aGUgdGFibGVzLlxuXG4gICB1c2VkIGtlZXBzIHRyYWNrIG9mIGhvdyBtYW55IHRhYmxlIGVudHJpZXMgaGF2ZSBiZWVuIGFsbG9jYXRlZCBmcm9tIHRoZVxuICAgcHJvdmlkZWQgKnRhYmxlIHNwYWNlLiAgSXQgaXMgY2hlY2tlZCBmb3IgTEVOUyBhbmQgRElTVCB0YWJsZXMgYWdhaW5zdFxuICAgdGhlIGNvbnN0YW50cyBFTk9VR0hfTEVOUyBhbmQgRU5PVUdIX0RJU1RTIHRvIGd1YXJkIGFnYWluc3QgY2hhbmdlcyBpblxuICAgdGhlIGluaXRpYWwgcm9vdCB0YWJsZSBzaXplIGNvbnN0YW50cy4gIFNlZSB0aGUgY29tbWVudHMgaW4gaW5mdHJlZXMuaFxuICAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG5cbiAgIHN5bSBpbmNyZW1lbnRzIHRocm91Z2ggYWxsIHN5bWJvbHMsIGFuZCB0aGUgbG9vcCB0ZXJtaW5hdGVzIHdoZW5cbiAgIGFsbCBjb2RlcyBvZiBsZW5ndGggbWF4LCBpLmUuIGFsbCBjb2RlcywgaGF2ZSBiZWVuIHByb2Nlc3NlZC4gIFRoaXNcbiAgIHJvdXRpbmUgcGVybWl0cyBpbmNvbXBsZXRlIGNvZGVzLCBzbyBhbm90aGVyIGxvb3AgYWZ0ZXIgdGhpcyBvbmUgZmlsbHNcbiAgIGluIHRoZSByZXN0IG9mIHRoZSBkZWNvZGluZyB0YWJsZXMgd2l0aCBpbnZhbGlkIGNvZGUgbWFya2Vycy5cbiAgICovXG5cbiAgLyogc2V0IHVwIGZvciBjb2RlIHR5cGUgKi9cbiAgLy8gcG9vciBtYW4gb3B0aW1pemF0aW9uIC0gdXNlIGlmLWVsc2UgaW5zdGVhZCBvZiBzd2l0Y2gsXG4gIC8vIHRvIGF2b2lkIGRlb3B0cyBpbiBvbGQgdjhcbiAgaWYgKHR5cGUgPT09IENPREVTKSB7XG4gICAgYmFzZSA9IGV4dHJhID0gd29yazsgICAgLyogZHVtbXkgdmFsdWUtLW5vdCB1c2VkICovXG4gICAgbWF0Y2ggPSAyMDtcblxuICB9IGVsc2UgaWYgKHR5cGUgPT09IExFTlMpIHtcbiAgICBiYXNlID0gbGJhc2U7XG4gICAgZXh0cmEgPSBsZXh0O1xuICAgIG1hdGNoID0gMjU3O1xuXG4gIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAvKiBESVNUUyAqL1xuICAgIGJhc2UgPSBkYmFzZTtcbiAgICBleHRyYSA9IGRleHQ7XG4gICAgbWF0Y2ggPSAwO1xuICB9XG5cbiAgLyogaW5pdGlhbGl6ZSBvcHRzIGZvciBsb29wICovXG4gIGh1ZmYgPSAwOyAgICAgICAgICAgICAgICAgICAvKiBzdGFydGluZyBjb2RlICovXG4gIHN5bSA9IDA7ICAgICAgICAgICAgICAgICAgICAvKiBzdGFydGluZyBjb2RlIHN5bWJvbCAqL1xuICBsZW4gPSBtaW47ICAgICAgICAgICAgICAgICAgLyogc3RhcnRpbmcgY29kZSBsZW5ndGggKi9cbiAgbmV4dCA9IHRhYmxlX2luZGV4OyAgICAgICAgICAgICAgLyogY3VycmVudCB0YWJsZSB0byBmaWxsIGluICovXG4gIGN1cnIgPSByb290OyAgICAgICAgICAgICAgICAvKiBjdXJyZW50IHRhYmxlIGluZGV4IGJpdHMgKi9cbiAgZHJvcCA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIGN1cnJlbnQgYml0cyB0byBkcm9wIGZyb20gY29kZSBmb3IgaW5kZXggKi9cbiAgbG93ID0gLTE7ICAgICAgICAgICAgICAgICAgIC8qIHRyaWdnZXIgbmV3IHN1Yi10YWJsZSB3aGVuIGxlbiA+IHJvb3QgKi9cbiAgdXNlZCA9IDEgPDwgcm9vdDsgICAgICAgICAgLyogdXNlIHJvb3QgdGFibGUgZW50cmllcyAqL1xuICBtYXNrID0gdXNlZCAtIDE7ICAgICAgICAgICAgLyogbWFzayBmb3IgY29tcGFyaW5nIGxvdyAqL1xuXG4gIC8qIGNoZWNrIGF2YWlsYWJsZSB0YWJsZSBzcGFjZSAqL1xuICBpZiAoKHR5cGUgPT09IExFTlMgJiYgdXNlZCA+IEVOT1VHSF9MRU5TKSB8fFxuICAgICh0eXBlID09PSBESVNUUyAmJiB1c2VkID4gRU5PVUdIX0RJU1RTKSkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgLyogcHJvY2VzcyBhbGwgY29kZXMgYW5kIG1ha2UgdGFibGUgZW50cmllcyAqL1xuICBmb3IgKDs7KSB7XG4gICAgLyogY3JlYXRlIHRhYmxlIGVudHJ5ICovXG4gICAgaGVyZV9iaXRzID0gbGVuIC0gZHJvcDtcbiAgICBpZiAod29ya1tzeW1dICsgMSA8IG1hdGNoKSB7XG4gICAgICBoZXJlX29wID0gMDtcbiAgICAgIGhlcmVfdmFsID0gd29ya1tzeW1dO1xuICAgIH1cbiAgICBlbHNlIGlmICh3b3JrW3N5bV0gPj0gbWF0Y2gpIHtcbiAgICAgIGhlcmVfb3AgPSBleHRyYVt3b3JrW3N5bV0gLSBtYXRjaF07XG4gICAgICBoZXJlX3ZhbCA9IGJhc2Vbd29ya1tzeW1dIC0gbWF0Y2hdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGhlcmVfb3AgPSAzMiArIDY0OyAgICAgICAgIC8qIGVuZCBvZiBibG9jayAqL1xuICAgICAgaGVyZV92YWwgPSAwO1xuICAgIH1cblxuICAgIC8qIHJlcGxpY2F0ZSBmb3IgdGhvc2UgaW5kaWNlcyB3aXRoIGxvdyBsZW4gYml0cyBlcXVhbCB0byBodWZmICovXG4gICAgaW5jciA9IDEgPDwgKGxlbiAtIGRyb3ApO1xuICAgIGZpbGwgPSAxIDw8IGN1cnI7XG4gICAgbWluID0gZmlsbDsgICAgICAgICAgICAgICAgIC8qIHNhdmUgb2Zmc2V0IHRvIG5leHQgdGFibGUgKi9cbiAgICBkbyB7XG4gICAgICBmaWxsIC09IGluY3I7XG4gICAgICB0YWJsZVtuZXh0ICsgKGh1ZmYgPj4gZHJvcCkgKyBmaWxsXSA9IChoZXJlX2JpdHMgPDwgMjQpIHwgKGhlcmVfb3AgPDwgMTYpIHwgaGVyZV92YWwgfDA7XG4gICAgfSB3aGlsZSAoZmlsbCAhPT0gMCk7XG5cbiAgICAvKiBiYWNrd2FyZHMgaW5jcmVtZW50IHRoZSBsZW4tYml0IGNvZGUgaHVmZiAqL1xuICAgIGluY3IgPSAxIDw8IChsZW4gLSAxKTtcbiAgICB3aGlsZSAoaHVmZiAmIGluY3IpIHtcbiAgICAgIGluY3IgPj49IDE7XG4gICAgfVxuICAgIGlmIChpbmNyICE9PSAwKSB7XG4gICAgICBodWZmICY9IGluY3IgLSAxO1xuICAgICAgaHVmZiArPSBpbmNyO1xuICAgIH0gZWxzZSB7XG4gICAgICBodWZmID0gMDtcbiAgICB9XG5cbiAgICAvKiBnbyB0byBuZXh0IHN5bWJvbCwgdXBkYXRlIGNvdW50LCBsZW4gKi9cbiAgICBzeW0rKztcbiAgICBpZiAoLS1jb3VudFtsZW5dID09PSAwKSB7XG4gICAgICBpZiAobGVuID09PSBtYXgpIHsgYnJlYWs7IH1cbiAgICAgIGxlbiA9IGxlbnNbbGVuc19pbmRleCArIHdvcmtbc3ltXV07XG4gICAgfVxuXG4gICAgLyogY3JlYXRlIG5ldyBzdWItdGFibGUgaWYgbmVlZGVkICovXG4gICAgaWYgKGxlbiA+IHJvb3QgJiYgKGh1ZmYgJiBtYXNrKSAhPT0gbG93KSB7XG4gICAgICAvKiBpZiBmaXJzdCB0aW1lLCB0cmFuc2l0aW9uIHRvIHN1Yi10YWJsZXMgKi9cbiAgICAgIGlmIChkcm9wID09PSAwKSB7XG4gICAgICAgIGRyb3AgPSByb290O1xuICAgICAgfVxuXG4gICAgICAvKiBpbmNyZW1lbnQgcGFzdCBsYXN0IHRhYmxlICovXG4gICAgICBuZXh0ICs9IG1pbjsgICAgICAgICAgICAvKiBoZXJlIG1pbiBpcyAxIDw8IGN1cnIgKi9cblxuICAgICAgLyogZGV0ZXJtaW5lIGxlbmd0aCBvZiBuZXh0IHRhYmxlICovXG4gICAgICBjdXJyID0gbGVuIC0gZHJvcDtcbiAgICAgIGxlZnQgPSAxIDw8IGN1cnI7XG4gICAgICB3aGlsZSAoY3VyciArIGRyb3AgPCBtYXgpIHtcbiAgICAgICAgbGVmdCAtPSBjb3VudFtjdXJyICsgZHJvcF07XG4gICAgICAgIGlmIChsZWZ0IDw9IDApIHsgYnJlYWs7IH1cbiAgICAgICAgY3VycisrO1xuICAgICAgICBsZWZ0IDw8PSAxO1xuICAgICAgfVxuXG4gICAgICAvKiBjaGVjayBmb3IgZW5vdWdoIHNwYWNlICovXG4gICAgICB1c2VkICs9IDEgPDwgY3VycjtcbiAgICAgIGlmICgodHlwZSA9PT0gTEVOUyAmJiB1c2VkID4gRU5PVUdIX0xFTlMpIHx8XG4gICAgICAgICh0eXBlID09PSBESVNUUyAmJiB1c2VkID4gRU5PVUdIX0RJU1RTKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cblxuICAgICAgLyogcG9pbnQgZW50cnkgaW4gcm9vdCB0YWJsZSB0byBzdWItdGFibGUgKi9cbiAgICAgIGxvdyA9IGh1ZmYgJiBtYXNrO1xuICAgICAgLyp0YWJsZS5vcFtsb3ddID0gY3VycjtcbiAgICAgIHRhYmxlLmJpdHNbbG93XSA9IHJvb3Q7XG4gICAgICB0YWJsZS52YWxbbG93XSA9IG5leHQgLSBvcHRzLnRhYmxlX2luZGV4OyovXG4gICAgICB0YWJsZVtsb3ddID0gKHJvb3QgPDwgMjQpIHwgKGN1cnIgPDwgMTYpIHwgKG5leHQgLSB0YWJsZV9pbmRleCkgfDA7XG4gICAgfVxuICB9XG5cbiAgLyogZmlsbCBpbiByZW1haW5pbmcgdGFibGUgZW50cnkgaWYgY29kZSBpcyBpbmNvbXBsZXRlIChndWFyYW50ZWVkIHRvIGhhdmVcbiAgIGF0IG1vc3Qgb25lIHJlbWFpbmluZyBlbnRyeSwgc2luY2UgaWYgdGhlIGNvZGUgaXMgaW5jb21wbGV0ZSwgdGhlXG4gICBtYXhpbXVtIGNvZGUgbGVuZ3RoIHRoYXQgd2FzIGFsbG93ZWQgdG8gZ2V0IHRoaXMgZmFyIGlzIG9uZSBiaXQpICovXG4gIGlmIChodWZmICE9PSAwKSB7XG4gICAgLy90YWJsZS5vcFtuZXh0ICsgaHVmZl0gPSA2NDsgICAgICAgICAgICAvKiBpbnZhbGlkIGNvZGUgbWFya2VyICovXG4gICAgLy90YWJsZS5iaXRzW25leHQgKyBodWZmXSA9IGxlbiAtIGRyb3A7XG4gICAgLy90YWJsZS52YWxbbmV4dCArIGh1ZmZdID0gMDtcbiAgICB0YWJsZVtuZXh0ICsgaHVmZl0gPSAoKGxlbiAtIGRyb3ApIDw8IDI0KSB8ICg2NCA8PCAxNikgfDA7XG4gIH1cblxuICAvKiBzZXQgcmV0dXJuIHBhcmFtZXRlcnMgKi9cbiAgLy9vcHRzLnRhYmxlX2luZGV4ICs9IHVzZWQ7XG4gIG9wdHMuYml0cyA9IHJvb3Q7XG4gIHJldHVybiAwO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGluZmxhdGVfdGFibGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuY29uc3QgYWRsZXIzMiAgICAgICA9IHJlcXVpcmUoJy4vYWRsZXIzMicpO1xuY29uc3QgY3JjMzIgICAgICAgICA9IHJlcXVpcmUoJy4vY3JjMzInKTtcbmNvbnN0IGluZmxhdGVfZmFzdCAgPSByZXF1aXJlKCcuL2luZmZhc3QnKTtcbmNvbnN0IGluZmxhdGVfdGFibGUgPSByZXF1aXJlKCcuL2luZnRyZWVzJyk7XG5cbmNvbnN0IENPREVTID0gMDtcbmNvbnN0IExFTlMgPSAxO1xuY29uc3QgRElTVFMgPSAyO1xuXG4vKiBQdWJsaWMgY29uc3RhbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuY29uc3Qge1xuICBaX0ZJTklTSCwgWl9CTE9DSywgWl9UUkVFUyxcbiAgWl9PSywgWl9TVFJFQU1fRU5ELCBaX05FRURfRElDVCwgWl9TVFJFQU1fRVJST1IsIFpfREFUQV9FUlJPUiwgWl9NRU1fRVJST1IsIFpfQlVGX0VSUk9SLFxuICBaX0RFRkxBVEVEXG59ID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcblxuXG4vKiBTVEFURVMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG5jb25zdCAgICBIRUFEID0gMTYxODA7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIG1hZ2ljIGhlYWRlciAqL1xuY29uc3QgICAgRkxBR1MgPSAxNjE4MTsgICAgICAvKiBpOiB3YWl0aW5nIGZvciBtZXRob2QgYW5kIGZsYWdzIChnemlwKSAqL1xuY29uc3QgICAgVElNRSA9IDE2MTgyOyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBtb2RpZmljYXRpb24gdGltZSAoZ3ppcCkgKi9cbmNvbnN0ICAgIE9TID0gMTYxODM7ICAgICAgICAgLyogaTogd2FpdGluZyBmb3IgZXh0cmEgZmxhZ3MgYW5kIG9wZXJhdGluZyBzeXN0ZW0gKGd6aXApICovXG5jb25zdCAgICBFWExFTiA9IDE2MTg0OyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGV4dHJhIGxlbmd0aCAoZ3ppcCkgKi9cbmNvbnN0ICAgIEVYVFJBID0gMTYxODU7ICAgICAgLyogaTogd2FpdGluZyBmb3IgZXh0cmEgYnl0ZXMgKGd6aXApICovXG5jb25zdCAgICBOQU1FID0gMTYxODY7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGVuZCBvZiBmaWxlIG5hbWUgKGd6aXApICovXG5jb25zdCAgICBDT01NRU5UID0gMTYxODc7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIGVuZCBvZiBjb21tZW50IChnemlwKSAqL1xuY29uc3QgICAgSENSQyA9IDE2MTg4OyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBoZWFkZXIgY3JjIChnemlwKSAqL1xuY29uc3QgICAgRElDVElEID0gMTYxODk7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIGRpY3Rpb25hcnkgY2hlY2sgdmFsdWUgKi9cbmNvbnN0ICAgIERJQ1QgPSAxNjE5MDsgICAgICAvKiB3YWl0aW5nIGZvciBpbmZsYXRlU2V0RGljdGlvbmFyeSgpIGNhbGwgKi9cbmNvbnN0ICAgICAgICBUWVBFID0gMTYxOTE7ICAgICAgLyogaTogd2FpdGluZyBmb3IgdHlwZSBiaXRzLCBpbmNsdWRpbmcgbGFzdC1mbGFnIGJpdCAqL1xuY29uc3QgICAgICAgIFRZUEVETyA9IDE2MTkyOyAgICAvKiBpOiBzYW1lLCBidXQgc2tpcCBjaGVjayB0byBleGl0IGluZmxhdGUgb24gbmV3IGJsb2NrICovXG5jb25zdCAgICAgICAgU1RPUkVEID0gMTYxOTM7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIHN0b3JlZCBzaXplIChsZW5ndGggYW5kIGNvbXBsZW1lbnQpICovXG5jb25zdCAgICAgICAgQ09QWV8gPSAxNjE5NDsgICAgIC8qIGkvbzogc2FtZSBhcyBDT1BZIGJlbG93LCBidXQgb25seSBmaXJzdCB0aW1lIGluICovXG5jb25zdCAgICAgICAgQ09QWSA9IDE2MTk1OyAgICAgIC8qIGkvbzogd2FpdGluZyBmb3IgaW5wdXQgb3Igb3V0cHV0IHRvIGNvcHkgc3RvcmVkIGJsb2NrICovXG5jb25zdCAgICAgICAgVEFCTEUgPSAxNjE5NjsgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGR5bmFtaWMgYmxvY2sgdGFibGUgbGVuZ3RocyAqL1xuY29uc3QgICAgICAgIExFTkxFTlMgPSAxNjE5NzsgICAvKiBpOiB3YWl0aW5nIGZvciBjb2RlIGxlbmd0aCBjb2RlIGxlbmd0aHMgKi9cbmNvbnN0ICAgICAgICBDT0RFTEVOUyA9IDE2MTk4OyAgLyogaTogd2FpdGluZyBmb3IgbGVuZ3RoL2xpdCBhbmQgZGlzdGFuY2UgY29kZSBsZW5ndGhzICovXG5jb25zdCAgICAgICAgICAgIExFTl8gPSAxNjE5OTsgICAgICAvKiBpOiBzYW1lIGFzIExFTiBiZWxvdywgYnV0IG9ubHkgZmlyc3QgdGltZSBpbiAqL1xuY29uc3QgICAgICAgICAgICBMRU4gPSAxNjIwMDsgICAgICAgLyogaTogd2FpdGluZyBmb3IgbGVuZ3RoL2xpdC9lb2IgY29kZSAqL1xuY29uc3QgICAgICAgICAgICBMRU5FWFQgPSAxNjIwMTsgICAgLyogaTogd2FpdGluZyBmb3IgbGVuZ3RoIGV4dHJhIGJpdHMgKi9cbmNvbnN0ICAgICAgICAgICAgRElTVCA9IDE2MjAyOyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGRpc3RhbmNlIGNvZGUgKi9cbmNvbnN0ICAgICAgICAgICAgRElTVEVYVCA9IDE2MjAzOyAgIC8qIGk6IHdhaXRpbmcgZm9yIGRpc3RhbmNlIGV4dHJhIGJpdHMgKi9cbmNvbnN0ICAgICAgICAgICAgTUFUQ0ggPSAxNjIwNDsgICAgIC8qIG86IHdhaXRpbmcgZm9yIG91dHB1dCBzcGFjZSB0byBjb3B5IHN0cmluZyAqL1xuY29uc3QgICAgICAgICAgICBMSVQgPSAxNjIwNTsgICAgICAgLyogbzogd2FpdGluZyBmb3Igb3V0cHV0IHNwYWNlIHRvIHdyaXRlIGxpdGVyYWwgKi9cbmNvbnN0ICAgIENIRUNLID0gMTYyMDY7ICAgICAvKiBpOiB3YWl0aW5nIGZvciAzMi1iaXQgY2hlY2sgdmFsdWUgKi9cbmNvbnN0ICAgIExFTkdUSCA9IDE2MjA3OyAgICAvKiBpOiB3YWl0aW5nIGZvciAzMi1iaXQgbGVuZ3RoIChnemlwKSAqL1xuY29uc3QgICAgRE9ORSA9IDE2MjA4OyAgICAgIC8qIGZpbmlzaGVkIGNoZWNrLCBkb25lIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXG5jb25zdCAgICBCQUQgPSAxNjIwOTsgICAgICAgLyogZ290IGEgZGF0YSBlcnJvciAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xuY29uc3QgICAgTUVNID0gMTYyMTA7ICAgICAgIC8qIGdvdCBhbiBpbmZsYXRlKCkgbWVtb3J5IGVycm9yIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXG5jb25zdCAgICBTWU5DID0gMTYyMTE7ICAgICAgLyogbG9va2luZyBmb3Igc3luY2hyb25pemF0aW9uIGJ5dGVzIHRvIHJlc3RhcnQgaW5mbGF0ZSgpICovXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuXG5jb25zdCBFTk9VR0hfTEVOUyA9IDg1MjtcbmNvbnN0IEVOT1VHSF9ESVNUUyA9IDU5Mjtcbi8vY29uc3QgRU5PVUdIID0gIChFTk9VR0hfTEVOUytFTk9VR0hfRElTVFMpO1xuXG5jb25zdCBNQVhfV0JJVFMgPSAxNTtcbi8qIDMySyBMWjc3IHdpbmRvdyAqL1xuY29uc3QgREVGX1dCSVRTID0gTUFYX1dCSVRTO1xuXG5cbmNvbnN0IHpzd2FwMzIgPSAocSkgPT4ge1xuXG4gIHJldHVybiAgKCgocSA+Pj4gMjQpICYgMHhmZikgK1xuICAgICAgICAgICgocSA+Pj4gOCkgJiAweGZmMDApICtcbiAgICAgICAgICAoKHEgJiAweGZmMDApIDw8IDgpICtcbiAgICAgICAgICAoKHEgJiAweGZmKSA8PCAyNCkpO1xufTtcblxuXG5mdW5jdGlvbiBJbmZsYXRlU3RhdGUoKSB7XG4gIHRoaXMuc3RybSA9IG51bGw7ICAgICAgICAgICAvKiBwb2ludGVyIGJhY2sgdG8gdGhpcyB6bGliIHN0cmVhbSAqL1xuICB0aGlzLm1vZGUgPSAwOyAgICAgICAgICAgICAgLyogY3VycmVudCBpbmZsYXRlIG1vZGUgKi9cbiAgdGhpcy5sYXN0ID0gZmFsc2U7ICAgICAgICAgIC8qIHRydWUgaWYgcHJvY2Vzc2luZyBsYXN0IGJsb2NrICovXG4gIHRoaXMud3JhcCA9IDA7ICAgICAgICAgICAgICAvKiBiaXQgMCB0cnVlIGZvciB6bGliLCBiaXQgMSB0cnVlIGZvciBnemlwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYml0IDIgdHJ1ZSB0byB2YWxpZGF0ZSBjaGVjayB2YWx1ZSAqL1xuICB0aGlzLmhhdmVkaWN0ID0gZmFsc2U7ICAgICAgLyogdHJ1ZSBpZiBkaWN0aW9uYXJ5IHByb3ZpZGVkICovXG4gIHRoaXMuZmxhZ3MgPSAwOyAgICAgICAgICAgICAvKiBnemlwIGhlYWRlciBtZXRob2QgYW5kIGZsYWdzICgwIGlmIHpsaWIpLCBvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLTEgaWYgcmF3IG9yIG5vIGhlYWRlciB5ZXQgKi9cbiAgdGhpcy5kbWF4ID0gMDsgICAgICAgICAgICAgIC8qIHpsaWIgaGVhZGVyIG1heCBkaXN0YW5jZSAoSU5GTEFURV9TVFJJQ1QpICovXG4gIHRoaXMuY2hlY2sgPSAwOyAgICAgICAgICAgICAvKiBwcm90ZWN0ZWQgY29weSBvZiBjaGVjayB2YWx1ZSAqL1xuICB0aGlzLnRvdGFsID0gMDsgICAgICAgICAgICAgLyogcHJvdGVjdGVkIGNvcHkgb2Ygb3V0cHV0IGNvdW50ICovXG4gIC8vIFRPRE86IG1heSBiZSB7fVxuICB0aGlzLmhlYWQgPSBudWxsOyAgICAgICAgICAgLyogd2hlcmUgdG8gc2F2ZSBnemlwIGhlYWRlciBpbmZvcm1hdGlvbiAqL1xuXG4gIC8qIHNsaWRpbmcgd2luZG93ICovXG4gIHRoaXMud2JpdHMgPSAwOyAgICAgICAgICAgICAvKiBsb2cgYmFzZSAyIG9mIHJlcXVlc3RlZCB3aW5kb3cgc2l6ZSAqL1xuICB0aGlzLndzaXplID0gMDsgICAgICAgICAgICAgLyogd2luZG93IHNpemUgb3IgemVybyBpZiBub3QgdXNpbmcgd2luZG93ICovXG4gIHRoaXMud2hhdmUgPSAwOyAgICAgICAgICAgICAvKiB2YWxpZCBieXRlcyBpbiB0aGUgd2luZG93ICovXG4gIHRoaXMud25leHQgPSAwOyAgICAgICAgICAgICAvKiB3aW5kb3cgd3JpdGUgaW5kZXggKi9cbiAgdGhpcy53aW5kb3cgPSBudWxsOyAgICAgICAgIC8qIGFsbG9jYXRlZCBzbGlkaW5nIHdpbmRvdywgaWYgbmVlZGVkICovXG5cbiAgLyogYml0IGFjY3VtdWxhdG9yICovXG4gIHRoaXMuaG9sZCA9IDA7ICAgICAgICAgICAgICAvKiBpbnB1dCBiaXQgYWNjdW11bGF0b3IgKi9cbiAgdGhpcy5iaXRzID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBiaXRzIGluIFwiaW5cIiAqL1xuXG4gIC8qIGZvciBzdHJpbmcgYW5kIHN0b3JlZCBibG9jayBjb3B5aW5nICovXG4gIHRoaXMubGVuZ3RoID0gMDsgICAgICAgICAgICAvKiBsaXRlcmFsIG9yIGxlbmd0aCBvZiBkYXRhIHRvIGNvcHkgKi9cbiAgdGhpcy5vZmZzZXQgPSAwOyAgICAgICAgICAgIC8qIGRpc3RhbmNlIGJhY2sgdG8gY29weSBzdHJpbmcgZnJvbSAqL1xuXG4gIC8qIGZvciB0YWJsZSBhbmQgY29kZSBkZWNvZGluZyAqL1xuICB0aGlzLmV4dHJhID0gMDsgICAgICAgICAgICAgLyogZXh0cmEgYml0cyBuZWVkZWQgKi9cblxuICAvKiBmaXhlZCBhbmQgZHluYW1pYyBjb2RlIHRhYmxlcyAqL1xuICB0aGlzLmxlbmNvZGUgPSBudWxsOyAgICAgICAgICAvKiBzdGFydGluZyB0YWJsZSBmb3IgbGVuZ3RoL2xpdGVyYWwgY29kZXMgKi9cbiAgdGhpcy5kaXN0Y29kZSA9IG51bGw7ICAgICAgICAgLyogc3RhcnRpbmcgdGFibGUgZm9yIGRpc3RhbmNlIGNvZGVzICovXG4gIHRoaXMubGVuYml0cyA9IDA7ICAgICAgICAgICAvKiBpbmRleCBiaXRzIGZvciBsZW5jb2RlICovXG4gIHRoaXMuZGlzdGJpdHMgPSAwOyAgICAgICAgICAvKiBpbmRleCBiaXRzIGZvciBkaXN0Y29kZSAqL1xuXG4gIC8qIGR5bmFtaWMgdGFibGUgYnVpbGRpbmcgKi9cbiAgdGhpcy5uY29kZSA9IDA7ICAgICAgICAgICAgIC8qIG51bWJlciBvZiBjb2RlIGxlbmd0aCBjb2RlIGxlbmd0aHMgKi9cbiAgdGhpcy5ubGVuID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBsZW5ndGggY29kZSBsZW5ndGhzICovXG4gIHRoaXMubmRpc3QgPSAwOyAgICAgICAgICAgICAvKiBudW1iZXIgb2YgZGlzdGFuY2UgY29kZSBsZW5ndGhzICovXG4gIHRoaXMuaGF2ZSA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgY29kZSBsZW5ndGhzIGluIGxlbnNbXSAqL1xuICB0aGlzLm5leHQgPSBudWxsOyAgICAgICAgICAgICAgLyogbmV4dCBhdmFpbGFibGUgc3BhY2UgaW4gY29kZXNbXSAqL1xuXG4gIHRoaXMubGVucyA9IG5ldyBVaW50MTZBcnJheSgzMjApOyAvKiB0ZW1wb3Jhcnkgc3RvcmFnZSBmb3IgY29kZSBsZW5ndGhzICovXG4gIHRoaXMud29yayA9IG5ldyBVaW50MTZBcnJheSgyODgpOyAvKiB3b3JrIGFyZWEgZm9yIGNvZGUgdGFibGUgYnVpbGRpbmcgKi9cblxuICAvKlxuICAgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIHBvaW50ZXJzIGluIGpzLCB3ZSB1c2UgbGVuY29kZSBhbmQgZGlzdGNvZGUgZGlyZWN0bHlcbiAgIGFzIGJ1ZmZlcnMgc28gd2UgZG9uJ3QgbmVlZCBjb2Rlc1xuICAqL1xuICAvL3RoaXMuY29kZXMgPSBuZXcgSW50MzJBcnJheShFTk9VR0gpOyAgICAgICAvKiBzcGFjZSBmb3IgY29kZSB0YWJsZXMgKi9cbiAgdGhpcy5sZW5keW4gPSBudWxsOyAgICAgICAgICAgICAgLyogZHluYW1pYyB0YWJsZSBmb3IgbGVuZ3RoL2xpdGVyYWwgY29kZXMgKEpTIHNwZWNpZmljKSAqL1xuICB0aGlzLmRpc3RkeW4gPSBudWxsOyAgICAgICAgICAgICAvKiBkeW5hbWljIHRhYmxlIGZvciBkaXN0YW5jZSBjb2RlcyAoSlMgc3BlY2lmaWMpICovXG4gIHRoaXMuc2FuZSA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIGlmIGZhbHNlLCBhbGxvdyBpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgKi9cbiAgdGhpcy5iYWNrID0gMDsgICAgICAgICAgICAgICAgICAgLyogYml0cyBiYWNrIG9mIGxhc3QgdW5wcm9jZXNzZWQgbGVuZ3RoL2xpdCAqL1xuICB0aGlzLndhcyA9IDA7ICAgICAgICAgICAgICAgICAgICAvKiBpbml0aWFsIGxlbmd0aCBvZiBtYXRjaCAqL1xufVxuXG5cbmNvbnN0IGluZmxhdGVTdGF0ZUNoZWNrID0gKHN0cm0pID0+IHtcblxuICBpZiAoIXN0cm0pIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICBjb25zdCBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIGlmICghc3RhdGUgfHwgc3RhdGUuc3RybSAhPT0gc3RybSB8fFxuICAgIHN0YXRlLm1vZGUgPCBIRUFEIHx8IHN0YXRlLm1vZGUgPiBTWU5DKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgcmV0dXJuIDA7XG59O1xuXG5cbmNvbnN0IGluZmxhdGVSZXNldEtlZXAgPSAoc3RybSkgPT4ge1xuXG4gIGlmIChpbmZsYXRlU3RhdGVDaGVjayhzdHJtKSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cbiAgY29uc3Qgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICBzdHJtLnRvdGFsX2luID0gc3RybS50b3RhbF9vdXQgPSBzdGF0ZS50b3RhbCA9IDA7XG4gIHN0cm0ubXNnID0gJyc7IC8qWl9OVUxMKi9cbiAgaWYgKHN0YXRlLndyYXApIHsgICAgICAgLyogdG8gc3VwcG9ydCBpbGwtY29uY2VpdmVkIEphdmEgdGVzdCBzdWl0ZSAqL1xuICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS53cmFwICYgMTtcbiAgfVxuICBzdGF0ZS5tb2RlID0gSEVBRDtcbiAgc3RhdGUubGFzdCA9IDA7XG4gIHN0YXRlLmhhdmVkaWN0ID0gMDtcbiAgc3RhdGUuZmxhZ3MgPSAtMTtcbiAgc3RhdGUuZG1heCA9IDMyNzY4O1xuICBzdGF0ZS5oZWFkID0gbnVsbC8qWl9OVUxMKi87XG4gIHN0YXRlLmhvbGQgPSAwO1xuICBzdGF0ZS5iaXRzID0gMDtcbiAgLy9zdGF0ZS5sZW5jb2RlID0gc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5uZXh0ID0gc3RhdGUuY29kZXM7XG4gIHN0YXRlLmxlbmNvZGUgPSBzdGF0ZS5sZW5keW4gPSBuZXcgSW50MzJBcnJheShFTk9VR0hfTEVOUyk7XG4gIHN0YXRlLmRpc3Rjb2RlID0gc3RhdGUuZGlzdGR5biA9IG5ldyBJbnQzMkFycmF5KEVOT1VHSF9ESVNUUyk7XG5cbiAgc3RhdGUuc2FuZSA9IDE7XG4gIHN0YXRlLmJhY2sgPSAtMTtcbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiByZXNldFxcblwiKSk7XG4gIHJldHVybiBaX09LO1xufTtcblxuXG5jb25zdCBpbmZsYXRlUmVzZXQgPSAoc3RybSkgPT4ge1xuXG4gIGlmIChpbmZsYXRlU3RhdGVDaGVjayhzdHJtKSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cbiAgY29uc3Qgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICBzdGF0ZS53c2l6ZSA9IDA7XG4gIHN0YXRlLndoYXZlID0gMDtcbiAgc3RhdGUud25leHQgPSAwO1xuICByZXR1cm4gaW5mbGF0ZVJlc2V0S2VlcChzdHJtKTtcblxufTtcblxuXG5jb25zdCBpbmZsYXRlUmVzZXQyID0gKHN0cm0sIHdpbmRvd0JpdHMpID0+IHtcbiAgbGV0IHdyYXA7XG5cbiAgLyogZ2V0IHRoZSBzdGF0ZSAqL1xuICBpZiAoaW5mbGF0ZVN0YXRlQ2hlY2soc3RybSkpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIGNvbnN0IHN0YXRlID0gc3RybS5zdGF0ZTtcblxuICAvKiBleHRyYWN0IHdyYXAgcmVxdWVzdCBmcm9tIHdpbmRvd0JpdHMgcGFyYW1ldGVyICovXG4gIGlmICh3aW5kb3dCaXRzIDwgMCkge1xuICAgIHdyYXAgPSAwO1xuICAgIHdpbmRvd0JpdHMgPSAtd2luZG93Qml0cztcbiAgfVxuICBlbHNlIHtcbiAgICB3cmFwID0gKHdpbmRvd0JpdHMgPj4gNCkgKyA1O1xuICAgIGlmICh3aW5kb3dCaXRzIDwgNDgpIHtcbiAgICAgIHdpbmRvd0JpdHMgJj0gMTU7XG4gICAgfVxuICB9XG5cbiAgLyogc2V0IG51bWJlciBvZiB3aW5kb3cgYml0cywgZnJlZSB3aW5kb3cgaWYgZGlmZmVyZW50ICovXG4gIGlmICh3aW5kb3dCaXRzICYmICh3aW5kb3dCaXRzIDwgOCB8fCB3aW5kb3dCaXRzID4gMTUpKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG4gIGlmIChzdGF0ZS53aW5kb3cgIT09IG51bGwgJiYgc3RhdGUud2JpdHMgIT09IHdpbmRvd0JpdHMpIHtcbiAgICBzdGF0ZS53aW5kb3cgPSBudWxsO1xuICB9XG5cbiAgLyogdXBkYXRlIHN0YXRlIGFuZCByZXNldCB0aGUgcmVzdCBvZiBpdCAqL1xuICBzdGF0ZS53cmFwID0gd3JhcDtcbiAgc3RhdGUud2JpdHMgPSB3aW5kb3dCaXRzO1xuICByZXR1cm4gaW5mbGF0ZVJlc2V0KHN0cm0pO1xufTtcblxuXG5jb25zdCBpbmZsYXRlSW5pdDIgPSAoc3RybSwgd2luZG93Qml0cykgPT4ge1xuXG4gIGlmICghc3RybSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cbiAgLy9zdHJtLm1zZyA9IFpfTlVMTDsgICAgICAgICAgICAgICAgIC8qIGluIGNhc2Ugd2UgcmV0dXJuIGFuIGVycm9yICovXG5cbiAgY29uc3Qgc3RhdGUgPSBuZXcgSW5mbGF0ZVN0YXRlKCk7XG5cbiAgLy9pZiAoc3RhdGUgPT09IFpfTlVMTCkgcmV0dXJuIFpfTUVNX0VSUk9SO1xuICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6IGFsbG9jYXRlZFxcblwiKSk7XG4gIHN0cm0uc3RhdGUgPSBzdGF0ZTtcbiAgc3RhdGUuc3RybSA9IHN0cm07XG4gIHN0YXRlLndpbmRvdyA9IG51bGwvKlpfTlVMTCovO1xuICBzdGF0ZS5tb2RlID0gSEVBRDsgICAgIC8qIHRvIHBhc3Mgc3RhdGUgdGVzdCBpbiBpbmZsYXRlUmVzZXQyKCkgKi9cbiAgY29uc3QgcmV0ID0gaW5mbGF0ZVJlc2V0MihzdHJtLCB3aW5kb3dCaXRzKTtcbiAgaWYgKHJldCAhPT0gWl9PSykge1xuICAgIHN0cm0uc3RhdGUgPSBudWxsLypaX05VTEwqLztcbiAgfVxuICByZXR1cm4gcmV0O1xufTtcblxuXG5jb25zdCBpbmZsYXRlSW5pdCA9IChzdHJtKSA9PiB7XG5cbiAgcmV0dXJuIGluZmxhdGVJbml0MihzdHJtLCBERUZfV0JJVFMpO1xufTtcblxuXG4vKlxuIFJldHVybiBzdGF0ZSB3aXRoIGxlbmd0aCBhbmQgZGlzdGFuY2UgZGVjb2RpbmcgdGFibGVzIGFuZCBpbmRleCBzaXplcyBzZXQgdG9cbiBmaXhlZCBjb2RlIGRlY29kaW5nLiAgTm9ybWFsbHkgdGhpcyByZXR1cm5zIGZpeGVkIHRhYmxlcyBmcm9tIGluZmZpeGVkLmguXG4gSWYgQlVJTERGSVhFRCBpcyBkZWZpbmVkLCB0aGVuIGluc3RlYWQgdGhpcyByb3V0aW5lIGJ1aWxkcyB0aGUgdGFibGVzIHRoZVxuIGZpcnN0IHRpbWUgaXQncyBjYWxsZWQsIGFuZCByZXR1cm5zIHRob3NlIHRhYmxlcyB0aGUgZmlyc3QgdGltZSBhbmRcbiB0aGVyZWFmdGVyLiAgVGhpcyByZWR1Y2VzIHRoZSBzaXplIG9mIHRoZSBjb2RlIGJ5IGFib3V0IDJLIGJ5dGVzLCBpblxuIGV4Y2hhbmdlIGZvciBhIGxpdHRsZSBleGVjdXRpb24gdGltZS4gIEhvd2V2ZXIsIEJVSUxERklYRUQgc2hvdWxkIG5vdCBiZVxuIHVzZWQgZm9yIHRocmVhZGVkIGFwcGxpY2F0aW9ucywgc2luY2UgdGhlIHJld3JpdGluZyBvZiB0aGUgdGFibGVzIGFuZCB2aXJnaW5cbiBtYXkgbm90IGJlIHRocmVhZC1zYWZlLlxuICovXG5sZXQgdmlyZ2luID0gdHJ1ZTtcblxubGV0IGxlbmZpeCwgZGlzdGZpeDsgLy8gV2UgaGF2ZSBubyBwb2ludGVycyBpbiBKUywgc28ga2VlcCB0YWJsZXMgc2VwYXJhdGVcblxuXG5jb25zdCBmaXhlZHRhYmxlcyA9IChzdGF0ZSkgPT4ge1xuXG4gIC8qIGJ1aWxkIGZpeGVkIGh1ZmZtYW4gdGFibGVzIGlmIGZpcnN0IGNhbGwgKG1heSBub3QgYmUgdGhyZWFkIHNhZmUpICovXG4gIGlmICh2aXJnaW4pIHtcbiAgICBsZW5maXggPSBuZXcgSW50MzJBcnJheSg1MTIpO1xuICAgIGRpc3RmaXggPSBuZXcgSW50MzJBcnJheSgzMik7XG5cbiAgICAvKiBsaXRlcmFsL2xlbmd0aCB0YWJsZSAqL1xuICAgIGxldCBzeW0gPSAwO1xuICAgIHdoaWxlIChzeW0gPCAxNDQpIHsgc3RhdGUubGVuc1tzeW0rK10gPSA4OyB9XG4gICAgd2hpbGUgKHN5bSA8IDI1NikgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDk7IH1cbiAgICB3aGlsZSAoc3ltIDwgMjgwKSB7IHN0YXRlLmxlbnNbc3ltKytdID0gNzsgfVxuICAgIHdoaWxlIChzeW0gPCAyODgpIHsgc3RhdGUubGVuc1tzeW0rK10gPSA4OyB9XG5cbiAgICBpbmZsYXRlX3RhYmxlKExFTlMsICBzdGF0ZS5sZW5zLCAwLCAyODgsIGxlbmZpeCwgICAwLCBzdGF0ZS53b3JrLCB7IGJpdHM6IDkgfSk7XG5cbiAgICAvKiBkaXN0YW5jZSB0YWJsZSAqL1xuICAgIHN5bSA9IDA7XG4gICAgd2hpbGUgKHN5bSA8IDMyKSB7IHN0YXRlLmxlbnNbc3ltKytdID0gNTsgfVxuXG4gICAgaW5mbGF0ZV90YWJsZShESVNUUywgc3RhdGUubGVucywgMCwgMzIsICAgZGlzdGZpeCwgMCwgc3RhdGUud29yaywgeyBiaXRzOiA1IH0pO1xuXG4gICAgLyogZG8gdGhpcyBqdXN0IG9uY2UgKi9cbiAgICB2aXJnaW4gPSBmYWxzZTtcbiAgfVxuXG4gIHN0YXRlLmxlbmNvZGUgPSBsZW5maXg7XG4gIHN0YXRlLmxlbmJpdHMgPSA5O1xuICBzdGF0ZS5kaXN0Y29kZSA9IGRpc3RmaXg7XG4gIHN0YXRlLmRpc3RiaXRzID0gNTtcbn07XG5cblxuLypcbiBVcGRhdGUgdGhlIHdpbmRvdyB3aXRoIHRoZSBsYXN0IHdzaXplIChub3JtYWxseSAzMkspIGJ5dGVzIHdyaXR0ZW4gYmVmb3JlXG4gcmV0dXJuaW5nLiAgSWYgd2luZG93IGRvZXMgbm90IGV4aXN0IHlldCwgY3JlYXRlIGl0LiAgVGhpcyBpcyBvbmx5IGNhbGxlZFxuIHdoZW4gYSB3aW5kb3cgaXMgYWxyZWFkeSBpbiB1c2UsIG9yIHdoZW4gb3V0cHV0IGhhcyBiZWVuIHdyaXR0ZW4gZHVyaW5nIHRoaXNcbiBpbmZsYXRlIGNhbGwsIGJ1dCB0aGUgZW5kIG9mIHRoZSBkZWZsYXRlIHN0cmVhbSBoYXMgbm90IGJlZW4gcmVhY2hlZCB5ZXQuXG4gSXQgaXMgYWxzbyBjYWxsZWQgdG8gY3JlYXRlIGEgd2luZG93IGZvciBkaWN0aW9uYXJ5IGRhdGEgd2hlbiBhIGRpY3Rpb25hcnlcbiBpcyBsb2FkZWQuXG5cbiBQcm92aWRpbmcgb3V0cHV0IGJ1ZmZlcnMgbGFyZ2VyIHRoYW4gMzJLIHRvIGluZmxhdGUoKSBzaG91bGQgcHJvdmlkZSBhIHNwZWVkXG4gYWR2YW50YWdlLCBzaW5jZSBvbmx5IHRoZSBsYXN0IDMySyBvZiBvdXRwdXQgaXMgY29waWVkIHRvIHRoZSBzbGlkaW5nIHdpbmRvd1xuIHVwb24gcmV0dXJuIGZyb20gaW5mbGF0ZSgpLCBhbmQgc2luY2UgYWxsIGRpc3RhbmNlcyBhZnRlciB0aGUgZmlyc3QgMzJLIG9mXG4gb3V0cHV0IHdpbGwgZmFsbCBpbiB0aGUgb3V0cHV0IGRhdGEsIG1ha2luZyBtYXRjaCBjb3BpZXMgc2ltcGxlciBhbmQgZmFzdGVyLlxuIFRoZSBhZHZhbnRhZ2UgbWF5IGJlIGRlcGVuZGVudCBvbiB0aGUgc2l6ZSBvZiB0aGUgcHJvY2Vzc29yJ3MgZGF0YSBjYWNoZXMuXG4gKi9cbmNvbnN0IHVwZGF0ZXdpbmRvdyA9IChzdHJtLCBzcmMsIGVuZCwgY29weSkgPT4ge1xuXG4gIGxldCBkaXN0O1xuICBjb25zdCBzdGF0ZSA9IHN0cm0uc3RhdGU7XG5cbiAgLyogaWYgaXQgaGFzbid0IGJlZW4gZG9uZSBhbHJlYWR5LCBhbGxvY2F0ZSBzcGFjZSBmb3IgdGhlIHdpbmRvdyAqL1xuICBpZiAoc3RhdGUud2luZG93ID09PSBudWxsKSB7XG4gICAgc3RhdGUud3NpemUgPSAxIDw8IHN0YXRlLndiaXRzO1xuICAgIHN0YXRlLnduZXh0ID0gMDtcbiAgICBzdGF0ZS53aGF2ZSA9IDA7XG5cbiAgICBzdGF0ZS53aW5kb3cgPSBuZXcgVWludDhBcnJheShzdGF0ZS53c2l6ZSk7XG4gIH1cblxuICAvKiBjb3B5IHN0YXRlLT53c2l6ZSBvciBsZXNzIG91dHB1dCBieXRlcyBpbnRvIHRoZSBjaXJjdWxhciB3aW5kb3cgKi9cbiAgaWYgKGNvcHkgPj0gc3RhdGUud3NpemUpIHtcbiAgICBzdGF0ZS53aW5kb3cuc2V0KHNyYy5zdWJhcnJheShlbmQgLSBzdGF0ZS53c2l6ZSwgZW5kKSwgMCk7XG4gICAgc3RhdGUud25leHQgPSAwO1xuICAgIHN0YXRlLndoYXZlID0gc3RhdGUud3NpemU7XG4gIH1cbiAgZWxzZSB7XG4gICAgZGlzdCA9IHN0YXRlLndzaXplIC0gc3RhdGUud25leHQ7XG4gICAgaWYgKGRpc3QgPiBjb3B5KSB7XG4gICAgICBkaXN0ID0gY29weTtcbiAgICB9XG4gICAgLy96bWVtY3B5KHN0YXRlLT53aW5kb3cgKyBzdGF0ZS0+d25leHQsIGVuZCAtIGNvcHksIGRpc3QpO1xuICAgIHN0YXRlLndpbmRvdy5zZXQoc3JjLnN1YmFycmF5KGVuZCAtIGNvcHksIGVuZCAtIGNvcHkgKyBkaXN0KSwgc3RhdGUud25leHQpO1xuICAgIGNvcHkgLT0gZGlzdDtcbiAgICBpZiAoY29weSkge1xuICAgICAgLy96bWVtY3B5KHN0YXRlLT53aW5kb3csIGVuZCAtIGNvcHksIGNvcHkpO1xuICAgICAgc3RhdGUud2luZG93LnNldChzcmMuc3ViYXJyYXkoZW5kIC0gY29weSwgZW5kKSwgMCk7XG4gICAgICBzdGF0ZS53bmV4dCA9IGNvcHk7XG4gICAgICBzdGF0ZS53aGF2ZSA9IHN0YXRlLndzaXplO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHN0YXRlLnduZXh0ICs9IGRpc3Q7XG4gICAgICBpZiAoc3RhdGUud25leHQgPT09IHN0YXRlLndzaXplKSB7IHN0YXRlLnduZXh0ID0gMDsgfVxuICAgICAgaWYgKHN0YXRlLndoYXZlIDwgc3RhdGUud3NpemUpIHsgc3RhdGUud2hhdmUgKz0gZGlzdDsgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gMDtcbn07XG5cblxuY29uc3QgaW5mbGF0ZSA9IChzdHJtLCBmbHVzaCkgPT4ge1xuXG4gIGxldCBzdGF0ZTtcbiAgbGV0IGlucHV0LCBvdXRwdXQ7ICAgICAgICAgIC8vIGlucHV0L291dHB1dCBidWZmZXJzXG4gIGxldCBuZXh0OyAgICAgICAgICAgICAgICAgICAvKiBuZXh0IGlucHV0IElOREVYICovXG4gIGxldCBwdXQ7ICAgICAgICAgICAgICAgICAgICAvKiBuZXh0IG91dHB1dCBJTkRFWCAqL1xuICBsZXQgaGF2ZSwgbGVmdDsgICAgICAgICAgICAgLyogYXZhaWxhYmxlIGlucHV0IGFuZCBvdXRwdXQgKi9cbiAgbGV0IGhvbGQ7ICAgICAgICAgICAgICAgICAgIC8qIGJpdCBidWZmZXIgKi9cbiAgbGV0IGJpdHM7ICAgICAgICAgICAgICAgICAgIC8qIGJpdHMgaW4gYml0IGJ1ZmZlciAqL1xuICBsZXQgX2luLCBfb3V0OyAgICAgICAgICAgICAgLyogc2F2ZSBzdGFydGluZyBhdmFpbGFibGUgaW5wdXQgYW5kIG91dHB1dCAqL1xuICBsZXQgY29weTsgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIHN0b3JlZCBvciBtYXRjaCBieXRlcyB0byBjb3B5ICovXG4gIGxldCBmcm9tOyAgICAgICAgICAgICAgICAgICAvKiB3aGVyZSB0byBjb3B5IG1hdGNoIGJ5dGVzIGZyb20gKi9cbiAgbGV0IGZyb21fc291cmNlO1xuICBsZXQgaGVyZSA9IDA7ICAgICAgICAgICAgICAgLyogY3VycmVudCBkZWNvZGluZyB0YWJsZSBlbnRyeSAqL1xuICBsZXQgaGVyZV9iaXRzLCBoZXJlX29wLCBoZXJlX3ZhbDsgLy8gcGFrZWQgXCJoZXJlXCIgZGVub3JtYWxpemVkIChKUyBzcGVjaWZpYylcbiAgLy9sZXQgbGFzdDsgICAgICAgICAgICAgICAgICAgLyogcGFyZW50IHRhYmxlIGVudHJ5ICovXG4gIGxldCBsYXN0X2JpdHMsIGxhc3Rfb3AsIGxhc3RfdmFsOyAvLyBwYWtlZCBcImxhc3RcIiBkZW5vcm1hbGl6ZWQgKEpTIHNwZWNpZmljKVxuICBsZXQgbGVuOyAgICAgICAgICAgICAgICAgICAgLyogbGVuZ3RoIHRvIGNvcHkgZm9yIHJlcGVhdHMsIGJpdHMgdG8gZHJvcCAqL1xuICBsZXQgcmV0OyAgICAgICAgICAgICAgICAgICAgLyogcmV0dXJuIGNvZGUgKi9cbiAgY29uc3QgaGJ1ZiA9IG5ldyBVaW50OEFycmF5KDQpOyAgICAvKiBidWZmZXIgZm9yIGd6aXAgaGVhZGVyIGNyYyBjYWxjdWxhdGlvbiAqL1xuICBsZXQgb3B0cztcblxuICBsZXQgbjsgLy8gdGVtcG9yYXJ5IHZhcmlhYmxlIGZvciBORUVEX0JJVFNcblxuICBjb25zdCBvcmRlciA9IC8qIHBlcm11dGF0aW9uIG9mIGNvZGUgbGVuZ3RocyAqL1xuICAgIG5ldyBVaW50OEFycmF5KFsgMTYsIDE3LCAxOCwgMCwgOCwgNywgOSwgNiwgMTAsIDUsIDExLCA0LCAxMiwgMywgMTMsIDIsIDE0LCAxLCAxNSBdKTtcblxuXG4gIGlmIChpbmZsYXRlU3RhdGVDaGVjayhzdHJtKSB8fCAhc3RybS5vdXRwdXQgfHxcbiAgICAgICghc3RybS5pbnB1dCAmJiBzdHJtLmF2YWlsX2luICE9PSAwKSkge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuXG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgaWYgKHN0YXRlLm1vZGUgPT09IFRZUEUpIHsgc3RhdGUubW9kZSA9IFRZUEVETzsgfSAgICAvKiBza2lwIGNoZWNrICovXG5cblxuICAvLy0tLSBMT0FEKCkgLS0tXG4gIHB1dCA9IHN0cm0ubmV4dF9vdXQ7XG4gIG91dHB1dCA9IHN0cm0ub3V0cHV0O1xuICBsZWZ0ID0gc3RybS5hdmFpbF9vdXQ7XG4gIG5leHQgPSBzdHJtLm5leHRfaW47XG4gIGlucHV0ID0gc3RybS5pbnB1dDtcbiAgaGF2ZSA9IHN0cm0uYXZhaWxfaW47XG4gIGhvbGQgPSBzdGF0ZS5ob2xkO1xuICBiaXRzID0gc3RhdGUuYml0cztcbiAgLy8tLS1cblxuICBfaW4gPSBoYXZlO1xuICBfb3V0ID0gbGVmdDtcbiAgcmV0ID0gWl9PSztcblxuICBpbmZfbGVhdmU6IC8vIGdvdG8gZW11bGF0aW9uXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKHN0YXRlLm1vZGUpIHtcbiAgICAgIGNhc2UgSEVBRDpcbiAgICAgICAgaWYgKHN0YXRlLndyYXAgPT09IDApIHtcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRURPO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTtcbiAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBpZiAoKHN0YXRlLndyYXAgJiAyKSAmJiBob2xkID09PSAweDhiMWYpIHsgIC8qIGd6aXAgaGVhZGVyICovXG4gICAgICAgICAgaWYgKHN0YXRlLndiaXRzID09PSAwKSB7XG4gICAgICAgICAgICBzdGF0ZS53Yml0cyA9IDE1O1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IDAvKmNyYzMyKDBMLCBaX05VTEwsIDApKi87XG4gICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7XG4gICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xuICAgICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmO1xuICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApO1xuICAgICAgICAgIC8vPT09Ly9cblxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBGTEFHUztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQuZG9uZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKHN0YXRlLndyYXAgJiAxKSB8fCAgIC8qIGNoZWNrIGlmIHpsaWIgaGVhZGVyIGFsbG93ZWQgKi9cbiAgICAgICAgICAoKChob2xkICYgMHhmZikvKkJJVFMoOCkqLyA8PCA4KSArIChob2xkID4+IDgpKSAlIDMxKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW5jb3JyZWN0IGhlYWRlciBjaGVjayc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGhvbGQgJiAweDBmKS8qQklUUyg0KSovICE9PSBaX0RFRkxBVEVEKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAndW5rbm93biBjb21wcmVzc2lvbiBtZXRob2QnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoNCkgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDQ7XG4gICAgICAgIGJpdHMgLT0gNDtcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBsZW4gPSAoaG9sZCAmIDB4MGYpLypCSVRTKDQpKi8gKyA4O1xuICAgICAgICBpZiAoc3RhdGUud2JpdHMgPT09IDApIHtcbiAgICAgICAgICBzdGF0ZS53Yml0cyA9IGxlbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVuID4gMTUgfHwgbGVuID4gc3RhdGUud2JpdHMpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIHdpbmRvdyBzaXplJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gISEhIHBha28gcGF0Y2guIEZvcmNlIHVzZSBgb3B0aW9ucy53aW5kb3dCaXRzYCBpZiBwYXNzZWQuXG4gICAgICAgIC8vIFJlcXVpcmVkIHRvIGFsd2F5cyB1c2UgbWF4IHdpbmRvdyBzaXplIGJ5IGRlZmF1bHQuXG4gICAgICAgIHN0YXRlLmRtYXggPSAxIDw8IHN0YXRlLndiaXRzO1xuICAgICAgICAvL3N0YXRlLmRtYXggPSAxIDw8IGxlbjtcblxuICAgICAgICBzdGF0ZS5mbGFncyA9IDA7ICAgICAgICAgICAgICAgLyogaW5kaWNhdGUgemxpYiBoZWFkZXIgKi9cbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIHpsaWIgaGVhZGVyIG9rXFxuXCIpKTtcbiAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gMS8qYWRsZXIzMigwTCwgWl9OVUxMLCAwKSovO1xuICAgICAgICBzdGF0ZS5tb2RlID0gaG9sZCAmIDB4MjAwID8gRElDVElEIDogVFlQRTtcbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBGTEFHUzpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLmZsYWdzID0gaG9sZDtcbiAgICAgICAgaWYgKChzdGF0ZS5mbGFncyAmIDB4ZmYpICE9PSBaX0RFRkxBVEVEKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAndW5rbm93biBjb21wcmVzc2lvbiBtZXRob2QnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHhlMDAwKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAndW5rbm93biBoZWFkZXIgZmxhZ3Mgc2V0JztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC50ZXh0ID0gKChob2xkID4+IDgpICYgMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzdGF0ZS5mbGFncyAmIDB4MDIwMCkgJiYgKHN0YXRlLndyYXAgJiA0KSkge1xuICAgICAgICAgIC8vPT09IENSQzIoc3RhdGUuY2hlY2ssIGhvbGQpO1xuICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBUSU1FO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIFRJTUU6XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQudGltZSA9IGhvbGQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzdGF0ZS5mbGFncyAmIDB4MDIwMCkgJiYgKHN0YXRlLndyYXAgJiA0KSkge1xuICAgICAgICAgIC8vPT09IENSQzQoc3RhdGUuY2hlY2ssIGhvbGQpXG4gICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xuICAgICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmO1xuICAgICAgICAgIGhidWZbMl0gPSAoaG9sZCA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICBoYnVmWzNdID0gKGhvbGQgPj4+IDI0KSAmIDB4ZmY7XG4gICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgNCwgMCk7XG4gICAgICAgICAgLy89PT1cbiAgICAgICAgfVxuICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICBob2xkID0gMDtcbiAgICAgICAgYml0cyA9IDA7XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUubW9kZSA9IE9TO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIE9TOlxuICAgICAgICAvLz09PSBORUVEQklUUygxNik7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLnhmbGFncyA9IChob2xkICYgMHhmZik7XG4gICAgICAgICAgc3RhdGUuaGVhZC5vcyA9IChob2xkID4+IDgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc3RhdGUuZmxhZ3MgJiAweDAyMDApICYmIChzdGF0ZS53cmFwICYgNCkpIHtcbiAgICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTtcbiAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICB9XG4gICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgIGhvbGQgPSAwO1xuICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5tb2RlID0gRVhMRU47XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRVhMRU46XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDQwMCkge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTsgKi9cbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgc3RhdGUubGVuZ3RoID0gaG9sZDtcbiAgICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgICAgc3RhdGUuaGVhZC5leHRyYV9sZW4gPSBob2xkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoKHN0YXRlLmZsYWdzICYgMHgwMjAwKSAmJiAoc3RhdGUud3JhcCAmIDQpKSB7XG4gICAgICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTtcbiAgICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmO1xuICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7XG4gICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhID0gbnVsbC8qWl9OVUxMKi87XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubW9kZSA9IEVYVFJBO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIEVYVFJBOlxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDA0MDApIHtcbiAgICAgICAgICBjb3B5ID0gc3RhdGUubGVuZ3RoO1xuICAgICAgICAgIGlmIChjb3B5ID4gaGF2ZSkgeyBjb3B5ID0gaGF2ZTsgfVxuICAgICAgICAgIGlmIChjb3B5KSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgICAgICBsZW4gPSBzdGF0ZS5oZWFkLmV4dHJhX2xlbiAtIHN0YXRlLmxlbmd0aDtcbiAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5oZWFkLmV4dHJhKSB7XG4gICAgICAgICAgICAgICAgLy8gVXNlIHVudHlwZWQgYXJyYXkgZm9yIG1vcmUgY29udmVuaWVudCBwcm9jZXNzaW5nIGxhdGVyXG4gICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5leHRyYSA9IG5ldyBVaW50OEFycmF5KHN0YXRlLmhlYWQuZXh0cmFfbGVuKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhLnNldChcbiAgICAgICAgICAgICAgICBpbnB1dC5zdWJhcnJheShcbiAgICAgICAgICAgICAgICAgIG5leHQsXG4gICAgICAgICAgICAgICAgICAvLyBleHRyYSBmaWVsZCBpcyBsaW1pdGVkIHRvIDY1NTM2IGJ5dGVzXG4gICAgICAgICAgICAgICAgICAvLyAtIG5vIG5lZWQgZm9yIGFkZGl0aW9uYWwgc2l6ZSBjaGVja1xuICAgICAgICAgICAgICAgICAgbmV4dCArIGNvcHlcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIC8qbGVuICsgY29weSA+IHN0YXRlLmhlYWQuZXh0cmFfbWF4IC0gbGVuID8gc3RhdGUuaGVhZC5leHRyYV9tYXggOiBjb3B5LCovXG4gICAgICAgICAgICAgICAgbGVuXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIC8vem1lbWNweShzdGF0ZS5oZWFkLmV4dHJhICsgbGVuLCBuZXh0LFxuICAgICAgICAgICAgICAvLyAgICAgICAgbGVuICsgY29weSA+IHN0YXRlLmhlYWQuZXh0cmFfbWF4ID9cbiAgICAgICAgICAgICAgLy8gICAgICAgIHN0YXRlLmhlYWQuZXh0cmFfbWF4IC0gbGVuIDogY29weSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHN0YXRlLmZsYWdzICYgMHgwMjAwKSAmJiAoc3RhdGUud3JhcCAmIDQpKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGlucHV0LCBjb3B5LCBuZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhdmUgLT0gY29weTtcbiAgICAgICAgICAgIG5leHQgKz0gY29weTtcbiAgICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3RhdGUubGVuZ3RoKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmxlbmd0aCA9IDA7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBOQU1FO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIE5BTUU6XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDgwMCkge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGNvcHkgPSAwO1xuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIC8vIFRPRE86IDIgb3IgMSBieXRlcz9cbiAgICAgICAgICAgIGxlbiA9IGlucHV0W25leHQgKyBjb3B5KytdO1xuICAgICAgICAgICAgLyogdXNlIGNvbnN0YW50IGxpbWl0IGJlY2F1c2UgaW4ganMgd2Ugc2hvdWxkIG5vdCBwcmVhbGxvY2F0ZSBtZW1vcnkgKi9cbiAgICAgICAgICAgIGlmIChzdGF0ZS5oZWFkICYmIGxlbiAmJlxuICAgICAgICAgICAgICAgIChzdGF0ZS5sZW5ndGggPCA2NTUzNiAvKnN0YXRlLmhlYWQubmFtZV9tYXgqLykpIHtcbiAgICAgICAgICAgICAgc3RhdGUuaGVhZC5uYW1lICs9IFN0cmluZy5mcm9tQ2hhckNvZGUobGVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IHdoaWxlIChsZW4gJiYgY29weSA8IGhhdmUpO1xuXG4gICAgICAgICAgaWYgKChzdGF0ZS5mbGFncyAmIDB4MDIwMCkgJiYgKHN0YXRlLndyYXAgJiA0KSkge1xuICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBoYXZlIC09IGNvcHk7XG4gICAgICAgICAgbmV4dCArPSBjb3B5O1xuICAgICAgICAgIGlmIChsZW4pIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQubmFtZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubGVuZ3RoID0gMDtcbiAgICAgICAgc3RhdGUubW9kZSA9IENPTU1FTlQ7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgQ09NTUVOVDpcbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgxMDAwKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgY29weSA9IDA7XG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgbGVuID0gaW5wdXRbbmV4dCArIGNvcHkrK107XG4gICAgICAgICAgICAvKiB1c2UgY29uc3RhbnQgbGltaXQgYmVjYXVzZSBpbiBqcyB3ZSBzaG91bGQgbm90IHByZWFsbG9jYXRlIG1lbW9yeSAqL1xuICAgICAgICAgICAgaWYgKHN0YXRlLmhlYWQgJiYgbGVuICYmXG4gICAgICAgICAgICAgICAgKHN0YXRlLmxlbmd0aCA8IDY1NTM2IC8qc3RhdGUuaGVhZC5jb21tX21heCovKSkge1xuICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmNvbW1lbnQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShsZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gd2hpbGUgKGxlbiAmJiBjb3B5IDwgaGF2ZSk7XG4gICAgICAgICAgaWYgKChzdGF0ZS5mbGFncyAmIDB4MDIwMCkgJiYgKHN0YXRlLndyYXAgJiA0KSkge1xuICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBoYXZlIC09IGNvcHk7XG4gICAgICAgICAgbmV4dCArPSBjb3B5O1xuICAgICAgICAgIGlmIChsZW4pIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQuY29tbWVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubW9kZSA9IEhDUkM7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgSENSQzpcbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBpZiAoKHN0YXRlLndyYXAgJiA0KSAmJiBob2xkICE9PSAoc3RhdGUuY2hlY2sgJiAweGZmZmYpKSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdoZWFkZXIgY3JjIG1pc21hdGNoJztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICBob2xkID0gMDtcbiAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLmhjcmMgPSAoKHN0YXRlLmZsYWdzID4+IDkpICYgMSk7XG4gICAgICAgICAgc3RhdGUuaGVhZC5kb25lID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERJQ1RJRDpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IHpzd2FwMzIoaG9sZCk7XG4gICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgIGhvbGQgPSAwO1xuICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5tb2RlID0gRElDVDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBESUNUOlxuICAgICAgICBpZiAoc3RhdGUuaGF2ZWRpY3QgPT09IDApIHtcbiAgICAgICAgICAvLy0tLSBSRVNUT1JFKCkgLS0tXG4gICAgICAgICAgc3RybS5uZXh0X291dCA9IHB1dDtcbiAgICAgICAgICBzdHJtLmF2YWlsX291dCA9IGxlZnQ7XG4gICAgICAgICAgc3RybS5uZXh0X2luID0gbmV4dDtcbiAgICAgICAgICBzdHJtLmF2YWlsX2luID0gaGF2ZTtcbiAgICAgICAgICBzdGF0ZS5ob2xkID0gaG9sZDtcbiAgICAgICAgICBzdGF0ZS5iaXRzID0gYml0cztcbiAgICAgICAgICAvLy0tLVxuICAgICAgICAgIHJldHVybiBaX05FRURfRElDVDtcbiAgICAgICAgfVxuICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAxLyphZGxlcjMyKDBMLCBaX05VTEwsIDApKi87XG4gICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIFRZUEU6XG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9CTE9DSyB8fCBmbHVzaCA9PT0gWl9UUkVFUykgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBUWVBFRE86XG4gICAgICAgIGlmIChzdGF0ZS5sYXN0KSB7XG4gICAgICAgICAgLy8tLS0gQllURUJJVFMoKSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSBiaXRzICYgNztcbiAgICAgICAgICBiaXRzIC09IGJpdHMgJiA3O1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQ0hFQ0s7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gTkVFREJJVFMoMyk7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMykge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5sYXN0ID0gKGhvbGQgJiAweDAxKS8qQklUUygxKSovO1xuICAgICAgICAvLy0tLSBEUk9QQklUUygxKSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gMTtcbiAgICAgICAgYml0cyAtPSAxO1xuICAgICAgICAvLy0tLS8vXG5cbiAgICAgICAgc3dpdGNoICgoaG9sZCAmIDB4MDMpLypCSVRTKDIpKi8pIHtcbiAgICAgICAgICBjYXNlIDA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBzdG9yZWQgYmxvY2sgKi9cbiAgICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgIHN0b3JlZCBibG9jayVzXFxuXCIsXG4gICAgICAgICAgICAvLyAgICAgICAgc3RhdGUubGFzdCA/IFwiIChsYXN0KVwiIDogXCJcIikpO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IFNUT1JFRDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGZpeGVkIGJsb2NrICovXG4gICAgICAgICAgICBmaXhlZHRhYmxlcyhzdGF0ZSk7XG4gICAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICBmaXhlZCBjb2RlcyBibG9jayVzXFxuXCIsXG4gICAgICAgICAgICAvLyAgICAgICAgc3RhdGUubGFzdCA/IFwiIChsYXN0KVwiIDogXCJcIikpO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IExFTl87ICAgICAgICAgICAgIC8qIGRlY29kZSBjb2RlcyAqL1xuICAgICAgICAgICAgaWYgKGZsdXNoID09PSBaX1RSRUVTKSB7XG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDIpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSAyO1xuICAgICAgICAgICAgICBiaXRzIC09IDI7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAyOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZHluYW1pYyBibG9jayAqL1xuICAgICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgZHluYW1pYyBjb2RlcyBibG9jayVzXFxuXCIsXG4gICAgICAgICAgICAvLyAgICAgICAgc3RhdGUubGFzdCA/IFwiIChsYXN0KVwiIDogXCJcIikpO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IFRBQkxFO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBibG9jayB0eXBlJztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDI7XG4gICAgICAgIGJpdHMgLT0gMjtcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgU1RPUkVEOlxuICAgICAgICAvLy0tLSBCWVRFQklUUygpIC0tLS8vIC8qIGdvIHRvIGJ5dGUgYm91bmRhcnkgKi9cbiAgICAgICAgaG9sZCA+Pj49IGJpdHMgJiA3O1xuICAgICAgICBiaXRzIC09IGJpdHMgJiA3O1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBpZiAoKGhvbGQgJiAweGZmZmYpICE9PSAoKGhvbGQgPj4+IDE2KSBeIDB4ZmZmZikpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIHN0b3JlZCBibG9jayBsZW5ndGhzJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmxlbmd0aCA9IGhvbGQgJiAweGZmZmY7XG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgc3RvcmVkIGxlbmd0aCAldVxcblwiLFxuICAgICAgICAvLyAgICAgICAgc3RhdGUubGVuZ3RoKSk7XG4gICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgIGhvbGQgPSAwO1xuICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5tb2RlID0gQ09QWV87XG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBDT1BZXzpcbiAgICAgICAgc3RhdGUubW9kZSA9IENPUFk7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgQ09QWTpcbiAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDtcbiAgICAgICAgaWYgKGNvcHkpIHtcbiAgICAgICAgICBpZiAoY29weSA+IGhhdmUpIHsgY29weSA9IGhhdmU7IH1cbiAgICAgICAgICBpZiAoY29weSA+IGxlZnQpIHsgY29weSA9IGxlZnQ7IH1cbiAgICAgICAgICBpZiAoY29weSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAvLy0tLSB6bWVtY3B5KHB1dCwgbmV4dCwgY29weSk7IC0tLVxuICAgICAgICAgIG91dHB1dC5zZXQoaW5wdXQuc3ViYXJyYXkobmV4dCwgbmV4dCArIGNvcHkpLCBwdXQpO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBoYXZlIC09IGNvcHk7XG4gICAgICAgICAgbmV4dCArPSBjb3B5O1xuICAgICAgICAgIGxlZnQgLT0gY29weTtcbiAgICAgICAgICBwdXQgKz0gY29weTtcbiAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIHN0b3JlZCBlbmRcXG5cIikpO1xuICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFRBQkxFOlxuICAgICAgICAvLz09PSBORUVEQklUUygxNCk7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMTQpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUubmxlbiA9IChob2xkICYgMHgxZikvKkJJVFMoNSkqLyArIDI1NztcbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoNSkgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDU7XG4gICAgICAgIGJpdHMgLT0gNTtcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBzdGF0ZS5uZGlzdCA9IChob2xkICYgMHgxZikvKkJJVFMoNSkqLyArIDE7XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDUpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSA1O1xuICAgICAgICBiaXRzIC09IDU7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgc3RhdGUubmNvZGUgPSAoaG9sZCAmIDB4MGYpLypCSVRTKDQpKi8gKyA0O1xuICAgICAgICAvLy0tLSBEUk9QQklUUyg0KSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gNDtcbiAgICAgICAgYml0cyAtPSA0O1xuICAgICAgICAvLy0tLS8vXG4vLyNpZm5kZWYgUEtaSVBfQlVHX1dPUktBUk9VTkRcbiAgICAgICAgaWYgKHN0YXRlLm5sZW4gPiAyODYgfHwgc3RhdGUubmRpc3QgPiAzMCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ3RvbyBtYW55IGxlbmd0aCBvciBkaXN0YW5jZSBzeW1ib2xzJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4vLyNlbmRpZlxuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIHRhYmxlIHNpemVzIG9rXFxuXCIpKTtcbiAgICAgICAgc3RhdGUuaGF2ZSA9IDA7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBMRU5MRU5TO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIExFTkxFTlM6XG4gICAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgc3RhdGUubmNvZGUpIHtcbiAgICAgICAgICAvLz09PSBORUVEQklUUygzKTtcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDMpIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBzdGF0ZS5sZW5zW29yZGVyW3N0YXRlLmhhdmUrK11dID0gKGhvbGQgJiAweDA3KTsvL0JJVFMoMyk7XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMykgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gMztcbiAgICAgICAgICBiaXRzIC09IDM7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgMTkpIHtcbiAgICAgICAgICBzdGF0ZS5sZW5zW29yZGVyW3N0YXRlLmhhdmUrK11dID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBoYXZlIHNlcGFyYXRlIHRhYmxlcyAmIG5vIHBvaW50ZXJzLiAyIGNvbW1lbnRlZCBsaW5lcyBiZWxvdyBub3QgbmVlZGVkLlxuICAgICAgICAvL3N0YXRlLm5leHQgPSBzdGF0ZS5jb2RlcztcbiAgICAgICAgLy9zdGF0ZS5sZW5jb2RlID0gc3RhdGUubmV4dDtcbiAgICAgICAgLy8gU3dpdGNoIHRvIHVzZSBkeW5hbWljIHRhYmxlXG4gICAgICAgIHN0YXRlLmxlbmNvZGUgPSBzdGF0ZS5sZW5keW47XG4gICAgICAgIHN0YXRlLmxlbmJpdHMgPSA3O1xuXG4gICAgICAgIG9wdHMgPSB7IGJpdHM6IHN0YXRlLmxlbmJpdHMgfTtcbiAgICAgICAgcmV0ID0gaW5mbGF0ZV90YWJsZShDT0RFUywgc3RhdGUubGVucywgMCwgMTksIHN0YXRlLmxlbmNvZGUsIDAsIHN0YXRlLndvcmssIG9wdHMpO1xuICAgICAgICBzdGF0ZS5sZW5iaXRzID0gb3B0cy5iaXRzO1xuXG4gICAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGNvZGUgbGVuZ3RocyBzZXQnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICBjb2RlIGxlbmd0aHMgb2tcXG5cIikpO1xuICAgICAgICBzdGF0ZS5oYXZlID0gMDtcbiAgICAgICAgc3RhdGUubW9kZSA9IENPREVMRU5TO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIENPREVMRU5TOlxuICAgICAgICB3aGlsZSAoc3RhdGUuaGF2ZSA8IHN0YXRlLm5sZW4gKyBzdGF0ZS5uZGlzdCkge1xuICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGhlcmUgPSBzdGF0ZS5sZW5jb2RlW2hvbGQgJiAoKDEgPDwgc3RhdGUubGVuYml0cykgLSAxKV07LypCSVRTKHN0YXRlLmxlbmJpdHMpKi9cbiAgICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuICAgICAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xuXG4gICAgICAgICAgICBpZiAoKGhlcmVfYml0cykgPD0gYml0cykgeyBicmVhazsgfVxuICAgICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhlcmVfdmFsIDwgMTYpIHtcbiAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgIHN0YXRlLmxlbnNbc3RhdGUuaGF2ZSsrXSA9IGhlcmVfdmFsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChoZXJlX3ZhbCA9PT0gMTYpIHtcbiAgICAgICAgICAgICAgLy89PT0gTkVFREJJVFMoaGVyZS5iaXRzICsgMik7XG4gICAgICAgICAgICAgIG4gPSBoZXJlX2JpdHMgKyAyO1xuICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcbiAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgICBpZiAoc3RhdGUuaGF2ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgYml0IGxlbmd0aCByZXBlYXQnO1xuICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGVuID0gc3RhdGUubGVuc1tzdGF0ZS5oYXZlIC0gMV07XG4gICAgICAgICAgICAgIGNvcHkgPSAzICsgKGhvbGQgJiAweDAzKTsvL0JJVFMoMik7XG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDIpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSAyO1xuICAgICAgICAgICAgICBiaXRzIC09IDI7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGhlcmVfdmFsID09PSAxNykge1xuICAgICAgICAgICAgICAvLz09PSBORUVEQklUUyhoZXJlLmJpdHMgKyAzKTtcbiAgICAgICAgICAgICAgbiA9IGhlcmVfYml0cyArIDM7XG4gICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy89PT0vL1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICAgIGxlbiA9IDA7XG4gICAgICAgICAgICAgIGNvcHkgPSAzICsgKGhvbGQgJiAweDA3KTsvL0JJVFMoMyk7XG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDMpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSAzO1xuICAgICAgICAgICAgICBiaXRzIC09IDM7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAvLz09PSBORUVEQklUUyhoZXJlLmJpdHMgKyA3KTtcbiAgICAgICAgICAgICAgbiA9IGhlcmVfYml0cyArIDc7XG4gICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy89PT0vL1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICAgIGxlbiA9IDA7XG4gICAgICAgICAgICAgIGNvcHkgPSAxMSArIChob2xkICYgMHg3Zik7Ly9CSVRTKDcpO1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyg3KSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gNztcbiAgICAgICAgICAgICAgYml0cyAtPSA3O1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGUuaGF2ZSArIGNvcHkgPiBzdGF0ZS5ubGVuICsgc3RhdGUubmRpc3QpIHtcbiAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdCc7XG4gICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKGNvcHktLSkge1xuICAgICAgICAgICAgICBzdGF0ZS5sZW5zW3N0YXRlLmhhdmUrK10gPSBsZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyogaGFuZGxlIGVycm9yIGJyZWFrcyBpbiB3aGlsZSAqL1xuICAgICAgICBpZiAoc3RhdGUubW9kZSA9PT0gQkFEKSB7IGJyZWFrOyB9XG5cbiAgICAgICAgLyogY2hlY2sgZm9yIGVuZC1vZi1ibG9jayBjb2RlIChiZXR0ZXIgaGF2ZSBvbmUpICovXG4gICAgICAgIGlmIChzdGF0ZS5sZW5zWzI1Nl0gPT09IDApIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGNvZGUgLS0gbWlzc2luZyBlbmQtb2YtYmxvY2snO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBidWlsZCBjb2RlIHRhYmxlcyAtLSBub3RlOiBkbyBub3QgY2hhbmdlIHRoZSBsZW5iaXRzIG9yIGRpc3RiaXRzXG4gICAgICAgICAgIHZhbHVlcyBoZXJlICg5IGFuZCA2KSB3aXRob3V0IHJlYWRpbmcgdGhlIGNvbW1lbnRzIGluIGluZnRyZWVzLmhcbiAgICAgICAgICAgY29uY2VybmluZyB0aGUgRU5PVUdIIGNvbnN0YW50cywgd2hpY2ggZGVwZW5kIG9uIHRob3NlIHZhbHVlcyAqL1xuICAgICAgICBzdGF0ZS5sZW5iaXRzID0gOTtcblxuICAgICAgICBvcHRzID0geyBiaXRzOiBzdGF0ZS5sZW5iaXRzIH07XG4gICAgICAgIHJldCA9IGluZmxhdGVfdGFibGUoTEVOUywgc3RhdGUubGVucywgMCwgc3RhdGUubmxlbiwgc3RhdGUubGVuY29kZSwgMCwgc3RhdGUud29yaywgb3B0cyk7XG4gICAgICAgIC8vIFdlIGhhdmUgc2VwYXJhdGUgdGFibGVzICYgbm8gcG9pbnRlcnMuIDIgY29tbWVudGVkIGxpbmVzIGJlbG93IG5vdCBuZWVkZWQuXG4gICAgICAgIC8vIHN0YXRlLm5leHRfaW5kZXggPSBvcHRzLnRhYmxlX2luZGV4O1xuICAgICAgICBzdGF0ZS5sZW5iaXRzID0gb3B0cy5iaXRzO1xuICAgICAgICAvLyBzdGF0ZS5sZW5jb2RlID0gc3RhdGUubmV4dDtcblxuICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBsaXRlcmFsL2xlbmd0aHMgc2V0JztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUuZGlzdGJpdHMgPSA2O1xuICAgICAgICAvL3N0YXRlLmRpc3Rjb2RlLmNvcHkoc3RhdGUuY29kZXMpO1xuICAgICAgICAvLyBTd2l0Y2ggdG8gdXNlIGR5bmFtaWMgdGFibGVcbiAgICAgICAgc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5kaXN0ZHluO1xuICAgICAgICBvcHRzID0geyBiaXRzOiBzdGF0ZS5kaXN0Yml0cyB9O1xuICAgICAgICByZXQgPSBpbmZsYXRlX3RhYmxlKERJU1RTLCBzdGF0ZS5sZW5zLCBzdGF0ZS5ubGVuLCBzdGF0ZS5uZGlzdCwgc3RhdGUuZGlzdGNvZGUsIDAsIHN0YXRlLndvcmssIG9wdHMpO1xuICAgICAgICAvLyBXZSBoYXZlIHNlcGFyYXRlIHRhYmxlcyAmIG5vIHBvaW50ZXJzLiAyIGNvbW1lbnRlZCBsaW5lcyBiZWxvdyBub3QgbmVlZGVkLlxuICAgICAgICAvLyBzdGF0ZS5uZXh0X2luZGV4ID0gb3B0cy50YWJsZV9pbmRleDtcbiAgICAgICAgc3RhdGUuZGlzdGJpdHMgPSBvcHRzLmJpdHM7XG4gICAgICAgIC8vIHN0YXRlLmRpc3Rjb2RlID0gc3RhdGUubmV4dDtcblxuICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZXMgc2V0JztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsICdpbmZsYXRlOiAgICAgICBjb2RlcyBva1xcbicpKTtcbiAgICAgICAgc3RhdGUubW9kZSA9IExFTl87XG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU5fOlxuICAgICAgICBzdGF0ZS5tb2RlID0gTEVOO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIExFTjpcbiAgICAgICAgaWYgKGhhdmUgPj0gNiAmJiBsZWZ0ID49IDI1OCkge1xuICAgICAgICAgIC8vLS0tIFJFU1RPUkUoKSAtLS1cbiAgICAgICAgICBzdHJtLm5leHRfb3V0ID0gcHV0O1xuICAgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDtcbiAgICAgICAgICBzdHJtLm5leHRfaW4gPSBuZXh0O1xuICAgICAgICAgIHN0cm0uYXZhaWxfaW4gPSBoYXZlO1xuICAgICAgICAgIHN0YXRlLmhvbGQgPSBob2xkO1xuICAgICAgICAgIHN0YXRlLmJpdHMgPSBiaXRzO1xuICAgICAgICAgIC8vLS0tXG4gICAgICAgICAgaW5mbGF0ZV9mYXN0KHN0cm0sIF9vdXQpO1xuICAgICAgICAgIC8vLS0tIExPQUQoKSAtLS1cbiAgICAgICAgICBwdXQgPSBzdHJtLm5leHRfb3V0O1xuICAgICAgICAgIG91dHB1dCA9IHN0cm0ub3V0cHV0O1xuICAgICAgICAgIGxlZnQgPSBzdHJtLmF2YWlsX291dDtcbiAgICAgICAgICBuZXh0ID0gc3RybS5uZXh0X2luO1xuICAgICAgICAgIGlucHV0ID0gc3RybS5pbnB1dDtcbiAgICAgICAgICBoYXZlID0gc3RybS5hdmFpbF9pbjtcbiAgICAgICAgICBob2xkID0gc3RhdGUuaG9sZDtcbiAgICAgICAgICBiaXRzID0gc3RhdGUuYml0cztcbiAgICAgICAgICAvLy0tLVxuXG4gICAgICAgICAgaWYgKHN0YXRlLm1vZGUgPT09IFRZUEUpIHtcbiAgICAgICAgICAgIHN0YXRlLmJhY2sgPSAtMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuYmFjayA9IDA7XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICBoZXJlID0gc3RhdGUubGVuY29kZVtob2xkICYgKCgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMSldOyAgLypCSVRTKHN0YXRlLmxlbmJpdHMpKi9cbiAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xuXG4gICAgICAgICAgaWYgKGhlcmVfYml0cyA8PSBiaXRzKSB7IGJyZWFrOyB9XG4gICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZXJlX29wICYmIChoZXJlX29wICYgMHhmMCkgPT09IDApIHtcbiAgICAgICAgICBsYXN0X2JpdHMgPSBoZXJlX2JpdHM7XG4gICAgICAgICAgbGFzdF9vcCA9IGhlcmVfb3A7XG4gICAgICAgICAgbGFzdF92YWwgPSBoZXJlX3ZhbDtcbiAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBoZXJlID0gc3RhdGUubGVuY29kZVtsYXN0X3ZhbCArXG4gICAgICAgICAgICAgICAgICAgICgoaG9sZCAmICgoMSA8PCAobGFzdF9iaXRzICsgbGFzdF9vcCkpIC0gMSkpLypCSVRTKGxhc3QuYml0cyArIGxhc3Qub3ApKi8gPj4gbGFzdF9iaXRzKV07XG4gICAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgICAgaWYgKChsYXN0X2JpdHMgKyBoZXJlX2JpdHMpIDw9IGJpdHMpIHsgYnJlYWs7IH1cbiAgICAgICAgICAgIC8vLS0tIFBVTExCWVRFKCkgLS0tLy9cbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vLS0tIERST1BCSVRTKGxhc3QuYml0cykgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gbGFzdF9iaXRzO1xuICAgICAgICAgIGJpdHMgLT0gbGFzdF9iaXRzO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBzdGF0ZS5iYWNrICs9IGxhc3RfYml0cztcbiAgICAgICAgfVxuICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIHN0YXRlLmJhY2sgKz0gaGVyZV9iaXRzO1xuICAgICAgICBzdGF0ZS5sZW5ndGggPSBoZXJlX3ZhbDtcbiAgICAgICAgaWYgKGhlcmVfb3AgPT09IDApIHtcbiAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgaGVyZS52YWwgPj0gMHgyMCAmJiBoZXJlLnZhbCA8IDB4N2YgP1xuICAgICAgICAgIC8vICAgICAgICBcImluZmxhdGU6ICAgICAgICAgbGl0ZXJhbCAnJWMnXFxuXCIgOlxuICAgICAgICAgIC8vICAgICAgICBcImluZmxhdGU6ICAgICAgICAgbGl0ZXJhbCAweCUwMnhcXG5cIiwgaGVyZS52YWwpKTtcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gTElUO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZXJlX29wICYgMzIpIHtcbiAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGVuZCBvZiBibG9ja1xcblwiKSk7XG4gICAgICAgICAgc3RhdGUuYmFjayA9IC0xO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZXJlX29wICYgNjQpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGUnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuZXh0cmEgPSBoZXJlX29wICYgMTU7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBMRU5FWFQ7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgTEVORVhUOlxuICAgICAgICBpZiAoc3RhdGUuZXh0cmEpIHtcbiAgICAgICAgICAvLz09PSBORUVEQklUUyhzdGF0ZS5leHRyYSk7XG4gICAgICAgICAgbiA9IHN0YXRlLmV4dHJhO1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLmxlbmd0aCArPSBob2xkICYgKCgxIDw8IHN0YXRlLmV4dHJhKSAtIDEpLypCSVRTKHN0YXRlLmV4dHJhKSovO1xuICAgICAgICAgIC8vLS0tIERST1BCSVRTKHN0YXRlLmV4dHJhKSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICBiaXRzIC09IHN0YXRlLmV4dHJhO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBzdGF0ZS5iYWNrICs9IHN0YXRlLmV4dHJhO1xuICAgICAgICB9XG4gICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgbGVuZ3RoICV1XFxuXCIsIHN0YXRlLmxlbmd0aCkpO1xuICAgICAgICBzdGF0ZS53YXMgPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBESVNUO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIERJU1Q6XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICBoZXJlID0gc3RhdGUuZGlzdGNvZGVbaG9sZCAmICgoMSA8PCBzdGF0ZS5kaXN0Yml0cykgLSAxKV07LypCSVRTKHN0YXRlLmRpc3RiaXRzKSovXG4gICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG4gICAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgIGlmICgoaGVyZV9iaXRzKSA8PSBiaXRzKSB7IGJyZWFrOyB9XG4gICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICB9XG4gICAgICAgIGlmICgoaGVyZV9vcCAmIDB4ZjApID09PSAwKSB7XG4gICAgICAgICAgbGFzdF9iaXRzID0gaGVyZV9iaXRzO1xuICAgICAgICAgIGxhc3Rfb3AgPSBoZXJlX29wO1xuICAgICAgICAgIGxhc3RfdmFsID0gaGVyZV92YWw7XG4gICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmRpc3Rjb2RlW2xhc3RfdmFsICtcbiAgICAgICAgICAgICAgICAgICAgKChob2xkICYgKCgxIDw8IChsYXN0X2JpdHMgKyBsYXN0X29wKSkgLSAxKSkvKkJJVFMobGFzdC5iaXRzICsgbGFzdC5vcCkqLyA+PiBsYXN0X2JpdHMpXTtcbiAgICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuICAgICAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xuXG4gICAgICAgICAgICBpZiAoKGxhc3RfYml0cyArIGhlcmVfYml0cykgPD0gYml0cykgeyBicmVhazsgfVxuICAgICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMobGFzdC5iaXRzKSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSBsYXN0X2JpdHM7XG4gICAgICAgICAgYml0cyAtPSBsYXN0X2JpdHM7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIHN0YXRlLmJhY2sgKz0gbGFzdF9iaXRzO1xuICAgICAgICB9XG4gICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgc3RhdGUuYmFjayArPSBoZXJlX2JpdHM7XG4gICAgICAgIGlmIChoZXJlX29wICYgNjQpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIGNvZGUnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUub2Zmc2V0ID0gaGVyZV92YWw7XG4gICAgICAgIHN0YXRlLmV4dHJhID0gKGhlcmVfb3ApICYgMTU7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBESVNURVhUO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIERJU1RFWFQ6XG4gICAgICAgIGlmIChzdGF0ZS5leHRyYSkge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKHN0YXRlLmV4dHJhKTtcbiAgICAgICAgICBuID0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgc3RhdGUub2Zmc2V0ICs9IGhvbGQgJiAoKDEgPDwgc3RhdGUuZXh0cmEpIC0gMSkvKkJJVFMoc3RhdGUuZXh0cmEpKi87XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMoc3RhdGUuZXh0cmEpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IHN0YXRlLmV4dHJhO1xuICAgICAgICAgIGJpdHMgLT0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIHN0YXRlLmJhY2sgKz0gc3RhdGUuZXh0cmE7XG4gICAgICAgIH1cbi8vI2lmZGVmIElORkxBVEVfU1RSSUNUXG4gICAgICAgIGlmIChzdGF0ZS5vZmZzZXQgPiBzdGF0ZS5kbWF4KSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbi8vI2VuZGlmXG4gICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgZGlzdGFuY2UgJXVcXG5cIiwgc3RhdGUub2Zmc2V0KSk7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBNQVRDSDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBNQVRDSDpcbiAgICAgICAgaWYgKGxlZnQgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIGNvcHkgPSBfb3V0IC0gbGVmdDtcbiAgICAgICAgaWYgKHN0YXRlLm9mZnNldCA+IGNvcHkpIHsgICAgICAgICAvKiBjb3B5IGZyb20gd2luZG93ICovXG4gICAgICAgICAgY29weSA9IHN0YXRlLm9mZnNldCAtIGNvcHk7XG4gICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS53aGF2ZSkge1xuICAgICAgICAgICAgaWYgKHN0YXRlLnNhbmUpIHtcbiAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snO1xuICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbi8vICghKSBUaGlzIGJsb2NrIGlzIGRpc2FibGVkIGluIHpsaWIgZGVmYXVsdHMsXG4vLyBkb24ndCBlbmFibGUgaXQgZm9yIGJpbmFyeSBjb21wYXRpYmlsaXR5XG4vLyNpZmRlZiBJTkZMQVRFX0FMTE9XX0lOVkFMSURfRElTVEFOQ0VfVE9PRkFSX0FSUlJcbi8vICAgICAgICAgIFRyYWNlKChzdGRlcnIsIFwiaW5mbGF0ZS5jIHRvbyBmYXJcXG5cIikpO1xuLy8gICAgICAgICAgY29weSAtPSBzdGF0ZS53aGF2ZTtcbi8vICAgICAgICAgIGlmIChjb3B5ID4gc3RhdGUubGVuZ3RoKSB7IGNvcHkgPSBzdGF0ZS5sZW5ndGg7IH1cbi8vICAgICAgICAgIGlmIChjb3B5ID4gbGVmdCkgeyBjb3B5ID0gbGVmdDsgfVxuLy8gICAgICAgICAgbGVmdCAtPSBjb3B5O1xuLy8gICAgICAgICAgc3RhdGUubGVuZ3RoIC09IGNvcHk7XG4vLyAgICAgICAgICBkbyB7XG4vLyAgICAgICAgICAgIG91dHB1dFtwdXQrK10gPSAwO1xuLy8gICAgICAgICAgfSB3aGlsZSAoLS1jb3B5KTtcbi8vICAgICAgICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHsgc3RhdGUubW9kZSA9IExFTjsgfVxuLy8gICAgICAgICAgYnJlYWs7XG4vLyNlbmRpZlxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY29weSA+IHN0YXRlLnduZXh0KSB7XG4gICAgICAgICAgICBjb3B5IC09IHN0YXRlLnduZXh0O1xuICAgICAgICAgICAgZnJvbSA9IHN0YXRlLndzaXplIC0gY29weTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmcm9tID0gc3RhdGUud25leHQgLSBjb3B5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY29weSA+IHN0YXRlLmxlbmd0aCkgeyBjb3B5ID0gc3RhdGUubGVuZ3RoOyB9XG4gICAgICAgICAgZnJvbV9zb3VyY2UgPSBzdGF0ZS53aW5kb3c7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogY29weSBmcm9tIG91dHB1dCAqL1xuICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0O1xuICAgICAgICAgIGZyb20gPSBwdXQgLSBzdGF0ZS5vZmZzZXQ7XG4gICAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29weSA+IGxlZnQpIHsgY29weSA9IGxlZnQ7IH1cbiAgICAgICAgbGVmdCAtPSBjb3B5O1xuICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIG91dHB1dFtwdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICB9IHdoaWxlICgtLWNvcHkpO1xuICAgICAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7IHN0YXRlLm1vZGUgPSBMRU47IH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIExJVDpcbiAgICAgICAgaWYgKGxlZnQgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIG91dHB1dFtwdXQrK10gPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgIGxlZnQtLTtcbiAgICAgICAgc3RhdGUubW9kZSA9IExFTjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIENIRUNLOlxuICAgICAgICBpZiAoc3RhdGUud3JhcCkge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTtcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIC8vIFVzZSAnfCcgaW5zdGVhZCBvZiAnKycgdG8gbWFrZSBzdXJlIHRoYXQgcmVzdWx0IGlzIHNpZ25lZFxuICAgICAgICAgICAgaG9sZCB8PSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBfb3V0IC09IGxlZnQ7XG4gICAgICAgICAgc3RybS50b3RhbF9vdXQgKz0gX291dDtcbiAgICAgICAgICBzdGF0ZS50b3RhbCArPSBfb3V0O1xuICAgICAgICAgIGlmICgoc3RhdGUud3JhcCAmIDQpICYmIF9vdXQpIHtcbiAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9XG4gICAgICAgICAgICAgICAgLypVUERBVEVfQ0hFQ0soc3RhdGUuY2hlY2ssIHB1dCAtIF9vdXQsIF9vdXQpOyovXG4gICAgICAgICAgICAgICAgKHN0YXRlLmZsYWdzID8gY3JjMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgcHV0IC0gX291dCkgOiBhZGxlcjMyKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHB1dCAtIF9vdXQpKTtcblxuICAgICAgICAgIH1cbiAgICAgICAgICBfb3V0ID0gbGVmdDtcbiAgICAgICAgICAvLyBOQjogY3JjMzIgc3RvcmVkIGFzIHNpZ25lZCAzMi1iaXQgaW50LCB6c3dhcDMyIHJldHVybnMgc2lnbmVkIHRvb1xuICAgICAgICAgIGlmICgoc3RhdGUud3JhcCAmIDQpICYmIChzdGF0ZS5mbGFncyA/IGhvbGQgOiB6c3dhcDMyKGhvbGQpKSAhPT0gc3RhdGUuY2hlY2spIHtcbiAgICAgICAgICAgIHN0cm0ubXNnID0gJ2luY29ycmVjdCBkYXRhIGNoZWNrJztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICBob2xkID0gMDtcbiAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIGNoZWNrIG1hdGNoZXMgdHJhaWxlclxcblwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubW9kZSA9IExFTkdUSDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU5HVEg6XG4gICAgICAgIGlmIChzdGF0ZS53cmFwICYmIHN0YXRlLmZsYWdzKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpO1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBpZiAoKHN0YXRlLndyYXAgJiA0KSAmJiBob2xkICE9PSAoc3RhdGUudG90YWwgJiAweGZmZmZmZmZmKSkge1xuICAgICAgICAgICAgc3RybS5tc2cgPSAnaW5jb3JyZWN0IGxlbmd0aCBjaGVjayc7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICBsZW5ndGggbWF0Y2hlcyB0cmFpbGVyXFxuXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5tb2RlID0gRE9ORTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBET05FOlxuICAgICAgICByZXQgPSBaX1NUUkVBTV9FTkQ7XG4gICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgIGNhc2UgQkFEOlxuICAgICAgICByZXQgPSBaX0RBVEFfRVJST1I7XG4gICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgIGNhc2UgTUVNOlxuICAgICAgICByZXR1cm4gWl9NRU1fRVJST1I7XG4gICAgICBjYXNlIFNZTkM6XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgICB9XG4gIH1cblxuICAvLyBpbmZfbGVhdmUgPC0gaGVyZSBpcyByZWFsIHBsYWNlIGZvciBcImdvdG8gaW5mX2xlYXZlXCIsIGVtdWxhdGVkIHZpYSBcImJyZWFrIGluZl9sZWF2ZVwiXG5cbiAgLypcbiAgICAgUmV0dXJuIGZyb20gaW5mbGF0ZSgpLCB1cGRhdGluZyB0aGUgdG90YWwgY291bnRzIGFuZCB0aGUgY2hlY2sgdmFsdWUuXG4gICAgIElmIHRoZXJlIHdhcyBubyBwcm9ncmVzcyBkdXJpbmcgdGhlIGluZmxhdGUoKSBjYWxsLCByZXR1cm4gYSBidWZmZXJcbiAgICAgZXJyb3IuICBDYWxsIHVwZGF0ZXdpbmRvdygpIHRvIGNyZWF0ZSBhbmQvb3IgdXBkYXRlIHRoZSB3aW5kb3cgc3RhdGUuXG4gICAgIE5vdGU6IGEgbWVtb3J5IGVycm9yIGZyb20gaW5mbGF0ZSgpIGlzIG5vbi1yZWNvdmVyYWJsZS5cbiAgICovXG5cbiAgLy8tLS0gUkVTVE9SRSgpIC0tLVxuICBzdHJtLm5leHRfb3V0ID0gcHV0O1xuICBzdHJtLmF2YWlsX291dCA9IGxlZnQ7XG4gIHN0cm0ubmV4dF9pbiA9IG5leHQ7XG4gIHN0cm0uYXZhaWxfaW4gPSBoYXZlO1xuICBzdGF0ZS5ob2xkID0gaG9sZDtcbiAgc3RhdGUuYml0cyA9IGJpdHM7XG4gIC8vLS0tXG5cbiAgaWYgKHN0YXRlLndzaXplIHx8IChfb3V0ICE9PSBzdHJtLmF2YWlsX291dCAmJiBzdGF0ZS5tb2RlIDwgQkFEICYmXG4gICAgICAgICAgICAgICAgICAgICAgKHN0YXRlLm1vZGUgPCBDSEVDSyB8fCBmbHVzaCAhPT0gWl9GSU5JU0gpKSkge1xuICAgIGlmICh1cGRhdGV3aW5kb3coc3RybSwgc3RybS5vdXRwdXQsIHN0cm0ubmV4dF9vdXQsIF9vdXQgLSBzdHJtLmF2YWlsX291dCkpIHtcbiAgICAgIHN0YXRlLm1vZGUgPSBNRU07XG4gICAgICByZXR1cm4gWl9NRU1fRVJST1I7XG4gICAgfVxuICB9XG4gIF9pbiAtPSBzdHJtLmF2YWlsX2luO1xuICBfb3V0IC09IHN0cm0uYXZhaWxfb3V0O1xuICBzdHJtLnRvdGFsX2luICs9IF9pbjtcbiAgc3RybS50b3RhbF9vdXQgKz0gX291dDtcbiAgc3RhdGUudG90YWwgKz0gX291dDtcbiAgaWYgKChzdGF0ZS53cmFwICYgNCkgJiYgX291dCkge1xuICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IC8qVVBEQVRFX0NIRUNLKHN0YXRlLmNoZWNrLCBzdHJtLm5leHRfb3V0IC0gX291dCwgX291dCk7Ki9cbiAgICAgIChzdGF0ZS5mbGFncyA/IGNyYzMyKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHN0cm0ubmV4dF9vdXQgLSBfb3V0KSA6IGFkbGVyMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgc3RybS5uZXh0X291dCAtIF9vdXQpKTtcbiAgfVxuICBzdHJtLmRhdGFfdHlwZSA9IHN0YXRlLmJpdHMgKyAoc3RhdGUubGFzdCA/IDY0IDogMCkgK1xuICAgICAgICAgICAgICAgICAgICAoc3RhdGUubW9kZSA9PT0gVFlQRSA/IDEyOCA6IDApICtcbiAgICAgICAgICAgICAgICAgICAgKHN0YXRlLm1vZGUgPT09IExFTl8gfHwgc3RhdGUubW9kZSA9PT0gQ09QWV8gPyAyNTYgOiAwKTtcbiAgaWYgKCgoX2luID09PSAwICYmIF9vdXQgPT09IDApIHx8IGZsdXNoID09PSBaX0ZJTklTSCkgJiYgcmV0ID09PSBaX09LKSB7XG4gICAgcmV0ID0gWl9CVUZfRVJST1I7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn07XG5cblxuY29uc3QgaW5mbGF0ZUVuZCA9IChzdHJtKSA9PiB7XG5cbiAgaWYgKGluZmxhdGVTdGF0ZUNoZWNrKHN0cm0pKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgbGV0IHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgaWYgKHN0YXRlLndpbmRvdykge1xuICAgIHN0YXRlLndpbmRvdyA9IG51bGw7XG4gIH1cbiAgc3RybS5zdGF0ZSA9IG51bGw7XG4gIHJldHVybiBaX09LO1xufTtcblxuXG5jb25zdCBpbmZsYXRlR2V0SGVhZGVyID0gKHN0cm0sIGhlYWQpID0+IHtcblxuICAvKiBjaGVjayBzdGF0ZSAqL1xuICBpZiAoaW5mbGF0ZVN0YXRlQ2hlY2soc3RybSkpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIGNvbnN0IHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgaWYgKChzdGF0ZS53cmFwICYgMikgPT09IDApIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG5cbiAgLyogc2F2ZSBoZWFkZXIgc3RydWN0dXJlICovXG4gIHN0YXRlLmhlYWQgPSBoZWFkO1xuICBoZWFkLmRvbmUgPSBmYWxzZTtcbiAgcmV0dXJuIFpfT0s7XG59O1xuXG5cbmNvbnN0IGluZmxhdGVTZXREaWN0aW9uYXJ5ID0gKHN0cm0sIGRpY3Rpb25hcnkpID0+IHtcbiAgY29uc3QgZGljdExlbmd0aCA9IGRpY3Rpb25hcnkubGVuZ3RoO1xuXG4gIGxldCBzdGF0ZTtcbiAgbGV0IGRpY3RpZDtcbiAgbGV0IHJldDtcblxuICAvKiBjaGVjayBzdGF0ZSAqL1xuICBpZiAoaW5mbGF0ZVN0YXRlQ2hlY2soc3RybSkpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcblxuICBpZiAoc3RhdGUud3JhcCAhPT0gMCAmJiBzdGF0ZS5tb2RlICE9PSBESUNUKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgLyogY2hlY2sgZm9yIGNvcnJlY3QgZGljdGlvbmFyeSBpZGVudGlmaWVyICovXG4gIGlmIChzdGF0ZS5tb2RlID09PSBESUNUKSB7XG4gICAgZGljdGlkID0gMTsgLyogYWRsZXIzMigwLCBudWxsLCAwKSovXG4gICAgLyogZGljdGlkID0gYWRsZXIzMihkaWN0aWQsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgpOyAqL1xuICAgIGRpY3RpZCA9IGFkbGVyMzIoZGljdGlkLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoLCAwKTtcbiAgICBpZiAoZGljdGlkICE9PSBzdGF0ZS5jaGVjaykge1xuICAgICAgcmV0dXJuIFpfREFUQV9FUlJPUjtcbiAgICB9XG4gIH1cbiAgLyogY29weSBkaWN0aW9uYXJ5IHRvIHdpbmRvdyB1c2luZyB1cGRhdGV3aW5kb3coKSwgd2hpY2ggd2lsbCBhbWVuZCB0aGVcbiAgIGV4aXN0aW5nIGRpY3Rpb25hcnkgaWYgYXBwcm9wcmlhdGUgKi9cbiAgcmV0ID0gdXBkYXRld2luZG93KHN0cm0sIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgsIGRpY3RMZW5ndGgpO1xuICBpZiAocmV0KSB7XG4gICAgc3RhdGUubW9kZSA9IE1FTTtcbiAgICByZXR1cm4gWl9NRU1fRVJST1I7XG4gIH1cbiAgc3RhdGUuaGF2ZWRpY3QgPSAxO1xuICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIGRpY3Rpb25hcnkgc2V0XFxuXCIpKTtcbiAgcmV0dXJuIFpfT0s7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzLmluZmxhdGVSZXNldCA9IGluZmxhdGVSZXNldDtcbm1vZHVsZS5leHBvcnRzLmluZmxhdGVSZXNldDIgPSBpbmZsYXRlUmVzZXQyO1xubW9kdWxlLmV4cG9ydHMuaW5mbGF0ZVJlc2V0S2VlcCA9IGluZmxhdGVSZXNldEtlZXA7XG5tb2R1bGUuZXhwb3J0cy5pbmZsYXRlSW5pdCA9IGluZmxhdGVJbml0O1xubW9kdWxlLmV4cG9ydHMuaW5mbGF0ZUluaXQyID0gaW5mbGF0ZUluaXQyO1xubW9kdWxlLmV4cG9ydHMuaW5mbGF0ZSA9IGluZmxhdGU7XG5tb2R1bGUuZXhwb3J0cy5pbmZsYXRlRW5kID0gaW5mbGF0ZUVuZDtcbm1vZHVsZS5leHBvcnRzLmluZmxhdGVHZXRIZWFkZXIgPSBpbmZsYXRlR2V0SGVhZGVyO1xubW9kdWxlLmV4cG9ydHMuaW5mbGF0ZVNldERpY3Rpb25hcnkgPSBpbmZsYXRlU2V0RGljdGlvbmFyeTtcbm1vZHVsZS5leHBvcnRzLmluZmxhdGVJbmZvID0gJ3Bha28gaW5mbGF0ZSAoZnJvbSBOb2RlY2EgcHJvamVjdCknO1xuXG4vKiBOb3QgaW1wbGVtZW50ZWRcbm1vZHVsZS5leHBvcnRzLmluZmxhdGVDb2Rlc1VzZWQgPSBpbmZsYXRlQ29kZXNVc2VkO1xubW9kdWxlLmV4cG9ydHMuaW5mbGF0ZUNvcHkgPSBpbmZsYXRlQ29weTtcbm1vZHVsZS5leHBvcnRzLmluZmxhdGVHZXREaWN0aW9uYXJ5ID0gaW5mbGF0ZUdldERpY3Rpb25hcnk7XG5tb2R1bGUuZXhwb3J0cy5pbmZsYXRlTWFyayA9IGluZmxhdGVNYXJrO1xubW9kdWxlLmV4cG9ydHMuaW5mbGF0ZVByaW1lID0gaW5mbGF0ZVByaW1lO1xubW9kdWxlLmV4cG9ydHMuaW5mbGF0ZVN5bmMgPSBpbmZsYXRlU3luYztcbm1vZHVsZS5leHBvcnRzLmluZmxhdGVTeW5jUG9pbnQgPSBpbmZsYXRlU3luY1BvaW50O1xubW9kdWxlLmV4cG9ydHMuaW5mbGF0ZVVuZGVybWluZSA9IGluZmxhdGVVbmRlcm1pbmU7XG5tb2R1bGUuZXhwb3J0cy5pbmZsYXRlVmFsaWRhdGUgPSBpbmZsYXRlVmFsaWRhdGU7XG4qL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbmZ1bmN0aW9uIEdaaGVhZGVyKCkge1xuICAvKiB0cnVlIGlmIGNvbXByZXNzZWQgZGF0YSBiZWxpZXZlZCB0byBiZSB0ZXh0ICovXG4gIHRoaXMudGV4dCAgICAgICA9IDA7XG4gIC8qIG1vZGlmaWNhdGlvbiB0aW1lICovXG4gIHRoaXMudGltZSAgICAgICA9IDA7XG4gIC8qIGV4dHJhIGZsYWdzIChub3QgdXNlZCB3aGVuIHdyaXRpbmcgYSBnemlwIGZpbGUpICovXG4gIHRoaXMueGZsYWdzICAgICA9IDA7XG4gIC8qIG9wZXJhdGluZyBzeXN0ZW0gKi9cbiAgdGhpcy5vcyAgICAgICAgID0gMDtcbiAgLyogcG9pbnRlciB0byBleHRyYSBmaWVsZCBvciBaX05VTEwgaWYgbm9uZSAqL1xuICB0aGlzLmV4dHJhICAgICAgPSBudWxsO1xuICAvKiBleHRyYSBmaWVsZCBsZW5ndGggKHZhbGlkIGlmIGV4dHJhICE9IFpfTlVMTCkgKi9cbiAgdGhpcy5leHRyYV9sZW4gID0gMDsgLy8gQWN0dWFsbHksIHdlIGRvbid0IG5lZWQgaXQgaW4gSlMsXG4gICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBsZWF2ZSBmb3IgZmV3IGNvZGUgbW9kaWZpY2F0aW9uc1xuXG4gIC8vXG4gIC8vIFNldHVwIGxpbWl0cyBpcyBub3QgbmVjZXNzYXJ5IGJlY2F1c2UgaW4ganMgd2Ugc2hvdWxkIG5vdCBwcmVhbGxvY2F0ZSBtZW1vcnlcbiAgLy8gZm9yIGluZmxhdGUgdXNlIGNvbnN0YW50IGxpbWl0IGluIDY1NTM2IGJ5dGVzXG4gIC8vXG5cbiAgLyogc3BhY2UgYXQgZXh0cmEgKG9ubHkgd2hlbiByZWFkaW5nIGhlYWRlcikgKi9cbiAgLy8gdGhpcy5leHRyYV9tYXggID0gMDtcbiAgLyogcG9pbnRlciB0byB6ZXJvLXRlcm1pbmF0ZWQgZmlsZSBuYW1lIG9yIFpfTlVMTCAqL1xuICB0aGlzLm5hbWUgICAgICAgPSAnJztcbiAgLyogc3BhY2UgYXQgbmFtZSAob25seSB3aGVuIHJlYWRpbmcgaGVhZGVyKSAqL1xuICAvLyB0aGlzLm5hbWVfbWF4ICAgPSAwO1xuICAvKiBwb2ludGVyIHRvIHplcm8tdGVybWluYXRlZCBjb21tZW50IG9yIFpfTlVMTCAqL1xuICB0aGlzLmNvbW1lbnQgICAgPSAnJztcbiAgLyogc3BhY2UgYXQgY29tbWVudCAob25seSB3aGVuIHJlYWRpbmcgaGVhZGVyKSAqL1xuICAvLyB0aGlzLmNvbW1fbWF4ICAgPSAwO1xuICAvKiB0cnVlIGlmIHRoZXJlIHdhcyBvciB3aWxsIGJlIGEgaGVhZGVyIGNyYyAqL1xuICB0aGlzLmhjcmMgICAgICAgPSAwO1xuICAvKiB0cnVlIHdoZW4gZG9uZSByZWFkaW5nIGd6aXAgaGVhZGVyIChub3QgdXNlZCB3aGVuIHdyaXRpbmcgYSBnemlwIGZpbGUpICovXG4gIHRoaXMuZG9uZSAgICAgICA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEdaaGVhZGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbmNvbnN0IHpsaWJfaW5mbGF0ZSA9IHJlcXVpcmUoJy4vemxpYi9pbmZsYXRlJyk7XG5jb25zdCB1dGlscyAgICAgICAgPSByZXF1aXJlKCcuL3V0aWxzL2NvbW1vbicpO1xuY29uc3Qgc3RyaW5ncyAgICAgID0gcmVxdWlyZSgnLi91dGlscy9zdHJpbmdzJyk7XG5jb25zdCBtc2cgICAgICAgICAgPSByZXF1aXJlKCcuL3psaWIvbWVzc2FnZXMnKTtcbmNvbnN0IFpTdHJlYW0gICAgICA9IHJlcXVpcmUoJy4vemxpYi96c3RyZWFtJyk7XG5jb25zdCBHWmhlYWRlciAgICAgPSByZXF1aXJlKCcuL3psaWIvZ3poZWFkZXInKTtcblxuY29uc3QgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKiBQdWJsaWMgY29uc3RhbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuY29uc3Qge1xuICBaX05PX0ZMVVNILCBaX0ZJTklTSCxcbiAgWl9PSywgWl9TVFJFQU1fRU5ELCBaX05FRURfRElDVCwgWl9TVFJFQU1fRVJST1IsIFpfREFUQV9FUlJPUiwgWl9NRU1fRVJST1Jcbn0gPSByZXF1aXJlKCcuL3psaWIvY29uc3RhbnRzJyk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuLyoqXG4gKiBjbGFzcyBJbmZsYXRlXG4gKlxuICogR2VuZXJpYyBKUy1zdHlsZSB3cmFwcGVyIGZvciB6bGliIGNhbGxzLiBJZiB5b3UgZG9uJ3QgbmVlZFxuICogc3RyZWFtaW5nIGJlaGF2aW91ciAtIHVzZSBtb3JlIHNpbXBsZSBmdW5jdGlvbnM6IFtbaW5mbGF0ZV1dXG4gKiBhbmQgW1tpbmZsYXRlUmF3XV0uXG4gKiovXG5cbi8qIGludGVybmFsXG4gKiBpbmZsYXRlLmNodW5rcyAtPiBBcnJheVxuICpcbiAqIENodW5rcyBvZiBvdXRwdXQgZGF0YSwgaWYgW1tJbmZsYXRlI29uRGF0YV1dIG5vdCBvdmVycmlkZGVuLlxuICoqL1xuXG4vKipcbiAqIEluZmxhdGUucmVzdWx0IC0+IFVpbnQ4QXJyYXl8U3RyaW5nXG4gKlxuICogVW5jb21wcmVzc2VkIHJlc3VsdCwgZ2VuZXJhdGVkIGJ5IGRlZmF1bHQgW1tJbmZsYXRlI29uRGF0YV1dXG4gKiBhbmQgW1tJbmZsYXRlI29uRW5kXV0gaGFuZGxlcnMuIEZpbGxlZCBhZnRlciB5b3UgcHVzaCBsYXN0IGNodW5rXG4gKiAoY2FsbCBbW0luZmxhdGUjcHVzaF1dIHdpdGggYFpfRklOSVNIYCAvIGB0cnVlYCBwYXJhbSkuXG4gKiovXG5cbi8qKlxuICogSW5mbGF0ZS5lcnIgLT4gTnVtYmVyXG4gKlxuICogRXJyb3IgY29kZSBhZnRlciBpbmZsYXRlIGZpbmlzaGVkLiAwIChaX09LKSBvbiBzdWNjZXNzLlxuICogU2hvdWxkIGJlIGNoZWNrZWQgaWYgYnJva2VuIGRhdGEgcG9zc2libGUuXG4gKiovXG5cbi8qKlxuICogSW5mbGF0ZS5tc2cgLT4gU3RyaW5nXG4gKlxuICogRXJyb3IgbWVzc2FnZSwgaWYgW1tJbmZsYXRlLmVycl1dICE9IDBcbiAqKi9cblxuXG4vKipcbiAqIG5ldyBJbmZsYXRlKG9wdGlvbnMpXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgaW5mbGF0ZSBvcHRpb25zLlxuICpcbiAqIENyZWF0ZXMgbmV3IGluZmxhdG9yIGluc3RhbmNlIHdpdGggc3BlY2lmaWVkIHBhcmFtcy4gVGhyb3dzIGV4Y2VwdGlvblxuICogb24gYmFkIHBhcmFtcy4gU3VwcG9ydGVkIG9wdGlvbnM6XG4gKlxuICogLSBgd2luZG93Qml0c2BcbiAqIC0gYGRpY3Rpb25hcnlgXG4gKlxuICogW2h0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZF0oaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkKVxuICogZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhlc2UuXG4gKlxuICogQWRkaXRpb25hbCBvcHRpb25zLCBmb3IgaW50ZXJuYWwgbmVlZHM6XG4gKlxuICogLSBgY2h1bmtTaXplYCAtIHNpemUgb2YgZ2VuZXJhdGVkIGRhdGEgY2h1bmtzICgxNksgYnkgZGVmYXVsdClcbiAqIC0gYHJhd2AgKEJvb2xlYW4pIC0gZG8gcmF3IGluZmxhdGVcbiAqIC0gYHRvYCAoU3RyaW5nKSAtIGlmIGVxdWFsIHRvICdzdHJpbmcnLCB0aGVuIHJlc3VsdCB3aWxsIGJlIGNvbnZlcnRlZFxuICogICBmcm9tIHV0ZjggdG8gdXRmMTYgKGphdmFzY3JpcHQpIHN0cmluZy4gV2hlbiBzdHJpbmcgb3V0cHV0IHJlcXVlc3RlZCxcbiAqICAgY2h1bmsgbGVuZ3RoIGNhbiBkaWZmZXIgZnJvbSBgY2h1bmtTaXplYCwgZGVwZW5kaW5nIG9uIGNvbnRlbnQuXG4gKlxuICogQnkgZGVmYXVsdCwgd2hlbiBubyBvcHRpb25zIHNldCwgYXV0b2RldGVjdCBkZWZsYXRlL2d6aXAgZGF0YSBmb3JtYXQgdmlhXG4gKiB3cmFwcGVyIGhlYWRlci5cbiAqXG4gKiAjIyMjIyBFeGFtcGxlOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IHBha28gPSByZXF1aXJlKCdwYWtvJylcbiAqIGNvbnN0IGNodW5rMSA9IG5ldyBVaW50OEFycmF5KFsxLDIsMyw0LDUsNiw3LDgsOV0pXG4gKiBjb25zdCBjaHVuazIgPSBuZXcgVWludDhBcnJheShbMTAsMTEsMTIsMTMsMTQsMTUsMTYsMTcsMTgsMTldKTtcbiAqXG4gKiBjb25zdCBpbmZsYXRlID0gbmV3IHBha28uSW5mbGF0ZSh7IGxldmVsOiAzfSk7XG4gKlxuICogaW5mbGF0ZS5wdXNoKGNodW5rMSwgZmFsc2UpO1xuICogaW5mbGF0ZS5wdXNoKGNodW5rMiwgdHJ1ZSk7ICAvLyB0cnVlIC0+IGxhc3QgY2h1bmtcbiAqXG4gKiBpZiAoaW5mbGF0ZS5lcnIpIHsgdGhyb3cgbmV3IEVycm9yKGluZmxhdGUuZXJyKTsgfVxuICpcbiAqIGNvbnNvbGUubG9nKGluZmxhdGUucmVzdWx0KTtcbiAqIGBgYFxuICoqL1xuZnVuY3Rpb24gSW5mbGF0ZShvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IHV0aWxzLmFzc2lnbih7XG4gICAgY2h1bmtTaXplOiAxMDI0ICogNjQsXG4gICAgd2luZG93Qml0czogMTUsXG4gICAgdG86ICcnXG4gIH0sIG9wdGlvbnMgfHwge30pO1xuXG4gIGNvbnN0IG9wdCA9IHRoaXMub3B0aW9ucztcblxuICAvLyBGb3JjZSB3aW5kb3cgc2l6ZSBmb3IgYHJhd2AgZGF0YSwgaWYgbm90IHNldCBkaXJlY3RseSxcbiAgLy8gYmVjYXVzZSB3ZSBoYXZlIG5vIGhlYWRlciBmb3IgYXV0b2RldGVjdC5cbiAgaWYgKG9wdC5yYXcgJiYgKG9wdC53aW5kb3dCaXRzID49IDApICYmIChvcHQud2luZG93Qml0cyA8IDE2KSkge1xuICAgIG9wdC53aW5kb3dCaXRzID0gLW9wdC53aW5kb3dCaXRzO1xuICAgIGlmIChvcHQud2luZG93Qml0cyA9PT0gMCkgeyBvcHQud2luZG93Qml0cyA9IC0xNTsgfVxuICB9XG5cbiAgLy8gSWYgYHdpbmRvd0JpdHNgIG5vdCBkZWZpbmVkIChhbmQgbW9kZSBub3QgcmF3KSAtIHNldCBhdXRvZGV0ZWN0IGZsYWcgZm9yIGd6aXAvZGVmbGF0ZVxuICBpZiAoKG9wdC53aW5kb3dCaXRzID49IDApICYmIChvcHQud2luZG93Qml0cyA8IDE2KSAmJlxuICAgICAgIShvcHRpb25zICYmIG9wdGlvbnMud2luZG93Qml0cykpIHtcbiAgICBvcHQud2luZG93Qml0cyArPSAzMjtcbiAgfVxuXG4gIC8vIEd6aXAgaGVhZGVyIGhhcyBubyBpbmZvIGFib3V0IHdpbmRvd3Mgc2l6ZSwgd2UgY2FuIGRvIGF1dG9kZXRlY3Qgb25seVxuICAvLyBmb3IgZGVmbGF0ZS4gU28sIGlmIHdpbmRvdyBzaXplIG5vdCBzZXQsIGZvcmNlIGl0IHRvIG1heCB3aGVuIGd6aXAgcG9zc2libGVcbiAgaWYgKChvcHQud2luZG93Qml0cyA+IDE1KSAmJiAob3B0LndpbmRvd0JpdHMgPCA0OCkpIHtcbiAgICAvLyBiaXQgMyAoMTYpIC0+IGd6aXBwZWQgZGF0YVxuICAgIC8vIGJpdCA0ICgzMikgLT4gYXV0b2RldGVjdCBnemlwL2RlZmxhdGVcbiAgICBpZiAoKG9wdC53aW5kb3dCaXRzICYgMTUpID09PSAwKSB7XG4gICAgICBvcHQud2luZG93Qml0cyB8PSAxNTtcbiAgICB9XG4gIH1cblxuICB0aGlzLmVyciAgICA9IDA7ICAgICAgLy8gZXJyb3IgY29kZSwgaWYgaGFwcGVucyAoMCA9IFpfT0spXG4gIHRoaXMubXNnICAgID0gJyc7ICAgICAvLyBlcnJvciBtZXNzYWdlXG4gIHRoaXMuZW5kZWQgID0gZmFsc2U7ICAvLyB1c2VkIHRvIGF2b2lkIG11bHRpcGxlIG9uRW5kKCkgY2FsbHNcbiAgdGhpcy5jaHVua3MgPSBbXTsgICAgIC8vIGNodW5rcyBvZiBjb21wcmVzc2VkIGRhdGFcblxuICB0aGlzLnN0cm0gICA9IG5ldyBaU3RyZWFtKCk7XG4gIHRoaXMuc3RybS5hdmFpbF9vdXQgPSAwO1xuXG4gIGxldCBzdGF0dXMgID0gemxpYl9pbmZsYXRlLmluZmxhdGVJbml0MihcbiAgICB0aGlzLnN0cm0sXG4gICAgb3B0LndpbmRvd0JpdHNcbiAgKTtcblxuICBpZiAoc3RhdHVzICE9PSBaX09LKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZ1tzdGF0dXNdKTtcbiAgfVxuXG4gIHRoaXMuaGVhZGVyID0gbmV3IEdaaGVhZGVyKCk7XG5cbiAgemxpYl9pbmZsYXRlLmluZmxhdGVHZXRIZWFkZXIodGhpcy5zdHJtLCB0aGlzLmhlYWRlcik7XG5cbiAgLy8gU2V0dXAgZGljdGlvbmFyeVxuICBpZiAob3B0LmRpY3Rpb25hcnkpIHtcbiAgICAvLyBDb252ZXJ0IGRhdGEgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBvcHQuZGljdGlvbmFyeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG9wdC5kaWN0aW9uYXJ5ID0gc3RyaW5ncy5zdHJpbmcyYnVmKG9wdC5kaWN0aW9uYXJ5KTtcbiAgICB9IGVsc2UgaWYgKHRvU3RyaW5nLmNhbGwob3B0LmRpY3Rpb25hcnkpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nKSB7XG4gICAgICBvcHQuZGljdGlvbmFyeSA9IG5ldyBVaW50OEFycmF5KG9wdC5kaWN0aW9uYXJ5KTtcbiAgICB9XG4gICAgaWYgKG9wdC5yYXcpIHsgLy9JbiByYXcgbW9kZSB3ZSBuZWVkIHRvIHNldCB0aGUgZGljdGlvbmFyeSBlYXJseVxuICAgICAgc3RhdHVzID0gemxpYl9pbmZsYXRlLmluZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSwgb3B0LmRpY3Rpb25hcnkpO1xuICAgICAgaWYgKHN0YXR1cyAhPT0gWl9PSykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnW3N0YXR1c10pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEluZmxhdGUjcHVzaChkYXRhWywgZmx1c2hfbW9kZV0pIC0+IEJvb2xlYW5cbiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheUJ1ZmZlcik6IGlucHV0IGRhdGFcbiAqIC0gZmx1c2hfbW9kZSAoTnVtYmVyfEJvb2xlYW4pOiAwLi42IGZvciBjb3JyZXNwb25kaW5nIFpfTk9fRkxVU0guLlpfVFJFRVxuICogICBmbHVzaCBtb2Rlcy4gU2VlIGNvbnN0YW50cy4gU2tpcHBlZCBvciBgZmFsc2VgIG1lYW5zIFpfTk9fRkxVU0gsXG4gKiAgIGB0cnVlYCBtZWFucyBaX0ZJTklTSC5cbiAqXG4gKiBTZW5kcyBpbnB1dCBkYXRhIHRvIGluZmxhdGUgcGlwZSwgZ2VuZXJhdGluZyBbW0luZmxhdGUjb25EYXRhXV0gY2FsbHMgd2l0aFxuICogbmV3IG91dHB1dCBjaHVua3MuIFJldHVybnMgYHRydWVgIG9uIHN1Y2Nlc3MuIElmIGVuZCBvZiBzdHJlYW0gZGV0ZWN0ZWQsXG4gKiBbW0luZmxhdGUjb25FbmRdXSB3aWxsIGJlIGNhbGxlZC5cbiAqXG4gKiBgZmx1c2hfbW9kZWAgaXMgbm90IG5lZWRlZCBmb3Igbm9ybWFsIG9wZXJhdGlvbiwgYmVjYXVzZSBlbmQgb2Ygc3RyZWFtXG4gKiBkZXRlY3RlZCBhdXRvbWF0aWNhbGx5LiBZb3UgbWF5IHRyeSB0byB1c2UgaXQgZm9yIGFkdmFuY2VkIHRoaW5ncywgYnV0XG4gKiB0aGlzIGZ1bmN0aW9uYWxpdHkgd2FzIG5vdCB0ZXN0ZWQuXG4gKlxuICogT24gZmFpbCBjYWxsIFtbSW5mbGF0ZSNvbkVuZF1dIHdpdGggZXJyb3IgY29kZSBhbmQgcmV0dXJuIGZhbHNlLlxuICpcbiAqICMjIyMjIEV4YW1wbGVcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBwdXNoKGNodW5rLCBmYWxzZSk7IC8vIHB1c2ggb25lIG9mIGRhdGEgY2h1bmtzXG4gKiAuLi5cbiAqIHB1c2goY2h1bmssIHRydWUpOyAgLy8gcHVzaCBsYXN0IGNodW5rXG4gKiBgYGBcbiAqKi9cbkluZmxhdGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoZGF0YSwgZmx1c2hfbW9kZSkge1xuICBjb25zdCBzdHJtID0gdGhpcy5zdHJtO1xuICBjb25zdCBjaHVua1NpemUgPSB0aGlzLm9wdGlvbnMuY2h1bmtTaXplO1xuICBjb25zdCBkaWN0aW9uYXJ5ID0gdGhpcy5vcHRpb25zLmRpY3Rpb25hcnk7XG4gIGxldCBzdGF0dXMsIF9mbHVzaF9tb2RlLCBsYXN0X2F2YWlsX291dDtcblxuICBpZiAodGhpcy5lbmRlZCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChmbHVzaF9tb2RlID09PSB+fmZsdXNoX21vZGUpIF9mbHVzaF9tb2RlID0gZmx1c2hfbW9kZTtcbiAgZWxzZSBfZmx1c2hfbW9kZSA9IGZsdXNoX21vZGUgPT09IHRydWUgPyBaX0ZJTklTSCA6IFpfTk9fRkxVU0g7XG5cbiAgLy8gQ29udmVydCBkYXRhIGlmIG5lZWRlZFxuICBpZiAodG9TdHJpbmcuY2FsbChkYXRhKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJykge1xuICAgIHN0cm0uaW5wdXQgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHJtLmlucHV0ID0gZGF0YTtcbiAgfVxuXG4gIHN0cm0ubmV4dF9pbiA9IDA7XG4gIHN0cm0uYXZhaWxfaW4gPSBzdHJtLmlucHV0Lmxlbmd0aDtcblxuICBmb3IgKDs7KSB7XG4gICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICBzdHJtLm91dHB1dCA9IG5ldyBVaW50OEFycmF5KGNodW5rU2l6ZSk7XG4gICAgICBzdHJtLm5leHRfb3V0ID0gMDtcbiAgICAgIHN0cm0uYXZhaWxfb3V0ID0gY2h1bmtTaXplO1xuICAgIH1cblxuICAgIHN0YXR1cyA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlKHN0cm0sIF9mbHVzaF9tb2RlKTtcblxuICAgIGlmIChzdGF0dXMgPT09IFpfTkVFRF9ESUNUICYmIGRpY3Rpb25hcnkpIHtcbiAgICAgIHN0YXR1cyA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlU2V0RGljdGlvbmFyeShzdHJtLCBkaWN0aW9uYXJ5KTtcblxuICAgICAgaWYgKHN0YXR1cyA9PT0gWl9PSykge1xuICAgICAgICBzdGF0dXMgPSB6bGliX2luZmxhdGUuaW5mbGF0ZShzdHJtLCBfZmx1c2hfbW9kZSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gWl9EQVRBX0VSUk9SKSB7XG4gICAgICAgIC8vIFJlcGxhY2UgY29kZSB3aXRoIG1vcmUgdmVyYm9zZVxuICAgICAgICBzdGF0dXMgPSBaX05FRURfRElDVDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTa2lwIHNueWMgbWFya2VycyBpZiBtb3JlIGRhdGEgZm9sbG93cyBhbmQgbm90IHJhdyBtb2RlXG4gICAgd2hpbGUgKHN0cm0uYXZhaWxfaW4gPiAwICYmXG4gICAgICAgICAgIHN0YXR1cyA9PT0gWl9TVFJFQU1fRU5EICYmXG4gICAgICAgICAgIHN0cm0uc3RhdGUud3JhcCA+IDAgJiZcbiAgICAgICAgICAgZGF0YVtzdHJtLm5leHRfaW5dICE9PSAwKVxuICAgIHtcbiAgICAgIHpsaWJfaW5mbGF0ZS5pbmZsYXRlUmVzZXQoc3RybSk7XG4gICAgICBzdGF0dXMgPSB6bGliX2luZmxhdGUuaW5mbGF0ZShzdHJtLCBfZmx1c2hfbW9kZSk7XG4gICAgfVxuXG4gICAgc3dpdGNoIChzdGF0dXMpIHtcbiAgICAgIGNhc2UgWl9TVFJFQU1fRVJST1I6XG4gICAgICBjYXNlIFpfREFUQV9FUlJPUjpcbiAgICAgIGNhc2UgWl9ORUVEX0RJQ1Q6XG4gICAgICBjYXNlIFpfTUVNX0VSUk9SOlxuICAgICAgICB0aGlzLm9uRW5kKHN0YXR1cyk7XG4gICAgICAgIHRoaXMuZW5kZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gUmVtZW1iZXIgcmVhbCBgYXZhaWxfb3V0YCB2YWx1ZSwgYmVjYXVzZSB3ZSBtYXkgcGF0Y2ggb3V0IGJ1ZmZlciBjb250ZW50XG4gICAgLy8gdG8gYWxpZ24gdXRmOCBzdHJpbmdzIGJvdW5kYXJpZXMuXG4gICAgbGFzdF9hdmFpbF9vdXQgPSBzdHJtLmF2YWlsX291dDtcblxuICAgIGlmIChzdHJtLm5leHRfb3V0KSB7XG4gICAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDAgfHwgc3RhdHVzID09PSBaX1NUUkVBTV9FTkQpIHtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRvID09PSAnc3RyaW5nJykge1xuXG4gICAgICAgICAgbGV0IG5leHRfb3V0X3V0ZjggPSBzdHJpbmdzLnV0Zjhib3JkZXIoc3RybS5vdXRwdXQsIHN0cm0ubmV4dF9vdXQpO1xuXG4gICAgICAgICAgbGV0IHRhaWwgPSBzdHJtLm5leHRfb3V0IC0gbmV4dF9vdXRfdXRmODtcbiAgICAgICAgICBsZXQgdXRmOHN0ciA9IHN0cmluZ3MuYnVmMnN0cmluZyhzdHJtLm91dHB1dCwgbmV4dF9vdXRfdXRmOCk7XG5cbiAgICAgICAgICAvLyBtb3ZlIHRhaWwgJiByZWFsaWduIGNvdW50ZXJzXG4gICAgICAgICAgc3RybS5uZXh0X291dCA9IHRhaWw7XG4gICAgICAgICAgc3RybS5hdmFpbF9vdXQgPSBjaHVua1NpemUgLSB0YWlsO1xuICAgICAgICAgIGlmICh0YWlsKSBzdHJtLm91dHB1dC5zZXQoc3RybS5vdXRwdXQuc3ViYXJyYXkobmV4dF9vdXRfdXRmOCwgbmV4dF9vdXRfdXRmOCArIHRhaWwpLCAwKTtcblxuICAgICAgICAgIHRoaXMub25EYXRhKHV0ZjhzdHIpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5vbkRhdGEoc3RybS5vdXRwdXQubGVuZ3RoID09PSBzdHJtLm5leHRfb3V0ID8gc3RybS5vdXRwdXQgOiBzdHJtLm91dHB1dC5zdWJhcnJheSgwLCBzdHJtLm5leHRfb3V0KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNdXN0IHJlcGVhdCBpdGVyYXRpb24gaWYgb3V0IGJ1ZmZlciBpcyBmdWxsXG4gICAgaWYgKHN0YXR1cyA9PT0gWl9PSyAmJiBsYXN0X2F2YWlsX291dCA9PT0gMCkgY29udGludWU7XG5cbiAgICAvLyBGaW5hbGl6ZSBpZiBlbmQgb2Ygc3RyZWFtIHJlYWNoZWQuXG4gICAgaWYgKHN0YXR1cyA9PT0gWl9TVFJFQU1fRU5EKSB7XG4gICAgICBzdGF0dXMgPSB6bGliX2luZmxhdGUuaW5mbGF0ZUVuZCh0aGlzLnN0cm0pO1xuICAgICAgdGhpcy5vbkVuZChzdGF0dXMpO1xuICAgICAgdGhpcy5lbmRlZCA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoc3RybS5hdmFpbF9pbiA9PT0gMCkgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cblxuLyoqXG4gKiBJbmZsYXRlI29uRGF0YShjaHVuaykgLT4gVm9pZFxuICogLSBjaHVuayAoVWludDhBcnJheXxTdHJpbmcpOiBvdXRwdXQgZGF0YS4gV2hlbiBzdHJpbmcgb3V0cHV0IHJlcXVlc3RlZCxcbiAqICAgZWFjaCBjaHVuayB3aWxsIGJlIHN0cmluZy5cbiAqXG4gKiBCeSBkZWZhdWx0LCBzdG9yZXMgZGF0YSBibG9ja3MgaW4gYGNodW5rc1tdYCBwcm9wZXJ0eSBhbmQgZ2x1ZVxuICogdGhvc2UgaW4gYG9uRW5kYC4gT3ZlcnJpZGUgdGhpcyBoYW5kbGVyLCBpZiB5b3UgbmVlZCBhbm90aGVyIGJlaGF2aW91ci5cbiAqKi9cbkluZmxhdGUucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICB0aGlzLmNodW5rcy5wdXNoKGNodW5rKTtcbn07XG5cblxuLyoqXG4gKiBJbmZsYXRlI29uRW5kKHN0YXR1cykgLT4gVm9pZFxuICogLSBzdGF0dXMgKE51bWJlcik6IGluZmxhdGUgc3RhdHVzLiAwIChaX09LKSBvbiBzdWNjZXNzLFxuICogICBvdGhlciBpZiBub3QuXG4gKlxuICogQ2FsbGVkIGVpdGhlciBhZnRlciB5b3UgdGVsbCBpbmZsYXRlIHRoYXQgdGhlIGlucHV0IHN0cmVhbSBpc1xuICogY29tcGxldGUgKFpfRklOSVNIKS4gQnkgZGVmYXVsdCAtIGpvaW4gY29sbGVjdGVkIGNodW5rcyxcbiAqIGZyZWUgbWVtb3J5IGFuZCBmaWxsIGByZXN1bHRzYCAvIGBlcnJgIHByb3BlcnRpZXMuXG4gKiovXG5JbmZsYXRlLnByb3RvdHlwZS5vbkVuZCA9IGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgLy8gT24gc3VjY2VzcyAtIGpvaW5cbiAgaWYgKHN0YXR1cyA9PT0gWl9PSykge1xuICAgIGlmICh0aGlzLm9wdGlvbnMudG8gPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLnJlc3VsdCA9IHRoaXMuY2h1bmtzLmpvaW4oJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlc3VsdCA9IHV0aWxzLmZsYXR0ZW5DaHVua3ModGhpcy5jaHVua3MpO1xuICAgIH1cbiAgfVxuICB0aGlzLmNodW5rcyA9IFtdO1xuICB0aGlzLmVyciA9IHN0YXR1cztcbiAgdGhpcy5tc2cgPSB0aGlzLnN0cm0ubXNnO1xufTtcblxuXG4vKipcbiAqIGluZmxhdGUoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5fFN0cmluZ1xuICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5QnVmZmVyKTogaW5wdXQgZGF0YSB0byBkZWNvbXByZXNzLlxuICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGluZmxhdGUgb3B0aW9ucy5cbiAqXG4gKiBEZWNvbXByZXNzIGBkYXRhYCB3aXRoIGluZmxhdGUvdW5nemlwIGFuZCBgb3B0aW9uc2AuIEF1dG9kZXRlY3RcbiAqIGZvcm1hdCB2aWEgd3JhcHBlciBoZWFkZXIgYnkgZGVmYXVsdC4gVGhhdCdzIHdoeSB3ZSBkb24ndCBwcm92aWRlXG4gKiBzZXBhcmF0ZSBgdW5nemlwYCBtZXRob2QuXG4gKlxuICogU3VwcG9ydGVkIG9wdGlvbnMgYXJlOlxuICpcbiAqIC0gd2luZG93Qml0c1xuICpcbiAqIFtodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWRdKGh0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZClcbiAqIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIFN1Z2FyIChvcHRpb25zKTpcbiAqXG4gKiAtIGByYXdgIChCb29sZWFuKSAtIHNheSB0aGF0IHdlIHdvcmsgd2l0aCByYXcgc3RyZWFtLCBpZiB5b3UgZG9uJ3Qgd2lzaCB0byBzcGVjaWZ5XG4gKiAgIG5lZ2F0aXZlIHdpbmRvd0JpdHMgaW1wbGljaXRseS5cbiAqIC0gYHRvYCAoU3RyaW5nKSAtIGlmIGVxdWFsIHRvICdzdHJpbmcnLCB0aGVuIHJlc3VsdCB3aWxsIGJlIGNvbnZlcnRlZFxuICogICBmcm9tIHV0ZjggdG8gdXRmMTYgKGphdmFzY3JpcHQpIHN0cmluZy4gV2hlbiBzdHJpbmcgb3V0cHV0IHJlcXVlc3RlZCxcbiAqICAgY2h1bmsgbGVuZ3RoIGNhbiBkaWZmZXIgZnJvbSBgY2h1bmtTaXplYCwgZGVwZW5kaW5nIG9uIGNvbnRlbnQuXG4gKlxuICpcbiAqICMjIyMjIEV4YW1wbGU6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgcGFrbyA9IHJlcXVpcmUoJ3Bha28nKTtcbiAqIGNvbnN0IGlucHV0ID0gcGFrby5kZWZsYXRlKG5ldyBVaW50OEFycmF5KFsxLDIsMyw0LDUsNiw3LDgsOV0pKTtcbiAqIGxldCBvdXRwdXQ7XG4gKlxuICogdHJ5IHtcbiAqICAgb3V0cHV0ID0gcGFrby5pbmZsYXRlKGlucHV0KTtcbiAqIH0gY2F0Y2ggKGVycikge1xuICogICBjb25zb2xlLmxvZyhlcnIpO1xuICogfVxuICogYGBgXG4gKiovXG5mdW5jdGlvbiBpbmZsYXRlKGlucHV0LCBvcHRpb25zKSB7XG4gIGNvbnN0IGluZmxhdG9yID0gbmV3IEluZmxhdGUob3B0aW9ucyk7XG5cbiAgaW5mbGF0b3IucHVzaChpbnB1dCk7XG5cbiAgLy8gVGhhdCB3aWxsIG5ldmVyIGhhcHBlbnMsIGlmIHlvdSBkb24ndCBjaGVhdCB3aXRoIG9wdGlvbnMgOilcbiAgaWYgKGluZmxhdG9yLmVycikgdGhyb3cgaW5mbGF0b3IubXNnIHx8IG1zZ1tpbmZsYXRvci5lcnJdO1xuXG4gIHJldHVybiBpbmZsYXRvci5yZXN1bHQ7XG59XG5cblxuLyoqXG4gKiBpbmZsYXRlUmF3KGRhdGFbLCBvcHRpb25zXSkgLT4gVWludDhBcnJheXxTdHJpbmdcbiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheUJ1ZmZlcik6IGlucHV0IGRhdGEgdG8gZGVjb21wcmVzcy5cbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBpbmZsYXRlIG9wdGlvbnMuXG4gKlxuICogVGhlIHNhbWUgYXMgW1tpbmZsYXRlXV0sIGJ1dCBjcmVhdGVzIHJhdyBkYXRhLCB3aXRob3V0IHdyYXBwZXJcbiAqIChoZWFkZXIgYW5kIGFkbGVyMzIgY3JjKS5cbiAqKi9cbmZ1bmN0aW9uIGluZmxhdGVSYXcoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMucmF3ID0gdHJ1ZTtcbiAgcmV0dXJuIGluZmxhdGUoaW5wdXQsIG9wdGlvbnMpO1xufVxuXG5cbi8qKlxuICogdW5nemlwKGRhdGFbLCBvcHRpb25zXSkgLT4gVWludDhBcnJheXxTdHJpbmdcbiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheUJ1ZmZlcik6IGlucHV0IGRhdGEgdG8gZGVjb21wcmVzcy5cbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBpbmZsYXRlIG9wdGlvbnMuXG4gKlxuICogSnVzdCBzaG9ydGN1dCB0byBbW2luZmxhdGVdXSwgYmVjYXVzZSBpdCBhdXRvZGV0ZWN0cyBmb3JtYXRcbiAqIGJ5IGhlYWRlci5jb250ZW50LiBEb25lIGZvciBjb252ZW5pZW5jZS5cbiAqKi9cblxuXG5tb2R1bGUuZXhwb3J0cy5JbmZsYXRlID0gSW5mbGF0ZTtcbm1vZHVsZS5leHBvcnRzLmluZmxhdGUgPSBpbmZsYXRlO1xubW9kdWxlLmV4cG9ydHMuaW5mbGF0ZVJhdyA9IGluZmxhdGVSYXc7XG5tb2R1bGUuZXhwb3J0cy51bmd6aXAgPSBpbmZsYXRlO1xubW9kdWxlLmV4cG9ydHMuY29uc3RhbnRzID0gcmVxdWlyZSgnLi96bGliL2NvbnN0YW50cycpO1xuIiwiLy8gVG9wIGxldmVsIGZpbGUgaXMganVzdCBhIG1peGluIG9mIHN1Ym1vZHVsZXMgJiBjb25zdGFudHNcbid1c2Ugc3RyaWN0JztcblxuY29uc3QgeyBEZWZsYXRlLCBkZWZsYXRlLCBkZWZsYXRlUmF3LCBnemlwIH0gPSByZXF1aXJlKCcuL2xpYi9kZWZsYXRlJyk7XG5cbmNvbnN0IHsgSW5mbGF0ZSwgaW5mbGF0ZSwgaW5mbGF0ZVJhdywgdW5nemlwIH0gPSByZXF1aXJlKCcuL2xpYi9pbmZsYXRlJyk7XG5cbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4vbGliL3psaWIvY29uc3RhbnRzJyk7XG5cbm1vZHVsZS5leHBvcnRzLkRlZmxhdGUgPSBEZWZsYXRlO1xubW9kdWxlLmV4cG9ydHMuZGVmbGF0ZSA9IGRlZmxhdGU7XG5tb2R1bGUuZXhwb3J0cy5kZWZsYXRlUmF3ID0gZGVmbGF0ZVJhdztcbm1vZHVsZS5leHBvcnRzLmd6aXAgPSBnemlwO1xubW9kdWxlLmV4cG9ydHMuSW5mbGF0ZSA9IEluZmxhdGU7XG5tb2R1bGUuZXhwb3J0cy5pbmZsYXRlID0gaW5mbGF0ZTtcbm1vZHVsZS5leHBvcnRzLmluZmxhdGVSYXcgPSBpbmZsYXRlUmF3O1xubW9kdWxlLmV4cG9ydHMudW5nemlwID0gdW5nemlwO1xubW9kdWxlLmV4cG9ydHMuY29uc3RhbnRzID0gY29uc3RhbnRzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLklPID0gZXhwb3J0cy5CaXRJTyA9IHZvaWQgMDtcbmNvbnN0IElPX0RFRkFVTFRfRVhQRUNURURfTEVOR1RIID0gMTAyNDtcbmNvbnN0IElPX0VYUEVDVF9FWFRSQV9TSVpFID0gMTAyNDtcbmNsYXNzIEJhc2VJTyB7XG4gIGxlbmd0aCA9IDA7XG4gIF9wb2ludGVyID0gMDtcbiAgc2V0IHBvaW50ZXIocG9pbnRlcikge1xuICAgIGlmIChwb2ludGVyID4gdGhpcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubGVuZ3RoID0gcG9pbnRlcjtcbiAgICB9XG4gICAgdGhpcy5fcG9pbnRlciA9IHBvaW50ZXI7XG4gIH1cbiAgZ2V0IHBvaW50ZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BvaW50ZXI7XG4gIH1cbiAgZ2V0IHZpZXcoKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRhVmlldyh0aGlzLmJ1ZmZlcik7XG4gIH1cbiAgY29uc3RydWN0b3IoYSA9IElPX0RFRkFVTFRfRVhQRUNURURfTEVOR1RIKSB7XG4gICAgaWYgKHR5cGVvZiBhID09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgICB0aGlzLmJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sZW5ndGggPSBhLmJ5dGVMZW5ndGg7XG4gICAgICB0aGlzLmJ1ZmZlciA9IGE7XG4gICAgfVxuICB9XG5cbiAgLyoqIFRoZSBmaW5hbCBvdXRwdXQgb2Ygd3JpdHRlbiBkYXRhLiAqL1xuICBmaW5hbCgpIHtcbiAgICByZXR1cm4gdGhpcy5idWZmZXIuc2xpY2UoMCwgdGhpcy5sZW5ndGgpO1xuICB9XG5cbiAgLyoqIEV4cGFuZCBidWZmZXIgc2l6ZSB0byBudW1iZXIgb2YgYnl0ZXMgcGFzdCBwb2ludGVyIGlmIG5lZWRlZC4gKi9cbiAgZXhwZWN0KGJ5dGVzKSB7XG4gICAgaWYgKHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGggPCB0aGlzLnBvaW50ZXIgKyBieXRlcykge1xuICAgICAgY29uc3QgZXhwYW5kZWQgPSBuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoICsgYnl0ZXMgKyBJT19FWFBFQ1RfRVhUUkFfU0laRSk7XG4gICAgICBleHBhbmRlZC5zZXQobmV3IFVpbnQ4QXJyYXkodGhpcy5idWZmZXIpLCAwKTtcbiAgICAgIHRoaXMuYnVmZmVyID0gZXhwYW5kZWQuYnVmZmVyO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgSU8gZXh0ZW5kcyBCYXNlSU8ge1xuICBnZXRCeXRlKCkge1xuICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0VWludDgodGhpcy5wb2ludGVyKyspO1xuICB9XG4gIGdldEJ1ZmZlcihsZW5ndGgpIHtcbiAgICBjb25zdCBzbGljZSA9IHRoaXMuYnVmZmVyLnNsaWNlKHRoaXMucG9pbnRlciwgdGhpcy5wb2ludGVyICsgbGVuZ3RoKTtcbiAgICB0aGlzLnBvaW50ZXIgKz0gbGVuZ3RoO1xuICAgIHJldHVybiBzbGljZTtcbiAgfVxuICBwdXRCeXRlKGJ5dGUpIHtcbiAgICB0aGlzLmV4cGVjdCgxKTtcbiAgICB0aGlzLnZpZXcuc2V0VWludDgodGhpcy5wb2ludGVyKyssIGJ5dGUpO1xuICB9XG4gIHB1dEJ1ZmZlcihidWZmZXIpIHtcbiAgICB0aGlzLmV4cGVjdChidWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgbmV3IFVpbnQ4QXJyYXkodGhpcy5idWZmZXIpLnNldChuZXcgVWludDhBcnJheShidWZmZXIpLCB0aGlzLnBvaW50ZXIpO1xuICAgIHRoaXMucG9pbnRlciArPSBidWZmZXIuYnl0ZUxlbmd0aDtcbiAgfVxuICB3aXRoaG9sZEJ5dGUoKSB7XG4gICAgY29uc3QgcG9pbnRlciA9IHRoaXMucG9pbnRlcisrO1xuICAgIHJldHVybiBieXRlID0+IHRoaXMudmlldy5zZXRVaW50OChwb2ludGVyLCBieXRlKTtcbiAgfVxufVxuZXhwb3J0cy5JTyA9IElPO1xuY2xhc3MgQml0SU8gZXh0ZW5kcyBCYXNlSU8ge1xuICBzZXQgcG9pbnRlcihwb2ludGVyKSB7XG4gICAgdGhpcy5fYml0UG9pbnRlciA9IDA7XG4gICAgc3VwZXIucG9pbnRlciA9IHBvaW50ZXI7XG4gIH1cbiAgZ2V0IHBvaW50ZXIoKSB7XG4gICAgcmV0dXJuIHN1cGVyLnBvaW50ZXI7XG4gIH1cbiAgX2JpdFBvaW50ZXIgPSAwO1xuICBzZXQgYml0UG9pbnRlcihiaXRQb2ludGVyKSB7XG4gICAgaWYgKGJpdFBvaW50ZXIgPCA4KSB7XG4gICAgICB0aGlzLl9iaXRQb2ludGVyID0gYml0UG9pbnRlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wb2ludGVyICs9IGJpdFBvaW50ZXIgPj4gMztcbiAgICAgIHRoaXMuX2JpdFBvaW50ZXIgPSBiaXRQb2ludGVyICYgMGIxMTE7XG4gICAgfVxuICB9XG4gIGdldCBiaXRQb2ludGVyKCkge1xuICAgIHJldHVybiB0aGlzLl9iaXRQb2ludGVyO1xuICB9XG4gIGZsdXNoKCkge1xuICAgIGlmICh0aGlzLmJpdFBvaW50ZXIgPT0gMCkgcmV0dXJuO1xuICAgIHRoaXMuYml0UG9pbnRlciA9IDA7XG4gICAgdGhpcy5wb2ludGVyKys7XG4gIH1cbiAgZmluYWwoKSB7XG4gICAgdGhpcy5mbHVzaCgpO1xuICAgIHJldHVybiBzdXBlci5maW5hbCgpO1xuICB9XG4gIHB1dEJpdChzZXQpIHtcbiAgICB0aGlzLmV4cGVjdCgxKTtcbiAgICAvLyBGSVhNRTogVGhpcyBkb2VzIG5vdCBvdmVyd3JpdGUgYW55IGFscmVhZHkgc2V0IGJpdHMuXG4gICAgdGhpcy52aWV3LnNldFVpbnQ4KHRoaXMucG9pbnRlciwgdGhpcy52aWV3LmdldFVpbnQ4KHRoaXMucG9pbnRlcikgfCAoc2V0ID8gMSA6IDApIDw8IHRoaXMuYml0UG9pbnRlcisrKTtcbiAgfVxuICBnZXRCaXQoKSB7XG4gICAgcmV0dXJuIHRoaXMudmlldy5nZXRVaW50OCh0aGlzLnBvaW50ZXIpICYgMSA8PCB0aGlzLmJpdFBvaW50ZXIrKyA/IHRydWUgOiBmYWxzZTtcbiAgfVxuICBwdXRCaXRzKHZhbHVlLCBudW1CaXRzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1CaXRzOyBpKyspIHtcbiAgICAgIHRoaXMucHV0Qml0KHZhbHVlID4+IGkgJiAwYjEgPyB0cnVlIDogZmFsc2UpO1xuICAgIH1cbiAgfVxuICBnZXRCaXRzKG51bUJpdHMpIHtcbiAgICBsZXQgdmFsdWUgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQml0czsgaSsrKSB7XG4gICAgICB2YWx1ZSB8PSAodGhpcy5nZXRCaXQoKSA/IDEgOiAwKSA8PCBpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbmV4cG9ydHMuQml0SU8gPSBCaXRJTzsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVjb2RlQmlnSW50ID0gZGVjb2RlQmlnSW50O1xuZXhwb3J0cy5kZWNvZGVJbmRleCA9IGRlY29kZUluZGV4O1xuZXhwb3J0cy5lbmNvZGVCaWdJbnQgPSBlbmNvZGVCaWdJbnQ7XG5leHBvcnRzLmVuY29kZUluZGV4ID0gZW5jb2RlSW5kZXg7XG5leHBvcnRzLmhhc2hTdHIgPSBoYXNoU3RyO1xuZXhwb3J0cy5oZXggPSBoZXg7XG5leHBvcnRzLnN0cmluZ1NvcnQgPSBzdHJpbmdTb3J0O1xuZnVuY3Rpb24gaGFzaFN0cihzdHIpIHtcbiAgbGV0IGhhc2ggPSA1MzgxO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGhhc2ggPSAoaGFzaCA8PCA1KSArIGhhc2ggXiBzdHIuY2hhckNvZGVBdChpKTtcbiAgfVxuICByZXR1cm4gaGFzaCA+Pj4gMDtcbn1cbmZ1bmN0aW9uIGhleCh2YWx1ZSwgYnl0ZUxlbmd0aCwgc3RhcnQgPSAnMHgnKSB7XG4gIHJldHVybiBzdGFydCArIHZhbHVlLnRvU3RyaW5nKDE2KS5wYWRTdGFydChieXRlTGVuZ3RoICogMiwgJzAnKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ1NvcnQoYSwgYikge1xuICByZXR1cm4gKGEgPiBiID8gMSA6IDApIC0gKGEgPCBiID8gMSA6IDApO1xufVxuXG4vLyBcbi8vIEJpZ0ludCBlbmNvZGluZyBpcyBhcyBmb2xsb3dzOlxuLy8gXG4vLyBVTlNJR05FRDogMGJOTk5OTk5OWFtuXVxuLy8gU0lHTkVEOiAgIDBiTk5OTk5OU1hbMF0sIDBiTk5OTk5OTlhbbl1cbi8vIFxuLy8gV2hlcmUgWCBpcyBleHRlbnNpb24gYml0LCBpZiB0aGlzIGlzIHNldCB0aGVyZSBpcyBhbm90aGVyIGJ5dGUgaW4gdGhlIGFycmF5LlxuLy8gV2hlcmUgTiBpcyB0aGUgdW5kZXJseWluZyBudW1iZXIgYml0cyB0aGF0IGlzIGRpcmVjdGx5IHNldCBpbiB0aGUgYmlnaW50IG51bWJlci5cbi8vIFdoZXJlIFMgaXMgdGhlIHNpZ25lZG5lc3Mgb2YgdGhlIGJpZ2ludC5cbi8vIFxuLy8gV0FSTklORzogVGhpcyBlbmNvZGluZyBvZiBiaWdpbnQgYWxsb3dzIGZvciAtMCB0byBleGlzdC5cbi8vIFRPRE86IE1ha2UgZmxhZyBiaXRzIHRoZSBtb3N0IHNpZ25pZmljYW50IGJpdHMgaW5zdGVhZCBvZiBsZWFzdC5cbi8vIFxuXG5mdW5jdGlvbiBlbmNvZGVCaWdJbnQodmFsdWUsIHNpZ25lZCwgaW8pIHtcbiAgY29uc3QgbmVnYXRpdmUgPSB2YWx1ZSA8IDBuO1xuICBpZiAobmVnYXRpdmUpIHtcbiAgICBpZiAoIXNpZ25lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZW5jb2RlIG5lZ2F0aXZlIGJpZ2ludCB3aGVuIHBhcnNlciBpcyBub3Qgc2lnbmVkLicpO1xuICAgIH1cbiAgICB2YWx1ZSA9IC12YWx1ZTtcbiAgfVxuXG4gIC8vIEVuY29kZSBmaXJzdCBieXRlXG4gIGlmICghc2lnbmVkKSB7XG4gICAgaW8ucHV0Qnl0ZShOdW1iZXIoKHZhbHVlICYgMGIwMTExMTExMW4pIDw8IDFuKSB8ICh2YWx1ZSA+IDBiMDExMTExMTFuID8gMGIwMDAwMDAwMSA6IDBiMDAwMDAwMDApKTtcbiAgICB2YWx1ZSA+Pj0gN247XG4gIH0gZWxzZSB7XG4gICAgaW8ucHV0Qnl0ZShOdW1iZXIoKHZhbHVlICYgMGIwMDExMTExMW4pIDw8IDJuKSB8IChuZWdhdGl2ZSA/IDBiMDAwMDAwMTAgOiAwYjAwMDAwMDAwKSB8ICh2YWx1ZSA+IDBiMDAxMTExMTFuID8gMGIwMDAwMDAwMSA6IDBiMDAwMDAwMDApKTtcbiAgICB2YWx1ZSA+Pj0gNm47XG4gIH1cblxuICAvLyBFbmNvZGUgcmVzdCBieXRlc1xuICB3aGlsZSAodmFsdWUgPiAwbikge1xuICAgIGlvLnB1dEJ5dGUoTnVtYmVyKCh2YWx1ZSAmIDBiMDExMTExMTFuKSA8PCAxbikgfCAodmFsdWUgPiAwYjAxMTExMTExbiA/IDBiMDAwMDAwMDEgOiAwYjAwMDAwMDAwKSk7XG4gICAgdmFsdWUgPj49IDduO1xuICB9XG59XG5mdW5jdGlvbiBkZWNvZGVCaWdJbnQoc2lnbmVkLCBpbykge1xuICAvLyBEZWNvZGUgZmlyc3QgYnl0ZVxuICBsZXQgYnl0ZSA9IGlvLmdldEJ5dGUoKTtcbiAgbGV0IHZhbHVlID0gIXNpZ25lZCA/IEJpZ0ludChieXRlICYgMGIxMTExMTExMCkgPj4gMW4gOiBCaWdJbnQoYnl0ZSAmIDBiMTExMTExMDApID4+IDJuO1xuICBjb25zdCBuZWdhdGl2ZSA9ICFzaWduZWQgPyBmYWxzZSA6IGJ5dGUgJiAwYjAwMDAwMDEwID8gdHJ1ZSA6IGZhbHNlO1xuICBsZXQgc2hpZnQgPSAhc2lnbmVkID8gNyA6IDY7XG5cbiAgLy8gRGVjb2RlIHJlc3QgYnl0ZXNcbiAgd2hpbGUgKGJ5dGUgJiAwYjAwMDAwMDAxKSB7XG4gICAgYnl0ZSA9IGlvLmdldEJ5dGUoKTtcbiAgICB2YWx1ZSB8PSBCaWdJbnQoKGJ5dGUgJiAwYjExMTExMTEwKSA+PiAxKSA8PCBCaWdJbnQoc2hpZnQpO1xuICAgIHNoaWZ0ICs9IDc7XG4gIH1cbiAgcmV0dXJuICFuZWdhdGl2ZSA/IHZhbHVlIDogLXZhbHVlO1xufVxuXG4vLyBcbi8vIEVuY29kZSBhbiBpbmRleCBpbnRvIGEgc21hbGwgc2l6ZS5cbi8vIElmIGxlbmd0aCBpcyAwLCB1c2VzIDAgYml0cy5cbi8vIElmIGxlbmd0aCBpcyAxLCB1c2VzIDAgYml0cy5cbi8vIElmIGxlbmd0aCBpcyAyLCB1c2VzIDEgYml0LlxuLy8gaWYgbGVuZ3RoID4gMiwgdXNlcyBtdWx0aXBsZSBieXRlcy5cbi8vIFxuXG5mdW5jdGlvbiBlbmNvZGVJbmRleChjdHgsIGluZGV4LCBsZW5ndGgpIHtcbiAgaWYgKGxlbmd0aCA8IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0VuY29kZUluZGV4IGludmFsaWQgbGVuZ3RoLicpO1xuICB9XG4gIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFbmNvZGVJbmRleCBvdXQgb2YgYm91bmRzLicpO1xuICB9XG4gIGlmIChsZW5ndGggPD0gMSkgcmV0dXJuO1xuICBpZiAobGVuZ3RoID09IDIpIHtcbiAgICBjdHguYml0RmllbGQucHV0Qml0KGluZGV4ID09PSAxKTtcbiAgICByZXR1cm47XG4gIH1cbiAgZW5jb2RlQmlnSW50KEJpZ0ludChpbmRleCksIGZhbHNlLCBjdHguYm9keSk7XG59XG5mdW5jdGlvbiBkZWNvZGVJbmRleChjdHgsIGxlbmd0aCkge1xuICBpZiAobGVuZ3RoIDwgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignRGVjb2RlSW5kZXggaW52YWxpZCBsZW5ndGguJyk7XG4gIH1cbiAgbGV0IGluZGV4O1xuICBpZiAobGVuZ3RoIDw9IDEpIHtcbiAgICBpbmRleCA9IDA7XG4gIH0gZWxzZSBpZiAobGVuZ3RoID09IDIpIHtcbiAgICBpbmRleCA9IGN0eC5iaXRGaWVsZC5nZXRCaXQoKSA/IDEgOiAwO1xuICB9IGVsc2Uge1xuICAgIGluZGV4ID0gTnVtYmVyKGRlY29kZUJpZ0ludChmYWxzZSwgY3R4LmJvZHkpKTtcbiAgfVxuICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignRGVjb2RlSW5kZXggb3V0IG9mIGJvdW5kcy4nKTtcbiAgfVxuICByZXR1cm4gaW5kZXg7XG59IiwiLy9cbi8vIFRISVMgRklMRSBJUyBBVVRPTUFUSUNBTExZIEdFTkVSQVRFRCEgRE8gTk9UIEVESVQgQlkgSEFORCFcbi8vXG47XG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpXG4gICAgICAgIDogdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kXG4gICAgICAgICAgICA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgICAgICAgICAvLyBjZi4gaHR0cHM6Ly9naXRodWIuY29tL2RhbmtvZ2FpL2pzLWJhc2U2NC9pc3N1ZXMvMTE5XG4gICAgICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIGV4aXN0aW5nIHZlcnNpb24gZm9yIG5vQ29uZmxpY3QoKVxuICAgICAgICAgICAgICAgIHZhciBfQmFzZTY0ID0gZ2xvYmFsLkJhc2U2NDtcbiAgICAgICAgICAgICAgICB2YXIgZ0Jhc2U2NCA9IGZhY3RvcnkoKTtcbiAgICAgICAgICAgICAgICBnQmFzZTY0Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbC5CYXNlNjQgPSBfQmFzZTY0O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ0Jhc2U2NDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChnbG9iYWwuTWV0ZW9yKSB7IC8vIE1ldGVvci5qc1xuICAgICAgICAgICAgICAgICAgICBCYXNlNjQgPSBnQmFzZTY0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBnbG9iYWwuQmFzZTY0ID0gZ0Jhc2U2NDtcbiAgICAgICAgICAgIH0pKCk7XG59KCh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmXG4gICAgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvd1xuICAgICAgICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsXG4gICAgICAgICAgICA6IHRoaXMpLCBmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIC8qKlxuICAgICAqICBiYXNlNjQudHNcbiAgICAgKlxuICAgICAqICBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtQ2xhdXNlIExpY2Vuc2UuXG4gICAgICogICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICAgICAqXG4gICAgICogIFJlZmVyZW5jZXM6XG4gICAgICogICAgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjRcbiAgICAgKlxuICAgICAqIEBhdXRob3IgRGFuIEtvZ2FpIChodHRwczovL2dpdGh1Yi5jb20vZGFua29nYWkpXG4gICAgICovXG4gICAgdmFyIHZlcnNpb24gPSAnMy43LjcnO1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHVzZSBsb3dlcmNhc2UgYHZlcnNpb25gLlxuICAgICAqL1xuICAgIHZhciBWRVJTSU9OID0gdmVyc2lvbjtcbiAgICB2YXIgX2hhc0J1ZmZlciA9IHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbic7XG4gICAgdmFyIF9URCA9IHR5cGVvZiBUZXh0RGVjb2RlciA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBUZXh0RGVjb2RlcigpIDogdW5kZWZpbmVkO1xuICAgIHZhciBfVEUgPSB0eXBlb2YgVGV4dEVuY29kZXIgPT09ICdmdW5jdGlvbicgPyBuZXcgVGV4dEVuY29kZXIoKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgYjY0Y2ggPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nO1xuICAgIHZhciBiNjRjaHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChiNjRjaCk7XG4gICAgdmFyIGI2NHRhYiA9IChmdW5jdGlvbiAoYSkge1xuICAgICAgICB2YXIgdGFiID0ge307XG4gICAgICAgIGEuZm9yRWFjaChmdW5jdGlvbiAoYywgaSkgeyByZXR1cm4gdGFiW2NdID0gaTsgfSk7XG4gICAgICAgIHJldHVybiB0YWI7XG4gICAgfSkoYjY0Y2hzKTtcbiAgICB2YXIgYjY0cmUgPSAvXig/OltBLVphLXpcXGQrXFwvXXs0fSkqPyg/OltBLVphLXpcXGQrXFwvXXsyfSg/Oj09KT98W0EtWmEtelxcZCtcXC9dezN9PT8pPyQvO1xuICAgIHZhciBfZnJvbUNDID0gU3RyaW5nLmZyb21DaGFyQ29kZS5iaW5kKFN0cmluZyk7XG4gICAgdmFyIF9VOEFmcm9tID0gdHlwZW9mIFVpbnQ4QXJyYXkuZnJvbSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IFVpbnQ4QXJyYXkuZnJvbS5iaW5kKFVpbnQ4QXJyYXkpXG4gICAgICAgIDogZnVuY3Rpb24gKGl0KSB7IHJldHVybiBuZXcgVWludDhBcnJheShBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChpdCwgMCkpOyB9O1xuICAgIHZhciBfbWtVcmlTYWZlID0gZnVuY3Rpb24gKHNyYykgeyByZXR1cm4gc3JjXG4gICAgICAgIC5yZXBsYWNlKC89L2csICcnKS5yZXBsYWNlKC9bK1xcL10vZywgZnVuY3Rpb24gKG0wKSB7IHJldHVybiBtMCA9PSAnKycgPyAnLScgOiAnXyc7IH0pOyB9O1xuICAgIHZhciBfdGlkeUI2NCA9IGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnJlcGxhY2UoL1teQS1aYS16MC05XFwrXFwvXS9nLCAnJyk7IH07XG4gICAgLyoqXG4gICAgICogcG9seWZpbGwgdmVyc2lvbiBvZiBgYnRvYWBcbiAgICAgKi9cbiAgICB2YXIgYnRvYVBvbHlmaWxsID0gZnVuY3Rpb24gKGJpbikge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygncG9seWZpbGxlZCcpO1xuICAgICAgICB2YXIgdTMyLCBjMCwgYzEsIGMyLCBhc2MgPSAnJztcbiAgICAgICAgdmFyIHBhZCA9IGJpbi5sZW5ndGggJSAzO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJpbi5sZW5ndGg7KSB7XG4gICAgICAgICAgICBpZiAoKGMwID0gYmluLmNoYXJDb2RlQXQoaSsrKSkgPiAyNTUgfHxcbiAgICAgICAgICAgICAgICAoYzEgPSBiaW4uY2hhckNvZGVBdChpKyspKSA+IDI1NSB8fFxuICAgICAgICAgICAgICAgIChjMiA9IGJpbi5jaGFyQ29kZUF0KGkrKykpID4gMjU1KVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgY2hhcmFjdGVyIGZvdW5kJyk7XG4gICAgICAgICAgICB1MzIgPSAoYzAgPDwgMTYpIHwgKGMxIDw8IDgpIHwgYzI7XG4gICAgICAgICAgICBhc2MgKz0gYjY0Y2hzW3UzMiA+PiAxOCAmIDYzXVxuICAgICAgICAgICAgICAgICsgYjY0Y2hzW3UzMiA+PiAxMiAmIDYzXVxuICAgICAgICAgICAgICAgICsgYjY0Y2hzW3UzMiA+PiA2ICYgNjNdXG4gICAgICAgICAgICAgICAgKyBiNjRjaHNbdTMyICYgNjNdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYWQgPyBhc2Muc2xpY2UoMCwgcGFkIC0gMykgKyBcIj09PVwiLnN1YnN0cmluZyhwYWQpIDogYXNjO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogZG9lcyB3aGF0IGB3aW5kb3cuYnRvYWAgb2Ygd2ViIGJyb3dzZXJzIGRvLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBiaW4gYmluYXJ5IHN0cmluZ1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEJhc2U2NC1lbmNvZGVkIHN0cmluZ1xuICAgICAqL1xuICAgIHZhciBfYnRvYSA9IHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nID8gZnVuY3Rpb24gKGJpbikgeyByZXR1cm4gYnRvYShiaW4pOyB9XG4gICAgICAgIDogX2hhc0J1ZmZlciA/IGZ1bmN0aW9uIChiaW4pIHsgcmV0dXJuIEJ1ZmZlci5mcm9tKGJpbiwgJ2JpbmFyeScpLnRvU3RyaW5nKCdiYXNlNjQnKTsgfVxuICAgICAgICAgICAgOiBidG9hUG9seWZpbGw7XG4gICAgdmFyIF9mcm9tVWludDhBcnJheSA9IF9oYXNCdWZmZXJcbiAgICAgICAgPyBmdW5jdGlvbiAodThhKSB7IHJldHVybiBCdWZmZXIuZnJvbSh1OGEpLnRvU3RyaW5nKCdiYXNlNjQnKTsgfVxuICAgICAgICA6IGZ1bmN0aW9uICh1OGEpIHtcbiAgICAgICAgICAgIC8vIGNmLiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMjcxMDAwMS9ob3ctdG8tY29udmVydC11aW50OC1hcnJheS10by1iYXNlNjQtZW5jb2RlZC1zdHJpbmcvMTI3MTMzMjYjMTI3MTMzMjZcbiAgICAgICAgICAgIHZhciBtYXhhcmdzID0gMHgxMDAwO1xuICAgICAgICAgICAgdmFyIHN0cnMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdThhLmxlbmd0aDsgaSA8IGw7IGkgKz0gbWF4YXJncykge1xuICAgICAgICAgICAgICAgIHN0cnMucHVzaChfZnJvbUNDLmFwcGx5KG51bGwsIHU4YS5zdWJhcnJheShpLCBpICsgbWF4YXJncykpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfYnRvYShzdHJzLmpvaW4oJycpKTtcbiAgICAgICAgfTtcbiAgICAvKipcbiAgICAgKiBjb252ZXJ0cyBhIFVpbnQ4QXJyYXkgdG8gYSBCYXNlNjQgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VybHNhZmVdIFVSTC1hbmQtZmlsZW5hbWUtc2FmZSBhIGxhIFJGQzQ2NDggwqc1XG4gICAgICogQHJldHVybnMge3N0cmluZ30gQmFzZTY0IHN0cmluZ1xuICAgICAqL1xuICAgIHZhciBmcm9tVWludDhBcnJheSA9IGZ1bmN0aW9uICh1OGEsIHVybHNhZmUpIHtcbiAgICAgICAgaWYgKHVybHNhZmUgPT09IHZvaWQgMCkgeyB1cmxzYWZlID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIHVybHNhZmUgPyBfbWtVcmlTYWZlKF9mcm9tVWludDhBcnJheSh1OGEpKSA6IF9mcm9tVWludDhBcnJheSh1OGEpO1xuICAgIH07XG4gICAgLy8gVGhpcyB0cmljayBpcyBmb3VuZCBicm9rZW4gaHR0cHM6Ly9naXRodWIuY29tL2RhbmtvZ2FpL2pzLWJhc2U2NC9pc3N1ZXMvMTMwXG4gICAgLy8gY29uc3QgdXRvYiA9IChzcmM6IHN0cmluZykgPT4gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHNyYykpO1xuICAgIC8vIHJldmVydGluZyBnb29kIG9sZCBmYXRpb25lZCByZWdleHBcbiAgICB2YXIgY2JfdXRvYiA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIHZhciBjYyA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgIHJldHVybiBjYyA8IDB4ODAgPyBjXG4gICAgICAgICAgICAgICAgOiBjYyA8IDB4ODAwID8gKF9mcm9tQ0MoMHhjMCB8IChjYyA+Pj4gNikpXG4gICAgICAgICAgICAgICAgICAgICsgX2Zyb21DQygweDgwIHwgKGNjICYgMHgzZikpKVxuICAgICAgICAgICAgICAgICAgICA6IChfZnJvbUNDKDB4ZTAgfCAoKGNjID4+PiAxMikgJiAweDBmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICsgX2Zyb21DQygweDgwIHwgKChjYyA+Pj4gNikgJiAweDNmKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICsgX2Zyb21DQygweDgwIHwgKGNjICYgMHgzZikpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjYyA9IDB4MTAwMDBcbiAgICAgICAgICAgICAgICArIChjLmNoYXJDb2RlQXQoMCkgLSAweEQ4MDApICogMHg0MDBcbiAgICAgICAgICAgICAgICArIChjLmNoYXJDb2RlQXQoMSkgLSAweERDMDApO1xuICAgICAgICAgICAgcmV0dXJuIChfZnJvbUNDKDB4ZjAgfCAoKGNjID4+PiAxOCkgJiAweDA3KSlcbiAgICAgICAgICAgICAgICArIF9mcm9tQ0MoMHg4MCB8ICgoY2MgPj4+IDEyKSAmIDB4M2YpKVxuICAgICAgICAgICAgICAgICsgX2Zyb21DQygweDgwIHwgKChjYyA+Pj4gNikgJiAweDNmKSlcbiAgICAgICAgICAgICAgICArIF9mcm9tQ0MoMHg4MCB8IChjYyAmIDB4M2YpKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZV91dG9iID0gL1tcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRkZdfFteXFx4MDAtXFx4N0ZdL2c7XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgc2hvdWxkIGhhdmUgYmVlbiBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3JjIFVURi04IHN0cmluZ1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFVURi0xNiBzdHJpbmdcbiAgICAgKi9cbiAgICB2YXIgdXRvYiA9IGZ1bmN0aW9uICh1KSB7IHJldHVybiB1LnJlcGxhY2UocmVfdXRvYiwgY2JfdXRvYik7IH07XG4gICAgLy9cbiAgICB2YXIgX2VuY29kZSA9IF9oYXNCdWZmZXJcbiAgICAgICAgPyBmdW5jdGlvbiAocykgeyByZXR1cm4gQnVmZmVyLmZyb20ocywgJ3V0ZjgnKS50b1N0cmluZygnYmFzZTY0Jyk7IH1cbiAgICAgICAgOiBfVEVcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKHMpIHsgcmV0dXJuIF9mcm9tVWludDhBcnJheShfVEUuZW5jb2RlKHMpKTsgfVxuICAgICAgICAgICAgOiBmdW5jdGlvbiAocykgeyByZXR1cm4gX2J0b2EodXRvYihzKSk7IH07XG4gICAgLyoqXG4gICAgICogY29udmVydHMgYSBVVEYtOC1lbmNvZGVkIHN0cmluZyB0byBhIEJhc2U2NCBzdHJpbmcuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbdXJsc2FmZV0gaWYgYHRydWVgIG1ha2UgdGhlIHJlc3VsdCBVUkwtc2FmZVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEJhc2U2NCBzdHJpbmdcbiAgICAgKi9cbiAgICB2YXIgZW5jb2RlID0gZnVuY3Rpb24gKHNyYywgdXJsc2FmZSkge1xuICAgICAgICBpZiAodXJsc2FmZSA9PT0gdm9pZCAwKSB7IHVybHNhZmUgPSBmYWxzZTsgfVxuICAgICAgICByZXR1cm4gdXJsc2FmZVxuICAgICAgICAgICAgPyBfbWtVcmlTYWZlKF9lbmNvZGUoc3JjKSlcbiAgICAgICAgICAgIDogX2VuY29kZShzcmMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogY29udmVydHMgYSBVVEYtOC1lbmNvZGVkIHN0cmluZyB0byBVUkwtc2FmZSBCYXNlNjQgUkZDNDY0OCDCpzUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gQmFzZTY0IHN0cmluZ1xuICAgICAqL1xuICAgIHZhciBlbmNvZGVVUkkgPSBmdW5jdGlvbiAoc3JjKSB7IHJldHVybiBlbmNvZGUoc3JjLCB0cnVlKTsgfTtcbiAgICAvLyBUaGlzIHRyaWNrIGlzIGZvdW5kIGJyb2tlbiBodHRwczovL2dpdGh1Yi5jb20vZGFua29nYWkvanMtYmFzZTY0L2lzc3Vlcy8xMzBcbiAgICAvLyBjb25zdCBidG91ID0gKHNyYzogc3RyaW5nKSA9PiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKHNyYykpO1xuICAgIC8vIHJldmVydGluZyBnb29kIG9sZCBmYXRpb25lZCByZWdleHBcbiAgICB2YXIgcmVfYnRvdSA9IC9bXFx4QzAtXFx4REZdW1xceDgwLVxceEJGXXxbXFx4RTAtXFx4RUZdW1xceDgwLVxceEJGXXsyfXxbXFx4RjAtXFx4RjddW1xceDgwLVxceEJGXXszfS9nO1xuICAgIHZhciBjYl9idG91ID0gZnVuY3Rpb24gKGNjY2MpIHtcbiAgICAgICAgc3dpdGNoIChjY2NjLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHZhciBjcCA9ICgoMHgwNyAmIGNjY2MuY2hhckNvZGVBdCgwKSkgPDwgMTgpXG4gICAgICAgICAgICAgICAgICAgIHwgKCgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDEpKSA8PCAxMilcbiAgICAgICAgICAgICAgICAgICAgfCAoKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMikpIDw8IDYpXG4gICAgICAgICAgICAgICAgICAgIHwgKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMykpLCBvZmZzZXQgPSBjcCAtIDB4MTAwMDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChfZnJvbUNDKChvZmZzZXQgPj4+IDEwKSArIDB4RDgwMClcbiAgICAgICAgICAgICAgICAgICAgKyBfZnJvbUNDKChvZmZzZXQgJiAweDNGRikgKyAweERDMDApKTtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2Zyb21DQygoKDB4MGYgJiBjY2NjLmNoYXJDb2RlQXQoMCkpIDw8IDEyKVxuICAgICAgICAgICAgICAgICAgICB8ICgoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgxKSkgPDwgNilcbiAgICAgICAgICAgICAgICAgICAgfCAoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgyKSkpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2Zyb21DQygoKDB4MWYgJiBjY2NjLmNoYXJDb2RlQXQoMCkpIDw8IDYpXG4gICAgICAgICAgICAgICAgICAgIHwgKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMSkpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgc2hvdWxkIGhhdmUgYmVlbiBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3JjIFVURi0xNiBzdHJpbmdcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBVVEYtOCBzdHJpbmdcbiAgICAgKi9cbiAgICB2YXIgYnRvdSA9IGZ1bmN0aW9uIChiKSB7IHJldHVybiBiLnJlcGxhY2UocmVfYnRvdSwgY2JfYnRvdSk7IH07XG4gICAgLyoqXG4gICAgICogcG9seWZpbGwgdmVyc2lvbiBvZiBgYXRvYmBcbiAgICAgKi9cbiAgICB2YXIgYXRvYlBvbHlmaWxsID0gZnVuY3Rpb24gKGFzYykge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygncG9seWZpbGxlZCcpO1xuICAgICAgICBhc2MgPSBhc2MucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgICAgIGlmICghYjY0cmUudGVzdChhc2MpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWFsZm9ybWVkIGJhc2U2NC4nKTtcbiAgICAgICAgYXNjICs9ICc9PScuc2xpY2UoMiAtIChhc2MubGVuZ3RoICYgMykpO1xuICAgICAgICB2YXIgdTI0LCBiaW4gPSAnJywgcjEsIHIyO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFzYy5sZW5ndGg7KSB7XG4gICAgICAgICAgICB1MjQgPSBiNjR0YWJbYXNjLmNoYXJBdChpKyspXSA8PCAxOFxuICAgICAgICAgICAgICAgIHwgYjY0dGFiW2FzYy5jaGFyQXQoaSsrKV0gPDwgMTJcbiAgICAgICAgICAgICAgICB8IChyMSA9IGI2NHRhYlthc2MuY2hhckF0KGkrKyldKSA8PCA2XG4gICAgICAgICAgICAgICAgfCAocjIgPSBiNjR0YWJbYXNjLmNoYXJBdChpKyspXSk7XG4gICAgICAgICAgICBiaW4gKz0gcjEgPT09IDY0ID8gX2Zyb21DQyh1MjQgPj4gMTYgJiAyNTUpXG4gICAgICAgICAgICAgICAgOiByMiA9PT0gNjQgPyBfZnJvbUNDKHUyNCA+PiAxNiAmIDI1NSwgdTI0ID4+IDggJiAyNTUpXG4gICAgICAgICAgICAgICAgICAgIDogX2Zyb21DQyh1MjQgPj4gMTYgJiAyNTUsIHUyNCA+PiA4ICYgMjU1LCB1MjQgJiAyNTUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiaW47XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBkb2VzIHdoYXQgYHdpbmRvdy5hdG9iYCBvZiB3ZWIgYnJvd3NlcnMgZG8uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGFzYyBCYXNlNjQtZW5jb2RlZCBzdHJpbmdcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBiaW5hcnkgc3RyaW5nXG4gICAgICovXG4gICAgdmFyIF9hdG9iID0gdHlwZW9mIGF0b2IgPT09ICdmdW5jdGlvbicgPyBmdW5jdGlvbiAoYXNjKSB7IHJldHVybiBhdG9iKF90aWR5QjY0KGFzYykpOyB9XG4gICAgICAgIDogX2hhc0J1ZmZlciA/IGZ1bmN0aW9uIChhc2MpIHsgcmV0dXJuIEJ1ZmZlci5mcm9tKGFzYywgJ2Jhc2U2NCcpLnRvU3RyaW5nKCdiaW5hcnknKTsgfVxuICAgICAgICAgICAgOiBhdG9iUG9seWZpbGw7XG4gICAgLy9cbiAgICB2YXIgX3RvVWludDhBcnJheSA9IF9oYXNCdWZmZXJcbiAgICAgICAgPyBmdW5jdGlvbiAoYSkgeyByZXR1cm4gX1U4QWZyb20oQnVmZmVyLmZyb20oYSwgJ2Jhc2U2NCcpKTsgfVxuICAgICAgICA6IGZ1bmN0aW9uIChhKSB7IHJldHVybiBfVThBZnJvbShfYXRvYihhKS5zcGxpdCgnJykubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLmNoYXJDb2RlQXQoMCk7IH0pKTsgfTtcbiAgICAvKipcbiAgICAgKiBjb252ZXJ0cyBhIEJhc2U2NCBzdHJpbmcgdG8gYSBVaW50OEFycmF5LlxuICAgICAqL1xuICAgIHZhciB0b1VpbnQ4QXJyYXkgPSBmdW5jdGlvbiAoYSkgeyByZXR1cm4gX3RvVWludDhBcnJheShfdW5VUkkoYSkpOyB9O1xuICAgIC8vXG4gICAgdmFyIF9kZWNvZGUgPSBfaGFzQnVmZmVyXG4gICAgICAgID8gZnVuY3Rpb24gKGEpIHsgcmV0dXJuIEJ1ZmZlci5mcm9tKGEsICdiYXNlNjQnKS50b1N0cmluZygndXRmOCcpOyB9XG4gICAgICAgIDogX1REXG4gICAgICAgICAgICA/IGZ1bmN0aW9uIChhKSB7IHJldHVybiBfVEQuZGVjb2RlKF90b1VpbnQ4QXJyYXkoYSkpOyB9XG4gICAgICAgICAgICA6IGZ1bmN0aW9uIChhKSB7IHJldHVybiBidG91KF9hdG9iKGEpKTsgfTtcbiAgICB2YXIgX3VuVVJJID0gZnVuY3Rpb24gKGEpIHsgcmV0dXJuIF90aWR5QjY0KGEucmVwbGFjZSgvWy1fXS9nLCBmdW5jdGlvbiAobTApIHsgcmV0dXJuIG0wID09ICctJyA/ICcrJyA6ICcvJzsgfSkpOyB9O1xuICAgIC8qKlxuICAgICAqIGNvbnZlcnRzIGEgQmFzZTY0IHN0cmluZyB0byBhIFVURi04IHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3JjIEJhc2U2NCBzdHJpbmcuICBCb3RoIG5vcm1hbCBhbmQgVVJMLXNhZmUgYXJlIHN1cHBvcnRlZFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFVURi04IHN0cmluZ1xuICAgICAqL1xuICAgIHZhciBkZWNvZGUgPSBmdW5jdGlvbiAoc3JjKSB7IHJldHVybiBfZGVjb2RlKF91blVSSShzcmMpKTsgfTtcbiAgICAvKipcbiAgICAgKiBjaGVjayBpZiBhIHZhbHVlIGlzIGEgdmFsaWQgQmFzZTY0IHN0cmluZ1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgYSB2YWx1ZSB0byBjaGVja1xuICAgICAgKi9cbiAgICB2YXIgaXNWYWxpZCA9IGZ1bmN0aW9uIChzcmMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzcmMgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgcyA9IHNyYy5yZXBsYWNlKC9cXHMrL2csICcnKS5yZXBsYWNlKC89ezAsMn0kLywgJycpO1xuICAgICAgICByZXR1cm4gIS9bXlxcczAtOWEtekEtWlxcKy9dLy50ZXN0KHMpIHx8ICEvW15cXHMwLTlhLXpBLVpcXC1fXS8udGVzdChzKTtcbiAgICB9O1xuICAgIC8vXG4gICAgdmFyIF9ub0VudW0gPSBmdW5jdGlvbiAodikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHYsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBleHRlbmQgU3RyaW5nLnByb3RvdHlwZSB3aXRoIHJlbGV2YW50IG1ldGhvZHNcbiAgICAgKi9cbiAgICB2YXIgZXh0ZW5kU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2FkZCA9IGZ1bmN0aW9uIChuYW1lLCBib2R5KSB7IHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyaW5nLnByb3RvdHlwZSwgbmFtZSwgX25vRW51bShib2R5KSk7IH07XG4gICAgICAgIF9hZGQoJ2Zyb21CYXNlNjQnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGUodGhpcyk7IH0pO1xuICAgICAgICBfYWRkKCd0b0Jhc2U2NCcsIGZ1bmN0aW9uICh1cmxzYWZlKSB7IHJldHVybiBlbmNvZGUodGhpcywgdXJsc2FmZSk7IH0pO1xuICAgICAgICBfYWRkKCd0b0Jhc2U2NFVSSScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuY29kZSh0aGlzLCB0cnVlKTsgfSk7XG4gICAgICAgIF9hZGQoJ3RvQmFzZTY0VVJMJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5jb2RlKHRoaXMsIHRydWUpOyB9KTtcbiAgICAgICAgX2FkZCgndG9VaW50OEFycmF5JywgZnVuY3Rpb24gKCkgeyByZXR1cm4gdG9VaW50OEFycmF5KHRoaXMpOyB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIGV4dGVuZCBVaW50OEFycmF5LnByb3RvdHlwZSB3aXRoIHJlbGV2YW50IG1ldGhvZHNcbiAgICAgKi9cbiAgICB2YXIgZXh0ZW5kVWludDhBcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hZGQgPSBmdW5jdGlvbiAobmFtZSwgYm9keSkgeyByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KFVpbnQ4QXJyYXkucHJvdG90eXBlLCBuYW1lLCBfbm9FbnVtKGJvZHkpKTsgfTtcbiAgICAgICAgX2FkZCgndG9CYXNlNjQnLCBmdW5jdGlvbiAodXJsc2FmZSkgeyByZXR1cm4gZnJvbVVpbnQ4QXJyYXkodGhpcywgdXJsc2FmZSk7IH0pO1xuICAgICAgICBfYWRkKCd0b0Jhc2U2NFVSSScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZyb21VaW50OEFycmF5KHRoaXMsIHRydWUpOyB9KTtcbiAgICAgICAgX2FkZCgndG9CYXNlNjRVUkwnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBmcm9tVWludDhBcnJheSh0aGlzLCB0cnVlKTsgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBleHRlbmQgQnVpbHRpbiBwcm90b3R5cGVzIHdpdGggcmVsZXZhbnQgbWV0aG9kc1xuICAgICAqL1xuICAgIHZhciBleHRlbmRCdWlsdGlucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXh0ZW5kU3RyaW5nKCk7XG4gICAgICAgIGV4dGVuZFVpbnQ4QXJyYXkoKTtcbiAgICB9O1xuICAgIHZhciBnQmFzZTY0ID0ge1xuICAgICAgICB2ZXJzaW9uOiB2ZXJzaW9uLFxuICAgICAgICBWRVJTSU9OOiBWRVJTSU9OLFxuICAgICAgICBhdG9iOiBfYXRvYixcbiAgICAgICAgYXRvYlBvbHlmaWxsOiBhdG9iUG9seWZpbGwsXG4gICAgICAgIGJ0b2E6IF9idG9hLFxuICAgICAgICBidG9hUG9seWZpbGw6IGJ0b2FQb2x5ZmlsbCxcbiAgICAgICAgZnJvbUJhc2U2NDogZGVjb2RlLFxuICAgICAgICB0b0Jhc2U2NDogZW5jb2RlLFxuICAgICAgICBlbmNvZGU6IGVuY29kZSxcbiAgICAgICAgZW5jb2RlVVJJOiBlbmNvZGVVUkksXG4gICAgICAgIGVuY29kZVVSTDogZW5jb2RlVVJJLFxuICAgICAgICB1dG9iOiB1dG9iLFxuICAgICAgICBidG91OiBidG91LFxuICAgICAgICBkZWNvZGU6IGRlY29kZSxcbiAgICAgICAgaXNWYWxpZDogaXNWYWxpZCxcbiAgICAgICAgZnJvbVVpbnQ4QXJyYXk6IGZyb21VaW50OEFycmF5LFxuICAgICAgICB0b1VpbnQ4QXJyYXk6IHRvVWludDhBcnJheSxcbiAgICAgICAgZXh0ZW5kU3RyaW5nOiBleHRlbmRTdHJpbmcsXG4gICAgICAgIGV4dGVuZFVpbnQ4QXJyYXk6IGV4dGVuZFVpbnQ4QXJyYXksXG4gICAgICAgIGV4dGVuZEJ1aWx0aW5zOiBleHRlbmRCdWlsdGluc1xuICAgIH07XG4gICAgLy9cbiAgICAvLyBleHBvcnQgQmFzZTY0IHRvIHRoZSBuYW1lc3BhY2VcbiAgICAvL1xuICAgIC8vIEVTNSBpcyB5ZXQgdG8gaGF2ZSBPYmplY3QuYXNzaWduKCkgdGhhdCBtYXkgbWFrZSB0cmFuc3BpbGVycyB1bmhhcHB5LlxuICAgIC8vIGdCYXNlNjQuQmFzZTY0ID0gT2JqZWN0LmFzc2lnbih7fSwgZ0Jhc2U2NCk7XG4gICAgZ0Jhc2U2NC5CYXNlNjQgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhnQmFzZTY0KS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IHJldHVybiBnQmFzZTY0LkJhc2U2NFtrXSA9IGdCYXNlNjRba107IH0pO1xuICAgIHJldHVybiBnQmFzZTY0O1xufSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlBhcnNlciA9IGV4cG9ydHMuRW5jb2RlQ29udGV4dCA9IGV4cG9ydHMuRGVjb2RlQ29udGV4dCA9IHZvaWQgMDtcbnZhciBfcGFrbyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInBha29cIikpO1xudmFyIF9JTyA9IHJlcXVpcmUoXCIuL0lPXCIpO1xudmFyIF9VdGlsID0gcmVxdWlyZShcIi4vVXRpbFwiKTtcbnZhciBfanNCYXNlID0gcmVxdWlyZShcImpzLWJhc2U2NFwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBjb21wcmVzcyhkYXRhKSB7XG4gIHJldHVybiBfcGFrby5kZWZhdWx0LmRlZmxhdGVSYXcoZGF0YSkuYnVmZmVyO1xufVxuZnVuY3Rpb24gZGVjb21wcmVzcyhkYXRhKSB7XG4gIHJldHVybiBfcGFrby5kZWZhdWx0LmluZmxhdGVSYXcoZGF0YSkuYnVmZmVyO1xufVxuZnVuY3Rpb24gZW5jb2RlQmFzZTY0KGRhdGEsIHVybFNhZmUgPSBmYWxzZSkge1xuICByZXR1cm4gX2pzQmFzZS5CYXNlNjQuZnJvbVVpbnQ4QXJyYXkobmV3IFVpbnQ4QXJyYXkoZGF0YSksIHVybFNhZmUpO1xufVxuZnVuY3Rpb24gZGVjb2RlQmFzZTY0KGRhdGEpIHtcbiAgcmV0dXJuIF9qc0Jhc2UuQmFzZTY0LnRvVWludDhBcnJheShkYXRhKS5idWZmZXI7XG59XG5jbGFzcyBQYXJzZXIge1xuICAvKipcbiAgICogRW5jb2RlIHRoZSB2YWx1ZSBpbnRvIGJpbmFyeSBkYXRhLlxuICAgKi9cblxuICBlbmNvZGUodmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGN0eCA9IG5ldyBFbmNvZGVDb250ZXh0KHRoaXMsIG9wdGlvbnMpO1xuICAgIGN0eC5lbmNvZGUodGhpcywgdmFsdWUpO1xuICAgIGNvbnN0IGVuY29kZWQgPSBjdHguZmluYWwoKTtcbiAgICBpZiAob3B0aW9ucy5iYXNlNjQgPz8gZmFsc2UpIHtcbiAgICAgIHJldHVybiBlbmNvZGVCYXNlNjQoZW5jb2RlZCwgb3B0aW9ucy5iYXNlNjRVcmxTYWZlID8/IGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVuY29kZWQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlY29kZSBiaW5hcnkgZGF0YSBpbnRvIHRoZSB2YWx1ZS5cbiAgICovXG4gIGRlY29kZShidWZmZXIpIHtcbiAgICBpZiAodHlwZW9mIGJ1ZmZlciA9PSAnc3RyaW5nJykge1xuICAgICAgYnVmZmVyID0gZGVjb2RlQmFzZTY0KGJ1ZmZlcik7XG4gICAgfVxuICAgIGNvbnN0IGN0eCA9IG5ldyBEZWNvZGVDb250ZXh0KHRoaXMsIGJ1ZmZlcik7XG4gICAgcmV0dXJuIGN0eC5kZWNvZGUodGhpcyk7XG4gIH1cbn1cbmV4cG9ydHMuUGFyc2VyID0gUGFyc2VyO1xuY29uc3QgRkxBR19CT0RZX0NPTVBSRVNTRUQgPSAwYjAwMDAwMDAxO1xuY29uc3QgRkxBR19CSVRGSUVMRF9DT01QUkVTU0VEID0gMGIwMDAwMDAxMDtcbmNsYXNzIEVuY29kZUNvbnRleHQge1xuICBzdGFjayA9IFtdO1xuICBiaXRGaWVsZCA9IG5ldyBfSU8uQml0SU8oKTtcbiAgYm9keSA9IG5ldyBfSU8uSU8oKTtcbiAgY29uc3RydWN0b3IoYmFzZVR5cGUsIG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuYmFzZVR5cGUgPSBiYXNlVHlwZTtcbiAgICB0aGlzLmNvbXByZXNzZWQgPSBvcHRpb25zLmNvbXByZXNzZWQgPz8gdHJ1ZTtcbiAgICB0aGlzLmZvcmNlQ29tcHJlc3NlZCA9IG9wdGlvbnMuZm9yY2VDb21wcmVzc2VkID8/IGZhbHNlO1xuICB9XG4gIGNvbXByZXNzKGRhdGEpIHtcbiAgICBpZiAoIXRoaXMuY29tcHJlc3NlZCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29tcHJlc3NlZDogZmFsc2UsXG4gICAgICAgIGRhdGFcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGNvbXByZXNzZWQgPSBjb21wcmVzcyhkYXRhKTtcbiAgICBpZiAoY29tcHJlc3NlZC5ieXRlTGVuZ3RoIDwgZGF0YS5ieXRlTGVuZ3RoIHx8IHRoaXMuZm9yY2VDb21wcmVzc2VkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb21wcmVzc2VkOiB0cnVlLFxuICAgICAgICBkYXRhOiBjb21wcmVzc2VkXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgY29tcHJlc3NlZDogZmFsc2UsXG4gICAgICBkYXRhXG4gICAgfTtcbiAgfVxuICBmaW5hbCgpIHtcbiAgICBjb25zdCBkYXRhID0gbmV3IF9JTy5JTygpO1xuICAgIGRhdGEucHV0QnVmZmVyKG5ldyBVaW50MzJBcnJheShbdGhpcy5iYXNlVHlwZS5tYWdpY10pLmJ1ZmZlcik7XG4gICAgY29uc3QgcHV0RmxhZ3MgPSBkYXRhLndpdGhob2xkQnl0ZSgpO1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbXByZXNzZWQ6IGJpdEZpZWxkQ29tcHJlc3NlZCxcbiAgICAgIGRhdGE6IGJpdEZpZWxkXG4gICAgfSA9IHRoaXMuY29tcHJlc3ModGhpcy5iaXRGaWVsZC5maW5hbCgpKTtcbiAgICAoMCwgX1V0aWwuZW5jb2RlQmlnSW50KShCaWdJbnQoYml0RmllbGQuYnl0ZUxlbmd0aCksIGZhbHNlLCBkYXRhKTtcbiAgICBkYXRhLnB1dEJ1ZmZlcihiaXRGaWVsZCk7XG4gICAgY29uc3Qge1xuICAgICAgY29tcHJlc3NlZDogYm9keUNvbXByZXNzZWQsXG4gICAgICBkYXRhOiBib2R5XG4gICAgfSA9IHRoaXMuY29tcHJlc3ModGhpcy5ib2R5LmZpbmFsKCkpO1xuICAgIGRhdGEucHV0QnVmZmVyKGJvZHkpO1xuICAgIHB1dEZsYWdzKChib2R5Q29tcHJlc3NlZCA/IEZMQUdfQk9EWV9DT01QUkVTU0VEIDogMCkgfCAoYml0RmllbGRDb21wcmVzc2VkID8gRkxBR19CSVRGSUVMRF9DT01QUkVTU0VEIDogMCkpO1xuICAgIHJldHVybiBkYXRhLmZpbmFsKCk7XG4gIH1cbiAgZW5jb2RlKHR5cGUsIHZhbHVlKSB7XG4gICAgdGhpcy5zdGFjay5wdXNoKHR5cGUpO1xuICAgIHR5cGUuZW5jb2RlSW50ZXJuYWwodGhpcywgdmFsdWUpO1xuICAgIHRoaXMuc3RhY2sucG9wKCk7XG4gIH1cbn1cbmV4cG9ydHMuRW5jb2RlQ29udGV4dCA9IEVuY29kZUNvbnRleHQ7XG5jbGFzcyBEZWNvZGVDb250ZXh0IHtcbiAgc3RhY2sgPSBbXTtcbiAgZGVjb21wcmVzcyhkYXRhLCBjb21wcmVzc2VkKSB7XG4gICAgaWYgKCFjb21wcmVzc2VkKSByZXR1cm4gZGF0YTtcbiAgICByZXR1cm4gZGVjb21wcmVzcyhkYXRhKTtcbiAgfVxuICBjb25zdHJ1Y3RvcihiYXNlVHlwZSwgYnVmZmVyKSB7XG4gICAgdGhpcy5iYXNlVHlwZSA9IGJhc2VUeXBlO1xuICAgIGNvbnN0IGhlYWRlciA9IG5ldyBfSU8uSU8oYnVmZmVyKTtcbiAgICBjb25zdCBtYWdpYyA9IG5ldyBVaW50MzJBcnJheShoZWFkZXIuZ2V0QnVmZmVyKDQpKVswXTtcbiAgICBpZiAobWFnaWMgIT0gdGhpcy5iYXNlVHlwZS5tYWdpYykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBQYXJzZXJDb250ZXh0IG1hZ2ljIGNoZWNrIGZhaWxlZC4gRXhwZWN0ZWQgJHsoMCwgX1V0aWwuaGV4KSh0aGlzLmJhc2VUeXBlLm1hZ2ljLCA0KX0gR290ICR7KDAsIF9VdGlsLmhleCkobWFnaWMsIDQpfWApO1xuICAgIH1cbiAgICBjb25zdCBmbGFncyA9IGhlYWRlci5nZXRCeXRlKCk7XG4gICAgY29uc3QgYml0RmllbGRMZW5ndGggPSBOdW1iZXIoKDAsIF9VdGlsLmRlY29kZUJpZ0ludCkoZmFsc2UsIGhlYWRlcikpO1xuICAgIGNvbnN0IGJpdEZpZWxkID0gdGhpcy5kZWNvbXByZXNzKGhlYWRlci5nZXRCdWZmZXIoYml0RmllbGRMZW5ndGgpLCBmbGFncyAmIEZMQUdfQklURklFTERfQ09NUFJFU1NFRCk7XG4gICAgdGhpcy5iaXRGaWVsZCA9IG5ldyBfSU8uQml0SU8oYml0RmllbGQpO1xuICAgIGNvbnN0IGJvZHkgPSB0aGlzLmRlY29tcHJlc3MoaGVhZGVyLmdldEJ1ZmZlcihoZWFkZXIubGVuZ3RoIC0gaGVhZGVyLnBvaW50ZXIpLCBmbGFncyAmIEZMQUdfQk9EWV9DT01QUkVTU0VEKTtcbiAgICB0aGlzLmJvZHkgPSBuZXcgX0lPLklPKGJvZHkpO1xuICB9XG4gIGRlY29kZSh0eXBlKSB7XG4gICAgdGhpcy5zdGFjay5wdXNoKHR5cGUpO1xuICAgIGNvbnN0IHZhbHVlID0gdHlwZS5kZWNvZGVJbnRlcm5hbCh0aGlzKTtcbiAgICB0aGlzLnN0YWNrLnBvcCgpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuZXhwb3J0cy5EZWNvZGVDb250ZXh0ID0gRGVjb2RlQ29udGV4dDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTW9kaWZ5SGFzaFBhcnNlciA9IHZvaWQgMDtcbnZhciBfUGFyc2VyID0gcmVxdWlyZShcIi4uL1BhcnNlclwiKTtcbnZhciBfVXRpbCA9IHJlcXVpcmUoXCIuLi9VdGlsXCIpO1xuY2xhc3MgTW9kaWZ5SGFzaFBhcnNlciBleHRlbmRzIF9QYXJzZXIuUGFyc2VyIHtcbiAgY29uc3RydWN0b3IobW9kaWZpZXIsIHBhcnNlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5tb2RpZmllciA9IG1vZGlmaWVyO1xuICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuICAgIHRoaXMubWFnaWMgPSAoMCwgX1V0aWwuaGFzaFN0cikoYE1vZGlmeUhhc2hQYXJzZXI6JHt0aGlzLnBhcnNlci5tYWdpY306JHt0aGlzLm1vZGlmaWVyfWApO1xuICB9XG4gIGVuY29kZUludGVybmFsKGN0eCwgdmFsdWUpIHtcbiAgICBjdHguZW5jb2RlKHRoaXMucGFyc2VyLCB2YWx1ZSk7XG4gIH1cbiAgZGVjb2RlSW50ZXJuYWwoY3R4KSB7XG4gICAgcmV0dXJuIGN0eC5kZWNvZGUodGhpcy5wYXJzZXIpO1xuICB9XG59XG5leHBvcnRzLk1vZGlmeUhhc2hQYXJzZXIgPSBNb2RpZnlIYXNoUGFyc2VyOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5CaWdJbnRQYXJzZXIgPSB2b2lkIDA7XG52YXIgX1BhcnNlciA9IHJlcXVpcmUoXCIuLi9QYXJzZXJcIik7XG52YXIgX1V0aWwgPSByZXF1aXJlKFwiLi4vVXRpbFwiKTtcbmNsYXNzIEJpZ0ludFBhcnNlciBleHRlbmRzIF9QYXJzZXIuUGFyc2VyIHtcbiAgY29uc3RydWN0b3Ioc2lnbmVkKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnNpZ25lZCA9IHNpZ25lZDtcbiAgICB0aGlzLm1hZ2ljID0gKDAsIF9VdGlsLmhhc2hTdHIpKGBCaWdJbnRQYXJzZXI6JHt0aGlzLnNpZ25lZCA/ICdTaWduZWQnIDogJ1Vuc2lnbmVkJ31gKTtcbiAgfVxuICBlbmNvZGVJbnRlcm5hbChjdHgsIHZhbHVlKSB7XG4gICAgKDAsIF9VdGlsLmVuY29kZUJpZ0ludCkodmFsdWUsIHRoaXMuc2lnbmVkLCBjdHguYm9keSk7XG4gIH1cbiAgZGVjb2RlSW50ZXJuYWwoY3R4KSB7XG4gICAgcmV0dXJuICgwLCBfVXRpbC5kZWNvZGVCaWdJbnQpKHRoaXMuc2lnbmVkLCBjdHguYm9keSk7XG4gIH1cbn1cbmV4cG9ydHMuQmlnSW50UGFyc2VyID0gQmlnSW50UGFyc2VyOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5CaW5hcnlQYXJzZXIgPSB2b2lkIDA7XG52YXIgX1BhcnNlciA9IHJlcXVpcmUoXCIuLi9QYXJzZXJcIik7XG52YXIgX1V0aWwgPSByZXF1aXJlKFwiLi4vVXRpbFwiKTtcbnZhciBfQmlnSW50ID0gcmVxdWlyZShcIi4vQmlnSW50XCIpO1xuY2xhc3MgQmluYXJ5UGFyc2VyIGV4dGVuZHMgX1BhcnNlci5QYXJzZXIge1xuICBtYWdpYyA9ICgwLCBfVXRpbC5oYXNoU3RyKSgnQmluYXJ5UGFyc2VyJyk7XG4gIGVuY29kZUludGVybmFsKGN0eCwgYnVmZmVyKSB7XG4gICAgY3R4LmVuY29kZShuZXcgX0JpZ0ludC5CaWdJbnRQYXJzZXIoZmFsc2UpLCBCaWdJbnQoYnVmZmVyLmJ5dGVMZW5ndGgpKTtcbiAgICBjdHguYm9keS5wdXRCdWZmZXIoYnVmZmVyKTtcbiAgfVxuICBkZWNvZGVJbnRlcm5hbChjdHgpIHtcbiAgICBjb25zdCBsZW5ndGggPSBOdW1iZXIoY3R4LmRlY29kZShuZXcgX0JpZ0ludC5CaWdJbnRQYXJzZXIoZmFsc2UpKSk7XG4gICAgcmV0dXJuIGN0eC5ib2R5LmdldEJ1ZmZlcihsZW5ndGgpO1xuICB9XG59XG5leHBvcnRzLkJpbmFyeVBhcnNlciA9IEJpbmFyeVBhcnNlcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTnVtYmVyUGFyc2VyID0gdm9pZCAwO1xudmFyIF9QYXJzZXIgPSByZXF1aXJlKFwiLi4vUGFyc2VyXCIpO1xudmFyIF9VdGlsID0gcmVxdWlyZShcIi4uL1V0aWxcIik7XG5jbGFzcyBOdW1iZXJQYXJzZXIgZXh0ZW5kcyBfUGFyc2VyLlBhcnNlciB7XG4gIGNvbnN0cnVjdG9yKHR5cGUpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5tYWdpYyA9ICgwLCBfVXRpbC5oYXNoU3RyKShgTnVtYmVyUGFyc2VyOiR7dGhpcy50eXBlfWApO1xuICB9XG5cbiAgLy8gVHlwZVNjcmlwdCBoYXMgZm9yY2VkIG15IGhhbmRzISBXaHkgd29udCB0aGlzIG5hcnJvdyB0aGUgbnVtYmVyIHR5cGUhXG4gIGVuY29kZUludGVybmFsKGN0eCwgbnVtYmVyKSB7XG4gICAgY3R4LmJvZHkuZXhwZWN0KDgpO1xuICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICBjYXNlICd1OCc6XG4gICAgICAgIGN0eC5ib2R5LnZpZXcuc2V0VWludDgoY3R4LmJvZHkucG9pbnRlciwgbnVtYmVyKTtcbiAgICAgICAgY3R4LmJvZHkucG9pbnRlciArPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3UxNic6XG4gICAgICAgIGN0eC5ib2R5LnZpZXcuc2V0VWludDE2KGN0eC5ib2R5LnBvaW50ZXIsIG51bWJlciwgdHJ1ZSk7XG4gICAgICAgIGN0eC5ib2R5LnBvaW50ZXIgKz0gMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd1MzInOlxuICAgICAgICBjdHguYm9keS52aWV3LnNldFVpbnQzMihjdHguYm9keS5wb2ludGVyLCBudW1iZXIsIHRydWUpO1xuICAgICAgICBjdHguYm9keS5wb2ludGVyICs9IDQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndTY0JzpcbiAgICAgICAgY3R4LmJvZHkudmlldy5zZXRCaWdVaW50NjQoY3R4LmJvZHkucG9pbnRlciwgbnVtYmVyLCB0cnVlKTtcbiAgICAgICAgY3R4LmJvZHkucG9pbnRlciArPSA4O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2k4JzpcbiAgICAgICAgY3R4LmJvZHkudmlldy5zZXRJbnQ4KGN0eC5ib2R5LnBvaW50ZXIsIG51bWJlcik7XG4gICAgICAgIGN0eC5ib2R5LnBvaW50ZXIgKz0gMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdpMTYnOlxuICAgICAgICBjdHguYm9keS52aWV3LnNldEludDE2KGN0eC5ib2R5LnBvaW50ZXIsIG51bWJlciwgdHJ1ZSk7XG4gICAgICAgIGN0eC5ib2R5LnBvaW50ZXIgKz0gMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdpMzInOlxuICAgICAgICBjdHguYm9keS52aWV3LnNldEludDMyKGN0eC5ib2R5LnBvaW50ZXIsIG51bWJlciwgdHJ1ZSk7XG4gICAgICAgIGN0eC5ib2R5LnBvaW50ZXIgKz0gNDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdpNjQnOlxuICAgICAgICBjdHguYm9keS52aWV3LnNldEJpZ0ludDY0KGN0eC5ib2R5LnBvaW50ZXIsIG51bWJlciwgdHJ1ZSk7XG4gICAgICAgIGN0eC5ib2R5LnBvaW50ZXIgKz0gODtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdmMzInOlxuICAgICAgICBjdHguYm9keS52aWV3LnNldEZsb2F0MzIoY3R4LmJvZHkucG9pbnRlciwgbnVtYmVyLCB0cnVlKTtcbiAgICAgICAgY3R4LmJvZHkucG9pbnRlciArPSA0O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2Y2NCc6XG4gICAgICAgIGN0eC5ib2R5LnZpZXcuc2V0RmxvYXQ2NChjdHguYm9keS5wb2ludGVyLCBudW1iZXIsIHRydWUpO1xuICAgICAgICBjdHguYm9keS5wb2ludGVyICs9IDg7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOdW1QYXJzZXIgaW52YWxpZCB0eXBlLicpO1xuICAgIH1cbiAgfVxuICBkZWNvZGVJbnRlcm5hbChjdHgpIHtcbiAgICBsZXQgbnVtYmVyO1xuICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICBjYXNlICd1OCc6XG4gICAgICAgIG51bWJlciA9IGN0eC5ib2R5LnZpZXcuZ2V0VWludDgoY3R4LmJvZHkucG9pbnRlcik7XG4gICAgICAgIGN0eC5ib2R5LnBvaW50ZXIgKz0gMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd1MTYnOlxuICAgICAgICBudW1iZXIgPSBjdHguYm9keS52aWV3LmdldFVpbnQxNihjdHguYm9keS5wb2ludGVyLCB0cnVlKTtcbiAgICAgICAgY3R4LmJvZHkucG9pbnRlciArPSAyO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3UzMic6XG4gICAgICAgIG51bWJlciA9IGN0eC5ib2R5LnZpZXcuZ2V0VWludDMyKGN0eC5ib2R5LnBvaW50ZXIsIHRydWUpO1xuICAgICAgICBjdHguYm9keS5wb2ludGVyICs9IDQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndTY0JzpcbiAgICAgICAgbnVtYmVyID0gY3R4LmJvZHkudmlldy5nZXRCaWdVaW50NjQoY3R4LmJvZHkucG9pbnRlciwgdHJ1ZSk7XG4gICAgICAgIGN0eC5ib2R5LnBvaW50ZXIgKz0gODtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdpOCc6XG4gICAgICAgIG51bWJlciA9IGN0eC5ib2R5LnZpZXcuZ2V0SW50OChjdHguYm9keS5wb2ludGVyKTtcbiAgICAgICAgY3R4LmJvZHkucG9pbnRlciArPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2kxNic6XG4gICAgICAgIG51bWJlciA9IGN0eC5ib2R5LnZpZXcuZ2V0SW50MTYoY3R4LmJvZHkucG9pbnRlciwgdHJ1ZSk7XG4gICAgICAgIGN0eC5ib2R5LnBvaW50ZXIgKz0gMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdpMzInOlxuICAgICAgICBudW1iZXIgPSBjdHguYm9keS52aWV3LmdldEludDMyKGN0eC5ib2R5LnBvaW50ZXIsIHRydWUpO1xuICAgICAgICBjdHguYm9keS5wb2ludGVyICs9IDQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnaTY0JzpcbiAgICAgICAgbnVtYmVyID0gY3R4LmJvZHkudmlldy5nZXRCaWdJbnQ2NChjdHguYm9keS5wb2ludGVyLCB0cnVlKTtcbiAgICAgICAgY3R4LmJvZHkucG9pbnRlciArPSA4O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2YzMic6XG4gICAgICAgIG51bWJlciA9IGN0eC5ib2R5LnZpZXcuZ2V0RmxvYXQzMihjdHguYm9keS5wb2ludGVyLCB0cnVlKTtcbiAgICAgICAgY3R4LmJvZHkucG9pbnRlciArPSA0O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2Y2NCc6XG4gICAgICAgIG51bWJlciA9IGN0eC5ib2R5LnZpZXcuZ2V0RmxvYXQ2NChjdHguYm9keS5wb2ludGVyLCB0cnVlKTtcbiAgICAgICAgY3R4LmJvZHkucG9pbnRlciArPSA4O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTnVtUGFyc2VyIGludmFsaWQgdHlwZS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxufVxuZXhwb3J0cy5OdW1iZXJQYXJzZXIgPSBOdW1iZXJQYXJzZXI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlN0cmluZ1BhcnNlciA9IHZvaWQgMDtcbnZhciBfUGFyc2VyID0gcmVxdWlyZShcIi4uL1BhcnNlclwiKTtcbnZhciBfVXRpbCA9IHJlcXVpcmUoXCIuLi9VdGlsXCIpO1xudmFyIF9CaW5hcnkgPSByZXF1aXJlKFwiLi9CaW5hcnlcIik7XG5jbGFzcyBTdHJpbmdQYXJzZXIgZXh0ZW5kcyBfUGFyc2VyLlBhcnNlciB7XG4gIG1hZ2ljID0gKDAsIF9VdGlsLmhhc2hTdHIpKCdTdHJpbmdQYXJzZXInKTtcbiAgZW5jb2RlSW50ZXJuYWwoY3R4LCBzdHIpIHtcbiAgICBjdHguZW5jb2RlKG5ldyBfQmluYXJ5LkJpbmFyeVBhcnNlcigpLCBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKSk7XG4gIH1cbiAgZGVjb2RlSW50ZXJuYWwoY3R4KSB7XG4gICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigndXRmLTgnKS5kZWNvZGUoY3R4LmRlY29kZShuZXcgX0JpbmFyeS5CaW5hcnlQYXJzZXIoKSkpO1xuICB9XG59XG5leHBvcnRzLlN0cmluZ1BhcnNlciA9IFN0cmluZ1BhcnNlcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQm9vbGVhblBhcnNlciA9IHZvaWQgMDtcbnZhciBfUGFyc2VyID0gcmVxdWlyZShcIi4uL1BhcnNlclwiKTtcbnZhciBfVXRpbCA9IHJlcXVpcmUoXCIuLi9VdGlsXCIpO1xuY2xhc3MgQm9vbGVhblBhcnNlciBleHRlbmRzIF9QYXJzZXIuUGFyc2VyIHtcbiAgbWFnaWMgPSAoMCwgX1V0aWwuaGFzaFN0cikoJ0Jvb2xlYW5QYXJzZXInKTtcbiAgZW5jb2RlSW50ZXJuYWwoY3R4LCB2YWx1ZSkge1xuICAgIGN0eC5iaXRGaWVsZC5wdXRCaXQodmFsdWUpO1xuICB9XG4gIGRlY29kZUludGVybmFsKGN0eCkge1xuICAgIHJldHVybiBjdHguYml0RmllbGQuZ2V0Qml0KCk7XG4gIH1cbn1cbmV4cG9ydHMuQm9vbGVhblBhcnNlciA9IEJvb2xlYW5QYXJzZXI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLk51bGxhYmxlUGFyc2VyID0gdm9pZCAwO1xudmFyIF9QYXJzZXIgPSByZXF1aXJlKFwiLi4vUGFyc2VyXCIpO1xudmFyIF9VdGlsID0gcmVxdWlyZShcIi4uL1V0aWxcIik7XG5jbGFzcyBOdWxsYWJsZVBhcnNlciBleHRlbmRzIF9QYXJzZXIuUGFyc2VyIHtcbiAgY29uc3RydWN0b3IodHlwZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLm1hZ2ljID0gKDAsIF9VdGlsLmhhc2hTdHIpKGBOdWxsYWJsZVBhcnNlcjoke3RoaXMudHlwZS5tYWdpY31gKTtcbiAgfVxuICBlbmNvZGVJbnRlcm5hbChjdHgsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XG4gICAgICBjdHguYml0RmllbGQucHV0Qml0KHRydWUpO1xuICAgICAgY3R4LmVuY29kZSh0aGlzLnR5cGUsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3R4LmJpdEZpZWxkLnB1dEJpdChmYWxzZSk7XG4gICAgfVxuICB9XG4gIGRlY29kZUludGVybmFsKGN0eCkge1xuICAgIGlmIChjdHguYml0RmllbGQuZ2V0Qml0KCkpIHtcbiAgICAgIHJldHVybiBjdHguZGVjb2RlKHRoaXMudHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxufVxuZXhwb3J0cy5OdWxsYWJsZVBhcnNlciA9IE51bGxhYmxlUGFyc2VyOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5PYmplY3RQYXJzZXIgPSB2b2lkIDA7XG52YXIgX1BhcnNlciA9IHJlcXVpcmUoXCIuLi9QYXJzZXJcIik7XG52YXIgX1V0aWwgPSByZXF1aXJlKFwiLi4vVXRpbFwiKTtcbmNsYXNzIE9iamVjdFBhcnNlciBleHRlbmRzIF9QYXJzZXIuUGFyc2VyIHtcbiAgY29uc3RydWN0b3Iob2JqVHlwZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5vYmpUeXBlID0gb2JqVHlwZTtcbiAgICB0aGlzLmtleXMgPSBPYmplY3Qua2V5cyh0aGlzLm9ialR5cGUpLnRvU29ydGVkKCk7XG4gICAgdGhpcy5tYWdpYyA9ICgwLCBfVXRpbC5oYXNoU3RyKShgU3RyaW5nUGFyc2VyOiR7dGhpcy5rZXlzLm1hcChrZXkgPT4gYCR7U3RyaW5nKGtleSl9LSR7dGhpcy5vYmpUeXBlW2tleV0ubWFnaWN9YCkuam9pbignLCcpfWApO1xuICB9XG4gIGVuY29kZUludGVybmFsKGN0eCwgb2JqKSB7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgdGhpcy5rZXlzKSB7XG4gICAgICBjdHguZW5jb2RlKHRoaXMub2JqVHlwZVtrZXldLCBvYmpba2V5XSk7XG4gICAgfVxuICB9XG4gIGRlY29kZUludGVybmFsKGN0eCkge1xuICAgIGxldCBvYmogPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLmtleXMpIHtcbiAgICAgIG9ialtrZXldID0gY3R4LmRlY29kZSh0aGlzLm9ialR5cGVba2V5XSk7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH1cbn1cbmV4cG9ydHMuT2JqZWN0UGFyc2VyID0gT2JqZWN0UGFyc2VyOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5BcnJheVBhcnNlciA9IHZvaWQgMDtcbnZhciBfUGFyc2VyID0gcmVxdWlyZShcIi4uL1BhcnNlclwiKTtcbnZhciBfVXRpbCA9IHJlcXVpcmUoXCIuLi9VdGlsXCIpO1xudmFyIF9CaWdJbnQgPSByZXF1aXJlKFwiLi9CaWdJbnRcIik7XG5jbGFzcyBBcnJheVBhcnNlciBleHRlbmRzIF9QYXJzZXIuUGFyc2VyIHtcbiAgY29uc3RydWN0b3IoYXJyVHlwZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5hcnJUeXBlID0gYXJyVHlwZTtcbiAgICB0aGlzLm1hZ2ljID0gKDAsIF9VdGlsLmhhc2hTdHIpKGBBcnJheVBhcnNlcjoke3RoaXMuYXJyVHlwZS5tYWdpY31gKTtcbiAgfVxuICBlbmNvZGVJbnRlcm5hbChjdHgsIGFycikge1xuICAgIGN0eC5lbmNvZGUobmV3IF9CaWdJbnQuQmlnSW50UGFyc2VyKGZhbHNlKSwgQmlnSW50KGFyci5sZW5ndGgpKTtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyKSB7XG4gICAgICBjdHguZW5jb2RlKHRoaXMuYXJyVHlwZSwgaXRlbSk7XG4gICAgfVxuICB9XG4gIGRlY29kZUludGVybmFsKGN0eCkge1xuICAgIGNvbnN0IGxlbmd0aCA9IE51bWJlcihjdHguZGVjb2RlKG5ldyBfQmlnSW50LkJpZ0ludFBhcnNlcihmYWxzZSkpKTtcbiAgICBjb25zdCBhcnIgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnIucHVzaChjdHguZGVjb2RlKHRoaXMuYXJyVHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xuICB9XG59XG5leHBvcnRzLkFycmF5UGFyc2VyID0gQXJyYXlQYXJzZXI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLk1hcFBhcnNlciA9IHZvaWQgMDtcbnZhciBfUGFyc2VyID0gcmVxdWlyZShcIi4uL1BhcnNlclwiKTtcbnZhciBfVXRpbCA9IHJlcXVpcmUoXCIuLi9VdGlsXCIpO1xudmFyIF9CaWdJbnQgPSByZXF1aXJlKFwiLi9CaWdJbnRcIik7XG5jbGFzcyBNYXBQYXJzZXIgZXh0ZW5kcyBfUGFyc2VyLlBhcnNlciB7XG4gIGNvbnN0cnVjdG9yKGtleVR5cGUsIHZhbHVlVHlwZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5rZXlUeXBlID0ga2V5VHlwZTtcbiAgICB0aGlzLnZhbHVlVHlwZSA9IHZhbHVlVHlwZTtcbiAgICB0aGlzLm1hZ2ljID0gKDAsIF9VdGlsLmhhc2hTdHIpKGBNYXBQYXJzZXI6JHt0aGlzLmtleVR5cGUubWFnaWN9LSR7dGhpcy52YWx1ZVR5cGUubWFnaWN9YCk7XG4gIH1cblxuICAvLyBUT0RPOiBBbGxvdyBSZWNvcmQ8UGFyc2VyVHlwZTxLPiwgUGFyc2VyVHlwZTxWPj4gYXMgYW4gYXJndW1lbnRcbiAgZW5jb2RlSW50ZXJuYWwoY3R4LCBtYXApIHtcbiAgICBjdHguZW5jb2RlKG5ldyBfQmlnSW50LkJpZ0ludFBhcnNlcihmYWxzZSksIEJpZ0ludChtYXAuc2l6ZSkpO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG1hcC5lbnRyaWVzKCkpIHtcbiAgICAgIGN0eC5lbmNvZGUodGhpcy5rZXlUeXBlLCBrZXkpO1xuICAgICAgY3R4LmVuY29kZSh0aGlzLnZhbHVlVHlwZSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICBkZWNvZGVJbnRlcm5hbChjdHgpIHtcbiAgICBjb25zdCBtYXAgPSBuZXcgTWFwKCk7XG4gICAgY29uc3Qgc2l6ZSA9IE51bWJlcihjdHguZGVjb2RlKG5ldyBfQmlnSW50LkJpZ0ludFBhcnNlcihmYWxzZSkpKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0gY3R4LmRlY29kZSh0aGlzLmtleVR5cGUpO1xuICAgICAgY29uc3QgdmFsdWUgPSBjdHguZGVjb2RlKHRoaXMudmFsdWVUeXBlKTtcbiAgICAgIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBtYXA7XG4gIH1cbn1cbmV4cG9ydHMuTWFwUGFyc2VyID0gTWFwUGFyc2VyOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5EYXRlUGFyc2VyID0gdm9pZCAwO1xudmFyIF9QYXJzZXIgPSByZXF1aXJlKFwiLi4vUGFyc2VyXCIpO1xudmFyIF9VdGlsID0gcmVxdWlyZShcIi4uL1V0aWxcIik7XG52YXIgX0JpZ0ludCA9IHJlcXVpcmUoXCIuL0JpZ0ludFwiKTtcbmNsYXNzIERhdGVQYXJzZXIgZXh0ZW5kcyBfUGFyc2VyLlBhcnNlciB7XG4gIG1hZ2ljID0gKDAsIF9VdGlsLmhhc2hTdHIpKCdEYXRlUGFyc2VyJyk7XG4gIGVuY29kZUludGVybmFsKGN0eCwgZGF0ZSkge1xuICAgIGN0eC5lbmNvZGUobmV3IF9CaWdJbnQuQmlnSW50UGFyc2VyKGZhbHNlKSwgQmlnSW50KGRhdGUudmFsdWVPZigpKSk7XG4gIH1cbiAgZGVjb2RlSW50ZXJuYWwoY3R4KSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE51bWJlcihjdHguZGVjb2RlKG5ldyBfQmlnSW50LkJpZ0ludFBhcnNlcihmYWxzZSkpKSk7XG4gIH1cbn1cbmV4cG9ydHMuRGF0ZVBhcnNlciA9IERhdGVQYXJzZXI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlR1cGxlUGFyc2VyID0gdm9pZCAwO1xudmFyIF9QYXJzZXIgPSByZXF1aXJlKFwiLi4vUGFyc2VyXCIpO1xudmFyIF9VdGlsID0gcmVxdWlyZShcIi4uL1V0aWxcIik7XG5jbGFzcyBUdXBsZVBhcnNlciBleHRlbmRzIF9QYXJzZXIuUGFyc2VyIHtcbiAgY29uc3RydWN0b3IoZWxlbWVudFR5cGVzKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmVsZW1lbnRUeXBlcyA9IGVsZW1lbnRUeXBlcztcbiAgICB0aGlzLm1hZ2ljID0gKDAsIF9VdGlsLmhhc2hTdHIpKGBUdXBsZVBhcnNlcjoke3RoaXMuZWxlbWVudFR5cGVzLm1hcCh0ID0+IHQubWFnaWMpLmpvaW4oJywnKX1gKTtcbiAgfVxuICBlbmNvZGVJbnRlcm5hbChjdHgsIHR1cGxlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0dXBsZS5sZW5ndGg7IGkrKykge1xuICAgICAgY3R4LmVuY29kZSh0aGlzLmVsZW1lbnRUeXBlc1tpXSwgdHVwbGVbaV0pO1xuICAgIH1cbiAgfVxuICBkZWNvZGVJbnRlcm5hbChjdHgpIHtcbiAgICAvLyBUT0RPOiBQcm9iYWJseSBtYWtlIHRoaXMgdHlwZSBzYWZlLlxuICAgIGxldCB0dXBsZSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5lbGVtZW50VHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHR1cGxlLnB1c2goY3R4LmRlY29kZSh0aGlzLmVsZW1lbnRUeXBlc1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gdHVwbGU7XG4gIH1cbn1cbmV4cG9ydHMuVHVwbGVQYXJzZXIgPSBUdXBsZVBhcnNlcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQnJhbmNoUGFyc2VyID0gdm9pZCAwO1xudmFyIF9QYXJzZXIgPSByZXF1aXJlKFwiLi4vUGFyc2VyXCIpO1xudmFyIF9VdGlsID0gcmVxdWlyZShcIi4uL1V0aWxcIik7XG5jbGFzcyBCcmFuY2hQYXJzZXIgZXh0ZW5kcyBfUGFyc2VyLlBhcnNlciB7XG4gIGNvbnN0cnVjdG9yKGJyYW5jaFR5cGVzKSB7XG4gICAgc3VwZXIoKTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdGhpcy5icmFuY2hUeXBlcyA9IE9iamVjdC5lbnRyaWVzKGJyYW5jaFR5cGVzKS50b1NvcnRlZCgoW2tleTFdLCBba2V5Ml0pID0+ICgwLCBfVXRpbC5zdHJpbmdTb3J0KShrZXkxLCBrZXkyKSk7XG4gICAgLy8gQHRzLWlnbm9yZSAtIEZJWE1FXG4gICAgdGhpcy5tYWdpYyA9ICgwLCBfVXRpbC5oYXNoU3RyKShgQnJhbmNoUGFyc2VyOiR7dGhpcy5icmFuY2hUeXBlcy5tYXAoKFtrZXksIHR5cGVdKSA9PiBgJHtrZXl9LSR7dHlwZS5tYWdpY31gKS5qb2luKCcsJyl9YCk7XG4gIH1cbiAgZW5jb2RlSW50ZXJuYWwoY3R4LCBkYXRhKSB7XG4gICAgY29uc3Qga2V5SW5kZXggPSB0aGlzLmJyYW5jaFR5cGVzLmZpbmRJbmRleCgoW2tleV0pID0+IGtleSA9PSBkYXRhWzBdKTtcbiAgICBpZiAoa2V5SW5kZXggPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JyYW5jaFBhcnNlcjogRmFpbGVkIHRvIGZpbmQga2V5IGluZGV4LicpO1xuICAgIH1cbiAgICAoMCwgX1V0aWwuZW5jb2RlSW5kZXgpKGN0eCwga2V5SW5kZXgsIHRoaXMuYnJhbmNoVHlwZXMubGVuZ3RoKTtcbiAgICBjdHguZW5jb2RlKHRoaXMuYnJhbmNoVHlwZXNba2V5SW5kZXhdWzFdLCBkYXRhWzFdKTtcbiAgfVxuICBkZWNvZGVJbnRlcm5hbChjdHgpIHtcbiAgICBjb25zdCBrZXlJbmRleCA9ICgwLCBfVXRpbC5kZWNvZGVJbmRleCkoY3R4LCB0aGlzLmJyYW5jaFR5cGVzLmxlbmd0aCk7XG4gICAgcmV0dXJuIFt0aGlzLmJyYW5jaFR5cGVzW2tleUluZGV4XVswXSwgY3R4LmRlY29kZSh0aGlzLmJyYW5jaFR5cGVzW2tleUluZGV4XVsxXSldO1xuICB9XG59XG5leHBvcnRzLkJyYW5jaFBhcnNlciA9IEJyYW5jaFBhcnNlcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQnJhbmNoQnlLZXlQYXJzZXIgPSB2b2lkIDA7XG52YXIgX1BhcnNlciA9IHJlcXVpcmUoXCIuLi9QYXJzZXJcIik7XG52YXIgX1V0aWwgPSByZXF1aXJlKFwiLi4vVXRpbFwiKTtcbnZhciBfT2JqZWN0ID0gcmVxdWlyZShcIi4vT2JqZWN0XCIpO1xuLypcbiAgICBUT0RPOiBEb24ndCBhbGxvdyBkZWZpbmluZyBrZXkgcHJvcGVydHkgb24gb2JqZWN0IGluIHBhcnNlciB0eXBlIG1hcC5cbiAgICBFZzpcbiAgICAgICAgYGBgVHlwZVNjcmlwdFxuICAgICAgICBicmFuY2hCeUtleSgndHlwZScsIHtcbiAgICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICAgICAgc2V2ZXJpdHk6IG51bWJlcignaTMyJylcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBzdHJpbmcoKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcoKSwgLy8gPC0tLSBTaG91bGQgZXJyb3IgaGVyZSBiZWNhdXNlIHR5cGUgaXMgYmVpbmcgdXNlZCBmb3IgYnJhbmNoLlxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHN0cmluZygpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIGBgYFxuKi9cblxuY2xhc3MgQnJhbmNoQnlLZXlQYXJzZXIgZXh0ZW5kcyBfUGFyc2VyLlBhcnNlciB7XG4gIGNvbnN0cnVjdG9yKGtleSwgYnJhbmNoVHlwZU1hcCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHRoaXMuYnJhbmNoVHlwZXMgPSBPYmplY3QuZW50cmllcyhicmFuY2hUeXBlTWFwKS50b1NvcnRlZCgoW2tleTFdLCBba2V5Ml0pID0+ICgwLCBfVXRpbC5zdHJpbmdTb3J0KShrZXkxLCBrZXkyKSkubWFwKChba2V5LCBvYmpdKSA9PiB7XG4gICAgICBpZiAodGhpcy5rZXkgaW4gb2JqKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQnJhbmNoQnlLZXlQYXJzZXI6IEtleSBpcyBpbmNsdWRlZCBpbiBwYXJzZXIgbWFwLCByZW1vdmUga2V5ICR7a2V5fS4ke3RoaXMua2V5fWApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtrZXksIG5ldyBfT2JqZWN0Lk9iamVjdFBhcnNlcihvYmopXTtcbiAgICB9KTtcbiAgICAvLyBAdHMtaWdub3JlIC0gRklYTUVcbiAgICB0aGlzLm1hZ2ljID0gKDAsIF9VdGlsLmhhc2hTdHIpKGBCcmFuY2hCeUtleVBhcnNlcjoke3RoaXMua2V5fToke3RoaXMuYnJhbmNoVHlwZXMubWFwKChba2V5LCB0eXBlXSkgPT4gYCR7a2V5fS0ke3R5cGUubWFnaWN9YCkuam9pbignLCcpfWApO1xuICB9XG4gIGVuY29kZUludGVybmFsKGN0eCwgdmFsdWUpIHtcbiAgICBjb25zdCBrZXlJbmRleCA9IHRoaXMuYnJhbmNoVHlwZXMuZmluZEluZGV4KChba2V5XSkgPT4ga2V5ID09IHZhbHVlW3RoaXMua2V5XSk7XG4gICAgaWYgKGtleUluZGV4ID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdCcmFuY2hCeUtleVBhcnNlcjogRmFpbGVkIHRvIGZpbmQga2V5IGluZGV4LicpO1xuICAgIH1cbiAgICAoMCwgX1V0aWwuZW5jb2RlSW5kZXgpKGN0eCwga2V5SW5kZXgsIHRoaXMuYnJhbmNoVHlwZXMubGVuZ3RoKTtcbiAgICBjdHguZW5jb2RlKHRoaXMuYnJhbmNoVHlwZXNba2V5SW5kZXhdWzFdLCB2YWx1ZSk7IC8vIEZJWE1FOiB2YWx1ZVt0aGlzLmtleV0gc2hvdWxkIG1heWJlIGJlIGRlbGV0ZWQ/XG4gIH1cbiAgZGVjb2RlSW50ZXJuYWwoY3R4KSB7XG4gICAgY29uc3Qga2V5SW5kZXggPSAoMCwgX1V0aWwuZGVjb2RlSW5kZXgpKGN0eCwgdGhpcy5icmFuY2hUeXBlcy5sZW5ndGgpO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZXR1cm4ge1xuICAgICAgLi4uY3R4LmRlY29kZSh0aGlzLmJyYW5jaFR5cGVzW2tleUluZGV4XVsxXSksXG4gICAgICBbdGhpcy5rZXldOiB0aGlzLmJyYW5jaFR5cGVzW2tleUluZGV4XVswXVxuICAgIH07XG4gIH1cbn1cbmV4cG9ydHMuQnJhbmNoQnlLZXlQYXJzZXIgPSBCcmFuY2hCeUtleVBhcnNlcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRW51bVBhcnNlciA9IHZvaWQgMDtcbnZhciBfUGFyc2VyID0gcmVxdWlyZShcIi4uL1BhcnNlclwiKTtcbnZhciBfVXRpbCA9IHJlcXVpcmUoXCIuLi9VdGlsXCIpO1xuY2xhc3MgRW51bVBhcnNlciBleHRlbmRzIF9QYXJzZXIuUGFyc2VyIHtcbiAgY29uc3RydWN0b3IodmFsdWVzKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnZhbHVlcyA9IHZhbHVlcy50b1NvcnRlZCgoYSwgYikgPT4gKDAsIF9VdGlsLnN0cmluZ1NvcnQpKFN0cmluZyhhKSwgU3RyaW5nKGIpKSk7XG4gICAgdGhpcy5tYWdpYyA9ICgwLCBfVXRpbC5oYXNoU3RyKShgRW51bVBhcnNlcjoke3RoaXMudmFsdWVzLmpvaW4oJywnKX1gKTtcbiAgfVxuICBlbmNvZGVJbnRlcm5hbChjdHgsIHZhbHVlKSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLnZhbHVlcy5maW5kSW5kZXgodiA9PiB2ID09IHZhbHVlKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VudW1QYXJzZXI6IEZhaWxlZCB0byBmaW5kIGtleSBpbmRleC4nKTtcbiAgICB9XG4gICAgKDAsIF9VdGlsLmVuY29kZUluZGV4KShjdHgsIGluZGV4LCB0aGlzLnZhbHVlcy5sZW5ndGgpO1xuICB9XG4gIGRlY29kZUludGVybmFsKGN0eCkge1xuICAgIGNvbnN0IGluZGV4ID0gKDAsIF9VdGlsLmRlY29kZUluZGV4KShjdHgsIHRoaXMudmFsdWVzLmxlbmd0aCk7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVzW2luZGV4XTtcbiAgfVxufVxuZXhwb3J0cy5FbnVtUGFyc2VyID0gRW51bVBhcnNlcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRW51bUZhbGxiYWNrUGFyc2VyID0gdm9pZCAwO1xudmFyIF9QYXJzZXIgPSByZXF1aXJlKFwiLi4vUGFyc2VyXCIpO1xudmFyIF9VdGlsID0gcmVxdWlyZShcIi4uL1V0aWxcIik7XG52YXIgX1N0cmluZyA9IHJlcXVpcmUoXCIuL1N0cmluZ1wiKTtcbmNsYXNzIEVudW1GYWxsYmFja1BhcnNlciBleHRlbmRzIF9QYXJzZXIuUGFyc2VyIHtcbiAgY29uc3RydWN0b3IodmFsdWVzKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnZhbHVlcyA9IHZhbHVlcy50b1NvcnRlZCgoYSwgYikgPT4gKDAsIF9VdGlsLnN0cmluZ1NvcnQpKGEsIGIpKTtcbiAgICB0aGlzLm1hZ2ljID0gKDAsIF9VdGlsLmhhc2hTdHIpKGBFbnVtRmFsbGJhY2tQYXJzZXI6JHt0aGlzLnZhbHVlcy5qb2luKCcsJyl9YCk7XG4gIH1cbiAgZW5jb2RlSW50ZXJuYWwoY3R4LCB2YWx1ZSkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy52YWx1ZXMuZmluZEluZGV4KHYgPT4gdiA9PSB2YWx1ZSk7XG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgY3R4LmJpdEZpZWxkLnB1dEJpdChmYWxzZSk7XG4gICAgICBjdHguZW5jb2RlKG5ldyBfU3RyaW5nLlN0cmluZ1BhcnNlcigpLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN0eC5iaXRGaWVsZC5wdXRCaXQodHJ1ZSk7XG4gICAgICAoMCwgX1V0aWwuZW5jb2RlSW5kZXgpKGN0eCwgaW5kZXgsIHRoaXMudmFsdWVzLmxlbmd0aCk7XG4gICAgfVxuICB9XG4gIGRlY29kZUludGVybmFsKGN0eCkge1xuICAgIGlmIChjdHguYml0RmllbGQuZ2V0Qml0KCkpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gKDAsIF9VdGlsLmRlY29kZUluZGV4KShjdHgsIHRoaXMudmFsdWVzLmxlbmd0aCk7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZXNbaW5kZXhdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3R4LmRlY29kZShuZXcgX1N0cmluZy5TdHJpbmdQYXJzZXIoKSk7XG4gICAgfVxuICB9XG59XG5leHBvcnRzLkVudW1GYWxsYmFja1BhcnNlciA9IEVudW1GYWxsYmFja1BhcnNlcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFycmF5UGFyc2VyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9BcnJheS5BcnJheVBhcnNlcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCaWdJbnRQYXJzZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX0JpZ0ludC5CaWdJbnRQYXJzZXI7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQmluYXJ5UGFyc2VyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9CaW5hcnkuQmluYXJ5UGFyc2VyO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJpdElPXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9JTy5CaXRJTztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCb29sZWFuUGFyc2VyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9Cb29sZWFuLkJvb2xlYW5QYXJzZXI7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQnJhbmNoQnlLZXlQYXJzZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX0JyYW5jaEJ5S2V5LkJyYW5jaEJ5S2V5UGFyc2VyO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJyYW5jaFBhcnNlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfQnJhbmNoLkJyYW5jaFBhcnNlcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEYXRlUGFyc2VyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9EYXRlLkRhdGVQYXJzZXI7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGVjb2RlQ29udGV4dFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfUGFyc2VyLkRlY29kZUNvbnRleHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRW5jb2RlQ29udGV4dFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfUGFyc2VyLkVuY29kZUNvbnRleHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRW51bUZhbGxiYWNrUGFyc2VyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9FbnVtRmFsbGJhY2suRW51bUZhbGxiYWNrUGFyc2VyO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVudW1QYXJzZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX0VudW0uRW51bVBhcnNlcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJT1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfSU8uSU87XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTWFwUGFyc2VyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9NYXAuTWFwUGFyc2VyO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1vZGlmeUhhc2hQYXJzZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX01vZGlmeUhhc2guTW9kaWZ5SGFzaFBhcnNlcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOdWxsYWJsZVBhcnNlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfTnVsbGFibGUuTnVsbGFibGVQYXJzZXI7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTnVtYmVyUGFyc2VyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9OdW1iZXIuTnVtYmVyUGFyc2VyO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk9iamVjdFBhcnNlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfT2JqZWN0Lk9iamVjdFBhcnNlcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQYXJzZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX1BhcnNlci5QYXJzZXI7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUGFyc2VyVHlwZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfUGFyc2VyLlBhcnNlclR5cGU7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3RyaW5nUGFyc2VyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9TdHJpbmcuU3RyaW5nUGFyc2VyO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlR1cGxlUGFyc2VyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9UdXBsZS5UdXBsZVBhcnNlcjtcbiAgfVxufSk7XG5leHBvcnRzLmFycmF5ID0gYXJyYXk7XG5leHBvcnRzLmJpZ2ludCA9IGJpZ2ludDtcbmV4cG9ydHMuYmluYXJ5ID0gYmluYXJ5O1xuZXhwb3J0cy5ib29sZWFuID0gYm9vbGVhbjtcbmV4cG9ydHMuYnJhbmNoID0gYnJhbmNoO1xuZXhwb3J0cy5icmFuY2hCeUtleSA9IGJyYW5jaEJ5S2V5O1xuZXhwb3J0cy5kYXRlID0gZGF0ZTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZUJpZ0ludFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfVXRpbC5kZWNvZGVCaWdJbnQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlSW5kZXhcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX1V0aWwuZGVjb2RlSW5kZXg7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZW5jb2RlQmlnSW50XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9VdGlsLmVuY29kZUJpZ0ludDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlbmNvZGVJbmRleFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfVXRpbC5lbmNvZGVJbmRleDtcbiAgfVxufSk7XG5leHBvcnRzLmVudW0gPSBfZW51bTtcbmV4cG9ydHMuZW51bUZhbGxiYWNrID0gZW51bUZhbGxiYWNrO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaGFzaFN0clwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfVXRpbC5oYXNoU3RyO1xuICB9XG59KTtcbmV4cG9ydHMubWFwID0gbWFwO1xuZXhwb3J0cy5tb2RpZnloYXNoID0gbW9kaWZ5aGFzaDtcbmV4cG9ydHMubnVsbGFibGUgPSBudWxsYWJsZTtcbmV4cG9ydHMubnVtYmVyID0gbnVtYmVyO1xuZXhwb3J0cy5vYmplY3QgPSBvYmplY3Q7XG5leHBvcnRzLnN0cmluZyA9IHN0cmluZztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0cmluZ1NvcnRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX1V0aWwuc3RyaW5nU29ydDtcbiAgfVxufSk7XG5leHBvcnRzLnR1cGxlID0gdHVwbGU7XG52YXIgX1BhcnNlciA9IHJlcXVpcmUoXCIuL1BhcnNlclwiKTtcbnZhciBfSU8gPSByZXF1aXJlKFwiLi9JT1wiKTtcbnZhciBfVXRpbCA9IHJlcXVpcmUoXCIuL1V0aWxcIik7XG52YXIgX01vZGlmeUhhc2ggPSByZXF1aXJlKFwiLi9wYXJzZXIvTW9kaWZ5SGFzaFwiKTtcbnZhciBfQmlnSW50ID0gcmVxdWlyZShcIi4vcGFyc2VyL0JpZ0ludFwiKTtcbnZhciBfQmluYXJ5ID0gcmVxdWlyZShcIi4vcGFyc2VyL0JpbmFyeVwiKTtcbnZhciBfTnVtYmVyID0gcmVxdWlyZShcIi4vcGFyc2VyL051bWJlclwiKTtcbnZhciBfU3RyaW5nID0gcmVxdWlyZShcIi4vcGFyc2VyL1N0cmluZ1wiKTtcbnZhciBfQm9vbGVhbiA9IHJlcXVpcmUoXCIuL3BhcnNlci9Cb29sZWFuXCIpO1xudmFyIF9OdWxsYWJsZSA9IHJlcXVpcmUoXCIuL3BhcnNlci9OdWxsYWJsZVwiKTtcbnZhciBfT2JqZWN0ID0gcmVxdWlyZShcIi4vcGFyc2VyL09iamVjdFwiKTtcbnZhciBfQXJyYXkgPSByZXF1aXJlKFwiLi9wYXJzZXIvQXJyYXlcIik7XG52YXIgX01hcCA9IHJlcXVpcmUoXCIuL3BhcnNlci9NYXBcIik7XG52YXIgX0RhdGUgPSByZXF1aXJlKFwiLi9wYXJzZXIvRGF0ZVwiKTtcbnZhciBfVHVwbGUgPSByZXF1aXJlKFwiLi9wYXJzZXIvVHVwbGVcIik7XG52YXIgX0JyYW5jaCA9IHJlcXVpcmUoXCIuL3BhcnNlci9CcmFuY2hcIik7XG52YXIgX0JyYW5jaEJ5S2V5ID0gcmVxdWlyZShcIi4vcGFyc2VyL0JyYW5jaEJ5S2V5XCIpO1xudmFyIF9FbnVtID0gcmVxdWlyZShcIi4vcGFyc2VyL0VudW1cIik7XG52YXIgX0VudW1GYWxsYmFjayA9IHJlcXVpcmUoXCIuL3BhcnNlci9FbnVtRmFsbGJhY2tcIik7XG4vKipcbiAqIE1vZGlmaWVzIHRoZSBoYXNoIG9mIHRoZSBpbnB1dCBwYXJzZXIuXG4gKiBAcGFyYW0gbW9kaWZpZXIgU3RyaW5nIG1vZGlmaWVyLlxuICogQHBhcmFtIHBhcnNlciBQYXJzZXIgdG8gbW9kaWZ5IGhhc2ggb2YuXG4gKi9cbmZ1bmN0aW9uIG1vZGlmeWhhc2gobW9kaWZpZXIsIHBhcnNlcikge1xuICByZXR1cm4gbmV3IF9Nb2RpZnlIYXNoLk1vZGlmeUhhc2hQYXJzZXIobW9kaWZpZXIsIHBhcnNlcik7XG59XG4vKipcbiAqIFN0b3JlIGFueSBzaXplIGJpZ2ludC5cbiAqIFdpbGwgdGhyb3cgaWYgcGFyc2VyIGlzIHRyeWluZyB0byBwYXJzZSBuZWdhdGl2ZSBiaWdpbnQgd2hpbGUgcGFyc2VyIGlzIHVuc2lnbmVkLlxuICogQHBhcmFtIHNpZ25lZCBJZiBiaWdpbnQgaXMgc2lnbmVkLlxuICovXG5mdW5jdGlvbiBiaWdpbnQoc2lnbmVkKSB7XG4gIHJldHVybiBuZXcgX0JpZ0ludC5CaWdJbnRQYXJzZXIoc2lnbmVkKTtcbn1cbi8qKlxuICogU3RvcmUgYW55IHNpemUgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBiaW5hcnkoKSB7XG4gIHJldHVybiBuZXcgX0JpbmFyeS5CaW5hcnlQYXJzZXIoKTtcbn1cbi8qKlxuICogU3RvcmVzIGEgbnVtYmVyLlxuICogQHBhcmFtIHR5cGUgTnVtYmVyIHJlcHJlc2VudGF0aW9uIHRvIHN0b3JlLlxuICovXG5mdW5jdGlvbiBudW1iZXIodHlwZSkge1xuICByZXR1cm4gbmV3IF9OdW1iZXIuTnVtYmVyUGFyc2VyKHR5cGUpO1xufVxuLyoqXG4gKiBTdG9yZXMgYSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZygpIHtcbiAgcmV0dXJuIG5ldyBfU3RyaW5nLlN0cmluZ1BhcnNlcigpO1xufVxuLyoqXG4gKiBTdG9yZXMgYSBib29sZWFuLlxuICovXG5mdW5jdGlvbiBib29sZWFuKCkge1xuICByZXR1cm4gbmV3IF9Cb29sZWFuLkJvb2xlYW5QYXJzZXIoKTtcbn1cbi8qKlxuICogTWFrZXMgdHlwZSBudWxsYWJsZS5cbiAqIEBwYXJhbSB0eXBlIFR5cGUgdG8gbWFrZSBudWxsYWJsZS5cbiAqL1xuZnVuY3Rpb24gbnVsbGFibGUodHlwZSkge1xuICByZXR1cm4gbmV3IF9OdWxsYWJsZS5OdWxsYWJsZVBhcnNlcih0eXBlKTtcbn1cbi8qKlxuICogU3RvcmVzIG11bHRpcGxlIHR5cGVzIHdpdGgga2V5cy5cbiAqIEBwYXJhbSBvYmpUeXBlIE9iamVjdCBwYXJzZXIgbWFwIHRvIHN0b3JlLlxuICovXG5mdW5jdGlvbiBvYmplY3Qob2JqVHlwZSkge1xuICByZXR1cm4gbmV3IF9PYmplY3QuT2JqZWN0UGFyc2VyKG9ialR5cGUpO1xufVxuLyoqXG4gKiBTdG9yZXMgdHlwZSBhcyBhbiBhcnJheS5cbiAqIEBwYXJhbSB0eXBlIEFycmF5IHR5cGUuXG4gKi9cbmZ1bmN0aW9uIGFycmF5KHR5cGUpIHtcbiAgcmV0dXJuIG5ldyBfQXJyYXkuQXJyYXlQYXJzZXIodHlwZSk7XG59XG4vKipcbiAqIFN0b3JlcyBhIGtleSB2YWx1ZSBtYXAuXG4gKiBAcGFyYW0ga2V5VHlwZSBLZXkgdHlwZS5cbiAqIEBwYXJhbSB2YWx1ZVR5cGUgVmFsdWUgdHlwZS5cbiAqL1xuZnVuY3Rpb24gbWFwKGtleVR5cGUsIHZhbHVlVHlwZSkge1xuICByZXR1cm4gbmV3IF9NYXAuTWFwUGFyc2VyKGtleVR5cGUsIHZhbHVlVHlwZSk7XG59XG4vKipcbiAqIFN0b3JlcyBhIGRhdGUuXG4gKi9cbmZ1bmN0aW9uIGRhdGUoKSB7XG4gIHJldHVybiBuZXcgX0RhdGUuRGF0ZVBhcnNlcigpO1xufVxuLyoqXG4gKiBTdG9yZXMgYSB0dXBsZSBvZiB0eXBlcy5cbiAqIEBwYXJhbSB0dXBsZVR5cGVzIFR1cGxlIGFycmF5IG9mIHR5cGVzLlxuICovXG5mdW5jdGlvbiB0dXBsZSh0dXBsZVR5cGVzKSB7XG4gIHJldHVybiBuZXcgX1R1cGxlLlR1cGxlUGFyc2VyKHR1cGxlVHlwZXMpO1xufVxuLyoqXG4gKiBCcmFuY2ggcGFyc2VyIHR5cGUgYnkgdmFsdWUuXG4gKiBAcGFyYW0gYnJhbmNoVHlwZXMgQnJhbmNoIHZhbHVlIHR5cGUgbWFwLlxuICovXG5mdW5jdGlvbiBicmFuY2goYnJhbmNoVHlwZXMpIHtcbiAgcmV0dXJuIG5ldyBfQnJhbmNoLkJyYW5jaFBhcnNlcihicmFuY2hUeXBlcyk7XG59XG4vKipcbiAqIEJyYW5jaCBwYXJzZXIgdHlwZSBieSBvYmplY3Qga2V5LlxuICogQHBhcmFtIGtleSBLZXkgdGhhdCBzdG9yZXMgdGhlIHR5cGUgYnJhbmNoLlxuICogQHBhcmFtIGJyYW5jaFR5cGVNYXAgVHlwZSBicmFuY2ggbWFwLCBUaGUga2V5IG5hbWVzIGFyZSB1c2VkIGFzIGJyYW5jaCBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYnJhbmNoQnlLZXkoa2V5LCBicmFuY2hUeXBlTWFwKSB7XG4gIHJldHVybiBuZXcgX0JyYW5jaEJ5S2V5LkJyYW5jaEJ5S2V5UGFyc2VyKGtleSwgYnJhbmNoVHlwZU1hcCk7XG59XG4vKipcbiAqIFN0b3JlIGFuIGVudW0uXG4gKiBAcGFyYW0gdmFsdWVzIFBvc3NpYmxlIGVudW0gdmFsdWVzLlxuICovXG5mdW5jdGlvbiBfZW51bSh2YWx1ZXMpIHtcbiAgcmV0dXJuIG5ldyBfRW51bS5FbnVtUGFyc2VyKHZhbHVlcyk7XG59XG4vKipcbiAqIFN0b3JlcyBhbiBlbnVtLlxuICogSWYgZW51bSBkb2Vzbid0IG1hdGNoLCBwYXJzZXIgd2lsbCBzdG9yZSB0aGUgd2hvbGUgdmFsdWUuXG4gKiBAcGFyYW0gdmFsdWVzIFBvc3NpYmxlIGVudW0gdmFsdWVzLlxuICovXG5mdW5jdGlvbiBlbnVtRmFsbGJhY2sodmFsdWVzKSB7XG4gIHJldHVybiBuZXcgX0VudW1GYWxsYmFjay5FbnVtRmFsbGJhY2tQYXJzZXIodmFsdWVzKTtcbn0iLCJcblxuXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80MTI1MzMxMCNhbnN3ZXItNTEzOTk3ODFcbmV4cG9ydCB0eXBlIEFycmF5RWxlbWVudDxBcnJheVR5cGUgZXh0ZW5kcyByZWFkb25seSB1bmtub3duW10+ID0gXG4gICAgQXJyYXlUeXBlIGV4dGVuZHMgcmVhZG9ubHkgKGluZmVyIEVsZW1lbnRUeXBlKVtdID8gRWxlbWVudFR5cGUgOiBuZXZlcjtcblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBjbGFtcE5vcm1hbCh4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiAoeCA8IDApID8gMCA6ICgoeCA+IDEpID8gMSA6IHgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2UoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguc3FydCgoeDIgLSB4MSkgKiogMiArICh5MiAtIHkxKSAqKiAyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcFJhbmdlKHZhbHVlOiBudW1iZXIsIHZhbHVlTWluOiBudW1iZXIsIHZhbHVlTWF4OiBudW1iZXIsIG91dE1pbjogbnVtYmVyLCBvdXRNYXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYodmFsdWUgPCB2YWx1ZU1pbiB8fCB2YWx1ZSA+IHZhbHVlTWF4KSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgTWFwcGVkIHZhbHVlIG91dHNpZGUgb2YgbWFwcGluZyByYW5nZS4gbWFwUmFuZ2UoJHt2YWx1ZX0sICR7dmFsdWVNaW59LCAke3ZhbHVlTWF4fSwgJHtvdXRNaW59LCAke291dE1heH0pYCk7XG4gICAgfVxuICAgIHJldHVybiBvdXRNaW4gKyAoKHZhbHVlIC0gdmFsdWVNaW4pIC8gKHZhbHVlTWF4IC0gdmFsdWVNaW4pKSAqIChvdXRNYXggLSBvdXRNaW4pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hcFJhbmdlSW50KHZhbHVlOiBudW1iZXIsIHZhbHVlTWluOiBudW1iZXIsIHZhbHVlTWF4OiBudW1iZXIsIG91dE1pbjogbnVtYmVyLCBvdXRNYXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IobWFwUmFuZ2UodmFsdWUsIHZhbHVlTWluLCB2YWx1ZU1heCwgb3V0TWluLCBvdXRNYXggKyAxKSk7XG59XG5cblxuXG4vKipcbiAqIEBwYXJhbSB2YWx1ZSBVTlNJR05FRCBWQUxVRVxuICovXG5leHBvcnQgZnVuY3Rpb24gYml0c1RvUmVwcmVzZW50VmFsdWUodmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICB3aGlsZSh2YWx1ZSkge1xuICAgICAgICB2YWx1ZSAmPSB2YWx1ZSAtIDE7XG4gICAgICAgIGNvdW50Kys7XG4gICAgfVxuICAgIHJldHVybiBjb3VudDtcbn1cblxuXG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGEgc3BpcmFsIHBhdHRlcm4uXG4gKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zOTgyOTkjYW5zd2VyLTMzNjM5ODc1XG4gKiBAcGFyYW0gb2Zmc2V0WCBDZW50ZXIgWCBvZiBzcGlyYWxcbiAqIEBwYXJhbSBvZmZzZXRZIENlbnRlciBZIG9mIHNwaXJhbFxuICovXG5leHBvcnQgZnVuY3Rpb24qIHNwaXJhbEl0ZXIob2Zmc2V0WDogbnVtYmVyLCBvZmZzZXRZOiBudW1iZXIpOiBHZW5lcmF0b3I8eyB4OiBudW1iZXIsIHk6IG51bWJlciB9PiB7XG4gICAgbGV0IHggPSBvZmZzZXRYO1xuICAgIGxldCB5ID0gb2Zmc2V0WTtcbiAgICBsZXQgZCA9IDE7XG4gICAgbGV0IG0gPSAxO1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgd2hpbGUoMiAqIHggKiBkIDwgbSkge1xuICAgICAgICAgICAgeWllbGQgeyB4LCB5IH07XG4gICAgICAgICAgICB4ICs9IGQ7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUoMiAqIHkgKiBkIDwgbSkge1xuICAgICAgICAgICAgeWllbGQgeyB4LCB5IH07XG4gICAgICAgICAgICB5ICs9IGQ7XG4gICAgICAgIH1cbiAgICAgICAgZCA9IC0xICogZDtcbiAgICAgICAgbSArPSAxO1xuICAgIH1cbn1cblxuXG5cblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2FudmFzMmRDb250ZXh0KGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQsIGFzUmVmPzogYm9vbGVhbiwgb3B0aW9ucz86IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRFNldHRpbmdzKTogWyBIVE1MQ2FudmFzRWxlbWVudCwgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIF07XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2FudmFzMmRDb250ZXh0KGltZzogSFRNTEltYWdlRWxlbWVudCwgb3B0aW9ucz86IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRFNldHRpbmdzKTogWyBIVE1MQ2FudmFzRWxlbWVudCwgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIF07XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2FudmFzMmRDb250ZXh0KHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBvcHRpb25zPzogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEU2V0dGluZ3MpOiBbIEhUTUxDYW52YXNFbGVtZW50LCBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgXTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDYW52YXMyZENvbnRleHQob3B0aW9ucz86IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRFNldHRpbmdzKTogWyBIVE1MQ2FudmFzRWxlbWVudCwgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIF07XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2FudmFzMmRDb250ZXh0KGE/OiBhbnksIGI/OiBhbnksIGM/OiBhbnkpOiBbIEhUTUxDYW52YXNFbGVtZW50LCBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgXSB7XG4gICAgaWYoYSBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50KSB7XG4gICAgICAgIGxldCBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuICAgICAgICBpZihiID8/IHRydWUpIHtcbiAgICAgICAgICAgIGNhbnZhcyA9IGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGEud2lkdGg7XG4gICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gYS5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJywgYyBhcyBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkRTZXR0aW5ncyk7XG4gICAgICAgIGlmKCFjdHgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignMmQgY2FudmFzIGNvbnRleHQgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIG1hY2hpbmUgb3IgYnJvd3Nlci4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZighKGIgPz8gdHJ1ZSkpIHtcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoYSwgMCwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFsgYSwgY3R4IF07XG4gICAgfSBlbHNlIGlmKGEgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICBjYW52YXMud2lkdGggPSBhLndpZHRoO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gYS5oZWlnaHQ7XG4gICAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcsIGIgYXMgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEU2V0dGluZ3MpO1xuICAgICAgICBpZighY3R4KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJzJkIGNhbnZhcyBjb250ZXh0IGlzIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBtYWNoaW5lIG9yIGJyb3dzZXIuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmRyYXdJbWFnZShhLCAwLCAwKTtcbiAgICAgICAgcmV0dXJuIFsgY2FudmFzLCBjdHggXTtcbiAgICB9IGVsc2UgaWYodHlwZW9mIGEgPT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IGE7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBiO1xuICAgICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnLCBjIGFzIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRFNldHRpbmdzKTtcbiAgICAgICAgaWYoIWN0eCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCcyZCBjYW52YXMgY29udGV4dCBpcyBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgbWFjaGluZSBvciBicm93c2VyLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbIGNhbnZhcywgY3R4IF07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcsIGEgYXMgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEU2V0dGluZ3MpO1xuICAgICAgICBpZighY3R4KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJzJkIGNhbnZhcyBjb250ZXh0IGlzIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBtYWNoaW5lIG9yIGJyb3dzZXIuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFsgY2FudmFzLCBjdHggXTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVDYW52YXNDVFg6IEludmFsaWQgYXJndW1lbnRzLicpO1xufVxuXG5cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBhd2FpdEltYWdlTG9hZChpbWc6IEhUTUxJbWFnZUVsZW1lbnQgfCBzdHJpbmcpOiBQcm9taXNlPEhUTUxJbWFnZUVsZW1lbnQ+IHtcbiAgICBpZih0eXBlb2YgaW1nID09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnN0IHNyYyA9IGltZztcbiAgICAgICAgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgICAgIGltZy5zcmMgPSBzcmM7XG4gICAgfVxuXG4gICAgaW1nLmxvYWRpbmcgPSAnZWFnZXInO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgaWYoaW1nLmNvbXBsZXRlICYmIGltZy5uYXR1cmFsV2lkdGggIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGltZyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvbkxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICBpbWcucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uTG9hZCk7XG4gICAgICAgICAgICBpbWcucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBvbkVycm9yKTtcbiAgICAgICAgICAgIHJlc29sdmUoaW1nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvbkVycm9yID0gKGV2OiBFcnJvckV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpbWcucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uTG9hZCk7XG4gICAgICAgICAgICBpbWcucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBvbkVycm9yKTtcbiAgICAgICAgICAgIHJlamVjdCgnRmFpbGVkIHRvIGxvYWQgaW1hZ2UuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uTG9hZCk7XG4gICAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIG9uRXJyb3IpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SW1hZ2VEYXRhKGltZzogSFRNTEltYWdlRWxlbWVudCB8IHN0cmluZyk6IFByb21pc2U8SW1hZ2VEYXRhPiB7XG4gICAgaW1nID0gYXdhaXQgYXdhaXRJbWFnZUxvYWQoaW1nKTtcbiAgICBjb25zdCBbIGNhbnZhcywgY3R4IF0gPSBjcmVhdGVDYW52YXMyZENvbnRleHQoaW1nKTtcbiAgICByZXR1cm4gY3R4LmdldEltYWdlRGF0YSgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xufVxuXG5cbiIsIlxuaW1wb3J0ICogYXMgYnQgZnJvbSBcImJpbnR5cGVcIjtcbmltcG9ydCB7IENIVU5LX1NJWkUgfSBmcm9tIFwiLi4vQ29uc3RhbnRzXCI7XG5pbXBvcnQgdHlwZSB7IFdvcmxkIH0gZnJvbSBcIi4uL1dvcmxkXCI7XG5pbXBvcnQgdHlwZSB7IEJsdWViZXJyeVRpbGUgfSBmcm9tIFwiLi9iaW9tZS9CbHVlYmVycnlcIjtcbmltcG9ydCB0eXBlIHsgQ2hvY29sYXRlVGlsZSB9IGZyb20gXCIuL2Jpb21lL0Nob2NvbGF0ZVwiO1xuaW1wb3J0IHR5cGUgeyBTdHJhd2JlcnJ5VGlsZSB9IGZyb20gXCIuL2Jpb21lL1N0cmF3YmVycnlcIjtcbmltcG9ydCB0eXBlIHsgU3Ryb29wd2FmZWxUaWxlIH0gZnJvbSBcIi4vYmlvbWUvU3Ryb29wd2FmZWxcIjtcbmltcG9ydCB0eXBlIHsgVmFuaWxsYVRpbGUgfSBmcm9tIFwiLi9iaW9tZS9WYW5pbGxhXCI7XG5pbXBvcnQgdHlwZSB7IFdhZmZsZVRpbGUgfSBmcm9tIFwiLi9iaW9tZS9XYWZmbGVcIjtcbmltcG9ydCB0eXBlIHsgQ29va2llc0FuZENyZWFtVGlsZSB9IGZyb20gXCIuL2Jpb21lL0Nvb2tpZXNBbmRDcmVhbVwiO1xuXG5cblxuZXhwb3J0IGNvbnN0IFRJTEVfTk9ORV9ORUFSQlkgPSBTeW1ib2woJ1RJTEVfTk9fTkVBUkJZJyk7XG5leHBvcnQgdHlwZSBUSUxFX05PTkVfTkVBUkJZPSB0eXBlb2YgVElMRV9OT05FX05FQVJCWTtcblxuXG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUaWxlIHtcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgdHlwZTogc3RyaW5nO1xuXG4gICAgcHVibGljIHJlYWRvbmx5IHdvcmxkOiBXb3JsZDtcbiAgICBwdWJsaWMgcmVhZG9ubHkgeDogbnVtYmVyO1xuICAgIHB1YmxpYyByZWFkb25seSB5OiBudW1iZXI7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3Iod29ybGQ6IFdvcmxkLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICB0aGlzLndvcmxkID0gd29ybGQ7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgTnVtYmVyIG9mIG1pbmVzIHRoaXMgdGlsZSBoYXNcbiAgICAgKi9cbiAgICBwdWJsaWMgYWJzdHJhY3QgbnVtTWluZXMoKTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIE51bWJlciBvZiBmbGFncyB0aGlzIHRpbGUgaGFzXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IG51bUZsYWdzKCk6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIE1pbmVzIHNlYXJjaCBwYXR0ZXJuXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IHNlYXJjaFBhdHRlcm46IHsgeDogbnVtYmVyLCB5OiBudW1iZXIgfVtdO1xuICAgIHByaXZhdGUgbWluZXNOZWFyYnlDYWNoZTogbnVtYmVyIHwgVElMRV9OT05FX05FQVJCWSB8IG51bGwgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIE51bWJlciBvZiBtaW5lcyBpbiBzZWFyY2ggcGF0dGVyblxuICAgICAqL1xuICAgIHB1YmxpYyBtaW5lc05lYXJieSh1c2VDYWNoZTogYm9vbGVhbiA9IGZhbHNlKTogbnVtYmVyIHwgVElMRV9OT05FX05FQVJCWSB7XG4gICAgICAgIGlmKHRoaXMubWluZXNOZWFyYnlDYWNoZSAhPT0gbnVsbCAmJiB1c2VDYWNoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWluZXNOZWFyYnlDYWNoZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbm9uZTogYm9vbGVhbiA9IHRydWU7XG4gICAgICAgIGxldCBjb3VudDogbnVtYmVyID0gMDtcbiAgICAgICAgZm9yKGNvbnN0IG9mZnNldCBvZiB0aGlzLnNlYXJjaFBhdHRlcm4pIHtcbiAgICAgICAgICAgIGNvdW50ICs9IHRoaXMud29ybGQuZ2V0VGlsZSh0aGlzLnggKyBvZmZzZXQueCwgdGhpcy55ICsgb2Zmc2V0LnkpLm51bU1pbmVzKCk7XG4gICAgICAgICAgICBpZihjb3VudCAhPSAwKSBub25lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5taW5lc05lYXJieUNhY2hlID0gKGNvdW50ID09IDAgJiYgbm9uZSkgPyBUSUxFX05PTkVfTkVBUkJZIDogY291bnQ7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbmVzTmVhcmJ5Q2FjaGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIE51bWJlciBvZiBmbGFncyBpbiBzZWFyY2ggcGF0dGVyblxuICAgICAqL1xuICAgIHB1YmxpYyBmbGFnc05lYXJieSgpOiBudW1iZXIgfCBUSUxFX05PTkVfTkVBUkJZIHtcbiAgICAgICAgbGV0IG5vbmU6IGJvb2xlYW4gPSB0cnVlO1xuICAgICAgICBsZXQgY291bnQ6IG51bWJlciA9IDA7XG4gICAgICAgIGZvcihjb25zdCBvZmZzZXQgb2YgdGhpcy5zZWFyY2hQYXR0ZXJuKSB7XG4gICAgICAgICAgICBjb3VudCArPSB0aGlzLndvcmxkLmdldFRpbGUodGhpcy54ICsgb2Zmc2V0LngsIHRoaXMueSArIG9mZnNldC55KS5udW1GbGFncygpO1xuICAgICAgICAgICAgaWYoY291bnQgIT0gMCkgbm9uZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoY291bnQgPT0gMCAmJiBub25lKSA/IFRJTEVfTk9ORV9ORUFSQlkgOiBjb3VudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2UgZmxhZyBhY3Rpb25cbiAgICAgKi9cbiAgICBwdWJsaWMgYWJzdHJhY3QgZmxhZygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFVzZSByZXZlYWwgYWN0aW9uXG4gICAgICogQHJldHVybnMgSWYgdGlsZSB3YXMgcmV2ZWFsZWRcbiAgICAgKi9cbiAgICBwdWJsaWMgYWJzdHJhY3QgcmV2ZWFsKCk6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBJZiBwbGF5ZXIgaGFzIGRpZWQgb24gdGhpcyB0aWxlLlxuICAgICAqL1xuICAgIHB1YmxpYyBpc0RlYXRoVGlsZSgpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgY2h1bmsgPSB0aGlzLndvcmxkLmdldEdlbmVyYXRlZENodW5rKE1hdGguZmxvb3IodGhpcy54IC8gQ0hVTktfU0laRSksIE1hdGguZmxvb3IodGhpcy55IC8gQ0hVTktfU0laRSkpO1xuICAgICAgICBjb25zdCBjaHVua1Bvc1ggPSB0aGlzLnggLSBjaHVuay5jaHVua1ggKiBDSFVOS19TSVpFO1xuICAgICAgICBjb25zdCBjaHVua1Bvc1kgPSB0aGlzLnkgLSBjaHVuay5jaHVua1kgKiBDSFVOS19TSVpFO1xuICAgICAgICByZXR1cm4gY2h1bmsuZGVhdGhzLnNvbWUoZGVhdGggPT4gZGVhdGgueCA9PSBjaHVua1Bvc1ggJiYgZGVhdGgueSA9PSBjaHVua1Bvc1kpO1xuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgYWJzdHJhY3Qgc2F2ZShpbzogYnQuQml0SU8pOiB2b2lkO1xuICAgIHB1YmxpYyBzdGF0aWMgbG9hZCh3b3JsZDogV29ybGQsIHg6IG51bWJlciwgeTogbnVtYmVyLCBpbzogYnQuQml0SU8pOiBWYWxpZFRpbGUge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RpbGUubG9hZCBuZWVkcyB0byBiZSBpbXBsZW1lbnRlZCBvbiBkZXJpdmVkIGNsYXNzLicpO1xuICAgIH1cbn1cblxuXG5cbi8vIFRPRE86IFByb2JhYmx5IHJlbmFtZSBhYm92ZSB0byBUaWxlQmFzZSBhbmQgcmVuYW1lIGJlbG93IHR5cGUgdG8ganVzdCBUaWxlLlxuLy8gVE9ETzogU3dhcCBuYW1lIGFyb3VuZCwgZWc6IFZhbmlsbGFUaWxlIC0+IFRpbGVWYW5pbGxhXG5leHBvcnQgdHlwZSBWYWxpZFRpbGUgPSBWYW5pbGxhVGlsZSB8IENob2NvbGF0ZVRpbGUgfCBXYWZmbGVUaWxlIHwgU3Ryb29wd2FmZWxUaWxlIHwgQmx1ZWJlcnJ5VGlsZSB8IFN0cmF3YmVycnlUaWxlIHwgQ29va2llc0FuZENyZWFtVGlsZTtcbi8vIEZJWE1FOiBUaGlzIGlzIGR1bWIsIHdoeSBub3QgYHR5cGVvZiBBcnJheUVsZW1lbnQ8VmFsaWRUaWxlPmBcbmV4cG9ydCB0eXBlIFZhbGlkVGlsZUNvbnN0cnVjdG9yID0gdHlwZW9mIFZhbmlsbGFUaWxlIHwgdHlwZW9mIENob2NvbGF0ZVRpbGUgfCB0eXBlb2YgV2FmZmxlVGlsZSB8IHR5cGVvZiBTdHJvb3B3YWZlbFRpbGUgfCB0eXBlb2YgQmx1ZWJlcnJ5VGlsZSB8IHR5cGVvZiBTdHJhd2JlcnJ5VGlsZSB8IHR5cGVvZiBDb29raWVzQW5kQ3JlYW1UaWxlO1xuXG5cbiIsIlxuaW1wb3J0ICogYXMgYnQgZnJvbSBcImJpbnR5cGVcIjtcbmltcG9ydCB0eXBlIHsgV29ybGQgfSBmcm9tIFwiLi4vV29ybGRcIjtcbmltcG9ydCB7IFRpbGUsIHR5cGUgVmFsaWRUaWxlIH0gZnJvbSBcIi4vVGlsZVwiO1xuaW1wb3J0IHsgYml0c1RvUmVwcmVzZW50VmFsdWUgfSBmcm9tIFwiJGxpYi9VdGlsXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBNdWx0aU1pbmVUaWxlIGV4dGVuZHMgVGlsZSB7XG4gICAgcHVibGljIHJlYWRvbmx5IF9udW1NaW5lczogbnVtYmVyO1xuICAgIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBudW1NYXhNaW5lczogbnVtYmVyO1xuICAgIHB1YmxpYyBfbnVtRmxhZ3M6IG51bWJlciA9IDA7XG4gICAgcHVibGljIGlzUmV2ZWFsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih3b3JsZDogV29ybGQsIHg6IG51bWJlciwgeTogbnVtYmVyLCBudW1NaW5lczogbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKHdvcmxkLCB4LCB5KTtcbiAgICAgICAgdGhpcy5fbnVtTWluZXMgPSBudW1NaW5lcztcbiAgICB9XG5cbiAgICBwdWJsaWMgbnVtTWluZXMoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX251bU1pbmVzOyB9XG4gICAgcHVibGljIG51bUZsYWdzKCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9udW1GbGFnczsgfVxuXG4gICAgcHVibGljIHJlYWRvbmx5IHNlYXJjaFBhdHRlcm46IHsgeDogbnVtYmVyLCB5OiBudW1iZXIgfVtdID0gW1xuICAgICAgICB7IHg6IC0xLCB5OiAwIH0sXG4gICAgICAgIHsgeDogLTEsIHk6IDEgfSxcbiAgICAgICAgeyB4OiAwLCB5OiAxIH0sXG4gICAgICAgIHsgeDogMSwgeTogMSB9LFxuICAgICAgICB7IHg6IDEsIHk6IDAgfSxcbiAgICAgICAgeyB4OiAxLCB5OiAtMSB9LFxuICAgICAgICB7IHg6IDAsIHk6IC0xIH0sXG4gICAgICAgIHsgeDogLTEsIHk6IC0xIH1cbiAgICBdO1xuXG4gICAgcHVibGljIGZsYWcoKTogdm9pZCB7XG4gICAgICAgIGlmKHRoaXMuaXNSZXZlYWxlZCkgcmV0dXJuO1xuICAgICAgICB0aGlzLl9udW1GbGFncysrO1xuICAgICAgICB0aGlzLl9udW1GbGFncyAlPSAodGhpcy5udW1NYXhNaW5lcyArIDEpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZXZlYWwoKTogYm9vbGVhbiB7XG4gICAgICAgIGlmKHRoaXMuaXNSZXZlYWxlZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZih0aGlzLl9udW1GbGFncyA+IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYodGhpcy5fbnVtTWluZXMgPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5pc1JldmVhbGVkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX251bUZsYWdzID0gdGhpcy5fbnVtTWluZXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgXG5cbiAgICBwdWJsaWMgc2F2ZShpbzogYnQuQml0SU8pOiB2b2lkIHtcbiAgICAgICAgaW8ucHV0Qml0KHRoaXMuaXNSZXZlYWxlZCk7XG4gICAgICAgIGlmKCF0aGlzLmlzUmV2ZWFsZWQpIHtcbiAgICAgICAgICAgIGlvLnB1dEJpdHModGhpcy5fbnVtRmxhZ3MsIGJpdHNUb1JlcHJlc2VudFZhbHVlKHRoaXMubnVtTWF4TWluZXMpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBzdGF0aWMgbG9hZEludGVybmFsPFQgZXh0ZW5kcyBNdWx0aU1pbmVUaWxlPih0aWxlOiBULCBpbzogYnQuQml0SU8pOiBUIHtcbiAgICAgICAgdGlsZS5pc1JldmVhbGVkID0gaW8uZ2V0Qml0KCk7XG4gICAgICAgIGlmKCF0aWxlLmlzUmV2ZWFsZWQpIHtcbiAgICAgICAgICAgIHRpbGUuX251bUZsYWdzID0gaW8uZ2V0Qml0cyhiaXRzVG9SZXByZXNlbnRWYWx1ZSh0aWxlLm51bU1heE1pbmVzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpbGU7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBsb2FkKHdvcmxkOiBXb3JsZCwgeDogbnVtYmVyLCB5OiBudW1iZXIsIGlvOiBidC5CaXRJTyk6IFZhbGlkVGlsZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTXVsdGlNaW5lVGlsZS5sb2FkIG5lZWRzIHRvIGJlIGltcGxlbWVudGVkIG9uIGRlcml2ZWQgY2xhc3MuJyk7XG4gICAgfVxufVxuXG5cbiIsIlxuaW1wb3J0ICogYXMgYnQgZnJvbSBcImJpbnR5cGVcIjtcbmltcG9ydCB7IGhhc2hOb3JtYWwgfSBmcm9tIFwiJGxpYi9STkdcIjtcbmltcG9ydCB7IG1hcFJhbmdlSW50IH0gZnJvbSBcIiRsaWIvVXRpbFwiO1xuaW1wb3J0IHR5cGUgeyBXb3JsZCB9IGZyb20gXCIuLi8uLi9Xb3JsZFwiO1xuaW1wb3J0IHsgTXVsdGlNaW5lVGlsZSB9IGZyb20gXCIuLi9NdWx0aU1pbmVcIjtcbmltcG9ydCB0eXBlIHsgVmFsaWRUaWxlIH0gZnJvbSBcIi4uL1RpbGVcIjtcblxuXG5cbmV4cG9ydCBjbGFzcyBCbHVlYmVycnlUaWxlIGV4dGVuZHMgTXVsdGlNaW5lVGlsZSB7XG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGU6ICdibHVlYmVycnknID0gJ2JsdWViZXJyeSc7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgbnVtTWF4TWluZXM6IG51bWJlciA9IDM7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3Iod29ybGQ6IFdvcmxkLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICBjb25zdCBudW1NaW5lcyA9IGhhc2hOb3JtYWwod29ybGQudGlsZVNlZWQsIHgsIHksIDApID4gMC44MCA/XG4gICAgICAgICAgICBtYXBSYW5nZUludChoYXNoTm9ybWFsKHdvcmxkLnRpbGVTZWVkLCB4LCB5LCAxKSwgMCwgMSwgMSwgMylcbiAgICAgICAgICAgIDogMDtcbiAgICAgICAgc3VwZXIod29ybGQsIHgsIHksIG51bU1pbmVzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGxvYWQod29ybGQ6IFdvcmxkLCB4OiBudW1iZXIsIHk6IG51bWJlciwgaW86IGJ0LkJpdElPKTogVmFsaWRUaWxlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZEludGVybmFsKG5ldyBCbHVlYmVycnlUaWxlKHdvcmxkLCB4LCB5KSwgaW8pO1xuICAgIH1cbn1cblxuXG4iLCJcbmltcG9ydCAqIGFzIGJ0IGZyb20gXCJiaW50eXBlXCI7XG5pbXBvcnQgdHlwZSB7IFdvcmxkIH0gZnJvbSBcIi4uL1dvcmxkXCI7XG5pbXBvcnQgeyBUaWxlLCB0eXBlIFZhbGlkVGlsZSB9IGZyb20gXCIuL1RpbGVcIjtcblxuZXhwb3J0IGVudW0gU2luZ2xlTWluZVRpbGVTdGF0ZSB7XG4gICAgQ292ZXJlZCxcbiAgICBGbGFnZ2VkLFxuICAgIFJldmVhbGVkXG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTaW5nbGVNaW5lVGlsZSBleHRlbmRzIFRpbGUge1xuICAgIHB1YmxpYyByZWFkb25seSBpc01pbmU6IGJvb2xlYW47XG4gICAgcHVibGljIHN0YXRlOiBTaW5nbGVNaW5lVGlsZVN0YXRlID0gU2luZ2xlTWluZVRpbGVTdGF0ZS5Db3ZlcmVkO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHdvcmxkOiBXb3JsZCwgeDogbnVtYmVyLCB5OiBudW1iZXIsIGlzTWluZTogYm9vbGVhbikge1xuICAgICAgICBzdXBlcih3b3JsZCwgeCwgeSk7XG4gICAgICAgIHRoaXMuaXNNaW5lID0gaXNNaW5lO1xuICAgIH1cblxuICAgIHB1YmxpYyBudW1NaW5lcygpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5pc01pbmUgPyAxIDogMDsgfVxuICAgIHB1YmxpYyBudW1GbGFncygpOiBudW1iZXIgeyByZXR1cm4gKHRoaXMuc3RhdGUgPT0gU2luZ2xlTWluZVRpbGVTdGF0ZS5GbGFnZ2VkKSA/IDEgOiAwOyB9XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgc2VhcmNoUGF0dGVybjogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9W10gPSBbXG4gICAgICAgIHsgeDogLTEsIHk6IDAgfSxcbiAgICAgICAgeyB4OiAtMSwgeTogMSB9LFxuICAgICAgICB7IHg6IDAsIHk6IDEgfSxcbiAgICAgICAgeyB4OiAxLCB5OiAxIH0sXG4gICAgICAgIHsgeDogMSwgeTogMCB9LFxuICAgICAgICB7IHg6IDEsIHk6IC0xIH0sXG4gICAgICAgIHsgeDogMCwgeTogLTEgfSxcbiAgICAgICAgeyB4OiAtMSwgeTogLTEgfVxuICAgIF07XG5cbiAgICBwdWJsaWMgZmxhZygpOiB2b2lkIHtcbiAgICAgICAgaWYodGhpcy5zdGF0ZSA9PSBTaW5nbGVNaW5lVGlsZVN0YXRlLlJldmVhbGVkKSByZXR1cm47XG4gICAgICAgIGlmKHRoaXMuc3RhdGUgPT0gU2luZ2xlTWluZVRpbGVTdGF0ZS5Db3ZlcmVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU2luZ2xlTWluZVRpbGVTdGF0ZS5GbGFnZ2VkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNpbmdsZU1pbmVUaWxlU3RhdGUuQ292ZXJlZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyByZXZlYWwoKTogYm9vbGVhbiB7XG4gICAgICAgIGlmKHRoaXMuc3RhdGUgIT0gU2luZ2xlTWluZVRpbGVTdGF0ZS5Db3ZlcmVkKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmKCF0aGlzLmlzTWluZSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNpbmdsZU1pbmVUaWxlU3RhdGUuUmV2ZWFsZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU2luZ2xlTWluZVRpbGVTdGF0ZS5GbGFnZ2VkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIFxuXG4gICAgcHVibGljIHNhdmUoaW86IGJ0LkJpdElPKTogdm9pZCB7XG4gICAgICAgIGlmKHRoaXMuaXNNaW5lKSB7XG4gICAgICAgICAgICBpby5wdXRCaXQodGhpcy5zdGF0ZSA9PSBTaW5nbGVNaW5lVGlsZVN0YXRlLkZsYWdnZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYodGhpcy5zdGF0ZSA9PSBTaW5nbGVNaW5lVGlsZVN0YXRlLkNvdmVyZWQpIHtcbiAgICAgICAgICAgICAgICBpby5wdXRCaXQoZmFsc2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpby5wdXRCaXQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgaW8ucHV0Qml0KHRoaXMuc3RhdGUgPT0gU2luZ2xlTWluZVRpbGVTdGF0ZS5GbGFnZ2VkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBzdGF0aWMgbG9hZEludGVybmFsPFQgZXh0ZW5kcyBTaW5nbGVNaW5lVGlsZT4odGlsZTogVCwgaW86IGJ0LkJpdElPKTogVCB7XG4gICAgICAgIGlmKHRpbGUuaXNNaW5lKSB7XG4gICAgICAgICAgICB0aWxlLnN0YXRlID0gaW8uZ2V0Qml0KCkgPyBTaW5nbGVNaW5lVGlsZVN0YXRlLkZsYWdnZWQgOiBTaW5nbGVNaW5lVGlsZVN0YXRlLkNvdmVyZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZighaW8uZ2V0Qml0KCkpIHtcbiAgICAgICAgICAgICAgICB0aWxlLnN0YXRlID0gU2luZ2xlTWluZVRpbGVTdGF0ZS5Db3ZlcmVkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aWxlLnN0YXRlID0gaW8uZ2V0Qml0KCkgPyBTaW5nbGVNaW5lVGlsZVN0YXRlLkZsYWdnZWQgOiBTaW5nbGVNaW5lVGlsZVN0YXRlLlJldmVhbGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aWxlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgbG9hZCh3b3JsZDogV29ybGQsIHg6IG51bWJlciwgeTogbnVtYmVyLCBpbzogYnQuQml0SU8pOiBWYWxpZFRpbGUge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NpbmdsZU1pbmVUaWxlLmxvYWQgbmVlZHMgdG8gYmUgaW1wbGVtZW50ZWQgb24gZGVyaXZlZCBjbGFzcy4nKTtcbiAgICB9XG59XG5cblxuIiwiXG5pbXBvcnQgKiBhcyBidCBmcm9tIFwiYmludHlwZVwiO1xuaW1wb3J0IHsgaGFzaE5vcm1hbCB9IGZyb20gXCIkbGliL1JOR1wiO1xuaW1wb3J0IHR5cGUgeyBXb3JsZCB9IGZyb20gXCIuLi8uLi9Xb3JsZFwiO1xuaW1wb3J0IHsgU2luZ2xlTWluZVRpbGUgfSBmcm9tIFwiLi4vU2luZ2xlTWluZVwiO1xuaW1wb3J0IHR5cGUgeyBWYWxpZFRpbGUgfSBmcm9tIFwiLi4vVGlsZVwiO1xuXG5cblxuZXhwb3J0IGNsYXNzIENob2NvbGF0ZVRpbGUgZXh0ZW5kcyBTaW5nbGVNaW5lVGlsZSB7XG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGU6ICdjaG9jb2xhdGUnID0gJ2Nob2NvbGF0ZSc7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3Iod29ybGQ6IFdvcmxkLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICBjb25zdCBpc01pbmUgPSBoYXNoTm9ybWFsKHdvcmxkLnRpbGVTZWVkLCB4LCB5LCAwKSA+IDAuNjI1O1xuICAgICAgICBzdXBlcih3b3JsZCwgeCwgeSwgaXNNaW5lKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGxvYWQod29ybGQ6IFdvcmxkLCB4OiBudW1iZXIsIHk6IG51bWJlciwgaW86IGJ0LkJpdElPKTogVmFsaWRUaWxlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZEludGVybmFsKG5ldyBDaG9jb2xhdGVUaWxlKHdvcmxkLCB4LCB5KSwgaW8pO1xuICAgIH1cbn1cblxuXG4iLCJcbmltcG9ydCB7IGhhc2hOb3JtYWwgfSBmcm9tIFwiJGxpYi9STkdcIjtcbmltcG9ydCB0eXBlIHsgV29ybGQgfSBmcm9tIFwiLi4vLi4vV29ybGRcIjtcbmltcG9ydCB7IFNpbmdsZU1pbmVUaWxlIH0gZnJvbSBcIi4uL1NpbmdsZU1pbmVcIjtcbmltcG9ydCB7IFRJTEVfTk9ORV9ORUFSQlksIHR5cGUgVmFsaWRUaWxlIH0gZnJvbSBcIi4uL1RpbGVcIjtcbmltcG9ydCAqIGFzIGJ0IGZyb20gXCJiaW50eXBlXCI7XG5cblxuXG5leHBvcnQgY2xhc3MgU3RyYXdiZXJyeVRpbGUgZXh0ZW5kcyBTaW5nbGVNaW5lVGlsZSB7XG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGU6ICdzdHJhd2JlcnJ5JyA9ICdzdHJhd2JlcnJ5JztcbiAgICBwdWJsaWMgcmVhZG9ubHkgc2Vjb25kYXJ5TmVhcmJ5Q291bnRNb2RpZmllcjogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gICAgcHVibGljIHJlYWRvbmx5IHNlY29uZGFyeU5lYXJieUNvdW50UmlnaHRTaWRlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3Iod29ybGQ6IFdvcmxkLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICBjb25zdCBpc01pbmUgPSBoYXNoTm9ybWFsKHdvcmxkLnRpbGVTZWVkLCB4LCB5LCAwKSA+IDAuODI1O1xuICAgICAgICBzdXBlcih3b3JsZCwgeCwgeSwgaXNNaW5lKTtcbiAgICAgICAgaWYoaGFzaE5vcm1hbCh3b3JsZC50aWxlU2VlZCwgeCwgeSwgMSkgPiAwLjMpIHtcbiAgICAgICAgICAgIHRoaXMuc2Vjb25kYXJ5TmVhcmJ5Q291bnRNb2RpZmllciA9IGhhc2hOb3JtYWwod29ybGQudGlsZVNlZWQsIHgsIHksIDIpID4gMC4zID8gMSA6IC0xO1xuICAgICAgICAgICAgdGhpcy5zZWNvbmRhcnlOZWFyYnlDb3VudFJpZ2h0U2lkZSA9IGhhc2hOb3JtYWwod29ybGQudGlsZVNlZWQsIHgsIHksIDMpID4gMC41O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHNlY29uZGFyeU1pbmVzTmVhcmJ5KHVzZUNhY2hlOiBib29sZWFuKTogbnVtYmVyIHwgbnVsbCB7XG4gICAgICAgIC8vIFRPRE86IFdoYXQgdG8gZG8gd2l0aCBuZWdhdGl2ZSBudW1iZXIgb2YgbWluZXMgaGVyZT9cbiAgICAgICAgaWYodGhpcy5zZWNvbmRhcnlOZWFyYnlDb3VudE1vZGlmaWVyID09IG51bGwpIHJldHVybiBudWxsO1xuICAgICAgICBjb25zdCBuZWFyYnkgPSB0aGlzLm1pbmVzTmVhcmJ5KHVzZUNhY2hlKTtcbiAgICAgICAgaWYobmVhcmJ5ID09IFRJTEVfTk9ORV9ORUFSQlkgfHwgbmVhcmJ5IDwgMSkgcmV0dXJuIG51bGw7XG4gICAgICAgIGNvbnN0IG5lYXJieTIgPSBuZWFyYnkgKyB0aGlzLnNlY29uZGFyeU5lYXJieUNvdW50TW9kaWZpZXI7XG4gICAgICAgIGlmKG5lYXJieTIgPD0gMCkgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBuZWFyYnkyO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgbG9hZCh3b3JsZDogV29ybGQsIHg6IG51bWJlciwgeTogbnVtYmVyLCBpbzogYnQuQml0SU8pOiBWYWxpZFRpbGUge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkSW50ZXJuYWwobmV3IFN0cmF3YmVycnlUaWxlKHdvcmxkLCB4LCB5KSwgaW8pO1xuICAgIH1cbn1cblxuXG4iLCJcbmltcG9ydCAqIGFzIGJ0IGZyb20gXCJiaW50eXBlXCI7XG5pbXBvcnQgdHlwZSB7IFdvcmxkIH0gZnJvbSBcIi4uLy4uL1dvcmxkXCI7XG5pbXBvcnQgeyBTaW5nbGVNaW5lVGlsZSB9IGZyb20gXCIuLi9TaW5nbGVNaW5lXCI7XG5pbXBvcnQgeyBoYXNoTm9ybWFsIH0gZnJvbSBcIiRsaWIvUk5HXCI7XG5pbXBvcnQgdHlwZSB7IFZhbGlkVGlsZSB9IGZyb20gXCIuLi9UaWxlXCI7XG5cblxuXG5leHBvcnQgZnVuY3Rpb24gd2FmZmxlSXNEYXJrKGNoZWNrZXJTaXplOiBudW1iZXIsIHg6IG51bWJlciwgeTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgY29uc3QgY2hlY2tlclggPSBNYXRoLmZsb29yKHggLyBjaGVja2VyU2l6ZSk7XG4gICAgY29uc3QgY2hlY2tlclkgPSBNYXRoLmZsb29yKHkgLyBjaGVja2VyU2l6ZSk7XG4gICAgcmV0dXJuIChjaGVja2VyWCArIGNoZWNrZXJZICUgMikgJSAyID09IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3YWZmbGUod29ybGQ6IFdvcmxkLCBjaGVja2VyU2l6ZTogbnVtYmVyLCB4OiBudW1iZXIsIHk6IG51bWJlcik6IHsgaXNEYXJrOiBib29sZWFuLCBpc01pbmU6IGJvb2xlYW4gfSB7XG4gICAgY29uc3QgY2hlY2tlclggPSBNYXRoLmZsb29yKHggLyBjaGVja2VyU2l6ZSk7XG4gICAgY29uc3QgY2hlY2tlclkgPSBNYXRoLmZsb29yKHkgLyBjaGVja2VyU2l6ZSk7XG4gICAgY29uc3QgaXNEYXJrID0gKGNoZWNrZXJYICsgY2hlY2tlclkgJSAyKSAlIDIgPT0gMDtcblxuICAgIGNvbnN0IGNoZWNrZXJJbmRleCA9IE1hdGguYWJzKHggJSBjaGVja2VyU2l6ZSkgKyBNYXRoLmFicyh5ICUgY2hlY2tlclNpemUpICogY2hlY2tlclNpemU7XG4gICAgY29uc3QgY2hlY2tlclJuZ1BvcyA9IE1hdGguZmxvb3IoaGFzaE5vcm1hbCh3b3JsZC50aWxlU2VlZCwgY2hlY2tlclgsIGNoZWNrZXJZLCAwKSAqIGNoZWNrZXJTaXplKioyKTtcbiAgICBcbiAgICBjb25zdCBpc01pbmUgPSAoaXNEYXJrID8gKFxuICAgICAgICBjaGVja2VySW5kZXggPT0gY2hlY2tlclJuZ1BvcyA/IGZhbHNlIDogdHJ1ZVxuICAgICkgOiAoXG4gICAgICAgIGNoZWNrZXJJbmRleCA9PSBjaGVja2VyUm5nUG9zID8gdHJ1ZSA6IGZhbHNlXG4gICAgKSk7XG5cbiAgICByZXR1cm4geyBpc0RhcmssIGlzTWluZSB9O1xufVxuXG5cblxuZXhwb3J0IGNsYXNzIFdhZmZsZVRpbGUgZXh0ZW5kcyBTaW5nbGVNaW5lVGlsZSB7XG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGU6ICd3YWZmbGUnID0gJ3dhZmZsZSc7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNEYXJrOiBib29sZWFuO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHdvcmxkOiBXb3JsZCwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgeyBpc0RhcmssIGlzTWluZSB9ID0gd2FmZmxlKHdvcmxkLCAyLCB4LCB5KTtcbiAgICAgICAgc3VwZXIod29ybGQsIHgsIHksIGlzTWluZSk7XG4gICAgICAgIHRoaXMuaXNEYXJrID0gaXNEYXJrXG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBzdGF0aWMgbG9hZCh3b3JsZDogV29ybGQsIHg6IG51bWJlciwgeTogbnVtYmVyLCBpbzogYnQuQml0SU8pOiBWYWxpZFRpbGUge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkSW50ZXJuYWwobmV3IFdhZmZsZVRpbGUod29ybGQsIHgsIHkpLCBpbyk7XG4gICAgfVxufVxuXG5cbiIsIlxuaW1wb3J0ICogYXMgYnQgZnJvbSBcImJpbnR5cGVcIjtcbmltcG9ydCB0eXBlIHsgV29ybGQgfSBmcm9tIFwiLi4vLi4vV29ybGRcIjtcbmltcG9ydCB7IFNpbmdsZU1pbmVUaWxlIH0gZnJvbSBcIi4uL1NpbmdsZU1pbmVcIjtcbmltcG9ydCB0eXBlIHsgVmFsaWRUaWxlIH0gZnJvbSBcIi4uL1RpbGVcIjtcbmltcG9ydCB7IHdhZmZsZSB9IGZyb20gXCIuL1dhZmZsZVwiO1xuXG5cblxuZXhwb3J0IGNsYXNzIFN0cm9vcHdhZmVsVGlsZSBleHRlbmRzIFNpbmdsZU1pbmVUaWxlIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZTogJ3N0cm9vcHdhZmVsJyA9ICdzdHJvb3B3YWZlbCc7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNEYXJrOiBib29sZWFuO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHdvcmxkOiBXb3JsZCwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgeyBpc0RhcmssIGlzTWluZSB9ID0gd2FmZmxlKHdvcmxkLCAzLCB4LCB5KTtcbiAgICAgICAgc3VwZXIod29ybGQsIHgsIHksIGlzTWluZSk7XG4gICAgICAgIHRoaXMuaXNEYXJrID0gaXNEYXJrXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBsb2FkKHdvcmxkOiBXb3JsZCwgeDogbnVtYmVyLCB5OiBudW1iZXIsIGlvOiBidC5CaXRJTyk6IFZhbGlkVGlsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRJbnRlcm5hbChuZXcgU3Ryb29wd2FmZWxUaWxlKHdvcmxkLCB4LCB5KSwgaW8pO1xuICAgIH1cbn1cblxuXG4iLCJcbmltcG9ydCAqIGFzIGJ0IGZyb20gXCJiaW50eXBlXCI7XG5pbXBvcnQgeyBoYXNoTm9ybWFsIH0gZnJvbSBcIiRsaWIvUk5HXCI7XG5pbXBvcnQgdHlwZSB7IFdvcmxkIH0gZnJvbSBcIi4uLy4uL1dvcmxkXCI7XG5pbXBvcnQgeyBTaW5nbGVNaW5lVGlsZSB9IGZyb20gXCIuLi9TaW5nbGVNaW5lXCI7XG5pbXBvcnQgdHlwZSB7IFZhbGlkVGlsZSB9IGZyb20gXCIuLi9UaWxlXCI7XG5cblxuXG5leHBvcnQgY2xhc3MgVmFuaWxsYVRpbGUgZXh0ZW5kcyBTaW5nbGVNaW5lVGlsZSB7XG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGU6ICd2YW5pbGxhJyA9ICd2YW5pbGxhJztcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih3b3JsZDogV29ybGQsIHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGlzTWluZSA9IGhhc2hOb3JtYWwod29ybGQudGlsZVNlZWQsIHgsIHksIDApID4gMC44NTtcbiAgICAgICAgc3VwZXIod29ybGQsIHgsIHksIGlzTWluZSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBsb2FkKHdvcmxkOiBXb3JsZCwgeDogbnVtYmVyLCB5OiBudW1iZXIsIGlvOiBidC5CaXRJTyk6IFZhbGlkVGlsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRJbnRlcm5hbChuZXcgVmFuaWxsYVRpbGUod29ybGQsIHgsIHkpLCBpbyk7XG4gICAgfVxufVxuXG5cbiIsIlxuaW1wb3J0ICogYXMgYnQgZnJvbSBcImJpbnR5cGVcIjtcbmltcG9ydCB0eXBlIHsgV29ybGQgfSBmcm9tIFwiLi4vV29ybGRcIjtcbmltcG9ydCB7IFRpbGUsIHR5cGUgVmFsaWRUaWxlIH0gZnJvbSBcIi4vVGlsZVwiO1xuXG5leHBvcnQgZW51bSBTaW5nbGVBbnRpTWluZVRpbGVNaW5lcyB7XG4gICAgTm9uZSxcbiAgICBOb3JtYWwsXG4gICAgQW50aVxufVxuXG5leHBvcnQgZW51bSBTaW5nbGVBbnRpTWluZVRpbGVTdGF0ZSB7XG4gICAgQ292ZXJlZCxcbiAgICBGbGFnZ2VkLFxuICAgIEFudGlGbGFnZ2VkLFxuICAgIFJldmVhbGVkXG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTaW5nbGVBbnRpTWluZVRpbGUgZXh0ZW5kcyBUaWxlIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgbWluZTogU2luZ2xlQW50aU1pbmVUaWxlTWluZXM7XG4gICAgcHVibGljIHN0YXRlOiBTaW5nbGVBbnRpTWluZVRpbGVTdGF0ZSA9IFNpbmdsZUFudGlNaW5lVGlsZVN0YXRlLkNvdmVyZWQ7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3Iod29ybGQ6IFdvcmxkLCB4OiBudW1iZXIsIHk6IG51bWJlciwgbWluZTogU2luZ2xlQW50aU1pbmVUaWxlTWluZXMpIHtcbiAgICAgICAgc3VwZXIod29ybGQsIHgsIHkpO1xuICAgICAgICB0aGlzLm1pbmUgPSBtaW5lO1xuICAgIH1cblxuICAgIHB1YmxpYyBudW1NaW5lcygpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gKHRoaXMubWluZSA9PSBTaW5nbGVBbnRpTWluZVRpbGVNaW5lcy5Ob3JtYWwpID8gMSA6XG4gICAgICAgICAgICAgICAodGhpcy5taW5lID09IFNpbmdsZUFudGlNaW5lVGlsZU1pbmVzLkFudGkpID8gLTEgOlxuICAgICAgICAgICAgICAgMDtcbiAgICB9XG4gICAgcHVibGljIG51bUZsYWdzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAodGhpcy5zdGF0ZSA9PSBTaW5nbGVBbnRpTWluZVRpbGVTdGF0ZS5GbGFnZ2VkKSA/IDEgOlxuICAgICAgICAgICAgICAgKHRoaXMuc3RhdGUgPT0gU2luZ2xlQW50aU1pbmVUaWxlU3RhdGUuQW50aUZsYWdnZWQpID8gLTEgOlxuICAgICAgICAgICAgICAgMDtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgc2VhcmNoUGF0dGVybjogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9W10gPSBbXG4gICAgICAgIHsgeDogLTEsIHk6IDAgfSxcbiAgICAgICAgeyB4OiAtMSwgeTogMSB9LFxuICAgICAgICB7IHg6IDAsIHk6IDEgfSxcbiAgICAgICAgeyB4OiAxLCB5OiAxIH0sXG4gICAgICAgIHsgeDogMSwgeTogMCB9LFxuICAgICAgICB7IHg6IDEsIHk6IC0xIH0sXG4gICAgICAgIHsgeDogMCwgeTogLTEgfSxcbiAgICAgICAgeyB4OiAtMSwgeTogLTEgfVxuICAgIF07XG5cbiAgICBwdWJsaWMgZmxhZygpOiB2b2lkIHtcbiAgICAgICAgc3dpdGNoKHRoaXMuc3RhdGUpIHtcbiAgICAgICAgICAgIGNhc2UgU2luZ2xlQW50aU1pbmVUaWxlU3RhdGUuQ292ZXJlZDogdGhpcy5zdGF0ZSA9IFNpbmdsZUFudGlNaW5lVGlsZVN0YXRlLkZsYWdnZWQ7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTaW5nbGVBbnRpTWluZVRpbGVTdGF0ZS5GbGFnZ2VkOiB0aGlzLnN0YXRlID0gU2luZ2xlQW50aU1pbmVUaWxlU3RhdGUuQW50aUZsYWdnZWQ7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTaW5nbGVBbnRpTWluZVRpbGVTdGF0ZS5BbnRpRmxhZ2dlZDogdGhpcy5zdGF0ZSA9IFNpbmdsZUFudGlNaW5lVGlsZVN0YXRlLkNvdmVyZWQ7IGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHJldmVhbCgpOiBib29sZWFuIHtcbiAgICAgICAgaWYodGhpcy5zdGF0ZSAhPSBTaW5nbGVBbnRpTWluZVRpbGVTdGF0ZS5Db3ZlcmVkKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmKHRoaXMubWluZSA9PSBTaW5nbGVBbnRpTWluZVRpbGVNaW5lcy5Ob25lKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU2luZ2xlQW50aU1pbmVUaWxlU3RhdGUuUmV2ZWFsZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gKHRoaXMubWluZSA9PSBTaW5nbGVBbnRpTWluZVRpbGVNaW5lcy5Ob3JtYWwpID8gU2luZ2xlQW50aU1pbmVUaWxlU3RhdGUuRmxhZ2dlZCA6IFNpbmdsZUFudGlNaW5lVGlsZVN0YXRlLkFudGlGbGFnZ2VkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIFxuXG4gICAgcHVibGljIHNhdmUoaW86IGJ0LkJpdElPKTogdm9pZCB7XG4gICAgICAgIGlmKHRoaXMubWluZSA9PSBTaW5nbGVBbnRpTWluZVRpbGVNaW5lcy5Ob3JtYWwgfHwgdGhpcy5taW5lID09IFNpbmdsZUFudGlNaW5lVGlsZU1pbmVzLkFudGkpIHtcbiAgICAgICAgICAgIGlmKHRoaXMuc3RhdGUgPT0gU2luZ2xlQW50aU1pbmVUaWxlU3RhdGUuQ292ZXJlZCkge1xuICAgICAgICAgICAgICAgIGlvLnB1dEJpdChmYWxzZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlvLnB1dEJpdCh0cnVlKTtcbiAgICAgICAgICAgICAgICBpby5wdXRCaXQodGhpcy5zdGF0ZSA9PSBTaW5nbGVBbnRpTWluZVRpbGVTdGF0ZS5BbnRpRmxhZ2dlZCA/IHRydWUgOiBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZih0aGlzLnN0YXRlID09IFNpbmdsZUFudGlNaW5lVGlsZVN0YXRlLkNvdmVyZWQpIHtcbiAgICAgICAgICAgICAgICBpby5wdXRCaXQoZmFsc2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpby5wdXRCaXQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5zdGF0ZSA9PSBTaW5nbGVBbnRpTWluZVRpbGVTdGF0ZS5SZXZlYWxlZCkge1xuICAgICAgICAgICAgICAgICAgICBpby5wdXRCaXQoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlvLnB1dEJpdCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaW8ucHV0Qml0KHRoaXMuc3RhdGUgPT0gU2luZ2xlQW50aU1pbmVUaWxlU3RhdGUuQW50aUZsYWdnZWQgPyB0cnVlIDogZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBzdGF0aWMgbG9hZEludGVybmFsPFQgZXh0ZW5kcyBTaW5nbGVBbnRpTWluZVRpbGU+KHRpbGU6IFQsIGlvOiBidC5CaXRJTyk6IFQge1xuICAgICAgICBpZih0aWxlLm1pbmUgPT0gU2luZ2xlQW50aU1pbmVUaWxlTWluZXMuTm9ybWFsIHx8IHRpbGUubWluZSA9PSBTaW5nbGVBbnRpTWluZVRpbGVNaW5lcy5BbnRpKSB7XG4gICAgICAgICAgICBpZighaW8uZ2V0Qml0KCkpIHtcbiAgICAgICAgICAgICAgICB0aWxlLnN0YXRlID0gU2luZ2xlQW50aU1pbmVUaWxlU3RhdGUuQ292ZXJlZDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGlsZS5zdGF0ZSA9IGlvLmdldEJpdCgpID8gU2luZ2xlQW50aU1pbmVUaWxlU3RhdGUuQW50aUZsYWdnZWQgOiBTaW5nbGVBbnRpTWluZVRpbGVTdGF0ZS5GbGFnZ2VkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYoIWlvLmdldEJpdCgpKSB7XG4gICAgICAgICAgICAgICAgdGlsZS5zdGF0ZSA9IFNpbmdsZUFudGlNaW5lVGlsZVN0YXRlLkNvdmVyZWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmKCFpby5nZXRCaXQoKSkge1xuICAgICAgICAgICAgICAgICAgICB0aWxlLnN0YXRlID0gU2luZ2xlQW50aU1pbmVUaWxlU3RhdGUuUmV2ZWFsZWQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGlsZS5zdGF0ZSA9IGlvLmdldEJpdCgpID8gU2luZ2xlQW50aU1pbmVUaWxlU3RhdGUuQW50aUZsYWdnZWQgOiBTaW5nbGVBbnRpTWluZVRpbGVTdGF0ZS5GbGFnZ2VkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGlsZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGxvYWQod29ybGQ6IFdvcmxkLCB4OiBudW1iZXIsIHk6IG51bWJlciwgaW86IGJ0LkJpdElPKTogVmFsaWRUaWxlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaW5nbGVBbnRpTWluZVRpbGUubG9hZCBuZWVkcyB0byBiZSBpbXBsZW1lbnRlZCBvbiBkZXJpdmVkIGNsYXNzLicpO1xuICAgIH1cbn1cblxuXG4iLCJcbmltcG9ydCAqIGFzIGJ0IGZyb20gXCJiaW50eXBlXCI7XG5pbXBvcnQgeyBoYXNoTm9ybWFsIH0gZnJvbSBcIiRsaWIvUk5HXCI7XG5pbXBvcnQgdHlwZSB7IFdvcmxkIH0gZnJvbSBcIi4uLy4uL1dvcmxkXCI7XG5pbXBvcnQgdHlwZSB7IFZhbGlkVGlsZSB9IGZyb20gXCIuLi9UaWxlXCI7XG5pbXBvcnQgeyBTaW5nbGVBbnRpTWluZVRpbGUsIFNpbmdsZUFudGlNaW5lVGlsZU1pbmVzIH0gZnJvbSBcIi4uL1NpbmdsZUFudGlNaW5lXCI7XG5cblxuXG5leHBvcnQgY2xhc3MgQ29va2llc0FuZENyZWFtVGlsZSBleHRlbmRzIFNpbmdsZUFudGlNaW5lVGlsZSB7XG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGU6ICdjb29raWVzX2FuZF9jcmVhbScgPSAnY29va2llc19hbmRfY3JlYW0nO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHdvcmxkOiBXb3JsZCwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgaXNNaW5lID0gaGFzaE5vcm1hbCh3b3JsZC50aWxlU2VlZCwgeCwgeSwgMCkgPiAwLjc7XG4gICAgICAgIGNvbnN0IGlzQW50aSA9IGhhc2hOb3JtYWwod29ybGQudGlsZVNlZWQsIHgsIHksIDEpID4gMC41O1xuICAgICAgICBzdXBlcih3b3JsZCwgeCwgeSwgaXNNaW5lID8gKGlzQW50aSA/IFNpbmdsZUFudGlNaW5lVGlsZU1pbmVzLkFudGkgOiBTaW5nbGVBbnRpTWluZVRpbGVNaW5lcy5Ob3JtYWwpIDogU2luZ2xlQW50aU1pbmVUaWxlTWluZXMuTm9uZSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBsb2FkKHdvcmxkOiBXb3JsZCwgeDogbnVtYmVyLCB5OiBudW1iZXIsIGlvOiBidC5CaXRJTyk6IFZhbGlkVGlsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRJbnRlcm5hbChuZXcgQ29va2llc0FuZENyZWFtVGlsZSh3b3JsZCwgeCwgeSksIGlvKTtcbiAgICB9XG59XG5cblxuIiwiXG5pbXBvcnQgeyBwZXJsaW5fbm9pc2UyZCwgc3BsaXRtaXgzMiwgdm9yb25vaV9ub2lzZTJkIH0gZnJvbSBcIi4uL1JOR1wiO1xuaW1wb3J0IHR5cGUgeyBXb3JsZCB9IGZyb20gXCIuL1dvcmxkXCI7XG5pbXBvcnQgeyBCbHVlYmVycnlUaWxlIH0gZnJvbSBcIi4vdGlsZS9iaW9tZS9CbHVlYmVycnlcIjtcbmltcG9ydCB7IENob2NvbGF0ZVRpbGUgfSBmcm9tIFwiLi90aWxlL2Jpb21lL0Nob2NvbGF0ZVwiO1xuaW1wb3J0IHsgU3RyYXdiZXJyeVRpbGUgfSBmcm9tIFwiLi90aWxlL2Jpb21lL1N0cmF3YmVycnlcIjtcbmltcG9ydCB7IFN0cm9vcHdhZmVsVGlsZSB9IGZyb20gXCIuL3RpbGUvYmlvbWUvU3Ryb29wd2FmZWxcIjtcbmltcG9ydCB0eXBlIHsgVmFsaWRUaWxlLCBWYWxpZFRpbGVDb25zdHJ1Y3RvciB9IGZyb20gXCIuL3RpbGUvVGlsZVwiO1xuaW1wb3J0IHsgVmFuaWxsYVRpbGUgfSBmcm9tIFwiLi90aWxlL2Jpb21lL1ZhbmlsbGFcIjtcbmltcG9ydCB7IFdhZmZsZVRpbGUgfSBmcm9tIFwiLi90aWxlL2Jpb21lL1dhZmZsZVwiO1xuaW1wb3J0IHsgQ29va2llc0FuZENyZWFtVGlsZSB9IGZyb20gXCIuL3RpbGUvYmlvbWUvQ29va2llc0FuZENyZWFtXCI7XG5cblxuXG50eXBlIEJpb21lID0ge1xuICAgIHR5cGU6ICdiaW9tZScsXG4gICAgd2VpZ2h0OiBudW1iZXI7XG4gICAgdGlsZTogVmFsaWRUaWxlQ29uc3RydWN0b3I7XG59IHwge1xuICAgIHR5cGU6ICdjb2xsZWN0aW9uJyxcbiAgICB3ZWlnaHQ6IG51bWJlcjtcbiAgICBzY2FsZTogbnVtYmVyO1xuICAgIHNtb290aG5lc3M6IG51bWJlcjtcbiAgICBiaW9tZXM6IEJpb21lW107XG59XG5cbmNvbnN0IEJpb21lczogQmlvbWUgPSB7XG4gICAgdHlwZTogJ2NvbGxlY3Rpb24nLFxuICAgIHdlaWdodDogMSxcbiAgICBzY2FsZTogMjQsXG4gICAgc21vb3RobmVzczogMC44LFxuICAgIGJpb21lczogW3tcbiAgICAgICAgdHlwZTogJ2NvbGxlY3Rpb24nLFxuICAgICAgICB3ZWlnaHQ6IDUsXG4gICAgICAgIHNjYWxlOiAyNCxcbiAgICAgICAgc21vb3RobmVzczogMC44LFxuICAgICAgICBiaW9tZXM6IFt7XG4gICAgICAgICAgICB0eXBlOiAnYmlvbWUnLFxuICAgICAgICAgICAgd2VpZ2h0OiAzLFxuICAgICAgICAgICAgdGlsZTogVmFuaWxsYVRpbGVcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgdHlwZTogJ2Jpb21lJyxcbiAgICAgICAgICAgIHdlaWdodDogMSxcbiAgICAgICAgICAgIHRpbGU6IENob2NvbGF0ZVRpbGVcbiAgICAgICAgfV1cbiAgICB9LCB7XG4gICAgICAgIHR5cGU6ICdjb2xsZWN0aW9uJyxcbiAgICAgICAgd2VpZ2h0OiAyLFxuICAgICAgICBzY2FsZTogNjQsXG4gICAgICAgIHNtb290aG5lc3M6IDAsXG4gICAgICAgIGJpb21lczogW3tcbiAgICAgICAgICAgIHR5cGU6ICdiaW9tZScsXG4gICAgICAgICAgICB3ZWlnaHQ6IDEsXG4gICAgICAgICAgICB0aWxlOiBXYWZmbGVUaWxlXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIHR5cGU6ICdiaW9tZScsXG4gICAgICAgICAgICB3ZWlnaHQ6IDIsXG4gICAgICAgICAgICB0aWxlOiBTdHJvb3B3YWZlbFRpbGVcbiAgICAgICAgfV1cbiAgICB9LCB7XG4gICAgICAgIHR5cGU6ICdjb2xsZWN0aW9uJyxcbiAgICAgICAgd2VpZ2h0OiAyLFxuICAgICAgICBzY2FsZTogMzIsXG4gICAgICAgIHNtb290aG5lc3M6IDAuNSxcbiAgICAgICAgYmlvbWVzOiBbe1xuICAgICAgICAgICAgdHlwZTogJ2Jpb21lJyxcbiAgICAgICAgICAgIHdlaWdodDogMSxcbiAgICAgICAgICAgIHRpbGU6IEJsdWViZXJyeVRpbGVcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgdHlwZTogJ2Jpb21lJyxcbiAgICAgICAgICAgIHdlaWdodDogMSxcbiAgICAgICAgICAgIHRpbGU6IFN0cmF3YmVycnlUaWxlXG4gICAgICAgIH1dXG4gICAgfSwge1xuICAgICAgICB0eXBlOiAnYmlvbWUnLFxuICAgICAgICB3ZWlnaHQ6IDIsXG4gICAgICAgIHRpbGU6IENvb2tpZXNBbmRDcmVhbVRpbGVcbiAgICB9XVxufTtcblxuZnVuY3Rpb24gc21vb3RoTm9pc3lWb3Jvbm9pKHNlZWQ6IG51bWJlciwgeDogbnVtYmVyLCB5OiBudW1iZXIsIGRpc3Q6IG51bWJlciwgd2VpZ2h0czogbnVtYmVyW10pOiBudW1iZXIge1xuICAgIGNvbnN0IHJhbmRvbSA9IHNwbGl0bWl4MzIoc2VlZCwgZmFsc2UpO1xuICAgIGNvbnN0IGR4ID0gcGVybGluX25vaXNlMmQocmFuZG9tKCksIHgsIHkpICogZGlzdDtcbiAgICBjb25zdCBkeSA9IHBlcmxpbl9ub2lzZTJkKHJhbmRvbSgpLCB4LCB5KSAqIGRpc3Q7XG4gICAgcmV0dXJuIHZvcm9ub2lfbm9pc2UyZChyYW5kb20oKSwgeCArIGR4LCB5ICsgZHksIHdlaWdodHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGlsZVR5cGUod29ybGQ6IFdvcmxkLCB4OiBudW1iZXIsIHk6IG51bWJlcik6IFZhbGlkVGlsZUNvbnN0cnVjdG9yIHtcbiAgICBjb25zdCByYW5kb20gPSBzcGxpdG1peDMyKHdvcmxkLmJpb21lU2VlZCwgZmFsc2UpO1xuXG4gICAgbGV0IGJpb21lOiBCaW9tZSA9IEJpb21lcztcbiAgICB3aGlsZShiaW9tZS50eXBlID09ICdjb2xsZWN0aW9uJykge1xuICAgICAgICBjb25zdCBpbmRleCA9IHNtb290aE5vaXN5Vm9yb25vaShcbiAgICAgICAgICAgIHJhbmRvbSgpLFxuICAgICAgICAgICAgeCAvIGJpb21lLnNjYWxlLCB5IC8gYmlvbWUuc2NhbGUsXG4gICAgICAgICAgICBiaW9tZS5zbW9vdGhuZXNzLFxuICAgICAgICAgICAgYmlvbWUuYmlvbWVzLm1hcChiID0+IGIud2VpZ2h0KVxuICAgICAgICApO1xuICAgICAgICBiaW9tZSA9IGJpb21lLmJpb21lc1tpbmRleF07XG4gICAgfVxuXG4gICAgcmV0dXJuIGJpb21lLnRpbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVRpbGUod29ybGQ6IFdvcmxkLCB4OiBudW1iZXIsIHk6IG51bWJlcik6IFZhbGlkVGlsZSB7XG4gICAgY29uc3QgdGlsZUNvbnN0cnVjdG9yID0gZ2V0VGlsZVR5cGUod29ybGQsIHgsIHkpO1xuICAgIHJldHVybiBuZXcgdGlsZUNvbnN0cnVjdG9yKHdvcmxkLCB4LCB5KTtcbn1cblxuXG4iLCJcbmltcG9ydCB7IENIVU5LX1NJWkUgfSBmcm9tIFwiLi9Db25zdGFudHNcIjtcbmltcG9ydCB7IGdlbmVyYXRlVGlsZSwgZ2V0VGlsZVR5cGUgfSBmcm9tIFwiLi9HZW5lcmF0b3JcIjtcbmltcG9ydCB0eXBlIHsgV29ybGQgfSBmcm9tIFwiLi9Xb3JsZFwiO1xuaW1wb3J0IHR5cGUgeyBWYWxpZFRpbGUgfSBmcm9tIFwiLi90aWxlL1RpbGVcIjtcbmltcG9ydCB0eXBlIHsgRl9DSFVOSyB9IGZyb20gXCIuL1NhdmVcIjtcbmltcG9ydCAqIGFzIGJ0IGZyb20gXCJiaW50eXBlXCI7XG5cblxuXG5leHBvcnQgY2xhc3MgQ2h1bmsge1xuICAgIHB1YmxpYyByZWFkb25seSB3b3JsZDogV29ybGQ7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgY2h1bmtYOiBudW1iZXI7XG4gICAgcHVibGljIHJlYWRvbmx5IGNodW5rWTogbnVtYmVyO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHdvcmxkOiBXb3JsZCwgY2h1bmtYOiBudW1iZXIsIGNodW5rWTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMud29ybGQgPSB3b3JsZDtcbiAgICAgICAgdGhpcy5jaHVua1ggPSBjaHVua1g7XG4gICAgICAgIHRoaXMuY2h1bmtZID0gY2h1bmtZO1xuICAgIH1cblxuICAgIHB1YmxpYyBpc0dlbmVyYXRlZCgpOiB0aGlzIGlzIEdlbmVyYXRlZENodW5rIHtcbiAgICAgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBHZW5lcmF0ZWRDaHVuaztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2VuZXJhdGUoKTogR2VuZXJhdGVkQ2h1bmsge1xuICAgICAgICBpZih0aGlzLmlzR2VuZXJhdGVkKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGdlbmVyYXRlIGFuIGFscmVhZHkgZ2VuZXJhdGVkIGNodW5rLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2coYEdlbmVyYXRpbmcgbmV3IGNodW5rOiAke3RoaXMuY2h1bmtYfSwgJHt0aGlzLmNodW5rWX1gKTtcblxuICAgICAgICBjb25zdCB0aWxlczogVmFsaWRUaWxlW10gPSBbXTtcblxuICAgICAgICBmb3IobGV0IGR5ID0gMDsgZHkgPCBDSFVOS19TSVpFOyBkeSsrKSB7XG4gICAgICAgICAgICBmb3IobGV0IGR4ID0gMDsgZHggPCBDSFVOS19TSVpFOyBkeCsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGlsZSA9IHRoaXMud29ybGQuZ2VuZXJhdGVUaWxlKCh0aGlzLmNodW5rWCAqIENIVU5LX1NJWkUpICsgZHgsICh0aGlzLmNodW5rWSAqIENIVU5LX1NJWkUpICsgZHkpO1xuICAgICAgICAgICAgICAgIHRpbGVzLnB1c2godGlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IEdlbmVyYXRlZENodW5rKHRoaXMud29ybGQsIHRoaXMuY2h1bmtYLCB0aGlzLmNodW5rWSwgdGlsZXMpO1xuICAgIH1cbn1cblxuXG5cbmV4cG9ydCBjbGFzcyBHZW5lcmF0ZWRDaHVuayBleHRlbmRzIENodW5rIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgdGlsZXM6IFZhbGlkVGlsZVtdO1xuICAgIHB1YmxpYyBkZWF0aHM6IHsgeDogbnVtYmVyLCB5OiBudW1iZXIsIGRpZWRBdDogRGF0ZSB9W10gPSBbXTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih3b3JsZDogV29ybGQsIGNodW5rWDogbnVtYmVyLCBjaHVua1k6IG51bWJlciwgdGlsZXM6IFZhbGlkVGlsZVtdKSB7XG4gICAgICAgIHN1cGVyKHdvcmxkLCBjaHVua1gsIGNodW5rWSk7XG4gICAgICAgIHRoaXMudGlsZXMgPSB0aWxlcztcbiAgICAgICAgaWYodGhpcy50aWxlcy5sZW5ndGggIT0gQ0hVTktfU0laRSAqIENIVU5LX1NJWkUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignR2VuZXJhdGVkQ2h1bmsgaW5jb3JyZWN0IHRpbGVzIGxlbmd0aC4nKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRUaWxlQWJzb2x1dGUodGlsZVg6IG51bWJlciwgdGlsZVk6IG51bWJlcik6IFZhbGlkVGlsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRpbGUodGlsZVggLSB0aGlzLmNodW5rWCAqIENIVU5LX1NJWkUsIHRpbGVZIC0gdGhpcy5jaHVua1kgKiBDSFVOS19TSVpFKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VGlsZShjaHVua1RpbGVYOiBudW1iZXIsIGNodW5rVGlsZVk6IG51bWJlcik6IFZhbGlkVGlsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpbGVzW2NodW5rVGlsZVggKyBjaHVua1RpbGVZICogQ0hVTktfU0laRV0hO1xuICAgIH1cblxuICAgIHB1YmxpYyByZXNldFRpbGVBYnNvbHV0ZSh0aWxlWDogbnVtYmVyLCB0aWxlWTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc2V0VGlsZSh0aWxlWCAtIHRoaXMuY2h1bmtYICogQ0hVTktfU0laRSwgdGlsZVkgLSB0aGlzLmNodW5rWSAqIENIVU5LX1NJWkUpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZXNldFRpbGUoY2h1bmtUaWxlWDogbnVtYmVyLCBjaHVua1RpbGVZOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50aWxlc1tjaHVua1RpbGVYICsgY2h1bmtUaWxlWSAqIENIVU5LX1NJWkVdID0gZ2VuZXJhdGVUaWxlKHRoaXMud29ybGQsIHRoaXMuY2h1bmtYICogQ0hVTktfU0laRSArIGNodW5rVGlsZVgsIHRoaXMuY2h1bmtZICogQ0hVTktfU0laRSArIGNodW5rVGlsZVkpO1xuICAgIH1cblxuXG4gICAgXG4gICAgcHVibGljIGVuY29kZVRpbGVzKCk6IEFycmF5QnVmZmVyIHtcbiAgICAgICAgY29uc3QgaW8gPSBuZXcgYnQuQml0SU8oMjA0OCk7XG4gICAgICAgIGZvcihjb25zdCB0aWxlIG9mIHRoaXMudGlsZXMpIHtcbiAgICAgICAgICAgIHRpbGUuc2F2ZShpbyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlvLmZpbmFsKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBkZWNvZGVUaWxlcyh3b3JsZDogV29ybGQsIGNodW5rWDogbnVtYmVyLCBjaHVua1k6IG51bWJlciwgYnVmZmVyOiBBcnJheUJ1ZmZlcik6IEdlbmVyYXRlZENodW5rIHtcbiAgICAgICAgY29uc3QgaW8gPSBuZXcgYnQuQml0SU8oYnVmZmVyKTtcbiAgICAgICAgbGV0IHRpbGVzOiBWYWxpZFRpbGVbXSA9IFtdO1xuICAgICAgICBmb3IobGV0IGR5ID0gMDsgZHkgPCBDSFVOS19TSVpFOyBkeSsrKSB7XG4gICAgICAgICAgICBmb3IobGV0IGR4ID0gMDsgZHggPCBDSFVOS19TSVpFOyBkeCsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IGNodW5rWCAqIENIVU5LX1NJWkUgKyBkeDtcbiAgICAgICAgICAgICAgICBjb25zdCB5ID0gY2h1bmtZICogQ0hVTktfU0laRSArIGR5O1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbGVDb25zdHJ1Y3RvciA9IGdldFRpbGVUeXBlKHdvcmxkLCB4LCB5KTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aWxlID0gdGlsZUNvbnN0cnVjdG9yLmxvYWQod29ybGQsIHgsIHksIGlvKTtcbiAgICAgICAgICAgICAgICB0aWxlcy5wdXNoKHRpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgR2VuZXJhdGVkQ2h1bmsod29ybGQsIGNodW5rWCwgY2h1bmtZLCB0aWxlcyk7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBzYXZlKCk6IGJ0LlBhcnNlclR5cGU8dHlwZW9mIEZfQ0hVTks+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRlYXRoczogdGhpcy5kZWF0aHMsXG4gICAgICAgICAgICB0aWxlczogdGhpcy5lbmNvZGVUaWxlcygpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBsb2FkKHdvcmxkOiBXb3JsZCwgY2h1bmtYOiBudW1iZXIsIGNodW5rWTogbnVtYmVyLCBzYXZlZENodW5rOiBidC5QYXJzZXJUeXBlPHR5cGVvZiBGX0NIVU5LPik6IEdlbmVyYXRlZENodW5rIHtcbiAgICAgICAgY29uc3QgY2h1bmsgPSBHZW5lcmF0ZWRDaHVuay5kZWNvZGVUaWxlcyh3b3JsZCwgY2h1bmtYLCBjaHVua1ksIHNhdmVkQ2h1bmsudGlsZXMpO1xuICAgICAgICBjaHVuay5kZWF0aHMgPSBzYXZlZENodW5rLmRlYXRocztcbiAgICAgICAgcmV0dXJuIGNodW5rO1xuICAgIH1cbn1cblxuXG4iLCJcblxuXG5sZXQgSURfTlVNID0gMDtcbmZ1bmN0aW9uIGdldElkKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIElEX05VTSsrO1xufVxuXG5cblxuXG5cbnR5cGUgRXZlbnRNYXAgPSB7W2tleTogc3RyaW5nXTogYW55fTtcblxudHlwZSBFdmVudDxNIGV4dGVuZHMgRXZlbnRNYXAsIEsgZXh0ZW5kcyBrZXlvZiBNPiA9IHtcbiAgICByZWFkb25seSBkYXRhOiBNW0tdO1xuICAgIHJlYWRvbmx5IGRpc3BhdGNoZXI6IEV2ZW50RGlzcGF0Y2hlcjxNPjtcbiAgICByZWFkb25seSBsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcjxNLCBLPjtcbiAgICAvKipcbiAgICAgKiBEb2VzIG5vdCB3b3JrIGFzeW5jaHJvbm91c2x5LlxuICAgICovXG4gICAgLy8gVE9ETzogUHJvYmFibHkgYSBkaWZmZXJlbnQgbmFtZSBmb3IgdGhpcy5cbiAgICByZWFkb25seSBzdG9wUHJvcGFnYXRpb246ICgpID0+IHZvaWQ7XG59O1xuXG5leHBvcnQgdHlwZSBFdmVudExpc3RlbmVyPE0gZXh0ZW5kcyBFdmVudE1hcCA9IGFueSwgSyBleHRlbmRzIGtleW9mIE0gPSBhbnk+ID0ge1xuICAgIHJlYWRvbmx5IGtleTogSztcbiAgICByZWFkb25seSBjYWxsYmFja2ZuOiAoZXZlbnQ6IEV2ZW50PE0sIEs+KSA9PiBhbnk7XG4gICAgcmVhZG9ubHkgcHJpb3JpdHk6IG51bWJlcjtcbiAgICByZWFkb25seSBpZDogbnVtYmVyO1xuICAgIHJlYWRvbmx5IG9uY2U6IGJvb2xlYW47XG59XG5cblxuXG5cblxuLyoqXG4gKiBgYGBUeXBlU2NyaXB0XG4gKiBjbGFzcyBUaGluZ3kgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXI8e1xuICogICAgICdtZXNzYWdlJzogc3RyaW5nO1xuICogICAgICd3YXJuJzogeyBsZXZlbDogbnVtYmVyLCBtZXNzYWdlOiBzdHJpbmcgfTtcbiAqIH0+IHsgfVxuICogXG4gKiBjb25zdCB0aGluZyA9IG5ldyBUaGluZ3koKTtcbiAqIFxuICogXG4gKiB0aGluZy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKHsgZGF0YSB9KSA9PiBjb25zb2xlLmxvZyhkYXRhKSk7XG4gKiB0aGluZy5kaXNwYXRjaEV2ZW50KCdtZXNzYWdlJywgXCJIZWxsbywgV29ybGQhXCIpOyAvLyBVc2VzICdtZXNzYWdlJyBkaXNwYXRjaGVyIHRoYXQgcHJpbnRzIFwiSGVsbG8sIFdvcmxkIVwiLlxuICogXG4gKiBcbiAqIHRoaW5nLmFkZEV2ZW50TGlzdGVuZXIoJ3dhcm4nLCAoeyBkYXRhOiB7IGxldmVsLCBtZXNzYWdlIH0sIHN0b3BQcm9wYWdhdGlvbiB9KSA9PiB7XG4gKiAgICAgaWYobGV2ZWwgPCAxMCkgcmV0dXJuO1xuICogICAgIHN0b3BQcm9wYWdhdGlvbigpO1xuICogICAgIGNvbnNvbGUuZXJyb3IoXCJCSUcgRVJST1JcIiwgbWVzc2FnZSk7XG4gKiB9LCBmYWxzZSwgMTAwKTtcbiAqIHRoaW5nLmFkZEV2ZW50TGlzdGVuZXIoJ3dhcm4nLCAoeyBkYXRhOiB7IGxldmVsLCBtZXNzYWdlIH19KSA9PiB7XG4gKiAgICAgY29uc29sZS53YXJuKFwiU01BTEwgRVJST1JcIiwgbWVzc2FnZSk7XG4gKiB9LCBmYWxzZSwgMCk7XG4gKiBcbiAqIHRoaW5nLmRpc3BhdGNoRXZlbnQoJ3dhcm4nLCB7IGxldmVsOiAwLCBtZXNzYWdlOiBcIkVycm9yIDFcIiB9KTsgLy8gVXNlcyBvbmx5IHNlY29uZCAnd2FybicgZGlzcGF0Y2hlci5cbiAqIHRoaW5nLmRpc3BhdGNoRXZlbnQoJ3dhcm4nLCB7IGxldmVsOiAxMCwgbWVzc2FnZTogXCJFcnJvciAyXCIgfSk7IC8vIFVzZXMgb25seSBmaXJzdCAnd2FybicgZGlzcGF0Y2hlci5cbiAqIHRoaW5nLmRpc3BhdGNoRXZlbnQoJ3dhcm4nLCB7IGxldmVsOiAwLCBtZXNzYWdlOiBcIkVycm9yIDFcIiB9KTsgLy8gVXNlcyBvbmx5IHNlY29uZCAnd2FybicgZGlzcGF0Y2hlci5cbiAqIGBgYFxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRXZlbnREaXNwYXRjaGVyPE0gZXh0ZW5kcyBFdmVudE1hcD4ge1xuXG4gICAgcHJpdmF0ZSBfZGlzcGF0Y2hlckRlc3Ryb3llZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHB1YmxpYyBnZXQgZGlzcGF0Y2hlckRlc3Ryb3llZCgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuX2Rpc3BhdGNoZXJEZXN0cm95ZWQ7IH1cbiAgICBwcml2YXRlIGRpc3BhdGNoZXJDaGVja0Rlc3Ryb3llZCgpOiB2b2lkIHtcbiAgICAgICAgaWYodGhpcy5kaXNwYXRjaGVyRGVzdHJveWVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V2ZW50RGlzcGF0Y2hlciB1c2VkIGFmdGVyIGRlc3Ryb3llZC4nKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgbGlzdGVuZXJzOiB7W0sgaW4ga2V5b2YgTV0/OiBFdmVudExpc3RlbmVyPE0sIEs+W119ID0ge307XG4gICAgcHJpdmF0ZSBnZXRMaXN0ZW5lcnNBcnI8SyBleHRlbmRzIGtleW9mIE0+KGtleTogSyk6IEV2ZW50TGlzdGVuZXI8TSwgSz5bXSB7XG4gICAgICAgIGlmKCF0aGlzLmxpc3RlbmVyc1trZXldKSB7XG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVyc1trZXldID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXJzW2tleV0hO1xuICAgIH1cbiAgICBwcml2YXRlICpsaXN0ZW5lcnNJdGVyKCk6IEl0ZXJhYmxlPEV2ZW50TGlzdGVuZXI8TSwga2V5b2YgTT4+IHtcbiAgICAgICAgZm9yKGNvbnN0IGtleSBpbiB0aGlzLmxpc3RlbmVycykge1xuICAgICAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNba2V5IGFzIGtleW9mIE1dITtcbiAgICAgICAgICAgIGZvcihjb25zdCBsaXN0ZW5lciBvZiBsaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBsaXN0ZW5lcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBrZXkgLSBUaGUga2V5IGluIHRoZSBsaXN0ZW5lciBtYXAgdG8gdXNlLlxuICAgICAqIEBwYXJhbSBjYWxsYmFja2ZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBldmVudCBpcyBkaXNwYXRjaGVkIGZvciB0aGlzIGtleS5cbiAgICAgKiBAcGFyYW0gb25jZSAtIElmIHRvIGRlc3Ryb3kgbGlzdGVuZXIgYWZ0ZXIgY2FsbGVkLlxuICAgICAqIEBwYXJhbSBwcmlvcml0eSAtIFByaW9yaXR5IHRvIHNvcnQgbGlzdGVuZXIgdG8uXG4gICAgICogQHJldHVybnMgLSBFdmVudCBsaXN0ZW5lciB0aGF0IHdhcyBhZGRlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgYWRkRXZlbnRMaXN0ZW5lcjxLIGV4dGVuZHMga2V5b2YgTT4oa2V5OiBLLCBjYWxsYmFja2ZuOiAoZXZlbnQ6IEV2ZW50PE0sIEs+KSA9PiBhbnksIG9uY2U6IGJvb2xlYW4gPSBmYWxzZSwgcHJpb3JpdHk6IG51bWJlciA9IDApOiBFdmVudExpc3RlbmVyPE0sIEs+IHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyQ2hlY2tEZXN0cm95ZWQoKTtcbiAgICAgICAgXG4gICAgICAgIGxldCBsaXN0ZW5lcnMgPSB0aGlzLmdldExpc3RlbmVyc0FycihrZXkpO1xuXG4gICAgICAgIGNvbnN0IGxpc3RlbmVyOiBFdmVudExpc3RlbmVyPE0sIEs+ID0ge1xuICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICBjYWxsYmFja2ZuLFxuICAgICAgICAgICAgcHJpb3JpdHksXG4gICAgICAgICAgICBpZDogZ2V0SWQoKSxcbiAgICAgICAgICAgIG9uY2VcbiAgICAgICAgfTtcblxuICAgICAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIGxpc3RlbmVycy5zb3J0KChhLCBiKSA9PiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eSk7XG5cbiAgICAgICAgcmV0dXJuIGxpc3RlbmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBrZXkgLSBUaGUga2V5IHRvIGNob29zZSB3aGF0IGxpc3RlbmVycyB0byBkaXNwYXRjaCBldmVudCB0by5cbiAgICAgKiBAcGFyYW0gZGF0YSAtIFRoZSBkYXRhIHRvIGRpc3BhdGNoIHRvIGxpc3RlbmVycy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGlzcGF0Y2hFdmVudDxLIGV4dGVuZHMga2V5b2YgTT4oa2V5OiBLLCBkYXRhOiBNW0tdKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlckNoZWNrRGVzdHJveWVkKCk7XG5cbiAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5nZXRMaXN0ZW5lcnNBcnIoa2V5KTtcblxuICAgICAgICBmb3IoY29uc3QgbGlzdGVuZXIgb2YgbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBsZXQgc3RvcCA9IGZhbHNlO1xuICAgICAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2tmbih7XG4gICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgICBkaXNwYXRjaGVyOiB0aGlzLFxuICAgICAgICAgICAgICAgIGxpc3RlbmVyLFxuICAgICAgICAgICAgICAgIHN0b3BQcm9wYWdhdGlvbjogKCkgPT4gc3RvcCA9IHRydWVcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZihsaXN0ZW5lci5vbmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoc3RvcCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gcmVtb3ZlIC0gTGlzdGVuZXIgb3IgbGlzdGVuZXIgVVVJRC5cbiAgICAgKiBAcmV0dXJucyAtIElmIHN1Y2Nlc3NmdWxseSByZW1vdmVkLlxuICAgICAqL1xuICAgIHB1YmxpYyByZW1vdmVFdmVudExpc3RlbmVyPEsgZXh0ZW5kcyBrZXlvZiBNPihyZW1vdmU6IEV2ZW50TGlzdGVuZXI8TSwgSz4gfCBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyQ2hlY2tEZXN0cm95ZWQoKTtcbiAgICAgICAgXG4gICAgICAgIGxldCByZW1vdmVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYodHlwZW9mIHJlbW92ZSAhPSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5nZXRMaXN0ZW5lcnNBcnIocmVtb3ZlLmtleSk7XG5cbiAgICAgICAgICAgIGZvcihjb25zdCBsaXN0ZW5lciBvZiBsaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgICBpZihsaXN0ZW5lci5pZCA9PSByZW1vdmUuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShsaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lciksIDEpO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IoY29uc3QgbGlzdGVuZXIgb2YgdGhpcy5saXN0ZW5lcnNJdGVyKCkpIHtcbiAgICAgICAgICAgICAgICBpZihsaXN0ZW5lci5pZCA9PSByZW1vdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGxpc3RlbmVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVtb3ZlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgZGlzcGF0Y2hlciBjbGVhbmluZyB1cCBhbGwgbGlzdGVuZXJzLlxuICAgICAqIERpc3BhdGNoZXIgY2Fubm90IGJlIHVzZWQgYWZ0ZXIgZGVzdHJveWVkLlxuICAgICAqL1xuICAgIHB1YmxpYyBkZXN0cm95RGlzcGF0Y2hlcigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyQ2hlY2tEZXN0cm95ZWQoKTtcblxuICAgICAgICB0aGlzLl9kaXNwYXRjaGVyRGVzdHJveWVkID0gdHJ1ZTtcblxuICAgICAgICBmb3IoY29uc3Qga2V5IGluIHRoaXMubGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5saXN0ZW5lcnNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuXG4iLCJcbmltcG9ydCB7IENodW5rLCBHZW5lcmF0ZWRDaHVuayB9IGZyb20gXCIuL0NodW5rXCI7XG5pbXBvcnQgeyBDSFVOS19TSVpFIH0gZnJvbSBcIi4vQ29uc3RhbnRzXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZVRpbGUgfSBmcm9tIFwiLi9HZW5lcmF0b3JcIjtcbmltcG9ydCB7IHNwbGl0bWl4MzIgfSBmcm9tIFwiLi4vUk5HXCI7XG5pbXBvcnQgeyBUSUxFX05PTkVfTkVBUkJZLCB0eXBlIFZhbGlkVGlsZSB9IGZyb20gXCIuL3RpbGUvVGlsZVwiO1xuaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcIiRsaWIvRXZlbnREaXNwYXRjaGVyXCI7XG5pbXBvcnQgeyBGX1dPUkxEIH0gZnJvbSBcIi4vU2F2ZVwiO1xuaW1wb3J0ICogYXMgYnQgZnJvbSBcImJpbnR5cGVcIjtcbmltcG9ydCB7IHNwaXJhbEl0ZXIgfSBmcm9tIFwiJGxpYi9VdGlsXCI7XG5cblxuXG5leHBvcnQgdHlwZSBDaHVua0Nvb3JkaW5hdGUgPSBgJHtudW1iZXJ9LCR7bnVtYmVyfWA7XG5cbmV4cG9ydCBjbGFzcyBXb3JsZCBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlcjx7XG4gICAgJ2NoYW5nZSc6IG51bGw7XG4gICAgJ3NvdW5kX3JldmVhbCc6IG51bWJlcjtcbiAgICAnc291bmRfdW5mbGFnJzogbnVsbDtcbiAgICAnc291bmRfZXhwbG9zaW9uJzogbnVsbDtcbiAgICAncGFydGljbGVfdW5mbGFnJzogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9O1xuICAgICdwYXJ0aWNsZV9leHBsb3Npb24nOiB7IHg6IG51bWJlciwgeTogbnVtYmVyIH07XG4gICAgJ3BhcnRpY2xlX3JldmVhbCc6IHsgeDogbnVtYmVyLCB5OiBudW1iZXIgfTtcbiAgICAnZGllJzogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9O1xufT4ge1xuICAgIHB1YmxpYyBjaGFuZ2UoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgnY2hhbmdlJywgbnVsbCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlYWRvbmx5IHNlZWQ6IG51bWJlcjtcbiAgICBwdWJsaWMgcmVhZG9ubHkgdGlsZVNlZWQ6IG51bWJlcjtcbiAgICBwdWJsaWMgcmVhZG9ubHkgYmlvbWVTZWVkOiBudW1iZXI7XG5cbiAgICBwdWJsaWMgY3JlYXRlZEF0OiBEYXRlID0gbmV3IERhdGUoKTtcbiAgICBwdWJsaWMgZGVhdGhzOiBudW1iZXIgPSAwO1xuXG4gICAgY29uc3RydWN0b3Ioc2VlZDogbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc2VlZCA9IChzZWVkICYgMHhGRkZGRkZGRikgPj4+IDA7XG4gICAgICAgIGNvbnN0IHJuZyA9IHNwbGl0bWl4MzIodGhpcy5zZWVkLCBmYWxzZSk7XG4gICAgICAgIHRoaXMudGlsZVNlZWQgPSBybmcoKTtcbiAgICAgICAgdGhpcy5iaW9tZVNlZWQgPSBybmcoKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdkaWUnLCAoeyBkYXRhOiB7IHgsIHkgfSB9KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRlYXRocysrO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBkZWF0aENodW5rID0gdGhpcy5nZXRHZW5lcmF0ZWRDaHVuayhNYXRoLmZsb29yKHggLyBDSFVOS19TSVpFKSwgTWF0aC5mbG9vcih5IC8gQ0hVTktfU0laRSkpO1xuICAgICAgICAgICAgZGVhdGhDaHVuay5kZWF0aHMucHVzaCh7XG4gICAgICAgICAgICAgICAgeDogeCAtIChkZWF0aENodW5rLmNodW5rWCAqIENIVU5LX1NJWkUpLFxuICAgICAgICAgICAgICAgIHk6IHkgLSAoZGVhdGhDaHVuay5jaHVua1kgKiBDSFVOS19TSVpFKSxcbiAgICAgICAgICAgICAgICBkaWVkQXQ6IG5ldyBEYXRlKClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNodW5rczoge1trZXk6IENodW5rQ29vcmRpbmF0ZV06IEdlbmVyYXRlZENodW5rfSA9IHt9O1xuXG4gICAgcHVibGljIGdlbmVyYXRlVGlsZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IFZhbGlkVGlsZSB7XG4gICAgICAgIHJldHVybiBnZW5lcmF0ZVRpbGUodGhpcywgeCwgeSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldENodW5rKGNodW5rWDogbnVtYmVyLCBjaHVua1k6IG51bWJlcik6IENodW5rIHtcbiAgICAgICAgY29uc3QgbG9hZGVkQ2h1bmsgPSB0aGlzLmNodW5rc1tgJHtjaHVua1h9LCR7Y2h1bmtZfWBdO1xuICAgICAgICBpZihsb2FkZWRDaHVuaykgcmV0dXJuIGxvYWRlZENodW5rO1xuICAgICAgICByZXR1cm4gbmV3IENodW5rKHRoaXMsIGNodW5rWCwgY2h1bmtZKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0R2VuZXJhdGVkQ2h1bmsoY2h1bmtYOiBudW1iZXIsIGNodW5rWTogbnVtYmVyKTogR2VuZXJhdGVkQ2h1bmsge1xuICAgICAgICBjb25zdCBjaHVuayA9IHRoaXMuZ2V0Q2h1bmsoY2h1bmtYLCBjaHVua1kpO1xuICAgICAgICBpZihjaHVuay5pc0dlbmVyYXRlZCgpKSByZXR1cm4gY2h1bms7XG4gICAgICAgIGNvbnN0IGdlbkNodW5rID0gY2h1bmsuZ2VuZXJhdGUoKTtcbiAgICAgICAgdGhpcy5jaHVua3NbYCR7Y2h1bmtYfSwke2NodW5rWX1gXSA9IGdlbkNodW5rO1xuICAgICAgICByZXR1cm4gZ2VuQ2h1bms7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFRpbGUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBWYWxpZFRpbGUge1xuICAgICAgICBjb25zdCBjaHVua1ggPSBNYXRoLmZsb29yKHggLyBDSFVOS19TSVpFKTtcbiAgICAgICAgY29uc3QgY2h1bmtZID0gTWF0aC5mbG9vcih5IC8gQ0hVTktfU0laRSk7XG4gICAgICAgIGNvbnN0IGNodW5rID0gdGhpcy5nZXRHZW5lcmF0ZWRDaHVuayhjaHVua1gsIGNodW5rWSk7XG4gICAgICAgIHJldHVybiBjaHVuay5nZXRUaWxlQWJzb2x1dGUoeCwgeSk7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBmbGFnKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHRpbGUgPSB0aGlzLmdldFRpbGUoeCwgeSk7XG4gICAgICAgIGlmKHRpbGUuaXNEZWF0aFRpbGUoKSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBwcmV2TnVtRmxhZ3MgPSB0aWxlLm51bUZsYWdzKCk7XG4gICAgICAgIHRpbGUuZmxhZygpO1xuICAgICAgICBjb25zdCBjdXJyZW50TnVtRmxhZ3MgPSB0aWxlLm51bUZsYWdzKCk7XG4gICAgICAgIGlmKGN1cnJlbnROdW1GbGFncyA9PSAwICYmIGN1cnJlbnROdW1GbGFncyAhPSBwcmV2TnVtRmxhZ3MpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgncGFydGljbGVfdW5mbGFnJywgeyB4LCB5IH0pO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdzb3VuZF91bmZsYWcnLCBudWxsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX3JldmVhbENvdW50OiBudW1iZXIgPSAwO1xuICAgIHByaXZhdGUgX2RpZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIF9yZXZlYWwoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdGlsZSA9IHRoaXMuZ2V0VGlsZSh4LCB5KTtcbiAgICAgICAgaWYodGlsZS5yZXZlYWwoKSkge1xuICAgICAgICAgICAgdGhpcy5fcmV2ZWFsQ291bnQrKztcbiAgICAgICAgICAgIGlmKHRpbGUubnVtTWluZXMoKSAhPSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGllZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdwYXJ0aWNsZV9leHBsb3Npb24nLCB7IHg6IHRpbGUueCwgeTogdGlsZS55IH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgnZGllJywgeyB4OiB0aWxlLngsIHk6IHRpbGUueSB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgncGFydGljbGVfcmV2ZWFsJywgeyB4OiB0aWxlLngsIHk6IHRpbGUueSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXZlYWw6IFZhbGlkVGlsZVtdID0gWyBdO1xuICAgICAgICBsZXQgc3RhY2s6IFZhbGlkVGlsZVtdID0gWyBdO1xuICAgICAgICAvLyBJZiBlaXRoZXIgb2Ygc3RyYXdiZXJyeSBuZWFyYnkgbWluZSB2YWx1ZXMgaXMgcmlnaHQuXG4gICAgICAgIGlmKHRpbGUudHlwZSA9PSAnc3RyYXdiZXJyeScpIHtcbiAgICAgICAgICAgIGNvbnN0IG5lYXJieVNlY29uZGFyeSA9IHRpbGUuc2Vjb25kYXJ5TWluZXNOZWFyYnkoZmFsc2UpO1xuICAgICAgICAgICAgaWYobmVhcmJ5U2Vjb25kYXJ5ICE9IG51bGwgJiYgbmVhcmJ5U2Vjb25kYXJ5ID09IHRpbGUuZmxhZ3NOZWFyYnkoKSkge1xuICAgICAgICAgICAgICAgIHN0YWNrLnB1c2godGlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYodGlsZS5taW5lc05lYXJieSgpID09IHRpbGUuZmxhZ3NOZWFyYnkoKSkge1xuICAgICAgICAgICAgaWYoIXN0YWNrLmluY2x1ZGVzKHRpbGUpKSBzdGFjay5wdXNoKHRpbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgdGlsZSA9IHN0YWNrLnBvcCgpITtcbiAgICAgICAgICAgIHJldmVhbC5wdXNoKHRpbGUpO1xuXG4gICAgICAgICAgICBmb3IoY29uc3Qgb2Zmc2V0IG9mIHRpbGUuc2VhcmNoUGF0dGVybikge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5UaWxlID0gdGhpcy5nZXRUaWxlKHRpbGUueCArIG9mZnNldC54LCB0aWxlLnkgKyBvZmZzZXQueSk7XG4gICAgICAgICAgICAgICAgaWYoXG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnNvbWUodCA9PiB0LnggPT0gblRpbGUueCAmJiB0LnkgPT0gblRpbGUueSkgfHxcbiAgICAgICAgICAgICAgICAgICAgcmV2ZWFsLnNvbWUodCA9PiB0LnggPT0gblRpbGUueCAmJiB0LnkgPT0gblRpbGUueSlcbiAgICAgICAgICAgICAgICApIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGlmKG5UaWxlLm1pbmVzTmVhcmJ5KCkgPT0gVElMRV9OT05FX05FQVJCWSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKG5UaWxlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXZlYWwucHVzaChuVGlsZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yKGNvbnN0IHIgb2YgcmV2ZWFsKSB7XG4gICAgICAgICAgICBpZihyLnJldmVhbCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmV2ZWFsQ291bnQrKztcbiAgICAgICAgICAgICAgICBpZihyLm51bU1pbmVzKCkgIT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaWVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdwYXJ0aWNsZV9leHBsb3Npb24nLCB7IHg6IHIueCwgeTogci55IH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoJ2RpZScsIHsgeDogci54LCB5OiByLnkgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdwYXJ0aWNsZV9yZXZlYWwnLCB7IHg6IHIueCwgeTogci55IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIElmIGRlYXRoXG4gICAgICovXG4gICAgcHVibGljIHJldmVhbCh4OiBudW1iZXIsIHk6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICB0aGlzLl9yZXZlYWxDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuX2RpZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcmV2ZWFsKHgsIHkpO1xuICAgICAgICBpZih0aGlzLl9yZXZlYWxDb3VudCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgnc291bmRfcmV2ZWFsJywgdGhpcy5fcmV2ZWFsQ291bnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmKHRoaXMuX2RpZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgnc291bmRfZXhwbG9zaW9uJywgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RpZWQ7XG4gICAgfVxuXG4gICAgcHVibGljIHJlc2V0KHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNodW5rID0gdGhpcy5nZXRDaHVuayhNYXRoLmZsb29yKHggLyBDSFVOS19TSVpFKSwgTWF0aC5mbG9vcih5IC8gQ0hVTktfU0laRSkpO1xuICAgICAgICBpZighY2h1bmsuaXNHZW5lcmF0ZWQoKSkgcmV0dXJuO1xuICAgICAgICBjaHVuay5yZXNldFRpbGVBYnNvbHV0ZSh4LCB5KTtcbiAgICB9XG5cblxuXG4gICAgcHVibGljIGNsb3Nlc3QwKG9mZnNldFg6IG51bWJlciwgb2Zmc2V0WTogbnVtYmVyKTogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9IHtcbiAgICAgICAgZm9yKGNvbnN0IHsgeCwgeSB9IG9mIHNwaXJhbEl0ZXIob2Zmc2V0WCwgb2Zmc2V0WSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbGUgPSB0aGlzLmdldFRpbGUoeCwgeSk7XG4gICAgICAgICAgICBpZih0aWxlLm51bU1pbmVzKCkgPT0gMCAmJiB0aWxlLm1pbmVzTmVhcmJ5KCkgPT0gVElMRV9OT05FX05FQVJCWSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHgsIHkgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgZXJyb3Igc2hvdWxkIG5ldmVyIGhhcHBlbiwgaXRcXCdzIGp1c3QgaGVyZSB0byBtYWtlIFR5cGVTY3JpcHQgaGFwcHkuJyk7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBzYXZlKCk6IGJ0LlBhcnNlclR5cGU8dHlwZW9mIEZfV09STEQ+IHtcbiAgICAgICAgY29uc3Qgb2JqOiBidC5QYXJzZXJUeXBlPHR5cGVvZiBGX1dPUkxEPiA9IHtcbiAgICAgICAgICAgIHNlZWQ6IHRoaXMuc2VlZCxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogdGhpcy5jcmVhdGVkQXQsXG4gICAgICAgICAgICBudW1EZWF0aHM6IHRoaXMuZGVhdGhzLFxuICAgICAgICAgICAgY2h1bmtzOiBuZXcgTWFwKClcbiAgICAgICAgfTtcblxuICAgICAgICBmb3IoY29uc3QgX2NodW5rQ29vcmQgaW4gdGhpcy5jaHVua3MpIHtcbiAgICAgICAgICAgIGNvbnN0IGNodW5rQ29vcmQgPSBfY2h1bmtDb29yZCBhcyBDaHVua0Nvb3JkaW5hdGU7XG4gICAgICAgICAgICBjb25zdCBjaHVuayA9IHRoaXMuY2h1bmtzW2NodW5rQ29vcmRdO1xuICAgICAgICAgICAgb2JqLmNodW5rcy5zZXQoY2h1bmtDb29yZCwgY2h1bmsuc2F2ZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBsb2FkKHNhdmU6IGJ0LlBhcnNlclR5cGU8dHlwZW9mIEZfV09STEQ+KTogV29ybGQge1xuICAgICAgICBjb25zdCB3b3JsZCA9IG5ldyBXb3JsZChzYXZlLnNlZWQpO1xuICAgICAgICB3b3JsZC5jcmVhdGVkQXQgPSBzYXZlLmNyZWF0ZWRBdDtcbiAgICAgICAgd29ybGQuZGVhdGhzID0gc2F2ZS5udW1EZWF0aHM7XG5cbiAgICAgICAgc2F2ZS5jaHVua3MuZm9yRWFjaCgoY2h1bmssIGNvb3JkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBbIF8sIGNodW5rWHN0ciwgY2h1bmtZc3RyIF0gPSBjb29yZC5tYXRjaCgvXigtP1xcZCspLCgtP1xcZCspJC8pITtcbiAgICAgICAgICAgIGNvbnN0IFsgY2h1bmtYLCBjaHVua1kgXSA9IFsgcGFyc2VJbnQoY2h1bmtYc3RyKSwgcGFyc2VJbnQoY2h1bmtZc3RyKSBdO1xuICAgICAgICAgICAgd29ybGQuY2h1bmtzW2Nvb3JkXSA9IEdlbmVyYXRlZENodW5rLmxvYWQod29ybGQsIGNodW5rWCwgY2h1bmtZLCBjaHVuayk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB3b3JsZDtcbiAgICB9XG5cbn1cblxuXG4iLCJcbmltcG9ydCB7IEV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCIkbGliL0V2ZW50RGlzcGF0Y2hlclwiO1xuaW1wb3J0IHR5cGUgeyBHZW5lcmF0ZWRDaHVuayB9IGZyb20gXCIuL0NodW5rXCI7XG5pbXBvcnQgeyBDSFVOS19TSVpFIH0gZnJvbSBcIi4vQ29uc3RhbnRzXCI7XG5pbXBvcnQgdHlwZSB7IFdvcmxkIH0gZnJvbSBcIi4vV29ybGRcIjtcbmltcG9ydCB0eXBlIHsgVmFsaWRUaWxlIH0gZnJvbSBcIi4vdGlsZS9UaWxlXCI7XG5cblxuXG5leHBvcnQgY2xhc3MgVmlld3BvcnQgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXI8e1xuICAgICdjaGFuZ2UnOiBudWxsO1xufT4ge1xuICAgIHB1YmxpYyBjaGFuZ2UoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgnY2hhbmdlJywgbnVsbCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlYWRvbmx5IHdvcmxkOiBXb3JsZDtcblxuICAgIGNvbnN0cnVjdG9yKHdvcmxkOiBXb3JsZCwgdmlld3BvcnQ/OiB7IHg6IG51bWJlciwgeTogbnVtYmVyLCBzY2FsZTogbnVtYmVyIH0pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy53b3JsZCA9IHdvcmxkO1xuICAgICAgICBpZih2aWV3cG9ydCkge1xuICAgICAgICAgICAgdGhpcy5sb2FkKHZpZXdwb3J0KTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgXG4gICAgLyoqIFZpZXdwb3J0IGNlbnRlciBYICovXG4gICAgcHVibGljIHg6IG51bWJlciA9IDA7XG4gICAgLyoqIFZpZXdwb3J0IGNlbnRlciBZICovXG4gICAgcHVibGljIHk6IG51bWJlciA9IDA7XG4gICAgLyoqIFZpZXdwb3J0IHRpbGUgc2NhbGUgaW4gcGl4ZWxzICovXG4gICAgcHVibGljIHNjYWxlOiBudW1iZXIgPSA2NDtcblxuXG5cbiAgICBwdWJsaWMgbG9hZCh2aWV3cG9ydDogeyB4OiBudW1iZXIsIHk6IG51bWJlciwgc2NhbGU6IG51bWJlciB9KTogdm9pZCB7XG4gICAgICAgIHRoaXMueCA9IHZpZXdwb3J0Lng7XG4gICAgICAgIHRoaXMueSA9IHZpZXdwb3J0Lnk7XG4gICAgICAgIHRoaXMuc2NhbGUgPSB2aWV3cG9ydC5zY2FsZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2F2ZSgpOiB7IHg6IG51bWJlciwgeTogbnVtYmVyLCBzY2FsZTogbnVtYmVyIH0ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogdGhpcy54LFxuICAgICAgICAgICAgeTogdGhpcy55LFxuICAgICAgICAgICAgc2NhbGU6IHRoaXMuc2NhbGVcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgdHJhbnNsYXRlKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQsIGR4OiBudW1iZXIsIGR5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy54IC09IGR4IC8gdGhpcy5zY2FsZTtcbiAgICAgICAgdGhpcy55IC09IGR5IC8gdGhpcy5zY2FsZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2NhbGVGcm9tKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQsIG5ld1NjYWxlOiBudW1iZXIsIGFyb3VuZFg6IG51bWJlciwgYXJvdW5kWTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGxhc3RDZW50ZXJYID0gdGhpcy54ICsgKGNhbnZhcy53aWR0aCAvIHRoaXMuc2NhbGUpICogKGFyb3VuZFggLyBjYW52YXMud2lkdGggLSAwLjUpO1xuICAgICAgICBjb25zdCBsYXN0Q2VudGVyWSA9IHRoaXMueSArIChjYW52YXMuaGVpZ2h0IC8gdGhpcy5zY2FsZSkgKiAoYXJvdW5kWSAvIGNhbnZhcy5oZWlnaHQgLSAwLjUpO1xuXG4gICAgICAgIHRoaXMuc2NhbGUgPSBuZXdTY2FsZTtcblxuICAgICAgICBjb25zdCBjZW50ZXJYID0gdGhpcy54ICsgKGNhbnZhcy53aWR0aCAvIHRoaXMuc2NhbGUpICogKGFyb3VuZFggLyBjYW52YXMud2lkdGggLSAwLjUpO1xuICAgICAgICBjb25zdCBjZW50ZXJZID0gdGhpcy55ICsgKGNhbnZhcy5oZWlnaHQgLyB0aGlzLnNjYWxlKSAqIChhcm91bmRZIC8gY2FudmFzLmhlaWdodCAtIDAuNSk7XG5cbiAgICAgICAgdGhpcy54IC09IGNlbnRlclggLSBsYXN0Q2VudGVyWDtcbiAgICAgICAgdGhpcy55IC09IGNlbnRlclkgLSBsYXN0Q2VudGVyWTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2xhbXBTY2FsZShjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LCBzY2FsZTogbnVtYmVyLCBtaW5UaWxlczogbnVtYmVyLCBtYXhUaWxlczogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgaWYoY2FudmFzLndpZHRoIC8gc2NhbGUgPCBtaW5UaWxlcykge1xuICAgICAgICAgICAgc2NhbGUgPSBjYW52YXMud2lkdGggLyBtaW5UaWxlcztcbiAgICAgICAgfVxuICAgICAgICBpZihjYW52YXMuaGVpZ2h0IC8gc2NhbGUgPCBtaW5UaWxlcykge1xuICAgICAgICAgICAgc2NhbGUgPSBjYW52YXMuaGVpZ2h0IC8gbWluVGlsZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYoY2FudmFzLndpZHRoIC8gc2NhbGUgPiBtYXhUaWxlcykge1xuICAgICAgICAgICAgc2NhbGUgPSBjYW52YXMud2lkdGggLyBtYXhUaWxlcztcbiAgICAgICAgfVxuICAgICAgICBpZihjYW52YXMuaGVpZ2h0IC8gc2NhbGUgPiBtYXhUaWxlcykge1xuICAgICAgICAgICAgc2NhbGUgPSBjYW52YXMuaGVpZ2h0IC8gbWF4VGlsZXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2NhbGU7XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyBib3VuZHMoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgcm91bmQ6IGJvb2xlYW4sIG1hcmdpbjogbnVtYmVyID0gMCk6IHsgbWluWDogbnVtYmVyLCBtaW5ZOiBudW1iZXIsIG1heFg6IG51bWJlciwgbWF4WTogbnVtYmVyIH0ge1xuICAgICAgICBjb25zdCBtaW5YID0gdGhpcy54IC0gY2FudmFzLndpZHRoIC8gdGhpcy5zY2FsZSAvIDIgLSBtYXJnaW47XG4gICAgICAgIGNvbnN0IG1pblkgPSB0aGlzLnkgLSBjYW52YXMuaGVpZ2h0IC8gdGhpcy5zY2FsZSAvIDIgLSBtYXJnaW47XG4gICAgICAgIGNvbnN0IG1heFggPSB0aGlzLnggKyBjYW52YXMud2lkdGggLyB0aGlzLnNjYWxlIC8gMiArIG1hcmdpbjtcbiAgICAgICAgY29uc3QgbWF4WSA9IHRoaXMueSArIGNhbnZhcy5oZWlnaHQgLyB0aGlzLnNjYWxlIC8gMiArIG1hcmdpbjtcbiAgICAgICAgcmV0dXJuIHJvdW5kID8ge1xuICAgICAgICAgICAgbWluWDogTWF0aC5mbG9vcihtaW5YKSxcbiAgICAgICAgICAgIG1pblk6IE1hdGguZmxvb3IobWluWSksXG4gICAgICAgICAgICBtYXhYOiBNYXRoLmNlaWwobWF4WCksXG4gICAgICAgICAgICBtYXhZOiBNYXRoLmNlaWwobWF4WSlcbiAgICAgICAgfSA6IHtcbiAgICAgICAgICAgIG1pblgsIG1pblksIG1heFgsIG1heFlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBpbkJvdW5kcyhjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LCB4OiBudW1iZXIsIHk6IG51bWJlciwgbWFyZ2luOiBudW1iZXIgPSAwKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGJvdW5kcyA9IHRoaXMuYm91bmRzKGNhbnZhcywgZmFsc2UsIG1hcmdpbik7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB4ID49IGJvdW5kcy5taW5YICYmIHggPD0gYm91bmRzLm1heFggJiZcbiAgICAgICAgICAgIHkgPj0gYm91bmRzLm1pblkgJiYgeSA8PSBib3VuZHMubWF4WVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBjYW52YXNQb3MoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgeDogbnVtYmVyLCB5OiBudW1iZXIsIGZsb29yOiBib29sZWFuKTogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9IHtcbiAgICAgICAgY29uc3QgY1ggPSAoeCAtIGNhbnZhcy53aWR0aCAvIDIpIC8gdGhpcy5zY2FsZSArIHRoaXMueDtcbiAgICAgICAgY29uc3QgY1kgPSAoeSAtIGNhbnZhcy5oZWlnaHQgLyAyKSAvIHRoaXMuc2NhbGUgKyB0aGlzLnk7XG4gICAgICAgIHJldHVybiBmbG9vciA/IHtcbiAgICAgICAgICAgIHg6IE1hdGguZmxvb3IoY1gpLFxuICAgICAgICAgICAgeTogTWF0aC5mbG9vcihjWSlcbiAgICAgICAgfSA6IHtcbiAgICAgICAgICAgIHg6IGNYLCB5OiBjWVxuICAgICAgICB9XG4gICAgfVxuXG5cblxuICAgIHB1YmxpYyB0cmFuc2Zvcm1DdHgoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiB2b2lkIHtcbiAgICAgICAgY3R4LnRyYW5zbGF0ZShjYW52YXMud2lkdGggLyAyLCBjYW52YXMuaGVpZ2h0IC8gMik7XG4gICAgICAgIGN0eC5zY2FsZSh0aGlzLnNjYWxlLCB0aGlzLnNjYWxlKTtcbiAgICAgICAgY3R4LnRyYW5zbGF0ZSgtdGhpcy54LCAtdGhpcy55KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZm9yRWFjaFRpbGVJblZpZXdwb3J0KGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQsIGNhbGxiYWNrZm46ICh0aWxlOiBWYWxpZFRpbGUpID0+IHZvaWQsIG1hcmdpbjogbnVtYmVyID0gMCk6IHZvaWQge1xuICAgICAgICBjb25zdCBib3VuZHMgPSB0aGlzLmJvdW5kcyhjYW52YXMsIHRydWUsIG1hcmdpbik7XG4gICAgICAgIGZvcihsZXQgeCA9IGJvdW5kcy5taW5YOyB4IDwgYm91bmRzLm1heFg7IHgrKykge1xuICAgICAgICAgICAgZm9yKGxldCB5ID0gYm91bmRzLm1pblk7IHkgPCBib3VuZHMubWF4WTsgeSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGlsZSA9IHRoaXMud29ybGQuZ2V0VGlsZSh4LCB5KTtcbiAgICAgICAgICAgICAgICBjYWxsYmFja2ZuKHRpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGZvckVhY2hDaHVua0luVmlld3BvcnQoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgY2FsbGJhY2tmbjogKGNodW5rOiBHZW5lcmF0ZWRDaHVuaykgPT4gdm9pZCwgbWFyZ2luOiBudW1iZXIgPSAwKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGJvdW5kcyA9IHRoaXMuYm91bmRzKGNhbnZhcywgdHJ1ZSwgbWFyZ2luKTtcbiAgICAgICAgYm91bmRzLm1pblggPSBNYXRoLmZsb29yKGJvdW5kcy5taW5YIC8gQ0hVTktfU0laRSk7XG4gICAgICAgIGJvdW5kcy5taW5ZID0gTWF0aC5mbG9vcihib3VuZHMubWluWSAvIENIVU5LX1NJWkUpO1xuICAgICAgICBib3VuZHMubWF4WCA9IE1hdGguY2VpbChib3VuZHMubWF4WCAvIENIVU5LX1NJWkUpO1xuICAgICAgICBib3VuZHMubWF4WSA9IE1hdGguY2VpbChib3VuZHMubWF4WSAvIENIVU5LX1NJWkUpO1xuICAgICAgICBmb3IobGV0IHggPSBib3VuZHMubWluWDsgeCA8IGJvdW5kcy5tYXhYOyB4KyspIHtcbiAgICAgICAgICAgIGZvcihsZXQgeSA9IGJvdW5kcy5taW5ZOyB5IDwgYm91bmRzLm1heFk7IHkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNodW5rID0gdGhpcy53b3JsZC5nZXRDaHVuayh4LCB5KTtcbiAgICAgICAgICAgICAgICBpZighY2h1bmsuaXNHZW5lcmF0ZWQoKSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tmbihjaHVuayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuXG4iLCJcbmltcG9ydCB7IFdvcmxkLCB0eXBlIENodW5rQ29vcmRpbmF0ZSB9IGZyb20gXCIuL1dvcmxkXCI7XG5pbXBvcnQgKiBhcyBidCBmcm9tIFwiYmludHlwZVwiO1xuaW1wb3J0IHsgVmlld3BvcnQgfSBmcm9tIFwiLi9WaWV3cG9ydFwiO1xuaW1wb3J0IHR5cGUgeyBCb29rbWFyayB9IGZyb20gXCIkY29tcG9uZW50cy9Cb29rbWFya3NNb2RhbC5zdmVsdGVcIjtcblxuXG5cbmZ1bmN0aW9uIG5ld1dvcmxkKHNhdmVTbG90OiBzdHJpbmcsIG92ZXJ3cml0ZTogYm9vbGVhbik6IHsgd29ybGQ6IFdvcmxkLCBzcGF3blg6IG51bWJlciwgc3Bhd25ZOiBudW1iZXIgfSB7XG4gICAgY29uc29sZS5sb2coJ0xvYWRlZCBuZXcgd29ybGQnKTtcbiAgICBpZihvdmVyd3JpdGUpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oc2F2ZVNsb3QsICdQTEFDRUhPTERFUicpO1xuICAgIH1cbiAgICBjb25zdCB3b3JsZCA9IG5ldyBXb3JsZChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAweEZGRkZGRkZGKSk7XG4gICAgY29uc3QgY2xvc2VzdDAgPSB3b3JsZC5jbG9zZXN0MCgwLCAwKTtcbiAgICB3b3JsZC5yZXZlYWwoY2xvc2VzdDAueCwgY2xvc2VzdDAueSk7XG4gICAgcmV0dXJuIHsgd29ybGQsIHNwYXduWDogY2xvc2VzdDAueCwgc3Bhd25ZOiBjbG9zZXN0MC55IH07XG59XG5cbmZ1bmN0aW9uIG5ld1NhdmUoc2F2ZVNsb3Q6IHN0cmluZywgb3ZlcndyaXRlOiBib29sZWFuKTogU2F2ZSB7XG4gICAgY29uc3QgeyB3b3JsZCwgc3Bhd25YLCBzcGF3blkgfSA9IG5ld1dvcmxkKHNhdmVTbG90LCBvdmVyd3JpdGUpO1xuICAgIGNvbnN0IHZpZXdwb3J0ID0gbmV3IFZpZXdwb3J0KHdvcmxkLCB7IHg6IHNwYXduWCwgeTogc3Bhd25ZLCBzY2FsZTogNDggfSk7XG4gICAgY29uc29sZS5sb2codmlld3BvcnQpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHdvcmxkLFxuICAgICAgICB2aWV3cG9ydCxcbiAgICAgICAgYm9va21hcmtzOiBbe1xuICAgICAgICAgICAgbmFtZTogJ1NwYXduJyxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgICAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydC5zYXZlKClcbiAgICAgICAgfV1cbiAgICB9O1xufVxuXG4vLyBAdHMtaWdub3JlXG5leHBvcnQgZnVuY3Rpb24gbG9hZChzYXZlU2xvdDogc3RyaW5nKTogU2F2ZSB7XG4gICAgY29uc3Qgc3RyID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oc2F2ZVNsb3QpO1xuICAgIGlmKCFzdHIpIHtcbiAgICAgICAgcmV0dXJuIG5ld1NhdmUoc2F2ZVNsb3QsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdMb2FkZWQgc2F2ZWQgd29ybGQnKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHNhdmUgPSBGX1NBVkUuZGVjb2RlKHN0cik7XG4gICAgICAgICAgICBjb25zdCB3b3JsZCA9IFdvcmxkLmxvYWQoc2F2ZS53b3JsZCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHZpZXdwb3J0ID0gbmV3IFZpZXdwb3J0KHdvcmxkLCBzYXZlLnZpZXdwb3J0KTtcbiAgICAgICAgICAgIHJldHVybiB7IHdvcmxkLCB2aWV3cG9ydCwgYm9va21hcmtzOiBzYXZlLmJvb2ttYXJrcyB9O1xuICAgICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGxvYWQgd29ybGQuJyk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXdTYXZlKHNhdmVTbG90LCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYXZlKHNhdmVTbG90OiBzdHJpbmcsIHNhdmU6IFNhdmUpOiB2b2lkIHtcbiAgICBpZihsb2NhbFN0b3JhZ2UuZ2V0SXRlbShzYXZlU2xvdCkgIT09IG51bGwpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1NhdmUgd29ybGQnKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHNhdmVTbG90LCBGX1NBVkUuZW5jb2RlKHtcbiAgICAgICAgICAgICAgICB3b3JsZDogc2F2ZS53b3JsZC5zYXZlKCksXG4gICAgICAgICAgICAgICAgdmlld3BvcnQ6IHNhdmUudmlld3BvcnQuc2F2ZSgpLFxuICAgICAgICAgICAgICAgIGJvb2ttYXJrczogc2F2ZS5ib29rbWFya3MgPz8gW11cbiAgICAgICAgICAgIH0sIHsgYmFzZTY0OiB0cnVlIH0pKTtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdzYXZlX2Vycm9yJyk7XG4gICAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnc2F2ZV9lcnJvcicsIFN0cmluZyhlcnIpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyKHNhdmVTbG90OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShzYXZlU2xvdCk7XG59XG5cblxuXG5cblxuZXhwb3J0IGNvbnN0IEZfQ0hVTksgPSBidC5vYmplY3Qoe1xuICAgIGRlYXRoczogYnQuYXJyYXkoYnQub2JqZWN0KHtcbiAgICAgICAgeDogYnQubnVtYmVyKCd1OCcpLFxuICAgICAgICB5OiBidC5udW1iZXIoJ3U4JyksXG4gICAgICAgIGRpZWRBdDogYnQuZGF0ZSgpXG4gICAgfSkpLFxuICAgIHRpbGVzOiBidC5iaW5hcnkoKVxufSk7XG5cbmNsYXNzIENodW5rQ29vcmRpbmF0ZVBhcnNlciBleHRlbmRzIGJ0LlBhcnNlcjxDaHVua0Nvb3JkaW5hdGU+IHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgbWFnaWMgPSBidC5oYXNoU3RyKCdDaHVua0Nvb3JkaW5hdGVQYXJzZXInKTtcblxuICAgIHB1YmxpYyBlbmNvZGVJbnRlcm5hbChjdHg6IGJ0LkVuY29kZUNvbnRleHQsIHZhbHVlOiBDaHVua0Nvb3JkaW5hdGUpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgWyBfLCBjaHVua1hzdHIsIGNodW5rWXN0ciBdID0gdmFsdWUubWF0Y2goL14oLT9cXGQrKSwoLT9cXGQrKSQvKSE7XG4gICAgICAgIGNvbnN0IFsgY2h1bmtYLCBjaHVua1kgXSA9IFsgcGFyc2VJbnQoY2h1bmtYc3RyKSwgcGFyc2VJbnQoY2h1bmtZc3RyKSBdO1xuICAgICAgICBjdHguZW5jb2RlKG5ldyBidC5CaWdJbnRQYXJzZXIodHJ1ZSksIEJpZ0ludChjaHVua1gpKTtcbiAgICAgICAgY3R4LmVuY29kZShuZXcgYnQuQmlnSW50UGFyc2VyKHRydWUpLCBCaWdJbnQoY2h1bmtZKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGRlY29kZUludGVybmFsKGN0eDogYnQuRGVjb2RlQ29udGV4dCk6IENodW5rQ29vcmRpbmF0ZSB7XG4gICAgICAgIGNvbnN0IGNodW5rWCA9IE51bWJlcihjdHguZGVjb2RlKG5ldyBidC5CaWdJbnRQYXJzZXIodHJ1ZSkpKTtcbiAgICAgICAgY29uc3QgY2h1bmtZID0gTnVtYmVyKGN0eC5kZWNvZGUobmV3IGJ0LkJpZ0ludFBhcnNlcih0cnVlKSkpO1xuICAgICAgICByZXR1cm4gYCR7Y2h1bmtYfSwke2NodW5rWX1gO1xuICAgIH1cbn1cblxuY2xhc3MgQ2h1bmtDb29yZGluYXRlTWFwUGFyc2VyPFQgZXh0ZW5kcyBidC5QYXJzZXI8YW55Pj4gZXh0ZW5kcyBidC5QYXJzZXI8TWFwPENodW5rQ29vcmRpbmF0ZSwgYnQuUGFyc2VyVHlwZTxUPj4+IHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgbWFnaWM6IG51bWJlcjtcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZTogVDtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih0eXBlOiBUKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMubWFnaWMgPSBidC5oYXNoU3RyKGBDaHVua0Nvb3JkaW5hdGVNYXBQYXJzZXI6JHt0aGlzLnR5cGUubWFnaWN9YCk7XG4gICAgfVxuXG4gICAgcHVibGljIGVuY29kZUludGVybmFsKGN0eDogYnQuRW5jb2RlQ29udGV4dCwgbWFwOiBNYXA8Q2h1bmtDb29yZGluYXRlLCBidC5QYXJzZXJUeXBlPFQ+Pik6IHZvaWQge1xuICAgICAgICBjdHguZW5jb2RlKG5ldyBidC5CaWdJbnRQYXJzZXIoZmFsc2UpLCBCaWdJbnQobWFwLnNpemUpKVxuICAgICAgICBmb3IoY29uc3QgWyBrZXksIHZhbHVlIF0gb2YgbWFwLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgY3R4LmVuY29kZShuZXcgQ2h1bmtDb29yZGluYXRlUGFyc2VyKCksIGtleSk7XG4gICAgICAgICAgICBjdHguZW5jb2RlKHRoaXMudHlwZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGRlY29kZUludGVybmFsKGN0eDogYnQuRGVjb2RlQ29udGV4dCk6IE1hcDxDaHVua0Nvb3JkaW5hdGUsIGJ0LlBhcnNlclR5cGU8VD4+IHtcbiAgICAgICAgY29uc3QgbWFwOiBNYXA8Q2h1bmtDb29yZGluYXRlLCBidC5QYXJzZXJUeXBlPFQ+PiA9IG5ldyBNYXAoKTtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IE51bWJlcihjdHguZGVjb2RlKG5ldyBidC5CaWdJbnRQYXJzZXIoZmFsc2UpKSk7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGN0eC5kZWNvZGUobmV3IENodW5rQ29vcmRpbmF0ZVBhcnNlcigpKTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY3R4LmRlY29kZSh0aGlzLnR5cGUpO1xuICAgICAgICAgICAgbWFwLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFwO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IEZfV09STEQgPSBidC5vYmplY3Qoe1xuICAgIHNlZWQ6IGJ0Lm51bWJlcigndTMyJyksXG4gICAgY3JlYXRlZEF0OiBidC5kYXRlKCksXG4gICAgbnVtRGVhdGhzOiBidC5udW1iZXIoJ3UzMicpLFxuICAgIGNodW5rczogbmV3IENodW5rQ29vcmRpbmF0ZU1hcFBhcnNlcihGX0NIVU5LKVxufSk7XG5cbmV4cG9ydCBjb25zdCBGX1ZJRVdQT1JUID0gYnQub2JqZWN0KHtcbiAgICB4OiBidC5udW1iZXIoJ2Y2NCcpLFxuICAgIHk6IGJ0Lm51bWJlcignZjY0JyksXG4gICAgc2NhbGU6IGJ0Lm51bWJlcignZjY0Jylcbn0pO1xuXG5leHBvcnQgY29uc3QgRl9TQVZFID0gYnQubW9kaWZ5aGFzaCgndjEuMC42JywgYnQub2JqZWN0KHtcbiAgICB3b3JsZDogRl9XT1JMRCxcbiAgICB2aWV3cG9ydDogRl9WSUVXUE9SVCxcbiAgICBib29rbWFya3M6IGJ0LmFycmF5KGJ0Lm9iamVjdCh7XG4gICAgICAgIG5hbWU6IGJ0LnN0cmluZygpLFxuICAgICAgICBjcmVhdGVkQXQ6IGJ0LmRhdGUoKSxcbiAgICAgICAgdmlld3BvcnQ6IEZfVklFV1BPUlRcbiAgICB9KSlcbn0pKTtcblxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgU2F2ZSB7XG4gICAgd29ybGQ6IFdvcmxkO1xuICAgIHZpZXdwb3J0OiBWaWV3cG9ydDtcbiAgICBib29rbWFya3M/OiBCb29rbWFya1tdO1xufVxuXG5cbiIsIlxuaW1wb3J0IHR5cGUgeyBBY3Rpb24gfSBmcm9tIFwic3ZlbHRlL2FjdGlvblwiO1xuXG5cblxuZXhwb3J0IGNvbnN0IHJlc2l6ZTogQWN0aW9uPEhUTUxFbGVtZW50LCAod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpID0+IGFueT4gPSAobm9kZSwgY2FsbGJhY2tmbikgPT4ge1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKCgpID0+IHtcbiAgICAgICAgY2FsbGJhY2tmbihub2RlLmNsaWVudFdpZHRoLCBub2RlLmNsaWVudEhlaWdodCk7XG4gICAgfSk7XG5cbiAgICBvYnNlcnZlci5vYnNlcnZlKG5vZGUpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVzdHJveSgpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShub2RlKTtcbiAgICAgICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG4iLCJcbmltcG9ydCB7IENIVU5LX1NJWkUgfSBmcm9tIFwiLi9Db25zdGFudHNcIjtcbmltcG9ydCB0eXBlIHsgVmlld3BvcnQgfSBmcm9tIFwiLi9WaWV3cG9ydFwiO1xuaW1wb3J0IHR5cGUgeyBXb3JsZCB9IGZyb20gXCIuL1dvcmxkXCI7XG5pbXBvcnQgdHlwZSB7IFRoZW1lIH0gZnJvbSBcIi4vdGhlbWUvVGhlbWVcIjtcblxuXG5cbmV4cG9ydCBjbGFzcyBXb3JsZFJlbmRlcmVyIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgd29ybGQ6IFdvcmxkO1xuICAgIHB1YmxpYyByZWFkb25seSB0aGVtZTogVGhlbWU7XG4gICAgcHVibGljIHJlYWRvbmx5IGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgcHVibGljIHJlYWRvbmx5IGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xuICAgIHB1YmxpYyByZWFkb25seSB2aWV3cG9ydDogVmlld3BvcnQ7XG5cblxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih3b3JsZDogV29ybGQsIHRoZW1lOiBUaGVtZSwgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgdmlld3BvcnQ6IFZpZXdwb3J0KSB7XG4gICAgICAgIHRoaXMud29ybGQgPSB3b3JsZDtcbiAgICAgICAgdGhpcy50aGVtZSA9IHRoZW1lO1xuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgaWYoIWN0eCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIGJyb3dzZXIgb3IgbWFjaGluZSBkb2VzIG5vdCBzdXBwb3J0IGNhbnZhcyAyZC4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgICAgdGhpcy52aWV3cG9ydCA9IHZpZXdwb3J0O1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBpbml0KCk6IFByb21pc2U8dm9pZD4geyB9XG4gICAgcHVibGljIGRlc3Ryb3koKTogdm9pZCB7IH1cblxuICAgIHByaXZhdGUgcmVuZGVyV29ybGQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnZpZXdwb3J0LnRyYW5zZm9ybUN0eCh0aGlzLmNhbnZhcywgdGhpcy5jdHgpO1xuXG4gICAgICAgIC8vIFJlbmRlciB0aWxlc1xuICAgICAgICB0aGlzLnZpZXdwb3J0LmZvckVhY2hUaWxlSW5WaWV3cG9ydCh0aGlzLmNhbnZhcywgdGlsZSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRoZW1lLmRyYXdUaWxlKHRoaXMuY3R4LCB0aWxlKTtcbiAgICAgICAgfSwgMCk7XG5cbiAgICAgICAgLy8gUmVuZGVyIGRlYXRoIGljb25zXG4gICAgICAgIHRoaXMudmlld3BvcnQuZm9yRWFjaENodW5rSW5WaWV3cG9ydCh0aGlzLmNhbnZhcywgY2h1bmsgPT4ge1xuICAgICAgICAgICAgY2h1bmsuZGVhdGhzLmZvckVhY2goZGVhdGggPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudGhlbWUuZHJhd0RlYXRoSWNvbih0aGlzLmN0eCwgY2h1bmsuY2h1bmtYICogQ0hVTktfU0laRSArIGRlYXRoLngsIGNodW5rLmNodW5rWSAqIENIVU5LX1NJWkUgKyBkZWF0aC55KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCAwKTtcblxuICAgICAgICB0aGlzLmN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY3R4LnJlc2V0KCk7XG5cbiAgICAgICAgLy8gdGhpcy5jdHguZmlsbFN0eWxlID0gJ3B1cnBsZSc7XG4gICAgICAgIC8vIHRoaXMuY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcblxuICAgICAgICB0aGlzLnJlbmRlcldvcmxkKCk7XG4gICAgfVxufVxuXG5cbiIsIlxuaW1wb3J0IHR5cGUgeyBQYXJ0aWNsZVJlbmRlcmVyIH0gZnJvbSBcIi4uL1BhcnRpY2xlUmVuZGVyZXJcIjtcbmltcG9ydCB0eXBlIHsgUGFydGljbGVFeHBsb3Npb24gfSBmcm9tIFwiLi9FeHBsb3Npb25cIjtcbmltcG9ydCB0eXBlIHsgUGFydGljbGVGYWtlVGlsZSB9IGZyb20gXCIuL0Zha2VUaWxlXCI7XG5pbXBvcnQgdHlwZSB7IFBhcnRpY2xlRmxhZyB9IGZyb20gXCIuL0ZsYWdcIjtcbmltcG9ydCB0eXBlIHsgUGFydGljbGVUaWxlUmV2ZWFsIH0gZnJvbSBcIi4vVGlsZVJldmVhbFwiO1xuXG5cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBhcnRpY2xlIHtcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgdHlwZTogc3RyaW5nO1xuXG4gICAgcHJpdmF0ZSBfYWxpdmU6IGJvb2xlYW4gPSB0cnVlO1xuICAgIHB1YmxpYyBnZXQgYWxpdmUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hbGl2ZTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIHNldCBhbGl2ZShhbGl2ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9hbGl2ZSA9IGFsaXZlO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2xpZmV0aW1lOiBudW1iZXIgPSAwO1xuICAgIC8qKiBQYXJ0aWNsZSBsaWZldGltZSBpbiBtaWxsaXNlY29uZHMgKi9cbiAgICBwdWJsaWMgZ2V0IGxpZmV0aW1lKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9saWZldGltZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWJzdHJhY3QgdXBkYXRlKHJlbmRlcmVyOiBQYXJ0aWNsZVJlbmRlcmVyLCBkdDogbnVtYmVyKTogdm9pZDtcblxuICAgIHB1YmxpYyByZW5kZXJlclVwZGF0ZShyZW5kZXJlcjogUGFydGljbGVSZW5kZXJlciwgZHQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLl9saWZldGltZSArPSBkdDtcbiAgICAgICAgdGhpcy51cGRhdGUocmVuZGVyZXIsIGR0KTtcbiAgICB9XG59XG5cblxuXG4vLyBUT0RPOiBQcm9iYWJseSByZW5hbWUgYWJvdmUgdG8gUGFydGljbGVCYXNlIGFuZCByZW5hbWUgYmVsb3cgdHlwZSB0byBqdXN0IFBhcnRpY2xlLlxuZXhwb3J0IHR5cGUgVmFsaWRQYXJ0aWNsZSA9IFBhcnRpY2xlRmxhZyB8IFBhcnRpY2xlRXhwbG9zaW9uIHwgUGFydGljbGVGYWtlVGlsZSB8IFBhcnRpY2xlVGlsZVJldmVhbDtcblxuXG4iLCJcbmltcG9ydCB0eXBlIHsgUGFydGljbGVSZW5kZXJlciB9IGZyb20gXCIuLi9QYXJ0aWNsZVJlbmRlcmVyXCI7XG5pbXBvcnQgdHlwZSB7IFZhbGlkVGlsZSB9IGZyb20gXCIuLi90aWxlL1RpbGVcIjtcbmltcG9ydCB7IFBhcnRpY2xlIH0gZnJvbSBcIi4vUGFydGljbGVcIjtcblxuXG5cbmV4cG9ydCBjbGFzcyBQYXJ0aWNsZUV4cGxvc2lvbiBleHRlbmRzIFBhcnRpY2xlIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZTogJ2V4cGxvc2lvbicgPSAnZXhwbG9zaW9uJztcblxuICAgIHB1YmxpYyByZWFkb25seSBtYXhMaWZldGltZTogbnVtYmVyID0gNTAwO1xuXG4gICAgcHVibGljIHJlYWRvbmx5IHRpbGU6IFZhbGlkVGlsZTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih0aWxlOiBWYWxpZFRpbGUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy50aWxlID0gdGlsZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlKHJlbmRlcmVyOiBQYXJ0aWNsZVJlbmRlcmVyLCBkdDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmKHRoaXMubGlmZXRpbWUgPiB0aGlzLm1heExpZmV0aW1lKSB7XG4gICAgICAgICAgICB0aGlzLmFsaXZlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuIiwiXG5pbXBvcnQgeyBjbGFtcE5vcm1hbCB9IGZyb20gXCIkbGliL1V0aWxcIjtcbmltcG9ydCB0eXBlIHsgUGFydGljbGVSZW5kZXJlciB9IGZyb20gXCIuLi9QYXJ0aWNsZVJlbmRlcmVyXCI7XG5pbXBvcnQgdHlwZSB7IFZhbGlkVGlsZSB9IGZyb20gXCIuLi90aWxlL1RpbGVcIjtcbmltcG9ydCB7IFBhcnRpY2xlIH0gZnJvbSBcIi4vUGFydGljbGVcIjtcblxuXG5cbmV4cG9ydCBjbGFzcyBQYXJ0aWNsZUZha2VUaWxlIGV4dGVuZHMgUGFydGljbGUge1xuICAgIHB1YmxpYyByZWFkb25seSB0eXBlOiAnZmFrZXRpbGUnID0gJ2Zha2V0aWxlJztcblxuICAgIHB1YmxpYyByZWFkb25seSB0aWxlOiBWYWxpZFRpbGU7XG5cbiAgICBwdWJsaWMgZ2V0IG9wYWNpdHkoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIGNsYW1wTm9ybWFsKCgyIC0gdGhpcy5saWZldGltZSAvIDI1MCkgKyAyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IodGlsZTogVmFsaWRUaWxlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudGlsZSA9IHRpbGU7XG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZShyZW5kZXJlcjogUGFydGljbGVSZW5kZXJlciwgZHQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBpZih0aGlzLmxpZmV0aW1lID4gMjAwMCkge1xuICAgICAgICAgICAgdGhpcy5hbGl2ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbiIsIlxuaW1wb3J0IHsgY2xhbXBOb3JtYWwgfSBmcm9tIFwiJGxpYi9VdGlsXCI7XG5pbXBvcnQgdHlwZSB7IFBhcnRpY2xlUmVuZGVyZXIgfSBmcm9tIFwiLi4vUGFydGljbGVSZW5kZXJlclwiO1xuaW1wb3J0IHsgUGFydGljbGUgfSBmcm9tIFwiLi9QYXJ0aWNsZVwiO1xuXG5cblxuZXhwb3J0IGNsYXNzIFBhcnRpY2xlRmxhZyBleHRlbmRzIFBhcnRpY2xlIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZTogJ2ZsYWcnID0gJ2ZsYWcnO1xuXG4gICAgcHVibGljIHg6IG51bWJlcjtcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xuICAgIHB1YmxpYyBkeDogbnVtYmVyO1xuICAgIHB1YmxpYyBkeTogbnVtYmVyO1xuXG4gICAgcHVibGljIHI6IG51bWJlcjtcbiAgICBwdWJsaWMgZHI6IG51bWJlcjtcblxuICAgIHB1YmxpYyBnZXQgb3BhY2l0eSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gY2xhbXBOb3JtYWwoMSAtICh0aGlzLmxpZmV0aW1lIC8gMjUwKSArIDAuNSk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlYWRvbmx5IGlzTXVsdGlGbGFnOiBib29sZWFuO1xuICAgIHB1YmxpYyByZWFkb25seSBudW1GbGFnczogbnVtYmVyO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHg6IG51bWJlciwgeTogbnVtYmVyLCBpc011bHRpRmxhZzogYm9vbGVhbiwgbnVtRmxhZ3M6IG51bWJlcikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLmR4ID0gKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMC4wMDU7XG4gICAgICAgIHRoaXMuZHkgPSAtKE1hdGgucmFuZG9tKCkgKiAwLjAwMiArIDAuMDA1KTtcbiAgICAgICAgdGhpcy5yID0gMDtcbiAgICAgICAgdGhpcy5kciA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDAuMDE7XG4gICAgICAgIHRoaXMuaXNNdWx0aUZsYWcgPSBpc011bHRpRmxhZztcbiAgICAgICAgdGhpcy5udW1GbGFncyA9IG51bUZsYWdzO1xuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGUocmVuZGVyZXI6IFBhcnRpY2xlUmVuZGVyZXIsIGR0OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5keSArPSAwLjAwMDA1ICogZHQ7XG5cbiAgICAgICAgdGhpcy5keCAqPSAwLjk5O1xuICAgICAgICB0aGlzLmR5ICo9ICh0aGlzLmR5IDwgMCkgPyAxIDogMC45NTtcblxuICAgICAgICB0aGlzLnggKz0gdGhpcy5keCAqIGR0O1xuICAgICAgICB0aGlzLnkgKz0gdGhpcy5keSAqIGR0O1xuXG4gICAgICAgIHRoaXMuciArPSB0aGlzLmRyICogZHQ7XG5cbiAgICAgICAgaWYodGhpcy5saWZldGltZSA+PSA1MDApIHtcbiAgICAgICAgICAgIHRoaXMuYWxpdmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG4iLCJcbmltcG9ydCB7IGNsYW1wTm9ybWFsIH0gZnJvbSBcIiRsaWIvVXRpbFwiO1xuaW1wb3J0IHR5cGUgeyBQYXJ0aWNsZVJlbmRlcmVyIH0gZnJvbSBcIi4uL1BhcnRpY2xlUmVuZGVyZXJcIjtcbmltcG9ydCB0eXBlIHsgVmFsaWRUaWxlIH0gZnJvbSBcIi4uL3RpbGUvVGlsZVwiO1xuaW1wb3J0IHsgUGFydGljbGUgfSBmcm9tIFwiLi9QYXJ0aWNsZVwiO1xuXG5cblxuZXhwb3J0IGNsYXNzIFBhcnRpY2xlVGlsZVJldmVhbCBleHRlbmRzIFBhcnRpY2xlIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZTogJ3RpbGVyZXZlYWwnID0gJ3RpbGVyZXZlYWwnO1xuXG4gICAgcHVibGljIHJlYWRvbmx5IHRpbGU6IFZhbGlkVGlsZTtcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xuICAgIHB1YmxpYyB5OiBudW1iZXI7XG4gICAgcHVibGljIGR4OiBudW1iZXI7XG4gICAgcHVibGljIGR5OiBudW1iZXI7XG5cbiAgICBwdWJsaWMgcjogbnVtYmVyO1xuICAgIHB1YmxpYyBkcjogbnVtYmVyO1xuXG4gICAgcHVibGljIHJlYWRvbmx5IHRvdGFsTGlmZXRpbWU6IG51bWJlcjtcblxuICAgIHB1YmxpYyBnZXQgb3BhY2l0eSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gY2xhbXBOb3JtYWwoMSAtICh0aGlzLmxpZmV0aW1lIC8gKHRoaXMudG90YWxMaWZldGltZSAvIDIpKSArIDAuNSk7XG4gICAgfVxuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHRpbGU6IFZhbGlkVGlsZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnRpbGUgPSB0aWxlO1xuXG4gICAgICAgIHRoaXMueCA9IHRoaXMudGlsZS54O1xuICAgICAgICB0aGlzLnkgPSB0aGlzLnRpbGUueTtcbiAgICAgICAgdGhpcy5keCA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDAuMDA1O1xuICAgICAgICB0aGlzLmR5ID0gLShNYXRoLnJhbmRvbSgpICogMC4wMDIgKyAwLjAwNSk7XG4gICAgICAgIHRoaXMuciA9IDA7XG4gICAgICAgIHRoaXMuZHIgPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAwLjAxO1xuXG4gICAgICAgIHRoaXMudG90YWxMaWZldGltZSA9IE1hdGgucmFuZG9tKCkgKiA3NTAgKyAyNTA7XG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZShyZW5kZXJlcjogUGFydGljbGVSZW5kZXJlciwgZHQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLmR5ICs9IDAuMDAwMDUgKiBkdDtcblxuICAgICAgICB0aGlzLmR4ICo9IDAuOTk7XG4gICAgICAgIHRoaXMuZHkgKj0gKHRoaXMuZHkgPCAwKSA/IDEgOiAwLjk4O1xuXG4gICAgICAgIHRoaXMueCArPSB0aGlzLmR4ICogZHQ7XG4gICAgICAgIHRoaXMueSArPSB0aGlzLmR5ICogZHQ7XG5cbiAgICAgICAgdGhpcy5yICs9IHRoaXMuZHIgKiBkdDtcblxuICAgICAgICBpZih0aGlzLmxpZmV0aW1lID49IHRoaXMudG90YWxMaWZldGltZSkge1xuICAgICAgICAgICAgdGhpcy5hbGl2ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbiIsIlxuaW1wb3J0IHR5cGUgeyBFdmVudExpc3RlbmVyIH0gZnJvbSBcIiRsaWIvRXZlbnREaXNwYXRjaGVyXCI7XG5pbXBvcnQgdHlwZSB7IFZpZXdwb3J0IH0gZnJvbSBcIi4vVmlld3BvcnRcIjtcbmltcG9ydCB0eXBlIHsgV29ybGQgfSBmcm9tIFwiLi9Xb3JsZFwiO1xuaW1wb3J0IHsgUGFydGljbGVFeHBsb3Npb24gfSBmcm9tIFwiLi9wYXJ0aWNsZS9FeHBsb3Npb25cIjtcbmltcG9ydCB7IFBhcnRpY2xlRmFrZVRpbGUgfSBmcm9tIFwiLi9wYXJ0aWNsZS9GYWtlVGlsZVwiO1xuaW1wb3J0IHsgUGFydGljbGVGbGFnIH0gZnJvbSBcIi4vcGFydGljbGUvRmxhZ1wiO1xuaW1wb3J0IHR5cGUgeyBWYWxpZFBhcnRpY2xlIH0gZnJvbSBcIi4vcGFydGljbGUvUGFydGljbGVcIjtcbmltcG9ydCB7IFBhcnRpY2xlVGlsZVJldmVhbCB9IGZyb20gXCIuL3BhcnRpY2xlL1RpbGVSZXZlYWxcIjtcbmltcG9ydCB0eXBlIHsgVGhlbWUgfSBmcm9tIFwiLi90aGVtZS9UaGVtZVwiO1xuaW1wb3J0IHsgTXVsdGlNaW5lVGlsZSB9IGZyb20gXCIuL3RpbGUvTXVsdGlNaW5lXCI7XG5cblxuXG5leHBvcnQgY2xhc3MgUGFydGljbGVSZW5kZXJlciB7XG4gICAgcHVibGljIHJlYWRvbmx5IHdvcmxkOiBXb3JsZDtcbiAgICBwdWJsaWMgcmVhZG9ubHkgdGhlbWU6IFRoZW1lO1xuICAgIHB1YmxpYyByZWFkb25seSBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuICAgIHB1YmxpYyByZWFkb25seSBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgICBwdWJsaWMgcmVhZG9ubHkgdmlld3BvcnQ6IFZpZXdwb3J0O1xuXG4gICAgcHVibGljIHJlYWRvbmx5IHBhcnRpY2xlczogVmFsaWRQYXJ0aWNsZVtdID0gW107XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3Iod29ybGQ6IFdvcmxkLCB0aGVtZTogVGhlbWUsIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQsIHZpZXdwb3J0OiBWaWV3cG9ydCkge1xuICAgICAgICB0aGlzLndvcmxkID0gd29ybGQ7XG4gICAgICAgIHRoaXMudGhlbWUgPSB0aGVtZTtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGlmKCFjdHgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBicm93c2VyIG9yIG1hY2hpbmUgZG9lcyBub3Qgc3VwcG9ydCBjYW52YXMgMmQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICAgIHRoaXMudmlld3BvcnQgPSB2aWV3cG9ydDtcbiAgICB9XG4gICAgXG4gICAgcHJpdmF0ZSByZWFkb25seSBsaXN0ZW5lcnM6IEV2ZW50TGlzdGVuZXJbXSA9IFtdO1xuXG4gICAgcHVibGljIGFzeW5jIGluaXQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2godGhpcy53b3JsZC5hZGRFdmVudExpc3RlbmVyKCdwYXJ0aWNsZV91bmZsYWcnLCAoeyBkYXRhOiB7IHgsIHkgfSB9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0aWxlID0gdGhpcy53b3JsZC5nZXRUaWxlKHgsIHkpO1xuICAgICAgICAgICAgaWYodGlsZSBpbnN0YW5jZW9mIE11bHRpTWluZVRpbGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnRpY2xlcy5wdXNoKG5ldyBQYXJ0aWNsZUZsYWcoeCwgeSwgdHJ1ZSwgdGlsZS5udW1NYXhNaW5lcykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnRpY2xlcy5wdXNoKG5ldyBQYXJ0aWNsZUZsYWcoeCwgeSwgZmFsc2UsIHRpbGUudHlwZSA9PSAnY29va2llc19hbmRfY3JlYW0nID8gLTEgOiAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaCh0aGlzLndvcmxkLmFkZEV2ZW50TGlzdGVuZXIoJ3BhcnRpY2xlX2V4cGxvc2lvbicsICh7IGRhdGE6IHsgeCwgeSB9IH0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRpbGUgPSB0aGlzLndvcmxkLmdldFRpbGUoeCwgeSk7XG4gICAgICAgICAgICB0aGlzLnBhcnRpY2xlcy51bnNoaWZ0KG5ldyBQYXJ0aWNsZUZha2VUaWxlKHRpbGUpKTtcbiAgICAgICAgICAgIHRoaXMucGFydGljbGVzLnB1c2gobmV3IFBhcnRpY2xlRXhwbG9zaW9uKHRpbGUpKTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLmxpc3RlbmVycy5wdXNoKHRoaXMud29ybGQuYWRkRXZlbnRMaXN0ZW5lcigncGFydGljbGVfcmV2ZWFsJywgKHsgZGF0YTogeyB4LCB5IH0gfSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGlsZSA9IHRoaXMud29ybGQuZ2V0VGlsZSh4LCB5KTtcbiAgICAgICAgICAgIHRoaXMucGFydGljbGVzLnB1c2gobmV3IFBhcnRpY2xlVGlsZVJldmVhbCh0aWxlKSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgbGV0IGxpc3RlbmVyOiBFdmVudExpc3RlbmVyIHwgdW5kZWZpbmVkO1xuICAgICAgICB3aGlsZShsaXN0ZW5lciA9IHRoaXMubGlzdGVuZXJzLnBvcCgpKSB7XG4gICAgICAgICAgICB0aGlzLndvcmxkLnJlbW92ZUV2ZW50TGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJQYXJ0aWNsZXMoZHQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLmN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy52aWV3cG9ydC50cmFuc2Zvcm1DdHgodGhpcy5jYW52YXMsIHRoaXMuY3R4KTtcblxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5wYXJ0aWNsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnRpY2xlID0gdGhpcy5wYXJ0aWNsZXNbaV07XG4gICAgICAgICAgICBwYXJ0aWNsZS5yZW5kZXJlclVwZGF0ZSh0aGlzLCBkdCk7XG4gICAgICAgICAgICBpZighcGFydGljbGUuYWxpdmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnRpY2xlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yKGNvbnN0IHBhcnRpY2xlIG9mIHRoaXMucGFydGljbGVzKSB7XG4gICAgICAgICAgICB0aGlzLnRoZW1lLmRyYXdQYXJ0aWNsZSh0aGlzLmN0eCwgcGFydGljbGUpO1xuICAgICAgICB9XG4gXG4gICAgICAgIHRoaXMuY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IHRydWU7XG4gICAgfVxuXG5cbiAgICBcbiAgICBwcml2YXRlIGxhc3RGcmFtZVRpbWU6IG51bWJlciA9IC0xO1xuXG4gICAgcHVibGljIHJlbmRlcigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jdHgucmVzZXQoKTtcblxuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSAndHJhbnNwYXJlbnQnO1xuICAgICAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG5cbiAgICAgICAgY29uc3QgY3VycmVudEZyYW1lVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICBpZih0aGlzLmxhc3RGcmFtZVRpbWUgPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyUGFydGljbGVzKDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZHQgPSBjdXJyZW50RnJhbWVUaW1lIC0gdGhpcy5sYXN0RnJhbWVUaW1lO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJQYXJ0aWNsZXMoZHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5sYXN0RnJhbWVUaW1lID0gY3VycmVudEZyYW1lVGltZTtcbiAgICB9XG59XG5cblxuIiwiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBkaXN0YW5jZSB9IGZyb20gXCIkbGliL1V0aWxcIjtcbiAgICBpbXBvcnQgeyBjcmVhdGVDb250cm9sbGVyRGlzcGF0Y2hlciwgdHlwZSBDb250cm9sbGVySW5wdXRUeXBlIH0gZnJvbSBcIi4vQ29udHJvbGxlci5zdmVsdGVcIjtcbiAgICBjb25zdCBkaXNwYXRjaGVyID0gY3JlYXRlQ29udHJvbGxlckRpc3BhdGNoZXIoKTtcblxuICAgIGxldCBfY2xhc3M6IHN0cmluZyA9ICcnO1xuICAgIGV4cG9ydCB7IF9jbGFzcyBhcyBjbGFzcyB9O1xuXG4gICAgbGV0IGlucHV0OiBDb250cm9sbGVySW5wdXRUeXBlIHwgJ2RyYWcnIHwgbnVsbCA9IG51bGw7XG4gICAgY29uc3QgaW5wdXRUeXBlRnJvbU1vdXNlID0gKGV2OiBNb3VzZUV2ZW50KTogQ29udHJvbGxlcklucHV0VHlwZSB8IG51bGwgPT4ge1xuICAgICAgICBzd2l0Y2goZXYuYnV0dG9uKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiAncHJpbWFyeSc7XG4gICAgICAgICAgICBjYXNlIDE6IHJldHVybiAnZXh0cmEnO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gJ3NlY29uZGFyeSc7XG4gICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxldCBzdGFydFg6IG51bWJlciA9IDA7XG4gICAgbGV0IHN0YXJ0WTogbnVtYmVyID0gMDtcblxuICAgIGNvbnN0IGRyYWdEaXN0YW5jZTogbnVtYmVyID0gMTA7XG4gICAgY29uc3QgY2FuY2VsRGlzdGFuY2U6IG51bWJlciA9IDEwO1xuICAgIGNvbnN0IGRpc3RhbmNlRXhjZWVkZWQgPSAoZXY6IE1vdXNlRXZlbnQsIHRocmVzaG9sZDogbnVtYmVyKTogYm9vbGVhbiA9PiB7XG4gICAgICAgIHJldHVybiBkaXN0YW5jZShzdGFydFgsIHN0YXJ0WSwgZXYub2Zmc2V0WCwgZXYub2Zmc2V0WSkgPiB0aHJlc2hvbGQ7XG4gICAgfVxuXG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG4gICAgLm1vdXNlLWNvbnRyb2xsZXItZHJhZ2dpbmcge1xuICAgICAgICBAYXBwbHkgY3Vyc29yLW1vdmU7XG4gICAgfVxuPC9zdHlsZT5cblxuPCEtLSBzdmVsdGUtaWdub3JlIGExMXktbm8tc3RhdGljLWVsZW1lbnQtaW50ZXJhY3Rpb25zIC0tPlxuPCEtLSBzdmVsdGUtaWdub3JlIGExMXktbW91c2UtZXZlbnRzLWhhdmUta2V5LWV2ZW50cyAtLT5cbjxkaXZcbiAgICBjbGFzcz17X2NsYXNzfVxuICAgIGNsYXNzOm1vdXNlLWNvbnRyb2xsZXItZHJhZ2dpbmc9e2lucHV0ID09ICdkcmFnJ31cbiAgICBvbjptb3VzZWRvd249e2V2ID0+IHtcbiAgICAgICAgaWYoaW5wdXQgIT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgaW5wdXQgPSBpbnB1dFR5cGVGcm9tTW91c2UoZXYpO1xuICAgICAgICBzdGFydFggPSBldi5vZmZzZXRYO1xuICAgICAgICBzdGFydFkgPSBldi5vZmZzZXRZO1xuICAgIH19XG4gICAgb246bW91c2Vtb3ZlPXtldiA9PiB7XG4gICAgICAgIGxldCBkeCA9IGV2Lm1vdmVtZW50WDtcbiAgICAgICAgbGV0IGR5ID0gZXYubW92ZW1lbnRZO1xuICAgICAgICBpZihpbnB1dCA9PSAncHJpbWFyeScpIHtcbiAgICAgICAgICAgIGlmKGRpc3RhbmNlRXhjZWVkZWQoZXYsIGRyYWdEaXN0YW5jZSkpIHtcbiAgICAgICAgICAgICAgICBkeCArPSBldi5vZmZzZXRYIC0gc3RhcnRYO1xuICAgICAgICAgICAgICAgIGR5ICs9IGV2Lm9mZnNldFkgLSBzdGFydFk7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSAnZHJhZyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGlucHV0ICE9ICdkcmFnJykgcmV0dXJuO1xuXG4gICAgICAgIGRpc3BhdGNoZXIoJ21vdmUnLCB7XG4gICAgICAgICAgICB4OiBldi5vZmZzZXRYLFxuICAgICAgICAgICAgeTogZXYub2Zmc2V0WSxcbiAgICAgICAgICAgIGR4LFxuICAgICAgICAgICAgZHlcbiAgICAgICAgfSk7XG4gICAgfX1cbiAgICBvbjptb3VzZXVwPXtldiA9PiB7XG4gICAgICAgIGlmKGlucHV0ID09IG51bGwgfHwgaW5wdXQgPT0gJ2RyYWcnIHx8IGRpc3RhbmNlRXhjZWVkZWQoZXYsIGNhbmNlbERpc3RhbmNlKSkge1xuICAgICAgICAgICAgaW5wdXQgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZGlzcGF0Y2hlcignaW5wdXQnLCB7XG4gICAgICAgICAgICB4OiBldi5vZmZzZXRYLFxuICAgICAgICAgICAgeTogZXYub2Zmc2V0WSxcbiAgICAgICAgICAgIHR5cGU6IGlucHV0XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlucHV0ID0gbnVsbDtcbiAgICB9fVxuICAgIG9uOm1vdXNlb3V0PXsoKSA9PiB7XG4gICAgICAgIGlucHV0ID0gbnVsbDtcbiAgICB9fVxuICAgIG9uOndoZWVsfHBhc3NpdmU9e2V2ID0+IHtcbiAgICAgICAgZGlzcGF0Y2hlcignem9vbScsIHtcbiAgICAgICAgICAgIHg6IGV2Lm9mZnNldFgsXG4gICAgICAgICAgICB5OiBldi5vZmZzZXRZLFxuICAgICAgICAgICAgYW1vdW50VHlwZTogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgIGFtb3VudDogZXYuZGVsdGFZID4gMCA/IDAuOSA6IDEuMVxuICAgICAgICB9KTtcbiAgICB9fVxuICAgIG9uOmNvbnRleHRtZW51fHByZXZlbnREZWZhdWx0XG4+XG4gICAgPHNsb3QgLz5cbjwvZGl2PiIsIi8qISBIYW1tZXIuSlMgLSB2Mi4wLjcgLSAyMDE2LTA0LTIyXG4gKiBodHRwOi8vaGFtbWVyanMuZ2l0aHViLmlvL1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNiBKb3JpayBUYW5nZWxkZXI7XG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKi9cbihmdW5jdGlvbih3aW5kb3csIGRvY3VtZW50LCBleHBvcnROYW1lLCB1bmRlZmluZWQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG52YXIgVkVORE9SX1BSRUZJWEVTID0gWycnLCAnd2Via2l0JywgJ01veicsICdNUycsICdtcycsICdvJ107XG52YXIgVEVTVF9FTEVNRU5UID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbnZhciBUWVBFX0ZVTkNUSU9OID0gJ2Z1bmN0aW9uJztcblxudmFyIHJvdW5kID0gTWF0aC5yb3VuZDtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBub3cgPSBEYXRlLm5vdztcblxuLyoqXG4gKiBzZXQgYSB0aW1lb3V0IHdpdGggYSBnaXZlbiBzY29wZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lb3V0XG4gKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gc2V0VGltZW91dENvbnRleHQoZm4sIHRpbWVvdXQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gc2V0VGltZW91dChiaW5kRm4oZm4sIGNvbnRleHQpLCB0aW1lb3V0KTtcbn1cblxuLyoqXG4gKiBpZiB0aGUgYXJndW1lbnQgaXMgYW4gYXJyYXksIHdlIHdhbnQgdG8gZXhlY3V0ZSB0aGUgZm4gb24gZWFjaCBlbnRyeVxuICogaWYgaXQgYWludCBhbiBhcnJheSB3ZSBkb24ndCB3YW50IHRvIGRvIGEgdGhpbmcuXG4gKiB0aGlzIGlzIHVzZWQgYnkgYWxsIHRoZSBtZXRob2RzIHRoYXQgYWNjZXB0IGEgc2luZ2xlIGFuZCBhcnJheSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7KnxBcnJheX0gYXJnXG4gKiBAcGFyYW0ge1N0cmluZ30gZm5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dF1cbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpbnZva2VBcnJheUFyZyhhcmcsIGZuLCBjb250ZXh0KSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICBlYWNoKGFyZywgY29udGV4dFtmbl0sIGNvbnRleHQpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIHdhbGsgb2JqZWN0cyBhbmQgYXJyYXlzXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRvclxuICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcbiAqL1xuZnVuY3Rpb24gZWFjaChvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAoIW9iaikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9iai5mb3JFYWNoKSB7XG4gICAgICAgIG9iai5mb3JFYWNoKGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICB9IGVsc2UgaWYgKG9iai5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBvYmoubGVuZ3RoKSB7XG4gICAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtpXSwgaSwgb2JqKTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSBpbiBvYmopIHtcbiAgICAgICAgICAgIG9iai5oYXNPd25Qcm9wZXJ0eShpKSAmJiBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtpXSwgaSwgb2JqKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiB3cmFwIGEgbWV0aG9kIHdpdGggYSBkZXByZWNhdGlvbiB3YXJuaW5nIGFuZCBzdGFjayB0cmFjZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWV0aG9kXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBuZXcgZnVuY3Rpb24gd3JhcHBpbmcgdGhlIHN1cHBsaWVkIG1ldGhvZC5cbiAqL1xuZnVuY3Rpb24gZGVwcmVjYXRlKG1ldGhvZCwgbmFtZSwgbWVzc2FnZSkge1xuICAgIHZhciBkZXByZWNhdGlvbk1lc3NhZ2UgPSAnREVQUkVDQVRFRCBNRVRIT0Q6ICcgKyBuYW1lICsgJ1xcbicgKyBtZXNzYWdlICsgJyBBVCBcXG4nO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGUgPSBuZXcgRXJyb3IoJ2dldC1zdGFjay10cmFjZScpO1xuICAgICAgICB2YXIgc3RhY2sgPSBlICYmIGUuc3RhY2sgPyBlLnN0YWNrLnJlcGxhY2UoL15bXlxcKF0rP1tcXG4kXS9nbSwgJycpXG4gICAgICAgICAgICAucmVwbGFjZSgvXlxccythdFxccysvZ20sICcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL15PYmplY3QuPGFub255bW91cz5cXHMqXFwoL2dtLCAne2Fub255bW91c30oKUAnKSA6ICdVbmtub3duIFN0YWNrIFRyYWNlJztcblxuICAgICAgICB2YXIgbG9nID0gd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLndhcm4gfHwgd2luZG93LmNvbnNvbGUubG9nKTtcbiAgICAgICAgaWYgKGxvZykge1xuICAgICAgICAgICAgbG9nLmNhbGwod2luZG93LmNvbnNvbGUsIGRlcHJlY2F0aW9uTWVzc2FnZSwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xufVxuXG4vKipcbiAqIGV4dGVuZCBvYmplY3QuXG4gKiBtZWFucyB0aGF0IHByb3BlcnRpZXMgaW4gZGVzdCB3aWxsIGJlIG92ZXJ3cml0dGVuIGJ5IHRoZSBvbmVzIGluIHNyYy5cbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBvYmplY3RzX3RvX2Fzc2lnblxuICogQHJldHVybnMge09iamVjdH0gdGFyZ2V0XG4gKi9cbnZhciBhc3NpZ247XG5pZiAodHlwZW9mIE9iamVjdC5hc3NpZ24gIT09ICdmdW5jdGlvbicpIHtcbiAgICBhc3NpZ24gPSBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0KSB7XG4gICAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCB8fCB0YXJnZXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG91dHB1dCA9IE9iamVjdCh0YXJnZXQpO1xuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDE7IGluZGV4IDwgYXJndW1lbnRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgICAgICBpZiAoc291cmNlICE9PSB1bmRlZmluZWQgJiYgc291cmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbmV4dEtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShuZXh0S2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W25leHRLZXldID0gc291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcbn0gZWxzZSB7XG4gICAgYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcbn1cblxuLyoqXG4gKiBleHRlbmQgb2JqZWN0LlxuICogbWVhbnMgdGhhdCBwcm9wZXJ0aWVzIGluIGRlc3Qgd2lsbCBiZSBvdmVyd3JpdHRlbiBieSB0aGUgb25lcyBpbiBzcmMuXG4gKiBAcGFyYW0ge09iamVjdH0gZGVzdFxuICogQHBhcmFtIHtPYmplY3R9IHNyY1xuICogQHBhcmFtIHtCb29sZWFufSBbbWVyZ2U9ZmFsc2VdXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBkZXN0XG4gKi9cbnZhciBleHRlbmQgPSBkZXByZWNhdGUoZnVuY3Rpb24gZXh0ZW5kKGRlc3QsIHNyYywgbWVyZ2UpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHNyYyk7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDwga2V5cy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKCFtZXJnZSB8fCAobWVyZ2UgJiYgZGVzdFtrZXlzW2ldXSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgZGVzdFtrZXlzW2ldXSA9IHNyY1trZXlzW2ldXTtcbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiBkZXN0O1xufSwgJ2V4dGVuZCcsICdVc2UgYGFzc2lnbmAuJyk7XG5cbi8qKlxuICogbWVyZ2UgdGhlIHZhbHVlcyBmcm9tIHNyYyBpbiB0aGUgZGVzdC5cbiAqIG1lYW5zIHRoYXQgcHJvcGVydGllcyB0aGF0IGV4aXN0IGluIGRlc3Qgd2lsbCBub3QgYmUgb3ZlcndyaXR0ZW4gYnkgc3JjXG4gKiBAcGFyYW0ge09iamVjdH0gZGVzdFxuICogQHBhcmFtIHtPYmplY3R9IHNyY1xuICogQHJldHVybnMge09iamVjdH0gZGVzdFxuICovXG52YXIgbWVyZ2UgPSBkZXByZWNhdGUoZnVuY3Rpb24gbWVyZ2UoZGVzdCwgc3JjKSB7XG4gICAgcmV0dXJuIGV4dGVuZChkZXN0LCBzcmMsIHRydWUpO1xufSwgJ21lcmdlJywgJ1VzZSBgYXNzaWduYC4nKTtcblxuLyoqXG4gKiBzaW1wbGUgY2xhc3MgaW5oZXJpdGFuY2VcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNoaWxkXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBiYXNlXG4gKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdXG4gKi9cbmZ1bmN0aW9uIGluaGVyaXQoY2hpbGQsIGJhc2UsIHByb3BlcnRpZXMpIHtcbiAgICB2YXIgYmFzZVAgPSBiYXNlLnByb3RvdHlwZSxcbiAgICAgICAgY2hpbGRQO1xuXG4gICAgY2hpbGRQID0gY2hpbGQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShiYXNlUCk7XG4gICAgY2hpbGRQLmNvbnN0cnVjdG9yID0gY2hpbGQ7XG4gICAgY2hpbGRQLl9zdXBlciA9IGJhc2VQO1xuXG4gICAgaWYgKHByb3BlcnRpZXMpIHtcbiAgICAgICAgYXNzaWduKGNoaWxkUCwgcHJvcGVydGllcyk7XG4gICAgfVxufVxuXG4vKipcbiAqIHNpbXBsZSBmdW5jdGlvbiBiaW5kXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gYmluZEZuKGZuLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGJvdW5kRm4oKSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShjb250ZXh0LCBhcmd1bWVudHMpO1xuICAgIH07XG59XG5cbi8qKlxuICogbGV0IGEgYm9vbGVhbiB2YWx1ZSBhbHNvIGJlIGEgZnVuY3Rpb24gdGhhdCBtdXN0IHJldHVybiBhIGJvb2xlYW5cbiAqIHRoaXMgZmlyc3QgaXRlbSBpbiBhcmdzIHdpbGwgYmUgdXNlZCBhcyB0aGUgY29udGV4dFxuICogQHBhcmFtIHtCb29sZWFufEZ1bmN0aW9ufSB2YWxcbiAqIEBwYXJhbSB7QXJyYXl9IFthcmdzXVxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGJvb2xPckZuKHZhbCwgYXJncykge1xuICAgIGlmICh0eXBlb2YgdmFsID09IFRZUEVfRlVOQ1RJT04pIHtcbiAgICAgICAgcmV0dXJuIHZhbC5hcHBseShhcmdzID8gYXJnc1swXSB8fCB1bmRlZmluZWQgOiB1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsO1xufVxuXG4vKipcbiAqIHVzZSB0aGUgdmFsMiB3aGVuIHZhbDEgaXMgdW5kZWZpbmVkXG4gKiBAcGFyYW0geyp9IHZhbDFcbiAqIEBwYXJhbSB7Kn0gdmFsMlxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGlmVW5kZWZpbmVkKHZhbDEsIHZhbDIpIHtcbiAgICByZXR1cm4gKHZhbDEgPT09IHVuZGVmaW5lZCkgPyB2YWwyIDogdmFsMTtcbn1cblxuLyoqXG4gKiBhZGRFdmVudExpc3RlbmVyIHdpdGggbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2VcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IHRhcmdldFxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG4gKi9cbmZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXJzKHRhcmdldCwgdHlwZXMsIGhhbmRsZXIpIHtcbiAgICBlYWNoKHNwbGl0U3RyKHR5cGVzKSwgZnVuY3Rpb24odHlwZSkge1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogcmVtb3ZlRXZlbnRMaXN0ZW5lciB3aXRoIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSB0YXJnZXRcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlclxuICovXG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycyh0YXJnZXQsIHR5cGVzLCBoYW5kbGVyKSB7XG4gICAgZWFjaChzcGxpdFN0cih0eXBlcyksIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgZmFsc2UpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIGZpbmQgaWYgYSBub2RlIGlzIGluIHRoZSBnaXZlbiBwYXJlbnRcbiAqIEBtZXRob2QgaGFzUGFyZW50XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYXJlbnRcbiAqIEByZXR1cm4ge0Jvb2xlYW59IGZvdW5kXG4gKi9cbmZ1bmN0aW9uIGhhc1BhcmVudChub2RlLCBwYXJlbnQpIHtcbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgICBpZiAobm9kZSA9PSBwYXJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBzbWFsbCBpbmRleE9mIHdyYXBwZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaW5kXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gZm91bmRcbiAqL1xuZnVuY3Rpb24gaW5TdHIoc3RyLCBmaW5kKSB7XG4gICAgcmV0dXJuIHN0ci5pbmRleE9mKGZpbmQpID4gLTE7XG59XG5cbi8qKlxuICogc3BsaXQgc3RyaW5nIG9uIHdoaXRlc3BhY2VcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtBcnJheX0gd29yZHNcbiAqL1xuZnVuY3Rpb24gc3BsaXRTdHIoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci50cmltKCkuc3BsaXQoL1xccysvZyk7XG59XG5cbi8qKlxuICogZmluZCBpZiBhIGFycmF5IGNvbnRhaW5zIHRoZSBvYmplY3QgdXNpbmcgaW5kZXhPZiBvciBhIHNpbXBsZSBwb2x5RmlsbFxuICogQHBhcmFtIHtBcnJheX0gc3JjXG4gKiBAcGFyYW0ge1N0cmluZ30gZmluZFxuICogQHBhcmFtIHtTdHJpbmd9IFtmaW5kQnlLZXldXG4gKiBAcmV0dXJuIHtCb29sZWFufE51bWJlcn0gZmFsc2Ugd2hlbiBub3QgZm91bmQsIG9yIHRoZSBpbmRleFxuICovXG5mdW5jdGlvbiBpbkFycmF5KHNyYywgZmluZCwgZmluZEJ5S2V5KSB7XG4gICAgaWYgKHNyYy5pbmRleE9mICYmICFmaW5kQnlLZXkpIHtcbiAgICAgICAgcmV0dXJuIHNyYy5pbmRleE9mKGZpbmQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBzcmMubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoKGZpbmRCeUtleSAmJiBzcmNbaV1bZmluZEJ5S2V5XSA9PSBmaW5kKSB8fCAoIWZpbmRCeUtleSAmJiBzcmNbaV0gPT09IGZpbmQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbn1cblxuLyoqXG4gKiBjb252ZXJ0IGFycmF5LWxpa2Ugb2JqZWN0cyB0byByZWFsIGFycmF5c1xuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHJldHVybnMge0FycmF5fVxuICovXG5mdW5jdGlvbiB0b0FycmF5KG9iaikge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChvYmosIDApO1xufVxuXG4vKipcbiAqIHVuaXF1ZSBhcnJheSB3aXRoIG9iamVjdHMgYmFzZWQgb24gYSBrZXkgKGxpa2UgJ2lkJykgb3IganVzdCBieSB0aGUgYXJyYXkncyB2YWx1ZVxuICogQHBhcmFtIHtBcnJheX0gc3JjIFt7aWQ6MX0se2lkOjJ9LHtpZDoxfV1cbiAqIEBwYXJhbSB7U3RyaW5nfSBba2V5XVxuICogQHBhcmFtIHtCb29sZWFufSBbc29ydD1GYWxzZV1cbiAqIEByZXR1cm5zIHtBcnJheX0gW3tpZDoxfSx7aWQ6Mn1dXG4gKi9cbmZ1bmN0aW9uIHVuaXF1ZUFycmF5KHNyYywga2V5LCBzb3J0KSB7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBzcmMubGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWwgPSBrZXkgPyBzcmNbaV1ba2V5XSA6IHNyY1tpXTtcbiAgICAgICAgaWYgKGluQXJyYXkodmFsdWVzLCB2YWwpIDwgMCkge1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHNyY1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWVzW2ldID0gdmFsO1xuICAgICAgICBpKys7XG4gICAgfVxuXG4gICAgaWYgKHNvcnQpIHtcbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLnNvcnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLnNvcnQoZnVuY3Rpb24gc29ydFVuaXF1ZUFycmF5KGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYVtrZXldID4gYltrZXldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0cztcbn1cblxuLyoqXG4gKiBnZXQgdGhlIHByZWZpeGVkIHByb3BlcnR5XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAqIEByZXR1cm5zIHtTdHJpbmd8VW5kZWZpbmVkfSBwcmVmaXhlZFxuICovXG5mdW5jdGlvbiBwcmVmaXhlZChvYmosIHByb3BlcnR5KSB7XG4gICAgdmFyIHByZWZpeCwgcHJvcDtcbiAgICB2YXIgY2FtZWxQcm9wID0gcHJvcGVydHlbMF0udG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnNsaWNlKDEpO1xuXG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgVkVORE9SX1BSRUZJWEVTLmxlbmd0aCkge1xuICAgICAgICBwcmVmaXggPSBWRU5ET1JfUFJFRklYRVNbaV07XG4gICAgICAgIHByb3AgPSAocHJlZml4KSA/IHByZWZpeCArIGNhbWVsUHJvcCA6IHByb3BlcnR5O1xuXG4gICAgICAgIGlmIChwcm9wIGluIG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIGdldCBhIHVuaXF1ZSBpZFxuICogQHJldHVybnMge251bWJlcn0gdW5pcXVlSWRcbiAqL1xudmFyIF91bmlxdWVJZCA9IDE7XG5mdW5jdGlvbiB1bmlxdWVJZCgpIHtcbiAgICByZXR1cm4gX3VuaXF1ZUlkKys7XG59XG5cbi8qKlxuICogZ2V0IHRoZSB3aW5kb3cgb2JqZWN0IG9mIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtEb2N1bWVudFZpZXd8V2luZG93fVxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3dGb3JFbGVtZW50KGVsZW1lbnQpIHtcbiAgICB2YXIgZG9jID0gZWxlbWVudC5vd25lckRvY3VtZW50IHx8IGVsZW1lbnQ7XG4gICAgcmV0dXJuIChkb2MuZGVmYXVsdFZpZXcgfHwgZG9jLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cpO1xufVxuXG52YXIgTU9CSUxFX1JFR0VYID0gL21vYmlsZXx0YWJsZXR8aXAoYWR8aG9uZXxvZCl8YW5kcm9pZC9pO1xuXG52YXIgU1VQUE9SVF9UT1VDSCA9ICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpO1xudmFyIFNVUFBPUlRfUE9JTlRFUl9FVkVOVFMgPSBwcmVmaXhlZCh3aW5kb3csICdQb2ludGVyRXZlbnQnKSAhPT0gdW5kZWZpbmVkO1xudmFyIFNVUFBPUlRfT05MWV9UT1VDSCA9IFNVUFBPUlRfVE9VQ0ggJiYgTU9CSUxFX1JFR0VYLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbnZhciBJTlBVVF9UWVBFX1RPVUNIID0gJ3RvdWNoJztcbnZhciBJTlBVVF9UWVBFX1BFTiA9ICdwZW4nO1xudmFyIElOUFVUX1RZUEVfTU9VU0UgPSAnbW91c2UnO1xudmFyIElOUFVUX1RZUEVfS0lORUNUID0gJ2tpbmVjdCc7XG5cbnZhciBDT01QVVRFX0lOVEVSVkFMID0gMjU7XG5cbnZhciBJTlBVVF9TVEFSVCA9IDE7XG52YXIgSU5QVVRfTU9WRSA9IDI7XG52YXIgSU5QVVRfRU5EID0gNDtcbnZhciBJTlBVVF9DQU5DRUwgPSA4O1xuXG52YXIgRElSRUNUSU9OX05PTkUgPSAxO1xudmFyIERJUkVDVElPTl9MRUZUID0gMjtcbnZhciBESVJFQ1RJT05fUklHSFQgPSA0O1xudmFyIERJUkVDVElPTl9VUCA9IDg7XG52YXIgRElSRUNUSU9OX0RPV04gPSAxNjtcblxudmFyIERJUkVDVElPTl9IT1JJWk9OVEFMID0gRElSRUNUSU9OX0xFRlQgfCBESVJFQ1RJT05fUklHSFQ7XG52YXIgRElSRUNUSU9OX1ZFUlRJQ0FMID0gRElSRUNUSU9OX1VQIHwgRElSRUNUSU9OX0RPV047XG52YXIgRElSRUNUSU9OX0FMTCA9IERJUkVDVElPTl9IT1JJWk9OVEFMIHwgRElSRUNUSU9OX1ZFUlRJQ0FMO1xuXG52YXIgUFJPUFNfWFkgPSBbJ3gnLCAneSddO1xudmFyIFBST1BTX0NMSUVOVF9YWSA9IFsnY2xpZW50WCcsICdjbGllbnRZJ107XG5cbi8qKlxuICogY3JlYXRlIG5ldyBpbnB1dCB0eXBlIG1hbmFnZXJcbiAqIEBwYXJhbSB7TWFuYWdlcn0gbWFuYWdlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtJbnB1dH1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBJbnB1dChtYW5hZ2VyLCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLm1hbmFnZXIgPSBtYW5hZ2VyO1xuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB0aGlzLmVsZW1lbnQgPSBtYW5hZ2VyLmVsZW1lbnQ7XG4gICAgdGhpcy50YXJnZXQgPSBtYW5hZ2VyLm9wdGlvbnMuaW5wdXRUYXJnZXQ7XG5cbiAgICAvLyBzbWFsbGVyIHdyYXBwZXIgYXJvdW5kIHRoZSBoYW5kbGVyLCBmb3IgdGhlIHNjb3BlIGFuZCB0aGUgZW5hYmxlZCBzdGF0ZSBvZiB0aGUgbWFuYWdlcixcbiAgICAvLyBzbyB3aGVuIGRpc2FibGVkIHRoZSBpbnB1dCBldmVudHMgYXJlIGNvbXBsZXRlbHkgYnlwYXNzZWQuXG4gICAgdGhpcy5kb21IYW5kbGVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgaWYgKGJvb2xPckZuKG1hbmFnZXIub3B0aW9ucy5lbmFibGUsIFttYW5hZ2VyXSkpIHtcbiAgICAgICAgICAgIHNlbGYuaGFuZGxlcihldik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5pbml0KCk7XG5cbn1cblxuSW5wdXQucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIHNob3VsZCBoYW5kbGUgdGhlIGlucHV0RXZlbnQgZGF0YSBhbmQgdHJpZ2dlciB0aGUgY2FsbGJhY2tcbiAgICAgKiBAdmlydHVhbFxuICAgICAqL1xuICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkgeyB9LFxuXG4gICAgLyoqXG4gICAgICogYmluZCB0aGUgZXZlbnRzXG4gICAgICovXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZXZFbCAmJiBhZGRFdmVudExpc3RlbmVycyh0aGlzLmVsZW1lbnQsIHRoaXMuZXZFbCwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICAgICAgdGhpcy5ldlRhcmdldCAmJiBhZGRFdmVudExpc3RlbmVycyh0aGlzLnRhcmdldCwgdGhpcy5ldlRhcmdldCwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICAgICAgdGhpcy5ldldpbiAmJiBhZGRFdmVudExpc3RlbmVycyhnZXRXaW5kb3dGb3JFbGVtZW50KHRoaXMuZWxlbWVudCksIHRoaXMuZXZXaW4sIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHVuYmluZCB0aGUgZXZlbnRzXG4gICAgICovXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZXZFbCAmJiByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLmVsZW1lbnQsIHRoaXMuZXZFbCwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICAgICAgdGhpcy5ldlRhcmdldCAmJiByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnRhcmdldCwgdGhpcy5ldlRhcmdldCwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICAgICAgdGhpcy5ldldpbiAmJiByZW1vdmVFdmVudExpc3RlbmVycyhnZXRXaW5kb3dGb3JFbGVtZW50KHRoaXMuZWxlbWVudCksIHRoaXMuZXZXaW4sIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgfVxufTtcblxuLyoqXG4gKiBjcmVhdGUgbmV3IGlucHV0IHR5cGUgbWFuYWdlclxuICogY2FsbGVkIGJ5IHRoZSBNYW5hZ2VyIGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0hhbW1lcn0gbWFuYWdlclxuICogQHJldHVybnMge0lucHV0fVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dEluc3RhbmNlKG1hbmFnZXIpIHtcbiAgICB2YXIgVHlwZTtcbiAgICB2YXIgaW5wdXRDbGFzcyA9IG1hbmFnZXIub3B0aW9ucy5pbnB1dENsYXNzO1xuXG4gICAgaWYgKGlucHV0Q2xhc3MpIHtcbiAgICAgICAgVHlwZSA9IGlucHV0Q2xhc3M7XG4gICAgfSBlbHNlIGlmIChTVVBQT1JUX1BPSU5URVJfRVZFTlRTKSB7XG4gICAgICAgIFR5cGUgPSBQb2ludGVyRXZlbnRJbnB1dDtcbiAgICB9IGVsc2UgaWYgKFNVUFBPUlRfT05MWV9UT1VDSCkge1xuICAgICAgICBUeXBlID0gVG91Y2hJbnB1dDtcbiAgICB9IGVsc2UgaWYgKCFTVVBQT1JUX1RPVUNIKSB7XG4gICAgICAgIFR5cGUgPSBNb3VzZUlucHV0O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIFR5cGUgPSBUb3VjaE1vdXNlSW5wdXQ7XG4gICAgfVxuICAgIHJldHVybiBuZXcgKFR5cGUpKG1hbmFnZXIsIGlucHV0SGFuZGxlcik7XG59XG5cbi8qKlxuICogaGFuZGxlIGlucHV0IGV2ZW50c1xuICogQHBhcmFtIHtNYW5hZ2VyfSBtYW5hZ2VyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRUeXBlXG4gKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAqL1xuZnVuY3Rpb24gaW5wdXRIYW5kbGVyKG1hbmFnZXIsIGV2ZW50VHlwZSwgaW5wdXQpIHtcbiAgICB2YXIgcG9pbnRlcnNMZW4gPSBpbnB1dC5wb2ludGVycy5sZW5ndGg7XG4gICAgdmFyIGNoYW5nZWRQb2ludGVyc0xlbiA9IGlucHV0LmNoYW5nZWRQb2ludGVycy5sZW5ndGg7XG4gICAgdmFyIGlzRmlyc3QgPSAoZXZlbnRUeXBlICYgSU5QVVRfU1RBUlQgJiYgKHBvaW50ZXJzTGVuIC0gY2hhbmdlZFBvaW50ZXJzTGVuID09PSAwKSk7XG4gICAgdmFyIGlzRmluYWwgPSAoZXZlbnRUeXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkgJiYgKHBvaW50ZXJzTGVuIC0gY2hhbmdlZFBvaW50ZXJzTGVuID09PSAwKSk7XG5cbiAgICBpbnB1dC5pc0ZpcnN0ID0gISFpc0ZpcnN0O1xuICAgIGlucHV0LmlzRmluYWwgPSAhIWlzRmluYWw7XG5cbiAgICBpZiAoaXNGaXJzdCkge1xuICAgICAgICBtYW5hZ2VyLnNlc3Npb24gPSB7fTtcbiAgICB9XG5cbiAgICAvLyBzb3VyY2UgZXZlbnQgaXMgdGhlIG5vcm1hbGl6ZWQgdmFsdWUgb2YgdGhlIGRvbUV2ZW50c1xuICAgIC8vIGxpa2UgJ3RvdWNoc3RhcnQsIG1vdXNldXAsIHBvaW50ZXJkb3duJ1xuICAgIGlucHV0LmV2ZW50VHlwZSA9IGV2ZW50VHlwZTtcblxuICAgIC8vIGNvbXB1dGUgc2NhbGUsIHJvdGF0aW9uIGV0Y1xuICAgIGNvbXB1dGVJbnB1dERhdGEobWFuYWdlciwgaW5wdXQpO1xuXG4gICAgLy8gZW1pdCBzZWNyZXQgZXZlbnRcbiAgICBtYW5hZ2VyLmVtaXQoJ2hhbW1lci5pbnB1dCcsIGlucHV0KTtcblxuICAgIG1hbmFnZXIucmVjb2duaXplKGlucHV0KTtcbiAgICBtYW5hZ2VyLnNlc3Npb24ucHJldklucHV0ID0gaW5wdXQ7XG59XG5cbi8qKlxuICogZXh0ZW5kIHRoZSBkYXRhIHdpdGggc29tZSB1c2FibGUgcHJvcGVydGllcyBsaWtlIHNjYWxlLCByb3RhdGUsIHZlbG9jaXR5IGV0Y1xuICogQHBhcmFtIHtPYmplY3R9IG1hbmFnZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICovXG5mdW5jdGlvbiBjb21wdXRlSW5wdXREYXRhKG1hbmFnZXIsIGlucHV0KSB7XG4gICAgdmFyIHNlc3Npb24gPSBtYW5hZ2VyLnNlc3Npb247XG4gICAgdmFyIHBvaW50ZXJzID0gaW5wdXQucG9pbnRlcnM7XG4gICAgdmFyIHBvaW50ZXJzTGVuZ3RoID0gcG9pbnRlcnMubGVuZ3RoO1xuXG4gICAgLy8gc3RvcmUgdGhlIGZpcnN0IGlucHV0IHRvIGNhbGN1bGF0ZSB0aGUgZGlzdGFuY2UgYW5kIGRpcmVjdGlvblxuICAgIGlmICghc2Vzc2lvbi5maXJzdElucHV0KSB7XG4gICAgICAgIHNlc3Npb24uZmlyc3RJbnB1dCA9IHNpbXBsZUNsb25lSW5wdXREYXRhKGlucHV0KTtcbiAgICB9XG5cbiAgICAvLyB0byBjb21wdXRlIHNjYWxlIGFuZCByb3RhdGlvbiB3ZSBuZWVkIHRvIHN0b3JlIHRoZSBtdWx0aXBsZSB0b3VjaGVzXG4gICAgaWYgKHBvaW50ZXJzTGVuZ3RoID4gMSAmJiAhc2Vzc2lvbi5maXJzdE11bHRpcGxlKSB7XG4gICAgICAgIHNlc3Npb24uZmlyc3RNdWx0aXBsZSA9IHNpbXBsZUNsb25lSW5wdXREYXRhKGlucHV0KTtcbiAgICB9IGVsc2UgaWYgKHBvaW50ZXJzTGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHNlc3Npb24uZmlyc3RNdWx0aXBsZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBmaXJzdElucHV0ID0gc2Vzc2lvbi5maXJzdElucHV0O1xuICAgIHZhciBmaXJzdE11bHRpcGxlID0gc2Vzc2lvbi5maXJzdE11bHRpcGxlO1xuICAgIHZhciBvZmZzZXRDZW50ZXIgPSBmaXJzdE11bHRpcGxlID8gZmlyc3RNdWx0aXBsZS5jZW50ZXIgOiBmaXJzdElucHV0LmNlbnRlcjtcblxuICAgIHZhciBjZW50ZXIgPSBpbnB1dC5jZW50ZXIgPSBnZXRDZW50ZXIocG9pbnRlcnMpO1xuICAgIGlucHV0LnRpbWVTdGFtcCA9IG5vdygpO1xuICAgIGlucHV0LmRlbHRhVGltZSA9IGlucHV0LnRpbWVTdGFtcCAtIGZpcnN0SW5wdXQudGltZVN0YW1wO1xuXG4gICAgaW5wdXQuYW5nbGUgPSBnZXRBbmdsZShvZmZzZXRDZW50ZXIsIGNlbnRlcik7XG4gICAgaW5wdXQuZGlzdGFuY2UgPSBnZXREaXN0YW5jZShvZmZzZXRDZW50ZXIsIGNlbnRlcik7XG5cbiAgICBjb21wdXRlRGVsdGFYWShzZXNzaW9uLCBpbnB1dCk7XG4gICAgaW5wdXQub2Zmc2V0RGlyZWN0aW9uID0gZ2V0RGlyZWN0aW9uKGlucHV0LmRlbHRhWCwgaW5wdXQuZGVsdGFZKTtcblxuICAgIHZhciBvdmVyYWxsVmVsb2NpdHkgPSBnZXRWZWxvY2l0eShpbnB1dC5kZWx0YVRpbWUsIGlucHV0LmRlbHRhWCwgaW5wdXQuZGVsdGFZKTtcbiAgICBpbnB1dC5vdmVyYWxsVmVsb2NpdHlYID0gb3ZlcmFsbFZlbG9jaXR5Lng7XG4gICAgaW5wdXQub3ZlcmFsbFZlbG9jaXR5WSA9IG92ZXJhbGxWZWxvY2l0eS55O1xuICAgIGlucHV0Lm92ZXJhbGxWZWxvY2l0eSA9IChhYnMob3ZlcmFsbFZlbG9jaXR5LngpID4gYWJzKG92ZXJhbGxWZWxvY2l0eS55KSkgPyBvdmVyYWxsVmVsb2NpdHkueCA6IG92ZXJhbGxWZWxvY2l0eS55O1xuXG4gICAgaW5wdXQuc2NhbGUgPSBmaXJzdE11bHRpcGxlID8gZ2V0U2NhbGUoZmlyc3RNdWx0aXBsZS5wb2ludGVycywgcG9pbnRlcnMpIDogMTtcbiAgICBpbnB1dC5yb3RhdGlvbiA9IGZpcnN0TXVsdGlwbGUgPyBnZXRSb3RhdGlvbihmaXJzdE11bHRpcGxlLnBvaW50ZXJzLCBwb2ludGVycykgOiAwO1xuXG4gICAgaW5wdXQubWF4UG9pbnRlcnMgPSAhc2Vzc2lvbi5wcmV2SW5wdXQgPyBpbnB1dC5wb2ludGVycy5sZW5ndGggOiAoKGlucHV0LnBvaW50ZXJzLmxlbmd0aCA+XG4gICAgICAgIHNlc3Npb24ucHJldklucHV0Lm1heFBvaW50ZXJzKSA/IGlucHV0LnBvaW50ZXJzLmxlbmd0aCA6IHNlc3Npb24ucHJldklucHV0Lm1heFBvaW50ZXJzKTtcblxuICAgIGNvbXB1dGVJbnRlcnZhbElucHV0RGF0YShzZXNzaW9uLCBpbnB1dCk7XG5cbiAgICAvLyBmaW5kIHRoZSBjb3JyZWN0IHRhcmdldFxuICAgIHZhciB0YXJnZXQgPSBtYW5hZ2VyLmVsZW1lbnQ7XG4gICAgaWYgKGhhc1BhcmVudChpbnB1dC5zcmNFdmVudC50YXJnZXQsIHRhcmdldCkpIHtcbiAgICAgICAgdGFyZ2V0ID0gaW5wdXQuc3JjRXZlbnQudGFyZ2V0O1xuICAgIH1cbiAgICBpbnB1dC50YXJnZXQgPSB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVEZWx0YVhZKHNlc3Npb24sIGlucHV0KSB7XG4gICAgdmFyIGNlbnRlciA9IGlucHV0LmNlbnRlcjtcbiAgICB2YXIgb2Zmc2V0ID0gc2Vzc2lvbi5vZmZzZXREZWx0YSB8fCB7fTtcbiAgICB2YXIgcHJldkRlbHRhID0gc2Vzc2lvbi5wcmV2RGVsdGEgfHwge307XG4gICAgdmFyIHByZXZJbnB1dCA9IHNlc3Npb24ucHJldklucHV0IHx8IHt9O1xuXG4gICAgaWYgKGlucHV0LmV2ZW50VHlwZSA9PT0gSU5QVVRfU1RBUlQgfHwgcHJldklucHV0LmV2ZW50VHlwZSA9PT0gSU5QVVRfRU5EKSB7XG4gICAgICAgIHByZXZEZWx0YSA9IHNlc3Npb24ucHJldkRlbHRhID0ge1xuICAgICAgICAgICAgeDogcHJldklucHV0LmRlbHRhWCB8fCAwLFxuICAgICAgICAgICAgeTogcHJldklucHV0LmRlbHRhWSB8fCAwXG4gICAgICAgIH07XG5cbiAgICAgICAgb2Zmc2V0ID0gc2Vzc2lvbi5vZmZzZXREZWx0YSA9IHtcbiAgICAgICAgICAgIHg6IGNlbnRlci54LFxuICAgICAgICAgICAgeTogY2VudGVyLnlcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBpbnB1dC5kZWx0YVggPSBwcmV2RGVsdGEueCArIChjZW50ZXIueCAtIG9mZnNldC54KTtcbiAgICBpbnB1dC5kZWx0YVkgPSBwcmV2RGVsdGEueSArIChjZW50ZXIueSAtIG9mZnNldC55KTtcbn1cblxuLyoqXG4gKiB2ZWxvY2l0eSBpcyBjYWxjdWxhdGVkIGV2ZXJ5IHggbXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXNzaW9uXG4gKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUludGVydmFsSW5wdXREYXRhKHNlc3Npb24sIGlucHV0KSB7XG4gICAgdmFyIGxhc3QgPSBzZXNzaW9uLmxhc3RJbnRlcnZhbCB8fCBpbnB1dCxcbiAgICAgICAgZGVsdGFUaW1lID0gaW5wdXQudGltZVN0YW1wIC0gbGFzdC50aW1lU3RhbXAsXG4gICAgICAgIHZlbG9jaXR5LCB2ZWxvY2l0eVgsIHZlbG9jaXR5WSwgZGlyZWN0aW9uO1xuXG4gICAgaWYgKGlucHV0LmV2ZW50VHlwZSAhPSBJTlBVVF9DQU5DRUwgJiYgKGRlbHRhVGltZSA+IENPTVBVVEVfSU5URVJWQUwgfHwgbGFzdC52ZWxvY2l0eSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICB2YXIgZGVsdGFYID0gaW5wdXQuZGVsdGFYIC0gbGFzdC5kZWx0YVg7XG4gICAgICAgIHZhciBkZWx0YVkgPSBpbnB1dC5kZWx0YVkgLSBsYXN0LmRlbHRhWTtcblxuICAgICAgICB2YXIgdiA9IGdldFZlbG9jaXR5KGRlbHRhVGltZSwgZGVsdGFYLCBkZWx0YVkpO1xuICAgICAgICB2ZWxvY2l0eVggPSB2Lng7XG4gICAgICAgIHZlbG9jaXR5WSA9IHYueTtcbiAgICAgICAgdmVsb2NpdHkgPSAoYWJzKHYueCkgPiBhYnModi55KSkgPyB2LnggOiB2Lnk7XG4gICAgICAgIGRpcmVjdGlvbiA9IGdldERpcmVjdGlvbihkZWx0YVgsIGRlbHRhWSk7XG5cbiAgICAgICAgc2Vzc2lvbi5sYXN0SW50ZXJ2YWwgPSBpbnB1dDtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB1c2UgbGF0ZXN0IHZlbG9jaXR5IGluZm8gaWYgaXQgZG9lc24ndCBvdmVydGFrZSBhIG1pbmltdW0gcGVyaW9kXG4gICAgICAgIHZlbG9jaXR5ID0gbGFzdC52ZWxvY2l0eTtcbiAgICAgICAgdmVsb2NpdHlYID0gbGFzdC52ZWxvY2l0eVg7XG4gICAgICAgIHZlbG9jaXR5WSA9IGxhc3QudmVsb2NpdHlZO1xuICAgICAgICBkaXJlY3Rpb24gPSBsYXN0LmRpcmVjdGlvbjtcbiAgICB9XG5cbiAgICBpbnB1dC52ZWxvY2l0eSA9IHZlbG9jaXR5O1xuICAgIGlucHV0LnZlbG9jaXR5WCA9IHZlbG9jaXR5WDtcbiAgICBpbnB1dC52ZWxvY2l0eVkgPSB2ZWxvY2l0eVk7XG4gICAgaW5wdXQuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xufVxuXG4vKipcbiAqIGNyZWF0ZSBhIHNpbXBsZSBjbG9uZSBmcm9tIHRoZSBpbnB1dCB1c2VkIGZvciBzdG9yYWdlIG9mIGZpcnN0SW5wdXQgYW5kIGZpcnN0TXVsdGlwbGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICogQHJldHVybnMge09iamVjdH0gY2xvbmVkSW5wdXREYXRhXG4gKi9cbmZ1bmN0aW9uIHNpbXBsZUNsb25lSW5wdXREYXRhKGlucHV0KSB7XG4gICAgLy8gbWFrZSBhIHNpbXBsZSBjb3B5IG9mIHRoZSBwb2ludGVycyBiZWNhdXNlIHdlIHdpbGwgZ2V0IGEgcmVmZXJlbmNlIGlmIHdlIGRvbid0XG4gICAgLy8gd2Ugb25seSBuZWVkIGNsaWVudFhZIGZvciB0aGUgY2FsY3VsYXRpb25zXG4gICAgdmFyIHBvaW50ZXJzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgaW5wdXQucG9pbnRlcnMubGVuZ3RoKSB7XG4gICAgICAgIHBvaW50ZXJzW2ldID0ge1xuICAgICAgICAgICAgY2xpZW50WDogcm91bmQoaW5wdXQucG9pbnRlcnNbaV0uY2xpZW50WCksXG4gICAgICAgICAgICBjbGllbnRZOiByb3VuZChpbnB1dC5wb2ludGVyc1tpXS5jbGllbnRZKVxuICAgICAgICB9O1xuICAgICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGltZVN0YW1wOiBub3coKSxcbiAgICAgICAgcG9pbnRlcnM6IHBvaW50ZXJzLFxuICAgICAgICBjZW50ZXI6IGdldENlbnRlcihwb2ludGVycyksXG4gICAgICAgIGRlbHRhWDogaW5wdXQuZGVsdGFYLFxuICAgICAgICBkZWx0YVk6IGlucHV0LmRlbHRhWVxuICAgIH07XG59XG5cbi8qKlxuICogZ2V0IHRoZSBjZW50ZXIgb2YgYWxsIHRoZSBwb2ludGVyc1xuICogQHBhcmFtIHtBcnJheX0gcG9pbnRlcnNcbiAqIEByZXR1cm4ge09iamVjdH0gY2VudGVyIGNvbnRhaW5zIGB4YCBhbmQgYHlgIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0Q2VudGVyKHBvaW50ZXJzKSB7XG4gICAgdmFyIHBvaW50ZXJzTGVuZ3RoID0gcG9pbnRlcnMubGVuZ3RoO1xuXG4gICAgLy8gbm8gbmVlZCB0byBsb29wIHdoZW4gb25seSBvbmUgdG91Y2hcbiAgICBpZiAocG9pbnRlcnNMZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHJvdW5kKHBvaW50ZXJzWzBdLmNsaWVudFgpLFxuICAgICAgICAgICAgeTogcm91bmQocG9pbnRlcnNbMF0uY2xpZW50WSlcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgeCA9IDAsIHkgPSAwLCBpID0gMDtcbiAgICB3aGlsZSAoaSA8IHBvaW50ZXJzTGVuZ3RoKSB7XG4gICAgICAgIHggKz0gcG9pbnRlcnNbaV0uY2xpZW50WDtcbiAgICAgICAgeSArPSBwb2ludGVyc1tpXS5jbGllbnRZO1xuICAgICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogcm91bmQoeCAvIHBvaW50ZXJzTGVuZ3RoKSxcbiAgICAgICAgeTogcm91bmQoeSAvIHBvaW50ZXJzTGVuZ3RoKVxuICAgIH07XG59XG5cbi8qKlxuICogY2FsY3VsYXRlIHRoZSB2ZWxvY2l0eSBiZXR3ZWVuIHR3byBwb2ludHMuIHVuaXQgaXMgaW4gcHggcGVyIG1zLlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhVGltZVxuICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gKiBAcmV0dXJuIHtPYmplY3R9IHZlbG9jaXR5IGB4YCBhbmQgYHlgXG4gKi9cbmZ1bmN0aW9uIGdldFZlbG9jaXR5KGRlbHRhVGltZSwgeCwgeSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHggLyBkZWx0YVRpbWUgfHwgMCxcbiAgICAgICAgeTogeSAvIGRlbHRhVGltZSB8fCAwXG4gICAgfTtcbn1cblxuLyoqXG4gKiBnZXQgdGhlIGRpcmVjdGlvbiBiZXR3ZWVuIHR3byBwb2ludHNcbiAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gKiBAcGFyYW0ge051bWJlcn0geVxuICogQHJldHVybiB7TnVtYmVyfSBkaXJlY3Rpb25cbiAqL1xuZnVuY3Rpb24gZ2V0RGlyZWN0aW9uKHgsIHkpIHtcbiAgICBpZiAoeCA9PT0geSkge1xuICAgICAgICByZXR1cm4gRElSRUNUSU9OX05PTkU7XG4gICAgfVxuXG4gICAgaWYgKGFicyh4KSA+PSBhYnMoeSkpIHtcbiAgICAgICAgcmV0dXJuIHggPCAwID8gRElSRUNUSU9OX0xFRlQgOiBESVJFQ1RJT05fUklHSFQ7XG4gICAgfVxuICAgIHJldHVybiB5IDwgMCA/IERJUkVDVElPTl9VUCA6IERJUkVDVElPTl9ET1dOO1xufVxuXG4vKipcbiAqIGNhbGN1bGF0ZSB0aGUgYWJzb2x1dGUgZGlzdGFuY2UgYmV0d2VlbiB0d28gcG9pbnRzXG4gKiBAcGFyYW0ge09iamVjdH0gcDEge3gsIHl9XG4gKiBAcGFyYW0ge09iamVjdH0gcDIge3gsIHl9XG4gKiBAcGFyYW0ge0FycmF5fSBbcHJvcHNdIGNvbnRhaW5pbmcgeCBhbmQgeSBrZXlzXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IGRpc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGdldERpc3RhbmNlKHAxLCBwMiwgcHJvcHMpIHtcbiAgICBpZiAoIXByb3BzKSB7XG4gICAgICAgIHByb3BzID0gUFJPUFNfWFk7XG4gICAgfVxuICAgIHZhciB4ID0gcDJbcHJvcHNbMF1dIC0gcDFbcHJvcHNbMF1dLFxuICAgICAgICB5ID0gcDJbcHJvcHNbMV1dIC0gcDFbcHJvcHNbMV1dO1xuXG4gICAgcmV0dXJuIE1hdGguc3FydCgoeCAqIHgpICsgKHkgKiB5KSk7XG59XG5cbi8qKlxuICogY2FsY3VsYXRlIHRoZSBhbmdsZSBiZXR3ZWVuIHR3byBjb29yZGluYXRlc1xuICogQHBhcmFtIHtPYmplY3R9IHAxXG4gKiBAcGFyYW0ge09iamVjdH0gcDJcbiAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wc10gY29udGFpbmluZyB4IGFuZCB5IGtleXNcbiAqIEByZXR1cm4ge051bWJlcn0gYW5nbGVcbiAqL1xuZnVuY3Rpb24gZ2V0QW5nbGUocDEsIHAyLCBwcm9wcykge1xuICAgIGlmICghcHJvcHMpIHtcbiAgICAgICAgcHJvcHMgPSBQUk9QU19YWTtcbiAgICB9XG4gICAgdmFyIHggPSBwMltwcm9wc1swXV0gLSBwMVtwcm9wc1swXV0sXG4gICAgICAgIHkgPSBwMltwcm9wc1sxXV0gLSBwMVtwcm9wc1sxXV07XG4gICAgcmV0dXJuIE1hdGguYXRhbjIoeSwgeCkgKiAxODAgLyBNYXRoLlBJO1xufVxuXG4vKipcbiAqIGNhbGN1bGF0ZSB0aGUgcm90YXRpb24gZGVncmVlcyBiZXR3ZWVuIHR3byBwb2ludGVyc2V0c1xuICogQHBhcmFtIHtBcnJheX0gc3RhcnQgYXJyYXkgb2YgcG9pbnRlcnNcbiAqIEBwYXJhbSB7QXJyYXl9IGVuZCBhcnJheSBvZiBwb2ludGVyc1xuICogQHJldHVybiB7TnVtYmVyfSByb3RhdGlvblxuICovXG5mdW5jdGlvbiBnZXRSb3RhdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIGdldEFuZ2xlKGVuZFsxXSwgZW5kWzBdLCBQUk9QU19DTElFTlRfWFkpICsgZ2V0QW5nbGUoc3RhcnRbMV0sIHN0YXJ0WzBdLCBQUk9QU19DTElFTlRfWFkpO1xufVxuXG4vKipcbiAqIGNhbGN1bGF0ZSB0aGUgc2NhbGUgZmFjdG9yIGJldHdlZW4gdHdvIHBvaW50ZXJzZXRzXG4gKiBubyBzY2FsZSBpcyAxLCBhbmQgZ29lcyBkb3duIHRvIDAgd2hlbiBwaW5jaGVkIHRvZ2V0aGVyLCBhbmQgYmlnZ2VyIHdoZW4gcGluY2hlZCBvdXRcbiAqIEBwYXJhbSB7QXJyYXl9IHN0YXJ0IGFycmF5IG9mIHBvaW50ZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBlbmQgYXJyYXkgb2YgcG9pbnRlcnNcbiAqIEByZXR1cm4ge051bWJlcn0gc2NhbGVcbiAqL1xuZnVuY3Rpb24gZ2V0U2NhbGUoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBnZXREaXN0YW5jZShlbmRbMF0sIGVuZFsxXSwgUFJPUFNfQ0xJRU5UX1hZKSAvIGdldERpc3RhbmNlKHN0YXJ0WzBdLCBzdGFydFsxXSwgUFJPUFNfQ0xJRU5UX1hZKTtcbn1cblxudmFyIE1PVVNFX0lOUFVUX01BUCA9IHtcbiAgICBtb3VzZWRvd246IElOUFVUX1NUQVJULFxuICAgIG1vdXNlbW92ZTogSU5QVVRfTU9WRSxcbiAgICBtb3VzZXVwOiBJTlBVVF9FTkRcbn07XG5cbnZhciBNT1VTRV9FTEVNRU5UX0VWRU5UUyA9ICdtb3VzZWRvd24nO1xudmFyIE1PVVNFX1dJTkRPV19FVkVOVFMgPSAnbW91c2Vtb3ZlIG1vdXNldXAnO1xuXG4vKipcbiAqIE1vdXNlIGV2ZW50cyBpbnB1dFxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBJbnB1dFxuICovXG5mdW5jdGlvbiBNb3VzZUlucHV0KCkge1xuICAgIHRoaXMuZXZFbCA9IE1PVVNFX0VMRU1FTlRfRVZFTlRTO1xuICAgIHRoaXMuZXZXaW4gPSBNT1VTRV9XSU5ET1dfRVZFTlRTO1xuXG4gICAgdGhpcy5wcmVzc2VkID0gZmFsc2U7IC8vIG1vdXNlZG93biBzdGF0ZVxuXG4gICAgSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuaW5oZXJpdChNb3VzZUlucHV0LCBJbnB1dCwge1xuICAgIC8qKlxuICAgICAqIGhhbmRsZSBtb3VzZSBldmVudHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZcbiAgICAgKi9cbiAgICBoYW5kbGVyOiBmdW5jdGlvbiBNRWhhbmRsZXIoZXYpIHtcbiAgICAgICAgdmFyIGV2ZW50VHlwZSA9IE1PVVNFX0lOUFVUX01BUFtldi50eXBlXTtcblxuICAgICAgICAvLyBvbiBzdGFydCB3ZSB3YW50IHRvIGhhdmUgdGhlIGxlZnQgbW91c2UgYnV0dG9uIGRvd25cbiAgICAgICAgaWYgKGV2ZW50VHlwZSAmIElOUFVUX1NUQVJUICYmIGV2LmJ1dHRvbiA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5wcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9NT1ZFICYmIGV2LndoaWNoICE9PSAxKSB7XG4gICAgICAgICAgICBldmVudFR5cGUgPSBJTlBVVF9FTkQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtb3VzZSBtdXN0IGJlIGRvd25cbiAgICAgICAgaWYgKCF0aGlzLnByZXNzZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9FTkQpIHtcbiAgICAgICAgICAgIHRoaXMucHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLm1hbmFnZXIsIGV2ZW50VHlwZSwge1xuICAgICAgICAgICAgcG9pbnRlcnM6IFtldl0sXG4gICAgICAgICAgICBjaGFuZ2VkUG9pbnRlcnM6IFtldl0sXG4gICAgICAgICAgICBwb2ludGVyVHlwZTogSU5QVVRfVFlQRV9NT1VTRSxcbiAgICAgICAgICAgIHNyY0V2ZW50OiBldlxuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxudmFyIFBPSU5URVJfSU5QVVRfTUFQID0ge1xuICAgIHBvaW50ZXJkb3duOiBJTlBVVF9TVEFSVCxcbiAgICBwb2ludGVybW92ZTogSU5QVVRfTU9WRSxcbiAgICBwb2ludGVydXA6IElOUFVUX0VORCxcbiAgICBwb2ludGVyY2FuY2VsOiBJTlBVVF9DQU5DRUwsXG4gICAgcG9pbnRlcm91dDogSU5QVVRfQ0FOQ0VMXG59O1xuXG4vLyBpbiBJRTEwIHRoZSBwb2ludGVyIHR5cGVzIGlzIGRlZmluZWQgYXMgYW4gZW51bVxudmFyIElFMTBfUE9JTlRFUl9UWVBFX0VOVU0gPSB7XG4gICAgMjogSU5QVVRfVFlQRV9UT1VDSCxcbiAgICAzOiBJTlBVVF9UWVBFX1BFTixcbiAgICA0OiBJTlBVVF9UWVBFX01PVVNFLFxuICAgIDU6IElOUFVUX1RZUEVfS0lORUNUIC8vIHNlZSBodHRwczovL3R3aXR0ZXIuY29tL2phY29icm9zc2kvc3RhdHVzLzQ4MDU5NjQzODQ4OTg5MDgxNlxufTtcblxudmFyIFBPSU5URVJfRUxFTUVOVF9FVkVOVFMgPSAncG9pbnRlcmRvd24nO1xudmFyIFBPSU5URVJfV0lORE9XX0VWRU5UUyA9ICdwb2ludGVybW92ZSBwb2ludGVydXAgcG9pbnRlcmNhbmNlbCc7XG5cbi8vIElFMTAgaGFzIHByZWZpeGVkIHN1cHBvcnQsIGFuZCBjYXNlLXNlbnNpdGl2ZVxuaWYgKHdpbmRvdy5NU1BvaW50ZXJFdmVudCAmJiAhd2luZG93LlBvaW50ZXJFdmVudCkge1xuICAgIFBPSU5URVJfRUxFTUVOVF9FVkVOVFMgPSAnTVNQb2ludGVyRG93bic7XG4gICAgUE9JTlRFUl9XSU5ET1dfRVZFTlRTID0gJ01TUG9pbnRlck1vdmUgTVNQb2ludGVyVXAgTVNQb2ludGVyQ2FuY2VsJztcbn1cblxuLyoqXG4gKiBQb2ludGVyIGV2ZW50cyBpbnB1dFxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBJbnB1dFxuICovXG5mdW5jdGlvbiBQb2ludGVyRXZlbnRJbnB1dCgpIHtcbiAgICB0aGlzLmV2RWwgPSBQT0lOVEVSX0VMRU1FTlRfRVZFTlRTO1xuICAgIHRoaXMuZXZXaW4gPSBQT0lOVEVSX1dJTkRPV19FVkVOVFM7XG5cbiAgICBJbnB1dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgdGhpcy5zdG9yZSA9ICh0aGlzLm1hbmFnZXIuc2Vzc2lvbi5wb2ludGVyRXZlbnRzID0gW10pO1xufVxuXG5pbmhlcml0KFBvaW50ZXJFdmVudElucHV0LCBJbnB1dCwge1xuICAgIC8qKlxuICAgICAqIGhhbmRsZSBtb3VzZSBldmVudHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZcbiAgICAgKi9cbiAgICBoYW5kbGVyOiBmdW5jdGlvbiBQRWhhbmRsZXIoZXYpIHtcbiAgICAgICAgdmFyIHN0b3JlID0gdGhpcy5zdG9yZTtcbiAgICAgICAgdmFyIHJlbW92ZVBvaW50ZXIgPSBmYWxzZTtcblxuICAgICAgICB2YXIgZXZlbnRUeXBlTm9ybWFsaXplZCA9IGV2LnR5cGUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCdtcycsICcnKTtcbiAgICAgICAgdmFyIGV2ZW50VHlwZSA9IFBPSU5URVJfSU5QVVRfTUFQW2V2ZW50VHlwZU5vcm1hbGl6ZWRdO1xuICAgICAgICB2YXIgcG9pbnRlclR5cGUgPSBJRTEwX1BPSU5URVJfVFlQRV9FTlVNW2V2LnBvaW50ZXJUeXBlXSB8fCBldi5wb2ludGVyVHlwZTtcblxuICAgICAgICB2YXIgaXNUb3VjaCA9IChwb2ludGVyVHlwZSA9PSBJTlBVVF9UWVBFX1RPVUNIKTtcblxuICAgICAgICAvLyBnZXQgaW5kZXggb2YgdGhlIGV2ZW50IGluIHRoZSBzdG9yZVxuICAgICAgICB2YXIgc3RvcmVJbmRleCA9IGluQXJyYXkoc3RvcmUsIGV2LnBvaW50ZXJJZCwgJ3BvaW50ZXJJZCcpO1xuXG4gICAgICAgIC8vIHN0YXJ0IGFuZCBtb3VzZSBtdXN0IGJlIGRvd25cbiAgICAgICAgaWYgKGV2ZW50VHlwZSAmIElOUFVUX1NUQVJUICYmIChldi5idXR0b24gPT09IDAgfHwgaXNUb3VjaCkpIHtcbiAgICAgICAgICAgIGlmIChzdG9yZUluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgIHN0b3JlLnB1c2goZXYpO1xuICAgICAgICAgICAgICAgIHN0b3JlSW5kZXggPSBzdG9yZS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50VHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpKSB7XG4gICAgICAgICAgICByZW1vdmVQb2ludGVyID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGl0IG5vdCBmb3VuZCwgc28gdGhlIHBvaW50ZXIgaGFzbid0IGJlZW4gZG93biAoc28gaXQncyBwcm9iYWJseSBhIGhvdmVyKVxuICAgICAgICBpZiAoc3RvcmVJbmRleCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgZXZlbnQgaW4gdGhlIHN0b3JlXG4gICAgICAgIHN0b3JlW3N0b3JlSW5kZXhdID0gZXY7XG5cbiAgICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLm1hbmFnZXIsIGV2ZW50VHlwZSwge1xuICAgICAgICAgICAgcG9pbnRlcnM6IHN0b3JlLFxuICAgICAgICAgICAgY2hhbmdlZFBvaW50ZXJzOiBbZXZdLFxuICAgICAgICAgICAgcG9pbnRlclR5cGU6IHBvaW50ZXJUeXBlLFxuICAgICAgICAgICAgc3JjRXZlbnQ6IGV2XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChyZW1vdmVQb2ludGVyKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgZnJvbSB0aGUgc3RvcmVcbiAgICAgICAgICAgIHN0b3JlLnNwbGljZShzdG9yZUluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG52YXIgU0lOR0xFX1RPVUNIX0lOUFVUX01BUCA9IHtcbiAgICB0b3VjaHN0YXJ0OiBJTlBVVF9TVEFSVCxcbiAgICB0b3VjaG1vdmU6IElOUFVUX01PVkUsXG4gICAgdG91Y2hlbmQ6IElOUFVUX0VORCxcbiAgICB0b3VjaGNhbmNlbDogSU5QVVRfQ0FOQ0VMXG59O1xuXG52YXIgU0lOR0xFX1RPVUNIX1RBUkdFVF9FVkVOVFMgPSAndG91Y2hzdGFydCc7XG52YXIgU0lOR0xFX1RPVUNIX1dJTkRPV19FVkVOVFMgPSAndG91Y2hzdGFydCB0b3VjaG1vdmUgdG91Y2hlbmQgdG91Y2hjYW5jZWwnO1xuXG4vKipcbiAqIFRvdWNoIGV2ZW50cyBpbnB1dFxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBJbnB1dFxuICovXG5mdW5jdGlvbiBTaW5nbGVUb3VjaElucHV0KCkge1xuICAgIHRoaXMuZXZUYXJnZXQgPSBTSU5HTEVfVE9VQ0hfVEFSR0VUX0VWRU5UUztcbiAgICB0aGlzLmV2V2luID0gU0lOR0xFX1RPVUNIX1dJTkRPV19FVkVOVFM7XG4gICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XG5cbiAgICBJbnB1dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5pbmhlcml0KFNpbmdsZVRvdWNoSW5wdXQsIElucHV0LCB7XG4gICAgaGFuZGxlcjogZnVuY3Rpb24gVEVoYW5kbGVyKGV2KSB7XG4gICAgICAgIHZhciB0eXBlID0gU0lOR0xFX1RPVUNIX0lOUFVUX01BUFtldi50eXBlXTtcblxuICAgICAgICAvLyBzaG91bGQgd2UgaGFuZGxlIHRoZSB0b3VjaCBldmVudHM/XG4gICAgICAgIGlmICh0eXBlID09PSBJTlBVVF9TVEFSVCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5zdGFydGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG91Y2hlcyA9IG5vcm1hbGl6ZVNpbmdsZVRvdWNoZXMuY2FsbCh0aGlzLCBldiwgdHlwZSk7XG5cbiAgICAgICAgLy8gd2hlbiBkb25lLCByZXNldCB0aGUgc3RhcnRlZCBzdGF0ZVxuICAgICAgICBpZiAodHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpICYmIHRvdWNoZXNbMF0ubGVuZ3RoIC0gdG91Y2hlc1sxXS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLm1hbmFnZXIsIHR5cGUsIHtcbiAgICAgICAgICAgIHBvaW50ZXJzOiB0b3VjaGVzWzBdLFxuICAgICAgICAgICAgY2hhbmdlZFBvaW50ZXJzOiB0b3VjaGVzWzFdLFxuICAgICAgICAgICAgcG9pbnRlclR5cGU6IElOUFVUX1RZUEVfVE9VQ0gsXG4gICAgICAgICAgICBzcmNFdmVudDogZXZcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogQHRoaXMge1RvdWNoSW5wdXR9XG4gKiBAcGFyYW0ge09iamVjdH0gZXZcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eXBlIGZsYWdcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR8QXJyYXl9IFthbGwsIGNoYW5nZWRdXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNpbmdsZVRvdWNoZXMoZXYsIHR5cGUpIHtcbiAgICB2YXIgYWxsID0gdG9BcnJheShldi50b3VjaGVzKTtcbiAgICB2YXIgY2hhbmdlZCA9IHRvQXJyYXkoZXYuY2hhbmdlZFRvdWNoZXMpO1xuXG4gICAgaWYgKHR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSkge1xuICAgICAgICBhbGwgPSB1bmlxdWVBcnJheShhbGwuY29uY2F0KGNoYW5nZWQpLCAnaWRlbnRpZmllcicsIHRydWUpO1xuICAgIH1cblxuICAgIHJldHVybiBbYWxsLCBjaGFuZ2VkXTtcbn1cblxudmFyIFRPVUNIX0lOUFVUX01BUCA9IHtcbiAgICB0b3VjaHN0YXJ0OiBJTlBVVF9TVEFSVCxcbiAgICB0b3VjaG1vdmU6IElOUFVUX01PVkUsXG4gICAgdG91Y2hlbmQ6IElOUFVUX0VORCxcbiAgICB0b3VjaGNhbmNlbDogSU5QVVRfQ0FOQ0VMXG59O1xuXG52YXIgVE9VQ0hfVEFSR0VUX0VWRU5UUyA9ICd0b3VjaHN0YXJ0IHRvdWNobW92ZSB0b3VjaGVuZCB0b3VjaGNhbmNlbCc7XG5cbi8qKlxuICogTXVsdGktdXNlciB0b3VjaCBldmVudHMgaW5wdXRcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgSW5wdXRcbiAqL1xuZnVuY3Rpb24gVG91Y2hJbnB1dCgpIHtcbiAgICB0aGlzLmV2VGFyZ2V0ID0gVE9VQ0hfVEFSR0VUX0VWRU5UUztcbiAgICB0aGlzLnRhcmdldElkcyA9IHt9O1xuXG4gICAgSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuaW5oZXJpdChUb3VjaElucHV0LCBJbnB1dCwge1xuICAgIGhhbmRsZXI6IGZ1bmN0aW9uIE1URWhhbmRsZXIoZXYpIHtcbiAgICAgICAgdmFyIHR5cGUgPSBUT1VDSF9JTlBVVF9NQVBbZXYudHlwZV07XG4gICAgICAgIHZhciB0b3VjaGVzID0gZ2V0VG91Y2hlcy5jYWxsKHRoaXMsIGV2LCB0eXBlKTtcbiAgICAgICAgaWYgKCF0b3VjaGVzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNhbGxiYWNrKHRoaXMubWFuYWdlciwgdHlwZSwge1xuICAgICAgICAgICAgcG9pbnRlcnM6IHRvdWNoZXNbMF0sXG4gICAgICAgICAgICBjaGFuZ2VkUG9pbnRlcnM6IHRvdWNoZXNbMV0sXG4gICAgICAgICAgICBwb2ludGVyVHlwZTogSU5QVVRfVFlQRV9UT1VDSCxcbiAgICAgICAgICAgIHNyY0V2ZW50OiBldlxuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBAdGhpcyB7VG91Y2hJbnB1dH1cbiAqIEBwYXJhbSB7T2JqZWN0fSBldlxuICogQHBhcmFtIHtOdW1iZXJ9IHR5cGUgZmxhZ1xuICogQHJldHVybnMge3VuZGVmaW5lZHxBcnJheX0gW2FsbCwgY2hhbmdlZF1cbiAqL1xuZnVuY3Rpb24gZ2V0VG91Y2hlcyhldiwgdHlwZSkge1xuICAgIHZhciBhbGxUb3VjaGVzID0gdG9BcnJheShldi50b3VjaGVzKTtcbiAgICB2YXIgdGFyZ2V0SWRzID0gdGhpcy50YXJnZXRJZHM7XG5cbiAgICAvLyB3aGVuIHRoZXJlIGlzIG9ubHkgb25lIHRvdWNoLCB0aGUgcHJvY2VzcyBjYW4gYmUgc2ltcGxpZmllZFxuICAgIGlmICh0eXBlICYgKElOUFVUX1NUQVJUIHwgSU5QVVRfTU9WRSkgJiYgYWxsVG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdGFyZ2V0SWRzW2FsbFRvdWNoZXNbMF0uaWRlbnRpZmllcl0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gW2FsbFRvdWNoZXMsIGFsbFRvdWNoZXNdO1xuICAgIH1cblxuICAgIHZhciBpLFxuICAgICAgICB0YXJnZXRUb3VjaGVzLFxuICAgICAgICBjaGFuZ2VkVG91Y2hlcyA9IHRvQXJyYXkoZXYuY2hhbmdlZFRvdWNoZXMpLFxuICAgICAgICBjaGFuZ2VkVGFyZ2V0VG91Y2hlcyA9IFtdLFxuICAgICAgICB0YXJnZXQgPSB0aGlzLnRhcmdldDtcblxuICAgIC8vIGdldCB0YXJnZXQgdG91Y2hlcyBmcm9tIHRvdWNoZXNcbiAgICB0YXJnZXRUb3VjaGVzID0gYWxsVG91Y2hlcy5maWx0ZXIoZnVuY3Rpb24odG91Y2gpIHtcbiAgICAgICAgcmV0dXJuIGhhc1BhcmVudCh0b3VjaC50YXJnZXQsIHRhcmdldCk7XG4gICAgfSk7XG5cbiAgICAvLyBjb2xsZWN0IHRvdWNoZXNcbiAgICBpZiAodHlwZSA9PT0gSU5QVVRfU1RBUlQpIHtcbiAgICAgICAgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgdGFyZ2V0VG91Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRhcmdldElkc1t0YXJnZXRUb3VjaGVzW2ldLmlkZW50aWZpZXJdID0gdHJ1ZTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGZpbHRlciBjaGFuZ2VkIHRvdWNoZXMgdG8gb25seSBjb250YWluIHRvdWNoZXMgdGhhdCBleGlzdCBpbiB0aGUgY29sbGVjdGVkIHRhcmdldCBpZHNcbiAgICBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGNoYW5nZWRUb3VjaGVzLmxlbmd0aCkge1xuICAgICAgICBpZiAodGFyZ2V0SWRzW2NoYW5nZWRUb3VjaGVzW2ldLmlkZW50aWZpZXJdKSB7XG4gICAgICAgICAgICBjaGFuZ2VkVGFyZ2V0VG91Y2hlcy5wdXNoKGNoYW5nZWRUb3VjaGVzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsZWFudXAgcmVtb3ZlZCB0b3VjaGVzXG4gICAgICAgIGlmICh0eXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXRJZHNbY2hhbmdlZFRvdWNoZXNbaV0uaWRlbnRpZmllcl07XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgIH1cblxuICAgIGlmICghY2hhbmdlZFRhcmdldFRvdWNoZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gW1xuICAgICAgICAvLyBtZXJnZSB0YXJnZXRUb3VjaGVzIHdpdGggY2hhbmdlZFRhcmdldFRvdWNoZXMgc28gaXQgY29udGFpbnMgQUxMIHRvdWNoZXMsIGluY2x1ZGluZyAnZW5kJyBhbmQgJ2NhbmNlbCdcbiAgICAgICAgdW5pcXVlQXJyYXkodGFyZ2V0VG91Y2hlcy5jb25jYXQoY2hhbmdlZFRhcmdldFRvdWNoZXMpLCAnaWRlbnRpZmllcicsIHRydWUpLFxuICAgICAgICBjaGFuZ2VkVGFyZ2V0VG91Y2hlc1xuICAgIF07XG59XG5cbi8qKlxuICogQ29tYmluZWQgdG91Y2ggYW5kIG1vdXNlIGlucHV0XG4gKlxuICogVG91Y2ggaGFzIGEgaGlnaGVyIHByaW9yaXR5IHRoZW4gbW91c2UsIGFuZCB3aGlsZSB0b3VjaGluZyBubyBtb3VzZSBldmVudHMgYXJlIGFsbG93ZWQuXG4gKiBUaGlzIGJlY2F1c2UgdG91Y2ggZGV2aWNlcyBhbHNvIGVtaXQgbW91c2UgZXZlbnRzIHdoaWxlIGRvaW5nIGEgdG91Y2guXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBJbnB1dFxuICovXG5cbnZhciBERURVUF9USU1FT1VUID0gMjUwMDtcbnZhciBERURVUF9ESVNUQU5DRSA9IDI1O1xuXG5mdW5jdGlvbiBUb3VjaE1vdXNlSW5wdXQoKSB7XG4gICAgSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHZhciBoYW5kbGVyID0gYmluZEZuKHRoaXMuaGFuZGxlciwgdGhpcyk7XG4gICAgdGhpcy50b3VjaCA9IG5ldyBUb3VjaElucHV0KHRoaXMubWFuYWdlciwgaGFuZGxlcik7XG4gICAgdGhpcy5tb3VzZSA9IG5ldyBNb3VzZUlucHV0KHRoaXMubWFuYWdlciwgaGFuZGxlcik7XG5cbiAgICB0aGlzLnByaW1hcnlUb3VjaCA9IG51bGw7XG4gICAgdGhpcy5sYXN0VG91Y2hlcyA9IFtdO1xufVxuXG5pbmhlcml0KFRvdWNoTW91c2VJbnB1dCwgSW5wdXQsIHtcbiAgICAvKipcbiAgICAgKiBoYW5kbGUgbW91c2UgYW5kIHRvdWNoIGV2ZW50c1xuICAgICAqIEBwYXJhbSB7SGFtbWVyfSBtYW5hZ2VyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlucHV0RXZlbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXREYXRhXG4gICAgICovXG4gICAgaGFuZGxlcjogZnVuY3Rpb24gVE1FaGFuZGxlcihtYW5hZ2VyLCBpbnB1dEV2ZW50LCBpbnB1dERhdGEpIHtcbiAgICAgICAgdmFyIGlzVG91Y2ggPSAoaW5wdXREYXRhLnBvaW50ZXJUeXBlID09IElOUFVUX1RZUEVfVE9VQ0gpLFxuICAgICAgICAgICAgaXNNb3VzZSA9IChpbnB1dERhdGEucG9pbnRlclR5cGUgPT0gSU5QVVRfVFlQRV9NT1VTRSk7XG5cbiAgICAgICAgaWYgKGlzTW91c2UgJiYgaW5wdXREYXRhLnNvdXJjZUNhcGFiaWxpdGllcyAmJiBpbnB1dERhdGEuc291cmNlQ2FwYWJpbGl0aWVzLmZpcmVzVG91Y2hFdmVudHMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdoZW4gd2UncmUgaW4gYSB0b3VjaCBldmVudCwgcmVjb3JkIHRvdWNoZXMgdG8gIGRlLWR1cGUgc3ludGhldGljIG1vdXNlIGV2ZW50XG4gICAgICAgIGlmIChpc1RvdWNoKSB7XG4gICAgICAgICAgICByZWNvcmRUb3VjaGVzLmNhbGwodGhpcywgaW5wdXRFdmVudCwgaW5wdXREYXRhKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc01vdXNlICYmIGlzU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBpbnB1dERhdGEpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNhbGxiYWNrKG1hbmFnZXIsIGlucHV0RXZlbnQsIGlucHV0RGF0YSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJlbW92ZSB0aGUgZXZlbnQgbGlzdGVuZXJzXG4gICAgICovXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy50b3VjaC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMubW91c2UuZGVzdHJveSgpO1xuICAgIH1cbn0pO1xuXG5mdW5jdGlvbiByZWNvcmRUb3VjaGVzKGV2ZW50VHlwZSwgZXZlbnREYXRhKSB7XG4gICAgaWYgKGV2ZW50VHlwZSAmIElOUFVUX1NUQVJUKSB7XG4gICAgICAgIHRoaXMucHJpbWFyeVRvdWNoID0gZXZlbnREYXRhLmNoYW5nZWRQb2ludGVyc1swXS5pZGVudGlmaWVyO1xuICAgICAgICBzZXRMYXN0VG91Y2guY2FsbCh0aGlzLCBldmVudERhdGEpO1xuICAgIH0gZWxzZSBpZiAoZXZlbnRUeXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkpIHtcbiAgICAgICAgc2V0TGFzdFRvdWNoLmNhbGwodGhpcywgZXZlbnREYXRhKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldExhc3RUb3VjaChldmVudERhdGEpIHtcbiAgICB2YXIgdG91Y2ggPSBldmVudERhdGEuY2hhbmdlZFBvaW50ZXJzWzBdO1xuXG4gICAgaWYgKHRvdWNoLmlkZW50aWZpZXIgPT09IHRoaXMucHJpbWFyeVRvdWNoKSB7XG4gICAgICAgIHZhciBsYXN0VG91Y2ggPSB7eDogdG91Y2guY2xpZW50WCwgeTogdG91Y2guY2xpZW50WX07XG4gICAgICAgIHRoaXMubGFzdFRvdWNoZXMucHVzaChsYXN0VG91Y2gpO1xuICAgICAgICB2YXIgbHRzID0gdGhpcy5sYXN0VG91Y2hlcztcbiAgICAgICAgdmFyIHJlbW92ZUxhc3RUb3VjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGkgPSBsdHMuaW5kZXhPZihsYXN0VG91Y2gpO1xuICAgICAgICAgICAgaWYgKGkgPiAtMSkge1xuICAgICAgICAgICAgICAgIGx0cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHNldFRpbWVvdXQocmVtb3ZlTGFzdFRvdWNoLCBERURVUF9USU1FT1VUKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzU3ludGhldGljRXZlbnQoZXZlbnREYXRhKSB7XG4gICAgdmFyIHggPSBldmVudERhdGEuc3JjRXZlbnQuY2xpZW50WCwgeSA9IGV2ZW50RGF0YS5zcmNFdmVudC5jbGllbnRZO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sYXN0VG91Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdCA9IHRoaXMubGFzdFRvdWNoZXNbaV07XG4gICAgICAgIHZhciBkeCA9IE1hdGguYWJzKHggLSB0LngpLCBkeSA9IE1hdGguYWJzKHkgLSB0LnkpO1xuICAgICAgICBpZiAoZHggPD0gREVEVVBfRElTVEFOQ0UgJiYgZHkgPD0gREVEVVBfRElTVEFOQ0UpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxudmFyIFBSRUZJWEVEX1RPVUNIX0FDVElPTiA9IHByZWZpeGVkKFRFU1RfRUxFTUVOVC5zdHlsZSwgJ3RvdWNoQWN0aW9uJyk7XG52YXIgTkFUSVZFX1RPVUNIX0FDVElPTiA9IFBSRUZJWEVEX1RPVUNIX0FDVElPTiAhPT0gdW5kZWZpbmVkO1xuXG4vLyBtYWdpY2FsIHRvdWNoQWN0aW9uIHZhbHVlXG52YXIgVE9VQ0hfQUNUSU9OX0NPTVBVVEUgPSAnY29tcHV0ZSc7XG52YXIgVE9VQ0hfQUNUSU9OX0FVVE8gPSAnYXV0byc7XG52YXIgVE9VQ0hfQUNUSU9OX01BTklQVUxBVElPTiA9ICdtYW5pcHVsYXRpb24nOyAvLyBub3QgaW1wbGVtZW50ZWRcbnZhciBUT1VDSF9BQ1RJT05fTk9ORSA9ICdub25lJztcbnZhciBUT1VDSF9BQ1RJT05fUEFOX1ggPSAncGFuLXgnO1xudmFyIFRPVUNIX0FDVElPTl9QQU5fWSA9ICdwYW4teSc7XG52YXIgVE9VQ0hfQUNUSU9OX01BUCA9IGdldFRvdWNoQWN0aW9uUHJvcHMoKTtcblxuLyoqXG4gKiBUb3VjaCBBY3Rpb25cbiAqIHNldHMgdGhlIHRvdWNoQWN0aW9uIHByb3BlcnR5IG9yIHVzZXMgdGhlIGpzIGFsdGVybmF0aXZlXG4gKiBAcGFyYW0ge01hbmFnZXJ9IG1hbmFnZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFRvdWNoQWN0aW9uKG1hbmFnZXIsIHZhbHVlKSB7XG4gICAgdGhpcy5tYW5hZ2VyID0gbWFuYWdlcjtcbiAgICB0aGlzLnNldCh2YWx1ZSk7XG59XG5cblRvdWNoQWN0aW9uLnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBzZXQgdGhlIHRvdWNoQWN0aW9uIHZhbHVlIG9uIHRoZSBlbGVtZW50IG9yIGVuYWJsZSB0aGUgcG9seWZpbGxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAgICAgKi9cbiAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIC8vIGZpbmQgb3V0IHRoZSB0b3VjaC1hY3Rpb24gYnkgdGhlIGV2ZW50IGhhbmRsZXJzXG4gICAgICAgIGlmICh2YWx1ZSA9PSBUT1VDSF9BQ1RJT05fQ09NUFVURSkge1xuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLmNvbXB1dGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChOQVRJVkVfVE9VQ0hfQUNUSU9OICYmIHRoaXMubWFuYWdlci5lbGVtZW50LnN0eWxlICYmIFRPVUNIX0FDVElPTl9NQVBbdmFsdWVdKSB7XG4gICAgICAgICAgICB0aGlzLm1hbmFnZXIuZWxlbWVudC5zdHlsZVtQUkVGSVhFRF9UT1VDSF9BQ1RJT05dID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY3Rpb25zID0gdmFsdWUudG9Mb3dlckNhc2UoKS50cmltKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGp1c3QgcmUtc2V0IHRoZSB0b3VjaEFjdGlvbiB2YWx1ZVxuICAgICAqL1xuICAgIHVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuc2V0KHRoaXMubWFuYWdlci5vcHRpb25zLnRvdWNoQWN0aW9uKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY29tcHV0ZSB0aGUgdmFsdWUgZm9yIHRoZSB0b3VjaEFjdGlvbiBwcm9wZXJ0eSBiYXNlZCBvbiB0aGUgcmVjb2duaXplcidzIHNldHRpbmdzXG4gICAgICogQHJldHVybnMge1N0cmluZ30gdmFsdWVcbiAgICAgKi9cbiAgICBjb21wdXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSBbXTtcbiAgICAgICAgZWFjaCh0aGlzLm1hbmFnZXIucmVjb2duaXplcnMsIGZ1bmN0aW9uKHJlY29nbml6ZXIpIHtcbiAgICAgICAgICAgIGlmIChib29sT3JGbihyZWNvZ25pemVyLm9wdGlvbnMuZW5hYmxlLCBbcmVjb2duaXplcl0pKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9ucyA9IGFjdGlvbnMuY29uY2F0KHJlY29nbml6ZXIuZ2V0VG91Y2hBY3Rpb24oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2xlYW5Ub3VjaEFjdGlvbnMoYWN0aW9ucy5qb2luKCcgJykpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiB0aGlzIG1ldGhvZCBpcyBjYWxsZWQgb24gZWFjaCBpbnB1dCBjeWNsZSBhbmQgcHJvdmlkZXMgdGhlIHByZXZlbnRpbmcgb2YgdGhlIGJyb3dzZXIgYmVoYXZpb3JcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICAgKi9cbiAgICBwcmV2ZW50RGVmYXVsdHM6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBzcmNFdmVudCA9IGlucHV0LnNyY0V2ZW50O1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gaW5wdXQub2Zmc2V0RGlyZWN0aW9uO1xuXG4gICAgICAgIC8vIGlmIHRoZSB0b3VjaCBhY3Rpb24gZGlkIHByZXZlbnRlZCBvbmNlIHRoaXMgc2Vzc2lvblxuICAgICAgICBpZiAodGhpcy5tYW5hZ2VyLnNlc3Npb24ucHJldmVudGVkKSB7XG4gICAgICAgICAgICBzcmNFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFjdGlvbnMgPSB0aGlzLmFjdGlvbnM7XG4gICAgICAgIHZhciBoYXNOb25lID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX05PTkUpICYmICFUT1VDSF9BQ1RJT05fTUFQW1RPVUNIX0FDVElPTl9OT05FXTtcbiAgICAgICAgdmFyIGhhc1BhblkgPSBpblN0cihhY3Rpb25zLCBUT1VDSF9BQ1RJT05fUEFOX1kpICYmICFUT1VDSF9BQ1RJT05fTUFQW1RPVUNIX0FDVElPTl9QQU5fWV07XG4gICAgICAgIHZhciBoYXNQYW5YID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX1BBTl9YKSAmJiAhVE9VQ0hfQUNUSU9OX01BUFtUT1VDSF9BQ1RJT05fUEFOX1hdO1xuXG4gICAgICAgIGlmIChoYXNOb25lKSB7XG4gICAgICAgICAgICAvL2RvIG5vdCBwcmV2ZW50IGRlZmF1bHRzIGlmIHRoaXMgaXMgYSB0YXAgZ2VzdHVyZVxuXG4gICAgICAgICAgICB2YXIgaXNUYXBQb2ludGVyID0gaW5wdXQucG9pbnRlcnMubGVuZ3RoID09PSAxO1xuICAgICAgICAgICAgdmFyIGlzVGFwTW92ZW1lbnQgPSBpbnB1dC5kaXN0YW5jZSA8IDI7XG4gICAgICAgICAgICB2YXIgaXNUYXBUb3VjaFRpbWUgPSBpbnB1dC5kZWx0YVRpbWUgPCAyNTA7XG5cbiAgICAgICAgICAgIGlmIChpc1RhcFBvaW50ZXIgJiYgaXNUYXBNb3ZlbWVudCAmJiBpc1RhcFRvdWNoVGltZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNQYW5YICYmIGhhc1BhblkpIHtcbiAgICAgICAgICAgIC8vIGBwYW4teCBwYW4teWAgbWVhbnMgYnJvd3NlciBoYW5kbGVzIGFsbCBzY3JvbGxpbmcvcGFubmluZywgZG8gbm90IHByZXZlbnRcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNOb25lIHx8XG4gICAgICAgICAgICAoaGFzUGFuWSAmJiBkaXJlY3Rpb24gJiBESVJFQ1RJT05fSE9SSVpPTlRBTCkgfHxcbiAgICAgICAgICAgIChoYXNQYW5YICYmIGRpcmVjdGlvbiAmIERJUkVDVElPTl9WRVJUSUNBTCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByZXZlbnRTcmMoc3JjRXZlbnQpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNhbGwgcHJldmVudERlZmF1bHQgdG8gcHJldmVudCB0aGUgYnJvd3NlcidzIGRlZmF1bHQgYmVoYXZpb3IgKHNjcm9sbGluZyBpbiBtb3N0IGNhc2VzKVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzcmNFdmVudFxuICAgICAqL1xuICAgIHByZXZlbnRTcmM6IGZ1bmN0aW9uKHNyY0V2ZW50KSB7XG4gICAgICAgIHRoaXMubWFuYWdlci5zZXNzaW9uLnByZXZlbnRlZCA9IHRydWU7XG4gICAgICAgIHNyY0V2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiB3aGVuIHRoZSB0b3VjaEFjdGlvbnMgYXJlIGNvbGxlY3RlZCB0aGV5IGFyZSBub3QgYSB2YWxpZCB2YWx1ZSwgc28gd2UgbmVlZCB0byBjbGVhbiB0aGluZ3MgdXAuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBhY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZnVuY3Rpb24gY2xlYW5Ub3VjaEFjdGlvbnMoYWN0aW9ucykge1xuICAgIC8vIG5vbmVcbiAgICBpZiAoaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX05PTkUpKSB7XG4gICAgICAgIHJldHVybiBUT1VDSF9BQ1RJT05fTk9ORTtcbiAgICB9XG5cbiAgICB2YXIgaGFzUGFuWCA9IGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9QQU5fWCk7XG4gICAgdmFyIGhhc1BhblkgPSBpblN0cihhY3Rpb25zLCBUT1VDSF9BQ1RJT05fUEFOX1kpO1xuXG4gICAgLy8gaWYgYm90aCBwYW4teCBhbmQgcGFuLXkgYXJlIHNldCAoZGlmZmVyZW50IHJlY29nbml6ZXJzXG4gICAgLy8gZm9yIGRpZmZlcmVudCBkaXJlY3Rpb25zLCBlLmcuIGhvcml6b250YWwgcGFuIGJ1dCB2ZXJ0aWNhbCBzd2lwZT8pXG4gICAgLy8gd2UgbmVlZCBub25lIChhcyBvdGhlcndpc2Ugd2l0aCBwYW4teCBwYW4teSBjb21iaW5lZCBub25lIG9mIHRoZXNlXG4gICAgLy8gcmVjb2duaXplcnMgd2lsbCB3b3JrLCBzaW5jZSB0aGUgYnJvd3NlciB3b3VsZCBoYW5kbGUgYWxsIHBhbm5pbmdcbiAgICBpZiAoaGFzUGFuWCAmJiBoYXNQYW5ZKSB7XG4gICAgICAgIHJldHVybiBUT1VDSF9BQ1RJT05fTk9ORTtcbiAgICB9XG5cbiAgICAvLyBwYW4teCBPUiBwYW4teVxuICAgIGlmIChoYXNQYW5YIHx8IGhhc1BhblkpIHtcbiAgICAgICAgcmV0dXJuIGhhc1BhblggPyBUT1VDSF9BQ1RJT05fUEFOX1ggOiBUT1VDSF9BQ1RJT05fUEFOX1k7XG4gICAgfVxuXG4gICAgLy8gbWFuaXB1bGF0aW9uXG4gICAgaWYgKGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9NQU5JUFVMQVRJT04pKSB7XG4gICAgICAgIHJldHVybiBUT1VDSF9BQ1RJT05fTUFOSVBVTEFUSU9OO1xuICAgIH1cblxuICAgIHJldHVybiBUT1VDSF9BQ1RJT05fQVVUTztcbn1cblxuZnVuY3Rpb24gZ2V0VG91Y2hBY3Rpb25Qcm9wcygpIHtcbiAgICBpZiAoIU5BVElWRV9UT1VDSF9BQ1RJT04pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgdG91Y2hNYXAgPSB7fTtcbiAgICB2YXIgY3NzU3VwcG9ydHMgPSB3aW5kb3cuQ1NTICYmIHdpbmRvdy5DU1Muc3VwcG9ydHM7XG4gICAgWydhdXRvJywgJ21hbmlwdWxhdGlvbicsICdwYW4teScsICdwYW4teCcsICdwYW4teCBwYW4teScsICdub25lJ10uZm9yRWFjaChmdW5jdGlvbih2YWwpIHtcblxuICAgICAgICAvLyBJZiBjc3Muc3VwcG9ydHMgaXMgbm90IHN1cHBvcnRlZCBidXQgdGhlcmUgaXMgbmF0aXZlIHRvdWNoLWFjdGlvbiBhc3N1bWUgaXQgc3VwcG9ydHNcbiAgICAgICAgLy8gYWxsIHZhbHVlcy4gVGhpcyBpcyB0aGUgY2FzZSBmb3IgSUUgMTAgYW5kIDExLlxuICAgICAgICB0b3VjaE1hcFt2YWxdID0gY3NzU3VwcG9ydHMgPyB3aW5kb3cuQ1NTLnN1cHBvcnRzKCd0b3VjaC1hY3Rpb24nLCB2YWwpIDogdHJ1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gdG91Y2hNYXA7XG59XG5cbi8qKlxuICogUmVjb2duaXplciBmbG93IGV4cGxhaW5lZDsgKlxuICogQWxsIHJlY29nbml6ZXJzIGhhdmUgdGhlIGluaXRpYWwgc3RhdGUgb2YgUE9TU0lCTEUgd2hlbiBhIGlucHV0IHNlc3Npb24gc3RhcnRzLlxuICogVGhlIGRlZmluaXRpb24gb2YgYSBpbnB1dCBzZXNzaW9uIGlzIGZyb20gdGhlIGZpcnN0IGlucHV0IHVudGlsIHRoZSBsYXN0IGlucHV0LCB3aXRoIGFsbCBpdCdzIG1vdmVtZW50IGluIGl0LiAqXG4gKiBFeGFtcGxlIHNlc3Npb24gZm9yIG1vdXNlLWlucHV0OiBtb3VzZWRvd24gLT4gbW91c2Vtb3ZlIC0+IG1vdXNldXBcbiAqXG4gKiBPbiBlYWNoIHJlY29nbml6aW5nIGN5Y2xlIChzZWUgTWFuYWdlci5yZWNvZ25pemUpIHRoZSAucmVjb2duaXplKCkgbWV0aG9kIGlzIGV4ZWN1dGVkXG4gKiB3aGljaCBkZXRlcm1pbmVzIHdpdGggc3RhdGUgaXQgc2hvdWxkIGJlLlxuICpcbiAqIElmIHRoZSByZWNvZ25pemVyIGhhcyB0aGUgc3RhdGUgRkFJTEVELCBDQU5DRUxMRUQgb3IgUkVDT0dOSVpFRCAoZXF1YWxzIEVOREVEKSwgaXQgaXMgcmVzZXQgdG9cbiAqIFBPU1NJQkxFIHRvIGdpdmUgaXQgYW5vdGhlciBjaGFuZ2Ugb24gdGhlIG5leHQgY3ljbGUuXG4gKlxuICogICAgICAgICAgICAgICBQb3NzaWJsZVxuICogICAgICAgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICstLS0tLSstLS0tLS0tLS0tLS0tLS0rXG4gKiAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICB8XG4gKiAgICAgICstLS0tLSstLS0tLSsgICAgICAgICAgICAgICB8XG4gKiAgICAgIHwgICAgICAgICAgIHwgICAgICAgICAgICAgICB8XG4gKiAgIEZhaWxlZCAgICAgIENhbmNlbGxlZCAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0rLS0tLS0tK1xuICogICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICAgIFJlY29nbml6ZWQgICAgICAgQmVnYW5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hhbmdlZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVuZGVkL1JlY29nbml6ZWRcbiAqL1xudmFyIFNUQVRFX1BPU1NJQkxFID0gMTtcbnZhciBTVEFURV9CRUdBTiA9IDI7XG52YXIgU1RBVEVfQ0hBTkdFRCA9IDQ7XG52YXIgU1RBVEVfRU5ERUQgPSA4O1xudmFyIFNUQVRFX1JFQ09HTklaRUQgPSBTVEFURV9FTkRFRDtcbnZhciBTVEFURV9DQU5DRUxMRUQgPSAxNjtcbnZhciBTVEFURV9GQUlMRUQgPSAzMjtcblxuLyoqXG4gKiBSZWNvZ25pemVyXG4gKiBFdmVyeSByZWNvZ25pemVyIG5lZWRzIHRvIGV4dGVuZCBmcm9tIHRoaXMgY2xhc3MuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIFJlY29nbml6ZXIob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IGFzc2lnbih7fSwgdGhpcy5kZWZhdWx0cywgb3B0aW9ucyB8fCB7fSk7XG5cbiAgICB0aGlzLmlkID0gdW5pcXVlSWQoKTtcblxuICAgIHRoaXMubWFuYWdlciA9IG51bGw7XG5cbiAgICAvLyBkZWZhdWx0IGlzIGVuYWJsZSB0cnVlXG4gICAgdGhpcy5vcHRpb25zLmVuYWJsZSA9IGlmVW5kZWZpbmVkKHRoaXMub3B0aW9ucy5lbmFibGUsIHRydWUpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IFNUQVRFX1BPU1NJQkxFO1xuXG4gICAgdGhpcy5zaW11bHRhbmVvdXMgPSB7fTtcbiAgICB0aGlzLnJlcXVpcmVGYWlsID0gW107XG59XG5cblJlY29nbml6ZXIucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIEB2aXJ0dWFsXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBkZWZhdWx0czoge30sXG5cbiAgICAvKipcbiAgICAgKiBzZXQgb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7UmVjb2duaXplcn1cbiAgICAgKi9cbiAgICBzZXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgYXNzaWduKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgICAgICAgLy8gYWxzbyB1cGRhdGUgdGhlIHRvdWNoQWN0aW9uLCBpbiBjYXNlIHNvbWV0aGluZyBjaGFuZ2VkIGFib3V0IHRoZSBkaXJlY3Rpb25zL2VuYWJsZWQgc3RhdGVcbiAgICAgICAgdGhpcy5tYW5hZ2VyICYmIHRoaXMubWFuYWdlci50b3VjaEFjdGlvbi51cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJlY29nbml6ZSBzaW11bHRhbmVvdXMgd2l0aCBhbiBvdGhlciByZWNvZ25pemVyLlxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gb3RoZXJSZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICByZWNvZ25pemVXaXRoOiBmdW5jdGlvbihvdGhlclJlY29nbml6ZXIpIHtcbiAgICAgICAgaWYgKGludm9rZUFycmF5QXJnKG90aGVyUmVjb2duaXplciwgJ3JlY29nbml6ZVdpdGgnLCB0aGlzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2ltdWx0YW5lb3VzID0gdGhpcy5zaW11bHRhbmVvdXM7XG4gICAgICAgIG90aGVyUmVjb2duaXplciA9IGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCB0aGlzKTtcbiAgICAgICAgaWYgKCFzaW11bHRhbmVvdXNbb3RoZXJSZWNvZ25pemVyLmlkXSkge1xuICAgICAgICAgICAgc2ltdWx0YW5lb3VzW290aGVyUmVjb2duaXplci5pZF0gPSBvdGhlclJlY29nbml6ZXI7XG4gICAgICAgICAgICBvdGhlclJlY29nbml6ZXIucmVjb2duaXplV2l0aCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZHJvcCB0aGUgc2ltdWx0YW5lb3VzIGxpbmsuIGl0IGRvZXNudCByZW1vdmUgdGhlIGxpbmsgb24gdGhlIG90aGVyIHJlY29nbml6ZXIuXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfSBvdGhlclJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcn0gdGhpc1xuICAgICAqL1xuICAgIGRyb3BSZWNvZ25pemVXaXRoOiBmdW5jdGlvbihvdGhlclJlY29nbml6ZXIpIHtcbiAgICAgICAgaWYgKGludm9rZUFycmF5QXJnKG90aGVyUmVjb2duaXplciwgJ2Ryb3BSZWNvZ25pemVXaXRoJywgdGhpcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgb3RoZXJSZWNvZ25pemVyID0gZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlcihvdGhlclJlY29nbml6ZXIsIHRoaXMpO1xuICAgICAgICBkZWxldGUgdGhpcy5zaW11bHRhbmVvdXNbb3RoZXJSZWNvZ25pemVyLmlkXTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJlY29nbml6ZXIgY2FuIG9ubHkgcnVuIHdoZW4gYW4gb3RoZXIgaXMgZmFpbGluZ1xuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gb3RoZXJSZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICByZXF1aXJlRmFpbHVyZTogZnVuY3Rpb24ob3RoZXJSZWNvZ25pemVyKSB7XG4gICAgICAgIGlmIChpbnZva2VBcnJheUFyZyhvdGhlclJlY29nbml6ZXIsICdyZXF1aXJlRmFpbHVyZScsIHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZXF1aXJlRmFpbCA9IHRoaXMucmVxdWlyZUZhaWw7XG4gICAgICAgIG90aGVyUmVjb2duaXplciA9IGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCB0aGlzKTtcbiAgICAgICAgaWYgKGluQXJyYXkocmVxdWlyZUZhaWwsIG90aGVyUmVjb2duaXplcikgPT09IC0xKSB7XG4gICAgICAgICAgICByZXF1aXJlRmFpbC5wdXNoKG90aGVyUmVjb2duaXplcik7XG4gICAgICAgICAgICBvdGhlclJlY29nbml6ZXIucmVxdWlyZUZhaWx1cmUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGRyb3AgdGhlIHJlcXVpcmVGYWlsdXJlIGxpbmsuIGl0IGRvZXMgbm90IHJlbW92ZSB0aGUgbGluayBvbiB0aGUgb3RoZXIgcmVjb2duaXplci5cbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfSB0aGlzXG4gICAgICovXG4gICAgZHJvcFJlcXVpcmVGYWlsdXJlOiBmdW5jdGlvbihvdGhlclJlY29nbml6ZXIpIHtcbiAgICAgICAgaWYgKGludm9rZUFycmF5QXJnKG90aGVyUmVjb2duaXplciwgJ2Ryb3BSZXF1aXJlRmFpbHVyZScsIHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIG90aGVyUmVjb2duaXplciA9IGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCB0aGlzKTtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5BcnJheSh0aGlzLnJlcXVpcmVGYWlsLCBvdGhlclJlY29nbml6ZXIpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5yZXF1aXJlRmFpbC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBoYXMgcmVxdWlyZSBmYWlsdXJlcyBib29sZWFuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgaGFzUmVxdWlyZUZhaWx1cmVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWlyZUZhaWwubGVuZ3RoID4gMDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogaWYgdGhlIHJlY29nbml6ZXIgY2FuIHJlY29nbml6ZSBzaW11bHRhbmVvdXMgd2l0aCBhbiBvdGhlciByZWNvZ25pemVyXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfSBvdGhlclJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBjYW5SZWNvZ25pemVXaXRoOiBmdW5jdGlvbihvdGhlclJlY29nbml6ZXIpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5zaW11bHRhbmVvdXNbb3RoZXJSZWNvZ25pemVyLmlkXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogWW91IHNob3VsZCB1c2UgYHRyeUVtaXRgIGluc3RlYWQgb2YgYGVtaXRgIGRpcmVjdGx5IHRvIGNoZWNrXG4gICAgICogdGhhdCBhbGwgdGhlIG5lZWRlZCByZWNvZ25pemVycyBoYXMgZmFpbGVkIGJlZm9yZSBlbWl0dGluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICAgKi9cbiAgICBlbWl0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgICAgZnVuY3Rpb24gZW1pdChldmVudCkge1xuICAgICAgICAgICAgc2VsZi5tYW5hZ2VyLmVtaXQoZXZlbnQsIGlucHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vICdwYW5zdGFydCcgYW5kICdwYW5tb3ZlJ1xuICAgICAgICBpZiAoc3RhdGUgPCBTVEFURV9FTkRFRCkge1xuICAgICAgICAgICAgZW1pdChzZWxmLm9wdGlvbnMuZXZlbnQgKyBzdGF0ZVN0cihzdGF0ZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZW1pdChzZWxmLm9wdGlvbnMuZXZlbnQpOyAvLyBzaW1wbGUgJ2V2ZW50TmFtZScgZXZlbnRzXG5cbiAgICAgICAgaWYgKGlucHV0LmFkZGl0aW9uYWxFdmVudCkgeyAvLyBhZGRpdGlvbmFsIGV2ZW50KHBhbmxlZnQsIHBhbnJpZ2h0LCBwaW5jaGluLCBwaW5jaG91dC4uLilcbiAgICAgICAgICAgIGVtaXQoaW5wdXQuYWRkaXRpb25hbEV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHBhbmVuZCBhbmQgcGFuY2FuY2VsXG4gICAgICAgIGlmIChzdGF0ZSA+PSBTVEFURV9FTkRFRCkge1xuICAgICAgICAgICAgZW1pdChzZWxmLm9wdGlvbnMuZXZlbnQgKyBzdGF0ZVN0cihzdGF0ZSkpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIHRoYXQgYWxsIHRoZSByZXF1aXJlIGZhaWx1cmUgcmVjb2duaXplcnMgaGFzIGZhaWxlZCxcbiAgICAgKiBpZiB0cnVlLCBpdCBlbWl0cyBhIGdlc3R1cmUgZXZlbnQsXG4gICAgICogb3RoZXJ3aXNlLCBzZXR1cCB0aGUgc3RhdGUgdG8gRkFJTEVELlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqL1xuICAgIHRyeUVtaXQ6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIGlmICh0aGlzLmNhbkVtaXQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdChpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaXQncyBmYWlsaW5nIGFueXdheVxuICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEVfRkFJTEVEO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjYW4gd2UgZW1pdD9cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBjYW5FbWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHRoaXMucmVxdWlyZUZhaWwubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoISh0aGlzLnJlcXVpcmVGYWlsW2ldLnN0YXRlICYgKFNUQVRFX0ZBSUxFRCB8IFNUQVRFX1BPU1NJQkxFKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHVwZGF0ZSB0aGUgcmVjb2duaXplclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dERhdGFcbiAgICAgKi9cbiAgICByZWNvZ25pemU6IGZ1bmN0aW9uKGlucHV0RGF0YSkge1xuICAgICAgICAvLyBtYWtlIGEgbmV3IGNvcHkgb2YgdGhlIGlucHV0RGF0YVxuICAgICAgICAvLyBzbyB3ZSBjYW4gY2hhbmdlIHRoZSBpbnB1dERhdGEgd2l0aG91dCBtZXNzaW5nIHVwIHRoZSBvdGhlciByZWNvZ25pemVyc1xuICAgICAgICB2YXIgaW5wdXREYXRhQ2xvbmUgPSBhc3NpZ24oe30sIGlucHV0RGF0YSk7XG5cbiAgICAgICAgLy8gaXMgaXMgZW5hYmxlZCBhbmQgYWxsb3cgcmVjb2duaXppbmc/XG4gICAgICAgIGlmICghYm9vbE9yRm4odGhpcy5vcHRpb25zLmVuYWJsZSwgW3RoaXMsIGlucHV0RGF0YUNsb25lXSkpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTVEFURV9GQUlMRUQ7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXNldCB3aGVuIHdlJ3ZlIHJlYWNoZWQgdGhlIGVuZFxuICAgICAgICBpZiAodGhpcy5zdGF0ZSAmIChTVEFURV9SRUNPR05JWkVEIHwgU1RBVEVfQ0FOQ0VMTEVEIHwgU1RBVEVfRkFJTEVEKSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX1BPU1NJQkxFO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMucHJvY2VzcyhpbnB1dERhdGFDbG9uZSk7XG5cbiAgICAgICAgLy8gdGhlIHJlY29nbml6ZXIgaGFzIHJlY29nbml6ZWQgYSBnZXN0dXJlXG4gICAgICAgIC8vIHNvIHRyaWdnZXIgYW4gZXZlbnRcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgJiAoU1RBVEVfQkVHQU4gfCBTVEFURV9DSEFOR0VEIHwgU1RBVEVfRU5ERUQgfCBTVEFURV9DQU5DRUxMRUQpKSB7XG4gICAgICAgICAgICB0aGlzLnRyeUVtaXQoaW5wdXREYXRhQ2xvbmUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJldHVybiB0aGUgc3RhdGUgb2YgdGhlIHJlY29nbml6ZXJcbiAgICAgKiB0aGUgYWN0dWFsIHJlY29nbml6aW5nIGhhcHBlbnMgaW4gdGhpcyBtZXRob2RcbiAgICAgKiBAdmlydHVhbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dERhdGFcbiAgICAgKiBAcmV0dXJucyB7Q29uc3R9IFNUQVRFXG4gICAgICovXG4gICAgcHJvY2VzczogZnVuY3Rpb24oaW5wdXREYXRhKSB7IH0sIC8vIGpzaGludCBpZ25vcmU6bGluZVxuXG4gICAgLyoqXG4gICAgICogcmV0dXJuIHRoZSBwcmVmZXJyZWQgdG91Y2gtYWN0aW9uXG4gICAgICogQHZpcnR1YWxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAgICovXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uKCkgeyB9LFxuXG4gICAgLyoqXG4gICAgICogY2FsbGVkIHdoZW4gdGhlIGdlc3R1cmUgaXNuJ3QgYWxsb3dlZCB0byByZWNvZ25pemVcbiAgICAgKiBsaWtlIHdoZW4gYW5vdGhlciBpcyBiZWluZyByZWNvZ25pemVkIG9yIGl0IGlzIGRpc2FibGVkXG4gICAgICogQHZpcnR1YWxcbiAgICAgKi9cbiAgICByZXNldDogZnVuY3Rpb24oKSB7IH1cbn07XG5cbi8qKlxuICogZ2V0IGEgdXNhYmxlIHN0cmluZywgdXNlZCBhcyBldmVudCBwb3N0Zml4XG4gKiBAcGFyYW0ge0NvbnN0fSBzdGF0ZVxuICogQHJldHVybnMge1N0cmluZ30gc3RhdGVcbiAqL1xuZnVuY3Rpb24gc3RhdGVTdHIoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUgJiBTVEFURV9DQU5DRUxMRUQpIHtcbiAgICAgICAgcmV0dXJuICdjYW5jZWwnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUgJiBTVEFURV9FTkRFRCkge1xuICAgICAgICByZXR1cm4gJ2VuZCc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZSAmIFNUQVRFX0NIQU5HRUQpIHtcbiAgICAgICAgcmV0dXJuICdtb3ZlJztcbiAgICB9IGVsc2UgaWYgKHN0YXRlICYgU1RBVEVfQkVHQU4pIHtcbiAgICAgICAgcmV0dXJuICdzdGFydCc7XG4gICAgfVxuICAgIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBkaXJlY3Rpb24gY29ucyB0byBzdHJpbmdcbiAqIEBwYXJhbSB7Q29uc3R9IGRpcmVjdGlvblxuICogQHJldHVybnMge1N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZGlyZWN0aW9uU3RyKGRpcmVjdGlvbikge1xuICAgIGlmIChkaXJlY3Rpb24gPT0gRElSRUNUSU9OX0RPV04pIHtcbiAgICAgICAgcmV0dXJuICdkb3duJztcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PSBESVJFQ1RJT05fVVApIHtcbiAgICAgICAgcmV0dXJuICd1cCc7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT0gRElSRUNUSU9OX0xFRlQpIHtcbiAgICAgICAgcmV0dXJuICdsZWZ0JztcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PSBESVJFQ1RJT05fUklHSFQpIHtcbiAgICAgICAgcmV0dXJuICdyaWdodCc7XG4gICAgfVxuICAgIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBnZXQgYSByZWNvZ25pemVyIGJ5IG5hbWUgaWYgaXQgaXMgYm91bmQgdG8gYSBtYW5hZ2VyXG4gKiBAcGFyYW0ge1JlY29nbml6ZXJ8U3RyaW5nfSBvdGhlclJlY29nbml6ZXJcbiAqIEBwYXJhbSB7UmVjb2duaXplcn0gcmVjb2duaXplclxuICogQHJldHVybnMge1JlY29nbml6ZXJ9XG4gKi9cbmZ1bmN0aW9uIGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCByZWNvZ25pemVyKSB7XG4gICAgdmFyIG1hbmFnZXIgPSByZWNvZ25pemVyLm1hbmFnZXI7XG4gICAgaWYgKG1hbmFnZXIpIHtcbiAgICAgICAgcmV0dXJuIG1hbmFnZXIuZ2V0KG90aGVyUmVjb2duaXplcik7XG4gICAgfVxuICAgIHJldHVybiBvdGhlclJlY29nbml6ZXI7XG59XG5cbi8qKlxuICogVGhpcyByZWNvZ25pemVyIGlzIGp1c3QgdXNlZCBhcyBhIGJhc2UgZm9yIHRoZSBzaW1wbGUgYXR0cmlidXRlIHJlY29nbml6ZXJzLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBSZWNvZ25pemVyXG4gKi9cbmZ1bmN0aW9uIEF0dHJSZWNvZ25pemVyKCkge1xuICAgIFJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuaW5oZXJpdChBdHRyUmVjb2duaXplciwgUmVjb2duaXplciwge1xuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgQXR0clJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICogQGRlZmF1bHQgMVxuICAgICAgICAgKi9cbiAgICAgICAgcG9pbnRlcnM6IDFcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBjaGVjayBpZiBpdCB0aGUgcmVjb2duaXplciByZWNlaXZlcyB2YWxpZCBpbnB1dCwgbGlrZSBpbnB1dC5kaXN0YW5jZSA+IDEwLlxuICAgICAqIEBtZW1iZXJvZiBBdHRyUmVjb2duaXplclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSByZWNvZ25pemVkXG4gICAgICovXG4gICAgYXR0clRlc3Q6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBvcHRpb25Qb2ludGVycyA9IHRoaXMub3B0aW9ucy5wb2ludGVycztcbiAgICAgICAgcmV0dXJuIG9wdGlvblBvaW50ZXJzID09PSAwIHx8IGlucHV0LnBvaW50ZXJzLmxlbmd0aCA9PT0gb3B0aW9uUG9pbnRlcnM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByb2Nlc3MgdGhlIGlucHV0IGFuZCByZXR1cm4gdGhlIHN0YXRlIGZvciB0aGUgcmVjb2duaXplclxuICAgICAqIEBtZW1iZXJvZiBBdHRyUmVjb2duaXplclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqIEByZXR1cm5zIHsqfSBTdGF0ZVxuICAgICAqL1xuICAgIHByb2Nlc3M6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHZhciBldmVudFR5cGUgPSBpbnB1dC5ldmVudFR5cGU7XG5cbiAgICAgICAgdmFyIGlzUmVjb2duaXplZCA9IHN0YXRlICYgKFNUQVRFX0JFR0FOIHwgU1RBVEVfQ0hBTkdFRCk7XG4gICAgICAgIHZhciBpc1ZhbGlkID0gdGhpcy5hdHRyVGVzdChpbnB1dCk7XG5cbiAgICAgICAgLy8gb24gY2FuY2VsIGlucHV0IGFuZCB3ZSd2ZSByZWNvZ25pemVkIGJlZm9yZSwgcmV0dXJuIFNUQVRFX0NBTkNFTExFRFxuICAgICAgICBpZiAoaXNSZWNvZ25pemVkICYmIChldmVudFR5cGUgJiBJTlBVVF9DQU5DRUwgfHwgIWlzVmFsaWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUgfCBTVEFURV9DQU5DRUxMRUQ7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNSZWNvZ25pemVkIHx8IGlzVmFsaWQpIHtcbiAgICAgICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9FTkQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGUgfCBTVEFURV9FTkRFRDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIShzdGF0ZSAmIFNUQVRFX0JFR0FOKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBTVEFURV9CRUdBTjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdGF0ZSB8IFNUQVRFX0NIQU5HRUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFNUQVRFX0ZBSUxFRDtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBQYW5cbiAqIFJlY29nbml6ZWQgd2hlbiB0aGUgcG9pbnRlciBpcyBkb3duIGFuZCBtb3ZlZCBpbiB0aGUgYWxsb3dlZCBkaXJlY3Rpb24uXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIEF0dHJSZWNvZ25pemVyXG4gKi9cbmZ1bmN0aW9uIFBhblJlY29nbml6ZXIoKSB7XG4gICAgQXR0clJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHRoaXMucFggPSBudWxsO1xuICAgIHRoaXMucFkgPSBudWxsO1xufVxuXG5pbmhlcml0KFBhblJlY29nbml6ZXIsIEF0dHJSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBQYW5SZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZXZlbnQ6ICdwYW4nLFxuICAgICAgICB0aHJlc2hvbGQ6IDEwLFxuICAgICAgICBwb2ludGVyczogMSxcbiAgICAgICAgZGlyZWN0aW9uOiBESVJFQ1RJT05fQUxMXG4gICAgfSxcblxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IHRoaXMub3B0aW9ucy5kaXJlY3Rpb247XG4gICAgICAgIHZhciBhY3Rpb25zID0gW107XG4gICAgICAgIGlmIChkaXJlY3Rpb24gJiBESVJFQ1RJT05fSE9SSVpPTlRBTCkge1xuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKFRPVUNIX0FDVElPTl9QQU5fWSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpcmVjdGlvbiAmIERJUkVDVElPTl9WRVJUSUNBTCkge1xuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKFRPVUNIX0FDVElPTl9QQU5fWCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjdGlvbnM7XG4gICAgfSxcblxuICAgIGRpcmVjdGlvblRlc3Q6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICB2YXIgaGFzTW92ZWQgPSB0cnVlO1xuICAgICAgICB2YXIgZGlzdGFuY2UgPSBpbnB1dC5kaXN0YW5jZTtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGlucHV0LmRpcmVjdGlvbjtcbiAgICAgICAgdmFyIHggPSBpbnB1dC5kZWx0YVg7XG4gICAgICAgIHZhciB5ID0gaW5wdXQuZGVsdGFZO1xuXG4gICAgICAgIC8vIGxvY2sgdG8gYXhpcz9cbiAgICAgICAgaWYgKCEoZGlyZWN0aW9uICYgb3B0aW9ucy5kaXJlY3Rpb24pKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5kaXJlY3Rpb24gJiBESVJFQ1RJT05fSE9SSVpPTlRBTCkge1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9ICh4ID09PSAwKSA/IERJUkVDVElPTl9OT05FIDogKHggPCAwKSA/IERJUkVDVElPTl9MRUZUIDogRElSRUNUSU9OX1JJR0hUO1xuICAgICAgICAgICAgICAgIGhhc01vdmVkID0geCAhPSB0aGlzLnBYO1xuICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gTWF0aC5hYnMoaW5wdXQuZGVsdGFYKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gKHkgPT09IDApID8gRElSRUNUSU9OX05PTkUgOiAoeSA8IDApID8gRElSRUNUSU9OX1VQIDogRElSRUNUSU9OX0RPV047XG4gICAgICAgICAgICAgICAgaGFzTW92ZWQgPSB5ICE9IHRoaXMucFk7XG4gICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBNYXRoLmFicyhpbnB1dC5kZWx0YVkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlucHV0LmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICAgICAgcmV0dXJuIGhhc01vdmVkICYmIGRpc3RhbmNlID4gb3B0aW9ucy50aHJlc2hvbGQgJiYgZGlyZWN0aW9uICYgb3B0aW9ucy5kaXJlY3Rpb247XG4gICAgfSxcblxuICAgIGF0dHJUZXN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gQXR0clJlY29nbml6ZXIucHJvdG90eXBlLmF0dHJUZXN0LmNhbGwodGhpcywgaW5wdXQpICYmXG4gICAgICAgICAgICAodGhpcy5zdGF0ZSAmIFNUQVRFX0JFR0FOIHx8ICghKHRoaXMuc3RhdGUgJiBTVEFURV9CRUdBTikgJiYgdGhpcy5kaXJlY3Rpb25UZXN0KGlucHV0KSkpO1xuICAgIH0sXG5cbiAgICBlbWl0OiBmdW5jdGlvbihpbnB1dCkge1xuXG4gICAgICAgIHRoaXMucFggPSBpbnB1dC5kZWx0YVg7XG4gICAgICAgIHRoaXMucFkgPSBpbnB1dC5kZWx0YVk7XG5cbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGRpcmVjdGlvblN0cihpbnB1dC5kaXJlY3Rpb24pO1xuXG4gICAgICAgIGlmIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGlucHV0LmFkZGl0aW9uYWxFdmVudCA9IHRoaXMub3B0aW9ucy5ldmVudCArIGRpcmVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdXBlci5lbWl0LmNhbGwodGhpcywgaW5wdXQpO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIFBpbmNoXG4gKiBSZWNvZ25pemVkIHdoZW4gdHdvIG9yIG1vcmUgcG9pbnRlcnMgYXJlIG1vdmluZyB0b3dhcmQgKHpvb20taW4pIG9yIGF3YXkgZnJvbSBlYWNoIG90aGVyICh6b29tLW91dCkuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIEF0dHJSZWNvZ25pemVyXG4gKi9cbmZ1bmN0aW9uIFBpbmNoUmVjb2duaXplcigpIHtcbiAgICBBdHRyUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5pbmhlcml0KFBpbmNoUmVjb2duaXplciwgQXR0clJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIFBpbmNoUmVjb2duaXplclxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGV2ZW50OiAncGluY2gnLFxuICAgICAgICB0aHJlc2hvbGQ6IDAsXG4gICAgICAgIHBvaW50ZXJzOiAyXG4gICAgfSxcblxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFtUT1VDSF9BQ1RJT05fTk9ORV07XG4gICAgfSxcblxuICAgIGF0dHJUZXN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3VwZXIuYXR0clRlc3QuY2FsbCh0aGlzLCBpbnB1dCkgJiZcbiAgICAgICAgICAgIChNYXRoLmFicyhpbnB1dC5zY2FsZSAtIDEpID4gdGhpcy5vcHRpb25zLnRocmVzaG9sZCB8fCB0aGlzLnN0YXRlICYgU1RBVEVfQkVHQU4pO1xuICAgIH0sXG5cbiAgICBlbWl0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICBpZiAoaW5wdXQuc2NhbGUgIT09IDEpIHtcbiAgICAgICAgICAgIHZhciBpbk91dCA9IGlucHV0LnNjYWxlIDwgMSA/ICdpbicgOiAnb3V0JztcbiAgICAgICAgICAgIGlucHV0LmFkZGl0aW9uYWxFdmVudCA9IHRoaXMub3B0aW9ucy5ldmVudCArIGluT3V0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N1cGVyLmVtaXQuY2FsbCh0aGlzLCBpbnB1dCk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogUHJlc3NcbiAqIFJlY29nbml6ZWQgd2hlbiB0aGUgcG9pbnRlciBpcyBkb3duIGZvciB4IG1zIHdpdGhvdXQgYW55IG1vdmVtZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBSZWNvZ25pemVyXG4gKi9cbmZ1bmN0aW9uIFByZXNzUmVjb2duaXplcigpIHtcbiAgICBSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICB0aGlzLl90aW1lciA9IG51bGw7XG4gICAgdGhpcy5faW5wdXQgPSBudWxsO1xufVxuXG5pbmhlcml0KFByZXNzUmVjb2duaXplciwgUmVjb2duaXplciwge1xuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgUHJlc3NSZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZXZlbnQ6ICdwcmVzcycsXG4gICAgICAgIHBvaW50ZXJzOiAxLFxuICAgICAgICB0aW1lOiAyNTEsIC8vIG1pbmltYWwgdGltZSBvZiB0aGUgcG9pbnRlciB0byBiZSBwcmVzc2VkXG4gICAgICAgIHRocmVzaG9sZDogOSAvLyBhIG1pbmltYWwgbW92ZW1lbnQgaXMgb2ssIGJ1dCBrZWVwIGl0IGxvd1xuICAgIH0sXG5cbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBbVE9VQ0hfQUNUSU9OX0FVVE9dO1xuICAgIH0sXG5cbiAgICBwcm9jZXNzOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgdmFyIHZhbGlkUG9pbnRlcnMgPSBpbnB1dC5wb2ludGVycy5sZW5ndGggPT09IG9wdGlvbnMucG9pbnRlcnM7XG4gICAgICAgIHZhciB2YWxpZE1vdmVtZW50ID0gaW5wdXQuZGlzdGFuY2UgPCBvcHRpb25zLnRocmVzaG9sZDtcbiAgICAgICAgdmFyIHZhbGlkVGltZSA9IGlucHV0LmRlbHRhVGltZSA+IG9wdGlvbnMudGltZTtcblxuICAgICAgICB0aGlzLl9pbnB1dCA9IGlucHV0O1xuXG4gICAgICAgIC8vIHdlIG9ubHkgYWxsb3cgbGl0dGxlIG1vdmVtZW50XG4gICAgICAgIC8vIGFuZCB3ZSd2ZSByZWFjaGVkIGFuIGVuZCBldmVudCwgc28gYSB0YXAgaXMgcG9zc2libGVcbiAgICAgICAgaWYgKCF2YWxpZE1vdmVtZW50IHx8ICF2YWxpZFBvaW50ZXJzIHx8IChpbnB1dC5ldmVudFR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSAmJiAhdmFsaWRUaW1lKSkge1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB9IGVsc2UgaWYgKGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX1NUQVJUKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICB0aGlzLl90aW1lciA9IHNldFRpbWVvdXRDb250ZXh0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTVEFURV9SRUNPR05JWkVEO1xuICAgICAgICAgICAgICAgIHRoaXMudHJ5RW1pdCgpO1xuICAgICAgICAgICAgfSwgb3B0aW9ucy50aW1lLCB0aGlzKTtcbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dC5ldmVudFR5cGUgJiBJTlBVVF9FTkQpIHtcbiAgICAgICAgICAgIHJldHVybiBTVEFURV9SRUNPR05JWkVEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTVEFURV9GQUlMRUQ7XG4gICAgfSxcblxuICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVyKTtcbiAgICB9LFxuXG4gICAgZW1pdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgIT09IFNUQVRFX1JFQ09HTklaRUQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnB1dCAmJiAoaW5wdXQuZXZlbnRUeXBlICYgSU5QVVRfRU5EKSkge1xuICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50ICsgJ3VwJywgaW5wdXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faW5wdXQudGltZVN0YW1wID0gbm93KCk7XG4gICAgICAgICAgICB0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQsIHRoaXMuX2lucHV0KTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG4vKipcbiAqIFJvdGF0ZVxuICogUmVjb2duaXplZCB3aGVuIHR3byBvciBtb3JlIHBvaW50ZXIgYXJlIG1vdmluZyBpbiBhIGNpcmN1bGFyIG1vdGlvbi5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgQXR0clJlY29nbml6ZXJcbiAqL1xuZnVuY3Rpb24gUm90YXRlUmVjb2duaXplcigpIHtcbiAgICBBdHRyUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5pbmhlcml0KFJvdGF0ZVJlY29nbml6ZXIsIEF0dHJSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBSb3RhdGVSZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZXZlbnQ6ICdyb3RhdGUnLFxuICAgICAgICB0aHJlc2hvbGQ6IDAsXG4gICAgICAgIHBvaW50ZXJzOiAyXG4gICAgfSxcblxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFtUT1VDSF9BQ1RJT05fTk9ORV07XG4gICAgfSxcblxuICAgIGF0dHJUZXN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3VwZXIuYXR0clRlc3QuY2FsbCh0aGlzLCBpbnB1dCkgJiZcbiAgICAgICAgICAgIChNYXRoLmFicyhpbnB1dC5yb3RhdGlvbikgPiB0aGlzLm9wdGlvbnMudGhyZXNob2xkIHx8IHRoaXMuc3RhdGUgJiBTVEFURV9CRUdBTik7XG4gICAgfVxufSk7XG5cbi8qKlxuICogU3dpcGVcbiAqIFJlY29nbml6ZWQgd2hlbiB0aGUgcG9pbnRlciBpcyBtb3ZpbmcgZmFzdCAodmVsb2NpdHkpLCB3aXRoIGVub3VnaCBkaXN0YW5jZSBpbiB0aGUgYWxsb3dlZCBkaXJlY3Rpb24uXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIEF0dHJSZWNvZ25pemVyXG4gKi9cbmZ1bmN0aW9uIFN3aXBlUmVjb2duaXplcigpIHtcbiAgICBBdHRyUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5pbmhlcml0KFN3aXBlUmVjb2duaXplciwgQXR0clJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIFN3aXBlUmVjb2duaXplclxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGV2ZW50OiAnc3dpcGUnLFxuICAgICAgICB0aHJlc2hvbGQ6IDEwLFxuICAgICAgICB2ZWxvY2l0eTogMC4zLFxuICAgICAgICBkaXJlY3Rpb246IERJUkVDVElPTl9IT1JJWk9OVEFMIHwgRElSRUNUSU9OX1ZFUlRJQ0FMLFxuICAgICAgICBwb2ludGVyczogMVxuICAgIH0sXG5cbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBQYW5SZWNvZ25pemVyLnByb3RvdHlwZS5nZXRUb3VjaEFjdGlvbi5jYWxsKHRoaXMpO1xuICAgIH0sXG5cbiAgICBhdHRyVGVzdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IHRoaXMub3B0aW9ucy5kaXJlY3Rpb247XG4gICAgICAgIHZhciB2ZWxvY2l0eTtcblxuICAgICAgICBpZiAoZGlyZWN0aW9uICYgKERJUkVDVElPTl9IT1JJWk9OVEFMIHwgRElSRUNUSU9OX1ZFUlRJQ0FMKSkge1xuICAgICAgICAgICAgdmVsb2NpdHkgPSBpbnB1dC5vdmVyYWxsVmVsb2NpdHk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uICYgRElSRUNUSU9OX0hPUklaT05UQUwpIHtcbiAgICAgICAgICAgIHZlbG9jaXR5ID0gaW5wdXQub3ZlcmFsbFZlbG9jaXR5WDtcbiAgICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gJiBESVJFQ1RJT05fVkVSVElDQUwpIHtcbiAgICAgICAgICAgIHZlbG9jaXR5ID0gaW5wdXQub3ZlcmFsbFZlbG9jaXR5WTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9zdXBlci5hdHRyVGVzdC5jYWxsKHRoaXMsIGlucHV0KSAmJlxuICAgICAgICAgICAgZGlyZWN0aW9uICYgaW5wdXQub2Zmc2V0RGlyZWN0aW9uICYmXG4gICAgICAgICAgICBpbnB1dC5kaXN0YW5jZSA+IHRoaXMub3B0aW9ucy50aHJlc2hvbGQgJiZcbiAgICAgICAgICAgIGlucHV0Lm1heFBvaW50ZXJzID09IHRoaXMub3B0aW9ucy5wb2ludGVycyAmJlxuICAgICAgICAgICAgYWJzKHZlbG9jaXR5KSA+IHRoaXMub3B0aW9ucy52ZWxvY2l0eSAmJiBpbnB1dC5ldmVudFR5cGUgJiBJTlBVVF9FTkQ7XG4gICAgfSxcblxuICAgIGVtaXQ6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBkaXJlY3Rpb25TdHIoaW5wdXQub2Zmc2V0RGlyZWN0aW9uKTtcbiAgICAgICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50ICsgZGlyZWN0aW9uLCBpbnB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQsIGlucHV0KTtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBBIHRhcCBpcyBlY29nbml6ZWQgd2hlbiB0aGUgcG9pbnRlciBpcyBkb2luZyBhIHNtYWxsIHRhcC9jbGljay4gTXVsdGlwbGUgdGFwcyBhcmUgcmVjb2duaXplZCBpZiB0aGV5IG9jY3VyXG4gKiBiZXR3ZWVuIHRoZSBnaXZlbiBpbnRlcnZhbCBhbmQgcG9zaXRpb24uIFRoZSBkZWxheSBvcHRpb24gY2FuIGJlIHVzZWQgdG8gcmVjb2duaXplIG11bHRpLXRhcHMgd2l0aG91dCBmaXJpbmdcbiAqIGEgc2luZ2xlIHRhcC5cbiAqXG4gKiBUaGUgZXZlbnREYXRhIGZyb20gdGhlIGVtaXR0ZWQgZXZlbnQgY29udGFpbnMgdGhlIHByb3BlcnR5IGB0YXBDb3VudGAsIHdoaWNoIGNvbnRhaW5zIHRoZSBhbW91bnQgb2ZcbiAqIG11bHRpLXRhcHMgYmVpbmcgcmVjb2duaXplZC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgUmVjb2duaXplclxuICovXG5mdW5jdGlvbiBUYXBSZWNvZ25pemVyKCkge1xuICAgIFJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIC8vIHByZXZpb3VzIHRpbWUgYW5kIGNlbnRlcixcbiAgICAvLyB1c2VkIGZvciB0YXAgY291bnRpbmdcbiAgICB0aGlzLnBUaW1lID0gZmFsc2U7XG4gICAgdGhpcy5wQ2VudGVyID0gZmFsc2U7XG5cbiAgICB0aGlzLl90aW1lciA9IG51bGw7XG4gICAgdGhpcy5faW5wdXQgPSBudWxsO1xuICAgIHRoaXMuY291bnQgPSAwO1xufVxuXG5pbmhlcml0KFRhcFJlY29nbml6ZXIsIFJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIFBpbmNoUmVjb2duaXplclxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGV2ZW50OiAndGFwJyxcbiAgICAgICAgcG9pbnRlcnM6IDEsXG4gICAgICAgIHRhcHM6IDEsXG4gICAgICAgIGludGVydmFsOiAzMDAsIC8vIG1heCB0aW1lIGJldHdlZW4gdGhlIG11bHRpLXRhcCB0YXBzXG4gICAgICAgIHRpbWU6IDI1MCwgLy8gbWF4IHRpbWUgb2YgdGhlIHBvaW50ZXIgdG8gYmUgZG93biAobGlrZSBmaW5nZXIgb24gdGhlIHNjcmVlbilcbiAgICAgICAgdGhyZXNob2xkOiA5LCAvLyBhIG1pbmltYWwgbW92ZW1lbnQgaXMgb2ssIGJ1dCBrZWVwIGl0IGxvd1xuICAgICAgICBwb3NUaHJlc2hvbGQ6IDEwIC8vIGEgbXVsdGktdGFwIGNhbiBiZSBhIGJpdCBvZmYgdGhlIGluaXRpYWwgcG9zaXRpb25cbiAgICB9LFxuXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gW1RPVUNIX0FDVElPTl9NQU5JUFVMQVRJT05dO1xuICAgIH0sXG5cbiAgICBwcm9jZXNzOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgICB2YXIgdmFsaWRQb2ludGVycyA9IGlucHV0LnBvaW50ZXJzLmxlbmd0aCA9PT0gb3B0aW9ucy5wb2ludGVycztcbiAgICAgICAgdmFyIHZhbGlkTW92ZW1lbnQgPSBpbnB1dC5kaXN0YW5jZSA8IG9wdGlvbnMudGhyZXNob2xkO1xuICAgICAgICB2YXIgdmFsaWRUb3VjaFRpbWUgPSBpbnB1dC5kZWx0YVRpbWUgPCBvcHRpb25zLnRpbWU7XG5cbiAgICAgICAgdGhpcy5yZXNldCgpO1xuXG4gICAgICAgIGlmICgoaW5wdXQuZXZlbnRUeXBlICYgSU5QVVRfU1RBUlQpICYmICh0aGlzLmNvdW50ID09PSAwKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmFpbFRpbWVvdXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdlIG9ubHkgYWxsb3cgbGl0dGxlIG1vdmVtZW50XG4gICAgICAgIC8vIGFuZCB3ZSd2ZSByZWFjaGVkIGFuIGVuZCBldmVudCwgc28gYSB0YXAgaXMgcG9zc2libGVcbiAgICAgICAgaWYgKHZhbGlkTW92ZW1lbnQgJiYgdmFsaWRUb3VjaFRpbWUgJiYgdmFsaWRQb2ludGVycykge1xuICAgICAgICAgICAgaWYgKGlucHV0LmV2ZW50VHlwZSAhPSBJTlBVVF9FTkQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mYWlsVGltZW91dCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdmFsaWRJbnRlcnZhbCA9IHRoaXMucFRpbWUgPyAoaW5wdXQudGltZVN0YW1wIC0gdGhpcy5wVGltZSA8IG9wdGlvbnMuaW50ZXJ2YWwpIDogdHJ1ZTtcbiAgICAgICAgICAgIHZhciB2YWxpZE11bHRpVGFwID0gIXRoaXMucENlbnRlciB8fCBnZXREaXN0YW5jZSh0aGlzLnBDZW50ZXIsIGlucHV0LmNlbnRlcikgPCBvcHRpb25zLnBvc1RocmVzaG9sZDtcblxuICAgICAgICAgICAgdGhpcy5wVGltZSA9IGlucHV0LnRpbWVTdGFtcDtcbiAgICAgICAgICAgIHRoaXMucENlbnRlciA9IGlucHV0LmNlbnRlcjtcblxuICAgICAgICAgICAgaWYgKCF2YWxpZE11bHRpVGFwIHx8ICF2YWxpZEludGVydmFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb3VudCA9IDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY291bnQgKz0gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcblxuICAgICAgICAgICAgLy8gaWYgdGFwIGNvdW50IG1hdGNoZXMgd2UgaGF2ZSByZWNvZ25pemVkIGl0LFxuICAgICAgICAgICAgLy8gZWxzZSBpdCBoYXMgYmVnYW4gcmVjb2duaXppbmcuLi5cbiAgICAgICAgICAgIHZhciB0YXBDb3VudCA9IHRoaXMuY291bnQgJSBvcHRpb25zLnRhcHM7XG4gICAgICAgICAgICBpZiAodGFwQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBubyBmYWlsaW5nIHJlcXVpcmVtZW50cywgaW1tZWRpYXRlbHkgdHJpZ2dlciB0aGUgdGFwIGV2ZW50XG4gICAgICAgICAgICAgICAgLy8gb3Igd2FpdCBhcyBsb25nIGFzIHRoZSBtdWx0aXRhcCBpbnRlcnZhbCB0byB0cmlnZ2VyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmhhc1JlcXVpcmVGYWlsdXJlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTVEFURV9SRUNPR05JWkVEO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RpbWVyID0gc2V0VGltZW91dENvbnRleHQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEVfUkVDT0dOSVpFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJ5RW1pdCgpO1xuICAgICAgICAgICAgICAgICAgICB9LCBvcHRpb25zLmludGVydmFsLCB0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNUQVRFX0JFR0FOO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU1RBVEVfRkFJTEVEO1xuICAgIH0sXG5cbiAgICBmYWlsVGltZW91dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX3RpbWVyID0gc2V0VGltZW91dENvbnRleHQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEVfRkFJTEVEO1xuICAgICAgICB9LCB0aGlzLm9wdGlvbnMuaW50ZXJ2YWwsIHRoaXMpO1xuICAgICAgICByZXR1cm4gU1RBVEVfRkFJTEVEO1xuICAgIH0sXG5cbiAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lcik7XG4gICAgfSxcblxuICAgIGVtaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PSBTVEFURV9SRUNPR05JWkVEKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnB1dC50YXBDb3VudCA9IHRoaXMuY291bnQ7XG4gICAgICAgICAgICB0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQsIHRoaXMuX2lucHV0KTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG4vKipcbiAqIFNpbXBsZSB3YXkgdG8gY3JlYXRlIGEgbWFuYWdlciB3aXRoIGEgZGVmYXVsdCBzZXQgb2YgcmVjb2duaXplcnMuXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gSGFtbWVyKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLnJlY29nbml6ZXJzID0gaWZVbmRlZmluZWQob3B0aW9ucy5yZWNvZ25pemVycywgSGFtbWVyLmRlZmF1bHRzLnByZXNldCk7XG4gICAgcmV0dXJuIG5ldyBNYW5hZ2VyKGVsZW1lbnQsIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIEBjb25zdCB7c3RyaW5nfVxuICovXG5IYW1tZXIuVkVSU0lPTiA9ICcyLjAuNyc7XG5cbi8qKlxuICogZGVmYXVsdCBzZXR0aW5nc1xuICogQG5hbWVzcGFjZVxuICovXG5IYW1tZXIuZGVmYXVsdHMgPSB7XG4gICAgLyoqXG4gICAgICogc2V0IGlmIERPTSBldmVudHMgYXJlIGJlaW5nIHRyaWdnZXJlZC5cbiAgICAgKiBCdXQgdGhpcyBpcyBzbG93ZXIgYW5kIHVudXNlZCBieSBzaW1wbGUgaW1wbGVtZW50YXRpb25zLCBzbyBkaXNhYmxlZCBieSBkZWZhdWx0LlxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgZG9tRXZlbnRzOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBmb3IgdGhlIHRvdWNoQWN0aW9uIHByb3BlcnR5L2ZhbGxiYWNrLlxuICAgICAqIFdoZW4gc2V0IHRvIGBjb21wdXRlYCBpdCB3aWxsIG1hZ2ljYWxseSBzZXQgdGhlIGNvcnJlY3QgdmFsdWUgYmFzZWQgb24gdGhlIGFkZGVkIHJlY29nbml6ZXJzLlxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICogQGRlZmF1bHQgY29tcHV0ZVxuICAgICAqL1xuICAgIHRvdWNoQWN0aW9uOiBUT1VDSF9BQ1RJT05fQ09NUFVURSxcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBlbmFibGU6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBFWFBFUklNRU5UQUwgRkVBVFVSRSAtLSBjYW4gYmUgcmVtb3ZlZC9jaGFuZ2VkXG4gICAgICogQ2hhbmdlIHRoZSBwYXJlbnQgaW5wdXQgdGFyZ2V0IGVsZW1lbnQuXG4gICAgICogSWYgTnVsbCwgdGhlbiBpdCBpcyBiZWluZyBzZXQgdGhlIHRvIG1haW4gZWxlbWVudC5cbiAgICAgKiBAdHlwZSB7TnVsbHxFdmVudFRhcmdldH1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgaW5wdXRUYXJnZXQ6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBmb3JjZSBhbiBpbnB1dCBjbGFzc1xuICAgICAqIEB0eXBlIHtOdWxsfEZ1bmN0aW9ufVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBpbnB1dENsYXNzOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCByZWNvZ25pemVyIHNldHVwIHdoZW4gY2FsbGluZyBgSGFtbWVyKClgXG4gICAgICogV2hlbiBjcmVhdGluZyBhIG5ldyBNYW5hZ2VyIHRoZXNlIHdpbGwgYmUgc2tpcHBlZC5cbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICovXG4gICAgcHJlc2V0OiBbXG4gICAgICAgIC8vIFJlY29nbml6ZXJDbGFzcywgb3B0aW9ucywgW3JlY29nbml6ZVdpdGgsIC4uLl0sIFtyZXF1aXJlRmFpbHVyZSwgLi4uXVxuICAgICAgICBbUm90YXRlUmVjb2duaXplciwge2VuYWJsZTogZmFsc2V9XSxcbiAgICAgICAgW1BpbmNoUmVjb2duaXplciwge2VuYWJsZTogZmFsc2V9LCBbJ3JvdGF0ZSddXSxcbiAgICAgICAgW1N3aXBlUmVjb2duaXplciwge2RpcmVjdGlvbjogRElSRUNUSU9OX0hPUklaT05UQUx9XSxcbiAgICAgICAgW1BhblJlY29nbml6ZXIsIHtkaXJlY3Rpb246IERJUkVDVElPTl9IT1JJWk9OVEFMfSwgWydzd2lwZSddXSxcbiAgICAgICAgW1RhcFJlY29nbml6ZXJdLFxuICAgICAgICBbVGFwUmVjb2duaXplciwge2V2ZW50OiAnZG91YmxldGFwJywgdGFwczogMn0sIFsndGFwJ11dLFxuICAgICAgICBbUHJlc3NSZWNvZ25pemVyXVxuICAgIF0sXG5cbiAgICAvKipcbiAgICAgKiBTb21lIENTUyBwcm9wZXJ0aWVzIGNhbiBiZSB1c2VkIHRvIGltcHJvdmUgdGhlIHdvcmtpbmcgb2YgSGFtbWVyLlxuICAgICAqIEFkZCB0aGVtIHRvIHRoaXMgbWV0aG9kIGFuZCB0aGV5IHdpbGwgYmUgc2V0IHdoZW4gY3JlYXRpbmcgYSBuZXcgTWFuYWdlci5cbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICovXG4gICAgY3NzUHJvcHM6IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERpc2FibGVzIHRleHQgc2VsZWN0aW9uIHRvIGltcHJvdmUgdGhlIGRyYWdnaW5nIGdlc3R1cmUuIE1haW5seSBmb3IgZGVza3RvcCBicm93c2Vycy5cbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAgICAgICAqL1xuICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERpc2FibGUgdGhlIFdpbmRvd3MgUGhvbmUgZ3JpcHBlcnMgd2hlbiBwcmVzc2luZyBhbiBlbGVtZW50LlxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAgICAgKiBAZGVmYXVsdCAnbm9uZSdcbiAgICAgICAgICovXG4gICAgICAgIHRvdWNoU2VsZWN0OiAnbm9uZScsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERpc2FibGVzIHRoZSBkZWZhdWx0IGNhbGxvdXQgc2hvd24gd2hlbiB5b3UgdG91Y2ggYW5kIGhvbGQgYSB0b3VjaCB0YXJnZXQuXG4gICAgICAgICAqIE9uIGlPUywgd2hlbiB5b3UgdG91Y2ggYW5kIGhvbGQgYSB0b3VjaCB0YXJnZXQgc3VjaCBhcyBhIGxpbmssIFNhZmFyaSBkaXNwbGF5c1xuICAgICAgICAgKiBhIGNhbGxvdXQgY29udGFpbmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbGluay4gVGhpcyBwcm9wZXJ0eSBhbGxvd3MgeW91IHRvIGRpc2FibGUgdGhhdCBjYWxsb3V0LlxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAgICAgKiBAZGVmYXVsdCAnbm9uZSdcbiAgICAgICAgICovXG4gICAgICAgIHRvdWNoQ2FsbG91dDogJ25vbmUnLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGVjaWZpZXMgd2hldGhlciB6b29taW5nIGlzIGVuYWJsZWQuIFVzZWQgYnkgSUUxMD5cbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAgICAgICAqL1xuICAgICAgICBjb250ZW50Wm9vbWluZzogJ25vbmUnLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGVjaWZpZXMgdGhhdCBhbiBlbnRpcmUgZWxlbWVudCBzaG91bGQgYmUgZHJhZ2dhYmxlIGluc3RlYWQgb2YgaXRzIGNvbnRlbnRzLiBNYWlubHkgZm9yIGRlc2t0b3AgYnJvd3NlcnMuXG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgICAqIEBkZWZhdWx0ICdub25lJ1xuICAgICAgICAgKi9cbiAgICAgICAgdXNlckRyYWc6ICdub25lJyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogT3ZlcnJpZGVzIHRoZSBoaWdobGlnaHQgY29sb3Igc2hvd24gd2hlbiB0aGUgdXNlciB0YXBzIGEgbGluayBvciBhIEphdmFTY3JpcHRcbiAgICAgICAgICogY2xpY2thYmxlIGVsZW1lbnQgaW4gaU9TLiBUaGlzIHByb3BlcnR5IG9iZXlzIHRoZSBhbHBoYSB2YWx1ZSwgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAgICAgKiBAZGVmYXVsdCAncmdiYSgwLDAsMCwwKSdcbiAgICAgICAgICovXG4gICAgICAgIHRhcEhpZ2hsaWdodENvbG9yOiAncmdiYSgwLDAsMCwwKSdcbiAgICB9XG59O1xuXG52YXIgU1RPUCA9IDE7XG52YXIgRk9SQ0VEX1NUT1AgPSAyO1xuXG4vKipcbiAqIE1hbmFnZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBNYW5hZ2VyKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBhc3NpZ24oe30sIEhhbW1lci5kZWZhdWx0cywgb3B0aW9ucyB8fCB7fSk7XG5cbiAgICB0aGlzLm9wdGlvbnMuaW5wdXRUYXJnZXQgPSB0aGlzLm9wdGlvbnMuaW5wdXRUYXJnZXQgfHwgZWxlbWVudDtcblxuICAgIHRoaXMuaGFuZGxlcnMgPSB7fTtcbiAgICB0aGlzLnNlc3Npb24gPSB7fTtcbiAgICB0aGlzLnJlY29nbml6ZXJzID0gW107XG4gICAgdGhpcy5vbGRDc3NQcm9wcyA9IHt9O1xuXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLmlucHV0ID0gY3JlYXRlSW5wdXRJbnN0YW5jZSh0aGlzKTtcbiAgICB0aGlzLnRvdWNoQWN0aW9uID0gbmV3IFRvdWNoQWN0aW9uKHRoaXMsIHRoaXMub3B0aW9ucy50b3VjaEFjdGlvbik7XG5cbiAgICB0b2dnbGVDc3NQcm9wcyh0aGlzLCB0cnVlKTtcblxuICAgIGVhY2godGhpcy5vcHRpb25zLnJlY29nbml6ZXJzLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHZhciByZWNvZ25pemVyID0gdGhpcy5hZGQobmV3IChpdGVtWzBdKShpdGVtWzFdKSk7XG4gICAgICAgIGl0ZW1bMl0gJiYgcmVjb2duaXplci5yZWNvZ25pemVXaXRoKGl0ZW1bMl0pO1xuICAgICAgICBpdGVtWzNdICYmIHJlY29nbml6ZXIucmVxdWlyZUZhaWx1cmUoaXRlbVszXSk7XG4gICAgfSwgdGhpcyk7XG59XG5cbk1hbmFnZXIucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIHNldCBvcHRpb25zXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJucyB7TWFuYWdlcn1cbiAgICAgKi9cbiAgICBzZXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgYXNzaWduKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgICAgICAgLy8gT3B0aW9ucyB0aGF0IG5lZWQgYSBsaXR0bGUgbW9yZSBzZXR1cFxuICAgICAgICBpZiAob3B0aW9ucy50b3VjaEFjdGlvbikge1xuICAgICAgICAgICAgdGhpcy50b3VjaEFjdGlvbi51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5pbnB1dFRhcmdldCkge1xuICAgICAgICAgICAgLy8gQ2xlYW4gdXAgZXhpc3RpbmcgZXZlbnQgbGlzdGVuZXJzIGFuZCByZWluaXRpYWxpemVcbiAgICAgICAgICAgIHRoaXMuaW5wdXQuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5pbnB1dC50YXJnZXQgPSBvcHRpb25zLmlucHV0VGFyZ2V0O1xuICAgICAgICAgICAgdGhpcy5pbnB1dC5pbml0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHN0b3AgcmVjb2duaXppbmcgZm9yIHRoaXMgc2Vzc2lvbi5cbiAgICAgKiBUaGlzIHNlc3Npb24gd2lsbCBiZSBkaXNjYXJkZWQsIHdoZW4gYSBuZXcgW2lucHV0XXN0YXJ0IGV2ZW50IGlzIGZpcmVkLlxuICAgICAqIFdoZW4gZm9yY2VkLCB0aGUgcmVjb2duaXplciBjeWNsZSBpcyBzdG9wcGVkIGltbWVkaWF0ZWx5LlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2ZvcmNlXVxuICAgICAqL1xuICAgIHN0b3A6IGZ1bmN0aW9uKGZvcmNlKSB7XG4gICAgICAgIHRoaXMuc2Vzc2lvbi5zdG9wcGVkID0gZm9yY2UgPyBGT1JDRURfU1RPUCA6IFNUT1A7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJ1biB0aGUgcmVjb2duaXplcnMhXG4gICAgICogY2FsbGVkIGJ5IHRoZSBpbnB1dEhhbmRsZXIgZnVuY3Rpb24gb24gZXZlcnkgbW92ZW1lbnQgb2YgdGhlIHBvaW50ZXJzICh0b3VjaGVzKVxuICAgICAqIGl0IHdhbGtzIHRocm91Z2ggYWxsIHRoZSByZWNvZ25pemVycyBhbmQgdHJpZXMgdG8gZGV0ZWN0IHRoZSBnZXN0dXJlIHRoYXQgaXMgYmVpbmcgbWFkZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dERhdGFcbiAgICAgKi9cbiAgICByZWNvZ25pemU6IGZ1bmN0aW9uKGlucHV0RGF0YSkge1xuICAgICAgICB2YXIgc2Vzc2lvbiA9IHRoaXMuc2Vzc2lvbjtcbiAgICAgICAgaWYgKHNlc3Npb24uc3RvcHBlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcnVuIHRoZSB0b3VjaC1hY3Rpb24gcG9seWZpbGxcbiAgICAgICAgdGhpcy50b3VjaEFjdGlvbi5wcmV2ZW50RGVmYXVsdHMoaW5wdXREYXRhKTtcblxuICAgICAgICB2YXIgcmVjb2duaXplcjtcbiAgICAgICAgdmFyIHJlY29nbml6ZXJzID0gdGhpcy5yZWNvZ25pemVycztcblxuICAgICAgICAvLyB0aGlzIGhvbGRzIHRoZSByZWNvZ25pemVyIHRoYXQgaXMgYmVpbmcgcmVjb2duaXplZC5cbiAgICAgICAgLy8gc28gdGhlIHJlY29nbml6ZXIncyBzdGF0ZSBuZWVkcyB0byBiZSBCRUdBTiwgQ0hBTkdFRCwgRU5ERUQgb3IgUkVDT0dOSVpFRFxuICAgICAgICAvLyBpZiBubyByZWNvZ25pemVyIGlzIGRldGVjdGluZyBhIHRoaW5nLCBpdCBpcyBzZXQgdG8gYG51bGxgXG4gICAgICAgIHZhciBjdXJSZWNvZ25pemVyID0gc2Vzc2lvbi5jdXJSZWNvZ25pemVyO1xuXG4gICAgICAgIC8vIHJlc2V0IHdoZW4gdGhlIGxhc3QgcmVjb2duaXplciBpcyByZWNvZ25pemVkXG4gICAgICAgIC8vIG9yIHdoZW4gd2UncmUgaW4gYSBuZXcgc2Vzc2lvblxuICAgICAgICBpZiAoIWN1clJlY29nbml6ZXIgfHwgKGN1clJlY29nbml6ZXIgJiYgY3VyUmVjb2duaXplci5zdGF0ZSAmIFNUQVRFX1JFQ09HTklaRUQpKSB7XG4gICAgICAgICAgICBjdXJSZWNvZ25pemVyID0gc2Vzc2lvbi5jdXJSZWNvZ25pemVyID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCByZWNvZ25pemVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlY29nbml6ZXIgPSByZWNvZ25pemVyc1tpXTtcblxuICAgICAgICAgICAgLy8gZmluZCBvdXQgaWYgd2UgYXJlIGFsbG93ZWQgdHJ5IHRvIHJlY29nbml6ZSB0aGUgaW5wdXQgZm9yIHRoaXMgb25lLlxuICAgICAgICAgICAgLy8gMS4gICBhbGxvdyBpZiB0aGUgc2Vzc2lvbiBpcyBOT1QgZm9yY2VkIHN0b3BwZWQgKHNlZSB0aGUgLnN0b3AoKSBtZXRob2QpXG4gICAgICAgICAgICAvLyAyLiAgIGFsbG93IGlmIHdlIHN0aWxsIGhhdmVuJ3QgcmVjb2duaXplZCBhIGdlc3R1cmUgaW4gdGhpcyBzZXNzaW9uLCBvciB0aGUgdGhpcyByZWNvZ25pemVyIGlzIHRoZSBvbmVcbiAgICAgICAgICAgIC8vICAgICAgdGhhdCBpcyBiZWluZyByZWNvZ25pemVkLlxuICAgICAgICAgICAgLy8gMy4gICBhbGxvdyBpZiB0aGUgcmVjb2duaXplciBpcyBhbGxvd2VkIHRvIHJ1biBzaW11bHRhbmVvdXMgd2l0aCB0aGUgY3VycmVudCByZWNvZ25pemVkIHJlY29nbml6ZXIuXG4gICAgICAgICAgICAvLyAgICAgIHRoaXMgY2FuIGJlIHNldHVwIHdpdGggdGhlIGByZWNvZ25pemVXaXRoKClgIG1ldGhvZCBvbiB0aGUgcmVjb2duaXplci5cbiAgICAgICAgICAgIGlmIChzZXNzaW9uLnN0b3BwZWQgIT09IEZPUkNFRF9TVE9QICYmICggLy8gMVxuICAgICAgICAgICAgICAgICAgICAhY3VyUmVjb2duaXplciB8fCByZWNvZ25pemVyID09IGN1clJlY29nbml6ZXIgfHwgLy8gMlxuICAgICAgICAgICAgICAgICAgICByZWNvZ25pemVyLmNhblJlY29nbml6ZVdpdGgoY3VyUmVjb2duaXplcikpKSB7IC8vIDNcbiAgICAgICAgICAgICAgICByZWNvZ25pemVyLnJlY29nbml6ZShpbnB1dERhdGEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWNvZ25pemVyLnJlc2V0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZSByZWNvZ25pemVyIGhhcyBiZWVuIHJlY29nbml6aW5nIHRoZSBpbnB1dCBhcyBhIHZhbGlkIGdlc3R1cmUsIHdlIHdhbnQgdG8gc3RvcmUgdGhpcyBvbmUgYXMgdGhlXG4gICAgICAgICAgICAvLyBjdXJyZW50IGFjdGl2ZSByZWNvZ25pemVyLiBidXQgb25seSBpZiB3ZSBkb24ndCBhbHJlYWR5IGhhdmUgYW4gYWN0aXZlIHJlY29nbml6ZXJcbiAgICAgICAgICAgIGlmICghY3VyUmVjb2duaXplciAmJiByZWNvZ25pemVyLnN0YXRlICYgKFNUQVRFX0JFR0FOIHwgU1RBVEVfQ0hBTkdFRCB8IFNUQVRFX0VOREVEKSkge1xuICAgICAgICAgICAgICAgIGN1clJlY29nbml6ZXIgPSBzZXNzaW9uLmN1clJlY29nbml6ZXIgPSByZWNvZ25pemVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGdldCBhIHJlY29nbml6ZXIgYnkgaXRzIGV2ZW50IG5hbWUuXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfFN0cmluZ30gcmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfE51bGx9XG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbihyZWNvZ25pemVyKSB7XG4gICAgICAgIGlmIChyZWNvZ25pemVyIGluc3RhbmNlb2YgUmVjb2duaXplcikge1xuICAgICAgICAgICAgcmV0dXJuIHJlY29nbml6ZXI7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVjb2duaXplcnMgPSB0aGlzLnJlY29nbml6ZXJzO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlY29nbml6ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAocmVjb2duaXplcnNbaV0ub3B0aW9ucy5ldmVudCA9PSByZWNvZ25pemVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY29nbml6ZXJzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBhZGQgYSByZWNvZ25pemVyIHRvIHRoZSBtYW5hZ2VyXG4gICAgICogZXhpc3RpbmcgcmVjb2duaXplcnMgd2l0aCB0aGUgc2FtZSBldmVudCBuYW1lIHdpbGwgYmUgcmVtb3ZlZFxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gcmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfE1hbmFnZXJ9XG4gICAgICovXG4gICAgYWRkOiBmdW5jdGlvbihyZWNvZ25pemVyKSB7XG4gICAgICAgIGlmIChpbnZva2VBcnJheUFyZyhyZWNvZ25pemVyLCAnYWRkJywgdGhpcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVtb3ZlIGV4aXN0aW5nXG4gICAgICAgIHZhciBleGlzdGluZyA9IHRoaXMuZ2V0KHJlY29nbml6ZXIub3B0aW9ucy5ldmVudCk7XG4gICAgICAgIGlmIChleGlzdGluZykge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoZXhpc3RpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZWNvZ25pemVycy5wdXNoKHJlY29nbml6ZXIpO1xuICAgICAgICByZWNvZ25pemVyLm1hbmFnZXIgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMudG91Y2hBY3Rpb24udXBkYXRlKCk7XG4gICAgICAgIHJldHVybiByZWNvZ25pemVyO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZW1vdmUgYSByZWNvZ25pemVyIGJ5IG5hbWUgb3IgaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ8U3RyaW5nfSByZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge01hbmFnZXJ9XG4gICAgICovXG4gICAgcmVtb3ZlOiBmdW5jdGlvbihyZWNvZ25pemVyKSB7XG4gICAgICAgIGlmIChpbnZva2VBcnJheUFyZyhyZWNvZ25pemVyLCAncmVtb3ZlJywgdGhpcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVjb2duaXplciA9IHRoaXMuZ2V0KHJlY29nbml6ZXIpO1xuXG4gICAgICAgIC8vIGxldCdzIG1ha2Ugc3VyZSB0aGlzIHJlY29nbml6ZXIgZXhpc3RzXG4gICAgICAgIGlmIChyZWNvZ25pemVyKSB7XG4gICAgICAgICAgICB2YXIgcmVjb2duaXplcnMgPSB0aGlzLnJlY29nbml6ZXJzO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gaW5BcnJheShyZWNvZ25pemVycywgcmVjb2duaXplcik7XG5cbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZWNvZ25pemVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIHRoaXMudG91Y2hBY3Rpb24udXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogYmluZCBldmVudFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG4gICAgICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gdGhpc1xuICAgICAqL1xuICAgIG9uOiBmdW5jdGlvbihldmVudHMsIGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5oYW5kbGVycztcbiAgICAgICAgZWFjaChzcGxpdFN0cihldmVudHMpLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaGFuZGxlcnNbZXZlbnRdID0gaGFuZGxlcnNbZXZlbnRdIHx8IFtdO1xuICAgICAgICAgICAgaGFuZGxlcnNbZXZlbnRdLnB1c2goaGFuZGxlcik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdW5iaW5kIGV2ZW50LCBsZWF2ZSBlbWl0IGJsYW5rIHRvIHJlbW92ZSBhbGwgaGFuZGxlcnNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2hhbmRsZXJdXG4gICAgICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gdGhpc1xuICAgICAqL1xuICAgIG9mZjogZnVuY3Rpb24oZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5oYW5kbGVycztcbiAgICAgICAgZWFjaChzcGxpdFN0cihldmVudHMpLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKCFoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGhhbmRsZXJzW2V2ZW50XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcnNbZXZlbnRdICYmIGhhbmRsZXJzW2V2ZW50XS5zcGxpY2UoaW5BcnJheShoYW5kbGVyc1tldmVudF0sIGhhbmRsZXIpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBlbWl0IGV2ZW50IHRvIHRoZSBsaXN0ZW5lcnNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqL1xuICAgIGVtaXQ6IGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XG4gICAgICAgIC8vIHdlIGFsc28gd2FudCB0byB0cmlnZ2VyIGRvbSBldmVudHNcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kb21FdmVudHMpIHtcbiAgICAgICAgICAgIHRyaWdnZXJEb21FdmVudChldmVudCwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBubyBoYW5kbGVycywgc28gc2tpcCBpdCBhbGxcbiAgICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5oYW5kbGVyc1tldmVudF0gJiYgdGhpcy5oYW5kbGVyc1tldmVudF0uc2xpY2UoKTtcbiAgICAgICAgaWYgKCFoYW5kbGVycyB8fCAhaGFuZGxlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhLnR5cGUgPSBldmVudDtcbiAgICAgICAgZGF0YS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZGF0YS5zcmNFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBoYW5kbGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGhhbmRsZXJzW2ldKGRhdGEpO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGRlc3Ryb3kgdGhlIG1hbmFnZXIgYW5kIHVuYmluZHMgYWxsIGV2ZW50c1xuICAgICAqIGl0IGRvZXNuJ3QgdW5iaW5kIGRvbSBldmVudHMsIHRoYXQgaXMgdGhlIHVzZXIgb3duIHJlc3BvbnNpYmlsaXR5XG4gICAgICovXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCAmJiB0b2dnbGVDc3NQcm9wcyh0aGlzLCBmYWxzZSk7XG5cbiAgICAgICAgdGhpcy5oYW5kbGVycyA9IHt9O1xuICAgICAgICB0aGlzLnNlc3Npb24gPSB7fTtcbiAgICAgICAgdGhpcy5pbnB1dC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gICAgfVxufTtcblxuLyoqXG4gKiBhZGQvcmVtb3ZlIHRoZSBjc3MgcHJvcGVydGllcyBhcyBkZWZpbmVkIGluIG1hbmFnZXIub3B0aW9ucy5jc3NQcm9wc1xuICogQHBhcmFtIHtNYW5hZ2VyfSBtYW5hZ2VyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGFkZFxuICovXG5mdW5jdGlvbiB0b2dnbGVDc3NQcm9wcyhtYW5hZ2VyLCBhZGQpIHtcbiAgICB2YXIgZWxlbWVudCA9IG1hbmFnZXIuZWxlbWVudDtcbiAgICBpZiAoIWVsZW1lbnQuc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgcHJvcDtcbiAgICBlYWNoKG1hbmFnZXIub3B0aW9ucy5jc3NQcm9wcywgZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgcHJvcCA9IHByZWZpeGVkKGVsZW1lbnQuc3R5bGUsIG5hbWUpO1xuICAgICAgICBpZiAoYWRkKSB7XG4gICAgICAgICAgICBtYW5hZ2VyLm9sZENzc1Byb3BzW3Byb3BdID0gZWxlbWVudC5zdHlsZVtwcm9wXTtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSBtYW5hZ2VyLm9sZENzc1Byb3BzW3Byb3BdIHx8ICcnO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFhZGQpIHtcbiAgICAgICAgbWFuYWdlci5vbGRDc3NQcm9wcyA9IHt9O1xuICAgIH1cbn1cblxuLyoqXG4gKiB0cmlnZ2VyIGRvbSBldmVudFxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICovXG5mdW5jdGlvbiB0cmlnZ2VyRG9tRXZlbnQoZXZlbnQsIGRhdGEpIHtcbiAgICB2YXIgZ2VzdHVyZUV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgZ2VzdHVyZUV2ZW50LmluaXRFdmVudChldmVudCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgZ2VzdHVyZUV2ZW50Lmdlc3R1cmUgPSBkYXRhO1xuICAgIGRhdGEudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZ2VzdHVyZUV2ZW50KTtcbn1cblxuYXNzaWduKEhhbW1lciwge1xuICAgIElOUFVUX1NUQVJUOiBJTlBVVF9TVEFSVCxcbiAgICBJTlBVVF9NT1ZFOiBJTlBVVF9NT1ZFLFxuICAgIElOUFVUX0VORDogSU5QVVRfRU5ELFxuICAgIElOUFVUX0NBTkNFTDogSU5QVVRfQ0FOQ0VMLFxuXG4gICAgU1RBVEVfUE9TU0lCTEU6IFNUQVRFX1BPU1NJQkxFLFxuICAgIFNUQVRFX0JFR0FOOiBTVEFURV9CRUdBTixcbiAgICBTVEFURV9DSEFOR0VEOiBTVEFURV9DSEFOR0VELFxuICAgIFNUQVRFX0VOREVEOiBTVEFURV9FTkRFRCxcbiAgICBTVEFURV9SRUNPR05JWkVEOiBTVEFURV9SRUNPR05JWkVELFxuICAgIFNUQVRFX0NBTkNFTExFRDogU1RBVEVfQ0FOQ0VMTEVELFxuICAgIFNUQVRFX0ZBSUxFRDogU1RBVEVfRkFJTEVELFxuXG4gICAgRElSRUNUSU9OX05PTkU6IERJUkVDVElPTl9OT05FLFxuICAgIERJUkVDVElPTl9MRUZUOiBESVJFQ1RJT05fTEVGVCxcbiAgICBESVJFQ1RJT05fUklHSFQ6IERJUkVDVElPTl9SSUdIVCxcbiAgICBESVJFQ1RJT05fVVA6IERJUkVDVElPTl9VUCxcbiAgICBESVJFQ1RJT05fRE9XTjogRElSRUNUSU9OX0RPV04sXG4gICAgRElSRUNUSU9OX0hPUklaT05UQUw6IERJUkVDVElPTl9IT1JJWk9OVEFMLFxuICAgIERJUkVDVElPTl9WRVJUSUNBTDogRElSRUNUSU9OX1ZFUlRJQ0FMLFxuICAgIERJUkVDVElPTl9BTEw6IERJUkVDVElPTl9BTEwsXG5cbiAgICBNYW5hZ2VyOiBNYW5hZ2VyLFxuICAgIElucHV0OiBJbnB1dCxcbiAgICBUb3VjaEFjdGlvbjogVG91Y2hBY3Rpb24sXG5cbiAgICBUb3VjaElucHV0OiBUb3VjaElucHV0LFxuICAgIE1vdXNlSW5wdXQ6IE1vdXNlSW5wdXQsXG4gICAgUG9pbnRlckV2ZW50SW5wdXQ6IFBvaW50ZXJFdmVudElucHV0LFxuICAgIFRvdWNoTW91c2VJbnB1dDogVG91Y2hNb3VzZUlucHV0LFxuICAgIFNpbmdsZVRvdWNoSW5wdXQ6IFNpbmdsZVRvdWNoSW5wdXQsXG5cbiAgICBSZWNvZ25pemVyOiBSZWNvZ25pemVyLFxuICAgIEF0dHJSZWNvZ25pemVyOiBBdHRyUmVjb2duaXplcixcbiAgICBUYXA6IFRhcFJlY29nbml6ZXIsXG4gICAgUGFuOiBQYW5SZWNvZ25pemVyLFxuICAgIFN3aXBlOiBTd2lwZVJlY29nbml6ZXIsXG4gICAgUGluY2g6IFBpbmNoUmVjb2duaXplcixcbiAgICBSb3RhdGU6IFJvdGF0ZVJlY29nbml6ZXIsXG4gICAgUHJlc3M6IFByZXNzUmVjb2duaXplcixcblxuICAgIG9uOiBhZGRFdmVudExpc3RlbmVycyxcbiAgICBvZmY6IHJlbW92ZUV2ZW50TGlzdGVuZXJzLFxuICAgIGVhY2g6IGVhY2gsXG4gICAgbWVyZ2U6IG1lcmdlLFxuICAgIGV4dGVuZDogZXh0ZW5kLFxuICAgIGFzc2lnbjogYXNzaWduLFxuICAgIGluaGVyaXQ6IGluaGVyaXQsXG4gICAgYmluZEZuOiBiaW5kRm4sXG4gICAgcHJlZml4ZWQ6IHByZWZpeGVkXG59KTtcblxuLy8gdGhpcyBwcmV2ZW50cyBlcnJvcnMgd2hlbiBIYW1tZXIgaXMgbG9hZGVkIGluIHRoZSBwcmVzZW5jZSBvZiBhbiBBTURcbi8vICBzdHlsZSBsb2FkZXIgYnV0IGJ5IHNjcmlwdCB0YWcsIG5vdCBieSB0aGUgbG9hZGVyLlxudmFyIGZyZWVHbG9iYWwgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9KSk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuZnJlZUdsb2JhbC5IYW1tZXIgPSBIYW1tZXI7XG5cbmlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBIYW1tZXI7XG4gICAgfSk7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEhhbW1lcjtcbn0gZWxzZSB7XG4gICAgd2luZG93W2V4cG9ydE5hbWVdID0gSGFtbWVyO1xufVxuXG59KSh3aW5kb3csIGRvY3VtZW50LCAnSGFtbWVyJyk7XG4iLCI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IG9uRGVzdHJveSwgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBpbXBvcnQgeyBjcmVhdGVDb250cm9sbGVyRGlzcGF0Y2hlciB9IGZyb20gXCIuL0NvbnRyb2xsZXIuc3ZlbHRlXCI7XG4gICAgY29uc3QgZGlzcGF0Y2hlciA9IGNyZWF0ZUNvbnRyb2xsZXJEaXNwYXRjaGVyKCk7XG4gICAgaW1wb3J0IEhhbW1lciBmcm9tIFwiaGFtbWVyanNcIjtcblxuICAgIGxldCBfY2xhc3M6IHN0cmluZyA9ICcnO1xuICAgIGV4cG9ydCB7IF9jbGFzcyBhcyBjbGFzcyB9O1xuXG4gICAgbGV0IGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQ7XG4gICAgbGV0IG1jOiBIYW1tZXJNYW5hZ2VyO1xuXG4gICAgbGV0IGxhc3RQYW46IEhhbW1lcklucHV0IHwgbnVsbCA9IG51bGw7XG5cbiAgICBvbk1vdW50KCgpID0+IHtcblxuICAgICAgICBtYyA9IG5ldyBIYW1tZXIuTWFuYWdlcihjb250YWluZXIsIHtcbiAgICAgICAgICAgIHJlY29nbml6ZXJzOiBbXG4gICAgICAgICAgICAgICAgWyBIYW1tZXIuUGFuIF0sXG4gICAgICAgICAgICAgICAgWyBIYW1tZXIuUGluY2ggXVxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB0YXBTaW5nbGUgPSBuZXcgSGFtbWVyLlRhcCh7IHRhcHM6IDEsIGV2ZW50OiAndGFwU2luZ2xlJyB9KTtcbiAgICAgICAgY29uc3QgdGFwRG91YmxlID0gbmV3IEhhbW1lci5UYXAoeyB0YXBzOiAyLCBldmVudDogJ3RhcERvdWJsZScgfSk7XG5cbiAgICAgICAgbWMuYWRkKFsgdGFwRG91YmxlLCB0YXBTaW5nbGUgXSk7XG5cbiAgICAgICAgdGFwRG91YmxlLnJlY29nbml6ZVdpdGgodGFwU2luZ2xlKTtcbiAgICAgICAgdGFwU2luZ2xlLnJlcXVpcmVGYWlsdXJlKHRhcERvdWJsZSk7XG5cbiAgICAgICAgbWMub24oJ3BhbicsIGV2ID0+IHtcbiAgICAgICAgICAgIGlmKGxhc3RQYW4pIHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaGVyKCdtb3ZlJywge1xuICAgICAgICAgICAgICAgICAgICB4OiBldi5jZW50ZXIueCxcbiAgICAgICAgICAgICAgICAgICAgeTogZXYuY2VudGVyLnksXG4gICAgICAgICAgICAgICAgICAgIGR4OiBldi5jZW50ZXIueCAtIGxhc3RQYW4uY2VudGVyLngsXG4gICAgICAgICAgICAgICAgICAgIGR5OiBldi5jZW50ZXIueSAtIGxhc3RQYW4uY2VudGVyLnlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RQYW4gPSBldi5pc0ZpbmFsID8gbnVsbCA6IGV2O1xuICAgICAgICB9KTtcblxuICAgICAgICBtYy5vbigncGluY2gnLCBldiA9PiB7XG4gICAgICAgICAgICAvLyBUT0RPOiBHZXQgdGhpcyB0byB3b3JrIVxuICAgICAgICAgICAgLy8gZGlzcGF0Y2hlcignem9vbScsIHtcbiAgICAgICAgICAgIC8vICAgICB4OiBldi5jZW50ZXIueCxcbiAgICAgICAgICAgIC8vICAgICB5OiBldi5jZW50ZXIueSxcbiAgICAgICAgICAgIC8vICAgICBhbW91bnRUeXBlOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgLy8gICAgIGFtb3VudDogZXYuc2NhbGVcbiAgICAgICAgICAgIC8vIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBtYy5vbigndGFwU2luZ2xlJywgZXYgPT4ge1xuICAgICAgICAgICAgZGlzcGF0Y2hlcignaW5wdXQnLCB7XG4gICAgICAgICAgICAgICAgeDogZXYuY2VudGVyLngsXG4gICAgICAgICAgICAgICAgeTogZXYuY2VudGVyLnksXG4gICAgICAgICAgICAgICAgdHlwZTogJ3NlY29uZGFyeSdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBtYy5vbigndGFwRG91YmxlJywgZXYgPT4ge1xuICAgICAgICAgICAgZGlzcGF0Y2hlcignaW5wdXQnLCB7XG4gICAgICAgICAgICAgICAgeDogZXYuY2VudGVyLngsXG4gICAgICAgICAgICAgICAgeTogZXYuY2VudGVyLnksXG4gICAgICAgICAgICAgICAgdHlwZTogJ3ByaW1hcnknXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBvbkRlc3Ryb3koKCkgPT4ge1xuICAgICAgICBtYy5kZXN0cm95KCk7XG4gICAgfSk7XG5cbjwvc2NyaXB0PlxuXG48ZGl2XG4gICAgYmluZDp0aGlzPXtjb250YWluZXJ9XG4gICAgY2xhc3M9e19jbGFzc31cbj5cbiAgICA8c2xvdCAvPlxuPC9kaXY+IiwiPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCIgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyLCB0eXBlIEV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcblxuICAgIGV4cG9ydCB0eXBlIENvbnRyb2xsZXJJbnB1dFR5cGUgPSAncHJpbWFyeScgfCAnc2Vjb25kYXJ5JyB8ICdleHRyYSc7XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29udHJvbGxlckRpc3BhdGNoZXIoKTogRXZlbnREaXNwYXRjaGVyPHtcbiAgICAgICAgbW92ZToge1xuICAgICAgICAgICAgeDogbnVtYmVyO1xuICAgICAgICAgICAgeTogbnVtYmVyO1xuICAgICAgICAgICAgZHg6IG51bWJlcjtcbiAgICAgICAgICAgIGR5OiBudW1iZXI7XG4gICAgICAgIH07XG4gICAgICAgIHpvb206IHtcbiAgICAgICAgICAgIHg6IG51bWJlcjtcbiAgICAgICAgICAgIHk6IG51bWJlcjtcbiAgICAgICAgICAgIGFtb3VudFR5cGU6ICdyZWxhdGl2ZScgfCAnYWJzb2x1dGUnO1xuICAgICAgICAgICAgYW1vdW50OiBudW1iZXI7XG4gICAgICAgIH07XG4gICAgICAgIGlucHV0OiB7XG4gICAgICAgICAgICB4OiBudW1iZXI7XG4gICAgICAgICAgICB5OiBudW1iZXI7XG4gICAgICAgICAgICB0eXBlOiBDb250cm9sbGVySW5wdXRUeXBlO1xuICAgICAgICB9O1xuICAgIH0+IHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuICAgIH1cblxuICAgIGV4cG9ydCB0eXBlIElucHV0TWV0aG9kID0gJ21vdXNlJyB8ICdrZXlib2FyZCcgfCAndG91Y2gnO1xuXG48L3NjcmlwdD5cblxuPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgTW91c2VDb250cm9sbGVyIGZyb20gXCIuL01vdXNlQ29udHJvbGxlci5zdmVsdGVcIjtcbiAgICBpbXBvcnQgVG91Y2hDb250cm9sbGVyIGZyb20gXCIuL1RvdWNoQ29udHJvbGxlci5zdmVsdGVcIjtcbiAgICBjb25zdCBkaXNwYXRjaGVyID0gY3JlYXRlQ29udHJvbGxlckRpc3BhdGNoZXIoKTtcblxuICAgIGxldCBfY2xhc3M6IHN0cmluZyA9ICcnO1xuICAgIGV4cG9ydCB7IF9jbGFzcyBhcyBjbGFzcyB9O1xuXG4gICAgZXhwb3J0IGxldCBpbnB1dE1ldGhvZDogSW5wdXRNZXRob2QgPSAnbW91c2UnO1xuXG48L3NjcmlwdD5cblxueyNpZiBpbnB1dE1ldGhvZCA9PSAnbW91c2UnfVxuICAgIDxNb3VzZUNvbnRyb2xsZXJcbiAgICAgICAgY2xhc3M9e19jbGFzc31cbiAgICAgICAgb246bW92ZT17ZXYgPT4gZGlzcGF0Y2hlcignbW92ZScsIGV2LmRldGFpbCl9XG4gICAgICAgIG9uOnpvb209e2V2ID0+IGRpc3BhdGNoZXIoJ3pvb20nLCBldi5kZXRhaWwpfVxuICAgICAgICBvbjppbnB1dD17ZXYgPT4gZGlzcGF0Y2hlcignaW5wdXQnLCBldi5kZXRhaWwpfVxuICAgID5cbiAgICAgICAgPHNsb3QgLz5cbiAgICA8L01vdXNlQ29udHJvbGxlcj5cbns6ZWxzZSBpZiBpbnB1dE1ldGhvZCA9PSAna2V5Ym9hcmQnfVxuICAgIDxzcGFuPktleWJvYXJkIGlucHV0IG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuPC9zcGFuPlxuezplbHNlIGlmIGlucHV0TWV0aG9kID09ICd0b3VjaCd9XG4gICAgPFRvdWNoQ29udHJvbGxlclxuICAgICAgICBjbGFzcz17X2NsYXNzfVxuICAgICAgICBvbjptb3ZlPXtldiA9PiBkaXNwYXRjaGVyKCdtb3ZlJywgZXYuZGV0YWlsKX1cbiAgICAgICAgb246em9vbT17ZXYgPT4gZGlzcGF0Y2hlcignem9vbScsIGV2LmRldGFpbCl9XG4gICAgICAgIG9uOmlucHV0PXtldiA9PiBkaXNwYXRjaGVyKCdpbnB1dCcsIGV2LmRldGFpbCl9XG4gICAgPlxuICAgICAgICA8c2xvdCAvPlxuICAgIDwvVG91Y2hDb250cm9sbGVyPlxuezplbHNlfVxuICAgIDxzcGFuPlVuc3VwcG9ydGVkIGlucHV0IG1ldGhvZC48L3NwYW4+XG57L2lmfVxuIiwiXG5pbXBvcnQgdHlwZSB7IElucHV0TWV0aG9kIH0gZnJvbSBcIiRjb21wb25lbnRzL2NvbnRyb2xsZXIvQ29udHJvbGxlci5zdmVsdGVcIjtcbmltcG9ydCB0eXBlIHsgSW52YWxpZGF0b3IsIFN1YnNjcmliZXIsIFVuc3Vic2NyaWJlciwgVXBkYXRlciwgV3JpdGFibGUgfSBmcm9tIFwic3ZlbHRlL3N0b3JlXCI7XG5cblxuXG4vLyBUYWtlbiBmcm9tIHN2ZWx0ZSBpbnRlcm5hbCB1dGlscy5cbmZ1bmN0aW9uIHNhdmVfbm90X2VxdWFsKGE6IGFueSwgYjogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGEgIT0gYSA/IGIgPT0gYiA6IGEgIT09IGIgfHwgKGEgJiYgdHlwZW9mIGEgPT09ICdvYmplY3QnKSB8fCB0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuXG5cbmNsYXNzIExvY2FsU3RvcmFnZVdyaXRhYmxlPFQ+IGltcGxlbWVudHMgV3JpdGFibGU8VD4ge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc2xvdDogc3RyaW5nO1xuICAgIHByaXZhdGUgcmVhZG9ubHkga2V5OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSB2YWx1ZT86IFQ7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3Ioc2xvdDogc3RyaW5nLCBrZXk6IHN0cmluZywgX2RlZmF1bHQ6IFQpIHtcbiAgICAgICAgdGhpcy5zbG90ID0gc2xvdDtcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG5cbiAgICAgICAgdGhpcy5sb2FkKCk7XG4gICAgICAgIGlmKHRoaXMudmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IF9kZWZhdWx0O1xuICAgICAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldE9iaigpOiB7W2tleTogc3RyaW5nXTogYW55fSB7XG4gICAgICAgIGxldCBpdGVtID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5zbG90KTtcbiAgICAgICAgaWYoaXRlbSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5zbG90LCAne30nKTtcbiAgICAgICAgICAgIGl0ZW0gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLnNsb3QpITtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShpdGVtKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNhdmUoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHRoaXMuZ2V0T2JqKCk7XG4gICAgICAgIG9ialt0aGlzLmtleV0gPSB0aGlzLnZhbHVlO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLnNsb3QsIEpTT04uc3RyaW5naWZ5KG9iaikpO1xuICAgICAgICBjb25zb2xlLmRlYnVnKGBMb2NhbFN0b3JhZ2VXcml0YWJsZTogU2F2ZWQgdG8gJHt0aGlzLnNsb3R9Wycke3RoaXMua2V5fSddID0gJHt0aGlzLnZhbHVlfWApO1xuICAgIH1cblxuICAgIHByaXZhdGUgbG9hZCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgb2JqID0gdGhpcy5nZXRPYmooKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9ICh0aGlzLmtleSBpbiBvYmopID8gb2JqW3RoaXMua2V5XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhgTG9jYWxTdG9yYWdlV3JpdGFibGU6IExvYWRlZCBmcm9tICR7dGhpcy5zbG90fVsnJHt0aGlzLmtleX0nXSA9ICR7dGhpcy52YWx1ZX1gKTtcbiAgICB9XG5cblxuXG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zOiBTZXQ8WyBTdWJzY3JpYmVyPFQ+LCBJbnZhbGlkYXRvcjxUPiBdPiA9IG5ldyBTZXQoKTtcblxuICAgIHB1YmxpYyBzZXQodmFsdWU6IFQpOiB2b2lkIHtcbiAgICAgICAgaWYoc2F2ZV9ub3RfZXF1YWwodGhpcy52YWx1ZSwgdmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHN1YnNjcmlwdGlvbiA9PiBzdWJzY3JpcHRpb25bMF0odGhpcy52YWx1ZSEpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGUodXBkYXRlcjogVXBkYXRlcjxUPik6IHZvaWQge1xuICAgICAgICBpZih0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnNldCh1cGRhdGVyKHRoaXMudmFsdWUpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRPRE86IElzIHRoZXJlIGFueXRoaW5nIHJlcXVpcmVkIHRvIGRvIHdpdGggdGhlIEludmFsaWRhdG9yP1xuICAgIHB1YmxpYyBzdWJzY3JpYmUocnVuOiBTdWJzY3JpYmVyPFQ+LCBpbnZhbGlkYXRlOiBJbnZhbGlkYXRvcjxUPiA9ICgpID0+IHt9KTogVW5zdWJzY3JpYmVyIHtcbiAgICAgICAgY29uc3Qgc3Vic2NyaWJlcjogWyBTdWJzY3JpYmVyPFQ+LCBJbnZhbGlkYXRvcjxUPiBdID0gWyBydW4sIGludmFsaWRhdGUgXTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmFkZChzdWJzY3JpYmVyKTtcblxuICAgICAgICBpZih0aGlzLnZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJ1bih0aGlzLnZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZGVsZXRlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cblxuZXhwb3J0IGNvbnN0IGF1dG9EaXNwbGF5SW5mbyA9IG5ldyBMb2NhbFN0b3JhZ2VXcml0YWJsZSgnc2V0dGluZ3MnLCAnYXV0b0Rpc3BsYXlJbmZvJywgdHJ1ZSk7XG5leHBvcnQgY29uc3Qgdm9sdW1lID0gbmV3IExvY2FsU3RvcmFnZVdyaXRhYmxlKCdzZXR0aW5ncycsICd2b2x1bWUnLCAwLjI1KTtcbmV4cG9ydCBjb25zdCBpbnB1dE1ldGhvZCA9IG5ldyBMb2NhbFN0b3JhZ2VXcml0YWJsZTxJbnB1dE1ldGhvZD4oJ3NldHRpbmdzJywgJ2lucHV0TWV0aG9kJywgJ21vdXNlJyk7XG5cblxuIiwiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyByZXNpemUgfSBmcm9tIFwiJGxpYi9hY3Rpb25zL1Jlc2l6ZVwiO1xuICAgIGltcG9ydCB7IFdvcmxkUmVuZGVyZXIgfSBmcm9tIFwiJGxpYi9nYW1lL1dvcmxkUmVuZGVyZXJcIjtcbiAgICBpbXBvcnQgeyBWaWV3cG9ydCB9IGZyb20gXCIkbGliL2dhbWUvVmlld3BvcnRcIjtcbiAgICBpbXBvcnQgdHlwZSB7IFdvcmxkIH0gZnJvbSBcIiRsaWIvZ2FtZS9Xb3JsZFwiO1xuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciwgb25EZXN0cm95LCBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGltcG9ydCB7IFBhcnRpY2xlUmVuZGVyZXIgfSBmcm9tIFwiJGxpYi9nYW1lL1BhcnRpY2xlUmVuZGVyZXJcIjtcbiAgICBpbXBvcnQgdHlwZSB7IFRoZW1lIH0gZnJvbSBcIiRsaWIvZ2FtZS90aGVtZS9UaGVtZVwiO1xuICAgIGltcG9ydCBDb250cm9sbGVyIGZyb20gXCIuL2NvbnRyb2xsZXIvQ29udHJvbGxlci5zdmVsdGVcIjtcbiAgICBpbXBvcnQgdHlwZSB7IEV2ZW50TGlzdGVuZXIgfSBmcm9tIFwiJGxpYi9FdmVudERpc3BhdGNoZXJcIjtcbiAgICBpbXBvcnQgeyBpbnB1dE1ldGhvZCB9IGZyb20gXCIuLi9zdG9yZVwiO1xuICAgIGltcG9ydCB0eXBlIHsgVW5zdWJzY3JpYmVyIH0gZnJvbSBcInN2ZWx0ZS9zdG9yZVwiO1xuICAgIGNvbnN0IGRpc3BhdGNoZXIgPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICAgIGxldCBjb250YWluZXI6IEhUTUxEaXZFbGVtZW50O1xuXG4gICAgZXhwb3J0IGxldCB3b3JsZDogV29ybGQ7XG4gICAgZXhwb3J0IGxldCB0aGVtZTogVGhlbWU7XG5cbiAgICBleHBvcnQgbGV0IHZpZXdwb3J0OiBWaWV3cG9ydDtcblxuICAgIC8vIFdlIHNlcGFyYXRlIHdvcmxkICYgcGFydGljbGVzIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UsIG5vdCBuZWVkaW5nIHRvIHJlbmRlciBib3RoIGF0IHRoZSBzYW1lIHRpbWUuXG4gICAgbGV0IHdvcmxkUmVuZGVyZXI6IFdvcmxkUmVuZGVyZXI7XG4gICAgbGV0IHdvcmxkQ2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgICBjb25zdCBpbml0V29ybGRSZW5kZXJlciA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgd29ybGRSZW5kZXJlcj8uZGVzdHJveSgpO1xuICAgICAgICBpZighd29ybGRDYW52YXMpIHJldHVybjtcbiAgICAgICAgd29ybGRSZW5kZXJlciA9IG5ldyBXb3JsZFJlbmRlcmVyKHdvcmxkLCB0aGVtZSwgd29ybGRDYW52YXMsIHZpZXdwb3J0KTtcbiAgICAgICAgYXdhaXQgd29ybGRSZW5kZXJlci5pbml0KCk7XG4gICAgICAgIHdvcmxkQ2FudmFzLndpZHRoID0gY29udGFpbmVyLmNsaWVudFdpZHRoO1xuICAgICAgICB3b3JsZENhbnZhcy5oZWlnaHQgPSBjb250YWluZXIuY2xpZW50SGVpZ2h0O1xuICAgICAgICB3b3JsZE5lZWRzUmVyZW5kZXIgPSB0cnVlO1xuICAgICAgICByZW5kZXIoKTtcbiAgICB9XG5cbiAgICBsZXQgcGFydGljbGVSZW5kZXJlcjogUGFydGljbGVSZW5kZXJlcjtcbiAgICBsZXQgcGFydGljbGVDYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuICAgIGNvbnN0IGluaXRQYXJ0aWNsZVJlbmRlcmVyID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBwYXJ0aWNsZVJlbmRlcmVyPy5kZXN0cm95KCk7XG4gICAgICAgIGlmKCFwYXJ0aWNsZUNhbnZhcykgcmV0dXJuO1xuICAgICAgICBwYXJ0aWNsZVJlbmRlcmVyID0gbmV3IFBhcnRpY2xlUmVuZGVyZXIod29ybGQsIHRoZW1lLCBwYXJ0aWNsZUNhbnZhcywgdmlld3BvcnQpO1xuICAgICAgICBhd2FpdCBwYXJ0aWNsZVJlbmRlcmVyLmluaXQoKTtcbiAgICAgICAgcGFydGljbGVDYW52YXMud2lkdGggPSBjb250YWluZXIuY2xpZW50V2lkdGg7XG4gICAgICAgIHBhcnRpY2xlQ2FudmFzLmhlaWdodCA9IGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG4gICAgfVxuXG4gICAgbGV0IHdvcmxkTmVlZHNSZXJlbmRlcjogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGxldCBhbmltRnJhbWU6IG51bWJlciA9IC0xO1xuICAgIGNvbnN0IHJlbmRlciA9ICgpID0+IHtcbiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbUZyYW1lKTtcbiAgICAgICAgYW5pbUZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gICAgICAgIGlmKHdvcmxkTmVlZHNSZXJlbmRlcikge1xuICAgICAgICAgICAgd29ybGROZWVkc1JlcmVuZGVyID0gZmFsc2U7XG4gICAgICAgICAgICB3b3JsZFJlbmRlcmVyPy5yZW5kZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0aWNsZVJlbmRlcmVyPy5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICBsZXQgd29ybGRMaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcjtcbiAgICBsZXQgdmlld3BvcnRMaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcjtcbiAgICBsZXQgaW5wdXRNZXRob2RMaXN0ZW5lcjogVW5zdWJzY3JpYmVyO1xuXG4gICAgb25Nb3VudChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IGluaXRXb3JsZFJlbmRlcmVyKCk7XG4gICAgICAgIGF3YWl0IGluaXRQYXJ0aWNsZVJlbmRlcmVyKCk7XG5cbiAgICAgICAgd29ybGRMaXN0ZW5lciA9IHdvcmxkLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIHdvcmxkTmVlZHNSZXJlbmRlciA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICB2aWV3cG9ydExpc3RlbmVyID0gdmlld3BvcnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgd29ybGROZWVkc1JlcmVuZGVyID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlucHV0TWV0aG9kTGlzdGVuZXIgPSBpbnB1dE1ldGhvZC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgLy8gPz8/IFdoeSBuZWVkIHRvIHdhaXQgaGVyZT9cbiAgICAgICAgICAgIHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IGluaXRXb3JsZFJlbmRlcmVyKCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgaW5pdFBhcnRpY2xlUmVuZGVyZXIoKTtcbiAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgb25EZXN0cm95KCgpID0+IHtcbiAgICAgICAgd29ybGRSZW5kZXJlcj8uZGVzdHJveSgpO1xuICAgICAgICBwYXJ0aWNsZVJlbmRlcmVyPy5kZXN0cm95KCk7XG4gICAgICAgIHdvcmxkLnJlbW92ZUV2ZW50TGlzdGVuZXIod29ybGRMaXN0ZW5lcik7XG4gICAgICAgIHZpZXdwb3J0LnJlbW92ZUV2ZW50TGlzdGVuZXIodmlld3BvcnRMaXN0ZW5lcik7XG4gICAgICAgIGlucHV0TWV0aG9kTGlzdGVuZXIoKTtcbiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbUZyYW1lKTtcbiAgICB9KTtcblxuPC9zY3JpcHQ+XG5cbjxkaXZcbiAgICBiaW5kOnRoaXM9e2NvbnRhaW5lcn1cbiAgICBjbGFzcz1cInctZnVsbCBoLWZ1bGwgY3Vyc29yLXBvaW50ZXJcIlxuICAgIHVzZTpyZXNpemU9eyh3aWR0aCwgaGVpZ2h0KSA9PiB7XG4gICAgICAgIHdvcmxkQ2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHdvcmxkQ2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgcGFydGljbGVDYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgcGFydGljbGVDYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB2aWV3cG9ydC5jaGFuZ2UoKTtcbiAgICAgICAgcmVuZGVyKCk7XG4gICAgfX1cbj5cbiAgICA8Q29udHJvbGxlclxuICAgICAgICBjbGFzcz1cInctZnVsbCBoLWZ1bGwgZm9yY2Utb3ZlcmxhcFwiXG4gICAgICAgIGlucHV0TWV0aG9kPXskaW5wdXRNZXRob2R9XG4gICAgICAgIG9uOm1vdmU9e2V2ID0+IHtcbiAgICAgICAgICAgIHZpZXdwb3J0LnRyYW5zbGF0ZSh3b3JsZENhbnZhcywgZXYuZGV0YWlsLmR4LCBldi5kZXRhaWwuZHkpO1xuICAgICAgICAgICAgdmlld3BvcnQuY2hhbmdlKCk7XG4gICAgICAgIH19XG4gICAgICAgIG9uOnpvb209e2V2ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1NjYWxlID0gZXYuZGV0YWlsLmFtb3VudFR5cGUgPT0gJ3JlbGF0aXZlJyA/ICh2aWV3cG9ydC5zY2FsZSAqIGV2LmRldGFpbC5hbW91bnQpIDogKHZpZXdwb3J0LnNjYWxlICsgKGV2LmRldGFpbC5hbW91bnQgLSAxKSk7XG4gICAgICAgICAgICBjb25zdCBjbGFtcGVkU2NhbGUgPSB2aWV3cG9ydC5jbGFtcFNjYWxlKHdvcmxkQ2FudmFzLCBuZXdTY2FsZSwgNCwgNDgpO1xuICAgICAgICAgICAgdmlld3BvcnQuc2NhbGVGcm9tKHdvcmxkQ2FudmFzLCBjbGFtcGVkU2NhbGUsIGV2LmRldGFpbC54LCBldi5kZXRhaWwueSk7XG4gICAgICAgICAgICB2aWV3cG9ydC5jaGFuZ2UoKTtcbiAgICAgICAgfX1cbiAgICAgICAgb246aW5wdXQ9e2V2ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBvcyA9IHZpZXdwb3J0LmNhbnZhc1Bvcyh3b3JsZENhbnZhcywgZXYuZGV0YWlsLngsIGV2LmRldGFpbC55LCB0cnVlKTtcbiAgICAgICAgICAgIHN3aXRjaChldi5kZXRhaWwudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3ByaW1hcnknOiBkaXNwYXRjaGVyKCdhY3Rpb24nLCB7IHR5cGU6ICdyZXZlYWwnLCBwb3MgfSk7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NlY29uZGFyeSc6IGRpc3BhdGNoZXIoJ2FjdGlvbicsIHsgdHlwZTogJ2ZsYWcnLCBwb3MgfSk7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2V4dHJhJzogZGlzcGF0Y2hlcignYWN0aW9uJywgeyB0eXBlOiAncmVzZXQnLCBwb3MgfSk7IGJyZWFrO1xuICAgICAgICAgICAgICAgIC8vIGNhc2UgJ2V4dHJhJzoge1xuICAgICAgICAgICAgICAgIC8vICAgICB2aWV3cG9ydC5zY2FsZSA9IE1hdGgucG93KDIsIE1hdGguY2VpbChNYXRoLmxvZyh2aWV3cG9ydC5zY2FsZSkgLyBNYXRoLmxvZygyKSkpO1xuICAgICAgICAgICAgICAgIC8vICAgICB2aWV3cG9ydC5jaGFuZ2UoKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgYnJlYWs7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdvcmxkLmNoYW5nZSgpO1xuICAgICAgICB9fVxuICAgID5cbiAgICAgICAgPGNhbnZhcyBiaW5kOnRoaXM9e3dvcmxkQ2FudmFzfSAvPlxuICAgICAgICA8Y2FudmFzIGJpbmQ6dGhpcz17cGFydGljbGVDYW52YXN9IC8+XG4gICAgPC9Db250cm9sbGVyPlxuPC9kaXY+XG4iLCJcbmltcG9ydCB7IGF3YWl0SW1hZ2VMb2FkLCBjcmVhdGVDYW52YXMyZENvbnRleHQgfSBmcm9tIFwiLi9VdGlsXCI7XG5cblxuXG5leHBvcnQgY2xhc3MgVGV4dHVyZUF0bGFzPFRleHR1cmVzIGV4dGVuZHMge1xuICAgIFtrZXk6IHN0cmluZ106IFsgbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyIF07XG59PiB7XG4gICAgcHVibGljIHJlYWRvbmx5IHRleHR1cmVzOiBUZXh0dXJlcztcblxuICAgIHB1YmxpYyByZWFkb25seSBpbWc6IEhUTUxJbWFnZUVsZW1lbnQgfCBIVE1MQ2FudmFzRWxlbWVudDtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihzcmM6IHN0cmluZywgdGV4dHVyZXM6IFRleHR1cmVzKTtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoaW1nOiBIVE1MSW1hZ2VFbGVtZW50IHwgSFRNTENhbnZhc0VsZW1lbnQsIHRleHR1cmVzOiBUZXh0dXJlcyk7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHNyY09ySW1nOiBzdHJpbmcgfCBIVE1MSW1hZ2VFbGVtZW50IHwgSFRNTENhbnZhc0VsZW1lbnQsIHRleHR1cmVzOiBUZXh0dXJlcykge1xuICAgICAgICBpZih0eXBlb2Ygc3JjT3JJbWcgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMuaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgICAgICAgICB0aGlzLmltZy5sb2FkaW5nID0gJ2VhZ2VyJztcbiAgICAgICAgICAgIHRoaXMuaW1nLnNyYyA9IHNyY09ySW1nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbWcgPSBzcmNPckltZztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRleHR1cmVzID0gdGV4dHVyZXM7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGF3YWl0TG9hZCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYoISh0aGlzLmltZyBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50KSkge1xuICAgICAgICAgICAgYXdhaXQgYXdhaXRJbWFnZUxvYWQodGhpcy5pbWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIG9uTG9hZChjYWxsYmFja2ZuOiAoYXRsYXM6IFRleHR1cmVBdGxhczxUZXh0dXJlcz4pID0+IHZvaWQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hd2FpdExvYWQoKS50aGVuKCgpID0+IGNhbGxiYWNrZm4odGhpcykpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkcmF3KGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB0ZXh0dXJlOiBrZXlvZiBUZXh0dXJlcywgeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IFsgc3gsIHN5LCBzdywgc2ggXSA9IHRoaXMudGV4dHVyZXNbdGV4dHVyZV07XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5pbWcsIHN4LCBzeSwgc3csIHNoLCB4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG5cblxuXG4gICAgcHVibGljIHRvSW1hZ2VEYXRhQXRsYXMoKTogVGV4dHVyZUF0bGFzSW1hZ2VEYXRhPHtcbiAgICAgICAgW2tleSBpbiBrZXlvZiBUZXh0dXJlc106IEltYWdlRGF0YTtcbiAgICB9PiB7XG4gICAgICAgIGNvbnN0IFsgY2FudmFzLCBjdHggXSA9IHRoaXMuaW1nIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQgP1xuICAgICAgICAgICAgY3JlYXRlQ2FudmFzMmRDb250ZXh0KHRoaXMuaW1nLCB0cnVlLCB7IHdpbGxSZWFkRnJlcXVlbnRseTogZmFsc2UgfSkgOlxuICAgICAgICAgICAgY3JlYXRlQ2FudmFzMmRDb250ZXh0KHRoaXMuaW1nLCB7IHdpbGxSZWFkRnJlcXVlbnRseTogZmFsc2UgfSk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0dXJlQXRsYXNJbWFnZURhdGEoXG4gICAgICAgICAgICBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXModGhpcy50ZXh0dXJlcykubWFwKChbIG5hbWUsIFsgeCwgeSwgd2lkdGgsIGhlaWdodCBdIF0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWyBuYW1lLCBjdHguZ2V0SW1hZ2VEYXRhKHgsIHksIHdpZHRoLCBoZWlnaHQpIF07XG4gICAgICAgICAgICB9KSkgYXMge1xuICAgICAgICAgICAgICAgIFtrZXkgaW4ga2V5b2YgVGV4dHVyZXNdOiBJbWFnZURhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG59XG5cblxuXG5leHBvcnQgY2xhc3MgVGV4dHVyZUF0bGFzSW1hZ2VEYXRhPFRleHR1cmVzIGV4dGVuZHMge1xuICAgIFtrZXk6IHN0cmluZ106IEltYWdlRGF0YTtcbn0+IHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgdGV4dHVyZXM6IFRleHR1cmVzO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHRleHR1cmVzOiBUZXh0dXJlcykge1xuICAgICAgICB0aGlzLnRleHR1cmVzID0gdGV4dHVyZXM7XG4gICAgfVxuXG4gICAgcHVibGljIHRvSW1hZ2VBdGxhcyhwYWQ6IGJvb2xlYW4gPSB0cnVlKTogVGV4dHVyZUF0bGFzPHtcbiAgICAgICAgW2tleSBpbiBrZXlvZiBUZXh0dXJlc106IFsgbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyIF07XG4gICAgfT4ge1xuICAgICAgICAvLyBUT0RPOiBBY3R1YWwgcGFja2luZy5cbiAgICAgICAgbGV0IGF0bGFzV2lkdGg6IG51bWJlciA9IDA7XG4gICAgICAgIGxldCBhdGxhc0hlaWdodDogbnVtYmVyID0gMDtcbiAgICAgICAgbGV0IHJlY3RzOiB7W2tleSBpbiBrZXlvZiBUZXh0dXJlc10/OiB7IHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgbmFtZToga2V5b2YgVGV4dHVyZXMgfX0gPSB7fTtcblxuICAgICAgICBsZXQgeDogbnVtYmVyID0gMDtcbiAgICAgICAgZm9yKGNvbnN0IG5hbWUgaW4gdGhpcy50ZXh0dXJlcykge1xuICAgICAgICAgICAgY29uc3QgaW1nID0gdGhpcy50ZXh0dXJlc1tuYW1lXTtcblxuICAgICAgICAgICAgaWYocGFkKSB4Kys7XG5cbiAgICAgICAgICAgIHJlY3RzW25hbWVdID0ge1xuICAgICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgICAgeTogKHBhZCA/IDEgOiAwKSxcbiAgICAgICAgICAgICAgICB3aWR0aDogaW1nLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaW1nLmhlaWdodCxcbiAgICAgICAgICAgICAgICBuYW1lXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB4ICs9IGltZy53aWR0aCArIChwYWQgPyAxIDogMCk7XG4gICAgICAgICAgICBhdGxhc1dpZHRoID0geDtcbiAgICAgICAgICAgIGF0bGFzSGVpZ2h0ID0gTWF0aC5tYXgoYXRsYXNIZWlnaHQsIGltZy5oZWlnaHQgKyAocGFkID8gMiA6IDApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRvIGltYWdlXG4gICAgICAgIGNvbnN0IFsgY2FudmFzLCBjdHggXSA9IGNyZWF0ZUNhbnZhczJkQ29udGV4dChhdGxhc1dpZHRoLCBhdGxhc0hlaWdodCk7XG4gICAgICAgIGZvcihjb25zdCBuYW1lIGluIHJlY3RzKSB7XG4gICAgICAgICAgICBjb25zdCByZWN0ID0gcmVjdHNbbmFtZV0hO1xuICAgICAgICAgICAgY3R4LnB1dEltYWdlRGF0YSh0aGlzLnRleHR1cmVzW25hbWVdLCByZWN0LngsIHJlY3QueSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0dXJlQXRsYXMoY2FudmFzLCBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMocmVjdHMpLm1hcCgoWyBuYW1lLCByZWN0IF0pID0+IHtcbiAgICAgICAgICAgIHJlY3QgPSByZWN0ITtcbiAgICAgICAgICAgIHJldHVybiBbIG5hbWUsIFsgcmVjdC54LCByZWN0LnksIHJlY3Qud2lkdGgsIHJlY3QuaGVpZ2h0IF0gXTtcbiAgICAgICAgfSkpIGFzIHtcbiAgICAgICAgICAgIFtrZXkgaW4ga2V5b2YgVGV4dHVyZXNdOiBbIG51bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlciBdO1xuICAgICAgICB9KTtcbiAgICB9XG5cbn1cblxuXG4iLCJcbmltcG9ydCB7IGNsYW1wTm9ybWFsIH0gZnJvbSBcIiRsaWIvVXRpbFwiO1xuaW1wb3J0IHR5cGUgeyBWYWxpZFBhcnRpY2xlIH0gZnJvbSBcIi4uL3BhcnRpY2xlL1BhcnRpY2xlXCI7XG5pbXBvcnQgdHlwZSB7IFZhbGlkVGlsZSB9IGZyb20gXCIuLi90aWxlL1RpbGVcIjtcblxuXG5cbmV4cG9ydCB0eXBlIFNvdW5kRWZmZWN0ID0gJ3JldmVhbCcgfCAndW5mbGFnJyB8ICdleHBsb3Npb24nO1xuXG5cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRoZW1lIHtcbiAgICBwdWJsaWMgYWJzdHJhY3QgaW5pdCgpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHB1YmxpYyBhYnN0cmFjdCBkcmF3VGlsZShjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgdGlsZTogVmFsaWRUaWxlKTogdm9pZDtcbiAgICBwdWJsaWMgYWJzdHJhY3QgZHJhd1BhcnRpY2xlKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBwYXJ0aWNsZTogVmFsaWRQYXJ0aWNsZSk6IHZvaWQ7XG4gICAgcHVibGljIGFic3RyYWN0IGRyYXdEZWF0aEljb24oY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHRpbGVYOiBudW1iZXIsIHRpbGVZOiBudW1iZXIpOiB2b2lkO1xuXG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IHNvdW5kRWZmZWN0czoge1trZXkgaW4gU291bmRFZmZlY3RdOiB7IHNyYzogc3RyaW5nLCB2YXJpYXRpb246IG51bWJlciB9fTtcbiAgICBwdWJsaWMgdm9sdW1lOiBudW1iZXIgPSAxO1xuXG4gICAgcHVibGljIHBsYXlTb3VuZChzb3VuZDogU291bmRFZmZlY3QsIHZvbHVtZTogbnVtYmVyID0gMSk6IHZvaWQge1xuICAgICAgICBjb25zdCBzb3VuZEVmZmVjdCA9IHRoaXMuc291bmRFZmZlY3RzW3NvdW5kXTtcblxuICAgICAgICBjb25zdCBmaW5hbFZvbHVtZSA9IGNsYW1wTm9ybWFsKHZvbHVtZSAqIHRoaXMudm9sdW1lKTtcbiAgICAgICAgaWYoZmluYWxWb2x1bWUgPD0gMCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGF1ZGlvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcbiAgICAgICAgYXVkaW8uc3JjID0gc291bmRFZmZlY3Quc3JjO1xuICAgICAgICBhdWRpby52b2x1bWUgPSBmaW5hbFZvbHVtZTtcbiAgICAgICAgLy8gVE9ETzogVXNlIEF1ZGlvQ3R4IGZvciBtb3JlIHNvdW5kIGVmZmVjdCB2YXJpYXRpb24gb3B0aW9ucy5cbiAgICAgICAgYXVkaW8ucGxheWJhY2tSYXRlID0gMSArIE1hdGgucmFuZG9tKCkgKiBzb3VuZEVmZmVjdC52YXJpYXRpb247XG4gICAgICAgIGF1ZGlvLnByZXNlcnZlc1BpdGNoID0gZmFsc2U7XG5cbiAgICAgICAgY29uc3Qgb25FbmRlZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGF1ZGlvLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgb25FbmRlZCk7XG4gICAgICAgICAgICBhdWRpby5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgb25FbmRlZCk7XG5cbiAgICAgICAgYXVkaW8ucGxheSgpO1xuICAgIH1cbn1cblxuXG4iLCJcbmltcG9ydCB7IFRleHR1cmVBdGxhcyB9IGZyb20gXCIuLi8uLi9BdGxhc1wiO1xuaW1wb3J0IHR5cGUgeyBWYWxpZFBhcnRpY2xlIH0gZnJvbSBcIi4uL3BhcnRpY2xlL1BhcnRpY2xlXCI7XG5pbXBvcnQgdHlwZSB7IE11bHRpTWluZVRpbGUgfSBmcm9tIFwiLi4vdGlsZS9NdWx0aU1pbmVcIjtcbmltcG9ydCB7IFNpbmdsZU1pbmVUaWxlU3RhdGUsIHR5cGUgU2luZ2xlTWluZVRpbGUgfSBmcm9tIFwiLi4vdGlsZS9TaW5nbGVNaW5lXCI7XG5pbXBvcnQgdHlwZSB7IFN0cmF3YmVycnlUaWxlIH0gZnJvbSBcIi4uL3RpbGUvYmlvbWUvU3RyYXdiZXJyeVwiO1xuaW1wb3J0IHsgVElMRV9OT05FX05FQVJCWSwgdHlwZSBWYWxpZFRpbGUgfSBmcm9tIFwiLi4vdGlsZS9UaWxlXCI7XG5pbXBvcnQgeyBUaGVtZSwgdHlwZSBTb3VuZEVmZmVjdCB9IGZyb20gXCIuL1RoZW1lXCI7XG5pbXBvcnQgeyBTaW5nbGVBbnRpTWluZVRpbGVTdGF0ZSwgdHlwZSBTaW5nbGVBbnRpTWluZVRpbGUgfSBmcm9tIFwiLi4vdGlsZS9TaW5nbGVBbnRpTWluZVwiO1xuXG5cblxuLy8gVE9ETzogQ2xlYW4gdGhpcyB3aG9sZSB0aGluZyB1cCFcblxuXG5cbmV4cG9ydCBjbGFzcyBUaGVtZVJldHJvIGV4dGVuZHMgVGhlbWUge1xuXG4gICAgcHJpdmF0ZSB0aWxlc2V0ID0gbmV3IFRleHR1cmVBdGxhcygnL2luZmluaXRlLW1pbmVzd2VlcGVyL3JldHJvL3RpbGVzZXQucG5nJywge1xuICAgICAgICBudWxsOiBbIDAsIDAsIDE2LCAxNiBdLFxuICAgICAgICBza3VsbDogWyAwLCAxNiwgMTYsIDE2IF0sXG4gICAgICAgIGJvbWI6IFsgMTYsIDAsIDE2LCAxNiBdLFxuICAgICAgICBleHBsb3Npb24xOiBbIDE2LCAxNiwgMTYsIDE2IF0sXG4gICAgICAgIGV4cGxvc2lvbjI6IFsgMTYsIDMyLCAxNiwgMTYgXSxcbiAgICAgICAgZXhwbG9zaW9uMzogWyAxNiwgNDgsIDE2LCAxNiBdLFxuICAgICAgICBleHBsb3Npb240OiBbIDE2LCA2NCwgMTYsIDE2IF0sXG4gICAgICAgIGZsYWc6IFsgMzIsIDE2LCAxNiwgMTYgXSxcbiAgICAgICAgZmxhZ18xOiBbIDMyLCA0OCwgMTYsIDE2IF0sXG4gICAgICAgIGZsYWdfMjogWyAzMiwgNjQsIDE2LCAxNiBdLFxuICAgICAgICBmbGFnXzM6IFsgMzIsIDgwLCAxNiwgMTYgXSxcbiAgICAgICAgZmxhZ19hbnRpOiBbIDMyLCAzMiwgMTYsIDE2IF0sXG4gICAgICAgIGZsYWdfYW50aV8xOiBbIDMyLCA5NiwgMTYsIDE2IF0sXG4gICAgICAgIGZsYWdfYW50aV8yOiBbIDMyLCAxMTIsIDE2LCAxNiBdLFxuICAgICAgICBmbGFnX2FudGlfMzogWyAzMiwgMTI4LCAxNiwgMTYgXSxcbiAgICAgICAgbnVtYmVyXzA6IFsgNDgsIDAsIDE2LCAxNiBdLFxuICAgICAgICBudW1iZXJfMTogWyA0OCwgMTYsIDE2LCAxNiBdLFxuICAgICAgICBudW1iZXJfMjogWyA0OCwgMzIsIDE2LCAxNiBdLFxuICAgICAgICBudW1iZXJfMzogWyA0OCwgNDgsIDE2LCAxNiBdLFxuICAgICAgICBudW1iZXJfNDogWyA0OCwgNjQsIDE2LCAxNiBdLFxuICAgICAgICBudW1iZXJfNTogWyA0OCwgODAsIDE2LCAxNiBdLFxuICAgICAgICBudW1iZXJfNjogWyA0OCwgOTYsIDE2LCAxNiBdLFxuICAgICAgICBudW1iZXJfNzogWyA0OCwgMTEyLCAxNiwgMTYgXSxcbiAgICAgICAgbnVtYmVyXzg6IFsgNDgsIDEyOCwgMTYsIDE2IF0sXG4gICAgICAgIG51bWJlcl85OiBbIDQ4LCAxNDQsIDE2LCAxNiBdLFxuICAgICAgICBudW1iZXJfMTA6IFsgNDgsIDE2MCwgMTYsIDE2IF0sXG4gICAgICAgIG51bWJlcl8xMTogWyA0OCwgMTc2LCAxNiwgMTYgXSxcbiAgICAgICAgbnVtYmVyXzEyOiBbIDQ4LCAxOTIsIDE2LCAxNiBdLFxuICAgICAgICBudW1iZXJfMTM6IFsgNDgsIDIwOCwgMTYsIDE2IF0sXG4gICAgICAgIG51bWJlcl8xNDogWyA0OCwgMjI0LCAxNiwgMTYgXSxcbiAgICAgICAgbnVtYmVyXzE1OiBbIDQ4LCAyNDAsIDE2LCAxNiBdLFxuICAgICAgICBudW1iZXJfMTY6IFsgNDgsIDI1NiwgMTYsIDE2IF0sXG4gICAgICAgIG51bWJlcl8xNzogWyA0OCwgMjcyLCAxNiwgMTYgXSxcbiAgICAgICAgbnVtYmVyXzE4OiBbIDQ4LCAyODgsIDE2LCAxNiBdLFxuICAgICAgICBudW1iZXJfMTk6IFsgNDgsIDMwNCwgMTYsIDE2IF0sXG4gICAgICAgIG51bWJlcl8yMDogWyA0OCwgMzIwLCAxNiwgMTYgXSxcbiAgICAgICAgbnVtYmVyXzIxOiBbIDQ4LCAzMzYsIDE2LCAxNiBdLFxuICAgICAgICBudW1iZXJfMjI6IFsgNDgsIDM1MiwgMTYsIDE2IF0sXG4gICAgICAgIG51bWJlcl8yMzogWyA0OCwgMzY4LCAxNiwgMTYgXSxcbiAgICAgICAgbnVtYmVyXzI0OiBbIDQ4LCAzODQsIDE2LCAxNiBdLFxuICAgICAgICBudW1iZXJfbmVnYXRpdmVfc2lnbjogWyA5NiwgOTYsIDE2LCAxNiBdLFxuICAgICAgICB0aWxlX3ZhbmlsbGFfY292ZXJlZDogWyA2NCwgMCwgMTYsIDE2IF0sXG4gICAgICAgIHRpbGVfdmFuaWxsYV9yZXZlYWxlZDogWyA4MCwgMCwgMTYsIDE2IF0sXG4gICAgICAgIHRpbGVfY2hvY29sYXRlX2NvdmVyZWQ6IFsgNjQsIDE2LCAxNiwgMTYgXSxcbiAgICAgICAgdGlsZV9jaG9jb2xhdGVfcmV2ZWFsZWQ6IFsgODAsIDE2LCAxNiwgMTYgXSxcbiAgICAgICAgdGlsZV93YWZmbGVfbGlnaHRfY292ZXJlZDogWyA2NCwgMzIsIDE2LCAxNiBdLFxuICAgICAgICB0aWxlX3dhZmZsZV9saWdodF9yZXZlYWxlZDogWyA4MCwgMzIsIDE2LCAxNiBdLFxuICAgICAgICB0aWxlX3dhZmZsZV9kYXJrX2NvdmVyZWQ6IFsgOTYsIDMyLCAxNiwgMTYgXSxcbiAgICAgICAgdGlsZV93YWZmbGVfZGFya19yZXZlYWxlZDogWyAxMTIsIDMyLCAxNiwgMTYgXSxcbiAgICAgICAgdGlsZV9zdHJvb3B3YWZlbF9saWdodF9jb3ZlcmVkOiBbIDY0LCA0OCwgMTYsIDE2IF0sXG4gICAgICAgIHRpbGVfc3Ryb29wd2FmZWxfbGlnaHRfcmV2ZWFsZWQ6IFsgODAsIDQ4LCAxNiwgMTYgXSxcbiAgICAgICAgdGlsZV9zdHJvb3B3YWZlbF9kYXJrX2NvdmVyZWQ6IFsgOTYsIDQ4LCAxNiwgMTYgXSxcbiAgICAgICAgdGlsZV9zdHJvb3B3YWZlbF9kYXJrX3JldmVhbGVkOiBbIDExMiwgNDgsIDE2LCAxNiBdLFxuICAgICAgICB0aWxlX2JsdWViZXJyeV9jb3ZlcmVkOiBbIDY0LCA2NCwgMTYsIDE2IF0sXG4gICAgICAgIHRpbGVfYmx1ZWJlcnJ5X3JldmVhbGVkOiBbIDgwLCA2NCwgMTYsIDE2IF0sXG4gICAgICAgIHRpbGVfc3RyYXdiZXJyeV9jb3ZlcmVkOiBbIDY0LCA4MCwgMTYsIDE2IF0sXG4gICAgICAgIHRpbGVfc3RyYXdiZXJyeV9yZXZlYWxlZDogWyA4MCwgODAsIDE2LCAxNiBdLFxuICAgICAgICB0aWxlX2Nvb2tpZXNfYW5kX2NyZWFtX2NvdmVyZWQ6IFsgNjQsIDk2LCAxNiwgMTYgXSxcbiAgICAgICAgdGlsZV9jb29raWVzX2FuZF9jcmVhbV9yZXZlYWxlZDogWyA4MCwgOTYsIDE2LCAxNiBdLFxuICAgIH0pO1xuXG4gICAgcHVibGljIGFzeW5jIGluaXQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMudGlsZXNldC5hd2FpdExvYWQoKTtcbiAgICAgICAgLy8gUmVwYWNrIHRpbGVzZXQgKFRvIHByZXZlbnQgdGV4dHVyZSBibGVlZGluZylcbiAgICAgICAgdGhpcy50aWxlc2V0ID0gdGhpcy50aWxlc2V0LnRvSW1hZ2VEYXRhQXRsYXMoKS50b0ltYWdlQXRsYXModHJ1ZSk7XG4gICAgfVxuXG5cblxuICAgIHByaXZhdGUgZHJhd05lYXJieShjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgbWluZXNOZWFyYnk6IG51bWJlciB8IFRJTEVfTk9ORV9ORUFSQlkpOiB2b2lkIHtcbiAgICAgICAgaWYobWluZXNOZWFyYnkgPT0gVElMRV9OT05FX05FQVJCWSkgcmV0dXJuO1xuICAgICAgICBpZihtaW5lc05lYXJieSA8IDApIHtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG5cbiAgICAgICAgICAgIGN0eC5zY2FsZSgwLjU1LCAwLjU1KTtcbiAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoMC4xLCAwLjQ1KTtcbiAgICAgICAgICAgIHRoaXMudGlsZXNldC5kcmF3KGN0eCwgJ251bWJlcl9uZWdhdGl2ZV9zaWduJywgMCwgMCwgMSwgMSk7XG4gICAgICAgICAgICAvLyBGSVhNRSBDTEVBTlVQOiBUaGlzIGlzIGp1c3QgYSBoYWNrIHRvIGdldCB0aGUgcmlnaHQgY29sb3Igb24gdGhlIG1pbnVzIHNpZ24uXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gW1xuICAgICAgICAgICAgICAgICcjRkZGRkZGJyxcbiAgICAgICAgICAgICAgICAnIzAwMjZGRicsXG4gICAgICAgICAgICAgICAgJyMyNjdGMDAnLFxuICAgICAgICAgICAgICAgICcjQkEwMDAwJyxcbiAgICAgICAgICAgICAgICAnIzAwMTM3RicsXG4gICAgICAgICAgICAgICAgJyM3RjAwMDAnLFxuICAgICAgICAgICAgICAgICcjMDA4MDgwJyxcbiAgICAgICAgICAgICAgICAnIzMzRDEzNycsXG4gICAgICAgICAgICAgICAgJyM5NDAwRDgnLFxuICAgICAgICAgICAgICAgICcjRTQ4QzAwJyxcbiAgICAgICAgICAgICAgICAnI0ZGOEY5RicsXG4gICAgICAgICAgICAgICAgJyNGRjhGMDAnLFxuICAgICAgICAgICAgICAgICcjNTk4Q0FBJyxcbiAgICAgICAgICAgICAgICAnI0YwM0U2OSdcbiAgICAgICAgICAgIF1bLW1pbmVzTmVhcmJ5XSA/PyAnd2hpdGUnO1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KDAuMjUgLSAwLjAwNCwgMC40Mzc1IC0gMC4wMDQsIDAuNDM3NSArIDAuMDA4LCAwLjEyNSArIDAuMDA4KTtcblxuICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSgwLjcsIDApO1xuICAgICAgICAgICAgdGhpcy5kcmF3TmVhcmJ5KGN0eCwgLW1pbmVzTmVhcmJ5KTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2gobWluZXNOZWFyYnkpIHtcbiAgICAgICAgICAgIGNhc2UgMDogdGhpcy50aWxlc2V0LmRyYXcoY3R4LCAnbnVtYmVyXzAnLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE6IHRoaXMudGlsZXNldC5kcmF3KGN0eCwgJ251bWJlcl8xJywgMCwgMCwgMSwgMSk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdudW1iZXJfMicsIDAsIDAsIDEsIDEpOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzogdGhpcy50aWxlc2V0LmRyYXcoY3R4LCAnbnVtYmVyXzMnLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDQ6IHRoaXMudGlsZXNldC5kcmF3KGN0eCwgJ251bWJlcl80JywgMCwgMCwgMSwgMSk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA1OiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdudW1iZXJfNScsIDAsIDAsIDEsIDEpOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNjogdGhpcy50aWxlc2V0LmRyYXcoY3R4LCAnbnVtYmVyXzYnLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDc6IHRoaXMudGlsZXNldC5kcmF3KGN0eCwgJ251bWJlcl83JywgMCwgMCwgMSwgMSk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA4OiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdudW1iZXJfOCcsIDAsIDAsIDEsIDEpOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgOTogdGhpcy50aWxlc2V0LmRyYXcoY3R4LCAnbnVtYmVyXzknLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDEwOiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdudW1iZXJfMTAnLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDExOiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdudW1iZXJfMTEnLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDEyOiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdudW1iZXJfMTInLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDEzOiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdudW1iZXJfMTMnLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE0OiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdudW1iZXJfMTQnLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE1OiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdudW1iZXJfMTUnLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE2OiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdudW1iZXJfMTYnLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE3OiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdudW1iZXJfMTcnLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE4OiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdudW1iZXJfMTgnLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE5OiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdudW1iZXJfMTknLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDIwOiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdudW1iZXJfMjAnLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDIxOiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdudW1iZXJfMjEnLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDIyOiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdudW1iZXJfMjInLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDIzOiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdudW1iZXJfMjMnLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI0OiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdudW1iZXJfMjQnLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoYFRoZW1lUmV0cm8gaW52YWxpZCBkcmF3IG5lYXJieSBjb3VudC4gJHttaW5lc05lYXJieX1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZHJhd0ZsYWdzKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBudW1GbGFnczogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHN3aXRjaChudW1GbGFncykge1xuICAgICAgICAgICAgY2FzZSAwOiBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTogdGhpcy50aWxlc2V0LmRyYXcoY3R4LCAnZmxhZ18xJywgMCwgMCwgMSwgMSk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdmbGFnXzInLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM6IHRoaXMudGlsZXNldC5kcmF3KGN0eCwgJ2ZsYWdfMycsIDAsIDAsIDEsIDEpOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgLTE6IHRoaXMudGlsZXNldC5kcmF3KGN0eCwgJ2ZsYWdfYW50aV8xJywgMCwgMCwgMSwgMSk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAtMjogdGhpcy50aWxlc2V0LmRyYXcoY3R4LCAnZmxhZ19hbnRpXzInLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIC0zOiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdmbGFnX2FudGlfMycsIDAsIDAsIDEsIDEpOyBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignVGhlbWVSZXRybyBpbnZhbGlkIGRyYXcgZmxhZyBjb3VudC4nKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZHJhd1NpbmdsZU1pbmVUaWxlKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB0aWxlOiBTaW5nbGVNaW5lVGlsZSwgY292ZXJlZDoga2V5b2YgdHlwZW9mIHRoaXMudGlsZXNldC50ZXh0dXJlcywgcmV2ZWFsZWQ6IGtleW9mIHR5cGVvZiB0aGlzLnRpbGVzZXQudGV4dHVyZXMsIGZvcmNlQ292ZXJlZDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBpZihmb3JjZUNvdmVyZWQpIHtcbiAgICAgICAgICAgIHRoaXMudGlsZXNldC5kcmF3KGN0eCwgY292ZXJlZCwgMCwgMCwgMSwgMSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoKHRpbGUuc3RhdGUpIHtcbiAgICAgICAgICAgIGNhc2UgU2luZ2xlTWluZVRpbGVTdGF0ZS5Db3ZlcmVkOiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsIGNvdmVyZWQsIDAsIDAsIDEsIDEpOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU2luZ2xlTWluZVRpbGVTdGF0ZS5GbGFnZ2VkOiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsIGNvdmVyZWQsIDAsIDAsIDEsIDEpOyB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdmbGFnJywgMCwgMCwgMSwgMSk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTaW5nbGVNaW5lVGlsZVN0YXRlLlJldmVhbGVkOiB7XG4gICAgICAgICAgICAgICAgdGhpcy50aWxlc2V0LmRyYXcoY3R4LCByZXZlYWxlZCwgMCwgMCwgMSwgMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3TmVhcmJ5KGN0eCwgdGlsZS5taW5lc05lYXJieSgpKTtcbiAgICAgICAgICAgICAgICBicmVhazsgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkcmF3TXVsdGlNaW5lVGlsZShjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgdGlsZTogTXVsdGlNaW5lVGlsZSwgY292ZXJlZDoga2V5b2YgdHlwZW9mIHRoaXMudGlsZXNldC50ZXh0dXJlcywgcmV2ZWFsZWQ6IGtleW9mIHR5cGVvZiB0aGlzLnRpbGVzZXQudGV4dHVyZXMsIGZvcmNlQ292ZXJlZDogYm9vbGVhbikge1xuICAgICAgICBpZihmb3JjZUNvdmVyZWQpIHtcbiAgICAgICAgICAgIHRoaXMudGlsZXNldC5kcmF3KGN0eCwgY292ZXJlZCwgMCwgMCwgMSwgMSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYoIXRpbGUuaXNSZXZlYWxlZCkge1xuICAgICAgICAgICAgdGhpcy50aWxlc2V0LmRyYXcoY3R4LCBjb3ZlcmVkLCAwLCAwLCAxLCAxKTtcbiAgICAgICAgICAgIHRoaXMuZHJhd0ZsYWdzKGN0eCwgdGlsZS5udW1GbGFncygpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudGlsZXNldC5kcmF3KGN0eCwgcmV2ZWFsZWQsIDAsIDAsIDEsIDEpO1xuICAgICAgICAgICAgdGhpcy5kcmF3TmVhcmJ5KGN0eCwgdGlsZS5taW5lc05lYXJieSgpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZHJhd1N0cmF3YmVycnlUaWxlKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB0aWxlOiBTdHJhd2JlcnJ5VGlsZSwgZm9yY2VDb3ZlcmVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmKGZvcmNlQ292ZXJlZCkge1xuICAgICAgICAgICAgdGhpcy50aWxlc2V0LmRyYXcoY3R4LCAndGlsZV9zdHJhd2JlcnJ5X2NvdmVyZWQnLCAwLCAwLCAxLCAxKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2godGlsZS5zdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSBTaW5nbGVNaW5lVGlsZVN0YXRlLkNvdmVyZWQ6IHRoaXMudGlsZXNldC5kcmF3KGN0eCwgJ3RpbGVfc3RyYXdiZXJyeV9jb3ZlcmVkJywgMCwgMCwgMSwgMSk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTaW5nbGVNaW5lVGlsZVN0YXRlLkZsYWdnZWQ6IHRoaXMudGlsZXNldC5kcmF3KGN0eCwgJ3RpbGVfc3RyYXdiZXJyeV9jb3ZlcmVkJywgMCwgMCwgMSwgMSk7IHRoaXMudGlsZXNldC5kcmF3KGN0eCwgJ2ZsYWcnLCAwLCAwLCAxLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFNpbmdsZU1pbmVUaWxlU3RhdGUuUmV2ZWFsZWQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICd0aWxlX3N0cmF3YmVycnlfcmV2ZWFsZWQnLCAwLCAwLCAxLCAxKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG5lYXJieTEgPSB0aWxlLm1pbmVzTmVhcmJ5KHRydWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5lYXJieTIgPSB0aWxlLnNlY29uZGFyeU1pbmVzTmVhcmJ5KHRydWUpO1xuICAgICAgICAgICAgICAgIGlmKG5lYXJieTIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdOZWFyYnkoY3R4LCBuZWFyYnkxKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICBjdHguc2NhbGUoMC41NSwgMC41NSk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoMC4xLCAwLjQ1KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3TmVhcmJ5KGN0eCwgdGlsZS5zZWNvbmRhcnlOZWFyYnlDb3VudFJpZ2h0U2lkZSA/IG5lYXJieTEgOiBuZWFyYnkyKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSgwLjcsIDApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdOZWFyYnkoY3R4LCB0aWxlLnNlY29uZGFyeU5lYXJieUNvdW50UmlnaHRTaWRlID8gbmVhcmJ5MiA6IG5lYXJieTEpO1xuICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhazsgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkcmF3U2luZ2xlQW50aU1pbmVUaWxlKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB0aWxlOiBTaW5nbGVBbnRpTWluZVRpbGUsIGNvdmVyZWQ6IGtleW9mIHR5cGVvZiB0aGlzLnRpbGVzZXQudGV4dHVyZXMsIHJldmVhbGVkOiBrZXlvZiB0eXBlb2YgdGhpcy50aWxlc2V0LnRleHR1cmVzLCBmb3JjZUNvdmVyZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYoZm9yY2VDb3ZlcmVkKSB7XG4gICAgICAgICAgICB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsIGNvdmVyZWQsIDAsIDAsIDEsIDEpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCh0aWxlLnN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlIFNpbmdsZUFudGlNaW5lVGlsZVN0YXRlLkNvdmVyZWQ6IHRoaXMudGlsZXNldC5kcmF3KGN0eCwgY292ZXJlZCwgMCwgMCwgMSwgMSk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTaW5nbGVBbnRpTWluZVRpbGVTdGF0ZS5GbGFnZ2VkOiB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsIGNvdmVyZWQsIDAsIDAsIDEsIDEpOyB0aGlzLnRpbGVzZXQuZHJhdyhjdHgsICdmbGFnJywgMCwgMCwgMSwgMSk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTaW5nbGVBbnRpTWluZVRpbGVTdGF0ZS5BbnRpRmxhZ2dlZDogdGhpcy50aWxlc2V0LmRyYXcoY3R4LCBjb3ZlcmVkLCAwLCAwLCAxLCAxKTsgdGhpcy50aWxlc2V0LmRyYXcoY3R4LCAnZmxhZ19hbnRpJywgMCwgMCwgMSwgMSk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTaW5nbGVBbnRpTWluZVRpbGVTdGF0ZS5SZXZlYWxlZDoge1xuICAgICAgICAgICAgICAgIHRoaXMudGlsZXNldC5kcmF3KGN0eCwgcmV2ZWFsZWQsIDAsIDAsIDEsIDEpO1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhd05lYXJieShjdHgsIHRpbGUubWluZXNOZWFyYnkoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7IH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZHJhd0ZvcmNlZFRpbGUoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHRpbGU6IFZhbGlkVGlsZSwgZm9yY2VDb3ZlcmVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIHN3aXRjaCh0aWxlLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3ZhbmlsbGEnOiB0aGlzLmRyYXdTaW5nbGVNaW5lVGlsZShjdHgsIHRpbGUsICd0aWxlX3ZhbmlsbGFfY292ZXJlZCcsICd0aWxlX3ZhbmlsbGFfcmV2ZWFsZWQnLCBmb3JjZUNvdmVyZWQpOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Nob2NvbGF0ZSc6IHRoaXMuZHJhd1NpbmdsZU1pbmVUaWxlKGN0eCwgdGlsZSwgJ3RpbGVfY2hvY29sYXRlX2NvdmVyZWQnLCAndGlsZV9jaG9jb2xhdGVfcmV2ZWFsZWQnLCBmb3JjZUNvdmVyZWQpOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3dhZmZsZSc6IHtcbiAgICAgICAgICAgICAgICBpZighdGlsZS5pc0RhcmspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3U2luZ2xlTWluZVRpbGUoY3R4LCB0aWxlLCAndGlsZV93YWZmbGVfbGlnaHRfY292ZXJlZCcsICd0aWxlX3dhZmZsZV9saWdodF9yZXZlYWxlZCcsIGZvcmNlQ292ZXJlZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3U2luZ2xlTWluZVRpbGUoY3R4LCB0aWxlLCAndGlsZV93YWZmbGVfZGFya19jb3ZlcmVkJywgJ3RpbGVfd2FmZmxlX2RhcmtfcmV2ZWFsZWQnLCBmb3JjZUNvdmVyZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhazsgfVxuICAgICAgICAgICAgY2FzZSAnc3Ryb29wd2FmZWwnOiB7XG4gICAgICAgICAgICAgICAgaWYoIXRpbGUuaXNEYXJrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd1NpbmdsZU1pbmVUaWxlKGN0eCwgdGlsZSwgJ3RpbGVfc3Ryb29wd2FmZWxfbGlnaHRfY292ZXJlZCcsICd0aWxlX3N0cm9vcHdhZmVsX2xpZ2h0X3JldmVhbGVkJywgZm9yY2VDb3ZlcmVkKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdTaW5nbGVNaW5lVGlsZShjdHgsIHRpbGUsICd0aWxlX3N0cm9vcHdhZmVsX2RhcmtfY292ZXJlZCcsICd0aWxlX3N0cm9vcHdhZmVsX2RhcmtfcmV2ZWFsZWQnLCBmb3JjZUNvdmVyZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhazsgfVxuICAgICAgICAgICAgY2FzZSAnYmx1ZWJlcnJ5Jzoge1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhd011bHRpTWluZVRpbGUoY3R4LCB0aWxlLCAndGlsZV9ibHVlYmVycnlfY292ZXJlZCcsICd0aWxlX2JsdWViZXJyeV9yZXZlYWxlZCcsIGZvcmNlQ292ZXJlZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7IH1cbiAgICAgICAgICAgIGNhc2UgJ3N0cmF3YmVycnknOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3U3RyYXdiZXJyeVRpbGUoY3R4LCB0aWxlLCBmb3JjZUNvdmVyZWQpO1xuICAgICAgICAgICAgICAgIGJyZWFrOyB9XG4gICAgICAgICAgICBjYXNlICdjb29raWVzX2FuZF9jcmVhbSc6IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdTaW5nbGVBbnRpTWluZVRpbGUoY3R4LCB0aWxlLCAndGlsZV9jb29raWVzX2FuZF9jcmVhbV9jb3ZlcmVkJywgJ3RpbGVfY29va2llc19hbmRfY3JlYW1fcmV2ZWFsZWQnLCBmb3JjZUNvdmVyZWQpO1xuICAgICAgICAgICAgICAgIGJyZWFrOyB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhd1RpbGUoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHRpbGU6IFZhbGlkVGlsZSk6IHZvaWQge1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjdHgudHJhbnNsYXRlKHRpbGUueCwgdGlsZS55KTtcbiAgICAgICAgdGhpcy5kcmF3Rm9yY2VkVGlsZShjdHgsIHRpbGUsIGZhbHNlKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gICAgXG5cblxuICAgIHB1YmxpYyBkcmF3UGFydGljbGUoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHBhcnRpY2xlOiBWYWxpZFBhcnRpY2xlKTogdm9pZCB7XG4gICAgICAgIGN0eC5zYXZlKCk7XG5cbiAgICAgICAgc3dpdGNoKHBhcnRpY2xlLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2ZsYWcnOiB7XG4gICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZShwYXJ0aWNsZS54ICsgMC41LCBwYXJ0aWNsZS55ICsgMC41KTtcbiAgICAgICAgICAgICAgICBjdHgucm90YXRlKHBhcnRpY2xlLnIpO1xuICAgICAgICAgICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IHBhcnRpY2xlLm9wYWNpdHk7XG4gICAgICAgICAgICAgICAgaWYoIXBhcnRpY2xlLmlzTXVsdGlGbGFnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKHBhcnRpY2xlLm51bUZsYWdzID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGlsZXNldC5kcmF3KGN0eCwgJ2ZsYWcnLCAtMC41LCAtMC41LCAxLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGlsZXNldC5kcmF3KGN0eCwgJ2ZsYWdfYW50aScsIC0wLjUsIC0wLjUsIDEsIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSgtMC41LCAtMC41KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3RmxhZ3MoY3R4LCBwYXJ0aWNsZS5udW1GbGFncyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrOyB9XG4gICAgICAgICAgICBjYXNlICdleHBsb3Npb24nOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXhwbG9zaW9uVGV4dHVyZXM6IChrZXlvZiB0eXBlb2YgdGhpcy50aWxlc2V0LnRleHR1cmVzKVtdID0gWyAnZXhwbG9zaW9uMScsICdleHBsb3Npb24yJywgJ2V4cGxvc2lvbjMnLCAnZXhwbG9zaW9uNCcgXTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IE1hdGgubWluKE1hdGguZmxvb3IoKHBhcnRpY2xlLmxpZmV0aW1lIC8gcGFydGljbGUubWF4TGlmZXRpbWUpICogZXhwbG9zaW9uVGV4dHVyZXMubGVuZ3RoKSwgZXhwbG9zaW9uVGV4dHVyZXMubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgdGhpcy50aWxlc2V0LmRyYXcoY3R4LCBleHBsb3Npb25UZXh0dXJlc1tpbmRleF0sIHBhcnRpY2xlLnRpbGUueCwgcGFydGljbGUudGlsZS55LCAxLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhazsgfVxuICAgICAgICAgICAgY2FzZSAnZmFrZXRpbGUnOiB7XG4gICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZShwYXJ0aWNsZS50aWxlLngsIHBhcnRpY2xlLnRpbGUueSk7XG4gICAgICAgICAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gcGFydGljbGUub3BhY2l0eTtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdGb3JjZWRUaWxlKGN0eCwgcGFydGljbGUudGlsZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7IH1cbiAgICAgICAgICAgIGNhc2UgJ3RpbGVyZXZlYWwnOiB7XG4gICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZShwYXJ0aWNsZS54ICsgMC41LCBwYXJ0aWNsZS55ICsgMC41KTtcbiAgICAgICAgICAgICAgICBjdHgucm90YXRlKHBhcnRpY2xlLnIpO1xuICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoLTAuNSwgLTAuNSk7XG4gICAgICAgICAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gcGFydGljbGUub3BhY2l0eTtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdGb3JjZWRUaWxlKGN0eCwgcGFydGljbGUudGlsZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IDE7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXdEZWF0aEljb24oY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHRpbGVYOiBudW1iZXIsIHRpbGVZOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50aWxlc2V0LmRyYXcoY3R4LCAnc2t1bGwnLCB0aWxlWCwgdGlsZVksIDEsIDEpO1xuICAgIH1cblxuXG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgc291bmRFZmZlY3RzOiB7W2tleSBpbiBTb3VuZEVmZmVjdF06IHsgc3JjOiBzdHJpbmcsIHZhcmlhdGlvbjogbnVtYmVyIH19ID0ge1xuICAgICAgICAncmV2ZWFsJzogeyBzcmM6ICcvaW5maW5pdGUtbWluZXN3ZWVwZXIvcmV0cm8vcmV2ZWFsLndhdicsIHZhcmlhdGlvbjogMC4yNSB9LFxuICAgICAgICAndW5mbGFnJzogeyBzcmM6ICcvaW5maW5pdGUtbWluZXN3ZWVwZXIvcmV0cm8vdW5mbGFnLndhdicsIHZhcmlhdGlvbjogMC4yNSB9LFxuICAgICAgICAnZXhwbG9zaW9uJzogeyBzcmM6ICcvaW5maW5pdGUtbWluZXN3ZWVwZXIvcmV0cm8vZXhwbG9zaW9uLndhdicsIHZhcmlhdGlvbjogMC4yNSB9LFxuICAgIH07XG5cbn1cblxuXG4iLCI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IGxvYWQsIHNhdmUgfSBmcm9tIFwiJGxpYi9nYW1lL1NhdmVcIjtcbiAgICBpbXBvcnQgeyBXb3JsZCB9IGZyb20gXCIkbGliL2dhbWUvV29ybGRcIjtcbiAgICBpbXBvcnQgeyBvbk1vdW50LCBvbkRlc3Ryb3kgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgaW1wb3J0IFJlbmRlcmVyIGZyb20gXCIuL1JlbmRlcmVyLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCB0eXBlIHsgVGhlbWUgfSBmcm9tIFwiJGxpYi9nYW1lL3RoZW1lL1RoZW1lXCI7XG4gICAgaW1wb3J0IHsgVGhlbWVSZXRybyB9IGZyb20gXCIkbGliL2dhbWUvdGhlbWUvcmV0cm9cIjtcbiAgICBpbXBvcnQgeyB2b2x1bWUgfSBmcm9tIFwiLi4vc3RvcmVcIjtcbiAgICBpbXBvcnQgeyBWaWV3cG9ydCB9IGZyb20gXCIkbGliL2dhbWUvVmlld3BvcnRcIjtcbiAgICBpbXBvcnQgdHlwZSB7IEJvb2ttYXJrIH0gZnJvbSBcIi4vQm9va21hcmtzTW9kYWwuc3ZlbHRlXCI7XG5cbiAgICBleHBvcnQgbGV0IHNhdmVTbG90OiBzdHJpbmc7XG4gICAgZXhwb3J0IGxldCB3b3JsZDogV29ybGQ7XG4gICAgbGV0IHRoZW1lOiBUaGVtZSA9IG5ldyBUaGVtZVJldHJvKCk7XG4gICAgZXhwb3J0IGxldCB2aWV3cG9ydDogVmlld3BvcnQ7XG5cbiAgICBleHBvcnQgbGV0IGJvb2ttYXJrczogQm9va21hcmtbXSA9IFtdO1xuXG4gICAgJDogdGhlbWUudm9sdW1lID0gJHZvbHVtZTtcblxuICAgIG9uTW91bnQoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCB0aGVtZS5pbml0KCk7XG5cbiAgICAgICAgY29uc3Qgc2F2ZSA9IGxvYWQoc2F2ZVNsb3QpO1xuICAgICAgICB3b3JsZCA9IHNhdmUud29ybGQ7XG4gICAgICAgIHZpZXdwb3J0ID0gc2F2ZS52aWV3cG9ydCA/PyBuZXcgVmlld3BvcnQod29ybGQpO1xuICAgICAgICBib29rbWFya3MgPSBzYXZlLmJvb2ttYXJrcyA/PyBbXTtcblxuICAgICAgICB3b3JsZC5hZGRFdmVudExpc3RlbmVyKCdzb3VuZF91bmZsYWcnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGVtZS5wbGF5U291bmQoJ3VuZmxhZycpO1xuICAgICAgICB9KTtcbiAgICAgICAgd29ybGQuYWRkRXZlbnRMaXN0ZW5lcignc291bmRfcmV2ZWFsJywgKHsgZGF0YTogY291bnQgfSkgPT4ge1xuICAgICAgICAgICAgdGhlbWUucGxheVNvdW5kKCdyZXZlYWwnLCBjb3VudCAvIDEwICsgMC45KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHdvcmxkLmFkZEV2ZW50TGlzdGVuZXIoJ3NvdW5kX2V4cGxvc2lvbicsICgpID0+IHtcbiAgICAgICAgICAgIHRoZW1lLnBsYXlTb3VuZCgnZXhwbG9zaW9uJyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgb25EZXN0cm95KCgpID0+IHtcbiAgICAgICAgd29ybGQuZGVzdHJveURpc3BhdGNoZXIoKTtcbiAgICAgICAgdmlld3BvcnQuZGVzdHJveURpc3BhdGNoZXIoKTtcbiAgICAgICAgLy8gRklYTUU6IEZpeCBvbkRlc3Ryb3kgcmVuZGVyZXIgZXJyb3IuXG4gICAgICAgIC8vIHdvcmxkLmRlc3Ryb3lEaXNwYXRjaGVyKCk7XG4gICAgICAgIC8vIHNhdmUoc2F2ZVNsb3QsIHdvcmxkKTtcbiAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgfSk7XG5cbjwvc2NyaXB0PlxuXG48c3ZlbHRlOndpbmRvd1xuICAgIG9uOmJlZm9yZXVubG9hZD17KCkgPT4ge1xuICAgICAgICBzYXZlKHNhdmVTbG90LCB7IHdvcmxkLCB2aWV3cG9ydCwgYm9va21hcmtzIH0pO1xuICAgIH19XG4vPlxuXG57I2lmIHdvcmxkICYmIHRoZW1lICYmIHZpZXdwb3J0fVxuICAgIDxSZW5kZXJlciB7d29ybGR9IHt0aGVtZX0ge3ZpZXdwb3J0fSBvbjphY3Rpb249e2V2ID0+IHtcbiAgICAgICAgaWYoZXYuZGV0YWlsLnR5cGUgPT0gJ3JldmVhbCcpIHtcbiAgICAgICAgICAgIHdvcmxkLnJldmVhbChldi5kZXRhaWwucG9zLngsIGV2LmRldGFpbC5wb3MueSk7XG4gICAgICAgIH0gZWxzZSBpZihldi5kZXRhaWwudHlwZSA9PSAnZmxhZycpIHtcbiAgICAgICAgICAgIHdvcmxkLmZsYWcoZXYuZGV0YWlsLnBvcy54LCBldi5kZXRhaWwucG9zLnkpO1xuICAgICAgICB9IGVsc2UgaWYoZXYuZGV0YWlsLnR5cGUgPT0gJ3Jlc2V0Jykge1xuICAgICAgICAgICAgd29ybGQucmVzZXQoZXYuZGV0YWlsLnBvcy54LCBldi5kZXRhaWwucG9zLnkpO1xuICAgICAgICB9XG4gICAgfX0gLz5cbnsvaWZ9XG4iLCIvKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1zdmVsdGUgdjAuMzcyLjAgLSBJU0NcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5jb25zdCBkZWZhdWx0QXR0cmlidXRlcyA9IHtcbiAgICB4bWxuczogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgICB3aWR0aDogMjQsXG4gICAgaGVpZ2h0OiAyNCxcbiAgICB2aWV3Qm94OiAnMCAwIDI0IDI0JyxcbiAgICBmaWxsOiAnbm9uZScsXG4gICAgc3Ryb2tlOiAnY3VycmVudENvbG9yJyxcbiAgICAnc3Ryb2tlLXdpZHRoJzogMixcbiAgICAnc3Ryb2tlLWxpbmVjYXAnOiAncm91bmQnLFxuICAgICdzdHJva2UtbGluZWpvaW4nOiAncm91bmQnLFxufTtcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRBdHRyaWJ1dGVzO1xuIiwiPHNjcmlwdD5pbXBvcnQgZGVmYXVsdEF0dHJpYnV0ZXMgZnJvbSAnLi9kZWZhdWx0QXR0cmlidXRlcyc7XG5leHBvcnQgbGV0IG5hbWU7XG5leHBvcnQgbGV0IGNvbG9yID0gJ2N1cnJlbnRDb2xvcic7XG5leHBvcnQgbGV0IHNpemUgPSAyNDtcbmV4cG9ydCBsZXQgc3Ryb2tlV2lkdGggPSAyO1xuZXhwb3J0IGxldCBhYnNvbHV0ZVN0cm9rZVdpZHRoID0gZmFsc2U7XG5leHBvcnQgbGV0IGljb25Ob2RlO1xuPC9zY3JpcHQ+XG5cbjxzdmdcbiAgey4uLmRlZmF1bHRBdHRyaWJ1dGVzfVxuICB7Li4uJCRyZXN0UHJvcHN9XG4gIHdpZHRoPXtzaXplfVxuICBoZWlnaHQ9e3NpemV9XG4gIHN0cm9rZT17Y29sb3J9XG4gIHN0cm9rZS13aWR0aD17XG4gICAgYWJzb2x1dGVTdHJva2VXaWR0aFxuICAgICAgPyBOdW1iZXIoc3Ryb2tlV2lkdGgpICogMjQgLyBOdW1iZXIoc2l6ZSlcbiAgICAgIDogc3Ryb2tlV2lkdGhcbiAgfVxuICBjbGFzcz17YGx1Y2lkZS1pY29uIGx1Y2lkZSBsdWNpZGUtJHtuYW1lfSAkeyQkcHJvcHMuY2xhc3MgPz8gJyd9YH1cbj5cbiAgeyNlYWNoIGljb25Ob2RlIGFzIFt0YWcsIGF0dHJzXX1cbiAgICA8c3ZlbHRlOmVsZW1lbnQgdGhpcz17dGFnfSB7Li4uYXR0cnN9Lz5cbiAgey9lYWNofVxuICA8c2xvdCAvPlxuPC9zdmc+XG4iLCI8c2NyaXB0Pi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXN2ZWx0ZSB2MC4zNzIuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24uc3ZlbHRlJztcbmNvbnN0IGljb25Ob2RlID0gW1tcImNpcmNsZVwiLCB7IFwiY3hcIjogXCIxMlwiLCBcImN5XCI6IFwiMTJcIiwgXCJyXCI6IFwiMTBcIiB9XSwgW1wicGF0aFwiLCB7IFwiZFwiOiBcIk0xMiAxNnYtNFwiIH1dLCBbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTEyIDhoLjAxXCIgfV1dO1xuLyoqXG4gKiBAY29tcG9uZW50IEBuYW1lIEluZm9cbiAqIEBkZXNjcmlwdGlvbiBMdWNpZGUgU1ZHIGljb24gY29tcG9uZW50LCByZW5kZXJzIFNWRyBFbGVtZW50IHdpdGggY2hpbGRyZW4uXG4gKlxuICogQHByZXZpZXcgIVtpbWddKGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QWdlRzFzYm5NOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2YzNabklnb2dJSGRwWkhSb1BTSXlOQ0lLSUNCb1pXbG5hSFE5SWpJMElnb2dJSFpwWlhkQ2IzZzlJakFnTUNBeU5DQXlOQ0lLSUNCbWFXeHNQU0p1YjI1bElnb2dJSE4wY205clpUMGlJekF3TUNJZ2MzUjViR1U5SW1KaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNObVptWTdJR0p2Y21SbGNpMXlZV1JwZFhNNklESndlQ0lLSUNCemRISnZhMlV0ZDJsa2RHZzlJaklpQ2lBZ2MzUnliMnRsTFd4cGJtVmpZWEE5SW5KdmRXNWtJZ29nSUhOMGNtOXJaUzFzYVc1bGFtOXBiajBpY205MWJtUWlDajRLSUNBOFkybHlZMnhsSUdONFBTSXhNaUlnWTNrOUlqRXlJaUJ5UFNJeE1DSWdMejRLSUNBOGNHRjBhQ0JrUFNKTk1USWdNVFoyTFRRaUlDOCtDaUFnUEhCaGRHZ2daRDBpVFRFeUlEaG9MakF4SWlBdlBnbzhMM04yWno0SykgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvaW5mb1xuICogQHNlZSBodHRwczovL2x1Y2lkZS5kZXYvZ3VpZGUvcGFja2FnZXMvbHVjaWRlLXN2ZWx0ZSAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7RnVuY3Rpb25hbENvbXBvbmVudH0gU3ZlbHRlIGNvbXBvbmVudFxuICpcbiAqL1xuPC9zY3JpcHQ+XG5cbjxJY29uIG5hbWU9XCJpbmZvXCIgey4uLiQkcHJvcHN9IGljb25Ob2RlPXtpY29uTm9kZX0+XG4gIDxzbG90Lz5cbjwvSWNvbj5cbiIsIjwhLS0gVE9ETzogRmFkZSBvdXQgYW5pbWF0aW9uIC0tPlxuPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBleHBvcnQgbGV0IHZpc2libGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBleHBvcnQgbGV0IGNsb3NhYmxlOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIGV4cG9ydCBsZXQgYmFja2dyb3VuZFN0eWxlOiBib29sZWFuID0gdHJ1ZTtcbiAgICBcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cblxuICAgIC5tb2RhbCB7XG4gICAgICAgIEBhcHBseSBmaXhlZCB0b3AtMCBsZWZ0LTAgYm90dG9tLTAgcmlnaHQtMDtcbiAgICB9XG5cbiAgICAubW9kYWwtYmFja2dyb3VuZCB7XG4gICAgICAgIEBhcHBseSAtei0xMDtcbiAgICB9XG5cbiAgICAubW9kYWwtYmFja2dyb3VuZC1zdHlsZWQge1xuICAgICAgICBAYXBwbHkgYmFja2Ryb3AtYmx1ciBiZy1ibGFjayBiZy1vcGFjaXR5LTMwIHNoYWRvdy12aWduZXR0ZS1oZWF2eTtcblxuICAgICAgICBhbmltYXRpb246IG1vZGFsLWJhY2tncm91bmQtZmFkZS1pbiA1MDBtcyBlYXNlLWluLW91dDtcblxuICAgICAgICBAa2V5ZnJhbWVzIG1vZGFsLWJhY2tncm91bmQtZmFkZS1pbiB7XG4gICAgICAgICAgICAwJSB7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCU7XG4gICAgICAgICAgICAgICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDBweCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA1MCUge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEwMCU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAxMDAlIHtcbiAgICAgICAgICAgICAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoOHB4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC5tb2RhbC1jb250ZW50IHtcbiAgICAgICAgYW5pbWF0aW9uOiBtb2RhbC1jb250ZW50LWZhZGUtaW4gMjUwbXMgZWFzZS1pbi1vdXQ7XG5cbiAgICAgICAgQGtleWZyYW1lcyBtb2RhbC1jb250ZW50LWZhZGUtaW4ge1xuICAgICAgICAgICAgZnJvbSB7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0byB7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMTAwJTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuPC9zdHlsZT5cblxueyNpZiB2aXNpYmxlfVxuICAgIDxkaXYgY2xhc3M9XCJtb2RhbCBmb3JjZS1vdmVybGFwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1iYWNrZ3JvdW5kXCIgY2xhc3M6bW9kYWwtYmFja2dyb3VuZC1zdHlsZWQ9e2JhY2tncm91bmRTdHlsZX0+XG4gICAgICAgICAgICB7I2lmIGNsb3NhYmxlfVxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ3LWZ1bGwgaC1mdWxsXCIgb246Y2xpY2s9eygpID0+IHZpc2libGUgPSBmYWxzZX0gYXJpYS1sYWJlbD1cIkNsb3NlIE1vZGFsXCIgLz5cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtY29udGVudCBmbGV4IGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlciBwb2ludGVyLWV2ZW50cy1ub25lIHAtOFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBvaW50ZXItZXZlbnRzLWF1dG9cIj5cbiAgICAgICAgICAgICAgICA8c2xvdCAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2Plxuey9pZn1cbiIsIjxzY3JpcHQ+LyoqXG4gKiBAbGljZW5zZSBsdWNpZGUtc3ZlbHRlIHYwLjM3Mi4wIC0gSVNDXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IEljb24gZnJvbSAnLi4vSWNvbi5zdmVsdGUnO1xuY29uc3QgaWNvbk5vZGUgPSBbW1wicGF0aFwiLCB7IFwiZFwiOiBcIm0xNSAxOC02LTYgNi02XCIgfV1dO1xuLyoqXG4gKiBAY29tcG9uZW50IEBuYW1lIENoZXZyb25MZWZ0XG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThjR0YwYUNCa1BTSnRNVFVnTVRndE5pMDJJRFl0TmlJZ0x6NEtQQzl6ZG1jK0NnPT0pIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL2NoZXZyb24tbGVmdFxuICogQHNlZSBodHRwczovL2x1Y2lkZS5kZXYvZ3VpZGUvcGFja2FnZXMvbHVjaWRlLXN2ZWx0ZSAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7RnVuY3Rpb25hbENvbXBvbmVudH0gU3ZlbHRlIGNvbXBvbmVudFxuICpcbiAqL1xuPC9zY3JpcHQ+XG5cbjxJY29uIG5hbWU9XCJjaGV2cm9uLWxlZnRcIiB7Li4uJCRwcm9wc30gaWNvbk5vZGU9e2ljb25Ob2RlfT5cbiAgPHNsb3QvPlxuPC9JY29uPlxuIiwiPHNjcmlwdD4vKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1zdmVsdGUgdjAuMzcyLjAgLSBJU0NcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uLnN2ZWx0ZSc7XG5jb25zdCBpY29uTm9kZSA9IFtbXCJwYXRoXCIsIHsgXCJkXCI6IFwibTkgMTggNi02LTYtNlwiIH1dXTtcbi8qKlxuICogQGNvbXBvbmVudCBAbmFtZSBDaGV2cm9uUmlnaHRcbiAqIEBkZXNjcmlwdGlvbiBMdWNpZGUgU1ZHIGljb24gY29tcG9uZW50LCByZW5kZXJzIFNWRyBFbGVtZW50IHdpdGggY2hpbGRyZW4uXG4gKlxuICogQHByZXZpZXcgIVtpbWddKGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QWdlRzFzYm5NOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2YzNabklnb2dJSGRwWkhSb1BTSXlOQ0lLSUNCb1pXbG5hSFE5SWpJMElnb2dJSFpwWlhkQ2IzZzlJakFnTUNBeU5DQXlOQ0lLSUNCbWFXeHNQU0p1YjI1bElnb2dJSE4wY205clpUMGlJekF3TUNJZ2MzUjViR1U5SW1KaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNObVptWTdJR0p2Y21SbGNpMXlZV1JwZFhNNklESndlQ0lLSUNCemRISnZhMlV0ZDJsa2RHZzlJaklpQ2lBZ2MzUnliMnRsTFd4cGJtVmpZWEE5SW5KdmRXNWtJZ29nSUhOMGNtOXJaUzFzYVc1bGFtOXBiajBpY205MWJtUWlDajRLSUNBOGNHRjBhQ0JrUFNKdE9TQXhPQ0EyTFRZdE5pMDJJaUF2UGdvOEwzTjJaejRLKSAtIGh0dHBzOi8vbHVjaWRlLmRldi9pY29ucy9jaGV2cm9uLXJpZ2h0XG4gKiBAc2VlIGh0dHBzOi8vbHVjaWRlLmRldi9ndWlkZS9wYWNrYWdlcy9sdWNpZGUtc3ZlbHRlIC0gRG9jdW1lbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAtIEx1Y2lkZSBpY29ucyBwcm9wcyBhbmQgYW55IHZhbGlkIFNWRyBhdHRyaWJ1dGVcbiAqIEByZXR1cm5zIHtGdW5jdGlvbmFsQ29tcG9uZW50fSBTdmVsdGUgY29tcG9uZW50XG4gKlxuICovXG48L3NjcmlwdD5cblxuPEljb24gbmFtZT1cImNoZXZyb24tcmlnaHRcIiB7Li4uJCRwcm9wc30gaWNvbk5vZGU9e2ljb25Ob2RlfT5cbiAgPHNsb3QvPlxuPC9JY29uPlxuIiwiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgdHlwZSB7IEFycmF5RWxlbWVudCB9IGZyb20gXCIkbGliL1V0aWxcIjtcbiAgICBpbXBvcnQgTHVjaWRlQ2hldnJvbkxlZnQgZnJvbSBcImx1Y2lkZS1zdmVsdGUvaWNvbnMvY2hldnJvbi1sZWZ0XCI7XG4gICAgaW1wb3J0IEx1Y2lkZUNoZXZyb25SaWdodCBmcm9tIFwibHVjaWRlLXN2ZWx0ZS9pY29ucy9jaGV2cm9uLXJpZ2h0XCI7XG5cbiAgICBjb25zdCBiaW9tZU5hbWVzID0gWyAnVmFuaWxsYScsICdDaG9jb2xhdGUnLCAnV2FmZmxlJywgJ1N0cm9vcHdhZmVsJywgJ0JsdWViZXJyeScsICdTdHJhd2JlcnJ5JywgJ0Nvb2tpZXMgYW5kIENyZWFtJyBdIGFzIGNvbnN0O1xuICAgIGxldCBjdXJyZW50QmlvbWU6IEFycmF5RWxlbWVudDx0eXBlb2YgYmlvbWVOYW1lcz4gPSAnVmFuaWxsYSc7XG5cbiAgICBmdW5jdGlvbiBuZXdCaW9tZShkaXI6ICduZXh0JyB8ICdwcmV2Jyk6IHZvaWQge1xuICAgICAgICBsZXQgaW5kZXggPSBiaW9tZU5hbWVzLmluZGV4T2YoY3VycmVudEJpb21lKSE7XG4gICAgICAgIGluZGV4ICs9IChkaXIgPT0gJ25leHQnID8gMSA6IC0xKTtcbiAgICAgICAgaWYoaW5kZXggPj0gYmlvbWVOYW1lcy5sZW5ndGgpIGluZGV4ID0gMDtcbiAgICAgICAgaWYoaW5kZXggPCAwKSBpbmRleCA9IGJpb21lTmFtZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgY3VycmVudEJpb21lID0gYmlvbWVOYW1lc1tpbmRleF07XG4gICAgfVxuICAgIFxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxuICAgIFxuICAgIC5iaW9tZSB7XG4gICAgICAgIC8vIEBleHRlbmQgLmZvcmNlLW92ZXJsYXA7XG4gICAgICAgIEBhcHBseSBncmlkIGdyaWQtY29scy0xIGdyaWQtcm93cy0xO1xuXG4gICAgICAgICYgPiAqIHtcbiAgICAgICAgICAgIEBhcHBseSB3LWZ1bGwgaC1mdWxsIGNvbC1zdGFydC0xIGNvbC1lbmQtMSByb3ctc3RhcnQtMSByb3ctZW5kLTE7XG4gICAgICAgIH1cblxuICAgICAgICBAYXBwbHkgdy1mdWxsIGgtZnVsbDtcbiAgICB9XG5cbiAgICAuYmlvbWUtYmFja2Ryb3Age1xuICAgICAgICAvLyBGSVhNRTogb3ZlcmZsb3ctdmlzaWJsZSBvbiBpbWFnZSBpcyBhIHZlcnkgamFuayB3YXkgdG8gZG8gdGhpcywgcGxlYXNlIHVzZSBhbm90aGVyIHdheS5cbiAgICAgICAgQGFwcGx5IGJsdXItc20gdy1mdWxsIGgtZnVsbCBvYmplY3QtY292ZXIgb3ZlcmZsb3ctdmlzaWJsZTtcblxuICAgICAgICBhbmltYXRpb246IGJhY2tkcm9wLWludHJvIDI1MG1zIGVhc2Utb3V0O1xuICAgICAgICBAa2V5ZnJhbWVzIGJhY2tkcm9wLWludHJvIHtcbiAgICAgICAgICAgIGZyb20ge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0byB7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC5iaW9tZS1jb250ZW50IHtcbiAgICAgICAgQGFwcGx5IHotMTA7XG5cbiAgICAgICAgYW5pbWF0aW9uOiBiaW9tZS1pbnRybyAyNTBtcyBlYXNlLW91dDtcbiAgICAgICAgQGtleWZyYW1lcyBiaW9tZS1pbnRybyB7XG4gICAgICAgICAgICBmcm9tIHtcbiAgICAgICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGU6IC0xMCUgMDtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG8ge1xuICAgICAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBhdXRvO1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZTogMCUgMDtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLmJpb21lLXRpdGxlIHtcbiAgICAgICAgQGFwcGx5IHRleHQtM3hsIGZvbnQtYm9sZCBwYi0yO1xuICAgIH1cblxuICAgIC5iaW9tZS1kZXNjcmlwdGlvbiB7XG4gICAgICAgIEBhcHBseSB0ZXh0LXhsIHB4LTQ7XG4gICAgfVxuICAgIFxuPC9zdHlsZT5cblxuPGRpdiBjbGFzcz1cInctZnVsbCBoLWZ1bGwgZm9yY2Utb3ZlcmxhcCB0ZXh0LXdoaXRlXCI+XG4gICAgPGRpdiBjbGFzcz1cInBvaW50ZXItZXZlbnRzLWF1dG8gcHgtMTJcIj5cbiAgICAgICAgPCEtLSBUT0RPOiBCZXR0ZXIgcmVhZGFiaWxpdHkgd2l0aCBiYWNrZHJvcCBpbWFnZXMuIC0tPlxuICAgICAgICB7I2lmIGN1cnJlbnRCaW9tZSA9PSAnVmFuaWxsYSd9XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmlvbWVcIj5cbiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwiYmlvbWUtYmFja2Ryb3BcIiBzcmM9XCIvaW5maW5pdGUtbWluZXN3ZWVwZXIvYmlvbWVfdmFuaWxsYV9zY3JlZW5zaG90LnBuZ1wiIGFsdD1cIlZhbmlsbGEgQmlvbWUgU2NyZWVuc2hvdFwiIC8+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJpb21lLWNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPVwiYmlvbWUtdGl0bGVcIj5WYW5pbGxhPC9oMj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJpb21lLWRlc2NyaXB0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICBUaGUgc3RhbmRhcmQgTWluZXN3ZWVwZXIgcnVsZXMuXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIHs6ZWxzZSBpZiBjdXJyZW50QmlvbWUgPT0gJ0Nob2NvbGF0ZSd9XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmlvbWVcIj5cbiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwiYmlvbWUtYmFja2Ryb3BcIiBzcmM9XCIvaW5maW5pdGUtbWluZXN3ZWVwZXIvYmlvbWVfY2hvY29sYXRlX3NjcmVlbnNob3QucG5nXCIgYWx0PVwiQ2hvY29sYXRlIEJpb21lIFNjcmVlbnNob3RcIiAvPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJiaW9tZS1jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz1cImJpb21lLXRpdGxlXCI+Q2hvY29sYXRlPC9oMj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJpb21lLWRlc2NyaXB0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICBUaGUgc3RhbmRhcmQgTWluZXN3ZWVwZXIgcnVsZXMuPGJyIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICBNdWNoIG1vcmUgbWluZXMgdGhhbiBWYW5pbGxhIGJpb21lLlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICB7OmVsc2UgaWYgY3VycmVudEJpb21lID09ICdXYWZmbGUnfVxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJpb21lXCI+XG4gICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cImJpb21lLWJhY2tkcm9wXCIgc3JjPVwiL2luZmluaXRlLW1pbmVzd2VlcGVyL2Jpb21lX3dhZmZsZV9zY3JlZW5zaG90LnBuZ1wiIGFsdD1cIldhZmZsZSBCaW9tZSBTY3JlZW5zaG90XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJpb21lLWNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPVwiYmlvbWUtdGl0bGVcIj5XYWZmbGU8L2gyPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmlvbWUtZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDJ4MiBjaGVja2VycyBvZiB0aWxlcy48YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIERhcmsgY2hlY2tlcmVkIHNlY3Rpb25zIGhhdmUgMyBtaW5lcy48YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIExpZ2h0IGNoZWNrZXJlZCBzZWN0aW9ucyBoYXZlIDEgbWluZS5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgezplbHNlIGlmIGN1cnJlbnRCaW9tZSA9PSAnU3Ryb29wd2FmZWwnfVxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJpb21lXCI+XG4gICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cImJpb21lLWJhY2tkcm9wXCIgc3JjPVwiL2luZmluaXRlLW1pbmVzd2VlcGVyL2Jpb21lX3N0cm9vcHdhZmVsX3NjcmVlbnNob3QucG5nXCIgYWx0PVwiU3Ryb29wd2FmZWwgQmlvbWUgU2NyZWVuc2hvdFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJiaW9tZS1jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz1cImJpb21lLXRpdGxlXCI+U3Ryb29wd2FmZWw8L2gyPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmlvbWUtZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDN4MyBjaGVja2VycyBvZiB0aWxlcy48YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIERhcmsgY2hlY2tlcmVkIHNlY3Rpb25zIGhhdmUgOCBtaW5lcy48YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIExpZ2h0IGNoZWNrZXJlZCBzZWN0aW9ucyBoYXZlIDEgbWluZS5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgezplbHNlIGlmIGN1cnJlbnRCaW9tZSA9PSAnQmx1ZWJlcnJ5J31cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJiaW9tZVwiPlxuICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJiaW9tZS1iYWNrZHJvcFwiIHNyYz1cIi9pbmZpbml0ZS1taW5lc3dlZXBlci9iaW9tZV9ibHVlYmVycnlfc2NyZWVuc2hvdC5wbmdcIiBhbHQ9XCJCbHVlYmVycnkgQmlvbWUgU2NyZWVuc2hvdFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJiaW9tZS1jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz1cImJpb21lLXRpdGxlXCI+Qmx1ZWJlcnJ5PC9oMj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJpb21lLWRlc2NyaXB0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICBUaWxlcyBtYXkgaGF2ZSB1cCB0byAzIG1pbmVzLlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICB7OmVsc2UgaWYgY3VycmVudEJpb21lID09ICdTdHJhd2JlcnJ5J31cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJiaW9tZVwiPlxuICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJiaW9tZS1iYWNrZHJvcFwiIHNyYz1cIi9pbmZpbml0ZS1taW5lc3dlZXBlci9iaW9tZV9zdHJhd2JlcnJ5X3NjcmVlbnNob3QucG5nXCIgYWx0PVwiU3RyYXdiZXJyeSBCaW9tZSBTY3JlZW5zaG90XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJpb21lLWNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPVwiYmlvbWUtdGl0bGVcIj5TdHJhd2JlcnJ5PC9oMj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJpb21lLWRlc2NyaXB0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICBUaWxlIG5lYXJieSBtaW5lIGNvdW50IG1heSBoYXZlIDIgdmFsdWVzLlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+PGJyIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICBCZSBjYXJlZnVsIHdoaWxlIHJldmVhbGluZyB0aWxlczsgSWYgYW55IG9mIHRoZSB0d28gdmFsdWVzIG1hdGNoLCB0aGUgdGlsZXMgd2lsbCBhdXRvIHJldmVhbC5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgezplbHNlIGlmIGN1cnJlbnRCaW9tZSA9PSAnQ29va2llcyBhbmQgQ3JlYW0nfVxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJpb21lIHRleHQtYmxhY2tcIj5cbiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwiYmlvbWUtYmFja2Ryb3BcIiBzcmM9XCIvaW5maW5pdGUtbWluZXN3ZWVwZXIvYmlvbWVfY29va2llc19hbmRfY3JlYW1fc2NyZWVuc2hvdC5wbmdcIiBhbHQ9XCJDb29raWVzIGFuZCBDcmVhbSBCaW9tZSBTY3JlZW5zaG90XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJpb21lLWNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPVwiYmlvbWUtdGl0bGVcIj5Db29raWVzIGFuZCBDcmVhbTwvaDI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJiaW9tZS1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgVGlsZSBtYXkgaGF2ZSBhbnRpIG1pbmUuIEFudGkgbWluZXMgY291bnQgYXMgLTEgbWluZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz48YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIEJlIGNhcmVmdWwgd2hpbGUgcmV2ZWFsaW5nIHRpbGVzOyBOZWFyYnkgdGlsZXMgbWF5IHN0aWxsIGhhdmUgbWluZXMsIGV2ZW4gdGhvdWdoIG5lYXJieSBtaW5lcyBpcyBlcXVhbCB0byBuZWFyYnkgZmxhZ3MuXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIHsvaWZ9XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInBvaW50ZXItZXZlbnRzLW5vbmUgZmxleCBqdXN0aWZ5LWJldHdlZW4gei0xMFwiPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwicG9pbnRlci1ldmVudHMtYXV0byBwbC00IGhvdmVyOi10cmFuc2xhdGUteC0xIHRyYW5zaXRpb24tdHJhbnNmb3JtXCIgb246Y2xpY2s9e2V2ID0+IHsgZXYucHJldmVudERlZmF1bHQoKTsgbmV3QmlvbWUoJ3ByZXYnKTsgfX0+XG4gICAgICAgICAgICA8THVjaWRlQ2hldnJvbkxlZnQgLz5cbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJwb2ludGVyLWV2ZW50cy1hdXRvIHByLTQgaG92ZXI6dHJhbnNsYXRlLXgtMSB0cmFuc2l0aW9uLXRyYW5zZm9ybVwiIG9uOmNsaWNrPXtldiA9PiB7IGV2LnByZXZlbnREZWZhdWx0KCk7IG5ld0Jpb21lKCduZXh0Jyk7IH19PlxuICAgICAgICAgICAgPEx1Y2lkZUNoZXZyb25SaWdodCAvPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbjwvZGl2PlxuIiwiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgdHlwZSB7IEFycmF5RWxlbWVudCB9IGZyb20gXCIkbGliL1V0aWxcIjtcbiAgICBpbXBvcnQgeyBpbnB1dE1ldGhvZCB9IGZyb20gXCIuLi9zdG9yZVwiO1xuICAgIGltcG9ydCBJbmZvTW9kYWxCaW9tZXMgZnJvbSBcIi4vSW5mb01vZGFsQmlvbWVzLnN2ZWx0ZVwiO1xuXG4gICAgY29uc3QgdGFiTmFtZXMgPSBbICdJbmZvcm1hdGlvbicsICdCaW9tZXMnLCAnQ29udHJvbHMnIF0gYXMgY29uc3Q7XG4gICAgbGV0IGN1cnJlbnRUYWI6IEFycmF5RWxlbWVudDx0eXBlb2YgdGFiTmFtZXM+ID0gJ0luZm9ybWF0aW9uJztcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxuICAgIFxuICAgIC50YWIge1xuICAgICAgICBAYXBwbHkgYmctd2hpdGUgYmctb3BhY2l0eS0wIHRyYW5zaXRpb24tY29sb3JzO1xuICAgICAgICBcbiAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICBAYXBwbHkgYmctb3BhY2l0eS01MDtcbiAgICAgICAgfVxuXG4gICAgICAgICYuc2VsZWN0ZWQge1xuICAgICAgICAgICAgQGFwcGx5IGJnLW9wYWNpdHktNTA7XG4gICAgICAgIH1cbiAgICB9XG5cbjwvc3R5bGU+XG5cbjxkaXYgY2xhc3M9XCJncmlkIHB4LTQgcHktMiByb3VuZGVkLTJ4bCBiZy13aGl0ZSBiZy1vcGFjaXR5LTUwXCI+XG4gICAgPGRpdiBjbGFzcz1cInB4LTQgZ3JpZCBncmlkLWZsb3ctY29sIGdhcC00IGl0ZW1zLWNlbnRlciBmb250LWJvbGRcIj5cbiAgICAgICAgeyNlYWNoIHRhYk5hbWVzIGFzIHRhYk5hbWV9XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJ0YWIgdy1mdWxsIGZsZXgganVzdGlmeS1jZW50ZXIgcHktMSBweC00IHJvdW5kZWQtbWRcIlxuICAgICAgICAgICAgICAgIGNsYXNzOnNlbGVjdGVkPXt0YWJOYW1lID09IGN1cnJlbnRUYWJ9XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3RhYk5hbWUgPT0gY3VycmVudFRhYn1cbiAgICAgICAgICAgICAgICBvbjpjbGljaz17KCkgPT4gY3VycmVudFRhYiA9IHRhYk5hbWV9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3RhYk5hbWV9XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgey9lYWNofVxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJ3LWZ1bGwgaC0xIGJnLWJsYWNrIGJnLW9wYWNpdHktNTAgbXktMiByb3VuZGVkLWZ1bGxcIiAvPlxuICAgIDxkaXYgY2xhc3M9XCJ3LVszMnJlbV0gaC02NCBweS0yIGZvbnQtc2VtaWJvbGRcIj5cbiAgICAgICAgeyNpZiBjdXJyZW50VGFiID09ICdJbmZvcm1hdGlvbid9XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHgtNCB3LWZ1bGwgaC1mdWxsIGZsZXggZmxleC1jb2wganVzdGlmeS1iZXR3ZWVuXCI+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJ0ZXh0LTJ4bCBmb250LWJvbGRcIiBocmVmPVwiaHR0cHM6Ly92dWxhZS5naXRodWIuaW8vaW5maW5pdGUtbWluZXN3ZWVwZXJcIj5JbmZpbml0ZSBNaW5lc3dlZXBlcjwvYT5cbiAgICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICAgIEFuIGluZmluaXRlIHR3aXN0IG9uIE1pbmVzd2VlcGVyIHRoYXQgYWRkcyBiaW9tZXMgdGhhdCBjaGFuZ2UgdGhlIHJ1bGVzIG9mIHRoZSBnYW1lLlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwdC00XCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZmxvYXQtcmlnaHQgdGV4dC14cyBmb250LWV4dHJhYm9sZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgKlNvdXJjZSBjb2RlIGF2YWlsYWJsZSBvblxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJ1bmRlcmxpbmVcIiBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL1Z1bGFlL2luZmluaXRlLW1pbmVzd2VlcGVyXCI+R2l0SHViPC9hPlxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgezplbHNlIGlmIGN1cnJlbnRUYWIgPT0gJ0Jpb21lcyd9XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidy1mdWxsIGgtZnVsbCBpbmxpbmVcIj5cbiAgICAgICAgICAgICAgICA8SW5mb01vZGFsQmlvbWVzIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgezplbHNlIGlmIGN1cnJlbnRUYWIgPT0gJ0NvbnRyb2xzJ31cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJweC00XCI+XG4gICAgICAgICAgICAgICAgeyNpZiAkaW5wdXRNZXRob2QgPT0gJ21vdXNlJ31cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3M9XCJmb250LWJvbGQgdGV4dC0yeGxcIj5Nb3VzZSBDb250cm9sczwvaDE+XG4gICAgICAgICAgICAgICAgICAgICAgICBMZWZ0IENsaWNrOiBSZXZlYWwgdGlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICBSaWdodCBDbGljazogRmxhZyB0aWxlXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIExlZnQgQ2xpY2sgRHJhZzogTW92ZSB2aWV3XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIFNjcm9sbCBXaGVlbDogWm9vbSB2aWV3XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICB7OmVsc2UgaWYgJGlucHV0TWV0aG9kID09ICdrZXlib2FyZCd9XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzPVwiZm9udC1ib2xkIHRleHQtMnhsXCI+S2V5Ym9hcmQgQ29udHJvbHM8L2gxPlxuICAgICAgICAgICAgICAgICAgICAgICAgS2V5Ym9hcmQgY29udHJvbCBtZXRob2Qgbm90IHlldCBzdXBwb3J0ZWQuXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICB7OmVsc2UgaWYgJGlucHV0TWV0aG9kID09ICd0b3VjaCd9XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzPVwiZm9udC1ib2xkIHRleHQtMnhsXCI+VG91Y2ggQ29udHJvbHM8L2gxPlxuICAgICAgICAgICAgICAgICAgICAgICAgRG91YmxlIFRhcDogUmV2ZWFsIHRpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgU2luZ2xlIFRhcDogRmxhZyB0aWxlXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIFBhbjogTW92ZSB2aWV3XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIFBpbmNoOiBab29tIHZpZXdcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+VW5rbm93biBjb250cm9sIG1ldGhvZC48L3NwYW4+XG4gICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICB7L2lmfVxuICAgIDwvZGl2PlxuPC9kaXY+XG4iLCI8c2NyaXB0Pi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXN2ZWx0ZSB2MC4zNzIuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24uc3ZlbHRlJztcbmNvbnN0IGljb25Ob2RlID0gW1tcImNpcmNsZVwiLCB7IFwiY3hcIjogXCI5XCIsIFwiY3lcIjogXCIxMlwiLCBcInJcIjogXCIxXCIgfV0sIFtcImNpcmNsZVwiLCB7IFwiY3hcIjogXCIxNVwiLCBcImN5XCI6IFwiMTJcIiwgXCJyXCI6IFwiMVwiIH1dLCBbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTggMjB2Mmg4di0yXCIgfV0sIFtcInBhdGhcIiwgeyBcImRcIjogXCJtMTIuNSAxNy0uNS0xLS41IDFoMXpcIiB9XSwgW1wicGF0aFwiLCB7IFwiZFwiOiBcIk0xNiAyMGEyIDIgMCAwIDAgMS41Ni0zLjI1IDggOCAwIDEgMC0xMS4xMiAwQTIgMiAwIDAgMCA4IDIwXCIgfV1dO1xuLyoqXG4gKiBAY29tcG9uZW50IEBuYW1lIFNrdWxsXG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThZMmx5WTJ4bElHTjRQU0k1SWlCamVUMGlNVElpSUhJOUlqRWlJQzgrQ2lBZ1BHTnBjbU5zWlNCamVEMGlNVFVpSUdONVBTSXhNaUlnY2owaU1TSWdMejRLSUNBOGNHRjBhQ0JrUFNKTk9DQXlNSFl5YURoMkxUSWlJQzgrQ2lBZ1BIQmhkR2dnWkQwaWJURXlMalVnTVRjdExqVXRNUzB1TlNBeGFERjZJaUF2UGdvZ0lEeHdZWFJvSUdROUlrMHhOaUF5TUdFeUlESWdNQ0F3SURBZ01TNDFOaTB6TGpJMUlEZ2dPQ0F3SURFZ01DMHhNUzR4TWlBd1FUSWdNaUF3SURBZ01DQTRJREl3SWlBdlBnbzhMM04yWno0SykgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvc2t1bGxcbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1zdmVsdGUgLSBEb2N1bWVudGF0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIC0gTHVjaWRlIGljb25zIHByb3BzIGFuZCBhbnkgdmFsaWQgU1ZHIGF0dHJpYnV0ZVxuICogQHJldHVybnMge0Z1bmN0aW9uYWxDb21wb25lbnR9IFN2ZWx0ZSBjb21wb25lbnRcbiAqXG4gKi9cbjwvc2NyaXB0PlxuXG48SWNvbiBuYW1lPVwic2t1bGxcIiB7Li4uJCRwcm9wc30gaWNvbk5vZGU9e2ljb25Ob2RlfT5cbiAgPHNsb3QvPlxuPC9JY29uPlxuIiwiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgdHlwZSB7IEV2ZW50TGlzdGVuZXIgfSBmcm9tIFwiJGxpYi9FdmVudERpc3BhdGNoZXJcIjtcbiAgICBpbXBvcnQgdHlwZSB7IFdvcmxkIH0gZnJvbSBcIiRsaWIvZ2FtZS9Xb3JsZFwiO1xuICAgIGltcG9ydCBMdWNpZGVTa3VsbCBmcm9tIFwibHVjaWRlLXN2ZWx0ZS9pY29ucy9za3VsbFwiO1xuXG4gICAgZXhwb3J0IGxldCBsYXlvdXQ6ICd2ZXJ0aWNhbCcgfCAnaG9yaXpvbnRhbCc7XG4gICAgZXhwb3J0IGxldCB3b3JsZDogV29ybGQ7XG5cbiAgICBsZXQgbGlzdGVuZXI6IEV2ZW50TGlzdGVuZXI7XG4gICAgbGV0IGRlYXRoczogbnVtYmVyID0gMDtcblxuICAgIGxldCBsYXN0V29ybGQ6IFdvcmxkIHwgbnVsbCA9IG51bGw7XG4gICAgJDogaWYod29ybGQpIHtcbiAgICAgICAgbGFzdFdvcmxkPy5yZW1vdmVFdmVudExpc3RlbmVyKGxpc3RlbmVyKTtcblxuICAgICAgICBkZWF0aHMgPSB3b3JsZC5kZWF0aHM7XG4gICAgICAgIGxpc3RlbmVyID0gd29ybGQuYWRkRXZlbnRMaXN0ZW5lcignZGllJywgKCkgPT4ge1xuICAgICAgICAgICAgZGVhdGhzID0gd29ybGQuZGVhdGhzO1xuICAgICAgICB9KTtcblxuICAgICAgICBsYXN0V29ybGQgPSB3b3JsZDtcbiAgICB9XG5cbjwvc2NyaXB0PlxuXG48ZGl2XG4gICAgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlclwiXG4gICAgc3R5bGU6ZmxleC1kaXJlY3Rpb249e2xheW91dCA9PSAnaG9yaXpvbnRhbCcgPyAncm93JyA6ICdjb2x1bW4nfVxuICAgIHRpdGxlPVwie2RlYXRoc30gZGVhdGhzXCJcbj5cbiAgICA8THVjaWRlU2t1bGwgLz5cbiAgICA8c3BhbiBjbGFzcz1cInRleHQtc21cIj5cbiAgICAgICAge2RlYXRoc31cbiAgICA8L3NwYW4+XG48L2Rpdj5cbiIsIjxzY3JpcHQ+LyoqXG4gKiBAbGljZW5zZSBsdWNpZGUtc3ZlbHRlIHYwLjM3Mi4wIC0gSVNDXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IEljb24gZnJvbSAnLi4vSWNvbi5zdmVsdGUnO1xuY29uc3QgaWNvbk5vZGUgPSBbW1wicGF0aFwiLCB7IFwiZFwiOiBcIk01IDEyaDE0XCIgfV0sIFtcInBhdGhcIiwgeyBcImRcIjogXCJNMTIgNXYxNFwiIH1dXTtcbi8qKlxuICogQGNvbXBvbmVudCBAbmFtZSBQbHVzXG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThjR0YwYUNCa1BTSk5OU0F4TW1neE5DSWdMejRLSUNBOGNHRjBhQ0JrUFNKTk1USWdOWFl4TkNJZ0x6NEtQQzl6ZG1jK0NnPT0pIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL3BsdXNcbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1zdmVsdGUgLSBEb2N1bWVudGF0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIC0gTHVjaWRlIGljb25zIHByb3BzIGFuZCBhbnkgdmFsaWQgU1ZHIGF0dHJpYnV0ZVxuICogQHJldHVybnMge0Z1bmN0aW9uYWxDb21wb25lbnR9IFN2ZWx0ZSBjb21wb25lbnRcbiAqXG4gKi9cbjwvc2NyaXB0PlxuXG48SWNvbiBuYW1lPVwicGx1c1wiIHsuLi4kJHByb3BzfSBpY29uTm9kZT17aWNvbk5vZGV9PlxuICA8c2xvdC8+XG48L0ljb24+XG4iLCI8c2NyaXB0Pi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXN2ZWx0ZSB2MC4zNzIuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24uc3ZlbHRlJztcbmNvbnN0IGljb25Ob2RlID0gW1tcInBhdGhcIiwgeyBcImRcIjogXCJtMTkgMjEtNy00LTcgNFY1YTIgMiAwIDAgMSAyLTJoMTBhMiAyIDAgMCAxIDIgMnYxNnpcIiB9XSwgW1wibGluZVwiLCB7IFwieDFcIjogXCIxNVwiLCBcIngyXCI6IFwiOVwiLCBcInkxXCI6IFwiMTBcIiwgXCJ5MlwiOiBcIjEwXCIgfV1dO1xuLyoqXG4gKiBAY29tcG9uZW50IEBuYW1lIEJvb2ttYXJrTWludXNcbiAqIEBkZXNjcmlwdGlvbiBMdWNpZGUgU1ZHIGljb24gY29tcG9uZW50LCByZW5kZXJzIFNWRyBFbGVtZW50IHdpdGggY2hpbGRyZW4uXG4gKlxuICogQHByZXZpZXcgIVtpbWddKGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QWdlRzFzYm5NOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2YzNabklnb2dJSGRwWkhSb1BTSXlOQ0lLSUNCb1pXbG5hSFE5SWpJMElnb2dJSFpwWlhkQ2IzZzlJakFnTUNBeU5DQXlOQ0lLSUNCbWFXeHNQU0p1YjI1bElnb2dJSE4wY205clpUMGlJekF3TUNJZ2MzUjViR1U5SW1KaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNObVptWTdJR0p2Y21SbGNpMXlZV1JwZFhNNklESndlQ0lLSUNCemRISnZhMlV0ZDJsa2RHZzlJaklpQ2lBZ2MzUnliMnRsTFd4cGJtVmpZWEE5SW5KdmRXNWtJZ29nSUhOMGNtOXJaUzFzYVc1bGFtOXBiajBpY205MWJtUWlDajRLSUNBOGNHRjBhQ0JrUFNKdE1Ua2dNakV0TnkwMExUY2dORlkxWVRJZ01pQXdJREFnTVNBeUxUSm9NVEJoTWlBeUlEQWdNQ0F4SURJZ01uWXhObm9pSUM4K0NpQWdQR3hwYm1VZ2VERTlJakUxSWlCNE1qMGlPU0lnZVRFOUlqRXdJaUI1TWowaU1UQWlJQzgrQ2p3dmMzWm5QZ289KSAtIGh0dHBzOi8vbHVjaWRlLmRldi9pY29ucy9ib29rbWFyay1taW51c1xuICogQHNlZSBodHRwczovL2x1Y2lkZS5kZXYvZ3VpZGUvcGFja2FnZXMvbHVjaWRlLXN2ZWx0ZSAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7RnVuY3Rpb25hbENvbXBvbmVudH0gU3ZlbHRlIGNvbXBvbmVudFxuICpcbiAqL1xuPC9zY3JpcHQ+XG5cbjxJY29uIG5hbWU9XCJib29rbWFyay1taW51c1wiIHsuLi4kJHByb3BzfSBpY29uTm9kZT17aWNvbk5vZGV9PlxuICA8c2xvdC8+XG48L0ljb24+XG4iLCI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIiBsYW5nPVwidHNcIj5cbiAgICBleHBvcnQgaW50ZXJmYWNlIEJvb2ttYXJrIHtcbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICBjcmVhdGVkQXQ6IERhdGU7XG4gICAgICAgIHZpZXdwb3J0OiB7XG4gICAgICAgICAgICB4OiBudW1iZXI7XG4gICAgICAgICAgICB5OiBudW1iZXI7XG4gICAgICAgICAgICBzY2FsZTogbnVtYmVyO1xuICAgICAgICB9O1xuICAgIH1cbjwvc2NyaXB0PlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCBMdWNpZGVQbHVzIGZyb20gXCJsdWNpZGUtc3ZlbHRlL2ljb25zL3BsdXNcIjtcbiAgICBpbXBvcnQgTHVjaWRlQm9va21hcmtNaW51cyBmcm9tIFwibHVjaWRlLXN2ZWx0ZS9pY29ucy9ib29rbWFyay1taW51c1wiO1xuICAgIGltcG9ydCB0eXBlIHsgVmlld3BvcnQgfSBmcm9tIFwiJGxpYi9nYW1lL1ZpZXdwb3J0XCI7XG5cbiAgICBleHBvcnQgbGV0IHZpZXdwb3J0OiBWaWV3cG9ydDtcblxuICAgIGV4cG9ydCBsZXQgYm9va21hcmtzOiBCb29rbWFya1tdO1xuXG4gICAgbGV0IG5ld0Jvb2ttYXJrTmFtZUlucHV0OiBIVE1MSW5wdXRFbGVtZW50O1xuXG4gICAgZXhwb3J0IGxldCB2aXNpYmxlOiBib29sZWFuO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG5cbiAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgICAgICAgQGFwcGx5IHctMjtcbiAgICB9XG5cbiAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHtcbiAgICAgICAgQGFwcGx5IHJvdW5kZWQtZnVsbCBiZy1ibGFjayBiZy1vcGFjaXR5LTUwO1xuICAgIH1cblxuICAgIDo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xuICAgICAgICBAYXBwbHkgcm91bmRlZC1mdWxsIGJnLWdyYXktNTAgdHJhbnNpdGlvbi1jb2xvcnM7XG5cbiAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICBAYXBwbHkgYmctZ3JheS0yMDA7XG4gICAgICAgIH1cblxuICAgICAgICAmOmFjdGl2ZSB7XG4gICAgICAgICAgICBAYXBwbHkgYmctZ3JheS0zMDA7XG4gICAgICAgIH1cbiAgICB9XG5cbjwvc3R5bGU+XG5cbjxkaXYgY2xhc3M9XCJncmlkIHB4LTQgcHktMiByb3VuZGVkLTJ4bCBiZy13aGl0ZSBiZy1vcGFjaXR5LTUwXCI+XG4gICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LTJ4bCBmb250LWJvbGQgdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgQm9va21hcmtzXG4gICAgPC9zcGFuPlxuICAgIDxkaXYgY2xhc3M9XCJ3LWZ1bGwgaC0xIGJnLWJsYWNrIGJnLW9wYWNpdHktNTAgbXktMiByb3VuZGVkLWZ1bGxcIiAvPlxuICAgIDx1bCBjbGFzcz1cInAtMiBtYXgtaC05NiBvdmVyZmxvdy15LWF1dG9cIj5cbiAgICAgICAgeyNlYWNoIGJvb2ttYXJrcyBhcyBib29rbWFyaywgaX1cbiAgICAgICAgICAgIDxsaSBjbGFzcz1cImZsZXgganVzdGlmeS1iZXR3ZWVuIGl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJmbGV4IGZsZXgtY29sIG1sLTQgaG92ZXI6dGV4dC1ibHVlLTgwMCB0cmFuc2l0aW9uLWNvbG9yc1wiXG4gICAgICAgICAgICAgICAgICAgIG9uOmNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3cG9ydC5sb2FkKGJvb2ttYXJrLnZpZXdwb3J0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0LmNoYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LXhzIGZvbnQtbm9ybWFsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7Ym9va21hcmsuY3JlYXRlZEF0LnRvTG9jYWxlRGF0ZVN0cmluZygpfVxuICAgICAgICAgICAgICAgICAgICAgICAge2Jvb2ttYXJrLmNyZWF0ZWRBdC50b0xvY2FsZVRpbWVTdHJpbmcoKX1cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC14bCBmb250LWJvbGRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtib29rbWFyay5uYW1lfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiaG92ZXI6dGV4dC1yZWQtOTAwIHRyYW5zaXRpb24tY29sb3JzXCJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJSZW1vdmUgQm9va21hcmtcIlxuICAgICAgICAgICAgICAgICAgICBvbjpjbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9va21hcmtzPy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib29rbWFya3MgPSBib29rbWFya3M7XG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8THVjaWRlQm9va21hcmtNaW51cyBzaXplPVwiMnJlbVwiIC8+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgeyNpZiBpIDwgYm9va21hcmtzLmxlbmd0aCAtIDF9XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInctZnVsbCBoLTAuNSBiZy1ibGFjayBiZy1vcGFjaXR5LTUwIG15LTEgcm91bmRlZC1mdWxsXCIgLz5cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgIHsvZWFjaH1cbiAgICAgICAgeyNpZiBib29rbWFya3MubGVuZ3RoID09IDB9XG4gICAgICAgICAgICA8bGkgY2xhc3M9XCJ0ZXh0LXhsIGZvbnQtYm9sZFwiPlxuICAgICAgICAgICAgICAgIFlvdSBoYXZlIG5vIGJvb2ttYXJrcy5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgIHsvaWZ9XG4gICAgPC91bD5cbiAgICA8ZGl2IGNsYXNzPVwidy1mdWxsIGgtMSBiZy1ibGFjayBiZy1vcGFjaXR5LTUwIG15LTIgcm91bmRlZC1mdWxsXCIgLz5cbiAgICA8Zm9ybVxuICAgICAgICBjbGFzcz1cImZsZXgganVzdGlmeS1iZXR3ZWVuIGdhcC00IHB4LTIgcGItMlwiXG4gICAgICAgIG9uOnN1Ym1pdD17KCkgPT4ge1xuICAgICAgICAgICAgaWYobmV3Qm9va21hcmtOYW1lSW5wdXQudmFsdWUubGVuZ3RoID09IDApIHJldHVybjtcbiAgICAgICAgICAgIGJvb2ttYXJrcz8ucHVzaCh7XG4gICAgICAgICAgICAgICAgbmFtZTogbmV3Qm9va21hcmtOYW1lSW5wdXQudmFsdWUsXG4gICAgICAgICAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydC5zYXZlKClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYm9va21hcmtzID0gYm9va21hcmtzO1xuICAgICAgICAgICAgbmV3Qm9va21hcmtOYW1lSW5wdXQudmFsdWUgPSAnJztcbiAgICAgICAgfX1cbiAgICA+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgYmluZDp0aGlzPXtuZXdCb29rbWFya05hbWVJbnB1dH1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiTmV3IEJvb2ttYXJrXCJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIG1heGxlbmd0aD1cIjE2XCJcbiAgICAgICAgICAgIG9uOmtleWRvd258c3RvcFByb3BhZ2F0aW9uXG4gICAgICAgICAgICBjbGFzcz1cInctNDggcHgtMiByb3VuZGVkLW1kXCJcbiAgICAgICAgLz5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXG4gICAgICAgICAgICB0aXRsZT1cIkNyZWF0ZSBCb29rbWFya1wiXG4gICAgICAgICAgICBjbGFzcz1cImZsZXggaG92ZXI6dGV4dC1ncmVlbi05MDAgdHJhbnNpdGlvbi1jb2xvcnNcIlxuICAgICAgICA+XG4gICAgICAgICAgICA8THVjaWRlUGx1cyBzaXplPVwiMnJlbVwiIC8+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgIDwvZm9ybT5cbjwvZGl2PlxuIiwiPHNjcmlwdD4vKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1zdmVsdGUgdjAuMzcyLjAgLSBJU0NcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uLnN2ZWx0ZSc7XG5jb25zdCBpY29uTm9kZSA9IFtbXCJwYXRoXCIsIHsgXCJkXCI6IFwibTE5IDIxLTctNC03IDRWNWEyIDIgMCAwIDEgMi0yaDEwYTIgMiAwIDAgMSAyIDJ2MTZ6XCIgfV1dO1xuLyoqXG4gKiBAY29tcG9uZW50IEBuYW1lIEJvb2ttYXJrXG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThjR0YwYUNCa1BTSnRNVGtnTWpFdE55MDBMVGNnTkZZMVlUSWdNaUF3SURBZ01TQXlMVEpvTVRCaE1pQXlJREFnTUNBeElESWdNbll4Tm5vaUlDOCtDand2YzNablBnbz0pIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL2Jvb2ttYXJrXG4gKiBAc2VlIGh0dHBzOi8vbHVjaWRlLmRldi9ndWlkZS9wYWNrYWdlcy9sdWNpZGUtc3ZlbHRlIC0gRG9jdW1lbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAtIEx1Y2lkZSBpY29ucyBwcm9wcyBhbmQgYW55IHZhbGlkIFNWRyBhdHRyaWJ1dGVcbiAqIEByZXR1cm5zIHtGdW5jdGlvbmFsQ29tcG9uZW50fSBTdmVsdGUgY29tcG9uZW50XG4gKlxuICovXG48L3NjcmlwdD5cblxuPEljb24gbmFtZT1cImJvb2ttYXJrXCIgey4uLiQkcHJvcHN9IGljb25Ob2RlPXtpY29uTm9kZX0+XG4gIDxzbG90Lz5cbjwvSWNvbj5cbiIsIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHsgY2xlYXIgfSBmcm9tIFwiJGxpYi9nYW1lL1NhdmVcIjtcbiAgICBpbXBvcnQgeyBvbkRlc3Ryb3kgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgaW1wb3J0IHsgYXV0b0Rpc3BsYXlJbmZvLCBpbnB1dE1ldGhvZCwgdm9sdW1lIH0gZnJvbSBcIi4uL3N0b3JlXCI7XG5cbiAgICBleHBvcnQgbGV0IHNhdmVTbG90OiBzdHJpbmc7XG4gICAgbGV0IGNsZWFyU2F2ZUNvbmZpcm1UaW1lb3V0OiBudW1iZXIgPSAtMTtcbiAgICBjb25zdCBjbGVhclNhdmVDb25maXJtVGltZTogbnVtYmVyID0gNTAwMDtcbiAgICBsZXQgY2xlYXJTYXZlQ29uZmlybTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgb25EZXN0cm95KCgpID0+IHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGNsZWFyU2F2ZUNvbmZpcm1UaW1lb3V0KTtcbiAgICB9KTtcblxuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJncmlkIHB4LTQgcHktMiByb3VuZGVkLTJ4bCBiZy13aGl0ZSBiZy1vcGFjaXR5LTUwXCI+XG4gICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LTJ4bCBmb250LWJvbGQgdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgU2V0dGluZ3NcbiAgICA8L3NwYW4+XG4gICAgPGRpdiBjbGFzcz1cInctZnVsbCBoLTEgYmctYmxhY2sgYmctb3BhY2l0eS01MCBteS0yIHJvdW5kZWQtZnVsbFwiIC8+XG4gICAgPGRpdiBjbGFzcz1cInAtMiBtYXgtaC05NiBvdmVyZmxvdy15LWF1dG8gZmxleCBmbGV4LWNvbCBnYXAtNCBmb250LXNlbWlib2xkXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1jZW50ZXIgZ2FwLTNcIj5cbiAgICAgICAgICAgIElucHV0IE1ldGhvZFxuICAgICAgICAgICAgPHNlbGVjdFxuICAgICAgICAgICAgICAgIGJpbmQ6dmFsdWU9eyRpbnB1dE1ldGhvZH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPXsnbW91c2UnfT5Nb3VzZTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9eyd0b3VjaCd9PlRvdWNoPC9vcHRpb24+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1jZW50ZXIgZ2FwLTNcIj5cbiAgICAgICAgICAgIFZvbHVtZVxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgdHlwZT1cInJhbmdlXCJcbiAgICAgICAgICAgICAgICBtaW49XCIwXCIgbWF4PVwiMVwiIHN0ZXA9XCIwLjA1XCJcbiAgICAgICAgICAgICAgICB2YWx1ZT17JHZvbHVtZX1cbiAgICAgICAgICAgICAgICBvbjpjaGFuZ2U9e2V2ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgJHZvbHVtZSA9IGV2LmN1cnJlbnRUYXJnZXQudmFsdWVBc051bWJlcjtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIHRpdGxlPVwie01hdGgucm91bmQoJHZvbHVtZSAqIDEwMCl9JSBWb2x1bWVcIlxuICAgICAgICAgICAgPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgganVzdGlmeS1iZXR3ZWVuIGl0ZW1zLWNlbnRlciBnYXAtM1wiPlxuICAgICAgICAgICAgRGlzcGxheSBpbmZvcm1hdGlvbiBvbiBsb2FkXG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgIGJpbmQ6Y2hlY2tlZD17JGF1dG9EaXNwbGF5SW5mb31cbiAgICAgICAgICAgID5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzPVwiYmctYmxhY2sgZm9udC1ib2xkIHRleHQtcmVkLTUwMCByb3VuZGVkLWxnIHB5LTFcIlxuICAgICAgICAgICAgb246Y2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICBpZighY2xlYXJTYXZlQ29uZmlybSkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclNhdmVDb25maXJtID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJTYXZlQ29uZmlybVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyU2F2ZUNvbmZpcm0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSwgY2xlYXJTYXZlQ29uZmlybVRpbWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyU2F2ZUNvbmZpcm0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXIoc2F2ZVNsb3QpO1xuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgICB7I2lmICFjbGVhclNhdmVDb25maXJtfVxuICAgICAgICAgICAgICAgIENMRUFSIFNBVkVcbiAgICAgICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICAgICAgICBBUkUgWU9VIFNVUkU/XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbjwvZGl2PlxuIiwiPHNjcmlwdD4vKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1zdmVsdGUgdjAuMzcyLjAgLSBJU0NcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uLnN2ZWx0ZSc7XG5jb25zdCBpY29uTm9kZSA9IFtbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTEyLjIyIDJoLS40NGEyIDIgMCAwIDAtMiAydi4xOGEyIDIgMCAwIDEtMSAxLjczbC0uNDMuMjVhMiAyIDAgMCAxLTIgMGwtLjE1LS4wOGEyIDIgMCAwIDAtMi43My43M2wtLjIyLjM4YTIgMiAwIDAgMCAuNzMgMi43M2wuMTUuMWEyIDIgMCAwIDEgMSAxLjcydi41MWEyIDIgMCAwIDEtMSAxLjc0bC0uMTUuMDlhMiAyIDAgMCAwLS43MyAyLjczbC4yMi4zOGEyIDIgMCAwIDAgMi43My43M2wuMTUtLjA4YTIgMiAwIDAgMSAyIDBsLjQzLjI1YTIgMiAwIDAgMSAxIDEuNzNWMjBhMiAyIDAgMCAwIDIgMmguNDRhMiAyIDAgMCAwIDItMnYtLjE4YTIgMiAwIDAgMSAxLTEuNzNsLjQzLS4yNWEyIDIgMCAwIDEgMiAwbC4xNS4wOGEyIDIgMCAwIDAgMi43My0uNzNsLjIyLS4zOWEyIDIgMCAwIDAtLjczLTIuNzNsLS4xNS0uMDhhMiAyIDAgMCAxLTEtMS43NHYtLjVhMiAyIDAgMCAxIDEtMS43NGwuMTUtLjA5YTIgMiAwIDAgMCAuNzMtMi43M2wtLjIyLS4zOGEyIDIgMCAwIDAtMi43My0uNzNsLS4xNS4wOGEyIDIgMCAwIDEtMiAwbC0uNDMtLjI1YTIgMiAwIDAgMS0xLTEuNzNWNGEyIDIgMCAwIDAtMi0yelwiIH1dLCBbXCJjaXJjbGVcIiwgeyBcImN4XCI6IFwiMTJcIiwgXCJjeVwiOiBcIjEyXCIsIFwiclwiOiBcIjNcIiB9XV07XG4vKipcbiAqIEBjb21wb25lbnQgQG5hbWUgU2V0dGluZ3NcbiAqIEBkZXNjcmlwdGlvbiBMdWNpZGUgU1ZHIGljb24gY29tcG9uZW50LCByZW5kZXJzIFNWRyBFbGVtZW50IHdpdGggY2hpbGRyZW4uXG4gKlxuICogQHByZXZpZXcgIVtpbWddKGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QWdlRzFzYm5NOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2YzNabklnb2dJSGRwWkhSb1BTSXlOQ0lLSUNCb1pXbG5hSFE5SWpJMElnb2dJSFpwWlhkQ2IzZzlJakFnTUNBeU5DQXlOQ0lLSUNCbWFXeHNQU0p1YjI1bElnb2dJSE4wY205clpUMGlJekF3TUNJZ2MzUjViR1U5SW1KaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNObVptWTdJR0p2Y21SbGNpMXlZV1JwZFhNNklESndlQ0lLSUNCemRISnZhMlV0ZDJsa2RHZzlJaklpQ2lBZ2MzUnliMnRsTFd4cGJtVmpZWEE5SW5KdmRXNWtJZ29nSUhOMGNtOXJaUzFzYVc1bGFtOXBiajBpY205MWJtUWlDajRLSUNBOGNHRjBhQ0JrUFNKTk1USXVNaklnTW1ndExqUTBZVElnTWlBd0lEQWdNQzB5SURKMkxqRTRZVElnTWlBd0lEQWdNUzB4SURFdU56TnNMUzQwTXk0eU5XRXlJRElnTUNBd0lERXRNaUF3YkMwdU1UVXRMakE0WVRJZ01pQXdJREFnTUMweUxqY3pMamN6YkMwdU1qSXVNemhoTWlBeUlEQWdNQ0F3SUM0M015QXlMamN6YkM0eE5TNHhZVElnTWlBd0lEQWdNU0F4SURFdU56SjJMalV4WVRJZ01pQXdJREFnTVMweElERXVOelJzTFM0eE5TNHdPV0V5SURJZ01DQXdJREF0TGpjeklESXVOek5zTGpJeUxqTTRZVElnTWlBd0lEQWdNQ0F5TGpjekxqY3piQzR4TlMwdU1EaGhNaUF5SURBZ01DQXhJRElnTUd3dU5ETXVNalZoTWlBeUlEQWdNQ0F4SURFZ01TNDNNMVl5TUdFeUlESWdNQ0F3SURBZ01pQXlhQzQwTkdFeUlESWdNQ0F3SURBZ01pMHlkaTB1TVRoaE1pQXlJREFnTUNBeElERXRNUzQzTTJ3dU5ETXRMakkxWVRJZ01pQXdJREFnTVNBeUlEQnNMakUxTGpBNFlUSWdNaUF3SURBZ01DQXlMamN6TFM0M00yd3VNakl0TGpNNVlUSWdNaUF3SURBZ01DMHVOek10TWk0M00yd3RMakUxTFM0d09HRXlJRElnTUNBd0lERXRNUzB4TGpjMGRpMHVOV0V5SURJZ01DQXdJREVnTVMweExqYzBiQzR4TlMwdU1EbGhNaUF5SURBZ01DQXdJQzQzTXkweUxqY3piQzB1TWpJdExqTTRZVElnTWlBd0lEQWdNQzB5TGpjekxTNDNNMnd0TGpFMUxqQTRZVElnTWlBd0lEQWdNUzB5SURCc0xTNDBNeTB1TWpWaE1pQXlJREFnTUNBeExURXRNUzQzTTFZMFlUSWdNaUF3SURBZ01DMHlMVEo2SWlBdlBnb2dJRHhqYVhKamJHVWdZM2c5SWpFeUlpQmplVDBpTVRJaUlISTlJak1pSUM4K0Nqd3ZjM1puUGdvPSkgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvc2V0dGluZ3NcbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1zdmVsdGUgLSBEb2N1bWVudGF0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIC0gTHVjaWRlIGljb25zIHByb3BzIGFuZCBhbnkgdmFsaWQgU1ZHIGF0dHJpYnV0ZVxuICogQHJldHVybnMge0Z1bmN0aW9uYWxDb21wb25lbnR9IFN2ZWx0ZSBjb21wb25lbnRcbiAqXG4gKi9cbjwvc2NyaXB0PlxuXG48SWNvbiBuYW1lPVwic2V0dGluZ3NcIiB7Li4uJCRwcm9wc30gaWNvbk5vZGU9e2ljb25Ob2RlfT5cbiAgPHNsb3QvPlxuPC9JY29uPlxuIiwiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgR2FtZSBmcm9tIFwiJGNvbXBvbmVudHMvR2FtZS5zdmVsdGVcIjtcbiAgICBpbXBvcnQgeyByZXNpemUgfSBmcm9tIFwiJGxpYi9hY3Rpb25zL1Jlc2l6ZVwiO1xuICAgIGltcG9ydCBMdWNpZGVJbmZvIGZyb20gXCJsdWNpZGUtc3ZlbHRlL2ljb25zL2luZm9cIjtcbiAgICBpbXBvcnQgTW9kYWwgZnJvbSBcIiRjb21wb25lbnRzL01vZGFsLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBJbmZvTW9kYWwgZnJvbSBcIiRjb21wb25lbnRzL0luZm9Nb2RhbC5zdmVsdGVcIjtcbiAgICBpbXBvcnQgdHlwZSB7IFdvcmxkIH0gZnJvbSBcIiRsaWIvZ2FtZS9Xb3JsZFwiO1xuICAgIGltcG9ydCBEZWF0aENvdW50ZXIgZnJvbSBcIiRjb21wb25lbnRzL0RlYXRoQ291bnRlci5zdmVsdGVcIjtcbiAgICBpbXBvcnQgQm9va21hcmtzTW9kYWwsIHsgdHlwZSBCb29rbWFyayB9IGZyb20gXCIkY29tcG9uZW50cy9Cb29rbWFya3NNb2RhbC5zdmVsdGVcIjtcbiAgICBpbXBvcnQgdHlwZSB7IFZpZXdwb3J0IH0gZnJvbSBcIiRsaWIvZ2FtZS9WaWV3cG9ydFwiO1xuICAgIGltcG9ydCBMdWNpZGVCb29rbWFyayBmcm9tIFwibHVjaWRlLXN2ZWx0ZS9pY29ucy9ib29rbWFya1wiO1xuICAgIGltcG9ydCBTZXR0aW5nc01vZGFsIGZyb20gXCIkY29tcG9uZW50cy9TZXR0aW5nc01vZGFsLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBMdWNpZGVTZXR0aW5ncyBmcm9tIFwibHVjaWRlLXN2ZWx0ZS9pY29ucy9zZXR0aW5nc1wiO1xuICAgIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgaW1wb3J0IHsgYXV0b0Rpc3BsYXlJbmZvIH0gZnJvbSBcIi4uL3N0b3JlXCI7XG5cbiAgICBsZXQgc2F2ZVNsb3Q6IHN0cmluZyA9ICdzYXZlJztcblxuICAgIGxldCBsYXlvdXQ6ICd2ZXJ0aWNhbCcgfCAnaG9yaXpvbnRhbCcgPSAndmVydGljYWwnO1xuICAgIGxldCBsYXlvdXRTaWRlOiAnc3RhcnQnIHwgJ2VuZCcgPSAnZW5kJztcblxuICAgIGxldCBpbmZvTW9kYWxWaXNpYmxlOiBib29sZWFuID0gZmFsc2U7XG4gICAgbGV0IHNldHRpbmdzTW9kYWxWaXNpYmxlOiBib29sZWFuID0gZmFsc2U7XG4gICAgbGV0IGJvb2ttYXJrc01vZGFsVmlzaWJsZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgbGV0IHdvcmxkOiBXb3JsZDtcbiAgICBsZXQgdmlld3BvcnQ6IFZpZXdwb3J0O1xuICAgIGxldCBib29rbWFya3M6IEJvb2ttYXJrW10gPSBbXTtcblxuICAgIG9uTW91bnQoKCkgPT4ge1xuICAgICAgICBpZigkYXV0b0Rpc3BsYXlJbmZvKSB7XG4gICAgICAgICAgICBpbmZvTW9kYWxWaXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cInctc2NyZWVuIGgtc2NyZWVuIGdyaWQgZ3JpZC1jb2xzLTEgZ3JpZC1yb3dzLTFcIj5cbiAgICA8ZGl2IGNsYXNzPVwidy1mdWxsIGgtZnVsbCBjb2wtc3RhcnQtMSBjb2wtZW5kLTEgcm93LXN0YXJ0LTEgcm93LWVuZC0xXCI+XG4gICAgICAgIDxHYW1lIHtzYXZlU2xvdH0gYmluZDp3b3JsZCBiaW5kOnZpZXdwb3J0IGJpbmQ6Ym9va21hcmtzIC8+XG4gICAgPC9kaXY+XG4gICAgPCEtLSBUT0RPOiB0cmFuc2l0aW9uLW9wYWNpdHksIHRoZSBiYWNrZHJvcCBibHVyIGJyZWFrcyB3aGVuIG9wYWNpdHkgaXMgbGVzcyB0aGFuIDEsIFNvIHRoZSBibHVyIG5lZWRzIHRvIGJlIGRvbmUgYW5vdGhlciB3YXkuIC0tPlxuICAgIDxkaXZcbiAgICAgICAgY2xhc3M9XCJ3LWZ1bGwgaC1mdWxsIGNvbC1zdGFydC0xIGNvbC1lbmQtMSByb3ctc3RhcnQtMSByb3ctZW5kLTEgcG9pbnRlci1ldmVudHMtbm9uZVwiXG4gICAgICAgIHN0eWxlOm9wYWNpdHk9eyhpbmZvTW9kYWxWaXNpYmxlIHx8IHNldHRpbmdzTW9kYWxWaXNpYmxlIHx8IGJvb2ttYXJrc01vZGFsVmlzaWJsZSkgPyAwIDogMX1cbiAgICAgICAgdXNlOnJlc2l6ZT17KHdpZHRoLCBoZWlnaHQpID0+IHtcbiAgICAgICAgICAgIGxheW91dCA9ICh3aWR0aCA+IGhlaWdodCkgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgICAgICAgICAgbGF5b3V0U2lkZSA9ICh3aWR0aCA+IGhlaWdodCkgPyAnZW5kJyA6ICdzdGFydCc7XG4gICAgICAgIH19XG4gICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzcz1cInctZnVsbCBoLWZ1bGwgZmxleCBpdGVtcy1jZW50ZXIgcC00XCJcbiAgICAgICAgICAgIHN0eWxlOmZsZXgtZGlyZWN0aW9uPXtsYXlvdXQgPT0gJ3ZlcnRpY2FsJyA/ICdyb3cnIDogJ2NvbHVtbid9XG4gICAgICAgICAgICBzdHlsZTpqdXN0aWZ5LWNvbnRlbnQ9e2xheW91dFNpZGUgPT0gJ3N0YXJ0JyA/ICdzdGFydCcgOiAnZW5kJ31cbiAgICAgICAgPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzPVwicG9pbnRlci1ldmVudHMtYXV0byBmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlxuICAgICAgICAgICAgICAgIHJvdW5kZWQtZnVsbCBiZy13aGl0ZSBiZy1vcGFjaXR5LTMwIGJhY2tkcm9wLWJsdXItbWQgc2hhZG93LWxnXG4gICAgICAgICAgICAgICAgdGV4dC13aGl0ZSBmb250LWJvbGQgc3Ryb2tlLVszXVwiXG4gICAgICAgICAgICAgICAgc3R5bGU6ZmxleC1kaXJlY3Rpb249e2xheW91dCA9PSAndmVydGljYWwnID8gJ2NvbHVtbicgOiAncm93J31cbiAgICAgICAgICAgICAgICBzdHlsZTpwYWRkaW5nPXtsYXlvdXQgPT0gJ3ZlcnRpY2FsJyA/ICcxcmVtIDAuNXJlbScgOiAnMC41cmVtIDFyZW0nfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJyb3VuZGVkLWZ1bGwgZHJvcC1zaGFkb3ctc21cIlxuICAgICAgICAgICAgICAgICAgICBvbjpjbGljaz17KCkgPT4gaW5mb01vZGFsVmlzaWJsZSA9IHRydWV9XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiSW5mb3JtYXRpb25cIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPEx1Y2lkZUluZm8gLz5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwicm91bmRlZC1mdWxsIGRyb3Atc2hhZG93LXNtXCJcbiAgICAgICAgICAgICAgICAgICAgb246Y2xpY2s9eygpID0+IHNldHRpbmdzTW9kYWxWaXNpYmxlID0gdHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJTZXR0aW5nc1wiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8THVjaWRlU2V0dGluZ3MgLz5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwicm91bmRlZC1mdWxsIGRyb3Atc2hhZG93LXNtXCJcbiAgICAgICAgICAgICAgICAgICAgb246Y2xpY2s9eygpID0+IGJvb2ttYXJrc01vZGFsVmlzaWJsZSA9IHRydWV9XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiQm9va21hcmtzXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxMdWNpZGVCb29rbWFyayAvPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ3LWZ1bGwgaC1mdWxsIGJnLXdoaXRlIHJvdW5kZWQtZnVsbCBwLVsxcHhdXCIgLz5cbiAgICAgICAgICAgICAgICA8RGVhdGhDb3VudGVyIHtsYXlvdXR9IHt3b3JsZH0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZGl2PlxuXG48TW9kYWwgYmluZDp2aXNpYmxlPXtpbmZvTW9kYWxWaXNpYmxlfT5cbiAgICA8SW5mb01vZGFsIC8+XG48L01vZGFsPlxuXG48TW9kYWwgYmluZDp2aXNpYmxlPXtzZXR0aW5nc01vZGFsVmlzaWJsZX0+XG4gICAgPFNldHRpbmdzTW9kYWwgYmluZDpzYXZlU2xvdCAvPlxuPC9Nb2RhbD5cblxuPE1vZGFsIGJpbmQ6dmlzaWJsZT17Ym9va21hcmtzTW9kYWxWaXNpYmxlfT5cbiAgICA8Qm9va21hcmtzTW9kYWwgYmluZDp2aXNpYmxlPXtib29rbWFya3NNb2RhbFZpc2libGV9IHt2aWV3cG9ydH0gYmluZDpib29rbWFya3MgLz5cbjwvTW9kYWw+XG4iXSwibmFtZXMiOlsiZW5zdXJlX2FycmF5X2xpa2UiLCJhcnJheV9saWtlX29yX2l0ZXJhdG9yIiwiZ2V0X3NwcmVhZF91cGRhdGUiLCJsZXZlbHMiLCJ1cGRhdGVzIiwidXBkYXRlIiwidG9fbnVsbF9vdXQiLCJhY2NvdW50ZWRfZm9yIiwiaSIsIm8iLCJuIiwia2V5IiwiZ2V0X3NwcmVhZF9vYmplY3QiLCJzcHJlYWRfcHJvcHMiLCJDSFVOS19TSVpFIiwic3BsaXRtaXgzMiIsImEiLCJub3JtYWxSYW5nZSIsInQiLCJ2IiwiaGFzaE5vcm1hbCIsInNlZWQiLCJ4IiwieSIsInoiLCJoYXNoVmFsdWUiLCJ3ZWlnaHRJbmRleCIsIndlaWdodHMiLCJ2YWx1ZSIsInRvdGFsIiwid2VpZ2h0Iiwidm9yb25vaV9ub2lzZTJkIiwiY2xvc2VzdERpc3QiLCJjbG9zZXN0VHlwZSIsImoiLCJwb2ludFgiLCJwb2ludFkiLCJkaXN0IiwicGVybGluX25vaXNlMmQiLCJpbnRlcnBvbGF0ZSIsImEwIiwiYTEiLCJyYW5kb21HcmFkaWVudCIsImFuZ2xlIiwiZG90R3JpZEdyYWRpZW50IiwiaXgiLCJpeSIsImdyYWRpZW50IiwiZHgiLCJkeSIsIngwIiwieDEiLCJ5MCIsInkxIiwic3giLCJzeSIsIlpfRklYRUQiLCJaX0JJTkFSWSIsIlpfVEVYVCIsIlpfVU5LTk9XTiIsInplcm8iLCJidWYiLCJsZW4iLCJTVE9SRURfQkxPQ0siLCJTVEFUSUNfVFJFRVMiLCJEWU5fVFJFRVMiLCJNSU5fTUFUQ0giLCJNQVhfTUFUQ0giLCJMRU5HVEhfQ09ERVMiLCJMSVRFUkFMUyIsIkxfQ09ERVMiLCJEX0NPREVTIiwiQkxfQ09ERVMiLCJIRUFQX1NJWkUiLCJNQVhfQklUUyIsIkJ1Zl9zaXplIiwiTUFYX0JMX0JJVFMiLCJFTkRfQkxPQ0siLCJSRVBfM182IiwiUkVQWl8zXzEwIiwiUkVQWl8xMV8xMzgiLCJleHRyYV9sYml0cyIsImV4dHJhX2RiaXRzIiwiZXh0cmFfYmxiaXRzIiwiYmxfb3JkZXIiLCJESVNUX0NPREVfTEVOIiwic3RhdGljX2x0cmVlIiwic3RhdGljX2R0cmVlIiwiX2Rpc3RfY29kZSIsIl9sZW5ndGhfY29kZSIsImJhc2VfbGVuZ3RoIiwiYmFzZV9kaXN0IiwiU3RhdGljVHJlZURlc2MiLCJzdGF0aWNfdHJlZSIsImV4dHJhX2JpdHMiLCJleHRyYV9iYXNlIiwiZWxlbXMiLCJtYXhfbGVuZ3RoIiwic3RhdGljX2xfZGVzYyIsInN0YXRpY19kX2Rlc2MiLCJzdGF0aWNfYmxfZGVzYyIsIlRyZWVEZXNjIiwiZHluX3RyZWUiLCJzdGF0X2Rlc2MiLCJkX2NvZGUiLCJwdXRfc2hvcnQiLCJzIiwidyIsInNlbmRfYml0cyIsImxlbmd0aCIsInNlbmRfY29kZSIsImMiLCJ0cmVlIiwiYmlfcmV2ZXJzZSIsImNvZGUiLCJyZXMiLCJiaV9mbHVzaCIsImdlbl9iaXRsZW4iLCJkZXNjIiwibWF4X2NvZGUiLCJzdHJlZSIsImhhc19zdHJlZSIsImV4dHJhIiwiYmFzZSIsImgiLCJtIiwiYml0cyIsInhiaXRzIiwiZiIsIm92ZXJmbG93IiwiZ2VuX2NvZGVzIiwiYmxfY291bnQiLCJuZXh0X2NvZGUiLCJ0cl9zdGF0aWNfaW5pdCIsImluaXRfYmxvY2siLCJiaV93aW5kdXAiLCJzbWFsbGVyIiwiZGVwdGgiLCJfbjIiLCJfbTIiLCJwcWRvd25oZWFwIiwiayIsImNvbXByZXNzX2Jsb2NrIiwibHRyZWUiLCJkdHJlZSIsImxjIiwiYnVpbGRfdHJlZSIsIm5vZGUiLCJzY2FuX3RyZWUiLCJwcmV2bGVuIiwiY3VybGVuIiwibmV4dGxlbiIsImNvdW50IiwibWF4X2NvdW50IiwibWluX2NvdW50Iiwic2VuZF90cmVlIiwiYnVpbGRfYmxfdHJlZSIsIm1heF9ibGluZGV4Iiwic2VuZF9hbGxfdHJlZXMiLCJsY29kZXMiLCJkY29kZXMiLCJibGNvZGVzIiwicmFuayIsImRldGVjdF9kYXRhX3R5cGUiLCJibG9ja19tYXNrIiwic3RhdGljX2luaXRfZG9uZSIsIl90cl9pbml0IiwiX3RyX3N0b3JlZF9ibG9jayIsInN0b3JlZF9sZW4iLCJsYXN0IiwiX3RyX2FsaWduIiwiX3RyX2ZsdXNoX2Jsb2NrIiwib3B0X2xlbmIiLCJzdGF0aWNfbGVuYiIsIl90cl90YWxseSIsInRyZWVzIiwiYWRsZXIzMiIsImFkbGVyIiwicG9zIiwiczEiLCJzMiIsImFkbGVyMzJfMSIsIm1ha2VUYWJsZSIsInRhYmxlIiwiY3JjVGFibGUiLCJjcmMzMiIsImNyYyIsImVuZCIsImNyYzMyXzEiLCJtZXNzYWdlcyIsImNvbnN0YW50cyIsInJlcXVpcmUkJDAiLCJyZXF1aXJlJCQxIiwicmVxdWlyZSQkMiIsIm1zZyIsInJlcXVpcmUkJDMiLCJaX05PX0ZMVVNIIiwiWl9QQVJUSUFMX0ZMVVNIIiwiWl9GVUxMX0ZMVVNIIiwiWl9GSU5JU0giLCJaX0JMT0NLIiwiWl9PSyIsIlpfU1RSRUFNX0VORCIsIlpfU1RSRUFNX0VSUk9SIiwiWl9EQVRBX0VSUk9SIiwiWl9CVUZfRVJST1IiLCJaX0RFRkFVTFRfQ09NUFJFU1NJT04iLCJaX0ZJTFRFUkVEIiwiWl9IVUZGTUFOX09OTFkiLCJaX1JMRSIsIlpfREVGQVVMVF9TVFJBVEVHWSIsIlpfREVGTEFURUQiLCJyZXF1aXJlJCQ0IiwiTUFYX01FTV9MRVZFTCIsIk1BWF9XQklUUyIsIkRFRl9NRU1fTEVWRUwiLCJNSU5fTE9PS0FIRUFEIiwiUFJFU0VUX0RJQ1QiLCJJTklUX1NUQVRFIiwiR1pJUF9TVEFURSIsIkVYVFJBX1NUQVRFIiwiTkFNRV9TVEFURSIsIkNPTU1FTlRfU1RBVEUiLCJIQ1JDX1NUQVRFIiwiQlVTWV9TVEFURSIsIkZJTklTSF9TVEFURSIsIkJTX05FRURfTU9SRSIsIkJTX0JMT0NLX0RPTkUiLCJCU19GSU5JU0hfU1RBUlRFRCIsIkJTX0ZJTklTSF9ET05FIiwiT1NfQ09ERSIsImVyciIsInN0cm0iLCJlcnJvckNvZGUiLCJzbGlkZV9oYXNoIiwicCIsIndzaXplIiwiSEFTSF9aTElCIiwicHJldiIsImRhdGEiLCJIQVNIIiwiZmx1c2hfcGVuZGluZyIsImZsdXNoX2Jsb2NrX29ubHkiLCJwdXRfYnl0ZSIsImIiLCJwdXRTaG9ydE1TQiIsInJlYWRfYnVmIiwic3RhcnQiLCJzaXplIiwibG9uZ2VzdF9tYXRjaCIsImN1cl9tYXRjaCIsImNoYWluX2xlbmd0aCIsInNjYW4iLCJtYXRjaCIsImJlc3RfbGVuIiwibmljZV9tYXRjaCIsImxpbWl0IiwiX3dpbiIsIndtYXNrIiwic3RyZW5kIiwic2Nhbl9lbmQxIiwic2Nhbl9lbmQiLCJmaWxsX3dpbmRvdyIsIl93X3NpemUiLCJtb3JlIiwic3RyIiwiZGVmbGF0ZV9zdG9yZWQiLCJmbHVzaCIsIm1pbl9ibG9jayIsImxlZnQiLCJoYXZlIiwidXNlZCIsImRlZmxhdGVfZmFzdCIsImhhc2hfaGVhZCIsImJmbHVzaCIsImRlZmxhdGVfc2xvdyIsIm1heF9pbnNlcnQiLCJkZWZsYXRlX3JsZSIsImRlZmxhdGVfaHVmZiIsIkNvbmZpZyIsImdvb2RfbGVuZ3RoIiwibWF4X2xhenkiLCJuaWNlX2xlbmd0aCIsIm1heF9jaGFpbiIsImZ1bmMiLCJjb25maWd1cmF0aW9uX3RhYmxlIiwibG1faW5pdCIsIkRlZmxhdGVTdGF0ZSIsImRlZmxhdGVTdGF0ZUNoZWNrIiwiZGVmbGF0ZVJlc2V0S2VlcCIsImRlZmxhdGVSZXNldCIsInJldCIsImRlZmxhdGVTZXRIZWFkZXIiLCJoZWFkIiwiZGVmbGF0ZUluaXQyIiwibGV2ZWwiLCJtZXRob2QiLCJ3aW5kb3dCaXRzIiwibWVtTGV2ZWwiLCJzdHJhdGVneSIsIndyYXAiLCJkZWZsYXRlSW5pdCIsImRlZmxhdGUiLCJvbGRfZmx1c2giLCJoZWFkZXIiLCJsZXZlbF9mbGFncyIsImJlZyIsImNvcHkiLCJnemhlYWRfZXh0cmEiLCJ2YWwiLCJic3RhdGUiLCJkZWZsYXRlRW5kIiwic3RhdHVzIiwiZGVmbGF0ZVNldERpY3Rpb25hcnkiLCJkaWN0aW9uYXJ5IiwiZGljdExlbmd0aCIsInRtcERpY3QiLCJhdmFpbCIsIm5leHQiLCJpbnB1dCIsImRlZmxhdGVfMSIsIl9oYXMiLCJvYmoiLCJjb21tb24iLCJzb3VyY2VzIiwic291cmNlIiwiY2h1bmtzIiwibCIsInJlc3VsdCIsImNodW5rIiwiU1RSX0FQUExZX1VJQV9PSyIsIl91dGY4bGVuIiwicSIsInN0cmluZ3MiLCJjMiIsIm1fcG9zIiwic3RyX2xlbiIsImJ1Zl9sZW4iLCJidWYyYmluc3RyaW5nIiwibWF4Iiwib3V0IiwidXRmMTZidWYiLCJjX2xlbiIsIlpTdHJlYW0iLCJ6c3RyZWFtIiwiemxpYl9kZWZsYXRlIiwidXRpbHMiLCJ0b1N0cmluZyIsIlpfU1lOQ19GTFVTSCIsInJlcXVpcmUkJDUiLCJEZWZsYXRlIiwib3B0aW9ucyIsIm9wdCIsImRpY3QiLCJmbHVzaF9tb2RlIiwiY2h1bmtTaXplIiwiX2ZsdXNoX21vZGUiLCJkZWZsYXRvciIsImRlZmxhdGVSYXciLCJnemlwIiwiQkFEIiwiVFlQRSIsImluZmZhc3QiLCJfaW4iLCJfb3V0IiwiZG1heCIsIndoYXZlIiwid25leHQiLCJzX3dpbmRvdyIsImhvbGQiLCJsY29kZSIsImRjb2RlIiwibG1hc2siLCJkbWFzayIsImhlcmUiLCJvcCIsImZyb20iLCJmcm9tX3NvdXJjZSIsIm91dHB1dCIsInN0YXRlIiwidG9wIiwiZG9sZW4iLCJkb2Rpc3QiLCJNQVhCSVRTIiwiRU5PVUdIX0xFTlMiLCJFTk9VR0hfRElTVFMiLCJDT0RFUyIsIkxFTlMiLCJESVNUUyIsImxiYXNlIiwibGV4dCIsImRiYXNlIiwiZGV4dCIsImluZmxhdGVfdGFibGUiLCJ0eXBlIiwibGVucyIsImxlbnNfaW5kZXgiLCJjb2RlcyIsInRhYmxlX2luZGV4Iiwid29yayIsIm9wdHMiLCJzeW0iLCJtaW4iLCJyb290IiwiY3VyciIsImRyb3AiLCJodWZmIiwiaW5jciIsImZpbGwiLCJsb3ciLCJtYXNrIiwib2ZmcyIsImhlcmVfYml0cyIsImhlcmVfb3AiLCJoZXJlX3ZhbCIsImluZnRyZWVzIiwiaW5mbGF0ZV9mYXN0IiwiWl9UUkVFUyIsIlpfTkVFRF9ESUNUIiwiWl9NRU1fRVJST1IiLCJIRUFEIiwiRkxBR1MiLCJUSU1FIiwiT1MiLCJFWExFTiIsIkVYVFJBIiwiTkFNRSIsIkNPTU1FTlQiLCJIQ1JDIiwiRElDVElEIiwiRElDVCIsIlRZUEVETyIsIlNUT1JFRCIsIkNPUFlfIiwiQ09QWSIsIlRBQkxFIiwiTEVOTEVOUyIsIkNPREVMRU5TIiwiTEVOXyIsIkxFTiIsIkxFTkVYVCIsIkRJU1QiLCJESVNURVhUIiwiTUFUQ0giLCJMSVQiLCJDSEVDSyIsIkxFTkdUSCIsIkRPTkUiLCJNRU0iLCJTWU5DIiwiREVGX1dCSVRTIiwienN3YXAzMiIsIkluZmxhdGVTdGF0ZSIsImluZmxhdGVTdGF0ZUNoZWNrIiwiaW5mbGF0ZVJlc2V0S2VlcCIsImluZmxhdGVSZXNldCIsImluZmxhdGVSZXNldDIiLCJpbmZsYXRlSW5pdDIiLCJpbmZsYXRlSW5pdCIsInZpcmdpbiIsImxlbmZpeCIsImRpc3RmaXgiLCJmaXhlZHRhYmxlcyIsInVwZGF0ZXdpbmRvdyIsInNyYyIsImluZmxhdGUiLCJwdXQiLCJsYXN0X2JpdHMiLCJsYXN0X29wIiwibGFzdF92YWwiLCJoYnVmIiwib3JkZXIiLCJpbmZfbGVhdmUiLCJpbmZsYXRlRW5kIiwiaW5mbGF0ZUdldEhlYWRlciIsImluZmxhdGVTZXREaWN0aW9uYXJ5IiwiZGljdGlkIiwiaW5mbGF0ZV8xIiwiR1poZWFkZXIiLCJnemhlYWRlciIsInpsaWJfaW5mbGF0ZSIsInJlcXVpcmUkJDYiLCJJbmZsYXRlIiwibGFzdF9hdmFpbF9vdXQiLCJuZXh0X291dF91dGY4IiwidGFpbCIsInV0ZjhzdHIiLCJpbmZsYXRvciIsImluZmxhdGVSYXciLCJ1bmd6aXAiLCJwYWtvIiwiSU9fMSIsIklPX0RFRkFVTFRfRVhQRUNURURfTEVOR1RIIiwiSU9fRVhQRUNUX0VYVFJBX1NJWkUiLCJCYXNlSU8iLCJfX3B1YmxpY0ZpZWxkIiwicG9pbnRlciIsImJ5dGVzIiwiZXhwYW5kZWQiLCJJTyIsInNsaWNlIiwiYnl0ZSIsImJ1ZmZlciIsIkJpdElPIiwiYml0UG9pbnRlciIsInNldCIsIm51bUJpdHMiLCJVdGlsIiwiZGVjb2RlQmlnSW50IiwiZGVjb2RlSW5kZXgiLCJlbmNvZGVCaWdJbnQiLCJlbmNvZGVJbmRleCIsImhhc2hTdHIiLCJoZXgiLCJzdHJpbmdTb3J0IiwiaGFzaCIsImJ5dGVMZW5ndGgiLCJzaWduZWQiLCJpbyIsIm5lZ2F0aXZlIiwic2hpZnQiLCJjdHgiLCJpbmRleCIsImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJ2ZXJzaW9uIiwiVkVSU0lPTiIsIl9oYXNCdWZmZXIiLCJfVEQiLCJfVEUiLCJiNjRjaCIsImI2NGNocyIsImI2NHRhYiIsInRhYiIsImI2NHJlIiwiX2Zyb21DQyIsIl9VOEFmcm9tIiwiaXQiLCJfbWtVcmlTYWZlIiwibTAiLCJfdGlkeUI2NCIsImJ0b2FQb2x5ZmlsbCIsImJpbiIsInUzMiIsImMwIiwiYzEiLCJhc2MiLCJwYWQiLCJfYnRvYSIsIl9mcm9tVWludDhBcnJheSIsInU4YSIsIm1heGFyZ3MiLCJzdHJzIiwiZnJvbVVpbnQ4QXJyYXkiLCJ1cmxzYWZlIiwiY2JfdXRvYiIsImNjIiwicmVfdXRvYiIsInV0b2IiLCJ1IiwiX2VuY29kZSIsImVuY29kZSIsImVuY29kZVVSSSIsInJlX2J0b3UiLCJjYl9idG91IiwiY2NjYyIsImNwIiwib2Zmc2V0IiwiYnRvdSIsImF0b2JQb2x5ZmlsbCIsInUyNCIsInIxIiwicjIiLCJfYXRvYiIsIl90b1VpbnQ4QXJyYXkiLCJ0b1VpbnQ4QXJyYXkiLCJfdW5VUkkiLCJfZGVjb2RlIiwiZGVjb2RlIiwiaXNWYWxpZCIsIl9ub0VudW0iLCJleHRlbmRTdHJpbmciLCJfYWRkIiwibmFtZSIsImJvZHkiLCJleHRlbmRVaW50OEFycmF5IiwiZXh0ZW5kQnVpbHRpbnMiLCJnQmFzZTY0IiwiUGFyc2VyXzEiLCJfcGFrbyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfSU8iLCJfVXRpbCIsIl9qc0Jhc2UiLCJjb21wcmVzcyIsImRlY29tcHJlc3MiLCJlbmNvZGVCYXNlNjQiLCJ1cmxTYWZlIiwiZGVjb2RlQmFzZTY0IiwiUGFyc2VyIiwiRW5jb2RlQ29udGV4dCIsImVuY29kZWQiLCJEZWNvZGVDb250ZXh0IiwiRkxBR19CT0RZX0NPTVBSRVNTRUQiLCJGTEFHX0JJVEZJRUxEX0NPTVBSRVNTRUQiLCJiYXNlVHlwZSIsImNvbXByZXNzZWQiLCJwdXRGbGFncyIsImJpdEZpZWxkQ29tcHJlc3NlZCIsImJpdEZpZWxkIiwiYm9keUNvbXByZXNzZWQiLCJtYWdpYyIsImZsYWdzIiwiYml0RmllbGRMZW5ndGgiLCJNb2RpZnlIYXNoIiwiX1BhcnNlciIsIk1vZGlmeUhhc2hQYXJzZXIiLCJtb2RpZmllciIsInBhcnNlciIsIkJpZ0ludCIsIkJpZ0ludFBhcnNlciIsIkJpbmFyeSIsIl9CaWdJbnQiLCJCaW5hcnlQYXJzZXIiLCJfTnVtYmVyIiwiTnVtYmVyUGFyc2VyIiwibnVtYmVyIiwiX1N0cmluZyIsIl9CaW5hcnkiLCJTdHJpbmdQYXJzZXIiLCJfQm9vbGVhbiIsIkJvb2xlYW5QYXJzZXIiLCJOdWxsYWJsZSIsIk51bGxhYmxlUGFyc2VyIiwiX09iamVjdCIsIk9iamVjdFBhcnNlciIsIm9ialR5cGUiLCJfQXJyYXkiLCJBcnJheVBhcnNlciIsImFyclR5cGUiLCJhcnIiLCJpdGVtIiwiX01hcCIsIk1hcFBhcnNlciIsImtleVR5cGUiLCJ2YWx1ZVR5cGUiLCJtYXAiLCJfRGF0ZSIsIkRhdGVQYXJzZXIiLCJkYXRlIiwiVHVwbGUiLCJUdXBsZVBhcnNlciIsImVsZW1lbnRUeXBlcyIsInR1cGxlIiwiQnJhbmNoIiwiQnJhbmNoUGFyc2VyIiwiYnJhbmNoVHlwZXMiLCJrZXkxIiwia2V5MiIsImtleUluZGV4IiwiQnJhbmNoQnlLZXkiLCJCcmFuY2hCeUtleVBhcnNlciIsImJyYW5jaFR5cGVNYXAiLCJFbnVtIiwiRW51bVBhcnNlciIsInZhbHVlcyIsIkVudW1GYWxsYmFjayIsIkVudW1GYWxsYmFja1BhcnNlciIsImV4cG9ydHMiLCJfQnJhbmNoQnlLZXkiLCJfQnJhbmNoIiwiX0VudW1GYWxsYmFjayIsIl9FbnVtIiwiX01vZGlmeUhhc2giLCJfTnVsbGFibGUiLCJfVHVwbGUiLCJhcnJheSIsImJpZ2ludCIsImJpbmFyeSIsImJvb2xlYW4iLCJicmFuY2giLCJicmFuY2hCeUtleSIsIl9lbnVtIiwiZW51bUZhbGxiYWNrIiwibW9kaWZ5aGFzaCIsIm51bGxhYmxlIiwib2JqZWN0Iiwic3RyaW5nIiwicmVxdWlyZSQkNyIsInJlcXVpcmUkJDgiLCJyZXF1aXJlJCQ5IiwicmVxdWlyZSQkMTAiLCJyZXF1aXJlJCQxMSIsInJlcXVpcmUkJDEyIiwicmVxdWlyZSQkMTMiLCJyZXF1aXJlJCQxNCIsInJlcXVpcmUkJDE1IiwicmVxdWlyZSQkMTYiLCJyZXF1aXJlJCQxNyIsInJlcXVpcmUkJDE4IiwidHVwbGVUeXBlcyIsImNsYW1wTm9ybWFsIiwiZGlzdGFuY2UiLCJ4MiIsInkyIiwibWFwUmFuZ2UiLCJ2YWx1ZU1pbiIsInZhbHVlTWF4Iiwib3V0TWluIiwib3V0TWF4IiwibWFwUmFuZ2VJbnQiLCJiaXRzVG9SZXByZXNlbnRWYWx1ZSIsInNwaXJhbEl0ZXIiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImQiLCJjcmVhdGVDYW52YXMyZENvbnRleHQiLCJjYW52YXMiLCJhd2FpdEltYWdlTG9hZCIsImltZyIsInJlc29sdmUiLCJyZWplY3QiLCJvbkxvYWQiLCJvbkVycm9yIiwiZXYiLCJUSUxFX05PTkVfTkVBUkJZIiwiVGlsZSIsIndvcmxkIiwidXNlQ2FjaGUiLCJub25lIiwiY2h1bmtQb3NYIiwiY2h1bmtQb3NZIiwiZGVhdGgiLCJNdWx0aU1pbmVUaWxlIiwibnVtTWluZXMiLCJ0aWxlIiwiQmx1ZWJlcnJ5VGlsZSIsIlNpbmdsZU1pbmVUaWxlU3RhdGUiLCJTaW5nbGVNaW5lVGlsZVN0YXRlMiIsIlNpbmdsZU1pbmVUaWxlIiwiaXNNaW5lIiwiQ2hvY29sYXRlVGlsZSIsIlN0cmF3YmVycnlUaWxlIiwibmVhcmJ5IiwibmVhcmJ5MiIsIndhZmZsZSIsImNoZWNrZXJTaXplIiwiY2hlY2tlclgiLCJjaGVja2VyWSIsImlzRGFyayIsImNoZWNrZXJJbmRleCIsImNoZWNrZXJSbmdQb3MiLCJXYWZmbGVUaWxlIiwiU3Ryb29wd2FmZWxUaWxlIiwiVmFuaWxsYVRpbGUiLCJTaW5nbGVBbnRpTWluZVRpbGVNaW5lcyIsIlNpbmdsZUFudGlNaW5lVGlsZU1pbmVzMiIsIlNpbmdsZUFudGlNaW5lVGlsZVN0YXRlIiwiU2luZ2xlQW50aU1pbmVUaWxlU3RhdGUyIiwiU2luZ2xlQW50aU1pbmVUaWxlIiwibWluZSIsIkNvb2tpZXNBbmRDcmVhbVRpbGUiLCJpc0FudGkiLCJCaW9tZXMiLCJzbW9vdGhOb2lzeVZvcm9ub2kiLCJyYW5kb20iLCJnZXRUaWxlVHlwZSIsImJpb21lIiwiZ2VuZXJhdGVUaWxlIiwidGlsZUNvbnN0cnVjdG9yIiwiQ2h1bmsiLCJjaHVua1giLCJjaHVua1kiLCJHZW5lcmF0ZWRDaHVuayIsInRpbGVzIiwidGlsZVgiLCJ0aWxlWSIsImNodW5rVGlsZVgiLCJjaHVua1RpbGVZIiwiYnQuQml0SU8iLCJzYXZlZENodW5rIiwiSURfTlVNIiwiZ2V0SWQiLCJFdmVudERpc3BhdGNoZXIiLCJsaXN0ZW5lcnMiLCJsaXN0ZW5lciIsImNhbGxiYWNrZm4iLCJvbmNlIiwicHJpb3JpdHkiLCJzdG9wIiwicmVtb3ZlIiwicmVtb3ZlZCIsIldvcmxkIiwicm5nIiwiZGVhdGhDaHVuayIsImxvYWRlZENodW5rIiwiZ2VuQ2h1bmsiLCJwcmV2TnVtRmxhZ3MiLCJjdXJyZW50TnVtRmxhZ3MiLCJyZXZlYWwiLCJzdGFjayIsIm5lYXJieVNlY29uZGFyeSIsIm5UaWxlIiwiciIsIl9jaHVua0Nvb3JkIiwiY2h1bmtDb29yZCIsInNhdmUiLCJjb29yZCIsIl8iLCJjaHVua1hzdHIiLCJjaHVua1lzdHIiLCJWaWV3cG9ydCIsInZpZXdwb3J0IiwibmV3U2NhbGUiLCJhcm91bmRYIiwiYXJvdW5kWSIsImxhc3RDZW50ZXJYIiwibGFzdENlbnRlclkiLCJjZW50ZXJYIiwiY2VudGVyWSIsInNjYWxlIiwibWluVGlsZXMiLCJtYXhUaWxlcyIsInJvdW5kIiwibWFyZ2luIiwibWluWCIsIm1pblkiLCJtYXhYIiwibWF4WSIsImJvdW5kcyIsImZsb29yIiwiY1giLCJjWSIsIm5ld1dvcmxkIiwic2F2ZVNsb3QiLCJvdmVyd3JpdGUiLCJjbG9zZXN0MCIsIm5ld1NhdmUiLCJzcGF3blgiLCJzcGF3blkiLCJsb2FkIiwiRl9TQVZFIiwiY2xlYXIiLCJGX0NIVU5LIiwiYnQub2JqZWN0IiwiYnQuYXJyYXkiLCJidC5udW1iZXIiLCJidC5kYXRlIiwiYnQuYmluYXJ5IiwiQ2h1bmtDb29yZGluYXRlUGFyc2VyIiwiYnQuUGFyc2VyIiwiYnQuaGFzaFN0ciIsImJ0LkJpZ0ludFBhcnNlciIsIkNodW5rQ29vcmRpbmF0ZU1hcFBhcnNlciIsIkZfV09STEQiLCJGX1ZJRVdQT1JUIiwiYnQubW9kaWZ5aGFzaCIsImJ0LnN0cmluZyIsInJlc2l6ZSIsIm9ic2VydmVyIiwiV29ybGRSZW5kZXJlciIsInRoZW1lIiwiUGFydGljbGUiLCJhbGl2ZSIsInJlbmRlcmVyIiwiZHQiLCJQYXJ0aWNsZUV4cGxvc2lvbiIsIlBhcnRpY2xlRmFrZVRpbGUiLCJQYXJ0aWNsZUZsYWciLCJpc011bHRpRmxhZyIsIm51bUZsYWdzIiwiUGFydGljbGVUaWxlUmV2ZWFsIiwiUGFydGljbGVSZW5kZXJlciIsInBhcnRpY2xlIiwiY3VycmVudEZyYW1lVGltZSIsInRvZ2dsZV9jbGFzcyIsImRpdiIsImluc2VydF9oeWRyYXRpb24iLCJ0YXJnZXQiLCJhbmNob3IiLCJkcmFnRGlzdGFuY2UiLCJjYW5jZWxEaXN0YW5jZSIsImRpc3BhdGNoZXIiLCJjcmVhdGVDb250cm9sbGVyRGlzcGF0Y2hlciIsIl9jbGFzcyIsIiQkcHJvcHMiLCJpbnB1dFR5cGVGcm9tTW91c2UiLCJzdGFydFgiLCJzdGFydFkiLCJkaXN0YW5jZUV4Y2VlZGVkIiwidGhyZXNob2xkIiwiJCRpbnZhbGlkYXRlIiwid2luZG93IiwiZG9jdW1lbnQiLCJleHBvcnROYW1lIiwidW5kZWZpbmVkIiwiVkVORE9SX1BSRUZJWEVTIiwiVEVTVF9FTEVNRU5UIiwiVFlQRV9GVU5DVElPTiIsImFicyIsIm5vdyIsInNldFRpbWVvdXRDb250ZXh0IiwiZm4iLCJ0aW1lb3V0IiwiY29udGV4dCIsImJpbmRGbiIsImludm9rZUFycmF5QXJnIiwiYXJnIiwiZWFjaCIsIml0ZXJhdG9yIiwiZGVwcmVjYXRlIiwibWVzc2FnZSIsImRlcHJlY2F0aW9uTWVzc2FnZSIsImUiLCJsb2ciLCJhc3NpZ24iLCJuZXh0S2V5IiwiZXh0ZW5kIiwiZGVzdCIsIm1lcmdlIiwia2V5cyIsImluaGVyaXQiLCJjaGlsZCIsInByb3BlcnRpZXMiLCJiYXNlUCIsImNoaWxkUCIsImJvb2xPckZuIiwiYXJncyIsImlmVW5kZWZpbmVkIiwidmFsMSIsInZhbDIiLCJhZGRFdmVudExpc3RlbmVycyIsInR5cGVzIiwiaGFuZGxlciIsInNwbGl0U3RyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJoYXNQYXJlbnQiLCJwYXJlbnQiLCJpblN0ciIsImZpbmQiLCJpbkFycmF5IiwiZmluZEJ5S2V5IiwidG9BcnJheSIsInVuaXF1ZUFycmF5Iiwic29ydCIsInJlc3VsdHMiLCJwcmVmaXhlZCIsInByb3BlcnR5IiwicHJlZml4IiwicHJvcCIsImNhbWVsUHJvcCIsIl91bmlxdWVJZCIsInVuaXF1ZUlkIiwiZ2V0V2luZG93Rm9yRWxlbWVudCIsImVsZW1lbnQiLCJkb2MiLCJNT0JJTEVfUkVHRVgiLCJTVVBQT1JUX1RPVUNIIiwiU1VQUE9SVF9QT0lOVEVSX0VWRU5UUyIsIlNVUFBPUlRfT05MWV9UT1VDSCIsIklOUFVUX1RZUEVfVE9VQ0giLCJJTlBVVF9UWVBFX1BFTiIsIklOUFVUX1RZUEVfTU9VU0UiLCJJTlBVVF9UWVBFX0tJTkVDVCIsIkNPTVBVVEVfSU5URVJWQUwiLCJJTlBVVF9TVEFSVCIsIklOUFVUX01PVkUiLCJJTlBVVF9FTkQiLCJJTlBVVF9DQU5DRUwiLCJESVJFQ1RJT05fTk9ORSIsIkRJUkVDVElPTl9MRUZUIiwiRElSRUNUSU9OX1JJR0hUIiwiRElSRUNUSU9OX1VQIiwiRElSRUNUSU9OX0RPV04iLCJESVJFQ1RJT05fSE9SSVpPTlRBTCIsIkRJUkVDVElPTl9WRVJUSUNBTCIsIkRJUkVDVElPTl9BTEwiLCJQUk9QU19YWSIsIlBST1BTX0NMSUVOVF9YWSIsIklucHV0IiwibWFuYWdlciIsImNhbGxiYWNrIiwic2VsZiIsImNyZWF0ZUlucHV0SW5zdGFuY2UiLCJUeXBlIiwiaW5wdXRDbGFzcyIsIlBvaW50ZXJFdmVudElucHV0IiwiVG91Y2hJbnB1dCIsIlRvdWNoTW91c2VJbnB1dCIsIk1vdXNlSW5wdXQiLCJpbnB1dEhhbmRsZXIiLCJldmVudFR5cGUiLCJwb2ludGVyc0xlbiIsImNoYW5nZWRQb2ludGVyc0xlbiIsImlzRmlyc3QiLCJpc0ZpbmFsIiwiY29tcHV0ZUlucHV0RGF0YSIsInNlc3Npb24iLCJwb2ludGVycyIsInBvaW50ZXJzTGVuZ3RoIiwic2ltcGxlQ2xvbmVJbnB1dERhdGEiLCJmaXJzdElucHV0IiwiZmlyc3RNdWx0aXBsZSIsIm9mZnNldENlbnRlciIsImNlbnRlciIsImdldENlbnRlciIsImdldEFuZ2xlIiwiZ2V0RGlzdGFuY2UiLCJjb21wdXRlRGVsdGFYWSIsImdldERpcmVjdGlvbiIsIm92ZXJhbGxWZWxvY2l0eSIsImdldFZlbG9jaXR5IiwiZ2V0U2NhbGUiLCJnZXRSb3RhdGlvbiIsImNvbXB1dGVJbnRlcnZhbElucHV0RGF0YSIsInByZXZEZWx0YSIsInByZXZJbnB1dCIsImRlbHRhVGltZSIsInZlbG9jaXR5IiwidmVsb2NpdHlYIiwidmVsb2NpdHlZIiwiZGlyZWN0aW9uIiwiZGVsdGFYIiwiZGVsdGFZIiwicDEiLCJwMiIsInByb3BzIiwiTU9VU0VfSU5QVVRfTUFQIiwiTU9VU0VfRUxFTUVOVF9FVkVOVFMiLCJNT1VTRV9XSU5ET1dfRVZFTlRTIiwiUE9JTlRFUl9JTlBVVF9NQVAiLCJJRTEwX1BPSU5URVJfVFlQRV9FTlVNIiwiUE9JTlRFUl9FTEVNRU5UX0VWRU5UUyIsIlBPSU5URVJfV0lORE9XX0VWRU5UUyIsInN0b3JlIiwicmVtb3ZlUG9pbnRlciIsImV2ZW50VHlwZU5vcm1hbGl6ZWQiLCJwb2ludGVyVHlwZSIsImlzVG91Y2giLCJzdG9yZUluZGV4IiwiU0lOR0xFX1RPVUNIX0lOUFVUX01BUCIsIlNJTkdMRV9UT1VDSF9UQVJHRVRfRVZFTlRTIiwiU0lOR0xFX1RPVUNIX1dJTkRPV19FVkVOVFMiLCJTaW5nbGVUb3VjaElucHV0IiwidG91Y2hlcyIsIm5vcm1hbGl6ZVNpbmdsZVRvdWNoZXMiLCJhbGwiLCJjaGFuZ2VkIiwiVE9VQ0hfSU5QVVRfTUFQIiwiVE9VQ0hfVEFSR0VUX0VWRU5UUyIsImdldFRvdWNoZXMiLCJhbGxUb3VjaGVzIiwidGFyZ2V0SWRzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiY2hhbmdlZFRhcmdldFRvdWNoZXMiLCJ0b3VjaCIsIkRFRFVQX1RJTUVPVVQiLCJERURVUF9ESVNUQU5DRSIsImlucHV0RXZlbnQiLCJpbnB1dERhdGEiLCJpc01vdXNlIiwicmVjb3JkVG91Y2hlcyIsImlzU3ludGhldGljRXZlbnQiLCJldmVudERhdGEiLCJzZXRMYXN0VG91Y2giLCJsYXN0VG91Y2giLCJsdHMiLCJyZW1vdmVMYXN0VG91Y2giLCJQUkVGSVhFRF9UT1VDSF9BQ1RJT04iLCJOQVRJVkVfVE9VQ0hfQUNUSU9OIiwiVE9VQ0hfQUNUSU9OX0NPTVBVVEUiLCJUT1VDSF9BQ1RJT05fQVVUTyIsIlRPVUNIX0FDVElPTl9NQU5JUFVMQVRJT04iLCJUT1VDSF9BQ1RJT05fTk9ORSIsIlRPVUNIX0FDVElPTl9QQU5fWCIsIlRPVUNIX0FDVElPTl9QQU5fWSIsIlRPVUNIX0FDVElPTl9NQVAiLCJnZXRUb3VjaEFjdGlvblByb3BzIiwiVG91Y2hBY3Rpb24iLCJhY3Rpb25zIiwicmVjb2duaXplciIsImNsZWFuVG91Y2hBY3Rpb25zIiwic3JjRXZlbnQiLCJoYXNOb25lIiwiaGFzUGFuWSIsImhhc1BhblgiLCJpc1RhcFBvaW50ZXIiLCJpc1RhcE1vdmVtZW50IiwiaXNUYXBUb3VjaFRpbWUiLCJ0b3VjaE1hcCIsImNzc1N1cHBvcnRzIiwiU1RBVEVfUE9TU0lCTEUiLCJTVEFURV9CRUdBTiIsIlNUQVRFX0NIQU5HRUQiLCJTVEFURV9FTkRFRCIsIlNUQVRFX1JFQ09HTklaRUQiLCJTVEFURV9DQU5DRUxMRUQiLCJTVEFURV9GQUlMRUQiLCJSZWNvZ25pemVyIiwib3RoZXJSZWNvZ25pemVyIiwic2ltdWx0YW5lb3VzIiwiZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlciIsInJlcXVpcmVGYWlsIiwiZW1pdCIsImV2ZW50Iiwic3RhdGVTdHIiLCJpbnB1dERhdGFDbG9uZSIsImRpcmVjdGlvblN0ciIsIkF0dHJSZWNvZ25pemVyIiwib3B0aW9uUG9pbnRlcnMiLCJpc1JlY29nbml6ZWQiLCJQYW5SZWNvZ25pemVyIiwiaGFzTW92ZWQiLCJQaW5jaFJlY29nbml6ZXIiLCJpbk91dCIsIlByZXNzUmVjb2duaXplciIsInZhbGlkUG9pbnRlcnMiLCJ2YWxpZE1vdmVtZW50IiwidmFsaWRUaW1lIiwiUm90YXRlUmVjb2duaXplciIsIlN3aXBlUmVjb2duaXplciIsIlRhcFJlY29nbml6ZXIiLCJ2YWxpZFRvdWNoVGltZSIsInZhbGlkSW50ZXJ2YWwiLCJ2YWxpZE11bHRpVGFwIiwidGFwQ291bnQiLCJIYW1tZXIiLCJNYW5hZ2VyIiwiU1RPUCIsIkZPUkNFRF9TVE9QIiwidG9nZ2xlQ3NzUHJvcHMiLCJmb3JjZSIsInJlY29nbml6ZXJzIiwiY3VyUmVjb2duaXplciIsImV4aXN0aW5nIiwiZXZlbnRzIiwiaGFuZGxlcnMiLCJ0cmlnZ2VyRG9tRXZlbnQiLCJhZGQiLCJnZXN0dXJlRXZlbnQiLCJmcmVlR2xvYmFsIiwiZGVmaW5lIiwiY29udGFpbmVyIiwibWMiLCJsYXN0UGFuIiwib25Nb3VudCIsInRhcFNpbmdsZSIsInRhcERvdWJsZSIsIm9uRGVzdHJveSIsIiQkdmFsdWUiLCJzcGFuIiwiY3JlYXRlRXZlbnREaXNwYXRjaGVyIiwiaW5wdXRNZXRob2QiLCJtb3ZlX2hhbmRsZXIiLCJ6b29tX2hhbmRsZXIiLCJpbnB1dF9oYW5kbGVyIiwibW92ZV9oYW5kbGVyXzEiLCJ6b29tX2hhbmRsZXJfMSIsImlucHV0X2hhbmRsZXJfMSIsInNhdmVfbm90X2VxdWFsIiwiTG9jYWxTdG9yYWdlV3JpdGFibGUiLCJzbG90IiwiX2RlZmF1bHQiLCJzdWJzY3JpcHRpb24iLCJ1cGRhdGVyIiwicnVuIiwiaW52YWxpZGF0ZSIsInN1YnNjcmliZXIiLCJhdXRvRGlzcGxheUluZm8iLCJ2b2x1bWUiLCJjYW52YXMwIiwiY2FudmFzMSIsIndvcmxkUmVuZGVyZXIiLCJ3b3JsZENhbnZhcyIsImluaXRXb3JsZFJlbmRlcmVyIiwid29ybGROZWVkc1JlcmVuZGVyIiwicmVuZGVyIiwicGFydGljbGVSZW5kZXJlciIsInBhcnRpY2xlQ2FudmFzIiwiaW5pdFBhcnRpY2xlUmVuZGVyZXIiLCJhbmltRnJhbWUiLCJ3b3JsZExpc3RlbmVyIiwidmlld3BvcnRMaXN0ZW5lciIsImlucHV0TWV0aG9kTGlzdGVuZXIiLCJjbGFtcGVkU2NhbGUiLCJyZXNpemVfZnVuY3Rpb24iLCJ3aWR0aCIsImhlaWdodCIsIlRleHR1cmVBdGxhcyIsInNyY09ySW1nIiwidGV4dHVyZXMiLCJ0ZXh0dXJlIiwic3ciLCJzaCIsIlRleHR1cmVBdGxhc0ltYWdlRGF0YSIsImF0bGFzV2lkdGgiLCJhdGxhc0hlaWdodCIsInJlY3RzIiwicmVjdCIsIlRoZW1lIiwic291bmQiLCJzb3VuZEVmZmVjdCIsImZpbmFsVm9sdW1lIiwiYXVkaW8iLCJvbkVuZGVkIiwiVGhlbWVSZXRybyIsIm1pbmVzTmVhcmJ5IiwiY292ZXJlZCIsInJldmVhbGVkIiwiZm9yY2VDb3ZlcmVkIiwibmVhcmJ5MSIsImV4cGxvc2lvblRleHR1cmVzIiwiY3JlYXRlX2lmX2Jsb2NrIiwiYm9va21hcmtzIiwiJHZvbHVtZSIsImRlZmF1bHRBdHRyaWJ1dGVzIiwiZGVmYXVsdEF0dHJpYnV0ZXMkMSIsInN2ZWx0ZV9lbGVtZW50IiwiY3JlYXRlX2R5bmFtaWNfZWxlbWVudCIsInN2Z19zdHJva2Vfd2lkdGhfdmFsdWUiLCJzdmdfY2xhc3NfdmFsdWUiLCJzdmciLCJjdXJyZW50IiwiZGlydHkiLCJjb2xvciIsInN0cm9rZVdpZHRoIiwiYWJzb2x1dGVTdHJva2VXaWR0aCIsImljb25Ob2RlIiwiaWNvbl9zcHJlYWRfbGV2ZWxzIiwiY3JlYXRlX2lmX2Jsb2NrXzEiLCJkaXYzIiwiYXBwZW5kX2h5ZHJhdGlvbiIsImRpdjAiLCJkaXYyIiwiZGl2MSIsImJ1dHRvbiIsInZpc2libGUiLCJjbG9zYWJsZSIsImJhY2tncm91bmRTdHlsZSIsImNsaWNrX2hhbmRsZXIiLCJjcmVhdGVfaWZfYmxvY2tfMiIsImNyZWF0ZV9pZl9ibG9ja18zIiwiY3JlYXRlX2lmX2Jsb2NrXzQiLCJjcmVhdGVfaWZfYmxvY2tfNSIsImNyZWF0ZV9pZl9ibG9ja182IiwiYnV0dG9uMCIsImJ1dHRvbjEiLCJiaW9tZU5hbWVzIiwiY3VycmVudEJpb21lIiwibmV3QmlvbWUiLCJkaXIiLCJidXR0b25fZGlzYWJsZWRfdmFsdWUiLCJ0YWJOYW1lcyIsImN1cnJlbnRUYWIiLCJ0YWJOYW1lIiwic2V0X3N0eWxlIiwibGF5b3V0IiwiZGVhdGhzIiwibGFzdFdvcmxkIiwidDRfdmFsdWUiLCJpZl9ibG9jayIsImxpIiwic2V0X2RhdGEiLCJ0MCIsInQwX3ZhbHVlIiwidDIiLCJ0Ml92YWx1ZSIsInQ0IiwidWwiLCJmb3JtIiwiZWFjaF9ibG9ja3MiLCJuZXdCb29rbWFya05hbWVJbnB1dCIsImJvb2ttYXJrIiwiYWRkX3JlbmRlcl9jYWxsYmFjayIsInNlbGVjdCIsImF0dHIiLCJpbnB1dDAiLCJpbnB1dDBfdGl0bGVfdmFsdWUiLCJkaXY1IiwiZGl2NCIsIm9wdGlvbjAiLCJvcHRpb24xIiwiaW5wdXQxIiwiY2xlYXJTYXZlQ29uZmlybVRpbWUiLCJjbGVhclNhdmVDb25maXJtVGltZW91dCIsImNsZWFyU2F2ZUNvbmZpcm0iLCIkaW5wdXRNZXRob2QiLCJzZWxlY3RfdmFsdWUiLCJzZXRfc3RvcmVfdmFsdWUiLCIkYXV0b0Rpc3BsYXlJbmZvIiwiYnV0dG9uMiIsImxheW91dFNpZGUiLCJpbmZvTW9kYWxWaXNpYmxlIiwic2V0dGluZ3NNb2RhbFZpc2libGUiLCJib29rbWFya3NNb2RhbFZpc2libGUiLCJjbGlja19oYW5kbGVyXzEiLCJjbGlja19oYW5kbGVyXzIiXSwibWFwcGluZ3MiOiIwdEJBS08sU0FBU0EsR0FBa0JDLEVBQXdCLENBQ3pELE9BQU9BLEdBQUEsWUFBQUEsRUFBd0IsVUFBVyxPQUN2Q0EsRUFDQSxNQUFNLEtBQUtBLENBQXNCLENBQ3JDLENDUk8sU0FBU0MsR0FBa0JDLEVBQVFDLEVBQVMsQ0FDbEQsTUFBTUMsRUFBUyxDQUFBLEVBQ1RDLEVBQWMsQ0FBQSxFQUNkQyxFQUFnQixDQUFFLFFBQVMsR0FDakMsSUFBSUMsRUFBSUwsRUFBTyxPQUNmLEtBQU9LLEtBQUssQ0FDWCxNQUFNQyxFQUFJTixFQUFPSyxDQUFDLEVBQ1pFLEVBQUlOLEVBQVFJLENBQUMsRUFDbkIsR0FBSUUsRUFBRyxDQUNOLFVBQVdDLEtBQU9GLEVBQ1hFLEtBQU9ELElBQUlKLEVBQVlLLENBQUcsRUFBSSxHQUVyQyxVQUFXQSxLQUFPRCxFQUNaSCxFQUFjSSxDQUFHLElBQ3JCTixFQUFPTSxDQUFHLEVBQUlELEVBQUVDLENBQUcsRUFDbkJKLEVBQWNJ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N0IsS0FBTSxDQUFFLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFDdkIsT0FBUSxDQUFFLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFDekIsT0FBUSxDQUFFLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFDekIsT0FBUSxDQUFFLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFDekIsVUFBVyxDQUFFLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFDNUIsWUFBYSxDQUFFLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFDOUIsWUFBYSxDQUFFLEdBQUksSUFBSyxHQUFJLEVBQUcsRUFDL0IsWUFBYSxDQUFFLEdBQUksSUFBSyxHQUFJLEVBQUcsRUFDL0IsU0FBVSxDQUFFLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFDMUIsU0FBVSxDQUFFLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFDM0IsU0FBVSxDQUFFLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFDM0IsU0FBVSxDQUFFLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFDM0IsU0FBVSxDQUFFLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFDM0IsU0FBVSxDQUFFLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFDM0IsU0FBVSxDQUFFLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFDM0IsU0FBVSxDQUFFLEdBQUksSUFBSyxHQUFJLEVBQUcsRUFDNUIsU0FBVSxDQUFFLEdBQUksSUFBSyxHQUFJLEVBQUcsRUFDNUIsU0FBVSxDQUFFLEdBQUksSUFBSyxHQUFJLEVBQUcsRUFDNUIsVUFBVyxDQUFFLEdBQUksSUFBSyxHQUFJLEVBQUcsRUFDN0IsVUFBVyxDQUFFLEdBQUksSUFBSyxHQUFJLEVBQUcsRUFDN0IsVUFBVyxDQUFFLEdBQUksSUFBSyxHQUFJLEVBQUcsRUFDN0IsVUFBVyxDQUFFLEdBQUksSUFBSyxHQUFJLEVBQUcsRUFDN0IsVUFBVyxDQUFFLEdBQUksSUFBSyxHQUFJLEVBQUcsRUFDN0IsVUFBVyxDQUFFLEdBQUksSUFBSyxHQUFJLEVBQUcsRUFDN0IsVUFBVyxDQUFFLEdBQUksSUFBSyxHQUFJLEVBQUcsRUFD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SyxHQUFHLEtBQUssUUFBUSxLQUFLQSxFQUFLLFdBQVksRUFBRyxFQUFHLEVBQUcsQ0FBQyxFQUFHLE1BQ3hELElBQUssR0FBRyxLQUFLLFFBQVEsS0FBS0EsRUFBSyxXQUFZLEVBQUcsRUFBRyxFQUFHLENBQUMsRUFBRyxNQUN4RCxJQUFLLEdBQUcsS0FBSyxRQUFRLEtBQUtBLEVBQUssV0FBWSxFQUFHLEVBQUcsRUFBRyxDQUFDLEVBQUcsTUFDeEQsSUFBSyxHQUFHLEtBQUssUUFBUSxLQUFLQSxFQUFLLFdBQVksRUFBRyxFQUFHLEVBQUcsQ0FBQyxFQUFHLE1BQ3hELElBQUssR0FBRyxLQUFLLFFBQVEsS0FBS0EsRUFBSyxXQUFZLEVBQUcsRUFBRyxFQUFHLENBQUMsRUFBRyxNQUN4RCxJQUFLLEdBQUcsS0FBSyxRQUFRLEtBQUtBLEVBQUssV0FBWSxFQUFHLEVBQUcsRUFBRyxDQUFDLEVBQUcsTUFDeEQsSUFBSyxHQUFHLEtBQUssUUFBUSxLQUFLQSxFQUFLLFdBQVksRUFBRyxFQUFHLEVBQUcsQ0FBQyxFQUFHLE1BQ3hELElBQUssR0FBRyxLQUFLLFFBQVEsS0FBS0EsRUFBSyxXQUFZLEVBQUcsRUFBRyxFQUFHLENBQUMsRUFBRyxNQUN4RCxJQUFLLEdBQUcsS0FBSyxRQUFRLEtBQUtBLEVBQUssV0FBWSxFQUFHLEVBQUcsRUFBRyxDQUFDLEVBQUcsTUFDeEQsSUFBSyxJQUFJLEtBQUssUUFBUSxLQUFLQSxFQUFLLFlBQWEsRUFBRyxFQUFHLEVBQUcsQ0FBQyxFQUFHLE1BQzFELElBQUssSUFBSSxLQUFLLFFBQVEsS0FBS0EsRUFBSyxZQUFhLEVBQUcsRUFBRyxFQUFHLENBQUMsRUFBRyxNQUMxRCxJQUFLLElBQUksS0FBSyxRQUFRLEtBQUtBLEVBQUssWUFBYSxFQUFHLEVBQUcsRUFBRyxDQUFDLEVBQUcsTUFDMUQsSUFBSyxJQUFJLEtBQUssUUFBUSxLQUFLQSxFQUFLLFlBQWEsRUFBRyxFQUFHLEVBQUcsQ0FBQyxFQUFHLE1BQzFELElBQUssSUFBSSxLQUFLLFFBQVEsS0FBS0EsRUFBSyxZ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SUEsRUFBb0IsQ0FBQSxHQUFJQSxFQUFxQixDQUFBLEVBQUksRUFBSSxDQUFDLGdGQThDN0VBLEVBQWdCLENBQUEsMEdBSWhCQSxFQUFvQixDQUFBLDRHQUlwQkEsRUFBcUIsQ0FBQSxrZ0JBbEZsQzBULEVBQW1CLE9BRW5CdWEsRUFBb0MsV0FDcENtQyxFQUE4QixNQUU5QkMsRUFBNEIsR0FDNUJDLEVBQWdDLEdBQ2hDQyxFQUFpQyxHQUVqQ3hqQixFQUNBcUYsRUFDQWtaLEVBQUEsQ0FBQSxFQUVKcEUsR0FBQSxJQUFBLENBQ09nSixPQUNDRyxFQUFtQixFQUFBLCtFQWlDSyxNQUFBckQsRUFBQSxJQUFBN1YsRUFBQSxFQUFBa1osRUFBbUIsRUFBSSxFQU92QkcsRUFBQSxJQUFBclosRUFBQSxFQUFBbVosRUFBdUIsRUFBSSxFQU8zQkcsRUFBQSxJQUFBdFosRUFBQSxFQUFBb1osRUFBd0IsRUFBSSxFQWpDM0M3RyxFQUFBLENBQUFDLEVBQU9DLElBQU0sQ0FDdEJ6UyxFQUFBLEVBQUE4VyxFQUFVdEUsRUFBUUMsRUFBVSxXQUFhLFlBQVksRUFDckR6UyxFQUFBLEVBQUFpWixFQUFjekcsRUFBUUMsRUFBVSxNQUFRLE9BQU8saUJBMkN0Q3lHLEVBQWdCbHZDLGdEQUloQm12QyxFQUFvQm52Qyx1QkFLUG92QyxFQUFxQnB2QyxnREFEbENvdkMsRUFBcUJwdkMiLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMCwxLDQsNSw2LDcsOCw5LDEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5LDIwLDIxLDIyLDIzLDI0LDI1LDI2LDI3LDI4LDI5LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDY4LDc3LDc4LDc5LDgxLDgyLDg1LDg3LDg4LDkwLDkyXX0=
