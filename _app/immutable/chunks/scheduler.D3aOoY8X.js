function k(){}function T(t,n){for(const e in n)t[e]=n[e];return t}function C(t){return t()}function Q(){return Object.create(null)}function P(t){t.forEach(C)}function H(t){return typeof t=="function"}function V(t,n){return t!=t?n==n:t!==n||t&&typeof t=="object"||typeof t=="function"}function X(t){return Object.keys(t).length===0}function B(t,...n){if(t==null){for(const i of n)i(void 0);return k}const e=t.subscribe(...n);return e.unsubscribe?()=>e.unsubscribe():e}function Y(t,n,e){t.$$.on_destroy.push(B(n,e))}function Z(t,n,e,i){if(t){const c=N(t,n,e,i);return t[0](c)}}function N(t,n,e,i){return t[1]&&i?T(e.ctx.slice(),t[1](i(n))):e.ctx}function $(t,n,e,i){if(t[2]&&i){const c=t[2](i(e));if(n.dirty===void 0)return c;if(typeof c=="object"){const o=[],r=Math.max(n.dirty.length,c.length);for(let s=0;s<r;s+=1)o[s]=n.dirty[s]|c[s];return o}return n.dirty|c}return n.dirty}function tt(t,n,e,i,c,o){if(c){const r=N(n,e,i,o);t.p(r,c)}}function nt(t){if(t.ctx.length>32){const n=[],e=t.ctx.length/32;for(let i=0;i<e;i++)n[i]=-1;return n}return-1}function et(t){const n={};for(const e in t)e[0]!=="$"&&(n[e]=t[e]);return n}function it(t,n){const e={};n=new Set(n);for(const i in t)!n.has(i)&&i[0]!=="$"&&(e[i]=t[i]);return e}function ct(t){return t&&H(t.destroy)?t.destroy:k}let m=!1;function rt(){m=!0}function lt(){m=!1}function L(t,n,e,i){for(;t<n;){const c=t+(n-t>>1);e(c)<=i?t=c+1:n=c}return t}function M(t){if(t.hydrate_init)return;t.hydrate_init=!0;let n=t.childNodes;if(t.nodeName==="HEAD"){const l=[];for(let a=0;a<n.length;a++){const u=n[a];u.claim_order!==void 0&&l.push(u)}n=l}const e=new Int32Array(n.length+1),i=new Int32Array(n.length);e[0]=-1;let c=0;for(let l=0;l<n.length;l++){const a=n[l].claim_order,u=(c>0&&n[e[c]].claim_order<=a?c+1:L(1,c,D=>n[e[D]].claim_order,a))-1;i[l]=e[u]+1;const E=u+1;e[E]=l,c=Math.max(E,c)}const o=[],r=[];let s=n.length-1;for(let l=e[c]+1;l!=0;l=i[l-1]){for(o.push(n[l-1]);s>=l;s--)r.push(n[s]);s--}for(;s>=0;s--)r.push(n[s]);o.reverse(),r.sort((l,a)=>l.claim_order-a.claim_order);for(let l=0,a=0;l<r.length;l++){for(;a<o.length&&r[l].claim_order>=o[a].claim_order;)a++;const u=a<o.length?o[a]:null;t.insertBefore(r[l],u)}}function O(t,n){if(m){for(M(t),(t.actual_end_child===void 0||t.actual_end_child!==null&&t.actual_end_child.parentNode!==t)&&(t.actual_end_child=t.firstChild);t.actual_end_child!==null&&t.actual_end_child.claim_order===void 0;)t.actual_end_child=t.actual_end_child.nextSibling;n!==t.actual_end_child?(n.claim_order!==void 0||n.parentNode!==t)&&t.insertBefore(n,t.actual_end_child):t.actual_end_child=n.nextSibling}else(n.parentNode!==t||n.nextSibling!==null)&&t.appendChild(n)}function st(t,n,e){m&&!e?O(t,n):(n.parentNode!==t||n.nextSibling!=e)&&t.insertBefore(n,e||null)}function ot(t){t.parentNode&&t.parentNode.removeChild(t)}function at(t,n){for(let e=0;e<t.length;e+=1)t[e]&&t[e].d(n)}function q(t){return document.createElement(t)}function z(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}function v(t){return document.createTextNode(t)}function ut(){return v(" ")}function ft(){return v("")}function _t(t,n,e,i){return t.addEventListener(n,e,i),()=>t.removeEventListener(n,e,i)}function dt(t){return function(n){return n.stopPropagation(),t.call(this,n)}}function F(t,n,e){e==null?t.removeAttribute(n):t.getAttribute(n)!==e&&t.setAttribute(n,e)}function ht(t,n){for(const e in n)F(t,e,n[e])}function mt(t){return t.dataset.svelteH}function pt(t){return Array.from(t.childNodes)}function I(t){t.claim_info===void 0&&(t.claim_info={last_index:0,total_claimed:0})}function A(t,n,e,i,c=!1){I(t);const o=(()=>{for(let r=t.claim_info.last_index;r<t.length;r++){const s=t[r];if(n(s)){const l=e(s);return l===void 0?t.splice(r,1):t[r]=l,c||(t.claim_info.last_index=r),s}}for(let r=t.claim_info.last_index-1;r>=0;r--){const s=t[r];if(n(s)){const l=e(s);return l===void 0?t.splice(r,1):t[r]=l,c?l===void 0&&t.claim_info.last_index--:t.claim_info.last_index=r,s}}return i()})();return o.claim_order=t.claim_info.total_claimed,t.claim_info.total_claimed+=1,o}function S(t,n,e,i){return A(t,c=>c.nodeName===n,c=>{const o=[];for(let r=0;r<c.attributes.length;r++){const s=c.attributes[r];e[s.name]||o.push(s.name)}o.forEach(r=>c.removeAttribute(r))},()=>i(n))}function bt(t,n,e){return S(t,n,e,q)}function yt(t,n,e){return S(t,n,e,z)}function R(t,n){return A(t,e=>e.nodeType===3,e=>{const i=""+n;if(e.data.startsWith(i)){if(e.data.length!==i.length)return e.splitText(i.length)}else e.data=i},()=>v(n),!0)}function gt(t){return R(t," ")}function xt(t,n){n=""+n,t.data!==n&&(t.data=n)}function vt(t,n,e,i){e==null?t.style.removeProperty(n):t.style.setProperty(n,e,i?"important":"")}function Et(t,n,e){t.classList.toggle(n,!!e)}function U(t,n,{bubbles:e=!1,cancelable:i=!1}={}){return new CustomEvent(t,{detail:n,bubbles:e,cancelable:i})}function wt(t,n){const e=[];let i=0;for(const c of n.childNodes)if(c.nodeType===8){const o=c.textContent.trim();o===`HEAD_${t}_END`?(i-=1,e.push(c)):o===`HEAD_${t}_START`&&(i+=1,e.push(c))}else i>0&&e.push(c);return e}function kt(t,n){return new t(n)}let h;function b(t){h=t}function p(){if(!h)throw new Error("Function called outside component initialization");return h}function Nt(t){p().$$.on_mount.push(t)}function At(t){p().$$.after_update.push(t)}function St(t){p().$$.on_destroy.push(t)}function jt(){const t=p();return(n,e,{cancelable:i=!1}={})=>{const c=t.$$.callbacks[n];if(c){const o=U(n,e,{cancelable:i});return c.slice().forEach(r=>{r.call(t,o)}),!o.defaultPrevented}return!0}}function Dt(t,n){const e=t.$$.callbacks[n.type];e&&e.slice().forEach(i=>i.call(this,n))}const d=[],w=[];let _=[];const g=[],j=Promise.resolve();let x=!1;function W(){x||(x=!0,j.then(J))}function Tt(){return W(),j}function G(t){_.push(t)}function Ct(t){g.push(t)}const y=new Set;let f=0;function J(){if(f!==0)return;const t=h;do{try{for(;f<d.length;){const n=d[f];f++,b(n),K(n.$$)}}catch(n){throw d.length=0,f=0,n}for(b(null),d.length=0,f=0;w.length;)w.pop()();for(let n=0;n<_.length;n+=1){const e=_[n];y.has(e)||(y.add(e),e())}_.length=0}while(d.length);for(;g.length;)g.pop()();x=!1,y.clear(),b(t)}function K(t){if(t.fragment!==null){t.update(),P(t.before_update);const n=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,n),t.after_update.forEach(G)}}function Pt(t){const n=[],e=[];_.forEach(i=>t.indexOf(i)===-1?n.push(i):e.push(i)),e.forEach(i=>i()),_=n}export{Et as $,X as A,G as B,Pt as C,h as D,b as E,C as F,d as G,W as H,rt as I,lt as J,z as K,yt as L,mt as M,Z as N,wt as O,tt as P,nt as Q,$ as R,_t as S,ct as T,jt as U,St as V,T as W,ht as X,at as Y,it as Z,et as _,ut as a,dt as a0,Dt as a1,Ct as a2,pt as b,bt as c,R as d,q as e,ot as f,gt as g,O as h,st as i,xt as j,Y as k,ft as l,At as m,k as n,Nt as o,F as p,vt as q,w as r,V as s,v as t,kt as u,Tt as v,P as w,Q as x,J as y,H as z};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
